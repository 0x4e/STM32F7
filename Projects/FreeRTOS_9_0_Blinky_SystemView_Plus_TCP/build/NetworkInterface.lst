ARM GAS  /tmp/cc2OCNfl.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"NetworkInterface.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.bss.ulISREvents,"aw",%nobits
  21              		.align	2
  24              	ulISREvents:
  25 0000 00000000 		.space	4
  26              		.section	.bss.ulPHYLinkStatus,"aw",%nobits
  27              		.align	2
  30              	ulPHYLinkStatus:
  31 0000 00000000 		.space	4
  32              		.section	.rodata.xLLMNR_MACAddress,"a",%progbits
  33              		.align	2
  36              	xLLMNR_MACAddress:
  37 0000 01       		.byte	1
  38 0001 00       		.byte	0
  39 0002 5E       		.byte	94
  40 0003 00       		.byte	0
  41 0004 00       		.byte	0
  42 0005 FC       		.byte	-4
  43              		.section	.bss.xETH,"aw",%nobits
  44              		.align	2
  47              	xETH:
  48 0000 00000000 		.space	72
  48      00000000 
  48      00000000 
  48      00000000 
  48      00000000 
  49              		.section	.bss.xTXDescriptorSemaphore,"aw",%nobits
  50              		.align	2
  53              	xTXDescriptorSemaphore:
  54 0000 00000000 		.space	4
  55              		.global	DMARxDscrTab
  56              		.section	.first_data,"aw",%progbits
  57              		.align	4
  60              	DMARxDscrTab:
  61 0000 00000000 		.space	128
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
ARM GAS  /tmp/cc2OCNfl.s 			page 2


  62              		.global	DMATxDscrTab
  63              		.align	4
  66              	DMATxDscrTab:
  67 0080 00000000 		.space	128
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.DMATxDescToClear,"aw",%nobits
  69              		.align	2
  72              	DMATxDescToClear:
  73 0000 00000000 		.space	4
  74              		.section	.bss.ulBCRvalue,"aw",%nobits
  75              		.align	2
  78              	ulBCRvalue:
  79 0000 00000000 		.space	4
  80              		.section	.bss.ulACRValue,"aw",%nobits
  81              		.align	2
  84              	ulACRValue:
  85 0000 00000000 		.space	4
  86              		.section	.bss.xEMACTaskHandle,"aw",%nobits
  87              		.align	2
  90              	xEMACTaskHandle:
  91 0000 00000000 		.space	4
  92              		.global	xPHYProperties
  93              		.section	.rodata.xPHYProperties,"a",%progbits
  94              		.align	2
  97              	xPHYProperties:
  98 0000 03       		.byte	3
  99 0001 03       		.byte	3
 100 0002 03       		.byte	3
 101 0003 00       		.space	1
 102              		.section	.text.HAL_ETH_RxCpltCallback,"ax",%progbits
 103              		.align	2
 104              		.global	HAL_ETH_RxCpltCallback
 105              		.thumb
 106              		.thumb_func
 108              	HAL_ETH_RxCpltCallback:
 109              	.LFB164:
 110              		.file 1 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterfac
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Some constants, hardware definitions and comments taken from ST's HAL driver
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * library, COPYRIGHT(c) 2015 STMicroelectronics.
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Authors include Hein Tibosch and Richard Barry
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *******************************************************************************
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***                                                                         ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   download):                                                            ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***                                                                         ***
ARM GAS  /tmp/cc2OCNfl.s 			page 3


  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   for some time.  Be aware however that we are still refining its       ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   design, the source code does not yet quite conform to the strict      ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   the documentation and testing is not necessarily complete.            ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***   under a license other than that described below.                      ***
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***                                                                         ***
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***                                                                         ***
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *******************************************************************************
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * executed, as follows:
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * licenses follow:
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * implied, expressed, or statutory.
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * 1 tab == 4 spaces!
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * http://www.FreeRTOS.org
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * http://www.FreeRTOS.org/plus
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * http://www.FreeRTOS.org/labs
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Standard includes. */
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include <stdint.h>
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include <stdio.h>
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include <stdlib.h>
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* FreeRTOS includes. */
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "FreeRTOS.h"
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "task.h"
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "queue.h"
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "semphr.h"
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* FreeRTOS+TCP includes. */
ARM GAS  /tmp/cc2OCNfl.s 			page 4


  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "FreeRTOS_IP.h"
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "FreeRTOS_Sockets.h"
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "FreeRTOS_IP_Private.h"
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "FreeRTOS_DNS.h"
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "NetworkBufferManagement.h"
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #include "NetworkInterface.h"
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* ST includes. */
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #ifdef STM32F7xx
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#include "stm32f7xx_hal.h"
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #else
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#include "stm32f4xx_hal.h"
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #ifndef	BMSR_LINK_STATUS
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define BMSR_LINK_STATUS            0x0004UL
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #ifndef	PHY_LS_HIGH_CHECK_TIME_MS
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Check if the LinkSStatus in the PHY is still high after 15 seconds of not
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	receiving packets. */
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHY_LS_HIGH_CHECK_TIME_MS	15000
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #ifndef	PHY_LS_LOW_CHECK_TIME_MS
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Check if the LinkSStatus in the PHY is still low every second. */
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHY_LS_LOW_CHECK_TIME_MS	1000
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Interrupt events to process.  Currently only the Rx event is processed
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** although code for other events is included to allow for possible future
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** expansion. */
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define EMAC_IF_RX_EVENT        1UL
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define EMAC_IF_TX_EVENT        2UL
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define EMAC_IF_ERR_EVENT       4UL
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define EMAC_IF_ALL_EVENT       ( EMAC_IF_RX_EVENT | EMAC_IF_TX_EVENT | EMAC_IF_ERR_EVENT )
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define ETH_DMA_ALL_INTS \
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	( ETH_DMA_IT_TST | ETH_DMA_IT_PMT | ETH_DMA_IT_MMC | ETH_DMA_IT_NIS | ETH_DMA_IT_ER | \
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	  ETH_DMA_IT_FBE | ETH_DMA_IT_RWT | ETH_DMA_IT_RPS | ETH_DMA_IT_RBU | ETH_DMA_IT_R | \
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	  ETH_DMA_IT_TU | ETH_DMA_IT_RO | ETH_DMA_IT_TJT | ETH_DMA_IT_TPS | ETH_DMA_IT_T )
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Naming and numbering of PHY registers. */
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHY_REG_00_BMCR			0x00	/* Basic Mode Control Register. */
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHY_REG_01_BMSR			0x01	/* Basic Mode Status Register. */
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHY_REG_02_PHYSID1		0x02	/* PHYS ID 1 */
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHY_REG_03_PHYSID2		0x03	/* PHYS ID 2 */
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHY_REG_04_ADVERTISE	0x04	/* Advertisement control reg */
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHY_ID_LAN8742A		0x0007c130
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHY_ID_LAN8720		0x0007c0f0
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHY_ID_DP83848I		0x20005C90
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #ifndef USE_STM324xG_EVAL
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define USE_STM324xG_EVAL	1
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
ARM GAS  /tmp/cc2OCNfl.s 			page 5


 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if defined( STM32F7xx )
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define EXPECTED_PHY_ID			PHY_ID_LAN8742A
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define	PHY_REG_1F_PHYSPCS		0x1F	/* 31 RW PHY Special Control Status */
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Use 3 bits in register 31 */
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHYSPCS_SPEED_MASK		0x0C
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHYSPCS_SPEED_10		0x04
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHYSPCS_SPEED_100		0x08
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHYSPCS_FULL_DUPLEX		0x10
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #elif( USE_STM324xG_EVAL == 0 )
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define EXPECTED_PHY_ID			PHY_ID_LAN8720
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define	PHY_REG_1F_PHYSPCS		0x1F	/* 31 RW PHY Special Control Status */
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Use 3 bits in register 31 */
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHYSPCS_SPEED_MASK		0x0C
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHYSPCS_SPEED_10		0x04
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHYSPCS_SPEED_100		0x08
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHYSPCS_FULL_DUPLEX		0x10
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #else
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define EXPECTED_PHY_ID		PHY_ID_DP83848I
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define PHY_REG_10_PHY_SR		0x10	/* PHY status register Offset */
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define	PHY_REG_19_PHYCR		0x19	/* 25 RW PHY Control Register */
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Some defines used internally here to indicate preferences about speed, MDIX
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** (wired direct or crossed), and duplex (half or full). */
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_SPEED_10       1
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_SPEED_100      2
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_SPEED_AUTO     (PHY_SPEED_10|PHY_SPEED_100)
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_MDIX_DIRECT    1
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_MDIX_CROSSED   2
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_MDIX_AUTO      (PHY_MDIX_CROSSED|PHY_MDIX_DIRECT)
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_DUPLEX_HALF    1
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_DUPLEX_FULL    2
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define	PHY_DUPLEX_AUTO    (PHY_DUPLEX_FULL|PHY_DUPLEX_HALF)
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** //#define PHY_AUTONEGO_COMPLETE    ((uint16_t)0x0020)  /*!< Auto-Negotiation process completed   */
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Description of all capabilities that can be advertised to
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * the peer (usually a switch or router).
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define ADVERTISE_CSMA			0x0001		/* Only selector supported. */
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define ADVERTISE_10HALF		0x0020		/* Try for 10mbps half-duplex. */
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define ADVERTISE_10FULL		0x0040		/* Try for 10mbps full-duplex. */
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define ADVERTISE_100HALF		0x0080		/* Try for 100mbps half-duplex. */
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define ADVERTISE_100FULL		0x0100		/* Try for 100mbps full-duplex. */
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define ADVERTISE_ALL			( ADVERTISE_10HALF | ADVERTISE_10FULL | \
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 								  ADVERTISE_100HALF | ADVERTISE_100FULL)
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Value for the 'PHY_REG_00_BMCR', the PHY's Basic Mode Control Register.
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define BMCR_FULLDPLX			0x0100		/* Full duplex. */
ARM GAS  /tmp/cc2OCNfl.s 			page 6


 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define BMCR_ANRESTART			0x0200		/* Auto negotiation restart. */
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define BMCR_ANENABLE			0x1000		/* Enable auto negotiation. */
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define BMCR_SPEED100			0x2000		/* Select 100Mbps. */
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define BMCR_RESET				0x8000		/* Reset the PHY. */
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHYCR_MDIX_EN			0x8000		/* Enable Auto MDIX. */
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define PHYCR_MDIX_FORCE		0x4000		/* Force MDIX crossed. */
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define ipFRAGMENT_OFFSET_BIT_MASK		( ( uint16_t ) 0x0fff ) /* The bits in the two byte IP header f
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Most users will want a PHY that negotiates about
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * the connection properties: speed, dmix and duplex.
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * On some rare cases, you want to select what is being
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * advertised, properties like MDIX and duplex.
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if !defined( ipconfigETHERNET_AN_ENABLE )
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Enable auto-negotiation */
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define ipconfigETHERNET_AN_ENABLE				1
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if !defined( ipconfigETHERNET_AUTO_CROSS_ENABLE )
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define ipconfigETHERNET_AUTO_CROSS_ENABLE		1
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( ipconfigETHERNET_AN_ENABLE == 0 )
 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/*
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	 * The following three defines are only used in case there
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	 * is no auto-negotiation.
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	 */
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#if !defined( ipconfigETHERNET_CROSSED_LINK )
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#define	ipconfigETHERNET_CROSSED_LINK			1
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#if !defined( ipconfigETHERNET_USE_100MB )
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#define ipconfigETHERNET_USE_100MB				1
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif
 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#if !defined( ipconfigETHERNET_USE_FULL_DUPLEX )
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#define ipconfigETHERNET_USE_FULL_DUPLEX		1
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif /* ipconfigETHERNET_AN_ENABLE == 0 */
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Default the size of the stack used by the EMAC deferred handler task to twice
 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** the size of the stack used by the idle task - but allow this to be overridden in
 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** FreeRTOSConfig.h as configMINIMAL_STACK_SIZE is a user definable constant. */
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #ifndef configEMAC_TASK_STACK_SIZE
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#define configEMAC_TASK_STACK_SIZE ( 2 * configMINIMAL_STACK_SIZE )
 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Two choices must be made: RMII versus MII,
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** and the index of the PHY in use ( between 0 and 31 ). */
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #ifndef ipconfigUSE_RMII
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#ifdef STM32F7xx
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#define ipconfigUSE_RMII	1
 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#else
ARM GAS  /tmp/cc2OCNfl.s 			page 7


 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#define ipconfigUSE_RMII	0
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif /* STM32F7xx */
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif /* ipconfigUSE_RMII */
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #ifndef ipconfigPHY_INDEX
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#ifdef STM32F7xx
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#define ipconfigPHY_INDEX	0
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#else
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#define ipconfigPHY_INDEX	1
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif /* STM32F7xx */
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif /* ipconfigPHY_INDEX */
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * A deferred interrupt handler task that processes
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvEMACHandlerTask( void *pvParameters );
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Force a negotiation with the Switch or Router and wait for LS.
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvEthernetUpdateConfig( BaseType_t xForce );
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * See if there is a new packet and forward it to the IP-task.
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static BaseType_t prvNetworkInterfaceInput( void );
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( ipconfigUSE_LLMNR != 0 )
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/*
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	 * For LLMNR, an extra MAC-address must be configured to
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	 * be able to receive the multicast messages.
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	 */
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	static void prvMACAddressConfig(ETH_HandleTypeDef *heth, uint32_t ulIndex, uint8_t *Addr);
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Check if a given packet should be accepted.
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static BaseType_t xMayAcceptPacket( uint8_t *pcBuffer );
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Initialise the TX descriptors.
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvDMATxDescListInit( void );
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Initialise the RX descriptors.
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvDMARxDescListInit( void );
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* After packets have been sent, the network
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** buffers will be released. */
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void vClearTXBuffers( void );
 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
ARM GAS  /tmp/cc2OCNfl.s 			page 8


 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** typedef struct _PhyProperties_t
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	uint8_t speed;
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	uint8_t mdix;
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	uint8_t duplex;
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	uint8_t spare;
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** } PhyProperties_t;
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Bit map of outstanding ETH interrupt events for processing.  Currently only
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** the Rx interrupt is handled, although code is included for other events to
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** enable future expansion. */
 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static volatile uint32_t ulISREvents;
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* A copy of PHY register 1: 'PHY_REG_01_BMSR' */
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static uint32_t ulPHYLinkStatus = 0;
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( ipconfigUSE_LLMNR == 1 )
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	static const uint8_t xLLMNR_MACAddress[] = { 0x01, 0x00, 0x5E, 0x00, 0x00, 0xFC };
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Ethernet handle. */
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static ETH_HandleTypeDef xETH;
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* xTXDescriptorSemaphore is a counting semaphore with
 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** a maximum count of ETH_TXBUFNB, which is the number of
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** DMA TX descriptors. */
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static SemaphoreHandle_t xTXDescriptorSemaphore = NULL;
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*
 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * Note: it is adviced to define both
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *     #define  ipconfigZERO_COPY_RX_DRIVER   1
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *     #define  ipconfigZERO_COPY_TX_DRIVER   1
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * The method using memcpy is slower and probaly uses more RAM memory.
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * The possibility is left in the code just for comparison.
 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  *
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * It is adviced to define ETH_TXBUFNB at least 4. Note that no
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  * TX buffers are allocated in a zero-copy driver.
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****  */
 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* MAC buffers: ---------------------------------------------------------*/
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Put the DMA descriptors in '.first_data'.
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** This is important for STM32F7, which has an L1 data cache.
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** The first 64KB of the SRAM is not cached. */
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Ethernet Rx MA Descriptor */
 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** __attribute__ ((aligned (16)))
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** __attribute__ ((section(".first_data")))
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ETH_DMADescTypeDef  DMARxDscrTab[ ETH_RXBUFNB ];
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( ipconfigZERO_COPY_RX_DRIVER == 0 )
 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Ethernet Receive Buffer */
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	__ALIGN_BEGIN uint8_t Rx_Buff[ ETH_RXBUFNB ][ ETH_RX_BUF_SIZE ] __ALIGN_END;
 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
ARM GAS  /tmp/cc2OCNfl.s 			page 9


 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Ethernet Tx DMA Descriptor */
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** __attribute__ ((aligned (16)))
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** __attribute__ ((section(".first_data")))
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ETH_DMADescTypeDef  DMATxDscrTab[ ETH_TXBUFNB ];
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( ipconfigZERO_COPY_TX_DRIVER == 0 )
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Ethernet Transmit Buffer */
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	__ALIGN_BEGIN uint8_t Tx_Buff[ ETH_TXBUFNB ][ ETH_TX_BUF_SIZE ] __ALIGN_END;
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* DMATxDescToClear points to the next TX DMA descriptor
 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	that must be cleared by vClearTXBuffers(). */
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	static __IO ETH_DMADescTypeDef  *DMATxDescToClear;
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Value to be written into the 'Basic mode Control Register'. */
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static uint32_t ulBCRvalue;
 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Value to be written into the 'Advertisement Control Register'. */
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static uint32_t ulACRValue;
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* ucMACAddress as it appears in main.c */
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** extern const uint8_t ucMACAddress[ 6 ];
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Holds the handle of the task used as a deferred interrupt processor.  The
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** handle is used so direct notifications can be sent to the task for all EMAC/DMA
 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** related interrupts. */
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static TaskHandle_t xEMACTaskHandle = NULL;
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* For local use only: describe the PHY's properties: */
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** const PhyProperties_t xPHYProperties =
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#if( ipconfigETHERNET_AN_ENABLE != 0 )
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		.speed = PHY_SPEED_AUTO,
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		.duplex = PHY_DUPLEX_AUTO,
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#else
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigETHERNET_USE_100MB != 0 )
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			.speed = PHY_SPEED_100,
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#else
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			.speed = PHY_SPEED_10,
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigETHERNET_USE_FULL_DUPLEX != 0 )
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			.duplex = PHY_DUPLEX_FULL,
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#else
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			.duplex = PHY_DUPLEX_HALF,
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif
 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#if( ipconfigETHERNET_AN_ENABLE != 0 ) && ( ipconfigETHERNET_AUTO_CROSS_ENABLE != 0 )
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		.mdix = PHY_MDIX_AUTO,
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#elif( ipconfigETHERNET_CROSSED_LINK != 0 )
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		.mdix = PHY_MDIX_CROSSED,
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#else
 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		.mdix = PHY_MDIX_DIRECT,
ARM GAS  /tmp/cc2OCNfl.s 			page 10


 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif
 418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** };
 419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef *heth )
 423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 111              		.loc 1 423 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 16
 114              		@ frame_needed = 1, uses_anonymous_args = 0
 115 0000 80B5     		push	{r7, lr}
 116              	.LCFI0:
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 7, -8
 119              		.cfi_offset 14, -4
 120 0002 84B0     		sub	sp, sp, #16
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 24
 123 0004 00AF     		add	r7, sp, #0
 124              	.LCFI2:
 125              		.cfi_def_cfa_register 7
 126 0006 7860     		str	r0, [r7, #4]
 424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 127              		.loc 1 424 0
 128 0008 0023     		movs	r3, #0
 129 000a FB60     		str	r3, [r7, #12]
 425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Ethernet RX-Complete callback function, elsewhere declared as weak. */
 427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****     ulISREvents |= EMAC_IF_RX_EVENT;
 130              		.loc 1 427 0
 131 000c 124B     		ldr	r3, .L4
 132 000e 1B68     		ldr	r3, [r3]
 133 0010 43F00103 		orr	r3, r3, #1
 134 0014 104A     		ldr	r2, .L4
 135 0016 1360     		str	r3, [r2]
 428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Wakeup the prvEMACHandlerTask. */
 429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( xEMACTaskHandle != NULL )
 136              		.loc 1 429 0
 137 0018 104B     		ldr	r3, .L4+4
 138 001a 1B68     		ldr	r3, [r3]
 139 001c 002B     		cmp	r3, #0
 140 001e 17D0     		beq	.L1
 430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 141              		.loc 1 431 0
 142 0020 0E4B     		ldr	r3, .L4+4
 143 0022 1A68     		ldr	r2, [r3]
 144 0024 07F10C03 		add	r3, r7, #12
 145 0028 1046     		mov	r0, r2
 146 002a 1946     		mov	r1, r3
 147 002c FFF7FEFF 		bl	vTaskNotifyGiveFromISR
 432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 148              		.loc 1 432 0
 149 0030 FB68     		ldr	r3, [r7, #12]
 150 0032 002B     		cmp	r3, #0
 151 0034 0AD0     		beq	.L3
ARM GAS  /tmp/cc2OCNfl.s 			page 11


 152              		.loc 1 432 0 is_stmt 0 discriminator 1
 153 0036 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordExitISRToScheduler
 154 003a 094B     		ldr	r3, .L4+8
 155 003c 4FF08052 		mov	r2, #268435456
 156 0040 1A60     		str	r2, [r3]
 157              	@ 432 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_S
 158 0042 BFF34F8F 		dsb
 159              	@ 0 "" 2
 160              	@ 432 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_S
 161 0046 BFF36F8F 		isb
 162              	@ 0 "" 2
 163              		.thumb
 164 004a 01E0     		b	.L1
 165              	.L3:
 166              		.loc 1 432 0 discriminator 2
 167 004c FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordExitISR
 168              	.L1:
 433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 169              		.loc 1 434 0 is_stmt 1
 170 0050 1037     		adds	r7, r7, #16
 171              	.LCFI3:
 172              		.cfi_def_cfa_offset 8
 173 0052 BD46     		mov	sp, r7
 174              	.LCFI4:
 175              		.cfi_def_cfa_register 13
 176              		@ sp needed
 177 0054 80BD     		pop	{r7, pc}
 178              	.L5:
 179 0056 00BF     		.align	2
 180              	.L4:
 181 0058 00000000 		.word	ulISREvents
 182 005c 00000000 		.word	xEMACTaskHandle
 183 0060 04ED00E0 		.word	-536810236
 184              		.cfi_endproc
 185              	.LFE164:
 187              		.section	.text.HAL_ETH_TxCpltCallback,"ax",%progbits
 188              		.align	2
 189              		.global	HAL_ETH_TxCpltCallback
 190              		.thumb
 191              		.thumb_func
 193              	HAL_ETH_TxCpltCallback:
 194              	.LFB165:
 435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef *heth )
 438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 195              		.loc 1 438 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 16
 198              		@ frame_needed = 1, uses_anonymous_args = 0
 199 0000 80B5     		push	{r7, lr}
 200              	.LCFI5:
 201              		.cfi_def_cfa_offset 8
 202              		.cfi_offset 7, -8
 203              		.cfi_offset 14, -4
 204 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/cc2OCNfl.s 			page 12


 205              	.LCFI6:
 206              		.cfi_def_cfa_offset 24
 207 0004 00AF     		add	r7, sp, #0
 208              	.LCFI7:
 209              		.cfi_def_cfa_register 7
 210 0006 7860     		str	r0, [r7, #4]
 439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 211              		.loc 1 439 0
 212 0008 0023     		movs	r3, #0
 213 000a FB60     		str	r3, [r7, #12]
 440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* This call-back is only useful in case packets are being sent
 442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	zero-copy.  Once they're sent, the buffers will be released
 443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	by the function vClearTXBuffers(). */
 444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ulISREvents |= EMAC_IF_TX_EVENT;
 214              		.loc 1 444 0
 215 000c 124B     		ldr	r3, .L9
 216 000e 1B68     		ldr	r3, [r3]
 217 0010 43F00203 		orr	r3, r3, #2
 218 0014 104A     		ldr	r2, .L9
 219 0016 1360     		str	r3, [r2]
 445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Wakeup the prvEMACHandlerTask. */
 446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( xEMACTaskHandle != NULL )
 220              		.loc 1 446 0
 221 0018 104B     		ldr	r3, .L9+4
 222 001a 1B68     		ldr	r3, [r3]
 223 001c 002B     		cmp	r3, #0
 224 001e 17D0     		beq	.L6
 447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 225              		.loc 1 448 0
 226 0020 0E4B     		ldr	r3, .L9+4
 227 0022 1A68     		ldr	r2, [r3]
 228 0024 07F10C03 		add	r3, r7, #12
 229 0028 1046     		mov	r0, r2
 230 002a 1946     		mov	r1, r3
 231 002c FFF7FEFF 		bl	vTaskNotifyGiveFromISR
 449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 232              		.loc 1 449 0
 233 0030 FB68     		ldr	r3, [r7, #12]
 234 0032 002B     		cmp	r3, #0
 235 0034 0AD0     		beq	.L8
 236              		.loc 1 449 0 is_stmt 0 discriminator 1
 237 0036 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordExitISRToScheduler
 238 003a 094B     		ldr	r3, .L9+8
 239 003c 4FF08052 		mov	r2, #268435456
 240 0040 1A60     		str	r2, [r3]
 241              	@ 449 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_S
 242 0042 BFF34F8F 		dsb
 243              	@ 0 "" 2
 244              	@ 449 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_S
 245 0046 BFF36F8F 		isb
 246              	@ 0 "" 2
 247              		.thumb
 248 004a 01E0     		b	.L6
 249              	.L8:
 250              		.loc 1 449 0 discriminator 2
ARM GAS  /tmp/cc2OCNfl.s 			page 13


 251 004c FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordExitISR
 252              	.L6:
 450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 253              		.loc 1 452 0 is_stmt 1
 254 0050 1037     		adds	r7, r7, #16
 255              	.LCFI8:
 256              		.cfi_def_cfa_offset 8
 257 0052 BD46     		mov	sp, r7
 258              	.LCFI9:
 259              		.cfi_def_cfa_register 13
 260              		@ sp needed
 261 0054 80BD     		pop	{r7, pc}
 262              	.L10:
 263 0056 00BF     		.align	2
 264              	.L9:
 265 0058 00000000 		.word	ulISREvents
 266 005c 00000000 		.word	xEMACTaskHandle
 267 0060 04ED00E0 		.word	-536810236
 268              		.cfi_endproc
 269              	.LFE165:
 271              		.section	.text.vClearTXBuffers,"ax",%progbits
 272              		.align	2
 273              		.thumb
 274              		.thumb_func
 276              	vClearTXBuffers:
 277              	.LFB166:
 453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void vClearTXBuffers()
 456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 278              		.loc 1 456 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 16
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282 0000 80B5     		push	{r7, lr}
 283              	.LCFI10:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 84B0     		sub	sp, sp, #16
 288              	.LCFI11:
 289              		.cfi_def_cfa_offset 24
 290 0004 00AF     		add	r7, sp, #0
 291              	.LCFI12:
 292              		.cfi_def_cfa_register 7
 457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** __IO ETH_DMADescTypeDef  *txLastDescriptor = xETH.TxDesc;
 293              		.loc 1 457 0
 294 0006 234B     		ldr	r3, .L18
 295 0008 DB6A     		ldr	r3, [r3, #44]
 296 000a BB60     		str	r3, [r7, #8]
 458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** size_t uxCount = ( ( UBaseType_t ) ETH_TXBUFNB ) - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 297              		.loc 1 458 0
 298 000c 224B     		ldr	r3, .L18+4
 299 000e 1B68     		ldr	r3, [r3]
 300 0010 1846     		mov	r0, r3
ARM GAS  /tmp/cc2OCNfl.s 			page 14


 301 0012 FFF7FEFF 		bl	uxQueueMessagesWaiting
 302 0016 0346     		mov	r3, r0
 303 0018 C3F10403 		rsb	r3, r3, #4
 304 001c FB60     		str	r3, [r7, #12]
 459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer;
 461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	uint8_t *ucPayLoad;
 462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
 463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* This function is called after a TX-completion interrupt.
 465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	It will release each Network Buffer used in xNetworkInterfaceOutput().
 466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	'uxCount' represents the number of descriptors given to DMA for transmission.
 467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	After sending a packet, the DMA will clear the 'ETH_DMATXDESC_OWN' bit. */
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 305              		.loc 1 468 0
 306 001e 2EE0     		b	.L12
 307              	.L17:
 469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( DMATxDescToClear == txLastDescriptor ) && ( uxCount != ETH_TXBUFNB ) )
 308              		.loc 1 470 0
 309 0020 1E4B     		ldr	r3, .L18+8
 310 0022 1A68     		ldr	r2, [r3]
 311 0024 BB68     		ldr	r3, [r7, #8]
 312 0026 9A42     		cmp	r2, r3
 313 0028 03D1     		bne	.L13
 314              		.loc 1 470 0 is_stmt 0 discriminator 1
 315 002a FB68     		ldr	r3, [r7, #12]
 316 002c 042B     		cmp	r3, #4
 317 002e 00D0     		beq	.L13
 471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			break;
 318              		.loc 1 472 0 is_stmt 1
 319 0030 2DE0     		b	.L11
 320              	.L13:
 473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			ucPayLoad = ( uint8_t * )DMATxDescToClear->Buffer1Addr;
 321              		.loc 1 476 0
 322 0032 1A4B     		ldr	r3, .L18+8
 323 0034 1B68     		ldr	r3, [r3]
 324 0036 9B68     		ldr	r3, [r3, #8]
 325 0038 7B60     		str	r3, [r7, #4]
 477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( ucPayLoad != NULL )
 326              		.loc 1 478 0
 327 003a 7B68     		ldr	r3, [r7, #4]
 328 003c 002B     		cmp	r3, #0
 329 003e 0DD0     		beq	.L15
 479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
 480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 330              		.loc 1 480 0
 331 0040 7868     		ldr	r0, [r7, #4]
 332 0042 FFF7FEFF 		bl	pxPacketBuffer_to_NetworkBuffer
 333 0046 3860     		str	r0, [r7]
 481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				if( pxNetworkBuffer != NULL )
 334              		.loc 1 481 0
ARM GAS  /tmp/cc2OCNfl.s 			page 15


 335 0048 3B68     		ldr	r3, [r7]
 336 004a 002B     		cmp	r3, #0
 337 004c 02D0     		beq	.L16
 482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
 483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer ) ;
 338              		.loc 1 483 0
 339 004e 3868     		ldr	r0, [r7]
 340 0050 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 341              	.L16:
 484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
 485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				DMATxDescToClear->Buffer1Addr = ( uint32_t )0u;
 342              		.loc 1 485 0
 343 0054 114B     		ldr	r3, .L18+8
 344 0056 1B68     		ldr	r3, [r3]
 345 0058 0022     		movs	r2, #0
 346 005a 9A60     		str	r2, [r3, #8]
 347              	.L15:
 486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
 487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif /* ipconfigZERO_COPY_TX_DRIVER */
 489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		DMATxDescToClear = ( ETH_DMADescTypeDef * )( DMATxDescToClear->Buffer2NextDescAddr );
 348              		.loc 1 490 0
 349 005c 0F4B     		ldr	r3, .L18+8
 350 005e 1B68     		ldr	r3, [r3]
 351 0060 DB68     		ldr	r3, [r3, #12]
 352 0062 1A46     		mov	r2, r3
 353 0064 0D4B     		ldr	r3, .L18+8
 354 0066 1A60     		str	r2, [r3]
 491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		uxCount--;
 355              		.loc 1 492 0
 356 0068 FB68     		ldr	r3, [r7, #12]
 357 006a 013B     		subs	r3, r3, #1
 358 006c FB60     		str	r3, [r7, #12]
 493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Tell the counting semaphore that one more TX descriptor is available. */
 494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xSemaphoreGive( xTXDescriptorSemaphore );
 359              		.loc 1 494 0
 360 006e 0A4B     		ldr	r3, .L18+4
 361 0070 1B68     		ldr	r3, [r3]
 362 0072 1846     		mov	r0, r3
 363 0074 0021     		movs	r1, #0
 364 0076 0022     		movs	r2, #0
 365 0078 0023     		movs	r3, #0
 366 007a FFF7FEFF 		bl	xQueueGenericSend
 367              	.L12:
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 368              		.loc 1 468 0
 369 007e FB68     		ldr	r3, [r7, #12]
 370 0080 002B     		cmp	r3, #0
 371 0082 04D0     		beq	.L11
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 372              		.loc 1 468 0 is_stmt 0 discriminator 1
 373 0084 054B     		ldr	r3, .L18+8
 374 0086 1B68     		ldr	r3, [r3]
 375 0088 1B68     		ldr	r3, [r3]
 376 008a 002B     		cmp	r3, #0
ARM GAS  /tmp/cc2OCNfl.s 			page 16


 377 008c C8DA     		bge	.L17
 378              	.L11:
 495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 379              		.loc 1 496 0 is_stmt 1
 380 008e 1037     		adds	r7, r7, #16
 381              	.LCFI13:
 382              		.cfi_def_cfa_offset 8
 383 0090 BD46     		mov	sp, r7
 384              	.LCFI14:
 385              		.cfi_def_cfa_register 13
 386              		@ sp needed
 387 0092 80BD     		pop	{r7, pc}
 388              	.L19:
 389              		.align	2
 390              	.L18:
 391 0094 00000000 		.word	xETH
 392 0098 00000000 		.word	xTXDescriptorSemaphore
 393 009c 00000000 		.word	DMATxDescToClear
 394              		.cfi_endproc
 395              	.LFE166:
 397              		.section	.rodata
 398              		.align	2
 399              	.LC0:
 400 0000 454D4143 		.ascii	"EMAC\000"
 400      00
 401 0005 000000   		.align	2
 402              	.LC1:
 403 0008 4C696E6B 		.ascii	"Link Status is high\012\000"
 403      20537461 
 403      74757320 
 403      69732068 
 403      6967680A 
 404 001d 000000   		.align	2
 405              	.LC2:
 406 0020 4C696E6B 		.ascii	"Link Status still low\012\000"
 406      20537461 
 406      74757320 
 406      7374696C 
 406      6C206C6F 
 407              		.section	.text.xNetworkInterfaceInitialise,"ax",%progbits
 408              		.align	2
 409              		.global	xNetworkInterfaceInitialise
 410              		.thumb
 411              		.thumb_func
 413              	xNetworkInterfaceInitialise:
 414              	.LFB167:
 497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xNetworkInterfaceInitialise( void )
 500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 415              		.loc 1 500 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 16
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419 0000 80B5     		push	{r7, lr}
 420              	.LCFI15:
ARM GAS  /tmp/cc2OCNfl.s 			page 17


 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 86B0     		sub	sp, sp, #24
 425              	.LCFI16:
 426              		.cfi_def_cfa_offset 32
 427 0004 02AF     		add	r7, sp, #8
 428              	.LCFI17:
 429              		.cfi_def_cfa 7, 24
 501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** HAL_StatusTypeDef hal_eth_init_status;
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xResult;
 503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( xEMACTaskHandle == NULL )
 430              		.loc 1 504 0
 431 0006 474B     		ldr	r3, .L27
 432 0008 1B68     		ldr	r3, [r3]
 433 000a 002B     		cmp	r3, #0
 434 000c 65D1     		bne	.L21
 505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xTXDescriptorSemaphore == NULL )
 435              		.loc 1 506 0
 436 000e 464B     		ldr	r3, .L27+4
 437 0010 1B68     		ldr	r3, [r3]
 438 0012 002B     		cmp	r3, #0
 439 0014 14D1     		bne	.L22
 507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TXBUFNB, ( UBaseType_t ) 
 440              		.loc 1 508 0
 441 0016 0420     		movs	r0, #4
 442 0018 0421     		movs	r1, #4
 443 001a FFF7FEFF 		bl	xQueueCreateCountingSemaphore
 444 001e 0246     		mov	r2, r0
 445 0020 414B     		ldr	r3, .L27+4
 446 0022 1A60     		str	r2, [r3]
 509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			configASSERT( xTXDescriptorSemaphore );
 447              		.loc 1 509 0
 448 0024 404B     		ldr	r3, .L27+4
 449 0026 1B68     		ldr	r3, [r3]
 450 0028 002B     		cmp	r3, #0
 451 002a 09D1     		bne	.L22
 452              	.LBB20:
 453              	.LBB21:
 454              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
ARM GAS  /tmp/cc2OCNfl.s 			page 18


  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
ARM GAS  /tmp/cc2OCNfl.s 			page 19


  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
ARM GAS  /tmp/cc2OCNfl.s 			page 20


 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
ARM GAS  /tmp/cc2OCNfl.s 			page 21


 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 455              		.loc 2 237 0 discriminator 1
 456              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 457 002c 4FF05003 			mov r3, #80												
 458 0030 83F31188 		msr basepri, r3											
 459 0034 BFF36F8F 		isb														
ARM GAS  /tmp/cc2OCNfl.s 			page 22


 460 0038 BFF34F8F 		dsb														
 461              	
 462              	@ 0 "" 2
 463              		.thumb
 464 003c 7B60     		str	r3, [r7, #4]
 465              	.L23:
 466              	.LBE21:
 467              	.LBE20:
 468              		.loc 1 509 0 discriminator 1
 469 003e FEE7     		b	.L23
 470              	.L22:
 510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Initialise ETH */
 513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Instance = ETH;
 471              		.loc 1 514 0
 472 0040 3A4B     		ldr	r3, .L27+8
 473 0042 3B4A     		ldr	r2, .L27+12
 474 0044 1A60     		str	r2, [r3]
 515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 475              		.loc 1 515 0
 476 0046 394B     		ldr	r3, .L27+8
 477 0048 0122     		movs	r2, #1
 478 004a 5A60     		str	r2, [r3, #4]
 516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Init.Speed = ETH_SPEED_100M;
 479              		.loc 1 516 0
 480 004c 374B     		ldr	r3, .L27+8
 481 004e 4FF48042 		mov	r2, #16384
 482 0052 9A60     		str	r2, [r3, #8]
 517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 483              		.loc 1 517 0
 484 0054 354B     		ldr	r3, .L27+8
 485 0056 4FF40062 		mov	r2, #2048
 486 005a DA60     		str	r2, [r3, #12]
 518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Init.PhyAddress = ipconfigPHY_INDEX;
 487              		.loc 1 518 0
 488 005c 334B     		ldr	r3, .L27+8
 489 005e 0022     		movs	r2, #0
 490 0060 1A82     		strh	r2, [r3, #16]	@ movhi
 519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Init.MACAddr = ( uint8_t *) ucMACAddress;
 491              		.loc 1 520 0
 492 0062 324B     		ldr	r3, .L27+8
 493 0064 334A     		ldr	r2, .L27+16
 494 0066 5A61     		str	r2, [r3, #20]
 521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Init.RxMode = ETH_RXINTERRUPT_MODE;
 495              		.loc 1 521 0
 496 0068 304B     		ldr	r3, .L27+8
 497 006a 0122     		movs	r2, #1
 498 006c 9A61     		str	r2, [r3, #24]
 522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* using the ETH_CHECKSUM_BY_HARDWARE option:
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		both the IP and the protocol checksums will be calculated
 525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		by the peripheral. */
 526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 499              		.loc 1 526 0
ARM GAS  /tmp/cc2OCNfl.s 			page 23


 500 006e 2F4B     		ldr	r3, .L27+8
 501 0070 0022     		movs	r2, #0
 502 0072 DA61     		str	r2, [r3, #28]
 527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigUSE_RMII != 0 )
 529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 503              		.loc 1 530 0
 504 0074 2D4B     		ldr	r3, .L27+8
 505 0076 4FF40002 		mov	r2, #8388608
 506 007a 1A62     		str	r2, [r3, #32]
 531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#else
 533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif /* ipconfigUSE_RMII */
 537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		hal_eth_init_status = HAL_ETH_Init( &xETH );
 507              		.loc 1 538 0
 508 007c 2B48     		ldr	r0, .L27+8
 509 007e FFF7FEFF 		bl	HAL_ETH_Init
 510 0082 0346     		mov	r3, r0
 511 0084 FB72     		strb	r3, [r7, #11]
 539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Only for inspection by debugger. */
 541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		( void ) hal_eth_init_status;
 542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Set the TxDesc and RxDesc pointers. */
 544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.TxDesc = DMATxDscrTab;
 512              		.loc 1 544 0
 513 0086 294B     		ldr	r3, .L27+8
 514 0088 2B4A     		ldr	r2, .L27+20
 515 008a DA62     		str	r2, [r3, #44]
 545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.RxDesc = DMARxDscrTab;
 516              		.loc 1 545 0
 517 008c 274B     		ldr	r3, .L27+8
 518 008e 2B4A     		ldr	r2, .L27+24
 519 0090 9A62     		str	r2, [r3, #40]
 546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Make sure that all unused fields are cleared. */
 548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		memset( &DMATxDscrTab, '\0', sizeof( DMATxDscrTab ) );
 520              		.loc 1 548 0
 521 0092 2948     		ldr	r0, .L27+20
 522 0094 0021     		movs	r1, #0
 523 0096 8022     		movs	r2, #128
 524 0098 FFF7FEFF 		bl	memset
 549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		memset( &DMARxDscrTab, '\0', sizeof( DMARxDscrTab ) );
 525              		.loc 1 549 0
 526 009c 2748     		ldr	r0, .L27+24
 527 009e 0021     		movs	r1, #0
 528 00a0 8022     		movs	r2, #128
 529 00a2 FFF7FEFF 		bl	memset
 550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Initialize Tx Descriptors list: Chain Mode */
 552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		DMATxDescToClear = DMATxDscrTab;
 530              		.loc 1 552 0
ARM GAS  /tmp/cc2OCNfl.s 			page 24


 531 00a6 264B     		ldr	r3, .L27+28
 532 00a8 234A     		ldr	r2, .L27+20
 533 00aa 1A60     		str	r2, [r3]
 553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Initialise TX-descriptors. */
 555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		prvDMATxDescListInit();
 534              		.loc 1 555 0
 535 00ac FFF7FEFF 		bl	prvDMATxDescListInit
 556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Initialise RX-descriptors. */
 558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		prvDMARxDescListInit();
 536              		.loc 1 558 0
 537 00b0 FFF7FEFF 		bl	prvDMARxDescListInit
 559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigUSE_LLMNR != 0 )
 561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Program the LLMNR address at index 1. */
 563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			prvMACAddressConfig( &xETH, ETH_MAC_ADDRESS1, ( uint8_t *) xLLMNR_MACAddress );
 538              		.loc 1 563 0
 539 00b4 1D48     		ldr	r0, .L27+8
 540 00b6 0821     		movs	r1, #8
 541 00b8 224A     		ldr	r2, .L27+32
 542 00ba FFF7FEFF 		bl	prvMACAddressConfig
 564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif
 566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Force a negotiation with the Switch or Router and wait for LS. */
 568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		prvEthernetUpdateConfig( pdTRUE );
 543              		.loc 1 568 0
 544 00be 0120     		movs	r0, #1
 545 00c0 FFF7FEFF 		bl	prvEthernetUpdateConfig
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* The deferred interrupt handler task is created at the highest
 571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		possible priority to ensure the interrupt handler can return directly
 572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
 573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		notify the task when there is something to process. */
 574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES -
 546              		.loc 1 574 0
 547 00c4 0623     		movs	r3, #6
 548 00c6 0093     		str	r3, [sp]
 549 00c8 164B     		ldr	r3, .L27
 550 00ca 0193     		str	r3, [sp, #4]
 551 00cc 1E48     		ldr	r0, .L27+36
 552 00ce 1F49     		ldr	r1, .L27+40
 553 00d0 4FF48072 		mov	r2, #256
 554 00d4 0023     		movs	r3, #0
 555 00d6 FFF7FEFF 		bl	xTaskCreate
 556              	.L21:
 575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	} /* if( xEMACTaskHandle == NULL ) */
 576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
 557              		.loc 1 577 0
 558 00da 1D4B     		ldr	r3, .L27+44
 559 00dc 1B68     		ldr	r3, [r3]
 560 00de 03F00403 		and	r3, r3, #4
 561 00e2 002B     		cmp	r3, #0
 562 00e4 13D0     		beq	.L24
ARM GAS  /tmp/cc2OCNfl.s 			page 25


 578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.Instance->DMAIER |= ETH_DMA_ALL_INTS;
 563              		.loc 1 579 0
 564 00e6 114B     		ldr	r3, .L27+8
 565 00e8 1968     		ldr	r1, [r3]
 566 00ea 104B     		ldr	r3, .L27+8
 567 00ec 1A68     		ldr	r2, [r3]
 568 00ee 41F21C03 		movw	r3, #4124
 569 00f2 1344     		add	r3, r3, r2
 570 00f4 1B68     		ldr	r3, [r3]
 571 00f6 174A     		ldr	r2, .L27+48
 572 00f8 1A43     		orrs	r2, r2, r3
 573 00fa 41F21C03 		movw	r3, #4124
 574 00fe 0B44     		add	r3, r3, r1
 575 0100 1A60     		str	r2, [r3]
 580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xResult = pdPASS;
 576              		.loc 1 580 0
 577 0102 0123     		movs	r3, #1
 578 0104 FB60     		str	r3, [r7, #12]
 581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		FreeRTOS_printf( ( "Link Status is high\n" ) ) ;
 579              		.loc 1 581 0
 580 0106 1448     		ldr	r0, .L27+52
 581 0108 FFF7FEFF 		bl	lUDPLoggingPrintf
 582 010c 04E0     		b	.L25
 583              	.L24:
 582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	else
 584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
 586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		and it will keep on checking the PHY and set ulPHYLinkStatus when necessary. */
 587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xResult = pdFAIL;
 584              		.loc 1 587 0
 585 010e 0023     		movs	r3, #0
 586 0110 FB60     		str	r3, [r7, #12]
 588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		FreeRTOS_printf( ( "Link Status still low\n" ) ) ;
 587              		.loc 1 588 0
 588 0112 1248     		ldr	r0, .L27+56
 589 0114 FFF7FEFF 		bl	lUDPLoggingPrintf
 590              	.L25:
 589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* When returning non-zero, the stack will become active and
 591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****     start DHCP (in configured) */
 592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	return xResult;
 591              		.loc 1 592 0
 592 0118 FB68     		ldr	r3, [r7, #12]
 593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 593              		.loc 1 593 0
 594 011a 1846     		mov	r0, r3
 595 011c 1037     		adds	r7, r7, #16
 596              	.LCFI18:
 597              		.cfi_def_cfa_offset 8
 598 011e BD46     		mov	sp, r7
 599              	.LCFI19:
 600              		.cfi_def_cfa_register 13
 601              		@ sp needed
 602 0120 80BD     		pop	{r7, pc}
 603              	.L28:
ARM GAS  /tmp/cc2OCNfl.s 			page 26


 604 0122 00BF     		.align	2
 605              	.L27:
 606 0124 00000000 		.word	xEMACTaskHandle
 607 0128 00000000 		.word	xTXDescriptorSemaphore
 608 012c 00000000 		.word	xETH
 609 0130 00800240 		.word	1073905664
 610 0134 00000000 		.word	ucMACAddress
 611 0138 00000000 		.word	DMATxDscrTab
 612 013c 00000000 		.word	DMARxDscrTab
 613 0140 00000000 		.word	DMATxDescToClear
 614 0144 00000000 		.word	xLLMNR_MACAddress
 615 0148 00000000 		.word	prvEMACHandlerTask
 616 014c 00000000 		.word	.LC0
 617 0150 00000000 		.word	ulPHYLinkStatus
 618 0154 FB630138 		.word	939615227
 619 0158 08000000 		.word	.LC1
 620 015c 20000000 		.word	.LC2
 621              		.cfi_endproc
 622              	.LFE167:
 624              		.section	.text.prvDMATxDescListInit,"ax",%progbits
 625              		.align	2
 626              		.thumb
 627              		.thumb_func
 629              	prvDMATxDescListInit:
 630              	.LFB168:
 594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvDMATxDescListInit()
 597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 631              		.loc 1 597 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 8
 634              		@ frame_needed = 1, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636 0000 80B4     		push	{r7}
 637              	.LCFI20:
 638              		.cfi_def_cfa_offset 4
 639              		.cfi_offset 7, -4
 640 0002 83B0     		sub	sp, sp, #12
 641              	.LCFI21:
 642              		.cfi_def_cfa_offset 16
 643 0004 00AF     		add	r7, sp, #0
 644              	.LCFI22:
 645              		.cfi_def_cfa_register 7
 598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** ETH_DMADescTypeDef *pxDMADescriptor;
 599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xIndex;
 600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Get the pointer on the first member of the descriptor list */
 602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	pxDMADescriptor = DMATxDscrTab;
 646              		.loc 1 602 0
 647 0006 1A4B     		ldr	r3, .L35
 648 0008 7B60     		str	r3, [r7, #4]
 603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Fill each DMA descriptor with the right values */
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 649              		.loc 1 605 0
 650 000a 0023     		movs	r3, #0
ARM GAS  /tmp/cc2OCNfl.s 			page 27


 651 000c 3B60     		str	r3, [r7]
 652 000e 1FE0     		b	.L30
 653              	.L34:
 606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Set Second Address Chained bit */
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 654              		.loc 1 608 0
 655 0010 7B68     		ldr	r3, [r7, #4]
 656 0012 4FF48012 		mov	r2, #1048576
 657 0016 1A60     		str	r2, [r3]
 609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigZERO_COPY_TX_DRIVER == 0 )
 611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Set Buffer1 address pointer */
 613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDMADescriptor->Buffer1Addr = ( uint32_t )( Tx_Buff[ xIndex ] );
 614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif
 616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xETH.Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 658              		.loc 1 617 0
 659 0018 164B     		ldr	r3, .L35+4
 660 001a DB69     		ldr	r3, [r3, #28]
 661 001c 002B     		cmp	r3, #0
 662 001e 05D1     		bne	.L31
 618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Set the DMA Tx descriptors checksum insertion for TCP, UDP, and ICMP */
 620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDMADescriptor->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 663              		.loc 1 620 0
 664 0020 7B68     		ldr	r3, [r7, #4]
 665 0022 1B68     		ldr	r3, [r3]
 666 0024 43F44002 		orr	r2, r3, #12582912
 667 0028 7B68     		ldr	r3, [r7, #4]
 668 002a 1A60     		str	r2, [r3]
 669              	.L31:
 621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Initialize the next descriptor with the Next Descriptor Polling Enable */
 624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xIndex < ETH_TXBUFNB - 1 )
 670              		.loc 1 624 0
 671 002c 3B68     		ldr	r3, [r7]
 672 002e 022B     		cmp	r3, #2
 673 0030 05D8     		bhi	.L32
 625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Set next descriptor address register with next descriptor base address */
 627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 674              		.loc 1 627 0
 675 0032 7B68     		ldr	r3, [r7, #4]
 676 0034 2033     		adds	r3, r3, #32
 677 0036 1A46     		mov	r2, r3
 678 0038 7B68     		ldr	r3, [r7, #4]
 679 003a DA60     		str	r2, [r3, #12]
 680 003c 02E0     		b	.L33
 681              	.L32:
 628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else
 630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* For last descriptor, set next descriptor address register equal to the first descriptor base 
ARM GAS  /tmp/cc2OCNfl.s 			page 28


 632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMATxDscrTab;
 682              		.loc 1 632 0
 683 003e 0C4A     		ldr	r2, .L35
 684 0040 7B68     		ldr	r3, [r7, #4]
 685 0042 DA60     		str	r2, [r3, #12]
 686              	.L33:
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 687              		.loc 1 605 0 discriminator 2
 688 0044 3B68     		ldr	r3, [r7]
 689 0046 0133     		adds	r3, r3, #1
 690 0048 3B60     		str	r3, [r7]
 691 004a 7B68     		ldr	r3, [r7, #4]
 692 004c 2033     		adds	r3, r3, #32
 693 004e 7B60     		str	r3, [r7, #4]
 694              	.L30:
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 695              		.loc 1 605 0 is_stmt 0 discriminator 1
 696 0050 3B68     		ldr	r3, [r7]
 697 0052 032B     		cmp	r3, #3
 698 0054 DCD9     		bls	.L34
 633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Set Transmit Descriptor List Address Register */
 637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	xETH.Instance->DMATDLAR = ( uint32_t ) DMATxDscrTab;
 699              		.loc 1 637 0 is_stmt 1
 700 0056 074B     		ldr	r3, .L35+4
 701 0058 1A68     		ldr	r2, [r3]
 702 005a 0549     		ldr	r1, .L35
 703 005c 41F21003 		movw	r3, #4112
 704 0060 1344     		add	r3, r3, r2
 705 0062 1960     		str	r1, [r3]
 638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 706              		.loc 1 638 0
 707 0064 0C37     		adds	r7, r7, #12
 708              	.LCFI23:
 709              		.cfi_def_cfa_offset 4
 710 0066 BD46     		mov	sp, r7
 711              	.LCFI24:
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 0068 5DF8047B 		ldr	r7, [sp], #4
 715              	.LCFI25:
 716              		.cfi_restore 7
 717              		.cfi_def_cfa_offset 0
 718 006c 7047     		bx	lr
 719              	.L36:
 720 006e 00BF     		.align	2
 721              	.L35:
 722 0070 00000000 		.word	DMATxDscrTab
 723 0074 00000000 		.word	xETH
 724              		.cfi_endproc
 725              	.LFE168:
 727              		.section	.text.prvDMARxDescListInit,"ax",%progbits
 728              		.align	2
 729              		.thumb
 730              		.thumb_func
ARM GAS  /tmp/cc2OCNfl.s 			page 29


 732              	prvDMARxDescListInit:
 733              	.LFB169:
 639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvDMARxDescListInit()
 642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 734              		.loc 1 642 0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 16
 737              		@ frame_needed = 1, uses_anonymous_args = 0
 738 0000 80B5     		push	{r7, lr}
 739              	.LCFI26:
 740              		.cfi_def_cfa_offset 8
 741              		.cfi_offset 7, -8
 742              		.cfi_offset 14, -4
 743 0002 84B0     		sub	sp, sp, #16
 744              	.LCFI27:
 745              		.cfi_def_cfa_offset 24
 746 0004 00AF     		add	r7, sp, #0
 747              	.LCFI28:
 748              		.cfi_def_cfa_register 7
 643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** ETH_DMADescTypeDef *pxDMADescriptor;
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xIndex;
 645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/*
 646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	 * RX-descriptors.
 647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	 */
 648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Get the pointer on the first member of the descriptor list */
 650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	pxDMADescriptor = DMARxDscrTab;
 749              		.loc 1 650 0
 750 0006 234B     		ldr	r3, .L45
 751 0008 FB60     		str	r3, [r7, #12]
 651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Fill each DMA descriptor with the right values */
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 752              		.loc 1 653 0
 753 000a 0023     		movs	r3, #0
 754 000c BB60     		str	r3, [r7, #8]
 755 000e 34E0     		b	.L38
 756              	.L44:
 654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Set Buffer1 size and Second Address Chained bit */
 657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | (uint32_t)ETH_RX_BUF_SIZE;  
 757              		.loc 1 657 0
 758 0010 FB68     		ldr	r3, [r7, #12]
 759 0012 44F2F452 		movw	r2, #17908
 760 0016 5A60     		str	r2, [r3, #4]
 761              	.LBB22:
 658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigZERO_COPY_RX_DRIVER != 0 )
 660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Set Buffer1 address pointer */
 662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		NetworkBufferDescriptor_t *pxBuffer;
 663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxBuffer = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, 100ul );
 762              		.loc 1 664 0
ARM GAS  /tmp/cc2OCNfl.s 			page 30


 763 0018 40F2F450 		movw	r0, #1524
 764 001c 6421     		movs	r1, #100
 765 001e FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 766 0022 7860     		str	r0, [r7, #4]
 665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* If the assert below fails, make sure that there are at least 'ETH_RXBUFNB'
 666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			Network Buffers available during start-up ( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) */
 667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			configASSERT( pxBuffer != NULL );
 767              		.loc 1 667 0
 768 0024 7B68     		ldr	r3, [r7, #4]
 769 0026 002B     		cmp	r3, #0
 770 0028 09D1     		bne	.L39
 771              	.LBB23:
 772              	.LBB24:
 773              		.loc 2 237 0 discriminator 1
 774              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 775 002a 4FF05003 			mov r3, #80												
 776 002e 83F31188 		msr basepri, r3											
 777 0032 BFF36F8F 		isb														
 778 0036 BFF34F8F 		dsb														
 779              	
 780              	@ 0 "" 2
 781              		.thumb
 782 003a 3B60     		str	r3, [r7]
 783              	.L40:
 784              	.LBE24:
 785              	.LBE23:
 786              		.loc 1 667 0 discriminator 1
 787 003c FEE7     		b	.L40
 788              	.L39:
 668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( pxBuffer != NULL )
 789              		.loc 1 668 0
 790 003e 7B68     		ldr	r3, [r7, #4]
 791 0040 002B     		cmp	r3, #0
 792 0042 08D0     		beq	.L41
 669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
 670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				pxDMADescriptor->Buffer1Addr = (uint32_t)pxBuffer->pucEthernetBuffer;
 793              		.loc 1 670 0
 794 0044 7B68     		ldr	r3, [r7, #4]
 795 0046 9B69     		ldr	r3, [r3, #24]
 796 0048 1A46     		mov	r2, r3
 797 004a FB68     		ldr	r3, [r7, #12]
 798 004c 9A60     		str	r2, [r3, #8]
 671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 799              		.loc 1 671 0
 800 004e FB68     		ldr	r3, [r7, #12]
 801 0050 4FF00042 		mov	r2, #-2147483648
 802 0054 1A60     		str	r2, [r3]
 803              	.L41:
 804              	.LBE22:
 672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
 673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#else
 675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Set Buffer1 address pointer */
 677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDMADescriptor->Buffer1Addr = ( uint32_t )( Rx_Buff[ xIndex ] );
 678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Set Own bit of the Rx descriptor Status */
 679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
ARM GAS  /tmp/cc2OCNfl.s 			page 31


 680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif
 682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Initialize the next descriptor with the Next Descriptor Polling Enable */
 684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xIndex < ETH_RXBUFNB - 1 )
 805              		.loc 1 684 0
 806 0056 BB68     		ldr	r3, [r7, #8]
 807 0058 022B     		cmp	r3, #2
 808 005a 05D8     		bhi	.L42
 685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Set next descriptor address register with next descriptor base address */
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t )( pxDMADescriptor + 1 );
 809              		.loc 1 687 0
 810 005c FB68     		ldr	r3, [r7, #12]
 811 005e 2033     		adds	r3, r3, #32
 812 0060 1A46     		mov	r2, r3
 813 0062 FB68     		ldr	r3, [r7, #12]
 814 0064 DA60     		str	r2, [r3, #12]
 815 0066 02E0     		b	.L43
 816              	.L42:
 688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else
 690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* For last descriptor, set next descriptor address register equal to the first descriptor base 
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMARxDscrTab;
 817              		.loc 1 692 0
 818 0068 0A4A     		ldr	r2, .L45
 819 006a FB68     		ldr	r3, [r7, #12]
 820 006c DA60     		str	r2, [r3, #12]
 821              	.L43:
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 822              		.loc 1 653 0 discriminator 2
 823 006e BB68     		ldr	r3, [r7, #8]
 824 0070 0133     		adds	r3, r3, #1
 825 0072 BB60     		str	r3, [r7, #8]
 826 0074 FB68     		ldr	r3, [r7, #12]
 827 0076 2033     		adds	r3, r3, #32
 828 0078 FB60     		str	r3, [r7, #12]
 829              	.L38:
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 830              		.loc 1 653 0 is_stmt 0 discriminator 1
 831 007a BB68     		ldr	r3, [r7, #8]
 832 007c 032B     		cmp	r3, #3
 833 007e C7D9     		bls	.L44
 693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Set Receive Descriptor List Address Register */
 697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	xETH.Instance->DMARDLAR = ( uint32_t ) DMARxDscrTab;
 834              		.loc 1 697 0 is_stmt 1
 835 0080 054B     		ldr	r3, .L45+4
 836 0082 1A68     		ldr	r2, [r3]
 837 0084 0349     		ldr	r1, .L45
 838 0086 41F20C03 		movw	r3, #4108
 839 008a 1344     		add	r3, r3, r2
 840 008c 1960     		str	r1, [r3]
 698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
ARM GAS  /tmp/cc2OCNfl.s 			page 32


 841              		.loc 1 698 0
 842 008e 1037     		adds	r7, r7, #16
 843              	.LCFI29:
 844              		.cfi_def_cfa_offset 8
 845 0090 BD46     		mov	sp, r7
 846              	.LCFI30:
 847              		.cfi_def_cfa_register 13
 848              		@ sp needed
 849 0092 80BD     		pop	{r7, pc}
 850              	.L46:
 851              		.align	2
 852              	.L45:
 853 0094 00000000 		.word	DMARxDscrTab
 854 0098 00000000 		.word	xETH
 855              		.cfi_endproc
 856              	.LFE169:
 858              		.section	.text.prvMACAddressConfig,"ax",%progbits
 859              		.align	2
 860              		.thumb
 861              		.thumb_func
 863              	prvMACAddressConfig:
 864              	.LFB170:
 699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvMACAddressConfig(ETH_HandleTypeDef *heth, uint32_t ulIndex, uint8_t *Addr)
 702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 865              		.loc 1 702 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 24
 868              		@ frame_needed = 1, uses_anonymous_args = 0
 869              		@ link register save eliminated.
 870 0000 80B4     		push	{r7}
 871              	.LCFI31:
 872              		.cfi_def_cfa_offset 4
 873              		.cfi_offset 7, -4
 874 0002 87B0     		sub	sp, sp, #28
 875              	.LCFI32:
 876              		.cfi_def_cfa_offset 32
 877 0004 00AF     		add	r7, sp, #0
 878              	.LCFI33:
 879              		.cfi_def_cfa_register 7
 880 0006 F860     		str	r0, [r7, #12]
 881 0008 B960     		str	r1, [r7, #8]
 882 000a 7A60     		str	r2, [r7, #4]
 703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** uint32_t ulTempReg;
 704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Calculate the selected MAC address high register. */
 706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ulTempReg = 0x80000000ul | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 883              		.loc 1 706 0
 884 000c 7B68     		ldr	r3, [r7, #4]
 885 000e 0533     		adds	r3, r3, #5
 886 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 887 0012 1B02     		lsls	r3, r3, #8
 888 0014 7A68     		ldr	r2, [r7, #4]
 889 0016 0432     		adds	r2, r2, #4
 890 0018 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 891 001a 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/cc2OCNfl.s 			page 33


 892 001c 43F00043 		orr	r3, r3, #-2147483648
 893 0020 7B61     		str	r3, [r7, #20]
 707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Load the selected MAC address high register. */
 709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	( *(__IO uint32_t *)( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + ulIndex ) ) ) = ulTempReg;
 894              		.loc 1 709 0
 895 0022 BA68     		ldr	r2, [r7, #8]
 896 0024 104B     		ldr	r3, .L48
 897 0026 1344     		add	r3, r3, r2
 898 0028 1A46     		mov	r2, r3
 899 002a 7B69     		ldr	r3, [r7, #20]
 900 002c 1360     		str	r3, [r2]
 710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Calculate the selected MAC address low register. */
 712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ulTempReg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) A
 901              		.loc 1 712 0
 902 002e 7B68     		ldr	r3, [r7, #4]
 903 0030 0333     		adds	r3, r3, #3
 904 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 905 0034 1A06     		lsls	r2, r3, #24
 906 0036 7B68     		ldr	r3, [r7, #4]
 907 0038 0233     		adds	r3, r3, #2
 908 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 909 003c 1B04     		lsls	r3, r3, #16
 910 003e 1A43     		orrs	r2, r2, r3
 911 0040 7B68     		ldr	r3, [r7, #4]
 912 0042 0133     		adds	r3, r3, #1
 913 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 914 0046 1B02     		lsls	r3, r3, #8
 915 0048 1343     		orrs	r3, r3, r2
 916 004a 7A68     		ldr	r2, [r7, #4]
 917 004c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 918 004e 1343     		orrs	r3, r3, r2
 919 0050 7B61     		str	r3, [r7, #20]
 713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Load the selected MAC address low register */
 715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	( *(__IO uint32_t *) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + ulIndex ) ) ) = ulTempReg;
 920              		.loc 1 715 0
 921 0052 BA68     		ldr	r2, [r7, #8]
 922 0054 054B     		ldr	r3, .L48+4
 923 0056 1344     		add	r3, r3, r2
 924 0058 1A46     		mov	r2, r3
 925 005a 7B69     		ldr	r3, [r7, #20]
 926 005c 1360     		str	r3, [r2]
 716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 927              		.loc 1 716 0
 928 005e 1C37     		adds	r7, r7, #28
 929              	.LCFI34:
 930              		.cfi_def_cfa_offset 4
 931 0060 BD46     		mov	sp, r7
 932              	.LCFI35:
 933              		.cfi_def_cfa_register 13
 934              		@ sp needed
 935 0062 5DF8047B 		ldr	r7, [sp], #4
 936              	.LCFI36:
 937              		.cfi_restore 7
 938              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc2OCNfl.s 			page 34


 939 0066 7047     		bx	lr
 940              	.L49:
 941              		.align	2
 942              	.L48:
 943 0068 40800240 		.word	1073905728
 944 006c 44800240 		.word	1073905732
 945              		.cfi_endproc
 946              	.LFE170:
 948              		.section	.text.xNetworkInterfaceOutput,"ax",%progbits
 949              		.align	2
 950              		.global	xNetworkInterfaceOutput
 951              		.thumb
 952              		.thumb_func
 954              	xNetworkInterfaceOutput:
 955              	.LFB171:
 717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t bRel
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 956              		.loc 1 720 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 40
 959              		@ frame_needed = 1, uses_anonymous_args = 0
 960 0000 80B5     		push	{r7, lr}
 961              	.LCFI37:
 962              		.cfi_def_cfa_offset 8
 963              		.cfi_offset 7, -8
 964              		.cfi_offset 14, -4
 965 0002 8AB0     		sub	sp, sp, #40
 966              	.LCFI38:
 967              		.cfi_def_cfa_offset 48
 968 0004 00AF     		add	r7, sp, #0
 969              	.LCFI39:
 970              		.cfi_def_cfa_register 7
 971 0006 7860     		str	r0, [r7, #4]
 972 0008 3960     		str	r1, [r7]
 721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xReturn = pdFAIL;
 973              		.loc 1 721 0
 974 000a 0023     		movs	r3, #0
 975 000c 7B62     		str	r3, [r7, #36]
 722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** uint32_t ulTransmitSize = 0;
 976              		.loc 1 722 0
 977 000e 0023     		movs	r3, #0
 978 0010 3B62     		str	r3, [r7, #32]
 723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** __IO ETH_DMADescTypeDef *pxDmaTxDesc;
 724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /* Do not wait too long for a free TX DMA buffer. */
 725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** const TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 50u );
 979              		.loc 1 725 0
 980 0012 3223     		movs	r3, #50
 981 0014 FB61     		str	r3, [r7, #28]
 982              	.LBB25:
 726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
 728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ProtocolPacket_t *pxPacket;
 730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigZERO_COPY_RX_DRIVER != 0 )
ARM GAS  /tmp/cc2OCNfl.s 			page 35


 732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			configASSERT( bReleaseAfterSend != 0 );
 983              		.loc 1 733 0
 984 0016 3B68     		ldr	r3, [r7]
 985 0018 002B     		cmp	r3, #0
 986 001a 09D1     		bne	.L51
 987              	.LBB26:
 988              	.LBB27:
 989              		.loc 2 237 0 discriminator 1
 990              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 991 001c 4FF05003 			mov r3, #80												
 992 0020 83F31188 		msr basepri, r3											
 993 0024 BFF36F8F 		isb														
 994 0028 BFF34F8F 		dsb														
 995              	
 996              	@ 0 "" 2
 997              		.thumb
 998 002c 3B61     		str	r3, [r7, #16]
 999              	.L52:
 1000              	.LBE27:
 1001              	.LBE26:
 1002              		.loc 1 733 0 discriminator 1
 1003 002e FEE7     		b	.L52
 1004              	.L51:
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif /* ipconfigZERO_COPY_RX_DRIVER */
 736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* If the peripheral must calculate the checksum, it wants
 738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		the protocol checksum to have a value of zero. */
 739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		pxPacket = ( ProtocolPacket_t * ) ( pxDescriptor->pucEthernetBuffer );
 1005              		.loc 1 739 0
 1006 0030 7B68     		ldr	r3, [r7, #4]
 1007 0032 9B69     		ldr	r3, [r3, #24]
 1008 0034 BB61     		str	r3, [r7, #24]
 740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( pxPacket->xICMPPacket.xIPHeader.ucProtocol == ipPROTOCOL_ICMP )
 1009              		.loc 1 741 0
 1010 0036 BB69     		ldr	r3, [r7, #24]
 1011 0038 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 1012 003a 012B     		cmp	r3, #1
 1013 003c 06D1     		bne	.L53
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxPacket->xICMPPacket.xICMPHeader.usChecksum = ( uint16_t )0u;
 1014              		.loc 1 743 0
 1015 003e BB69     		ldr	r3, [r7, #24]
 1016 0040 0022     		movs	r2, #0
 1017 0042 83F82420 		strb	r2, [r3, #36]
 1018 0046 0022     		movs	r2, #0
 1019 0048 83F82520 		strb	r2, [r3, #37]
 1020              	.L53:
 1021              	.LBE25:
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif
 747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Open a do {} while ( 0 ) loop to be able to call break. */
 749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	do
ARM GAS  /tmp/cc2OCNfl.s 			page 36


 750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
 1022              		.loc 1 751 0
 1023 004c 334B     		ldr	r3, .L61
 1024 004e 1B68     		ldr	r3, [r3]
 1025 0050 03F00403 		and	r3, r3, #4
 1026 0054 002B     		cmp	r3, #0
 1027 0056 56D0     		beq	.L54
 752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 1028              		.loc 1 753 0
 1029 0058 314B     		ldr	r3, .L61+4
 1030 005a 1B68     		ldr	r3, [r3]
 1031 005c 1846     		mov	r0, r3
 1032 005e 0021     		movs	r1, #0
 1033 0060 FA69     		ldr	r2, [r7, #28]
 1034 0062 0023     		movs	r3, #0
 1035 0064 FFF7FEFF 		bl	xQueueGenericReceive
 1036 0068 0346     		mov	r3, r0
 1037 006a 012B     		cmp	r3, #1
 1038 006c 00D0     		beq	.L55
 754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
 755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Time-out waiting for a free TX descriptor. */
 756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				break;
 1039              		.loc 1 756 0
 1040 006e 4AE0     		b	.L54
 1041              	.L55:
 757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
 758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* This function does the actual transmission of the packet. The packet is
 760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			contained in 'pxDescriptor' that is passed to the function. */
 761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxDmaTxDesc = xETH.TxDesc;
 1042              		.loc 1 761 0
 1043 0070 2C4B     		ldr	r3, .L61+8
 1044 0072 DB6A     		ldr	r3, [r3, #44]
 1045 0074 7B61     		str	r3, [r7, #20]
 762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Is this buffer available? */
 764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			configASSERT ( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) == 0 );
 1046              		.loc 1 764 0
 1047 0076 7B69     		ldr	r3, [r7, #20]
 1048 0078 1B68     		ldr	r3, [r3]
 1049 007a 002B     		cmp	r3, #0
 1050 007c 09DA     		bge	.L56
 1051              	.LBB28:
 1052              	.LBB29:
 1053              		.loc 2 237 0 discriminator 1
 1054              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1055 007e 4FF05003 			mov r3, #80												
 1056 0082 83F31188 		msr basepri, r3											
 1057 0086 BFF36F8F 		isb														
 1058 008a BFF34F8F 		dsb														
 1059              	
 1060              	@ 0 "" 2
 1061              		.thumb
 1062 008e FB60     		str	r3, [r7, #12]
 1063              	.L57:
ARM GAS  /tmp/cc2OCNfl.s 			page 37


 1064              	.LBE29:
 1065              	.LBE28:
 1066              		.loc 1 764 0 discriminator 2
 1067 0090 FEE7     		b	.L57
 1068              	.L56:
 765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
 767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Is this buffer available? */
 768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Get bytes in current buffer. */
 769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulTransmitSize = pxDescriptor->xDataLength;
 1069              		.loc 1 769 0
 1070 0092 7B68     		ldr	r3, [r7, #4]
 1071 0094 DB69     		ldr	r3, [r3, #28]
 1072 0096 3B62     		str	r3, [r7, #32]
 770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				if( ulTransmitSize > ETH_TX_BUF_SIZE )
 1073              		.loc 1 771 0
 1074 0098 3B6A     		ldr	r3, [r7, #32]
 1075 009a 40F2F452 		movw	r2, #1524
 1076 009e 9342     		cmp	r3, r2
 1077 00a0 02D9     		bls	.L58
 772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
 773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					ulTransmitSize = ETH_TX_BUF_SIZE;
 1078              		.loc 1 773 0
 1079 00a2 40F2F453 		movw	r3, #1524
 1080 00a6 3B62     		str	r3, [r7, #32]
 1081              	.L58:
 774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
 775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				#if( ipconfigZERO_COPY_TX_DRIVER == 0 )
 777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
 778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					/* Copy the bytes. */
 779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					memcpy( ( void * ) pxDmaTxDesc->Buffer1Addr, pxDescriptor->pucEthernetBuffer, ulTransmitSize )
 780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
 781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				#else
 782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
 783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					/* Move the buffer. */
 784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					pxDmaTxDesc->Buffer1Addr = ( uint32_t )pxDescriptor->pucEthernetBuffer;
 1082              		.loc 1 784 0
 1083 00a8 7B68     		ldr	r3, [r7, #4]
 1084 00aa 9B69     		ldr	r3, [r3, #24]
 1085 00ac 1A46     		mov	r2, r3
 1086 00ae 7B69     		ldr	r3, [r7, #20]
 1087 00b0 9A60     		str	r2, [r3, #8]
 785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					/* The Network Buffer has been passed to DMA, no need to release it. */
 786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					bReleaseAfterSend = pdFALSE_UNSIGNED;
 1088              		.loc 1 786 0
 1089 00b2 0023     		movs	r3, #0
 1090 00b4 3B60     		str	r3, [r7]
 787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
 788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				#endif /* ipconfigZERO_COPY_TX_DRIVER */
 789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Ask to set the IPv4 checksum.
 791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				Also need an Interrupt on Completion so that 'vClearTXBuffers()' will be called.. */
 792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				pxDmaTxDesc->Status |= ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_IC;
 1091              		.loc 1 792 0
 1092 00b6 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc2OCNfl.s 			page 38


 1093 00b8 1A68     		ldr	r2, [r3]
 1094 00ba 1B4B     		ldr	r3, .L61+12
 1095 00bc 1343     		orrs	r3, r3, r2
 1096 00be 7A69     		ldr	r2, [r7, #20]
 1097 00c0 1360     		str	r3, [r2]
 793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Prepare transmit descriptors to give to DMA. */
 795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Set LAST and FIRST segment */
 797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				pxDmaTxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 1098              		.loc 1 797 0
 1099 00c2 7B69     		ldr	r3, [r7, #20]
 1100 00c4 1B68     		ldr	r3, [r3]
 1101 00c6 43F04052 		orr	r2, r3, #805306368
 1102 00ca 7B69     		ldr	r3, [r7, #20]
 1103 00cc 1A60     		str	r2, [r3]
 798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Set frame size */
 799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				pxDmaTxDesc->ControlBufferSize = ( ulTransmitSize & ETH_DMATXDESC_TBS1 );
 1104              		.loc 1 799 0
 1105 00ce 3B6A     		ldr	r3, [r7, #32]
 1106 00d0 C3F30C02 		ubfx	r2, r3, #0, #13
 1107 00d4 7B69     		ldr	r3, [r7, #20]
 1108 00d6 5A60     		str	r2, [r3, #4]
 800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
 801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				pxDmaTxDesc->Status |= ETH_DMATXDESC_OWN;
 1109              		.loc 1 801 0
 1110 00d8 7B69     		ldr	r3, [r7, #20]
 1111 00da 1B68     		ldr	r3, [r3]
 1112 00dc 43F00042 		orr	r2, r3, #-2147483648
 1113 00e0 7B69     		ldr	r3, [r7, #20]
 1114 00e2 1A60     		str	r2, [r3]
 802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Point to next descriptor */
 804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				xETH.TxDesc = ( ETH_DMADescTypeDef * ) ( xETH.TxDesc->Buffer2NextDescAddr );
 1115              		.loc 1 804 0
 1116 00e4 0F4B     		ldr	r3, .L61+8
 1117 00e6 DB6A     		ldr	r3, [r3, #44]
 1118 00e8 DB68     		ldr	r3, [r3, #12]
 1119 00ea 1A46     		mov	r2, r3
 1120 00ec 0D4B     		ldr	r3, .L61+8
 1121 00ee DA62     		str	r2, [r3, #44]
 1122              	.LBB30:
 1123              	.LBB31:
 1124              		.file 3 "../../Drivers/CMSIS/Include/cmsis_gcc.h"
   1:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
ARM GAS  /tmp/cc2OCNfl.s 			page 39


  14:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc2OCNfl.s 			page 40


  71:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc2OCNfl.s 			page 41


 128:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
ARM GAS  /tmp/cc2OCNfl.s 			page 42


 185:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc2OCNfl.s 			page 43


 242:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc2OCNfl.s 			page 44


 299:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/cc2OCNfl.s 			page 45


 356:../../Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
ARM GAS  /tmp/cc2OCNfl.s 			page 46


 413:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1125              		.loc 3 429 0
 1126              	@ 429 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1127 00f0 BFF34F8F 		dsb 0xF
 1128              	@ 0 "" 2
 1129              		.thumb
 1130              	.LBE31:
 1131              	.LBE30:
 805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Ensure completion of memory access */
 806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				__DSB();
 807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Resume DMA transmission*/
 808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				xETH.Instance->DMATPDR = 0;
 1132              		.loc 1 808 0
 1133 00f4 0B4B     		ldr	r3, .L61+8
 1134 00f6 1A68     		ldr	r2, [r3]
 1135 00f8 41F20403 		movw	r3, #4100
 1136 00fc 1344     		add	r3, r3, r2
 1137 00fe 0022     		movs	r2, #0
 1138 0100 1A60     		str	r2, [r3]
 809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				iptraceNETWORK_INTERFACE_TRANSMIT();
 810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				xReturn = pdPASS;
 1139              		.loc 1 810 0
 1140 0102 0123     		movs	r3, #1
 1141 0104 7B62     		str	r3, [r7, #36]
 1142              	.L54:
 811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
 812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else
 814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* The PHY has no Link Status, packet shall be dropped. */
 816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	} while( 0 );
 818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* The buffer has been sent so can be released. */
 819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( bReleaseAfterSend != pdFALSE )
 1143              		.loc 1 819 0
 1144 0106 3B68     		ldr	r3, [r7]
 1145 0108 002B     		cmp	r3, #0
 1146 010a 02D0     		beq	.L59
 820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 1147              		.loc 1 821 0
ARM GAS  /tmp/cc2OCNfl.s 			page 47


 1148 010c 7868     		ldr	r0, [r7, #4]
 1149 010e FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 1150              	.L59:
 822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	return xReturn;
 1151              		.loc 1 824 0
 1152 0112 7B6A     		ldr	r3, [r7, #36]
 825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 1153              		.loc 1 825 0
 1154 0114 1846     		mov	r0, r3
 1155 0116 2837     		adds	r7, r7, #40
 1156              	.LCFI40:
 1157              		.cfi_def_cfa_offset 8
 1158 0118 BD46     		mov	sp, r7
 1159              	.LCFI41:
 1160              		.cfi_def_cfa_register 13
 1161              		@ sp needed
 1162 011a 80BD     		pop	{r7, pc}
 1163              	.L62:
 1164              		.align	2
 1165              	.L61:
 1166 011c 00000000 		.word	ulPHYLinkStatus
 1167 0120 00000000 		.word	xTXDescriptorSemaphore
 1168 0124 00000000 		.word	xETH
 1169 0128 0000C040 		.word	1086324736
 1170              		.cfi_endproc
 1171              	.LFE171:
 1173              		.section	.text.xMayAcceptPacket,"ax",%progbits
 1174              		.align	2
 1175              		.thumb
 1176              		.thumb_func
 1178              	xMayAcceptPacket:
 1179              	.LFB172:
 826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static BaseType_t xMayAcceptPacket( uint8_t *pcBuffer )
 829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 1180              		.loc 1 829 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 16
 1183              		@ frame_needed = 1, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185 0000 80B4     		push	{r7}
 1186              	.LCFI42:
 1187              		.cfi_def_cfa_offset 4
 1188              		.cfi_offset 7, -4
 1189 0002 85B0     		sub	sp, sp, #20
 1190              	.LCFI43:
 1191              		.cfi_def_cfa_offset 24
 1192 0004 00AF     		add	r7, sp, #0
 1193              	.LCFI44:
 1194              		.cfi_def_cfa_register 7
 1195 0006 7860     		str	r0, [r7, #4]
 830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** const ProtocolPacket_t *pxProtPacket = ( const ProtocolPacket_t * )pcBuffer;
 1196              		.loc 1 830 0
 1197 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc2OCNfl.s 			page 48


 1198 000a FB60     		str	r3, [r7, #12]
 831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	switch( pxProtPacket->xTCPPacket.xEthernetHeader.usFrameType )
 1199              		.loc 1 832 0
 1200 000c FB68     		ldr	r3, [r7, #12]
 1201 000e 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 1202 0010 9BB2     		uxth	r3, r3
 1203 0012 082B     		cmp	r3, #8
 1204 0014 06D0     		beq	.L70
 1205 0016 B3F5C16F 		cmp	r3, #1544
 1206 001a 01D1     		bne	.L69
 833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	case ipARP_FRAME_TYPE:
 835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Check it later. */
 836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		return pdTRUE;
 1207              		.loc 1 836 0
 1208 001c 0123     		movs	r3, #1
 1209 001e 03E0     		b	.L67
 1210              	.L69:
 837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	case ipIPv4_FRAME_TYPE:
 838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Check it here. */
 839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		break;
 840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	default:
 841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Refuse the packet. */
 842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		return pdFALSE;
 1211              		.loc 1 842 0
 1212 0020 0023     		movs	r3, #0
 1213 0022 01E0     		b	.L67
 1214              	.L70:
 839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	default:
 1215              		.loc 1 839 0
 1216 0024 00BF     		nop
 843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
 846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		const IPHeader_t *pxIPHeader = &(pxProtPacket->xTCPPacket.xIPHeader);
 848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		uint32_t ulDestinationIPAddress;
 849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Ensure that the incoming packet is not fragmented (only outgoing packets
 851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		 * can be fragmented) as these are the only handled IP frames currently. */
 852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( pxIPHeader->usFragmentOffset & FreeRTOS_ntohs( ipFRAGMENT_OFFSET_BIT_MASK ) ) != 0U )
 853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			return pdFALSE;
 855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* HT: Might want to make the following configurable because
 857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		 * most IP messages have a standard length of 20 bytes */
 858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
 860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
 861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( pxIPHeader->ucVersionHeaderLength < 0x45 || pxIPHeader->ucVersionHeaderLength > 0x4F )
 862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			return pdFALSE;
 864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Is the packet for this node? */
ARM GAS  /tmp/cc2OCNfl.s 			page 49


 868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Is it a broadcast address x.x.x.255 ? */
 870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			( ( FreeRTOS_ntohl( ulDestinationIPAddress ) & 0xff ) != 0xff ) &&
 871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigUSE_LLMNR == 1 )
 872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif
 874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			( *ipLOCAL_IP_ADDRESS_POINTER != 0 ) ) {
 875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			FreeRTOS_printf( ( "Drop IP %lxip\n", FreeRTOS_ntohl( ulDestinationIPAddress ) ) );
 876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			return pdFALSE;
 877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( pxIPHeader->ucProtocol == ipPROTOCOL_UDP )
 880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			uint16_t port = pxProtPacket->xUDPPacket.xUDPHeader.usDestinationPort;
 882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( ( xPortHasUDPSocket( port ) == pdFALSE )
 884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			#if ipconfigUSE_LLMNR == 1
 885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				&& ( port != FreeRTOS_ntohs( ipLLMNR_PORT ) )
 886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			#endif
 887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			#if ipconfigUSE_NBNS == 1
 888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				&& ( port != FreeRTOS_ntohs( ipNBNS_PORT ) )
 889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			#endif
 890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			#if ipconfigUSE_DNS == 1
 891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				&& ( pxProtPacket->xUDPPacket.xUDPHeader.usSourcePort != FreeRTOS_ntohs( ipDNS_PORT ) )
 892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			#endif
 893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				) {
 894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Drop this packet, not for this device. */
 895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				return pdFALSE;
 896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
 897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif	/* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
 900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	return pdTRUE;
 1217              		.loc 1 900 0
 1218 0026 0123     		movs	r3, #1
 1219              	.L67:
 901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 1220              		.loc 1 901 0
 1221 0028 1846     		mov	r0, r3
 1222 002a 1437     		adds	r7, r7, #20
 1223              	.LCFI45:
 1224              		.cfi_def_cfa_offset 4
 1225 002c BD46     		mov	sp, r7
 1226              	.LCFI46:
 1227              		.cfi_def_cfa_register 13
 1228              		@ sp needed
 1229 002e 5DF8047B 		ldr	r7, [sp], #4
 1230              	.LCFI47:
 1231              		.cfi_restore 7
 1232              		.cfi_def_cfa_offset 0
 1233 0032 7047     		bx	lr
 1234              		.cfi_endproc
 1235              	.LFE172:
 1237              		.section	.text.prvNetworkInterfaceInput,"ax",%progbits
 1238              		.align	2
 1239              		.thumb
 1240              		.thumb_func
ARM GAS  /tmp/cc2OCNfl.s 			page 50


 1242              	prvNetworkInterfaceInput:
 1243              	.LFB173:
 902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
 903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static BaseType_t prvNetworkInterfaceInput( void )
 905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 1244              		.loc 1 905 0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 48
 1247              		@ frame_needed = 1, uses_anonymous_args = 0
 1248 0000 80B5     		push	{r7, lr}
 1249              	.LCFI48:
 1250              		.cfi_def_cfa_offset 8
 1251              		.cfi_offset 7, -8
 1252              		.cfi_offset 14, -4
 1253 0002 8CB0     		sub	sp, sp, #48
 1254              	.LCFI49:
 1255              		.cfi_def_cfa_offset 56
 1256 0004 00AF     		add	r7, sp, #0
 1257              	.LCFI50:
 1258              		.cfi_def_cfa_register 7
 906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** NetworkBufferDescriptor_t *pxCurDescriptor;
 907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** NetworkBufferDescriptor_t *pxNewDescriptor = NULL;
 1259              		.loc 1 907 0
 1260 0006 0023     		movs	r3, #0
 1261 0008 FB62     		str	r3, [r7, #44]
 908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xReceivedLength, xAccepted;
 909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** __IO ETH_DMADescTypeDef *pxDMARxDescriptor;
 910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** xIPStackEvent_t xRxEvent = { eNetworkRxEvent, NULL };
 1262              		.loc 1 910 0
 1263 000a 0123     		movs	r3, #1
 1264 000c 3B71     		strb	r3, [r7, #4]
 1265 000e 0023     		movs	r3, #0
 1266 0010 BB60     		str	r3, [r7, #8]
 911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** const TickType_t xDescriptorWaitTime = pdMS_TO_TICKS( 250 );
 1267              		.loc 1 911 0
 1268 0012 FA23     		movs	r3, #250
 1269 0014 FB61     		str	r3, [r7, #28]
 912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** uint8_t *pucBuffer;
 913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	pxDMARxDescriptor = xETH.RxDesc;
 1270              		.loc 1 914 0
 1271 0016 4F4B     		ldr	r3, .L85
 1272 0018 9B6A     		ldr	r3, [r3, #40]
 1273 001a BB61     		str	r3, [r7, #24]
 915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN) == 0 )
 1274              		.loc 1 916 0
 1275 001c BB69     		ldr	r3, [r7, #24]
 1276 001e 1B68     		ldr	r3, [r3]
 1277 0020 002B     		cmp	r3, #0
 1278 0022 0FDB     		blt	.L72
 917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
 919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xReceivedLength = ( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_FL ) >> ETH_DMARXDESC_FRAMELENGTH
 1279              		.loc 1 919 0
 1280 0024 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cc2OCNfl.s 			page 51


 1281 0026 1A68     		ldr	r2, [r3]
 1282 0028 4B4B     		ldr	r3, .L85+4
 1283 002a 1340     		ands	r3, r3, r2
 1284 002c 1B0C     		lsrs	r3, r3, #16
 1285 002e 043B     		subs	r3, r3, #4
 1286 0030 BB62     		str	r3, [r7, #40]
 920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		pucBuffer = (uint8_t *) pxDMARxDescriptor->Buffer1Addr;
 1287              		.loc 1 921 0
 1288 0032 BB69     		ldr	r3, [r7, #24]
 1289 0034 9B68     		ldr	r3, [r3, #8]
 1290 0036 3B62     		str	r3, [r7, #32]
 922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Update the ETHERNET DMA global Rx descriptor with next Rx descriptor */
 924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Chained Mode */    
 925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Selects the next DMA Rx descriptor list for next buffer to read */ 
 926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xETH.RxDesc = ( ETH_DMADescTypeDef* )pxDMARxDescriptor->Buffer2NextDescAddr;
 1291              		.loc 1 926 0
 1292 0038 BB69     		ldr	r3, [r7, #24]
 1293 003a DB68     		ldr	r3, [r3, #12]
 1294 003c 1A46     		mov	r2, r3
 1295 003e 454B     		ldr	r3, .L85
 1296 0040 9A62     		str	r2, [r3, #40]
 1297 0042 01E0     		b	.L73
 1298              	.L72:
 927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	else
 929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xReceivedLength = 0;
 1299              		.loc 1 930 0
 1300 0044 0023     		movs	r3, #0
 1301 0046 BB62     		str	r3, [r7, #40]
 1302              	.L73:
 931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Obtain the size of the packet and put it into the "usReceivedLength" variable. */
 934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* get received frame */
 936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( xReceivedLength > 0ul )
 1303              		.loc 1 936 0
 1304 0048 BB6A     		ldr	r3, [r7, #40]
 1305 004a 002B     		cmp	r3, #0
 1306 004c 77D0     		beq	.L74
 937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* In order to make the code easier and faster, only packets in a single buffer
 939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		will be accepted.  This can be done by making the buffers large enough to
 940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		hold a complete Ethernet packet (1536 bytes).
 941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		Therefore, two sanity checks: */
 942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		configASSERT( xReceivedLength <= ETH_RX_BUF_SIZE );
 1307              		.loc 1 942 0
 1308 004e BB6A     		ldr	r3, [r7, #40]
 1309 0050 40F2F452 		movw	r2, #1524
 1310 0054 9342     		cmp	r3, r2
 1311 0056 09D9     		bls	.L75
 1312              	.LBB32:
 1313              	.LBB33:
 1314              		.loc 2 237 0 discriminator 1
ARM GAS  /tmp/cc2OCNfl.s 			page 52


 1315              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1316 0058 4FF05003 			mov r3, #80												
 1317 005c 83F31188 		msr basepri, r3											
 1318 0060 BFF36F8F 		isb														
 1319 0064 BFF34F8F 		dsb														
 1320              	
 1321              	@ 0 "" 2
 1322              		.thumb
 1323 0068 3B61     		str	r3, [r7, #16]
 1324              	.L76:
 1325              	.LBE33:
 1326              	.LBE32:
 1327              		.loc 1 942 0 discriminator 1
 1328 006a FEE7     		b	.L76
 1329              	.L75:
 943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( pxDMARxDescriptor->Status & ( ETH_DMARXDESC_CE | ETH_DMARXDESC_IPV4HCE | ETH_DMARXDESC_FT )
 1330              		.loc 1 944 0
 1331 006c BB69     		ldr	r3, [r7, #24]
 1332 006e 1B68     		ldr	r3, [r3]
 1333 0070 03F0A203 		and	r3, r3, #162
 1334 0074 202B     		cmp	r3, #32
 1335 0076 02D0     		beq	.L77
 945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Not an Ethernet frame-type or a checmsum error. */
 947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xAccepted = pdFALSE;
 1336              		.loc 1 947 0
 1337 0078 0023     		movs	r3, #0
 1338 007a 7B62     		str	r3, [r7, #36]
 1339 007c 03E0     		b	.L78
 1340              	.L77:
 948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else
 950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* See if this packet must be handled. */
 952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xAccepted = xMayAcceptPacket( pucBuffer );
 1341              		.loc 1 952 0
 1342 007e 386A     		ldr	r0, [r7, #32]
 1343 0080 FFF7FEFF 		bl	xMayAcceptPacket
 1344 0084 7862     		str	r0, [r7, #36]
 1345              	.L78:
 953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xAccepted != pdFALSE )
 1346              		.loc 1 955 0
 1347 0086 7B6A     		ldr	r3, [r7, #36]
 1348 0088 002B     		cmp	r3, #0
 1349 008a 0AD0     		beq	.L79
 956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* The packet wil be accepted, but check first if a new Network Buffer can
 958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			be obtained. If not, the packet will still be dropped. */
 959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxNewDescriptor = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, xDescriptorWaitTime );
 1350              		.loc 1 959 0
 1351 008c 40F2F450 		movw	r0, #1524
 1352 0090 F969     		ldr	r1, [r7, #28]
 1353 0092 FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 1354 0096 F862     		str	r0, [r7, #44]
ARM GAS  /tmp/cc2OCNfl.s 			page 53


 960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( pxNewDescriptor == NULL )
 1355              		.loc 1 961 0
 1356 0098 FB6A     		ldr	r3, [r7, #44]
 1357 009a 002B     		cmp	r3, #0
 1358 009c 01D1     		bne	.L79
 962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
 963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* A new descriptor can not be allocated now. This packet will be dropped. */
 964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				xAccepted = pdFALSE;
 1359              		.loc 1 964 0
 1360 009e 0023     		movs	r3, #0
 1361 00a0 7B62     		str	r3, [r7, #36]
 1362              	.L79:
 965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
 966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigZERO_COPY_RX_DRIVER != 0 )
 968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Find out which Network Buffer was originally passed to the descriptor. */
 970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxCurDescriptor = pxPacketBuffer_to_NetworkBuffer( pucBuffer );
 1363              		.loc 1 970 0
 1364 00a2 386A     		ldr	r0, [r7, #32]
 1365 00a4 FFF7FEFF 		bl	pxPacketBuffer_to_NetworkBuffer
 1366 00a8 7861     		str	r0, [r7, #20]
 971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			configASSERT( pxCurDescriptor != NULL );
 1367              		.loc 1 971 0
 1368 00aa 7B69     		ldr	r3, [r7, #20]
 1369 00ac 002B     		cmp	r3, #0
 1370 00ae 09D1     		bne	.L80
 1371              	.LBB34:
 1372              	.LBB35:
 1373              		.loc 2 237 0 discriminator 1
 1374              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1375 00b0 4FF05003 			mov r3, #80												
 1376 00b4 83F31188 		msr basepri, r3											
 1377 00b8 BFF36F8F 		isb														
 1378 00bc BFF34F8F 		dsb														
 1379              	
 1380              	@ 0 "" 2
 1381              		.thumb
 1382 00c0 FB60     		str	r3, [r7, #12]
 1383              	.L81:
 1384              	.LBE35:
 1385              	.LBE34:
 1386              		.loc 1 971 0 discriminator 2
 1387 00c2 FEE7     		b	.L81
 1388              	.L80:
 972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#else
 974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* In this mode, the two descriptors are the same. */
 976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxCurDescriptor = pxNewDescriptor;
 977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( pxNewDescriptor != NULL )
 978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
 979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* The packet is acepted and a new Network Buffer was created,
 980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				copy data to the Network Bufffer. */
 981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				memcpy( pxNewDescriptor->pucEthernetBuffer, pucBuffer, xReceivedLength );
 982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
ARM GAS  /tmp/cc2OCNfl.s 			page 54


 983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
 984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif
 985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xAccepted != pdFALSE )
 1389              		.loc 1 986 0
 1390 00c4 7B6A     		ldr	r3, [r7, #36]
 1391 00c6 002B     		cmp	r3, #0
 1392 00c8 0FD0     		beq	.L82
 987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
 988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			pxCurDescriptor->xDataLength = xReceivedLength;
 1393              		.loc 1 988 0
 1394 00ca BA6A     		ldr	r2, [r7, #40]
 1395 00cc 7B69     		ldr	r3, [r7, #20]
 1396 00ce DA61     		str	r2, [r3, #28]
 989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xRxEvent.pvData = ( void * ) pxCurDescriptor;
 1397              		.loc 1 989 0
 1398 00d0 7B69     		ldr	r3, [r7, #20]
 1399 00d2 BB60     		str	r3, [r7, #8]
 990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
 991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Pass the data to the TCP/IP task for processing. */
 992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( xSendEventStructToIPTask( &xRxEvent, xDescriptorWaitTime ) == pdFALSE )
 1400              		.loc 1 992 0
 1401 00d4 3B1D     		adds	r3, r7, #4
 1402 00d6 1846     		mov	r0, r3
 1403 00d8 F969     		ldr	r1, [r7, #28]
 1404 00da FFF7FEFF 		bl	xSendEventStructToIPTask
 1405 00de 0346     		mov	r3, r0
 1406 00e0 002B     		cmp	r3, #0
 1407 00e2 02D1     		bne	.L82
 993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
 994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Could not send the descriptor into the TCP/IP stack, it
 995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				must be released. */
 996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				vReleaseNetworkBufferAndDescriptor( pxCurDescriptor );
 1408              		.loc 1 996 0
 1409 00e4 7869     		ldr	r0, [r7, #20]
 1410 00e6 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 1411              	.L82:
 997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				iptraceETHERNET_RX_EVENT_LOST();
 998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
 999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			else
1000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				iptraceNETWORK_INTERFACE_RECEIVE();
1002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Release descriptors to DMA */
1006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigZERO_COPY_RX_DRIVER != 0 )
1007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Set Buffer1 address pointer */
1009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( pxNewDescriptor != NULL )
 1412              		.loc 1 1009 0
 1413 00ea FB6A     		ldr	r3, [r7, #44]
 1414 00ec 002B     		cmp	r3, #0
 1415 00ee 04D0     		beq	.L83
1010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				pxDMARxDescriptor->Buffer1Addr = (uint32_t)pxNewDescriptor->pucEthernetBuffer;
 1416              		.loc 1 1011 0
ARM GAS  /tmp/cc2OCNfl.s 			page 55


 1417 00f0 FB6A     		ldr	r3, [r7, #44]
 1418 00f2 9B69     		ldr	r3, [r3, #24]
 1419 00f4 1A46     		mov	r2, r3
 1420 00f6 BB69     		ldr	r3, [r7, #24]
 1421 00f8 9A60     		str	r2, [r3, #8]
 1422              	.L83:
1012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			else
1014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* The packet was dropped and the same Network
1016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				Buffer will be used to receive a new packet. */
1017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif /* ipconfigZERO_COPY_RX_DRIVER */
1020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Set Buffer1 size and Second Address Chained bit */
1022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		pxDMARxDescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | (uint32_t)ETH_RX_BUF_SIZE;  
 1423              		.loc 1 1022 0
 1424 00fa BB69     		ldr	r3, [r7, #24]
 1425 00fc 44F2F452 		movw	r2, #17908
 1426 0100 5A60     		str	r2, [r3, #4]
1023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		pxDMARxDescriptor->Status = ETH_DMARXDESC_OWN;
 1427              		.loc 1 1023 0
 1428 0102 BB69     		ldr	r3, [r7, #24]
 1429 0104 4FF00042 		mov	r2, #-2147483648
 1430 0108 1A60     		str	r2, [r3]
 1431              	.LBB36:
 1432              	.LBB37:
 1433              		.loc 3 429 0
 1434              	@ 429 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1435 010a BFF34F8F 		dsb 0xF
 1436              	@ 0 "" 2
 1437              		.thumb
 1438              	.LBE37:
 1439              	.LBE36:
1024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Ensure completion of memory access */
1026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		__DSB();
1027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* When Rx Buffer unavailable flag is set clear it and resume
1028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		reception. */
1029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( xETH.Instance->DMASR & ETH_DMASR_RBUS ) != 0 )
 1440              		.loc 1 1029 0
 1441 010e 114B     		ldr	r3, .L85
 1442 0110 1A68     		ldr	r2, [r3]
 1443 0112 41F21403 		movw	r3, #4116
 1444 0116 1344     		add	r3, r3, r2
 1445 0118 1B68     		ldr	r3, [r3]
 1446 011a 03F08003 		and	r3, r3, #128
 1447 011e 002B     		cmp	r3, #0
 1448 0120 0DD0     		beq	.L74
1030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Clear RBUS ETHERNET DMA flag. */
1032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xETH.Instance->DMASR = ETH_DMASR_RBUS;
 1449              		.loc 1 1032 0
 1450 0122 0C4B     		ldr	r3, .L85
 1451 0124 1A68     		ldr	r2, [r3]
 1452 0126 41F21403 		movw	r3, #4116
ARM GAS  /tmp/cc2OCNfl.s 			page 56


 1453 012a 1344     		add	r3, r3, r2
 1454 012c 8022     		movs	r2, #128
 1455 012e 1A60     		str	r2, [r3]
1033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Resume DMA reception. */
1035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xETH.Instance->DMARPDR = 0;
 1456              		.loc 1 1035 0
 1457 0130 084B     		ldr	r3, .L85
 1458 0132 1A68     		ldr	r2, [r3]
 1459 0134 41F20803 		movw	r3, #4104
 1460 0138 1344     		add	r3, r3, r2
 1461 013a 0022     		movs	r2, #0
 1462 013c 1A60     		str	r2, [r3]
 1463              	.L74:
1036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	return ( xReceivedLength > 0 );
 1464              		.loc 1 1039 0
 1465 013e BB6A     		ldr	r3, [r7, #40]
 1466 0140 002B     		cmp	r3, #0
 1467 0142 CCBF     		ite	gt
 1468 0144 0123     		movgt	r3, #1
 1469 0146 0023     		movle	r3, #0
 1470 0148 DBB2     		uxtb	r3, r3
1040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 1471              		.loc 1 1040 0
 1472 014a 1846     		mov	r0, r3
 1473 014c 3037     		adds	r7, r7, #48
 1474              	.LCFI51:
 1475              		.cfi_def_cfa_offset 8
 1476 014e BD46     		mov	sp, r7
 1477              	.LCFI52:
 1478              		.cfi_def_cfa_register 13
 1479              		@ sp needed
 1480 0150 80BD     		pop	{r7, pc}
 1481              	.L86:
 1482 0152 00BF     		.align	2
 1483              	.L85:
 1484 0154 00000000 		.word	xETH
 1485 0158 0000FF3F 		.word	1073676288
 1486              		.cfi_endproc
 1487              	.LFE173:
 1489              		.section	.rodata
 1490 0037 00       		.align	2
 1491              	.LC3:
 1492 0038 4F4B00   		.ascii	"OK\000"
 1493 003b 00       		.align	2
 1494              	.LC4:
 1495 003c 556E6B6E 		.ascii	"Unknown\000"
 1495      6F776E00 
 1496              		.align	2
 1497              	.LC5:
 1498 0044 50485920 		.ascii	"PHY ID %lX (%s)\012\000"
 1498      49442025 
 1498      6C582028 
 1498      2573290A 
ARM GAS  /tmp/cc2OCNfl.s 			page 57


 1498      00
 1499 0055 000000   		.align	2
 1500              	.LC6:
 1501 0058 424D4352 		.ascii	"BMCR_RESET ready\012\000"
 1501      5F524553 
 1501      45542072 
 1501      65616479 
 1501      0A00
 1502 006a 0000     		.align	2
 1503              	.LC7:
 1504 006c 424D4352 		.ascii	"BMCR_RESET timed out\012\000"
 1504      5F524553 
 1504      45542074 
 1504      696D6564 
 1504      206F7574 
 1505 0082 0000     		.align	2
 1506              	.LC8:
 1507 0084 2B544350 		.ascii	"+TCP: advertise: %lX config %lX\012\000"
 1507      3A206164 
 1507      76657274 
 1507      6973653A 
 1507      20256C58 
 1508              		.section	.text.vMACBProbePhy,"ax",%progbits
 1509              		.align	2
 1510              		.global	vMACBProbePhy
 1511              		.thumb
 1512              		.thumb_func
 1514              	vMACBProbePhy:
 1515              	.LFB174:
1041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
1042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** void vMACBProbePhy( void )
1044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 1516              		.loc 1 1044 0
 1517              		.cfi_startproc
 1518              		@ args = 0, pretend = 0, frame = 40
 1519              		@ frame_needed = 1, uses_anonymous_args = 0
 1520 0000 80B5     		push	{r7, lr}
 1521              	.LCFI53:
 1522              		.cfi_def_cfa_offset 8
 1523              		.cfi_offset 7, -8
 1524              		.cfi_offset 14, -4
 1525 0002 8AB0     		sub	sp, sp, #40
 1526              	.LCFI54:
 1527              		.cfi_def_cfa_offset 48
 1528 0004 00AF     		add	r7, sp, #0
 1529              	.LCFI55:
 1530              		.cfi_def_cfa_register 7
1045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** uint32_t ulConfig, ulAdvertise, ulLower, ulUpper, ulMACPhyID, ulValue;
1046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** TimeOut_t xPhyTime;
1047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** TickType_t xRemTime = 0;
 1531              		.loc 1 1047 0
 1532 0006 0023     		movs	r3, #0
 1533 0008 7B60     		str	r3, [r7, #4]
1048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( EXPECTED_PHY_ID == PHY_ID_DP83848I )
1049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	uint32_t ulPhyControl;
1050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
ARM GAS  /tmp/cc2OCNfl.s 			page 58


1051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	HAL_ETH_ReadPHYRegister(&xETH, PHY_REG_03_PHYSID2, &ulLower);
 1534              		.loc 1 1052 0
 1535 000a 07F11803 		add	r3, r7, #24
 1536 000e 7548     		ldr	r0, .L110
 1537 0010 0321     		movs	r1, #3
 1538 0012 1A46     		mov	r2, r3
 1539 0014 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
1053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	HAL_ETH_ReadPHYRegister(&xETH, PHY_REG_02_PHYSID1, &ulUpper);
 1540              		.loc 1 1053 0
 1541 0018 07F11403 		add	r3, r7, #20
 1542 001c 7148     		ldr	r0, .L110
 1543 001e 0221     		movs	r1, #2
 1544 0020 1A46     		mov	r2, r3
 1545 0022 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
1054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ulMACPhyID = ( ( ulUpper << 16 ) & 0xFFFF0000 ) | ( ulLower & 0xFFF0 );
 1546              		.loc 1 1055 0
 1547 0026 7B69     		ldr	r3, [r7, #20]
 1548 0028 1A04     		lsls	r2, r3, #16
 1549 002a B969     		ldr	r1, [r7, #24]
 1550 002c 4FF6F073 		movw	r3, #65520
 1551 0030 0B40     		ands	r3, r3, r1
 1552 0032 1343     		orrs	r3, r3, r2
 1553 0034 3B62     		str	r3, [r7, #32]
1056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* The expected ID for the 'LAN8742A'  is 0x0007c130. */
1058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
1059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* The expected ID for the 'DP83848I'  is 0x20005C90. */
1060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	FreeRTOS_printf( ( "PHY ID %lX (%s)\n", ulMACPhyID,
 1554              		.loc 1 1061 0
 1555 0036 3B6A     		ldr	r3, [r7, #32]
 1556 0038 6B4A     		ldr	r2, .L110+4
 1557 003a 9342     		cmp	r3, r2
 1558 003c 01D1     		bne	.L88
 1559              		.loc 1 1061 0 is_stmt 0 discriminator 1
 1560 003e 6B4B     		ldr	r3, .L110+8
 1561 0040 00E0     		b	.L89
 1562              	.L88:
 1563              		.loc 1 1061 0 discriminator 2
 1564 0042 6B4B     		ldr	r3, .L110+12
 1565              	.L89:
 1566              		.loc 1 1061 0 discriminator 4
 1567 0044 6B48     		ldr	r0, .L110+16
 1568 0046 396A     		ldr	r1, [r7, #32]
 1569 0048 1A46     		mov	r2, r3
 1570 004a FFF7FEFF 		bl	lUDPLoggingPrintf
1062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		( ulMACPhyID == EXPECTED_PHY_ID ) ? "OK" : "Unknown" ) );
1063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Remove compiler warning if FreeRTOS_printf() is not defined. */
1065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	( void ) ulMACPhyID;
1066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****     /* Set advertise register. */
1068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( ( xPHYProperties.speed == PHY_SPEED_AUTO ) && ( xPHYProperties.duplex == PHY_DUPLEX_AUTO ) )
 1571              		.loc 1 1068 0 is_stmt 1 discriminator 4
 1572 004e 0323     		movs	r3, #3
ARM GAS  /tmp/cc2OCNfl.s 			page 59


 1573 0050 032B     		cmp	r3, #3
 1574 0052 06D1     		bne	.L90
 1575              		.loc 1 1068 0 is_stmt 0 discriminator 1
 1576 0054 0323     		movs	r3, #3
 1577 0056 032B     		cmp	r3, #3
 1578 0058 03D1     		bne	.L90
1069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ulAdvertise = ADVERTISE_CSMA | ADVERTISE_ALL;
 1579              		.loc 1 1070 0 is_stmt 1
 1580 005a 40F2E113 		movw	r3, #481
 1581 005e 7B62     		str	r3, [r7, #36]
 1582 0060 3DE0     		b	.L91
 1583              	.L90:
1071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Reset auto-negotiation capability. */
1072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	else
1074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ulAdvertise = ADVERTISE_CSMA;
 1584              		.loc 1 1075 0
 1585 0062 0123     		movs	r3, #1
 1586 0064 7B62     		str	r3, [r7, #36]
1076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xPHYProperties.speed == PHY_SPEED_AUTO )
 1587              		.loc 1 1077 0
 1588 0066 0323     		movs	r3, #3
 1589 0068 032B     		cmp	r3, #3
 1590 006a 0CD1     		bne	.L92
1078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( xPHYProperties.duplex == PHY_DUPLEX_FULL )
 1591              		.loc 1 1079 0
 1592 006c 0323     		movs	r3, #3
 1593 006e 022B     		cmp	r3, #2
 1594 0070 04D1     		bne	.L93
1080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulAdvertise |= ADVERTISE_10FULL | ADVERTISE_100FULL;
 1595              		.loc 1 1081 0
 1596 0072 7B6A     		ldr	r3, [r7, #36]
 1597 0074 43F4A073 		orr	r3, r3, #320
 1598 0078 7B62     		str	r3, [r7, #36]
 1599 007a 30E0     		b	.L91
 1600              	.L93:
1082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			else
1084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulAdvertise |= ADVERTISE_10HALF | ADVERTISE_100HALF;
 1601              		.loc 1 1085 0
 1602 007c 7B6A     		ldr	r3, [r7, #36]
 1603 007e 43F0A003 		orr	r3, r3, #160
 1604 0082 7B62     		str	r3, [r7, #36]
 1605 0084 2BE0     		b	.L91
 1606              	.L92:
1086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else if( xPHYProperties.duplex == PHY_DUPLEX_AUTO )
 1607              		.loc 1 1088 0
 1608 0086 0323     		movs	r3, #3
 1609 0088 032B     		cmp	r3, #3
ARM GAS  /tmp/cc2OCNfl.s 			page 60


 1610 008a 0CD1     		bne	.L95
1089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( xPHYProperties.speed == PHY_SPEED_10 )
 1611              		.loc 1 1090 0
 1612 008c 0323     		movs	r3, #3
 1613 008e 012B     		cmp	r3, #1
 1614 0090 04D1     		bne	.L96
1091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulAdvertise |= ADVERTISE_10FULL | ADVERTISE_10HALF;
 1615              		.loc 1 1092 0
 1616 0092 7B6A     		ldr	r3, [r7, #36]
 1617 0094 43F06003 		orr	r3, r3, #96
 1618 0098 7B62     		str	r3, [r7, #36]
 1619 009a 20E0     		b	.L91
 1620              	.L96:
1093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			else
1095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulAdvertise |= ADVERTISE_100FULL | ADVERTISE_100HALF;
 1621              		.loc 1 1096 0
 1622 009c 7B6A     		ldr	r3, [r7, #36]
 1623 009e 43F4C073 		orr	r3, r3, #384
 1624 00a2 7B62     		str	r3, [r7, #36]
 1625 00a4 1BE0     		b	.L91
 1626              	.L95:
1097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else if( xPHYProperties.speed == PHY_SPEED_100 )
 1627              		.loc 1 1099 0
 1628 00a6 0323     		movs	r3, #3
 1629 00a8 022B     		cmp	r3, #2
 1630 00aa 0CD1     		bne	.L98
1100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( xPHYProperties.duplex == PHY_DUPLEX_FULL )
 1631              		.loc 1 1101 0
 1632 00ac 0323     		movs	r3, #3
 1633 00ae 022B     		cmp	r3, #2
 1634 00b0 04D1     		bne	.L99
1102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulAdvertise |= ADVERTISE_100FULL;
 1635              		.loc 1 1103 0
 1636 00b2 7B6A     		ldr	r3, [r7, #36]
 1637 00b4 43F48073 		orr	r3, r3, #256
 1638 00b8 7B62     		str	r3, [r7, #36]
 1639 00ba 10E0     		b	.L91
 1640              	.L99:
1104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			else
1106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulAdvertise |= ADVERTISE_100HALF;
 1641              		.loc 1 1107 0
 1642 00bc 7B6A     		ldr	r3, [r7, #36]
 1643 00be 43F08003 		orr	r3, r3, #128
 1644 00c2 7B62     		str	r3, [r7, #36]
 1645 00c4 0BE0     		b	.L91
 1646              	.L98:
1108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
ARM GAS  /tmp/cc2OCNfl.s 			page 61


1109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else
1111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( xPHYProperties.duplex == PHY_DUPLEX_FULL )
 1647              		.loc 1 1112 0
 1648 00c6 0323     		movs	r3, #3
 1649 00c8 022B     		cmp	r3, #2
 1650 00ca 04D1     		bne	.L101
1113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulAdvertise |= ADVERTISE_10FULL;
 1651              		.loc 1 1114 0
 1652 00cc 7B6A     		ldr	r3, [r7, #36]
 1653 00ce 43F04003 		orr	r3, r3, #64
 1654 00d2 7B62     		str	r3, [r7, #36]
 1655 00d4 03E0     		b	.L91
 1656              	.L101:
1115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			else
1117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulAdvertise |= ADVERTISE_10HALF;
 1657              		.loc 1 1118 0
 1658 00d6 7B6A     		ldr	r3, [r7, #36]
 1659 00d8 43F02003 		orr	r3, r3, #32
 1660 00dc 7B62     		str	r3, [r7, #36]
 1661              	.L91:
1119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Read Control register. */
1124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_00_BMCR, &ulConfig );
 1662              		.loc 1 1124 0
 1663 00de 07F11C03 		add	r3, r7, #28
 1664 00e2 4048     		ldr	r0, .L110
 1665 00e4 0021     		movs	r1, #0
 1666 00e6 1A46     		mov	r2, r3
 1667 00e8 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
1125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	HAL_ETH_WritePHYRegister( &xETH, PHY_REG_00_BMCR, ulConfig | BMCR_RESET );
 1668              		.loc 1 1126 0
 1669 00ec FB69     		ldr	r3, [r7, #28]
 1670 00ee 43F40043 		orr	r3, r3, #32768
 1671 00f2 3C48     		ldr	r0, .L110
 1672 00f4 0021     		movs	r1, #0
 1673 00f6 1A46     		mov	r2, r3
 1674 00f8 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
1127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	xRemTime = ( TickType_t ) pdMS_TO_TICKS( 1000UL );
 1675              		.loc 1 1127 0
 1676 00fc 4FF47A73 		mov	r3, #1000
 1677 0100 7B60     		str	r3, [r7, #4]
1128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	vTaskSetTimeOutState( &xPhyTime );
 1678              		.loc 1 1128 0
 1679 0102 07F10803 		add	r3, r7, #8
 1680 0106 1846     		mov	r0, r3
 1681 0108 FFF7FEFF 		bl	vTaskSetTimeOutState
 1682              	.L105:
1129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
ARM GAS  /tmp/cc2OCNfl.s 			page 62


1130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	for( ; ; )
1131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_00_BMCR, &ulValue );
 1683              		.loc 1 1132 0
 1684 010c 07F11003 		add	r3, r7, #16
 1685 0110 3448     		ldr	r0, .L110
 1686 0112 0021     		movs	r1, #0
 1687 0114 1A46     		mov	r2, r3
 1688 0116 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
1133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( ulValue & BMCR_RESET ) == 0 )
 1689              		.loc 1 1133 0
 1690 011a 3B69     		ldr	r3, [r7, #16]
 1691 011c 03F40043 		and	r3, r3, #32768
 1692 0120 002B     		cmp	r3, #0
 1693 0122 03D1     		bne	.L102
1134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			FreeRTOS_printf( ( "BMCR_RESET ready\n" ) );
 1694              		.loc 1 1135 0
 1695 0124 3448     		ldr	r0, .L110+20
 1696 0126 FFF7FEFF 		bl	lUDPLoggingPrintf
1136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			break;
 1697              		.loc 1 1136 0
 1698 012a 0EE0     		b	.L103
 1699              	.L102:
1137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xTaskCheckForTimeOut( &xPhyTime, &xRemTime ) != pdFALSE )
 1700              		.loc 1 1138 0
 1701 012c 07F10802 		add	r2, r7, #8
 1702 0130 3B1D     		adds	r3, r7, #4
 1703 0132 1046     		mov	r0, r2
 1704 0134 1946     		mov	r1, r3
 1705 0136 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1706 013a 0346     		mov	r3, r0
 1707 013c 002B     		cmp	r3, #0
 1708 013e 03D0     		beq	.L104
1139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			FreeRTOS_printf( ( "BMCR_RESET timed out\n" ) );
 1709              		.loc 1 1140 0
 1710 0140 2E48     		ldr	r0, .L110+24
 1711 0142 FFF7FEFF 		bl	lUDPLoggingPrintf
1141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			break;
 1712              		.loc 1 1141 0
 1713 0146 00E0     		b	.L103
 1714              	.L104:
1142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 1715              		.loc 1 1143 0
 1716 0148 E0E7     		b	.L105
 1717              	.L103:
1144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	HAL_ETH_WritePHYRegister( &xETH, PHY_REG_00_BMCR, ulConfig & ~BMCR_RESET );
 1718              		.loc 1 1144 0
 1719 014a FB69     		ldr	r3, [r7, #28]
 1720 014c 23F40043 		bic	r3, r3, #32768
 1721 0150 2448     		ldr	r0, .L110
 1722 0152 0021     		movs	r1, #0
 1723 0154 1A46     		mov	r2, r3
 1724 0156 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
ARM GAS  /tmp/cc2OCNfl.s 			page 63


1145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	vTaskDelay( pdMS_TO_TICKS( 50ul ) );
 1725              		.loc 1 1146 0
 1726 015a 3220     		movs	r0, #50
 1727 015c FFF7FEFF 		bl	vTaskDelay
1147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****     /* Write advertise register. */
1149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	HAL_ETH_WritePHYRegister( &xETH, PHY_REG_04_ADVERTISE, ulAdvertise );
 1728              		.loc 1 1149 0
 1729 0160 2048     		ldr	r0, .L110
 1730 0162 0421     		movs	r1, #4
 1731 0164 7A6A     		ldr	r2, [r7, #36]
 1732 0166 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
1150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/*
1152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			AN_EN        AN1         AN0       Forced Mode
1153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  0           0           0        10BASE-T, Half-Duplex
1154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  0           0           1        10BASE-T, Full-Duplex
1155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  0           1           0        100BASE-TX, Half-Duplex
1156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  0           1           1        100BASE-TX, Full-Duplex
1157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			AN_EN        AN1         AN0       Advertised Mode
1158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  1           0           0        10BASE-T, Half/Full-Duplex
1159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  1           0           1        100BASE-TX, Half/Full-Duplex
1160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  1           1           0        10BASE-T Half-Duplex
1161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 											   100BASE-TX, Half-Duplex
1162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  1           1           1        10BASE-T, Half/Full-Duplex
1163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 											   100BASE-TX, Half/Full-Duplex
1164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	*/
1165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c ****     /* Read Control register. */
1167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_00_BMCR, &ulConfig );
 1733              		.loc 1 1167 0
 1734 016a 07F11C03 		add	r3, r7, #28
 1735 016e 1D48     		ldr	r0, .L110
 1736 0170 0021     		movs	r1, #0
 1737 0172 1A46     		mov	r2, r3
 1738 0174 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
1168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ulConfig &= ~( BMCR_ANRESTART | BMCR_ANENABLE | BMCR_SPEED100 | BMCR_FULLDPLX );
 1739              		.loc 1 1169 0
 1740 0178 FB69     		ldr	r3, [r7, #28]
 1741 017a 23F44C53 		bic	r3, r3, #13056
 1742 017e FB61     		str	r3, [r7, #28]
1170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* HT 12/9/14: always set AN-restart and AN-enable, even though the choices
1172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	are limited. */
1173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ulConfig |= (BMCR_ANRESTART | BMCR_ANENABLE);
 1743              		.loc 1 1173 0
 1744 0180 FB69     		ldr	r3, [r7, #28]
 1745 0182 43F49053 		orr	r3, r3, #4608
 1746 0186 FB61     		str	r3, [r7, #28]
1174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( xPHYProperties.speed == PHY_SPEED_100 )
 1747              		.loc 1 1175 0
 1748 0188 0323     		movs	r3, #3
 1749 018a 022B     		cmp	r3, #2
 1750 018c 04D1     		bne	.L106
ARM GAS  /tmp/cc2OCNfl.s 			page 64


1176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ulConfig |= BMCR_SPEED100;
 1751              		.loc 1 1177 0
 1752 018e FB69     		ldr	r3, [r7, #28]
 1753 0190 43F40053 		orr	r3, r3, #8192
 1754 0194 FB61     		str	r3, [r7, #28]
 1755 0196 06E0     		b	.L107
 1756              	.L106:
1178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	else if( xPHYProperties.speed == PHY_SPEED_10 )
 1757              		.loc 1 1179 0
 1758 0198 0323     		movs	r3, #3
 1759 019a 012B     		cmp	r3, #1
 1760 019c 03D1     		bne	.L107
1180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ulConfig &= ~BMCR_SPEED100;
 1761              		.loc 1 1181 0
 1762 019e FB69     		ldr	r3, [r7, #28]
 1763 01a0 23F40053 		bic	r3, r3, #8192
 1764 01a4 FB61     		str	r3, [r7, #28]
 1765              	.L107:
1182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( xPHYProperties.duplex == PHY_DUPLEX_FULL )
 1766              		.loc 1 1184 0
 1767 01a6 0323     		movs	r3, #3
 1768 01a8 022B     		cmp	r3, #2
 1769 01aa 04D1     		bne	.L108
1185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ulConfig |= BMCR_FULLDPLX;
 1770              		.loc 1 1186 0
 1771 01ac FB69     		ldr	r3, [r7, #28]
 1772 01ae 43F48073 		orr	r3, r3, #256
 1773 01b2 FB61     		str	r3, [r7, #28]
 1774 01b4 06E0     		b	.L109
 1775              	.L108:
1187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	else if( xPHYProperties.duplex == PHY_DUPLEX_HALF )
 1776              		.loc 1 1188 0
 1777 01b6 0323     		movs	r3, #3
 1778 01b8 012B     		cmp	r3, #1
 1779 01ba 03D1     		bne	.L109
1189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ulConfig &= ~BMCR_FULLDPLX;
 1780              		.loc 1 1190 0
 1781 01bc FB69     		ldr	r3, [r7, #28]
 1782 01be 23F48073 		bic	r3, r3, #256
 1783 01c2 FB61     		str	r3, [r7, #28]
 1784              	.L109:
1191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#if( EXPECTED_PHY_ID == PHY_ID_LAN8720 )
1194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	
1196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#elif( EXPECTED_PHY_ID == PHY_ID_LAN8742A )
1198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
ARM GAS  /tmp/cc2OCNfl.s 			page 65


1199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	
1200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#elif( EXPECTED_PHY_ID == PHY_ID_DP83848I )
1202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Read PHY Control register. */
1204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_19_PHYCR, &ulPhyControl );
1205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Clear bits which might get set: */
1207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
1208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xPHYProperties.mdix == PHY_MDIX_AUTO )
1210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			ulPhyControl |= PHYCR_MDIX_EN;
1212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else if( xPHYProperties.mdix == PHY_MDIX_CROSSED )
1214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Force direct link = Use crossed RJ45 cable. */
1216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			ulPhyControl &= ~PHYCR_MDIX_FORCE;
1217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else
1219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Force crossed link = Use direct RJ45 cable. */
1221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			ulPhyControl |= PHYCR_MDIX_FORCE;
1222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* update PHY Control Register. */
1224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		HAL_ETH_WritePHYRegister( &xETH, PHY_REG_19_PHYCR, ulPhyControl );
1225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	#endif
1227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	FreeRTOS_printf( ( "+TCP: advertise: %lX config %lX\n", ulAdvertise, ulConfig ) );
 1785              		.loc 1 1227 0
 1786 01c4 FB69     		ldr	r3, [r7, #28]
 1787 01c6 0E48     		ldr	r0, .L110+28
 1788 01c8 796A     		ldr	r1, [r7, #36]
 1789 01ca 1A46     		mov	r2, r3
 1790 01cc FFF7FEFF 		bl	lUDPLoggingPrintf
1228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Now the two values to global values for later use. */
1230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ulBCRvalue = ulConfig;
 1791              		.loc 1 1230 0
 1792 01d0 FB69     		ldr	r3, [r7, #28]
 1793 01d2 0C4A     		ldr	r2, .L110+32
 1794 01d4 1360     		str	r3, [r2]
1231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	ulACRValue = ulAdvertise;
 1795              		.loc 1 1231 0
 1796 01d6 0C4A     		ldr	r2, .L110+36
 1797 01d8 7B6A     		ldr	r3, [r7, #36]
 1798 01da 1360     		str	r3, [r2]
1232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 1799              		.loc 1 1232 0
 1800 01dc 2837     		adds	r7, r7, #40
 1801              	.LCFI56:
 1802              		.cfi_def_cfa_offset 8
 1803 01de BD46     		mov	sp, r7
 1804              	.LCFI57:
 1805              		.cfi_def_cfa_register 13
 1806              		@ sp needed
 1807 01e0 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cc2OCNfl.s 			page 66


 1808              	.L111:
 1809 01e2 00BF     		.align	2
 1810              	.L110:
 1811 01e4 00000000 		.word	xETH
 1812 01e8 30C10700 		.word	508208
 1813 01ec 38000000 		.word	.LC3
 1814 01f0 3C000000 		.word	.LC4
 1815 01f4 44000000 		.word	.LC5
 1816 01f8 58000000 		.word	.LC6
 1817 01fc 6C000000 		.word	.LC7
 1818 0200 84000000 		.word	.LC8
 1819 0204 00000000 		.word	ulBCRvalue
 1820 0208 00000000 		.word	ulACRValue
 1821              		.cfi_endproc
 1822              	.LFE174:
 1824              		.section	.rodata
 1825 00a5 000000   		.align	2
 1826              	.LC9:
 1827 00a8 70727645 		.ascii	"prvEthernetUpdateConfig: LS %d Force %d\012\000"
 1827      74686572 
 1827      6E657455 
 1827      70646174 
 1827      65436F6E 
 1828 00d1 000000   		.align	2
 1829              	.LC10:
 1830 00d4 66756C6C 		.ascii	"full\000"
 1830      00
 1831 00d9 000000   		.align	2
 1832              	.LC11:
 1833 00dc 68616C66 		.ascii	"half\000"
 1833      00
 1834 00e1 000000   		.align	2
 1835              	.LC12:
 1836 00e4 68696768 		.ascii	"high\000"
 1836      00
 1837 00e9 000000   		.align	2
 1838              	.LC13:
 1839 00ec 3E3E2041 		.ascii	">> Autonego ready: %08lx: %s duplex %u mbit %s stat"
 1839      75746F6E 
 1839      65676F20 
 1839      72656164 
 1839      793A2025 
 1840 011f 75730A00 		.ascii	"us\012\000"
 1841              		.section	.text.prvEthernetUpdateConfig,"ax",%progbits
 1842              		.align	2
 1843              		.thumb
 1844              		.thumb_func
 1846              	prvEthernetUpdateConfig:
 1847              	.LFB175:
1233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
1234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvEthernetUpdateConfig( BaseType_t xForce )
1236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 1848              		.loc 1 1236 0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 24
 1851              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc2OCNfl.s 			page 67


 1852 0000 B0B5     		push	{r4, r5, r7, lr}
 1853              	.LCFI58:
 1854              		.cfi_def_cfa_offset 16
 1855              		.cfi_offset 4, -16
 1856              		.cfi_offset 5, -12
 1857              		.cfi_offset 7, -8
 1858              		.cfi_offset 14, -4
 1859 0002 88B0     		sub	sp, sp, #32
 1860              	.LCFI59:
 1861              		.cfi_def_cfa_offset 48
 1862 0004 02AF     		add	r7, sp, #8
 1863              	.LCFI60:
 1864              		.cfi_def_cfa 7, 40
 1865 0006 7860     		str	r0, [r7, #4]
1237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** __IO uint32_t ulTimeout = 0;
 1866              		.loc 1 1237 0
 1867 0008 0023     		movs	r3, #0
 1868 000a 3B61     		str	r3, [r7, #16]
1238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** uint32_t ulRegValue = 0;
 1869              		.loc 1 1238 0
 1870 000c 0023     		movs	r3, #0
 1871 000e FB60     		str	r3, [r7, #12]
1239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS %d Force %d\n",
 1872              		.loc 1 1240 0
 1873 0010 6D4B     		ldr	r3, .L132
 1874 0012 1B68     		ldr	r3, [r3]
 1875 0014 03F00403 		and	r3, r3, #4
 1876 0018 002B     		cmp	r3, #0
 1877 001a 14BF     		ite	ne
 1878 001c 0123     		movne	r3, #1
 1879 001e 0023     		moveq	r3, #0
 1880 0020 DBB2     		uxtb	r3, r3
 1881 0022 6A48     		ldr	r0, .L132+4
 1882 0024 1946     		mov	r1, r3
 1883 0026 7A68     		ldr	r2, [r7, #4]
 1884 0028 FFF7FEFF 		bl	lUDPLoggingPrintf
1241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 ,
1242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		( int )xForce ) );
1243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( ( xForce != pdFALSE ) || ( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 ) )
 1885              		.loc 1 1244 0
 1886 002c 7B68     		ldr	r3, [r7, #4]
 1887 002e 002B     		cmp	r3, #0
 1888 0030 06D1     		bne	.L113
 1889              		.loc 1 1244 0 is_stmt 0 discriminator 1
 1890 0032 654B     		ldr	r3, .L132
 1891 0034 1B68     		ldr	r3, [r3]
 1892 0036 03F00403 		and	r3, r3, #4
 1893 003a 002B     		cmp	r3, #0
 1894 003c 00F0BE80 		beq	.L114
 1895              	.L113:
1245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Restart the auto-negotiation. */
1247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xETH.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE )
 1896              		.loc 1 1247 0 is_stmt 1
 1897 0040 634B     		ldr	r3, .L132+8
ARM GAS  /tmp/cc2OCNfl.s 			page 68


 1898 0042 5B68     		ldr	r3, [r3, #4]
 1899 0044 002B     		cmp	r3, #0
 1900 0046 00F0A180 		beq	.L115
1248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Enable Auto-Negotiation. */
1250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			HAL_ETH_WritePHYRegister( &xETH, PHY_REG_00_BMCR, ulBCRvalue | BMCR_ANRESTART );
 1901              		.loc 1 1250 0
 1902 004a 624B     		ldr	r3, .L132+12
 1903 004c 1B68     		ldr	r3, [r3]
 1904 004e 43F40073 		orr	r3, r3, #512
 1905 0052 5F48     		ldr	r0, .L132+8
 1906 0054 0021     		movs	r1, #0
 1907 0056 1A46     		mov	r2, r3
 1908 0058 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
1251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			HAL_ETH_WritePHYRegister( &xETH, PHY_REG_04_ADVERTISE, ulACRValue);
 1909              		.loc 1 1251 0
 1910 005c 5E4B     		ldr	r3, .L132+16
 1911 005e 1B68     		ldr	r3, [r3]
 1912 0060 5B48     		ldr	r0, .L132+8
 1913 0062 0421     		movs	r1, #4
 1914 0064 1A46     		mov	r2, r3
 1915 0066 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 1916              	.L117:
1252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Wait until the auto-negotiation will be completed */
1254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			do
1255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulTimeout++;
 1917              		.loc 1 1256 0 discriminator 2
 1918 006a 3B69     		ldr	r3, [r7, #16]
 1919 006c 0133     		adds	r3, r3, #1
 1920 006e 3B61     		str	r3, [r7, #16]
1257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_01_BMSR, &ulRegValue );
 1921              		.loc 1 1257 0 discriminator 2
 1922 0070 07F10C03 		add	r3, r7, #12
 1923 0074 5648     		ldr	r0, .L132+8
 1924 0076 0121     		movs	r1, #1
 1925 0078 1A46     		mov	r2, r3
 1926 007a FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
1258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			} while( ( ( ulRegValue & PHY_AUTONEGO_COMPLETE) == 0 ) && ( ulTimeout < PHY_READ_TO ) );
 1927              		.loc 1 1258 0 discriminator 2
 1928 007e FB68     		ldr	r3, [r7, #12]
 1929 0080 03F02003 		and	r3, r3, #32
 1930 0084 002B     		cmp	r3, #0
 1931 0086 04D1     		bne	.L116
 1932              		.loc 1 1258 0 is_stmt 0 discriminator 1
 1933 0088 3B69     		ldr	r3, [r7, #16]
 1934 008a 4FF6FE72 		movw	r2, #65534
 1935 008e 9342     		cmp	r3, r2
 1936 0090 EBD9     		bls	.L117
 1937              	.L116:
1259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			HAL_ETH_WritePHYRegister( &xETH, PHY_REG_00_BMCR, ulBCRvalue & ~BMCR_ANRESTART );
 1938              		.loc 1 1260 0 is_stmt 1
 1939 0092 504B     		ldr	r3, .L132+12
 1940 0094 1B68     		ldr	r3, [r3]
 1941 0096 23F40073 		bic	r3, r3, #512
ARM GAS  /tmp/cc2OCNfl.s 			page 69


 1942 009a 4D48     		ldr	r0, .L132+8
 1943 009c 0021     		movs	r1, #0
 1944 009e 1A46     		mov	r2, r3
 1945 00a0 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
1261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( ulTimeout < PHY_READ_TO )
 1946              		.loc 1 1262 0
 1947 00a4 3B69     		ldr	r3, [r7, #16]
 1948 00a6 4FF6FE72 		movw	r2, #65534
 1949 00aa 9342     		cmp	r3, r2
 1950 00ac 7ED8     		bhi	.L130
1263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Reset Timeout counter. */
1265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				ulTimeout = 0;
 1951              		.loc 1 1265 0
 1952 00ae 0023     		movs	r3, #0
 1953 00b0 3B61     		str	r3, [r7, #16]
1266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_01_BMSR, &ulRegValue);
 1954              		.loc 1 1267 0
 1955 00b2 07F10C03 		add	r3, r7, #12
 1956 00b6 4648     		ldr	r0, .L132+8
 1957 00b8 0121     		movs	r1, #1
 1958 00ba 1A46     		mov	r2, r3
 1959 00bc FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
1268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				if( ( ulRegValue & BMSR_LINK_STATUS ) != 0 )
 1960              		.loc 1 1268 0
 1961 00c0 FB68     		ldr	r3, [r7, #12]
 1962 00c2 03F00403 		and	r3, r3, #4
 1963 00c6 002B     		cmp	r3, #0
 1964 00c8 06D0     		beq	.L119
1269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					ulPHYLinkStatus |= BMSR_LINK_STATUS;
 1965              		.loc 1 1270 0
 1966 00ca 3F4B     		ldr	r3, .L132
 1967 00cc 1B68     		ldr	r3, [r3]
 1968 00ce 43F00403 		orr	r3, r3, #4
 1969 00d2 3D4A     		ldr	r2, .L132
 1970 00d4 1360     		str	r3, [r2]
 1971 00d6 05E0     		b	.L120
 1972              	.L119:
1271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				else
1273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					ulPHYLinkStatus &= ~( BMSR_LINK_STATUS );
 1973              		.loc 1 1274 0
 1974 00d8 3B4B     		ldr	r3, .L132
 1975 00da 1B68     		ldr	r3, [r3]
 1976 00dc 23F00403 		bic	r3, r3, #4
 1977 00e0 394A     		ldr	r2, .L132
 1978 00e2 1360     		str	r3, [r2]
 1979              	.L120:
 1980              	.LBB38:
1275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				#if( EXPECTED_PHY_ID == PHY_ID_LAN8720 ) || ( EXPECTED_PHY_ID == PHY_ID_LAN8742A )
1278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
ARM GAS  /tmp/cc2OCNfl.s 			page 70


1279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* 31 RW PHY Special Control Status */
1280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				uint32_t ulControlStatus;
1281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_1F_PHYSPCS, &ulControlStatus);
 1981              		.loc 1 1282 0
 1982 00e4 07F10803 		add	r3, r7, #8
 1983 00e8 3948     		ldr	r0, .L132+8
 1984 00ea 1F21     		movs	r1, #31
 1985 00ec 1A46     		mov	r2, r3
 1986 00ee FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
1283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					ulRegValue = 0;
 1987              		.loc 1 1283 0
 1988 00f2 0023     		movs	r3, #0
 1989 00f4 FB60     		str	r3, [r7, #12]
1284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					if( ( ulControlStatus & PHYSPCS_FULL_DUPLEX ) != 0 )
 1990              		.loc 1 1284 0
 1991 00f6 BB68     		ldr	r3, [r7, #8]
 1992 00f8 03F01003 		and	r3, r3, #16
 1993 00fc 002B     		cmp	r3, #0
 1994 00fe 03D0     		beq	.L121
1285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					{
1286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 						ulRegValue |= PHY_DUPLEX_STATUS;
 1995              		.loc 1 1286 0
 1996 0100 FB68     		ldr	r3, [r7, #12]
 1997 0102 43F00403 		orr	r3, r3, #4
 1998 0106 FB60     		str	r3, [r7, #12]
 1999              	.L121:
1287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					}
1288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					if( ( ulControlStatus & PHYSPCS_SPEED_MASK ) == PHYSPCS_SPEED_10 )
 2000              		.loc 1 1288 0
 2001 0108 BB68     		ldr	r3, [r7, #8]
 2002 010a 03F00C03 		and	r3, r3, #12
 2003 010e 042B     		cmp	r3, #4
 2004 0110 03D1     		bne	.L122
1289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					{
1290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 						ulRegValue |= PHY_SPEED_STATUS;
 2005              		.loc 1 1290 0
 2006 0112 FB68     		ldr	r3, [r7, #12]
 2007 0114 43F00203 		orr	r3, r3, #2
 2008 0118 FB60     		str	r3, [r7, #12]
 2009              	.L122:
 2010              	.LBE38:
1291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					}
1292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				#elif( EXPECTED_PHY_ID == PHY_ID_DP83848I )
1295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					/* Read the result of the auto-negotiation. */
1297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_10_PHY_SR, &ulRegValue);
1298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				#endif
1300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				FreeRTOS_printf( ( ">> Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 2011              		.loc 1 1300 0
 2012 011a F968     		ldr	r1, [r7, #12]
 2013 011c FB68     		ldr	r3, [r7, #12]
 2014 011e 03F00403 		and	r3, r3, #4
 2015 0122 002B     		cmp	r3, #0
ARM GAS  /tmp/cc2OCNfl.s 			page 71


 2016 0124 01D0     		beq	.L123
 2017              		.loc 1 1300 0 is_stmt 0 discriminator 1
 2018 0126 2D4D     		ldr	r5, .L132+20
 2019 0128 00E0     		b	.L124
 2020              	.L123:
 2021              		.loc 1 1300 0 discriminator 2
 2022 012a 2D4D     		ldr	r5, .L132+24
 2023              	.L124:
 2024              		.loc 1 1300 0 discriminator 4
 2025 012c FB68     		ldr	r3, [r7, #12]
 2026 012e 03F00203 		and	r3, r3, #2
 2027 0132 002B     		cmp	r3, #0
 2028 0134 01D0     		beq	.L125
 2029              		.loc 1 1300 0 discriminator 5
 2030 0136 0A24     		movs	r4, #10
 2031 0138 00E0     		b	.L126
 2032              	.L125:
 2033              		.loc 1 1300 0 discriminator 6
 2034 013a 6424     		movs	r4, #100
 2035              	.L126:
 2036              		.loc 1 1300 0 discriminator 8
 2037 013c 224B     		ldr	r3, .L132
 2038 013e 1B68     		ldr	r3, [r3]
 2039 0140 43F00403 		orr	r3, r3, #4
 2040 0144 204A     		ldr	r2, .L132
 2041 0146 1360     		str	r3, [r2]
 2042 0148 264B     		ldr	r3, .L132+28
 2043 014a 0093     		str	r3, [sp]
 2044 014c 2648     		ldr	r0, .L132+32
 2045 014e 2A46     		mov	r2, r5
 2046 0150 2346     		mov	r3, r4
 2047 0152 FFF7FEFF 		bl	lUDPLoggingPrintf
1301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					ulRegValue,
1302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					(ulRegValue & PHY_DUPLEX_STATUS) ? "full" : "half",
1303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					(ulRegValue & PHY_SPEED_STATUS) ? 10 : 100,
1304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					((ulPHYLinkStatus |= BMSR_LINK_STATUS) != 0) ? "high" : "low" ) );
1305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Configure the MAC with the Duplex Mode fixed by the
1307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				auto-negotiation process. */
1308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				if( ( ulRegValue & PHY_DUPLEX_STATUS ) != ( uint32_t ) RESET )
 2048              		.loc 1 1308 0 is_stmt 1 discriminator 8
 2049 0156 FB68     		ldr	r3, [r7, #12]
 2050 0158 03F00403 		and	r3, r3, #4
 2051 015c 002B     		cmp	r3, #0
 2052 015e 04D0     		beq	.L127
1309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					/* Set Ethernet duplex mode to Full-duplex following the
1311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					auto-negotiation. */
1312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 2053              		.loc 1 1312 0
 2054 0160 1B4B     		ldr	r3, .L132+8
 2055 0162 4FF40062 		mov	r2, #2048
 2056 0166 DA60     		str	r2, [r3, #12]
 2057 0168 02E0     		b	.L128
 2058              	.L127:
1313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				else
ARM GAS  /tmp/cc2OCNfl.s 			page 72


1315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					/* Set Ethernet duplex mode to Half-duplex following the
1317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					auto-negotiation. */
1318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					xETH.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 2059              		.loc 1 1318 0
 2060 016a 194B     		ldr	r3, .L132+8
 2061 016c 0022     		movs	r2, #0
 2062 016e DA60     		str	r2, [r3, #12]
 2063              	.L128:
1319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* Configure the MAC with the speed fixed by the
1322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				auto-negotiation process. */
1323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				if( ( ulRegValue & PHY_SPEED_STATUS) != 0 )
 2064              		.loc 1 1323 0
 2065 0170 FB68     		ldr	r3, [r7, #12]
 2066 0172 03F00203 		and	r3, r3, #2
 2067 0176 002B     		cmp	r3, #0
 2068 0178 03D0     		beq	.L129
1324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					/* Set Ethernet speed to 10M following the
1326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					auto-negotiation. */
1327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					xETH.Init.Speed = ETH_SPEED_10M;
 2069              		.loc 1 1327 0
 2070 017a 154B     		ldr	r3, .L132+8
 2071 017c 0022     		movs	r2, #0
 2072 017e 9A60     		str	r2, [r3, #8]
 2073 0180 14E0     		b	.L130
 2074              	.L129:
1328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				else
1330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					/* Set Ethernet speed to 100M following the
1332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					auto-negotiation. */
1333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					xETH.Init.Speed = ETH_SPEED_100M;
 2075              		.loc 1 1333 0
 2076 0182 134B     		ldr	r3, .L132+8
 2077 0184 4FF48042 		mov	r2, #16384
 2078 0188 9A60     		str	r2, [r3, #8]
 2079 018a 0FE0     		b	.L130
 2080              	.L115:
 2081              	.LBB39:
1334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}	/* if( ulTimeout < PHY_READ_TO ) */
1336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else /* AutoNegotiation Disable */
1338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		uint16_t usValue;
1340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Check parameters */
1342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			assert_param( IS_ETH_SPEED( xETH.Init.Speed ) );
1343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			assert_param( IS_ETH_DUPLEX_MODE( xETH.Init.DuplexMode ) );
1344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Set MAC Speed and Duplex Mode to PHY */
1346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			usValue = ( uint16_t ) ( xETH.Init.DuplexMode >> 3 ) | ( uint16_t ) ( xETH.Init.Speed >> 1 );
 2082              		.loc 1 1346 0
 2083 018c 104B     		ldr	r3, .L132+8
ARM GAS  /tmp/cc2OCNfl.s 			page 73


 2084 018e DB68     		ldr	r3, [r3, #12]
 2085 0190 DB08     		lsrs	r3, r3, #3
 2086 0192 9AB2     		uxth	r2, r3
 2087 0194 0E4B     		ldr	r3, .L132+8
 2088 0196 9B68     		ldr	r3, [r3, #8]
 2089 0198 5B08     		lsrs	r3, r3, #1
 2090 019a 9BB2     		uxth	r3, r3
 2091 019c 1343     		orrs	r3, r3, r2
 2092 019e FB82     		strh	r3, [r7, #22]	@ movhi
1347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			HAL_ETH_WritePHYRegister( &xETH, PHY_REG_00_BMCR, usValue );
 2093              		.loc 1 1347 0
 2094 01a0 FB8A     		ldrh	r3, [r7, #22]
 2095 01a2 0B48     		ldr	r0, .L132+8
 2096 01a4 0021     		movs	r1, #0
 2097 01a6 1A46     		mov	r2, r3
 2098 01a8 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 2099              	.L130:
 2100              	.LBE39:
1348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* ETHERNET MAC Re-Configuration */
1351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		HAL_ETH_ConfigMAC( &xETH, (ETH_MACInitTypeDef *) NULL);
 2101              		.loc 1 1351 0
 2102 01ac 0848     		ldr	r0, .L132+8
 2103 01ae 0021     		movs	r1, #0
 2104 01b0 FFF7FEFF 		bl	HAL_ETH_ConfigMAC
1352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Restart MAC interface */
1354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		HAL_ETH_Start( &xETH);
 2105              		.loc 1 1354 0
 2106 01b4 0648     		ldr	r0, .L132+8
 2107 01b6 FFF7FEFF 		bl	HAL_ETH_Start
 2108 01ba 02E0     		b	.L112
 2109              	.L114:
1355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	else
1357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		/* Stop MAC interface */
1359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		HAL_ETH_Stop( &xETH );
 2110              		.loc 1 1359 0
 2111 01bc 0448     		ldr	r0, .L132+8
 2112 01be FFF7FEFF 		bl	HAL_ETH_Stop
 2113              	.L112:
1360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 2114              		.loc 1 1361 0
 2115 01c2 1837     		adds	r7, r7, #24
 2116              	.LCFI61:
 2117              		.cfi_def_cfa_offset 16
 2118 01c4 BD46     		mov	sp, r7
 2119              	.LCFI62:
 2120              		.cfi_def_cfa_register 13
 2121              		@ sp needed
 2122 01c6 B0BD     		pop	{r4, r5, r7, pc}
 2123              	.L133:
 2124              		.align	2
 2125              	.L132:
ARM GAS  /tmp/cc2OCNfl.s 			page 74


 2126 01c8 00000000 		.word	ulPHYLinkStatus
 2127 01cc A8000000 		.word	.LC9
 2128 01d0 00000000 		.word	xETH
 2129 01d4 00000000 		.word	ulBCRvalue
 2130 01d8 00000000 		.word	ulACRValue
 2131 01dc D4000000 		.word	.LC10
 2132 01e0 DC000000 		.word	.LC11
 2133 01e4 E4000000 		.word	.LC12
 2134 01e8 EC000000 		.word	.LC13
 2135              		.cfi_endproc
 2136              	.LFE175:
 2138              		.section	.text.xGetPhyLinkStatus,"ax",%progbits
 2139              		.align	2
 2140              		.global	xGetPhyLinkStatus
 2141              		.thumb
 2142              		.thumb_func
 2144              	xGetPhyLinkStatus:
 2145              	.LFB176:
1362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
1363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xGetPhyLinkStatus( void )
1365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 2146              		.loc 1 1365 0
 2147              		.cfi_startproc
 2148              		@ args = 0, pretend = 0, frame = 8
 2149              		@ frame_needed = 1, uses_anonymous_args = 0
 2150              		@ link register save eliminated.
 2151 0000 80B4     		push	{r7}
 2152              	.LCFI63:
 2153              		.cfi_def_cfa_offset 4
 2154              		.cfi_offset 7, -4
 2155 0002 83B0     		sub	sp, sp, #12
 2156              	.LCFI64:
 2157              		.cfi_def_cfa_offset 16
 2158 0004 00AF     		add	r7, sp, #0
 2159              	.LCFI65:
 2160              		.cfi_def_cfa_register 7
1366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xReturn;
1367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
 2161              		.loc 1 1368 0
 2162 0006 094B     		ldr	r3, .L138
 2163 0008 1B68     		ldr	r3, [r3]
 2164 000a 03F00403 		and	r3, r3, #4
 2165 000e 002B     		cmp	r3, #0
 2166 0010 02D0     		beq	.L135
1369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xReturn = pdPASS;
 2167              		.loc 1 1370 0
 2168 0012 0123     		movs	r3, #1
 2169 0014 7B60     		str	r3, [r7, #4]
 2170 0016 01E0     		b	.L136
 2171              	.L135:
1371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	else
1373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		xReturn = pdFAIL;
ARM GAS  /tmp/cc2OCNfl.s 			page 75


 2172              		.loc 1 1374 0
 2173 0018 0023     		movs	r3, #0
 2174 001a 7B60     		str	r3, [r7, #4]
 2175              	.L136:
1375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	return xReturn;
 2176              		.loc 1 1377 0
 2177 001c 7B68     		ldr	r3, [r7, #4]
1378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 2178              		.loc 1 1378 0
 2179 001e 1846     		mov	r0, r3
 2180 0020 0C37     		adds	r7, r7, #12
 2181              	.LCFI66:
 2182              		.cfi_def_cfa_offset 4
 2183 0022 BD46     		mov	sp, r7
 2184              	.LCFI67:
 2185              		.cfi_def_cfa_register 13
 2186              		@ sp needed
 2187 0024 5DF8047B 		ldr	r7, [sp], #4
 2188              	.LCFI68:
 2189              		.cfi_restore 7
 2190              		.cfi_def_cfa_offset 0
 2191 0028 7047     		bx	lr
 2192              	.L139:
 2193 002a 00BF     		.align	2
 2194              	.L138:
 2195 002c 00000000 		.word	ulPHYLinkStatus
 2196              		.cfi_endproc
 2197              	.LFE176:
 2199              		.section	.first_data
 2200              		.align	5
 2203              	ucNetworkPackets:
 2204 0100 00000000 		.space	47616
 2204      00000000 
 2204      00000000 
 2204      00000000 
 2204      00000000 
 2205              		.section	.text.vNetworkInterfaceAllocateRAMToBuffers,"ax",%progbits
 2206              		.align	2
 2207              		.global	vNetworkInterfaceAllocateRAMToBuffers
 2208              		.thumb
 2209              		.thumb_func
 2211              	vNetworkInterfaceAllocateRAMToBuffers:
 2212              	.LFB177:
1379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
1380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #define niBUFFER_1_PACKET_SIZE		1536
1382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static __attribute__ ((section(".first_data"))) uint8_t ucNetworkPackets[ ipconfigNUM_NETWORK_BUFFE
1384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM
1386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 2213              		.loc 1 1386 0
 2214              		.cfi_startproc
 2215              		@ args = 0, pretend = 0, frame = 16
 2216              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc2OCNfl.s 			page 76


 2217              		@ link register save eliminated.
 2218 0000 80B4     		push	{r7}
 2219              	.LCFI69:
 2220              		.cfi_def_cfa_offset 4
 2221              		.cfi_offset 7, -4
 2222 0002 85B0     		sub	sp, sp, #20
 2223              	.LCFI70:
 2224              		.cfi_def_cfa_offset 24
 2225 0004 00AF     		add	r7, sp, #0
 2226              	.LCFI71:
 2227              		.cfi_def_cfa_register 7
 2228 0006 7860     		str	r0, [r7, #4]
1387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** uint8_t *ucRAMBuffer = ucNetworkPackets;
 2229              		.loc 1 1388 0
 2230 0008 144B     		ldr	r3, .L143
 2231 000a FB60     		str	r3, [r7, #12]
1389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** uint32_t ul;
1390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 2232              		.loc 1 1391 0
 2233 000c 0023     		movs	r3, #0
 2234 000e BB60     		str	r3, [r7, #8]
 2235 0010 1CE0     		b	.L141
 2236              	.L142:
1392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 2237              		.loc 1 1393 0 discriminator 3
 2238 0012 BA68     		ldr	r2, [r7, #8]
 2239 0014 1346     		mov	r3, r2
 2240 0016 DB00     		lsls	r3, r3, #3
 2241 0018 1344     		add	r3, r3, r2
 2242 001a 9B00     		lsls	r3, r3, #2
 2243 001c 1A46     		mov	r2, r3
 2244 001e 7B68     		ldr	r3, [r7, #4]
 2245 0020 1344     		add	r3, r3, r2
 2246 0022 FA68     		ldr	r2, [r7, #12]
 2247 0024 0A32     		adds	r2, r2, #10
 2248 0026 9A61     		str	r2, [r3, #24]
1394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		*( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 2249              		.loc 1 1394 0 discriminator 3
 2250 0028 BA68     		ldr	r2, [r7, #8]
 2251 002a 1346     		mov	r3, r2
 2252 002c DB00     		lsls	r3, r3, #3
 2253 002e 1344     		add	r3, r3, r2
 2254 0030 9B00     		lsls	r3, r3, #2
 2255 0032 1A46     		mov	r2, r3
 2256 0034 7B68     		ldr	r3, [r7, #4]
 2257 0036 1344     		add	r3, r3, r2
 2258 0038 1A46     		mov	r2, r3
 2259 003a FB68     		ldr	r3, [r7, #12]
 2260 003c 1A60     		str	r2, [r3]
1395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		ucRAMBuffer += niBUFFER_1_PACKET_SIZE;
 2261              		.loc 1 1395 0 discriminator 3
 2262 003e FB68     		ldr	r3, [r7, #12]
 2263 0040 03F5C063 		add	r3, r3, #1536
 2264 0044 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc2OCNfl.s 			page 77


1391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 2265              		.loc 1 1391 0 discriminator 3
 2266 0046 BB68     		ldr	r3, [r7, #8]
 2267 0048 0133     		adds	r3, r3, #1
 2268 004a BB60     		str	r3, [r7, #8]
 2269              	.L141:
1391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
 2270              		.loc 1 1391 0 is_stmt 0 discriminator 1
 2271 004c BB68     		ldr	r3, [r7, #8]
 2272 004e 1E2B     		cmp	r3, #30
 2273 0050 DFD9     		bls	.L142
1396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
1397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
 2274              		.loc 1 1397 0 is_stmt 1
 2275 0052 1437     		adds	r7, r7, #20
 2276              	.LCFI72:
 2277              		.cfi_def_cfa_offset 4
 2278 0054 BD46     		mov	sp, r7
 2279              	.LCFI73:
 2280              		.cfi_def_cfa_register 13
 2281              		@ sp needed
 2282 0056 5DF8047B 		ldr	r7, [sp], #4
 2283              	.LCFI74:
 2284              		.cfi_restore 7
 2285              		.cfi_def_cfa_offset 0
 2286 005a 7047     		bx	lr
 2287              	.L144:
 2288              		.align	2
 2289              	.L143:
 2290 005c 00010000 		.word	ucNetworkPackets
 2291              		.cfi_endproc
 2292              	.LFE177:
 2294              		.section	.rodata
 2295 0123 00       		.align	2
 2296              	.LC14:
 2297 0124 4E657477 		.ascii	"Network buffers: %lu lowest %lu\012\000"
 2297      6F726B20 
 2297      62756666 
 2297      6572733A 
 2297      20256C75 
 2298 0145 000000   		.align	2
 2299              	.LC15:
 2300 0148 54582044 		.ascii	"TX DMA buffers: lowest %lu\012\000"
 2300      4D412062 
 2300      75666665 
 2300      72733A20 
 2300      6C6F7765 
 2301              		.align	2
 2302              	.LC16:
 2303 0164 70727645 		.ascii	"prvEMACHandlerTask: PHY LS now %d\012\000"
 2303      4D414348 
 2303      616E646C 
 2303      65725461 
 2303      736B3A20 
 2304              		.section	.text.prvEMACHandlerTask,"ax",%progbits
 2305              		.align	2
 2306              		.thumb
ARM GAS  /tmp/cc2OCNfl.s 			page 78


 2307              		.thumb_func
 2309              	prvEMACHandlerTask:
 2310              	.LFB178:
1398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
1399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** static void prvEMACHandlerTask( void *pvParameters )
1401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 2311              		.loc 1 1401 0
 2312              		.cfi_startproc
 2313              		@ args = 0, pretend = 0, frame = 40
 2314              		@ frame_needed = 1, uses_anonymous_args = 0
 2315 0000 80B5     		push	{r7, lr}
 2316              	.LCFI75:
 2317              		.cfi_def_cfa_offset 8
 2318              		.cfi_offset 7, -8
 2319              		.cfi_offset 14, -4
 2320 0002 8AB0     		sub	sp, sp, #40
 2321              	.LCFI76:
 2322              		.cfi_def_cfa_offset 48
 2323 0004 00AF     		add	r7, sp, #0
 2324              	.LCFI77:
 2325              		.cfi_def_cfa_register 7
 2326 0006 7860     		str	r0, [r7, #4]
1402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** TimeOut_t xPhyTime;
1403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** TickType_t xPhyRemTime;
1404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** UBaseType_t uxLastMinBufferCount = 0;
 2327              		.loc 1 1404 0
 2328 0008 0023     		movs	r3, #0
 2329 000a 7B62     		str	r3, [r7, #36]
1405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
1406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** UBaseType_t uxLastMinQueueSpace = 0;
1407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** #endif
1408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** UBaseType_t uxCurrentCount;
1409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** BaseType_t xResult = 0;
 2330              		.loc 1 1409 0
 2331 000c 0023     		movs	r3, #0
 2332 000e 3B62     		str	r3, [r7, #32]
1410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** uint32_t xStatus;
1411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
 2333              		.loc 1 1411 0
 2334 0010 6423     		movs	r3, #100
 2335 0012 FB61     		str	r3, [r7, #28]
1412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	/* Remove compiler warnings about unused parameters. */
1414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	( void ) pvParameters;
1415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	vTaskSetTimeOutState( &xPhyTime );
 2336              		.loc 1 1416 0
 2337 0014 07F11003 		add	r3, r7, #16
 2338 0018 1846     		mov	r0, r3
 2339 001a FFF7FEFF 		bl	vTaskSetTimeOutState
1417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	xPhyRemTime = pdMS_TO_TICKS( PHY_LS_LOW_CHECK_TIME_MS );
 2340              		.loc 1 1417 0
 2341 001e 4FF47A73 		mov	r3, #1000
 2342 0022 FB60     		str	r3, [r7, #12]
 2343              	.L157:
1418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
ARM GAS  /tmp/cc2OCNfl.s 			page 79


1419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	for( ;; )
1420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	{
1421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		uxCurrentCount = uxGetMinimumFreeNetworkBuffers();
 2344              		.loc 1 1421 0
 2345 0024 FFF7FEFF 		bl	uxGetMinimumFreeNetworkBuffers
 2346 0028 B861     		str	r0, [r7, #24]
1422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( uxLastMinBufferCount != uxCurrentCount )
 2347              		.loc 1 1422 0
 2348 002a 7A6A     		ldr	r2, [r7, #36]
 2349 002c BB69     		ldr	r3, [r7, #24]
 2350 002e 9A42     		cmp	r2, r3
 2351 0030 09D0     		beq	.L146
1423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* The logging produced below may be helpful
1425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			while tuning +TCP: see how many buffers are in use. */
1426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			uxLastMinBufferCount = uxCurrentCount;
 2352              		.loc 1 1426 0
 2353 0032 BB69     		ldr	r3, [r7, #24]
 2354 0034 7B62     		str	r3, [r7, #36]
1427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 2355              		.loc 1 1427 0
 2356 0036 FFF7FEFF 		bl	uxGetNumberOfFreeNetworkBuffers
 2357 003a 0346     		mov	r3, r0
 2358 003c 5448     		ldr	r0, .L158
 2359 003e 1946     		mov	r1, r3
 2360 0040 BA69     		ldr	r2, [r7, #24]
 2361 0042 FFF7FEFF 		bl	lUDPLoggingPrintf
 2362              	.L146:
1428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				uxGetNumberOfFreeNetworkBuffers(), uxCurrentCount ) );
1429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xTXDescriptorSemaphore != NULL )
 2363              		.loc 1 1431 0
 2364 0046 534B     		ldr	r3, .L158+4
 2365 0048 1B68     		ldr	r3, [r3]
 2366 004a 002B     		cmp	r3, #0
 2367 004c 13D0     		beq	.L147
 2368              	.LBB40:
1432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		static UBaseType_t uxLowestSemCount = ( UBaseType_t ) ETH_TXBUFNB - 1;
1434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			uxCurrentCount = uxSemaphoreGetCount( xTXDescriptorSemaphore );
 2369              		.loc 1 1435 0
 2370 004e 514B     		ldr	r3, .L158+4
 2371 0050 1B68     		ldr	r3, [r3]
 2372 0052 1846     		mov	r0, r3
 2373 0054 FFF7FEFF 		bl	uxQueueMessagesWaiting
 2374 0058 B861     		str	r0, [r7, #24]
1436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( uxLowestSemCount > uxCurrentCount )
 2375              		.loc 1 1436 0
 2376 005a 4F4B     		ldr	r3, .L158+8
 2377 005c 1A68     		ldr	r2, [r3]
 2378 005e BB69     		ldr	r3, [r7, #24]
 2379 0060 9A42     		cmp	r2, r3
 2380 0062 08D9     		bls	.L147
1437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				uxLowestSemCount = uxCurrentCount;
ARM GAS  /tmp/cc2OCNfl.s 			page 80


 2381              		.loc 1 1438 0
 2382 0064 4C4A     		ldr	r2, .L158+8
 2383 0066 BB69     		ldr	r3, [r7, #24]
 2384 0068 1360     		str	r3, [r2]
1439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				FreeRTOS_printf( ( "TX DMA buffers: lowest %lu\n", uxLowestSemCount ) );
 2385              		.loc 1 1439 0
 2386 006a 4B4B     		ldr	r3, .L158+8
 2387 006c 1B68     		ldr	r3, [r3]
 2388 006e 4B48     		ldr	r0, .L158+12
 2389 0070 1946     		mov	r1, r3
 2390 0072 FFF7FEFF 		bl	lUDPLoggingPrintf
 2391              	.L147:
 2392              	.LBE40:
1440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
1445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			uxCurrentCount = uxGetMinimumIPQueueSpace();
1447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( uxLastMinQueueSpace != uxCurrentCount )
1448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				/* The logging produced below may be helpful
1450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				while tuning +TCP: see how many buffers are in use. */
1451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				uxLastMinQueueSpace = uxCurrentCount;
1452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
1453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */
1456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 2393              		.loc 1 1457 0
 2394 0076 4A4B     		ldr	r3, .L158+16
 2395 0078 1B68     		ldr	r3, [r3]
 2396 007a 03F00703 		and	r3, r3, #7
 2397 007e 002B     		cmp	r3, #0
 2398 0080 03D1     		bne	.L148
1458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* No events to process now, wait for the next. */
1460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 2399              		.loc 1 1460 0
 2400 0082 0020     		movs	r0, #0
 2401 0084 F969     		ldr	r1, [r7, #28]
 2402 0086 FFF7FEFF 		bl	ulTaskNotifyTake
 2403              	.L148:
1461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 2404              		.loc 1 1463 0
 2405 008a 454B     		ldr	r3, .L158+16
 2406 008c 1B68     		ldr	r3, [r3]
 2407 008e 03F00103 		and	r3, r3, #1
 2408 0092 002B     		cmp	r3, #0
 2409 0094 11D0     		beq	.L149
1464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			ulISREvents &= ~EMAC_IF_RX_EVENT;
 2410              		.loc 1 1465 0
ARM GAS  /tmp/cc2OCNfl.s 			page 81


 2411 0096 424B     		ldr	r3, .L158+16
 2412 0098 1B68     		ldr	r3, [r3]
 2413 009a 23F00103 		bic	r3, r3, #1
 2414 009e 404A     		ldr	r2, .L158+16
 2415 00a0 1360     		str	r3, [r2]
1466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xResult = prvNetworkInterfaceInput();
 2416              		.loc 1 1467 0
 2417 00a2 FFF7FEFF 		bl	prvNetworkInterfaceInput
 2418 00a6 3862     		str	r0, [r7, #32]
1468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( xResult > 0 )
 2419              		.loc 1 1468 0
 2420 00a8 3B6A     		ldr	r3, [r7, #32]
 2421 00aa 002B     		cmp	r3, #0
 2422 00ac 05DD     		ble	.L149
1469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			  	while( prvNetworkInterfaceInput() > 0 )
 2423              		.loc 1 1470 0
 2424 00ae 00BF     		nop
 2425              	.L150:
 2426              		.loc 1 1470 0 is_stmt 0 discriminator 1
 2427 00b0 FFF7FEFF 		bl	prvNetworkInterfaceInput
 2428 00b4 0346     		mov	r3, r0
 2429 00b6 002B     		cmp	r3, #0
 2430 00b8 FADC     		bgt	.L150
 2431              	.L149:
1471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
 2432              		.loc 1 1476 0 is_stmt 1
 2433 00ba 394B     		ldr	r3, .L158+16
 2434 00bc 1B68     		ldr	r3, [r3]
 2435 00be 03F00203 		and	r3, r3, #2
 2436 00c2 002B     		cmp	r3, #0
 2437 00c4 07D0     		beq	.L151
1477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Code to release TX buffers if zero-copy is used. */
1479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			ulISREvents &= ~EMAC_IF_TX_EVENT;
 2438              		.loc 1 1479 0
 2439 00c6 364B     		ldr	r3, .L158+16
 2440 00c8 1B68     		ldr	r3, [r3]
 2441 00ca 23F00203 		bic	r3, r3, #2
 2442 00ce 344A     		ldr	r2, .L158+16
 2443 00d0 1360     		str	r3, [r2]
1480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Check if DMA packets have been delivered. */
1481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			vClearTXBuffers();
 2444              		.loc 1 1481 0
 2445 00d2 FFF7FEFF 		bl	vClearTXBuffers
 2446              	.L151:
1482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
 2447              		.loc 1 1484 0
 2448 00d6 324B     		ldr	r3, .L158+16
ARM GAS  /tmp/cc2OCNfl.s 			page 82


 2449 00d8 1B68     		ldr	r3, [r3]
 2450 00da 03F00403 		and	r3, r3, #4
 2451 00de 002B     		cmp	r3, #0
 2452 00e0 05D0     		beq	.L152
1485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* Future extension: logging about errors that occurred. */
1487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			ulISREvents &= ~EMAC_IF_ERR_EVENT;
 2453              		.loc 1 1487 0
 2454 00e2 2F4B     		ldr	r3, .L158+16
 2455 00e4 1B68     		ldr	r3, [r3]
 2456 00e6 23F00403 		bic	r3, r3, #4
 2457 00ea 2D4A     		ldr	r2, .L158+16
 2458 00ec 1360     		str	r3, [r2]
 2459              	.L152:
1488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		if( xResult > 0 )
 2460              		.loc 1 1490 0
 2461 00ee 3B6A     		ldr	r3, [r7, #32]
 2462 00f0 002B     		cmp	r3, #0
 2463 00f2 0ADD     		ble	.L153
1491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			/* A packet was received. No need to check for the PHY status now,
1493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			but set a timer to check it later on. */
1494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			vTaskSetTimeOutState( &xPhyTime );
 2464              		.loc 1 1494 0
 2465 00f4 07F11003 		add	r3, r7, #16
 2466 00f8 1846     		mov	r0, r3
 2467 00fa FFF7FEFF 		bl	vTaskSetTimeOutState
1495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xPhyRemTime = pdMS_TO_TICKS( PHY_LS_HIGH_CHECK_TIME_MS );
 2468              		.loc 1 1495 0
 2469 00fe 43F69823 		movw	r3, #15000
 2470 0102 FB60     		str	r3, [r7, #12]
1496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			xResult = 0;
 2471              		.loc 1 1496 0
 2472 0104 0023     		movs	r3, #0
 2473 0106 3B62     		str	r3, [r7, #32]
 2474 0108 41E0     		b	.L154
 2475              	.L153:
1497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		else if( xTaskCheckForTimeOut( &xPhyTime, &xPhyRemTime ) != pdFALSE )
 2476              		.loc 1 1498 0
 2477 010a 07F11002 		add	r2, r7, #16
 2478 010e 07F10C03 		add	r3, r7, #12
 2479 0112 1046     		mov	r0, r2
 2480 0114 1946     		mov	r1, r3
 2481 0116 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2482 011a 0346     		mov	r3, r0
 2483 011c 002B     		cmp	r3, #0
 2484 011e 36D0     		beq	.L154
1499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		{
1500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_01_BMSR, &xStatus ) == HAL_OK )
 2485              		.loc 1 1500 0
 2486 0120 07F10803 		add	r3, r7, #8
 2487 0124 1F48     		ldr	r0, .L158+20
 2488 0126 0121     		movs	r1, #1
 2489 0128 1A46     		mov	r2, r3
ARM GAS  /tmp/cc2OCNfl.s 			page 83


 2490 012a FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 2491 012e 0346     		mov	r3, r0
 2492 0130 002B     		cmp	r3, #0
 2493 0132 1AD1     		bne	.L155
1501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != ( xStatus & BMSR_LINK_STATUS ) )
 2494              		.loc 1 1502 0
 2495 0134 1C4B     		ldr	r3, .L158+24
 2496 0136 1A68     		ldr	r2, [r3]
 2497 0138 BB68     		ldr	r3, [r7, #8]
 2498 013a 5340     		eors	r3, r3, r2
 2499 013c 03F00403 		and	r3, r3, #4
 2500 0140 002B     		cmp	r3, #0
 2501 0142 12D0     		beq	.L155
1503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				{
1504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					ulPHYLinkStatus = xStatus;
 2502              		.loc 1 1504 0
 2503 0144 BB68     		ldr	r3, [r7, #8]
 2504 0146 184A     		ldr	r2, .L158+24
 2505 0148 1360     		str	r3, [r2]
1505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					FreeRTOS_printf( ( "prvEMACHandlerTask: PHY LS now %d\n", ( ulPHYLinkStatus & BMSR_LINK_STATUS
 2506              		.loc 1 1505 0
 2507 014a 174B     		ldr	r3, .L158+24
 2508 014c 1B68     		ldr	r3, [r3]
 2509 014e 03F00403 		and	r3, r3, #4
 2510 0152 002B     		cmp	r3, #0
 2511 0154 14BF     		ite	ne
 2512 0156 0123     		movne	r3, #1
 2513 0158 0023     		moveq	r3, #0
 2514 015a DBB2     		uxtb	r3, r3
 2515 015c 1348     		ldr	r0, .L158+28
 2516 015e 1946     		mov	r1, r3
 2517 0160 FFF7FEFF 		bl	lUDPLoggingPrintf
1506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 					prvEthernetUpdateConfig( pdFALSE );
 2518              		.loc 1 1506 0
 2519 0164 0020     		movs	r0, #0
 2520 0166 FFF7FEFF 		bl	prvEthernetUpdateConfig
 2521              	.L155:
1507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				}
1508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			vTaskSetTimeOutState( &xPhyTime );
 2522              		.loc 1 1509 0
 2523 016a 07F11003 		add	r3, r7, #16
 2524 016e 1846     		mov	r0, r3
 2525 0170 FFF7FEFF 		bl	vTaskSetTimeOutState
1510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
 2526              		.loc 1 1510 0
 2527 0174 0C4B     		ldr	r3, .L158+24
 2528 0176 1B68     		ldr	r3, [r3]
 2529 0178 03F00403 		and	r3, r3, #4
 2530 017c 002B     		cmp	r3, #0
 2531 017e 03D0     		beq	.L156
1511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				xPhyRemTime = pdMS_TO_TICKS( PHY_LS_HIGH_CHECK_TIME_MS );
 2532              		.loc 1 1512 0
 2533 0180 43F69823 		movw	r3, #15000
 2534 0184 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc2OCNfl.s 			page 84


 2535 0186 02E0     		b	.L154
 2536              	.L156:
1513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			else
1515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			{
1516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 				xPhyRemTime = pdMS_TO_TICKS( PHY_LS_LOW_CHECK_TIME_MS );
 2537              		.loc 1 1516 0
 2538 0188 4FF47A73 		mov	r3, #1000
 2539 018c FB60     		str	r3, [r7, #12]
 2540              	.L154:
1517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 			}
1518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 		}
1519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	}
 2541              		.loc 1 1519 0
 2542 018e 49E7     		b	.L157
 2543              	.L159:
 2544              		.align	2
 2545              	.L158:
 2546 0190 24010000 		.word	.LC14
 2547 0194 00000000 		.word	xTXDescriptorSemaphore
 2548 0198 00000000 		.word	uxLowestSemCount.11536
 2549 019c 48010000 		.word	.LC15
 2550 01a0 00000000 		.word	ulISREvents
 2551 01a4 00000000 		.word	xETH
 2552 01a8 00000000 		.word	ulPHYLinkStatus
 2553 01ac 64010000 		.word	.LC16
 2554              		.cfi_endproc
 2555              	.LFE178:
 2557              		.section	.text.ETH_IRQHandler,"ax",%progbits
 2558              		.align	2
 2559              		.global	ETH_IRQHandler
 2560              		.thumb
 2561              		.thumb_func
 2563              	ETH_IRQHandler:
 2564              	.LFB179:
1520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
1521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** /*-----------------------------------------------------------*/
1522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 
1523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** void ETH_IRQHandler( void )
1524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** {
 2565              		.loc 1 1524 0
 2566              		.cfi_startproc
 2567              		@ args = 0, pretend = 0, frame = 0
 2568              		@ frame_needed = 1, uses_anonymous_args = 0
 2569 0000 80B5     		push	{r7, lr}
 2570              	.LCFI78:
 2571              		.cfi_def_cfa_offset 8
 2572              		.cfi_offset 7, -8
 2573              		.cfi_offset 14, -4
 2574 0002 00AF     		add	r7, sp, #0
 2575              	.LCFI79:
 2576              		.cfi_def_cfa_register 7
1525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** 	HAL_ETH_IRQHandler( &xETH );
 2577              		.loc 1 1525 0
 2578 0004 0148     		ldr	r0, .L161
 2579 0006 FFF7FEFF 		bl	HAL_ETH_IRQHandler
1526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/portable/NetworkInterface/NetworkInterface_STM32F7xx/NetworkInterface.c **** }
ARM GAS  /tmp/cc2OCNfl.s 			page 85


 2580              		.loc 1 1526 0
 2581 000a 80BD     		pop	{r7, pc}
 2582              	.L162:
 2583              		.align	2
 2584              	.L161:
 2585 000c 00000000 		.word	xETH
 2586              		.cfi_endproc
 2587              	.LFE179:
 2589              		.section	.data.uxLowestSemCount.11536,"aw",%progbits
 2590              		.align	2
 2593              	uxLowestSemCount.11536:
 2594 0000 03000000 		.word	3
 2595              		.text
 2596              	.Letext0:
 2597              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2598              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2599              		.file 6 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 2600              		.file 7 "../../../FreeRTOS_9_0/Source/include/list.h"
 2601              		.file 8 "../../../FreeRTOS_9_0/Source/include/task.h"
 2602              		.file 9 "../../../FreeRTOS_9_0/Source/include/queue.h"
 2603              		.file 10 "../../../FreeRTOS_9_0/Source/include/semphr.h"
 2604              		.file 11 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
 2605              		.file 12 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
 2606              		.file 13 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f769xx.h"
 2607              		.file 14 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 2608              		.file 15 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2609              		.file 16 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 2610              		.file 17 "../../Drivers/CMSIS/Include/core_cm7.h"
ARM GAS  /tmp/cc2OCNfl.s 			page 86


DEFINED SYMBOLS
                            *ABS*:0000000000000000 NetworkInterface.c
     /tmp/cc2OCNfl.s:21     .bss.ulISREvents:0000000000000000 $d
     /tmp/cc2OCNfl.s:24     .bss.ulISREvents:0000000000000000 ulISREvents
     /tmp/cc2OCNfl.s:27     .bss.ulPHYLinkStatus:0000000000000000 $d
     /tmp/cc2OCNfl.s:30     .bss.ulPHYLinkStatus:0000000000000000 ulPHYLinkStatus
     /tmp/cc2OCNfl.s:33     .rodata.xLLMNR_MACAddress:0000000000000000 $d
     /tmp/cc2OCNfl.s:36     .rodata.xLLMNR_MACAddress:0000000000000000 xLLMNR_MACAddress
     /tmp/cc2OCNfl.s:44     .bss.xETH:0000000000000000 $d
     /tmp/cc2OCNfl.s:47     .bss.xETH:0000000000000000 xETH
     /tmp/cc2OCNfl.s:50     .bss.xTXDescriptorSemaphore:0000000000000000 $d
     /tmp/cc2OCNfl.s:53     .bss.xTXDescriptorSemaphore:0000000000000000 xTXDescriptorSemaphore
     /tmp/cc2OCNfl.s:60     .first_data:0000000000000000 DMARxDscrTab
     /tmp/cc2OCNfl.s:57     .first_data:0000000000000000 $d
     /tmp/cc2OCNfl.s:66     .first_data:0000000000000080 DMATxDscrTab
     /tmp/cc2OCNfl.s:69     .bss.DMATxDescToClear:0000000000000000 $d
     /tmp/cc2OCNfl.s:72     .bss.DMATxDescToClear:0000000000000000 DMATxDescToClear
     /tmp/cc2OCNfl.s:75     .bss.ulBCRvalue:0000000000000000 $d
     /tmp/cc2OCNfl.s:78     .bss.ulBCRvalue:0000000000000000 ulBCRvalue
     /tmp/cc2OCNfl.s:81     .bss.ulACRValue:0000000000000000 $d
     /tmp/cc2OCNfl.s:84     .bss.ulACRValue:0000000000000000 ulACRValue
     /tmp/cc2OCNfl.s:87     .bss.xEMACTaskHandle:0000000000000000 $d
     /tmp/cc2OCNfl.s:90     .bss.xEMACTaskHandle:0000000000000000 xEMACTaskHandle
     /tmp/cc2OCNfl.s:97     .rodata.xPHYProperties:0000000000000000 xPHYProperties
     /tmp/cc2OCNfl.s:94     .rodata.xPHYProperties:0000000000000000 $d
     /tmp/cc2OCNfl.s:103    .text.HAL_ETH_RxCpltCallback:0000000000000000 $t
     /tmp/cc2OCNfl.s:108    .text.HAL_ETH_RxCpltCallback:0000000000000000 HAL_ETH_RxCpltCallback
     /tmp/cc2OCNfl.s:181    .text.HAL_ETH_RxCpltCallback:0000000000000058 $d
     /tmp/cc2OCNfl.s:188    .text.HAL_ETH_TxCpltCallback:0000000000000000 $t
     /tmp/cc2OCNfl.s:193    .text.HAL_ETH_TxCpltCallback:0000000000000000 HAL_ETH_TxCpltCallback
     /tmp/cc2OCNfl.s:265    .text.HAL_ETH_TxCpltCallback:0000000000000058 $d
     /tmp/cc2OCNfl.s:272    .text.vClearTXBuffers:0000000000000000 $t
     /tmp/cc2OCNfl.s:276    .text.vClearTXBuffers:0000000000000000 vClearTXBuffers
     /tmp/cc2OCNfl.s:391    .text.vClearTXBuffers:0000000000000094 $d
     /tmp/cc2OCNfl.s:398    .rodata:0000000000000000 $d
     /tmp/cc2OCNfl.s:408    .text.xNetworkInterfaceInitialise:0000000000000000 $t
     /tmp/cc2OCNfl.s:413    .text.xNetworkInterfaceInitialise:0000000000000000 xNetworkInterfaceInitialise
     /tmp/cc2OCNfl.s:629    .text.prvDMATxDescListInit:0000000000000000 prvDMATxDescListInit
     /tmp/cc2OCNfl.s:732    .text.prvDMARxDescListInit:0000000000000000 prvDMARxDescListInit
     /tmp/cc2OCNfl.s:863    .text.prvMACAddressConfig:0000000000000000 prvMACAddressConfig
     /tmp/cc2OCNfl.s:1846   .text.prvEthernetUpdateConfig:0000000000000000 prvEthernetUpdateConfig
     /tmp/cc2OCNfl.s:606    .text.xNetworkInterfaceInitialise:0000000000000124 $d
     /tmp/cc2OCNfl.s:2309   .text.prvEMACHandlerTask:0000000000000000 prvEMACHandlerTask
     /tmp/cc2OCNfl.s:625    .text.prvDMATxDescListInit:0000000000000000 $t
     /tmp/cc2OCNfl.s:722    .text.prvDMATxDescListInit:0000000000000070 $d
     /tmp/cc2OCNfl.s:728    .text.prvDMARxDescListInit:0000000000000000 $t
     /tmp/cc2OCNfl.s:853    .text.prvDMARxDescListInit:0000000000000094 $d
     /tmp/cc2OCNfl.s:859    .text.prvMACAddressConfig:0000000000000000 $t
     /tmp/cc2OCNfl.s:943    .text.prvMACAddressConfig:0000000000000068 $d
     /tmp/cc2OCNfl.s:949    .text.xNetworkInterfaceOutput:0000000000000000 $t
     /tmp/cc2OCNfl.s:954    .text.xNetworkInterfaceOutput:0000000000000000 xNetworkInterfaceOutput
     /tmp/cc2OCNfl.s:1166   .text.xNetworkInterfaceOutput:000000000000011c $d
     /tmp/cc2OCNfl.s:1174   .text.xMayAcceptPacket:0000000000000000 $t
     /tmp/cc2OCNfl.s:1178   .text.xMayAcceptPacket:0000000000000000 xMayAcceptPacket
     /tmp/cc2OCNfl.s:1238   .text.prvNetworkInterfaceInput:0000000000000000 $t
     /tmp/cc2OCNfl.s:1242   .text.prvNetworkInterfaceInput:0000000000000000 prvNetworkInterfaceInput
     /tmp/cc2OCNfl.s:1484   .text.prvNetworkInterfaceInput:0000000000000154 $d
ARM GAS  /tmp/cc2OCNfl.s 			page 87


     /tmp/cc2OCNfl.s:1509   .text.vMACBProbePhy:0000000000000000 $t
     /tmp/cc2OCNfl.s:1514   .text.vMACBProbePhy:0000000000000000 vMACBProbePhy
     /tmp/cc2OCNfl.s:1811   .text.vMACBProbePhy:00000000000001e4 $d
     /tmp/cc2OCNfl.s:1842   .text.prvEthernetUpdateConfig:0000000000000000 $t
     /tmp/cc2OCNfl.s:2126   .text.prvEthernetUpdateConfig:00000000000001c8 $d
     /tmp/cc2OCNfl.s:2139   .text.xGetPhyLinkStatus:0000000000000000 $t
     /tmp/cc2OCNfl.s:2144   .text.xGetPhyLinkStatus:0000000000000000 xGetPhyLinkStatus
     /tmp/cc2OCNfl.s:2195   .text.xGetPhyLinkStatus:000000000000002c $d
     /tmp/cc2OCNfl.s:2203   .first_data:0000000000000100 ucNetworkPackets
     /tmp/cc2OCNfl.s:2206   .text.vNetworkInterfaceAllocateRAMToBuffers:0000000000000000 $t
     /tmp/cc2OCNfl.s:2211   .text.vNetworkInterfaceAllocateRAMToBuffers:0000000000000000 vNetworkInterfaceAllocateRAMToBuffers
     /tmp/cc2OCNfl.s:2290   .text.vNetworkInterfaceAllocateRAMToBuffers:000000000000005c $d
     /tmp/cc2OCNfl.s:2305   .text.prvEMACHandlerTask:0000000000000000 $t
     /tmp/cc2OCNfl.s:2546   .text.prvEMACHandlerTask:0000000000000190 $d
     /tmp/cc2OCNfl.s:2593   .data.uxLowestSemCount.11536:0000000000000000 uxLowestSemCount.11536
     /tmp/cc2OCNfl.s:2558   .text.ETH_IRQHandler:0000000000000000 $t
     /tmp/cc2OCNfl.s:2563   .text.ETH_IRQHandler:0000000000000000 ETH_IRQHandler
     /tmp/cc2OCNfl.s:2585   .text.ETH_IRQHandler:000000000000000c $d
     /tmp/cc2OCNfl.s:2590   .data.uxLowestSemCount.11536:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vTaskNotifyGiveFromISR
SEGGER_SYSVIEW_RecordExitISRToScheduler
SEGGER_SYSVIEW_RecordExitISR
uxQueueMessagesWaiting
pxPacketBuffer_to_NetworkBuffer
vReleaseNetworkBufferAndDescriptor
xQueueGenericSend
xQueueCreateCountingSemaphore
HAL_ETH_Init
memset
xTaskCreate
lUDPLoggingPrintf
ucMACAddress
pxGetNetworkBufferWithDescriptor
xQueueGenericReceive
xSendEventStructToIPTask
HAL_ETH_ReadPHYRegister
HAL_ETH_WritePHYRegister
vTaskSetTimeOutState
xTaskCheckForTimeOut
vTaskDelay
HAL_ETH_ConfigMAC
HAL_ETH_Start
HAL_ETH_Stop
uxGetMinimumFreeNetworkBuffers
uxGetNumberOfFreeNetworkBuffers
ulTaskNotifyTake
HAL_ETH_IRQHandler

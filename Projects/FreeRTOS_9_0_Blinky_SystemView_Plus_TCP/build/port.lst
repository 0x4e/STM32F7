ARM GAS  /tmp/ccdPbwpy.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"port.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.data.uxCriticalNesting,"aw",%progbits
  21              		.align	2
  24              	uxCriticalNesting:
  25 0000 AAAAAAAA 		.word	-1431655766
  26              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
  29              	ucMaxSysCallPriority:
  30 0000 00       		.space	1
  31              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
  32              		.align	2
  35              	ulMaxPRIGROUPValue:
  36 0000 00000000 		.space	4
  37              		.section	.rodata.pcInterruptPriorityRegisters,"a",%progbits
  38              		.align	2
  41              	pcInterruptPriorityRegisters:
  42 0000 F0E300E0 		.word	-536812560
  43              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  44              		.align	2
  45              		.global	pxPortInitialiseStack
  46              		.thumb
  47              		.thumb_func
  49              	pxPortInitialiseStack:
  50              	.LFB5:
  51              		.file 1 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
ARM GAS  /tmp/ccdPbwpy.s 			page 2


  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
ARM GAS  /tmp/ccdPbwpy.s 			page 3


  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #else
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	as the core. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** r0p1 port. */
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccdPbwpy.s 			page 4


 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXEC_RETURN				( 0xfffffffd )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** calculations. */
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** debugger. */
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #else
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #endif
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
ARM GAS  /tmp/ccdPbwpy.s 			page 5


 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
  52              		.loc 1 230 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 16
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 80B4     		push	{r7}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 4
  60              		.cfi_offset 7, -4
  61 0002 85B0     		sub	sp, sp, #20
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 24
  64 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccdPbwpy.s 			page 6


  65              	.LCFI2:
  66              		.cfi_def_cfa_register 7
  67 0006 F860     		str	r0, [r7, #12]
  68 0008 B960     		str	r1, [r7, #8]
  69 000a 7A60     		str	r2, [r7, #4]
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  70              		.loc 1 236 0
  71 000c FB68     		ldr	r3, [r7, #12]
  72 000e 043B     		subs	r3, r3, #4
  73 0010 FB60     		str	r3, [r7, #12]
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  74              		.loc 1 238 0
  75 0012 FB68     		ldr	r3, [r7, #12]
  76 0014 4FF08072 		mov	r2, #16777216
  77 0018 1A60     		str	r2, [r3]
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  78              		.loc 1 239 0
  79 001a FB68     		ldr	r3, [r7, #12]
  80 001c 043B     		subs	r3, r3, #4
  81 001e FB60     		str	r3, [r7, #12]
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  82              		.loc 1 240 0
  83 0020 BB68     		ldr	r3, [r7, #8]
  84 0022 23F00102 		bic	r2, r3, #1
  85 0026 FB68     		ldr	r3, [r7, #12]
  86 0028 1A60     		str	r2, [r3]
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  87              		.loc 1 241 0
  88 002a FB68     		ldr	r3, [r7, #12]
  89 002c 043B     		subs	r3, r3, #4
  90 002e FB60     		str	r3, [r7, #12]
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  91              		.loc 1 242 0
  92 0030 FB68     		ldr	r3, [r7, #12]
  93 0032 0022     		movs	r2, #0
  94 0034 1A60     		str	r2, [r3]
 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  95              		.loc 1 245 0
  96 0036 FB68     		ldr	r3, [r7, #12]
  97 0038 143B     		subs	r3, r3, #20
  98 003a FB60     		str	r3, [r7, #12]
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  99              		.loc 1 246 0
 100 003c 7A68     		ldr	r2, [r7, #4]
 101 003e FB68     		ldr	r3, [r7, #12]
 102 0040 1A60     		str	r2, [r3]
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
ARM GAS  /tmp/ccdPbwpy.s 			page 7


 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 103              		.loc 1 250 0
 104 0042 FB68     		ldr	r3, [r7, #12]
 105 0044 043B     		subs	r3, r3, #4
 106 0046 FB60     		str	r3, [r7, #12]
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 107              		.loc 1 251 0
 108 0048 FB68     		ldr	r3, [r7, #12]
 109 004a 6FF00202 		mvn	r2, #2
 110 004e 1A60     		str	r2, [r3]
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 111              		.loc 1 253 0
 112 0050 FB68     		ldr	r3, [r7, #12]
 113 0052 203B     		subs	r3, r3, #32
 114 0054 FB60     		str	r3, [r7, #12]
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 115              		.loc 1 255 0
 116 0056 FB68     		ldr	r3, [r7, #12]
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 117              		.loc 1 256 0
 118 0058 1846     		mov	r0, r3
 119 005a 1437     		adds	r7, r7, #20
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 4
 122 005c BD46     		mov	sp, r7
 123              	.LCFI4:
 124              		.cfi_def_cfa_register 13
 125              		@ sp needed
 126 005e 5DF8047B 		ldr	r7, [sp], #4
 127              	.LCFI5:
 128              		.cfi_restore 7
 129              		.cfi_def_cfa_offset 0
 130 0062 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE5:
 134              		.section	.text.prvTaskExitError,"ax",%progbits
 135              		.align	2
 136              		.thumb
 137              		.thumb_func
 139              	prvTaskExitError:
 140              	.LFB6:
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 141              		.loc 1 260 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 8
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 0000 80B4     		push	{r7}
 147              	.LCFI6:
 148              		.cfi_def_cfa_offset 4
 149              		.cfi_offset 7, -4
 150 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccdPbwpy.s 			page 8


 151              	.LCFI7:
 152              		.cfi_def_cfa_offset 16
 153 0004 00AF     		add	r7, sp, #0
 154              	.LCFI8:
 155              		.cfi_def_cfa_register 7
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 156              		.loc 1 267 0
 157 0006 0C4B     		ldr	r3, .L7
 158 0008 1B68     		ldr	r3, [r3]
 159 000a B3F1FF3F 		cmp	r3, #-1
 160 000e 09D0     		beq	.L4
 161              	.LBB29:
 162              	.LBB30:
 163              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
ARM GAS  /tmp/ccdPbwpy.s 			page 9


  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  /tmp/ccdPbwpy.s 			page 10


  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  /tmp/ccdPbwpy.s 			page 11


 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  /tmp/ccdPbwpy.s 			page 12


 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 164              		.loc 2 237 0 discriminator 1
 165              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 166 0010 4FF05003 			mov r3, #80												
 167 0014 83F31188 		msr basepri, r3											
 168 0018 BFF36F8F 		isb														
 169 001c BFF34F8F 		dsb														
 170              	
 171              	@ 0 "" 2
 172              		.thumb
 173 0020 7B60     		str	r3, [r7, #4]
 174              	.L5:
 175              	.LBE30:
 176              	.LBE29:
 177              		.loc 1 267 0 discriminator 1
 178 0022 FEE7     		b	.L5
 179              	.L4:
 180              	.LBB31:
 181              	.LBB32:
 182              		.loc 2 237 0
 183              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 184 0024 4FF05003 			mov r3, #80												
 185 0028 83F31188 		msr basepri, r3											
 186 002c BFF36F8F 		isb														
 187 0030 BFF34F8F 		dsb														
 188              	
 189              	@ 0 "" 2
 190              		.thumb
 191 0034 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccdPbwpy.s 			page 13


 192              	.L6:
 193              	.LBE32:
 194              	.LBE31:
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	for( ;; );
 195              		.loc 1 269 0 discriminator 2
 196 0036 FEE7     		b	.L6
 197              	.L8:
 198              		.align	2
 199              	.L7:
 200 0038 00000000 		.word	uxCriticalNesting
 201              		.cfi_endproc
 202              	.LFE6:
 204              		.section	.text.SVC_Handler,"ax",%progbits
 205              		.align	2
 206              		.global	SVC_Handler
 207              		.thumb
 208              		.thumb_func
 210              	SVC_Handler:
 211              	.LFB7:
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 272:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 273:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 274:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 212              		.loc 1 274 0
 213              		.cfi_startproc
 214              		@ Naked Function: prologue and epilogue provided by programmer.
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 275:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 217              		.loc 1 275 0
 218              	@ 275 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c" 1
 219 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 220 0002 1968     		ldr r1, [r3]					
 221 0004 0868     		ldr r0, [r1]					
 222 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 223 000a 80F30988 		msr psp, r0						
 224 000e BFF36F8F 		isb								
 225 0012 4FF00000 		mov r0, #0 						
 226 0016 80F31188 		msr	basepri, r0					
 227 001a 7047     		bx r14							
 228              										
 229 001c AFF30080 		.align 4						
 230 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 231              	
 232              	@ 0 "" 2
 276:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 277:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 278:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 279:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 280:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 281:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	isb								\n"
 282:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 283:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 284:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 285:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
ARM GAS  /tmp/ccdPbwpy.s 			page 14


 286:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 4						\n"
 287:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 288:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 289:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 233              		.loc 1 289 0
 234              		.thumb
 235              		.cfi_endproc
 236              	.LFE7:
 238              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 239              		.align	2
 240              		.thumb
 241              		.thumb_func
 243              	prvPortStartFirstTask:
 244              	.LFB8:
 290:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 291:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 292:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 293:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 245              		.loc 1 293 0
 246              		.cfi_startproc
 247              		@ Naked Function: prologue and epilogue provided by programmer.
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 294:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 250              		.loc 1 294 0
 251              	@ 294 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c" 1
 252 0000 0648     		 ldr r0, =0xE000ED08 	
 253 0002 0068     	 ldr r0, [r0] 			
 254 0004 0068     	 ldr r0, [r0] 			
 255 0006 80F30888 	 msr msp, r0			
 256 000a 62B6     	 cpsie i				
 257 000c 61B6     	 cpsie f				
 258 000e BFF34F8F 	 dsb					
 259 0012 BFF36F8F 	 isb					
 260 0016 00DF     	 svc 0					
 261 0018 00BF     	 nop					
 262              	
 263              	@ 0 "" 2
 295:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 296:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 297:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 298:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 299:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 300:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie f				\n"
 301:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" dsb					\n"
 302:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" isb					\n"
 303:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 304:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 305:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 306:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 264              		.loc 1 306 0
 265              		.thumb
 266              		.cfi_endproc
 267              	.LFE8:
 269 001a 0000     		.section	.text.xPortStartScheduler,"ax",%progbits
 270              		.align	2
 271              		.global	xPortStartScheduler
ARM GAS  /tmp/ccdPbwpy.s 			page 15


 272              		.thumb
 273              		.thumb_func
 275              	xPortStartScheduler:
 276              	.LFB9:
 307:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 308:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 309:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 310:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 311:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 312:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 313:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 277              		.loc 1 313 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 24
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              	.LCFI9:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 86B0     		sub	sp, sp, #24
 287              	.LCFI10:
 288              		.cfi_def_cfa_offset 32
 289 0004 00AF     		add	r7, sp, #0
 290              	.LCFI11:
 291              		.cfi_def_cfa_register 7
 314:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 315:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 316:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 317:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 318:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 319:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 320:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 321:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 292              		.loc 1 321 0
 293 0006 3B4B     		ldr	r3, .L19
 294 0008 1B68     		ldr	r3, [r3]
 295 000a 3B4A     		ldr	r2, .L19+4
 296 000c 9342     		cmp	r3, r2
 297 000e 09D1     		bne	.L12
 298              	.LBB33:
 299              	.LBB34:
 300              		.loc 2 237 0 discriminator 1
 301              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 302 0010 4FF05003 			mov r3, #80												
 303 0014 83F31188 		msr basepri, r3											
 304 0018 BFF36F8F 		isb														
 305 001c BFF34F8F 		dsb														
 306              	
 307              	@ 0 "" 2
 308              		.thumb
 309 0020 3B61     		str	r3, [r7, #16]
 310              	.L13:
 311              	.LBE34:
 312              	.LBE33:
 313              		.loc 1 321 0 discriminator 2
 314 0022 FEE7     		b	.L13
ARM GAS  /tmp/ccdPbwpy.s 			page 16


 315              	.L12:
 322:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 316              		.loc 1 322 0
 317 0024 334B     		ldr	r3, .L19
 318 0026 1B68     		ldr	r3, [r3]
 319 0028 344A     		ldr	r2, .L19+8
 320 002a 9342     		cmp	r3, r2
 321 002c 09D1     		bne	.L14
 322              	.LBB35:
 323              	.LBB36:
 324              		.loc 2 237 0 discriminator 1
 325              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 326 002e 4FF05003 			mov r3, #80												
 327 0032 83F31188 		msr basepri, r3											
 328 0036 BFF36F8F 		isb														
 329 003a BFF34F8F 		dsb														
 330              	
 331              	@ 0 "" 2
 332              		.thumb
 333 003e FB60     		str	r3, [r7, #12]
 334              	.L15:
 335              	.LBE36:
 336              	.LBE35:
 337              		.loc 1 322 0 discriminator 3
 338 0040 FEE7     		b	.L15
 339              	.L14:
 340              	.LBB37:
 323:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 324:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 325:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 326:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint32_t ulOriginalPriority;
 327:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 341              		.loc 1 327 0
 342 0042 2F4B     		ldr	r3, .L19+12
 343 0044 7B61     		str	r3, [r7, #20]
 328:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 329:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 330:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 331:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 332:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 333:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 334:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 335:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 336:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 344              		.loc 1 336 0
 345 0046 7B69     		ldr	r3, [r7, #20]
 346 0048 1B78     		ldrb	r3, [r3]
 347 004a DBB2     		uxtb	r3, r3
 348 004c BB60     		str	r3, [r7, #8]
 337:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 338:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 339:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		possible bits. */
 340:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 349              		.loc 1 340 0
 350 004e 7B69     		ldr	r3, [r7, #20]
 351 0050 FF22     		movs	r2, #255
 352 0052 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccdPbwpy.s 			page 17


 341:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 342:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 343:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 353              		.loc 1 343 0
 354 0054 7B69     		ldr	r3, [r7, #20]
 355 0056 1B78     		ldrb	r3, [r3]
 356 0058 DBB2     		uxtb	r3, r3
 357 005a FB71     		strb	r3, [r7, #7]
 344:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 345:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 346:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 358              		.loc 1 346 0
 359 005c FB79     		ldrb	r3, [r7, #7]
 360 005e DBB2     		uxtb	r3, r3
 361 0060 03F05003 		and	r3, r3, #80
 362 0064 DAB2     		uxtb	r2, r3
 363 0066 274B     		ldr	r3, .L19+16
 364 0068 1A70     		strb	r2, [r3]
 347:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 348:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 349:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		of bits read back. */
 350:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 365              		.loc 1 350 0
 366 006a 274B     		ldr	r3, .L19+20
 367 006c 0722     		movs	r2, #7
 368 006e 1A60     		str	r2, [r3]
 351:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 369              		.loc 1 351 0
 370 0070 09E0     		b	.L16
 371              	.L17:
 352:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 353:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 372              		.loc 1 353 0
 373 0072 254B     		ldr	r3, .L19+20
 374 0074 1B68     		ldr	r3, [r3]
 375 0076 013B     		subs	r3, r3, #1
 376 0078 234A     		ldr	r2, .L19+20
 377 007a 1360     		str	r3, [r2]
 354:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 378              		.loc 1 354 0
 379 007c FB79     		ldrb	r3, [r7, #7]
 380 007e DBB2     		uxtb	r3, r3
 381 0080 5B00     		lsls	r3, r3, #1
 382 0082 DBB2     		uxtb	r3, r3
 383 0084 FB71     		strb	r3, [r7, #7]
 384              	.L16:
 351:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 385              		.loc 1 351 0
 386 0086 FB79     		ldrb	r3, [r7, #7]
 387 0088 DBB2     		uxtb	r3, r3
 388 008a DBB2     		uxtb	r3, r3
 389 008c 5BB2     		sxtb	r3, r3
 390 008e 002B     		cmp	r3, #0
 391 0090 EFDB     		blt	.L17
 355:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 356:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 357:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
ARM GAS  /tmp/ccdPbwpy.s 			page 18


 358:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		register. */
 359:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 392              		.loc 1 359 0
 393 0092 1D4B     		ldr	r3, .L19+20
 394 0094 1B68     		ldr	r3, [r3]
 395 0096 1B02     		lsls	r3, r3, #8
 396 0098 1B4A     		ldr	r2, .L19+20
 397 009a 1360     		str	r3, [r2]
 360:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 398              		.loc 1 360 0
 399 009c 1A4B     		ldr	r3, .L19+20
 400 009e 1B68     		ldr	r3, [r3]
 401 00a0 03F4E063 		and	r3, r3, #1792
 402 00a4 184A     		ldr	r2, .L19+20
 403 00a6 1360     		str	r3, [r2]
 361:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 362:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 363:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		value. */
 364:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 404              		.loc 1 364 0
 405 00a8 BB68     		ldr	r3, [r7, #8]
 406 00aa DAB2     		uxtb	r2, r3
 407 00ac 7B69     		ldr	r3, [r7, #20]
 408 00ae 1A70     		strb	r2, [r3]
 409              	.LBE37:
 365:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 366:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 367:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 368:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 369:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 410              		.loc 1 369 0
 411 00b0 164A     		ldr	r2, .L19+24
 412 00b2 164B     		ldr	r3, .L19+24
 413 00b4 1B68     		ldr	r3, [r3]
 414 00b6 43F47003 		orr	r3, r3, #15728640
 415 00ba 1360     		str	r3, [r2]
 370:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 416              		.loc 1 370 0
 417 00bc 134A     		ldr	r2, .L19+24
 418 00be 134B     		ldr	r3, .L19+24
 419 00c0 1B68     		ldr	r3, [r3]
 420 00c2 43F07043 		orr	r3, r3, #-268435456
 421 00c6 1360     		str	r3, [r2]
 371:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 372:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 373:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 374:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 422              		.loc 1 374 0
 423 00c8 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 375:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 376:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 377:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 424              		.loc 1 377 0
 425 00cc 104B     		ldr	r3, .L19+28
 426 00ce 0022     		movs	r2, #0
 427 00d0 1A60     		str	r2, [r3]
 378:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccdPbwpy.s 			page 19


 379:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 380:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 428              		.loc 1 380 0
 429 00d2 FFF7FEFF 		bl	vPortEnableVFP
 381:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 382:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 383:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 430              		.loc 1 383 0
 431 00d6 0F4A     		ldr	r2, .L19+32
 432 00d8 0E4B     		ldr	r3, .L19+32
 433 00da 1B68     		ldr	r3, [r3]
 434 00dc 43F04043 		orr	r3, r3, #-1073741824
 435 00e0 1360     		str	r3, [r2]
 384:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 385:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 386:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 436              		.loc 1 386 0
 437 00e2 FFF7FEFF 		bl	prvPortStartFirstTask
 387:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 388:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 389:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	exit error function to prevent compiler warnings about a static function
 390:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	not being called in the case that the application writer overrides this
 391:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 392:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	prvTaskExitError();
 438              		.loc 1 392 0
 439 00e6 FFF7FEFF 		bl	prvTaskExitError
 393:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 394:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 395:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 440              		.loc 1 395 0
 441 00ea 0023     		movs	r3, #0
 396:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 442              		.loc 1 396 0
 443 00ec 1846     		mov	r0, r3
 444 00ee 1837     		adds	r7, r7, #24
 445              	.LCFI12:
 446              		.cfi_def_cfa_offset 8
 447 00f0 BD46     		mov	sp, r7
 448              	.LCFI13:
 449              		.cfi_def_cfa_register 13
 450              		@ sp needed
 451 00f2 80BD     		pop	{r7, pc}
 452              	.L20:
 453              		.align	2
 454              	.L19:
 455 00f4 00ED00E0 		.word	-536810240
 456 00f8 71C20F41 		.word	1091551857
 457 00fc 70C20F41 		.word	1091551856
 458 0100 00E400E0 		.word	-536812544
 459 0104 00000000 		.word	ucMaxSysCallPriority
 460 0108 00000000 		.word	ulMaxPRIGROUPValue
 461 010c 20ED00E0 		.word	-536810208
 462 0110 00000000 		.word	uxCriticalNesting
 463 0114 34EF00E0 		.word	-536809676
 464              		.cfi_endproc
 465              	.LFE9:
 467              		.section	.text.vPortEndScheduler,"ax",%progbits
ARM GAS  /tmp/ccdPbwpy.s 			page 20


 468              		.align	2
 469              		.global	vPortEndScheduler
 470              		.thumb
 471              		.thumb_func
 473              	vPortEndScheduler:
 474              	.LFB10:
 397:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 398:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 399:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 400:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 475              		.loc 1 400 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 8
 478              		@ frame_needed = 1, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480 0000 80B4     		push	{r7}
 481              	.LCFI14:
 482              		.cfi_def_cfa_offset 4
 483              		.cfi_offset 7, -4
 484 0002 83B0     		sub	sp, sp, #12
 485              	.LCFI15:
 486              		.cfi_def_cfa_offset 16
 487 0004 00AF     		add	r7, sp, #0
 488              	.LCFI16:
 489              		.cfi_def_cfa_register 7
 401:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 402:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert. */
 403:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 490              		.loc 1 403 0
 491 0006 0A4B     		ldr	r3, .L24
 492 0008 1B68     		ldr	r3, [r3]
 493 000a B3F57A7F 		cmp	r3, #1000
 494 000e 09D0     		beq	.L21
 495              	.LBB38:
 496              	.LBB39:
 497              		.loc 2 237 0 discriminator 1
 498              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 499 0010 4FF05003 			mov r3, #80												
 500 0014 83F31188 		msr basepri, r3											
 501 0018 BFF36F8F 		isb														
 502 001c BFF34F8F 		dsb														
 503              	
 504              	@ 0 "" 2
 505              		.thumb
 506 0020 7B60     		str	r3, [r7, #4]
 507              	.L23:
 508              	.LBE39:
 509              	.LBE38:
 510              		.loc 1 403 0 discriminator 1
 511 0022 FEE7     		b	.L23
 512              	.L21:
 404:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 513              		.loc 1 404 0
 514 0024 0C37     		adds	r7, r7, #12
 515              	.LCFI17:
 516              		.cfi_def_cfa_offset 4
 517 0026 BD46     		mov	sp, r7
ARM GAS  /tmp/ccdPbwpy.s 			page 21


 518              	.LCFI18:
 519              		.cfi_def_cfa_register 13
 520              		@ sp needed
 521 0028 5DF8047B 		ldr	r7, [sp], #4
 522              	.LCFI19:
 523              		.cfi_restore 7
 524              		.cfi_def_cfa_offset 0
 525 002c 7047     		bx	lr
 526              	.L25:
 527 002e 00BF     		.align	2
 528              	.L24:
 529 0030 00000000 		.word	uxCriticalNesting
 530              		.cfi_endproc
 531              	.LFE10:
 533              		.section	.text.vPortEnterCritical,"ax",%progbits
 534              		.align	2
 535              		.global	vPortEnterCritical
 536              		.thumb
 537              		.thumb_func
 539              	vPortEnterCritical:
 540              	.LFB11:
 405:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 406:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 407:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 408:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 541              		.loc 1 408 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 8
 544              		@ frame_needed = 1, uses_anonymous_args = 0
 545              		@ link register save eliminated.
 546 0000 80B4     		push	{r7}
 547              	.LCFI20:
 548              		.cfi_def_cfa_offset 4
 549              		.cfi_offset 7, -4
 550 0002 83B0     		sub	sp, sp, #12
 551              	.LCFI21:
 552              		.cfi_def_cfa_offset 16
 553 0004 00AF     		add	r7, sp, #0
 554              	.LCFI22:
 555              		.cfi_def_cfa_register 7
 556              	.LBB40:
 557              	.LBB41:
 558              		.loc 2 237 0
 559              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 560 0006 4FF05003 			mov r3, #80												
 561 000a 83F31188 		msr basepri, r3											
 562 000e BFF36F8F 		isb														
 563 0012 BFF34F8F 		dsb														
 564              	
 565              	@ 0 "" 2
 566              		.thumb
 567 0016 7B60     		str	r3, [r7, #4]
 568              	.LBE41:
 569              	.LBE40:
 409:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 410:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 570              		.loc 1 410 0
ARM GAS  /tmp/ccdPbwpy.s 			page 22


 571 0018 0E4B     		ldr	r3, .L29
 572 001a 1B68     		ldr	r3, [r3]
 573 001c 0133     		adds	r3, r3, #1
 574 001e 0D4A     		ldr	r2, .L29
 575 0020 1360     		str	r3, [r2]
 411:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 412:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 413:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 414:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 415:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 416:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	assert function also uses a critical section. */
 417:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 1 )
 576              		.loc 1 417 0
 577 0022 0C4B     		ldr	r3, .L29
 578 0024 1B68     		ldr	r3, [r3]
 579 0026 012B     		cmp	r3, #1
 580 0028 0ED1     		bne	.L26
 418:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 419:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 581              		.loc 1 419 0
 582 002a 0B4B     		ldr	r3, .L29+4
 583 002c 1B68     		ldr	r3, [r3]
 584 002e DBB2     		uxtb	r3, r3
 585 0030 002B     		cmp	r3, #0
 586 0032 09D0     		beq	.L26
 587              	.LBB42:
 588              	.LBB43:
 589              		.loc 2 237 0 discriminator 1
 590              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 591 0034 4FF05003 			mov r3, #80												
 592 0038 83F31188 		msr basepri, r3											
 593 003c BFF36F8F 		isb														
 594 0040 BFF34F8F 		dsb														
 595              	
 596              	@ 0 "" 2
 597              		.thumb
 598 0044 3B60     		str	r3, [r7]
 599              	.L28:
 600              	.LBE43:
 601              	.LBE42:
 602              		.loc 1 419 0 discriminator 1
 603 0046 FEE7     		b	.L28
 604              	.L26:
 420:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 421:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 605              		.loc 1 421 0
 606 0048 0C37     		adds	r7, r7, #12
 607              	.LCFI23:
 608              		.cfi_def_cfa_offset 4
 609 004a BD46     		mov	sp, r7
 610              	.LCFI24:
 611              		.cfi_def_cfa_register 13
 612              		@ sp needed
 613 004c 5DF8047B 		ldr	r7, [sp], #4
 614              	.LCFI25:
 615              		.cfi_restore 7
 616              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccdPbwpy.s 			page 23


 617 0050 7047     		bx	lr
 618              	.L30:
 619 0052 00BF     		.align	2
 620              	.L29:
 621 0054 00000000 		.word	uxCriticalNesting
 622 0058 04ED00E0 		.word	-536810236
 623              		.cfi_endproc
 624              	.LFE11:
 626              		.section	.text.vPortExitCritical,"ax",%progbits
 627              		.align	2
 628              		.global	vPortExitCritical
 629              		.thumb
 630              		.thumb_func
 632              	vPortExitCritical:
 633              	.LFB12:
 422:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 423:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 424:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 425:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 634              		.loc 1 425 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 8
 637              		@ frame_needed = 1, uses_anonymous_args = 0
 638              		@ link register save eliminated.
 639 0000 80B4     		push	{r7}
 640              	.LCFI26:
 641              		.cfi_def_cfa_offset 4
 642              		.cfi_offset 7, -4
 643 0002 83B0     		sub	sp, sp, #12
 644              	.LCFI27:
 645              		.cfi_def_cfa_offset 16
 646 0004 00AF     		add	r7, sp, #0
 647              	.LCFI28:
 648              		.cfi_def_cfa_register 7
 426:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 649              		.loc 1 426 0
 650 0006 104B     		ldr	r3, .L35
 651 0008 1B68     		ldr	r3, [r3]
 652 000a 002B     		cmp	r3, #0
 653 000c 09D1     		bne	.L32
 654              	.LBB44:
 655              	.LBB45:
 656              		.loc 2 237 0 discriminator 1
 657              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 658 000e 4FF05003 			mov r3, #80												
 659 0012 83F31188 		msr basepri, r3											
 660 0016 BFF36F8F 		isb														
 661 001a BFF34F8F 		dsb														
 662              	
 663              	@ 0 "" 2
 664              		.thumb
 665 001e 7B60     		str	r3, [r7, #4]
 666              	.L33:
 667              	.LBE45:
 668              	.LBE44:
 669              		.loc 1 426 0 discriminator 1
 670 0020 FEE7     		b	.L33
ARM GAS  /tmp/ccdPbwpy.s 			page 24


 671              	.L32:
 427:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 672              		.loc 1 427 0
 673 0022 094B     		ldr	r3, .L35
 674 0024 1B68     		ldr	r3, [r3]
 675 0026 013B     		subs	r3, r3, #1
 676 0028 074A     		ldr	r2, .L35
 677 002a 1360     		str	r3, [r2]
 428:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 678              		.loc 1 428 0
 679 002c 064B     		ldr	r3, .L35
 680 002e 1B68     		ldr	r3, [r3]
 681 0030 002B     		cmp	r3, #0
 682 0032 04D1     		bne	.L31
 683 0034 0023     		movs	r3, #0
 684 0036 3B60     		str	r3, [r7]
 685              	.LBB46:
 686              	.LBB47:
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 687              		.loc 2 271 0
 688 0038 3B68     		ldr	r3, [r7]
 689              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 690 003a 83F31188 			msr basepri, r3	
 691              	@ 0 "" 2
ARM GAS  /tmp/ccdPbwpy.s 			page 25


 692              		.thumb
 693              	.L31:
 694              	.LBE47:
 695              	.LBE46:
 429:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 430:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 431:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 432:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 696              		.loc 1 432 0
 697 003e 0C37     		adds	r7, r7, #12
 698              	.LCFI29:
 699              		.cfi_def_cfa_offset 4
 700 0040 BD46     		mov	sp, r7
 701              	.LCFI30:
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 0042 5DF8047B 		ldr	r7, [sp], #4
 705              	.LCFI31:
 706              		.cfi_restore 7
 707              		.cfi_def_cfa_offset 0
 708 0046 7047     		bx	lr
 709              	.L36:
 710              		.align	2
 711              	.L35:
 712 0048 00000000 		.word	uxCriticalNesting
 713              		.cfi_endproc
 714              	.LFE12:
 716              		.section	.text.PendSV_Handler,"ax",%progbits
 717              		.align	2
 718              		.global	PendSV_Handler
 719              		.thumb
 720              		.thumb_func
 722              	PendSV_Handler:
 723              	.LFB13:
 433:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 434:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 435:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 436:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 724              		.loc 1 436 0
 725              		.cfi_startproc
 726              		@ Naked Function: prologue and epilogue provided by programmer.
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 1, uses_anonymous_args = 0
 437:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 438:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 439:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 729              		.loc 1 439 0
 730              	@ 439 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c" 1
 731 0000 EFF30980 			mrs r0, psp							
 732 0004 BFF36F8F 		isb									
 733              											
 734 0008 154B     		ldr	r3, pxCurrentTCBConst			
 735 000a 1A68     		ldr	r2, [r3]						
 736              											
 737 000c 1EF0100F 		tst r14, #0x10						
 738 0010 08BF     		it eq								
 739 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
ARM GAS  /tmp/ccdPbwpy.s 			page 26


 740              											
 741 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 742              											
 743 001a 1060     		str r0, [r2]						
 744              											
 745 001c 4DF8043D 		stmdb sp!, {r3}						
 746 0020 4FF05000 		mov r0, #80 							
 747 0024 80F31188 		msr basepri, r0						
 748 0028 BFF34F8F 		dsb									
 749 002c BFF36F8F 		isb									
 750 0030 FFF7FEFF 		bl vTaskSwitchContext				
 751 0034 4FF00000 		mov r0, #0							
 752 0038 80F31188 		msr basepri, r0						
 753 003c 08BC     		ldmia sp!, {r3}						
 754              											
 755 003e 1968     		ldr r1, [r3]						
 756 0040 0868     		ldr r0, [r1]						
 757              											
 758 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 759              											
 760 0046 1EF0100F 		tst r14, #0x10						
 761 004a 08BF     		it eq								
 762 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 763              											
 764 0050 80F30988 		msr psp, r0							
 765 0054 BFF36F8F 		isb									
 766              											
 767              											
 768 0058 7047     		bx r14								
 769              											
 770 005a 00BFAFF3 		.align 4							
 770      0080
 771 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 772              	
 773              	@ 0 "" 2
 440:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 441:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 442:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 443:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 444:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 445:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 446:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 447:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 448:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 449:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 450:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 451:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 452:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 453:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 454:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 455:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3}						\n"
 456:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 457:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 458:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	dsb									\n"
 459:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 460:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 461:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
ARM GAS  /tmp/ccdPbwpy.s 			page 27


 462:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 463:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3}						\n"
 464:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 465:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 466:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 467:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 468:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 469:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 470:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 471:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 472:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 473:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 474:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 475:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 476:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 477:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 478:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 479:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 480:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 481:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 482:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 483:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 484:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 485:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 486:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 4							\n"
 487:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 488:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 489:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 490:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 774              		.loc 1 490 0
 775              		.thumb
 776              		.cfi_endproc
 777              	.LFE13:
 779              		.section	.text.xPortSysTickHandler,"ax",%progbits
 780              		.align	2
 781              		.global	xPortSysTickHandler
 782              		.thumb
 783              		.thumb_func
 785              	xPortSysTickHandler:
 786              	.LFB14:
 491:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 492:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 493:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 494:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 787              		.loc 1 494 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 8
 790              		@ frame_needed = 1, uses_anonymous_args = 0
 791 0000 80B5     		push	{r7, lr}
 792              	.LCFI32:
 793              		.cfi_def_cfa_offset 8
 794              		.cfi_offset 7, -8
 795              		.cfi_offset 14, -4
 796 0002 82B0     		sub	sp, sp, #8
 797              	.LCFI33:
 798              		.cfi_def_cfa_offset 16
 799 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccdPbwpy.s 			page 28


 800              	.LCFI34:
 801              		.cfi_def_cfa_register 7
 802              	.LBB48:
 803              	.LBB49:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 804              		.loc 2 237 0
 805              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 806 0006 4FF05003 			mov r3, #80												
 807 000a 83F31188 		msr basepri, r3											
 808 000e BFF36F8F 		isb														
 809 0012 BFF34F8F 		dsb														
 810              	
 811              	@ 0 "" 2
 812              		.thumb
 813 0016 7B60     		str	r3, [r7, #4]
 814              	.LBE49:
 815              	.LBE48:
 495:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 496:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 497:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 498:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	known. */
 499:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 500:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	traceISR_ENTER();
 816              		.loc 1 500 0
 817 0018 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordEnterISR
 501:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 502:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 503:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 818              		.loc 1 503 0
 819 001c FFF7FEFF 		bl	xTaskIncrementTick
 820 0020 0346     		mov	r3, r0
 821 0022 002B     		cmp	r3, #0
 822 0024 06D0     		beq	.L39
 504:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 505:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			traceISR_EXIT_TO_SCHEDULER();
 823              		.loc 1 505 0
 824 0026 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordExitISRToScheduler
 506:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 507:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 508:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 825              		.loc 1 508 0
 826 002a 074B     		ldr	r3, .L41
 827 002c 4FF08052 		mov	r2, #268435456
 828 0030 1A60     		str	r2, [r3]
 829 0032 01E0     		b	.L40
 830              	.L39:
 509:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 510:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		else
 511:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 512:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			traceISR_EXIT();
 831              		.loc 1 512 0
 832 0034 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordExitISR
 833              	.L40:
 834 0038 0023     		movs	r3, #0
 835 003a 3B60     		str	r3, [r7]
 836              	.LBB50:
 837              	.LBB51:
ARM GAS  /tmp/ccdPbwpy.s 			page 29


 838              		.loc 2 271 0
 839 003c 3B68     		ldr	r3, [r7]
 840              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 841 003e 83F31188 			msr basepri, r3	
 842              	@ 0 "" 2
 843              		.thumb
 844              	.LBE51:
 845              	.LBE50:
 513:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 514:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 515:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	portENABLE_INTERRUPTS();
 516:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 846              		.loc 1 516 0
 847 0042 0837     		adds	r7, r7, #8
 848              	.LCFI35:
 849              		.cfi_def_cfa_offset 8
 850 0044 BD46     		mov	sp, r7
 851              	.LCFI36:
 852              		.cfi_def_cfa_register 13
 853              		@ sp needed
 854 0046 80BD     		pop	{r7, pc}
 855              	.L42:
 856              		.align	2
 857              	.L41:
 858 0048 04ED00E0 		.word	-536810236
 859              		.cfi_endproc
 860              	.LFE14:
 862              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 863              		.align	2
 864              		.weak	vPortSetupTimerInterrupt
 865              		.thumb
 866              		.thumb_func
 868              	vPortSetupTimerInterrupt:
 869              	.LFB15:
 517:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 518:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 519:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 520:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 521:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 522:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 523:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 524:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	TickType_t xModifiableIdleTime;
 525:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 526:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 527:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 528:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 529:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 530:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 531:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 532:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 533:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 534:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 535:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
 536:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 537:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 538:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 539:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
ARM GAS  /tmp/ccdPbwpy.s 			page 30


 540:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		through one of the tick periods. */
 541:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 542:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 543:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 544:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 545:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 546:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 547:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 548:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 549:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" );
 550:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "dsb" );
 551:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "isb" );
 552:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 553:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 554:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
 555:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 556:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 557:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 558:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			this tick period. */
 559:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 560:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 561:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 562:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 563:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 564:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 565:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			periods. */
 566:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 567:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 568:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 569:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 570:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 571:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 572:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		else
 573:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 574:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 575:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 576:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 577:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 578:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 579:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 580:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 581:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 582:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 583:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 584:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 585:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 586:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 587:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 588:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 589:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 590:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 591:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 592:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 593:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "dsb" );
 594:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 595:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 596:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			}
ARM GAS  /tmp/ccdPbwpy.s 			page 31


 597:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 598:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 599:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 600:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			accounted for as best it can be, but using the tickless mode will
 601:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 602:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			kernel with respect to calendar time. */
 603:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 604:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 605:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 606:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 607:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 608:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 609:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 610:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 611:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 612:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				uint32_t ulCalculatedLoadValue;
 613:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 614:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 615:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				count reloaded with ulReloadValue.  Reset the
 616:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 617:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				period. */
 618:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 619:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 620:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 621:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something
 622:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				that took too long. */
 623:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 624:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				{
 625:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 626:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				}
 627:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 628:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 629:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 630:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt handler will already have pended the tick
 631:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				processing in the kernel.  As the pending tick will be
 632:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				processed as soon as this function exits, the tick value
 633:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				maintained by the tick is stepped forward by one less than the
 634:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				time spent waiting. */
 635:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 636:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 637:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			else
 638:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 639:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 640:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 641:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 642:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				ticks). */
 643:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 644:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 645:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 646:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				was waiting? */
 647:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 648:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 649:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 650:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				period remains. */
 651:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 652:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 653:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccdPbwpy.s 			page 32


 654:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 655:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 656:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 657:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			can only execute once in the case that the reload register is near
 658:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 659:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 660:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portENTER_CRITICAL();
 661:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 662:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 663:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 664:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 665:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 666:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			portEXIT_CRITICAL();
 667:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 668:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 669:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 670:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 671:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 672:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 673:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*
 674:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 675:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 676:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c ****  */
 677:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 678:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 870              		.loc 1 678 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 1, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 875 0000 80B4     		push	{r7}
 876              	.LCFI37:
 877              		.cfi_def_cfa_offset 4
 878              		.cfi_offset 7, -4
 879 0002 00AF     		add	r7, sp, #0
 880              	.LCFI38:
 881              		.cfi_def_cfa_register 7
 679:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 680:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 681:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 682:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 683:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 684:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 685:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 686:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 687:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 688:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 689:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 882              		.loc 1 689 0
 883 0004 074A     		ldr	r2, .L44
 884 0006 084B     		ldr	r3, .L44+4
 885 0008 1B68     		ldr	r3, [r3]
 886 000a 0849     		ldr	r1, .L44+8
 887 000c A1FB0313 		umull	r1, r3, r1, r3
 888 0010 9B09     		lsrs	r3, r3, #6
 889 0012 013B     		subs	r3, r3, #1
 890 0014 1360     		str	r3, [r2]
ARM GAS  /tmp/ccdPbwpy.s 			page 33


 690:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 891              		.loc 1 690 0
 892 0016 064B     		ldr	r3, .L44+12
 893 0018 0722     		movs	r2, #7
 894 001a 1A60     		str	r2, [r3]
 691:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 895              		.loc 1 691 0
 896 001c BD46     		mov	sp, r7
 897              	.LCFI39:
 898              		.cfi_def_cfa_register 13
 899              		@ sp needed
 900 001e 5DF8047B 		ldr	r7, [sp], #4
 901              	.LCFI40:
 902              		.cfi_restore 7
 903              		.cfi_def_cfa_offset 0
 904 0022 7047     		bx	lr
 905              	.L45:
 906              		.align	2
 907              	.L44:
 908 0024 14E000E0 		.word	-536813548
 909 0028 00000000 		.word	SystemCoreClock
 910 002c D34D6210 		.word	274877907
 911 0030 10E000E0 		.word	-536813552
 912              		.cfi_endproc
 913              	.LFE15:
 915              		.section	.text.vPortEnableVFP,"ax",%progbits
 916              		.align	2
 917              		.thumb
 918              		.thumb_func
 920              	vPortEnableVFP:
 921              	.LFB16:
 692:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 693:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 694:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 695:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 696:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** {
 922              		.loc 1 696 0
 923              		.cfi_startproc
 924              		@ Naked Function: prologue and epilogue provided by programmer.
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 1, uses_anonymous_args = 0
 697:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 927              		.loc 1 697 0
 928              	@ 697 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c" 1
 929 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 930 0004 0168     		ldr r1, [r0]				
 931              									
 932 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 933 000a 0160     		str r1, [r0]				
 934 000c 7047     		bx r14						
 935              	@ 0 "" 2
 698:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 699:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 700:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 701:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 702:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 703:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
ARM GAS  /tmp/ccdPbwpy.s 			page 34


 704:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 705:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 706:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** }
 936              		.loc 1 706 0
 937              		.thumb
 938              		.cfi_endproc
 939              	.LFE16:
 941 000e 0000     		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 942              		.align	2
 943              		.global	vPortValidateInterruptPriority
 944              		.thumb
 945              		.thumb_func
 947              	vPortValidateInterruptPriority:
 948              	.LFB17:
 707:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 708:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 709:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 710:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 711:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 712:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 949              		.loc 1 712 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 16
 952              		@ frame_needed = 1, uses_anonymous_args = 0
 953              		@ link register save eliminated.
 954 0000 80B4     		push	{r7}
 955              	.LCFI41:
 956              		.cfi_def_cfa_offset 4
 957              		.cfi_offset 7, -4
 958 0002 85B0     		sub	sp, sp, #20
 959              	.LCFI42:
 960              		.cfi_def_cfa_offset 24
 961 0004 00AF     		add	r7, sp, #0
 962              	.LCFI43:
 963              		.cfi_def_cfa_register 7
 713:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulCurrentInterrupt;
 714:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	uint8_t ucCurrentPriority;
 715:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 716:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 717:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 964              		.loc 1 717 0
 965              	@ 717 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c" 1
 966 0006 EFF30583 		mrs r3, ipsr
 967              	@ 0 "" 2
 968              		.thumb
 969 000a FB60     		str	r3, [r7, #12]
 718:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 719:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 720:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 970              		.loc 1 720 0
 971 000c FB68     		ldr	r3, [r7, #12]
 972 000e 0F2B     		cmp	r3, #15
 973 0010 13D9     		bls	.L48
 721:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 722:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 723:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 974              		.loc 1 723 0
ARM GAS  /tmp/ccdPbwpy.s 			page 35


 975 0012 154A     		ldr	r2, .L52
 976 0014 FB68     		ldr	r3, [r7, #12]
 977 0016 1344     		add	r3, r3, r2
 978 0018 1B78     		ldrb	r3, [r3]
 979 001a FB72     		strb	r3, [r7, #11]
 724:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 725:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 726:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 727:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 728:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 729:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 730:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 731:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 732:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 733:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 734:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 735:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 736:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 737:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 738:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 739:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 740:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
 741:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 742:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 743:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 744:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 745:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			The following links provide detailed information:
 746:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 747:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
 748:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 980              		.loc 1 748 0
 981 001c 134B     		ldr	r3, .L52+4
 982 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 983 0020 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 984 0022 9A42     		cmp	r2, r3
 985 0024 09D2     		bcs	.L48
 986              	.LBB52:
 987              	.LBB53:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 988              		.loc 2 237 0 discriminator 1
 989              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 990 0026 4FF05003 			mov r3, #80												
 991 002a 83F31188 		msr basepri, r3											
 992 002e BFF36F8F 		isb														
 993 0032 BFF34F8F 		dsb														
 994              	
 995              	@ 0 "" 2
 996              		.thumb
 997 0036 7B60     		str	r3, [r7, #4]
 998              	.L49:
 999              	.LBE53:
 1000              	.LBE52:
 1001              		.loc 1 748 0 discriminator 1
 1002 0038 FEE7     		b	.L49
 1003              	.L48:
 749:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 750:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccdPbwpy.s 			page 36


 751:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 752:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 753:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 754:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 755:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 756:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 757:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 
 758:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 759:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 760:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 761:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 762:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 763:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		of zero will result in unpredicable behaviour. */
 764:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 1004              		.loc 1 764 0
 1005 003a 0D4B     		ldr	r3, .L52+8
 1006 003c 1B68     		ldr	r3, [r3]
 1007 003e 03F4E062 		and	r2, r3, #1792
 1008 0042 0C4B     		ldr	r3, .L52+12
 1009 0044 1B68     		ldr	r3, [r3]
 1010 0046 9A42     		cmp	r2, r3
 1011 0048 09D9     		bls	.L47
 1012              	.LBB54:
 1013              	.LBB55:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1014              		.loc 2 237 0 discriminator 1
 1015              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1016 004a 4FF05003 			mov r3, #80												
 1017 004e 83F31188 		msr basepri, r3											
 1018 0052 BFF36F8F 		isb														
 1019 0056 BFF34F8F 		dsb														
 1020              	
 1021              	@ 0 "" 2
 1022              		.thumb
 1023 005a 3B60     		str	r3, [r7]
 1024              	.L51:
 1025              	.LBE55:
 1026              	.LBE54:
 1027              		.loc 1 764 0 discriminator 2
 1028 005c FEE7     		b	.L51
 1029              	.L47:
 765:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 1030              		.loc 1 765 0
 1031 005e 1437     		adds	r7, r7, #20
 1032              	.LCFI44:
 1033              		.cfi_def_cfa_offset 4
 1034 0060 BD46     		mov	sp, r7
 1035              	.LCFI45:
 1036              		.cfi_def_cfa_register 13
 1037              		@ sp needed
 1038 0062 5DF8047B 		ldr	r7, [sp], #4
 1039              	.LCFI46:
 1040              		.cfi_restore 7
 1041              		.cfi_def_cfa_offset 0
 1042 0066 7047     		bx	lr
 1043              	.L53:
 1044              		.align	2
ARM GAS  /tmp/ccdPbwpy.s 			page 37


 1045              	.L52:
 1046 0068 F0E300E0 		.word	-536812560
 1047 006c 00000000 		.word	ucMaxSysCallPriority
 1048 0070 0CED00E0 		.word	-536810228
 1049 0074 00000000 		.word	ulMaxPRIGROUPValue
 1050              		.cfi_endproc
 1051              	.LFE17:
 1053              		.text
 1054              	.Letext0:
 1055              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1056              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1057              		.file 5 "../../../FreeRTOS_9_0/Source/include/projdefs.h"
 1058              		.file 6 "Inc/FreeRTOSConfig.h"
ARM GAS  /tmp/ccdPbwpy.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccdPbwpy.s:21     .data.uxCriticalNesting:0000000000000000 $d
     /tmp/ccdPbwpy.s:24     .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/ccdPbwpy.s:29     .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
     /tmp/ccdPbwpy.s:30     .bss.ucMaxSysCallPriority:0000000000000000 $d
     /tmp/ccdPbwpy.s:32     .bss.ulMaxPRIGROUPValue:0000000000000000 $d
     /tmp/ccdPbwpy.s:35     .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
     /tmp/ccdPbwpy.s:38     .rodata.pcInterruptPriorityRegisters:0000000000000000 $d
     /tmp/ccdPbwpy.s:41     .rodata.pcInterruptPriorityRegisters:0000000000000000 pcInterruptPriorityRegisters
     /tmp/ccdPbwpy.s:44     .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/ccdPbwpy.s:49     .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/ccdPbwpy.s:135    .text.prvTaskExitError:0000000000000000 $t
     /tmp/ccdPbwpy.s:139    .text.prvTaskExitError:0000000000000000 prvTaskExitError
     /tmp/ccdPbwpy.s:200    .text.prvTaskExitError:0000000000000038 $d
     /tmp/ccdPbwpy.s:205    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccdPbwpy.s:210    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccdPbwpy.s:230    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
     /tmp/ccdPbwpy.s:230    .text.SVC_Handler:0000000000000020 $d
     /tmp/ccdPbwpy.s:239    .text.prvPortStartFirstTask:0000000000000000 $t
     /tmp/ccdPbwpy.s:243    .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
     /tmp/ccdPbwpy.s:270    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/ccdPbwpy.s:275    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/ccdPbwpy.s:868    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
     /tmp/ccdPbwpy.s:920    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/ccdPbwpy.s:455    .text.xPortStartScheduler:00000000000000f4 $d
     /tmp/ccdPbwpy.s:468    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/ccdPbwpy.s:473    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/ccdPbwpy.s:529    .text.vPortEndScheduler:0000000000000030 $d
     /tmp/ccdPbwpy.s:534    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/ccdPbwpy.s:539    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/ccdPbwpy.s:621    .text.vPortEnterCritical:0000000000000054 $d
     /tmp/ccdPbwpy.s:627    .text.vPortExitCritical:0000000000000000 $t
     /tmp/ccdPbwpy.s:632    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/ccdPbwpy.s:712    .text.vPortExitCritical:0000000000000048 $d
     /tmp/ccdPbwpy.s:717    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccdPbwpy.s:722    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccdPbwpy.s:771    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
     /tmp/ccdPbwpy.s:771    .text.PendSV_Handler:0000000000000060 $d
     /tmp/ccdPbwpy.s:780    .text.xPortSysTickHandler:0000000000000000 $t
     /tmp/ccdPbwpy.s:785    .text.xPortSysTickHandler:0000000000000000 xPortSysTickHandler
     /tmp/ccdPbwpy.s:858    .text.xPortSysTickHandler:0000000000000048 $d
     /tmp/ccdPbwpy.s:863    .text.vPortSetupTimerInterrupt:0000000000000000 $t
     /tmp/ccdPbwpy.s:908    .text.vPortSetupTimerInterrupt:0000000000000024 $d
     /tmp/ccdPbwpy.s:916    .text.vPortEnableVFP:0000000000000000 $t
     /tmp/ccdPbwpy.s:942    .text.vPortValidateInterruptPriority:0000000000000000 $t
     /tmp/ccdPbwpy.s:947    .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
     /tmp/ccdPbwpy.s:1046   .text.vPortValidateInterruptPriority:0000000000000068 $d
     /tmp/ccdPbwpy.s:941    .text.vPortEnableVFP:000000000000000e $d
     /tmp/ccdPbwpy.s:269    .text.prvPortStartFirstTask:000000000000001a $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
SEGGER_SYSVIEW_RecordEnterISR
xTaskIncrementTick
ARM GAS  /tmp/ccdPbwpy.s 			page 39


SEGGER_SYSVIEW_RecordExitISRToScheduler
SEGGER_SYSVIEW_RecordExitISR
SystemCoreClock

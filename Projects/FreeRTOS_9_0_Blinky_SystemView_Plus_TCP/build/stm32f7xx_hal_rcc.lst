ARM GAS  /tmp/ccFfEXtt.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f7xx_hal_rcc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_RCC_DeInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_RCC_DeInit:
  27              	.LFB135:
  28              		.file 1 "../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c"
   1:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
   2:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ******************************************************************************
   3:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @file    stm32f7xx_hal_rcc.c
   4:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @author  MCD Application Team
   5:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @version V1.1.2
   6:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @date    23-September-2016 
   7:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   9:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *       
  13:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   @verbatim                
  14:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ==============================================================================
  15:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ==============================================================================
  17:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]  
  18:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  19:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  20:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  21:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  22:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  23:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  24:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  25:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  26:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  27:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
  28:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]          
  29:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       Once the device started from reset, the user application has to:        
  30:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
ARM GAS  /tmp/ccFfEXtt.s 			page 2


  31:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  32:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  38:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                       ##### RCC Limitations #####
  39:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ==============================================================================
  40:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]  
  41:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  42:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  43:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       from/to registers.
  44:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  45:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) If peripheral is mapped on AHB: the delay is 2 AHB clock cycle 
  46:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  47:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) If peripheral is mapped on APB: the delay is 2 APB clock cycle 
  48:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  49:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  50:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]  
  51:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       Implemented Workaround:
  52:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) For AHB & APB peripherals, a dummy read to the peripheral register has been
  53:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  54:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  55:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   @endverbatim
  56:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ******************************************************************************
  57:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @attention
  58:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  59:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  60:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  61:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  62:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  63:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  64:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  65:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  66:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  67:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  68:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  69:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  70:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      without specific prior written permission.
  71:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  72:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  73:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  74:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  75:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  76:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  77:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  78:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  79:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  80:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  81:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  82:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  83:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ******************************************************************************
  84:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */ 
  85:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  86:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  87:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #include "stm32f7xx_hal.h"
ARM GAS  /tmp/ccFfEXtt.s 			page 3


  88:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  89:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @addtogroup STM32F7xx_HAL_Driver
  90:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
  91:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
  92:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  93:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC RCC
  94:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief RCC HAL module driver
  95:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
  96:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
  97:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  98:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  99:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 100:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
 101:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
 102:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 103:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 104:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 105:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 106:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 107:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()   __HAL_RCC_GPIOA_CLK_ENABLE()
 108:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 109:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 110:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 111:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO2_CLK_ENABLE()   __HAL_RCC_GPIOC_CLK_ENABLE()
 112:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
 113:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
 114:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 115:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 116:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @}
 117:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 118:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 119:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 120:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 121:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 122:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 123:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 124:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @}
 125:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 126:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 127:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 128:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Exported functions ---------------------------------------------------------*/
 129:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 130:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 131:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 132:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 133:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 134:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions 
 135:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions 
 136:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 137:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   @verbatim    
 138:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ===============================================================================
 139:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** ##### Initialization and de-initialization functions #####
 140:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ===============================================================================
 141:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]
 142:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 143:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1 
 144:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       and APB2).
ARM GAS  /tmp/ccFfEXtt.s 			page 4


 145:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 146:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 147:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           the PLL as System clock source.
 149:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 150:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           clock source.
 152:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 153:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 155:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 156:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 158:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 216 MHz)
 160:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 163:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the function HAL_RCC_EnableCSS()
 164:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 165:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           clock source), the System clock is automatically switched to HSI and an interrupt
 166:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M7 NMI 
 167:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.   
 168:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 169:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 170:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 171:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 172:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 173:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 174:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 175:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration  
 176:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 177:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           HSE and PLL.
 178:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 179:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 180:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 181:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 182:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           the peripherals mapped on these busses. You can use 
 183:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.  
 184:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 185:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 186:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 187:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               from an external clock mapped on the I2S_CKIN pin. 
 188:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock.
 189:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@)  SAI: the SAI clock can be derived either from a specific PLL (PLLI2S) or (PLLSAI) o
 190:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               from an external clock mapped on the I2S_CKIN pin. 
 191:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock. 
 192:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 193:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               divided by 2 to 31. You have to use __HAL_RCC_RTC_CONFIG() and __HAL_RCC_RTC_ENABLE()
 194:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               macros to configure this clock. 
 195:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 196:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               to work correctly, while the SDIO require a frequency equal or lower than
 197:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               to 48. This clock is derived of the main PLL through PLLQ divider.
 198:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@) IWDG clock which is always the LSI clock.
 199:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** @endverbatim
 200:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 201:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccFfEXtt.s 			page 5


 202:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 203:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 204:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 205:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 206:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 207:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 208:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 209:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 210:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - All interrupts disabled
 211:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 212:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - Peripheral clocks  
 213:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks 
 214:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 215:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 216:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 217:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
  29              		.loc 1 217 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
 218:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Set HSION bit */
 219:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
  41              		.loc 1 219 0
  42 0004 194A     		ldr	r2, .L2
  43 0006 194B     		ldr	r3, .L2
  44 0008 1B68     		ldr	r3, [r3]
  45 000a 43F08103 		orr	r3, r3, #129
  46 000e 1360     		str	r3, [r2]
 220:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 221:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset CFGR register */
 222:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  47              		.loc 1 222 0
  48 0010 164B     		ldr	r3, .L2
  49 0012 0022     		movs	r2, #0
  50 0014 9A60     		str	r2, [r3, #8]
 223:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 224:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S */
 225:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
  51              		.loc 1 225 0
  52 0016 1549     		ldr	r1, .L2
  53 0018 144B     		ldr	r3, .L2
  54 001a 1A68     		ldr	r2, [r3]
  55 001c 144B     		ldr	r3, .L2+4
  56 001e 1340     		ands	r3, r3, r2
  57 0020 0B60     		str	r3, [r1]
 226:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 227:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset PLLCFGR register */
 228:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLCFGR);
  58              		.loc 1 228 0
ARM GAS  /tmp/ccFfEXtt.s 			page 6


  59 0022 124B     		ldr	r3, .L2
  60 0024 0022     		movs	r2, #0
  61 0026 5A60     		str	r2, [r3, #4]
 229:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_
  62              		.loc 1 229 0
  63 0028 1049     		ldr	r1, .L2
  64 002a 104B     		ldr	r3, .L2
  65 002c 5A68     		ldr	r2, [r3, #4]
  66 002e 114B     		ldr	r3, .L2+8
  67 0030 1343     		orrs	r3, r3, r2
  68 0032 4B60     		str	r3, [r1, #4]
 230:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 231:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset PLLI2SCFGR register */
 232:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLI2SCFGR);
  69              		.loc 1 232 0
  70 0034 0D4B     		ldr	r3, .L2
  71 0036 0022     		movs	r2, #0
  72 0038 C3F88420 		str	r2, [r3, #132]
 233:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PL
  73              		.loc 1 233 0
  74 003c 0B49     		ldr	r1, .L2
  75 003e 0B4B     		ldr	r3, .L2
  76 0040 D3F88420 		ldr	r2, [r3, #132]
  77 0044 0C4B     		ldr	r3, .L2+12
  78 0046 1343     		orrs	r3, r3, r2
  79 0048 C1F88430 		str	r3, [r1, #132]
 234:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 235:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 236:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
  80              		.loc 1 236 0
  81 004c 074A     		ldr	r2, .L2
  82 004e 074B     		ldr	r3, .L2
  83 0050 1B68     		ldr	r3, [r3]
  84 0052 23F48023 		bic	r3, r3, #262144
  85 0056 1360     		str	r3, [r2]
 237:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 238:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Disable all interrupts */
 239:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR);
  86              		.loc 1 239 0
  87 0058 044B     		ldr	r3, .L2
  88 005a 0022     		movs	r2, #0
  89 005c DA60     		str	r2, [r3, #12]
 240:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 241:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 242:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
  90              		.loc 1 242 0
  91 005e 074B     		ldr	r3, .L2+16
  92 0060 074A     		ldr	r2, .L2+20
  93 0062 1A60     		str	r2, [r3]
 243:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
  94              		.loc 1 243 0
  95 0064 BD46     		mov	sp, r7
  96              	.LCFI2:
  97              		.cfi_def_cfa_register 13
  98              		@ sp needed
  99 0066 5DF8047B 		ldr	r7, [sp], #4
 100              	.LCFI3:
ARM GAS  /tmp/ccFfEXtt.s 			page 7


 101              		.cfi_restore 7
 102              		.cfi_def_cfa_offset 0
 103 006a 7047     		bx	lr
 104              	.L3:
 105              		.align	2
 106              	.L2:
 107 006c 00380240 		.word	1073887232
 108 0070 FFFFF6FA 		.word	-84475905
 109 0074 10300024 		.word	603992080
 110 0078 00300020 		.word	536883200
 111 007c 00000000 		.word	SystemCoreClock
 112 0080 0024F400 		.word	16000000
 113              		.cfi_endproc
 114              	.LFE135:
 116              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 117              		.align	2
 118              		.global	HAL_RCC_OscConfig
 119              		.thumb
 120              		.thumb_func
 122              	HAL_RCC_OscConfig:
 123              	.LFB136:
 244:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 245:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 246:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 247:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 248:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 249:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 250:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 251:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 252:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         supported by this function. User should request a transition to LSE Off
 253:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 254:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 255:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         supported by this function. User should request a transition to HSE Off
 256:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 257:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval HAL status
 258:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 259:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 260:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 124              		.loc 1 260 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 64
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0000 80B5     		push	{r7, lr}
 129              	.LCFI4:
 130              		.cfi_def_cfa_offset 8
 131              		.cfi_offset 7, -8
 132              		.cfi_offset 14, -4
 133 0002 90B0     		sub	sp, sp, #64
 134              	.LCFI5:
 135              		.cfi_def_cfa_offset 72
 136 0004 00AF     		add	r7, sp, #0
 137              	.LCFI6:
 138              		.cfi_def_cfa_register 7
 139 0006 7860     		str	r0, [r7, #4]
 261:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t tickstart = 0;  
 140              		.loc 1 261 0
 141 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccFfEXtt.s 			page 8


 142 000a FB63     		str	r3, [r7, #60]
 262:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****  
 263:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check the parameters */
 264:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 265:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 266:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 267:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 143              		.loc 1 267 0
 144 000c 7B68     		ldr	r3, [r7, #4]
 145 000e 1B68     		ldr	r3, [r3]
 146 0010 03F00103 		and	r3, r3, #1
 147 0014 002B     		cmp	r3, #0
 148 0016 00F08580 		beq	.L5
 268:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 269:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the parameters */
 270:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 271:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
 272:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 149              		.loc 1 272 0
 150 001a A04B     		ldr	r3, .L61
 151 001c 9B68     		ldr	r3, [r3, #8]
 152 001e 03F00C03 		and	r3, r3, #12
 153 0022 042B     		cmp	r3, #4
 154 0024 0BD0     		beq	.L6
 273:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RC
 155              		.loc 1 273 0
 156 0026 9D4B     		ldr	r3, .L61
 157 0028 9B68     		ldr	r3, [r3, #8]
 158 002a 03F00C03 		and	r3, r3, #12
 159 002e 082B     		cmp	r3, #8
 160 0030 12D1     		bne	.L7
 161              		.loc 1 273 0 is_stmt 0 discriminator 1
 162 0032 9A4B     		ldr	r3, .L61
 163 0034 5B68     		ldr	r3, [r3, #4]
 164 0036 03F48003 		and	r3, r3, #4194304
 165 003a 002B     		cmp	r3, #0
 166 003c 0CD0     		beq	.L7
 167              	.L6:
 274:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 275:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF
 168              		.loc 1 275 0 is_stmt 1
 169 003e 974B     		ldr	r3, .L61
 170 0040 1B68     		ldr	r3, [r3]
 171 0042 03F40033 		and	r3, r3, #131072
 172 0046 002B     		cmp	r3, #0
 173 0048 05D0     		beq	.L8
 174              		.loc 1 275 0 is_stmt 0 discriminator 1
 175 004a 7B68     		ldr	r3, [r7, #4]
 176 004c 5B68     		ldr	r3, [r3, #4]
 177 004e 002B     		cmp	r3, #0
 178 0050 01D1     		bne	.L8
 276:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 277:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 179              		.loc 1 277 0 is_stmt 1
 180 0052 0123     		movs	r3, #1
 181 0054 63E2     		b	.L9
 182              	.L8:
ARM GAS  /tmp/ccFfEXtt.s 			page 9


 275:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 183              		.loc 1 275 0
 184 0056 65E0     		b	.L5
 185              	.L7:
 278:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 279:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 280:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 281:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 282:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 283:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 186              		.loc 1 283 0
 187 0058 7B68     		ldr	r3, [r7, #4]
 188 005a 5B68     		ldr	r3, [r3, #4]
 189 005c B3F5803F 		cmp	r3, #65536
 190 0060 06D1     		bne	.L10
 191              		.loc 1 283 0 is_stmt 0 discriminator 1
 192 0062 8E4A     		ldr	r2, .L61
 193 0064 8D4B     		ldr	r3, .L61
 194 0066 1B68     		ldr	r3, [r3]
 195 0068 43F48033 		orr	r3, r3, #65536
 196 006c 1360     		str	r3, [r2]
 197 006e 2EE0     		b	.L11
 198              	.L10:
 199              		.loc 1 283 0 discriminator 2
 200 0070 7B68     		ldr	r3, [r7, #4]
 201 0072 5B68     		ldr	r3, [r3, #4]
 202 0074 002B     		cmp	r3, #0
 203 0076 0CD1     		bne	.L12
 204              		.loc 1 283 0 discriminator 3
 205 0078 884A     		ldr	r2, .L61
 206 007a 884B     		ldr	r3, .L61
 207 007c 1B68     		ldr	r3, [r3]
 208 007e 23F48033 		bic	r3, r3, #65536
 209 0082 1360     		str	r3, [r2]
 210 0084 854A     		ldr	r2, .L61
 211 0086 854B     		ldr	r3, .L61
 212 0088 1B68     		ldr	r3, [r3]
 213 008a 23F48023 		bic	r3, r3, #262144
 214 008e 1360     		str	r3, [r2]
 215 0090 1DE0     		b	.L11
 216              	.L12:
 217              		.loc 1 283 0 discriminator 4
 218 0092 7B68     		ldr	r3, [r7, #4]
 219 0094 5B68     		ldr	r3, [r3, #4]
 220 0096 B3F5A02F 		cmp	r3, #327680
 221 009a 0CD1     		bne	.L13
 222              		.loc 1 283 0 discriminator 5
 223 009c 7F4A     		ldr	r2, .L61
 224 009e 7F4B     		ldr	r3, .L61
 225 00a0 1B68     		ldr	r3, [r3]
 226 00a2 43F48023 		orr	r3, r3, #262144
 227 00a6 1360     		str	r3, [r2]
 228 00a8 7C4A     		ldr	r2, .L61
 229 00aa 7C4B     		ldr	r3, .L61
 230 00ac 1B68     		ldr	r3, [r3]
 231 00ae 43F48033 		orr	r3, r3, #65536
 232 00b2 1360     		str	r3, [r2]
ARM GAS  /tmp/ccFfEXtt.s 			page 10


 233 00b4 0BE0     		b	.L11
 234              	.L13:
 235              		.loc 1 283 0 discriminator 6
 236 00b6 794A     		ldr	r2, .L61
 237 00b8 784B     		ldr	r3, .L61
 238 00ba 1B68     		ldr	r3, [r3]
 239 00bc 23F48033 		bic	r3, r3, #65536
 240 00c0 1360     		str	r3, [r2]
 241 00c2 764A     		ldr	r2, .L61
 242 00c4 754B     		ldr	r3, .L61
 243 00c6 1B68     		ldr	r3, [r3]
 244 00c8 23F48023 		bic	r3, r3, #262144
 245 00cc 1360     		str	r3, [r2]
 246              	.L11:
 284:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 285:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the HSE State */
 286:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 247              		.loc 1 286 0 is_stmt 1
 248 00ce 7B68     		ldr	r3, [r7, #4]
 249 00d0 5B68     		ldr	r3, [r3, #4]
 250 00d2 002B     		cmp	r3, #0
 251 00d4 13D0     		beq	.L14
 287:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 288:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 289:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 252              		.loc 1 289 0
 253 00d6 FFF7FEFF 		bl	HAL_GetTick
 254 00da F863     		str	r0, [r7, #60]
 290:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         
 291:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till HSE is ready */  
 292:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 255              		.loc 1 292 0
 256 00dc 08E0     		b	.L15
 257              	.L16:
 293:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 294:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 258              		.loc 1 294 0
 259 00de FFF7FEFF 		bl	HAL_GetTick
 260 00e2 0246     		mov	r2, r0
 261 00e4 FB6B     		ldr	r3, [r7, #60]
 262 00e6 D31A     		subs	r3, r2, r3
 263 00e8 642B     		cmp	r3, #100
 264 00ea 01D9     		bls	.L15
 295:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 296:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 265              		.loc 1 296 0
 266 00ec 0323     		movs	r3, #3
 267 00ee 16E2     		b	.L9
 268              	.L15:
 292:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 269              		.loc 1 292 0
 270 00f0 6A4B     		ldr	r3, .L61
 271 00f2 1B68     		ldr	r3, [r3]
 272 00f4 03F40033 		and	r3, r3, #131072
 273 00f8 002B     		cmp	r3, #0
 274 00fa F0D0     		beq	.L16
 275 00fc 12E0     		b	.L5
ARM GAS  /tmp/ccFfEXtt.s 			page 11


 276              	.L14:
 297:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 298:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 299:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 300:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 301:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 302:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 303:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 277              		.loc 1 303 0
 278 00fe FFF7FEFF 		bl	HAL_GetTick
 279 0102 F863     		str	r0, [r7, #60]
 304:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         
 305:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 306:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 280              		.loc 1 306 0
 281 0104 08E0     		b	.L17
 282              	.L18:
 307:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 308:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 283              		.loc 1 308 0
 284 0106 FFF7FEFF 		bl	HAL_GetTick
 285 010a 0246     		mov	r2, r0
 286 010c FB6B     		ldr	r3, [r7, #60]
 287 010e D31A     		subs	r3, r2, r3
 288 0110 642B     		cmp	r3, #100
 289 0112 01D9     		bls	.L17
 309:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 310:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 290              		.loc 1 310 0
 291 0114 0323     		movs	r3, #3
 292 0116 02E2     		b	.L9
 293              	.L17:
 306:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 294              		.loc 1 306 0
 295 0118 604B     		ldr	r3, .L61
 296 011a 1B68     		ldr	r3, [r3]
 297 011c 03F40033 		and	r3, r3, #131072
 298 0120 002B     		cmp	r3, #0
 299 0122 F0D1     		bne	.L18
 300              	.L5:
 311:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 312:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 313:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 314:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 315:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 316:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 317:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 301              		.loc 1 317 0
 302 0124 7B68     		ldr	r3, [r7, #4]
 303 0126 1B68     		ldr	r3, [r3]
 304 0128 03F00203 		and	r3, r3, #2
 305 012c 002B     		cmp	r3, #0
 306 012e 7DD0     		beq	.L19
 318:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 319:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the parameters */
 320:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 321:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
ARM GAS  /tmp/ccFfEXtt.s 			page 12


 322:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 323:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 324:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 307              		.loc 1 324 0
 308 0130 5A4B     		ldr	r3, .L61
 309 0132 9B68     		ldr	r3, [r3, #8]
 310 0134 03F00C03 		and	r3, r3, #12
 311 0138 002B     		cmp	r3, #0
 312 013a 0BD0     		beq	.L20
 325:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RC
 313              		.loc 1 325 0
 314 013c 574B     		ldr	r3, .L61
 315 013e 9B68     		ldr	r3, [r3, #8]
 316 0140 03F00C03 		and	r3, r3, #12
 317 0144 082B     		cmp	r3, #8
 318 0146 26D1     		bne	.L21
 319              		.loc 1 325 0 is_stmt 0 discriminator 1
 320 0148 544B     		ldr	r3, .L61
 321 014a 5B68     		ldr	r3, [r3, #4]
 322 014c 03F48003 		and	r3, r3, #4194304
 323 0150 002B     		cmp	r3, #0
 324 0152 20D1     		bne	.L21
 325              	.L20:
 326:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 327:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 328:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 326              		.loc 1 328 0 is_stmt 1
 327 0154 514B     		ldr	r3, .L61
 328 0156 1B68     		ldr	r3, [r3]
 329 0158 03F00203 		and	r3, r3, #2
 330 015c 002B     		cmp	r3, #0
 331 015e 05D0     		beq	.L22
 332              		.loc 1 328 0 is_stmt 0 discriminator 1
 333 0160 7B68     		ldr	r3, [r7, #4]
 334 0162 DB68     		ldr	r3, [r3, #12]
 335 0164 012B     		cmp	r3, #1
 336 0166 01D0     		beq	.L22
 329:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 330:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 337              		.loc 1 330 0 is_stmt 1
 338 0168 0123     		movs	r3, #1
 339 016a D8E1     		b	.L9
 340              	.L22:
 331:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 332:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 333:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 335:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 336:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 341              		.loc 1 336 0
 342 016c 4B48     		ldr	r0, .L61
 343 016e 4B4B     		ldr	r3, .L61
 344 0170 1B68     		ldr	r3, [r3]
 345 0172 23F0F802 		bic	r2, r3, #248
 346 0176 7B68     		ldr	r3, [r7, #4]
 347 0178 1969     		ldr	r1, [r3, #16]
 348 017a F823     		movs	r3, #248
ARM GAS  /tmp/ccFfEXtt.s 			page 13


 349 017c BB63     		str	r3, [r7, #56]
 350              	.LBB35:
 351              	.LBB36:
 352              		.file 2 "../../Drivers/CMSIS/Include/cmsis_gcc.h"
   1:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccFfEXtt.s 			page 14


  54:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccFfEXtt.s 			page 15


 111:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccFfEXtt.s 			page 16


 168:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /tmp/ccFfEXtt.s 			page 17


 225:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
ARM GAS  /tmp/ccFfEXtt.s 			page 18


 282:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
ARM GAS  /tmp/ccFfEXtt.s 			page 19


 339:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:../../Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccFfEXtt.s 			page 20


 396:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
ARM GAS  /tmp/ccFfEXtt.s 			page 21


 453:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccFfEXtt.s 			page 22


 510:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:../../Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 353              		.loc 2 531 0
 354 017e BB6B     		ldr	r3, [r7, #56]
 355              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 356 0180 93FAA3F3 		rbit r3, r3
 357              	@ 0 "" 2
 358              		.thumb
 359 0184 7B63     		str	r3, [r7, #52]
 532:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 360              		.loc 2 544 0
 361 0186 7B6B     		ldr	r3, [r7, #52]
 362              	.LBE36:
 363              	.LBE35:
 364              		.loc 1 336 0
 365 0188 B3FA83F3 		clz	r3, r3
 366 018c 01FA03F3 		lsl	r3, r1, r3
 367 0190 1343     		orrs	r3, r3, r2
 368 0192 0360     		str	r3, [r0]
 328:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 369              		.loc 1 328 0
 370 0194 4AE0     		b	.L19
 371              	.L21:
 337:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 338:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
ARM GAS  /tmp/ccFfEXtt.s 			page 23


 339:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 340:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 341:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the HSI State */
 342:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 372              		.loc 1 342 0
 373 0196 7B68     		ldr	r3, [r7, #4]
 374 0198 DB68     		ldr	r3, [r3, #12]
 375 019a 002B     		cmp	r3, #0
 376 019c 2DD0     		beq	.L24
 343:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 344:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 345:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 377              		.loc 1 345 0
 378 019e 3F4A     		ldr	r2, .L61
 379 01a0 3E4B     		ldr	r3, .L61
 380 01a2 1B68     		ldr	r3, [r3]
 381 01a4 43F00103 		orr	r3, r3, #1
 382 01a8 1360     		str	r3, [r2]
 346:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 347:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 348:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 383              		.loc 1 348 0
 384 01aa FFF7FEFF 		bl	HAL_GetTick
 385 01ae F863     		str	r0, [r7, #60]
 349:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 350:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 351:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 386              		.loc 1 351 0
 387 01b0 08E0     		b	.L25
 388              	.L26:
 352:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 353:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 389              		.loc 1 353 0
 390 01b2 FFF7FEFF 		bl	HAL_GetTick
 391 01b6 0246     		mov	r2, r0
 392 01b8 FB6B     		ldr	r3, [r7, #60]
 393 01ba D31A     		subs	r3, r2, r3
 394 01bc 022B     		cmp	r3, #2
 395 01be 01D9     		bls	.L25
 354:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 355:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 396              		.loc 1 355 0
 397 01c0 0323     		movs	r3, #3
 398 01c2 ACE1     		b	.L9
 399              	.L25:
 351:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 400              		.loc 1 351 0
 401 01c4 354B     		ldr	r3, .L61
 402 01c6 1B68     		ldr	r3, [r3]
 403 01c8 03F00203 		and	r3, r3, #2
 404 01cc 002B     		cmp	r3, #0
 405 01ce F0D0     		beq	.L26
 356:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 357:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 358:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                 
 359:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 360:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
ARM GAS  /tmp/ccFfEXtt.s 			page 24


 406              		.loc 1 360 0
 407 01d0 3248     		ldr	r0, .L61
 408 01d2 324B     		ldr	r3, .L61
 409 01d4 1B68     		ldr	r3, [r3]
 410 01d6 23F0F802 		bic	r2, r3, #248
 411 01da 7B68     		ldr	r3, [r7, #4]
 412 01dc 1969     		ldr	r1, [r3, #16]
 413 01de F823     		movs	r3, #248
 414 01e0 3B63     		str	r3, [r7, #48]
 415              	.LBB37:
 416              	.LBB38:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 417              		.loc 2 531 0
 418 01e2 3B6B     		ldr	r3, [r7, #48]
 419              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 420 01e4 93FAA3F3 		rbit r3, r3
 421              	@ 0 "" 2
 422              		.thumb
 423 01e8 FB62     		str	r3, [r7, #44]
 424              		.loc 2 544 0
 425 01ea FB6A     		ldr	r3, [r7, #44]
 426              	.LBE38:
 427              	.LBE37:
 428              		.loc 1 360 0
 429 01ec B3FA83F3 		clz	r3, r3
 430 01f0 01FA03F3 		lsl	r3, r1, r3
 431 01f4 1343     		orrs	r3, r3, r2
 432 01f6 0360     		str	r3, [r0]
 433 01f8 18E0     		b	.L19
 434              	.L24:
 361:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 362:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 363:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 364:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 365:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 435              		.loc 1 365 0
 436 01fa 284A     		ldr	r2, .L61
 437 01fc 274B     		ldr	r3, .L61
 438 01fe 1B68     		ldr	r3, [r3]
 439 0200 23F00103 		bic	r3, r3, #1
 440 0204 1360     		str	r3, [r2]
 366:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 367:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 368:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 441              		.loc 1 368 0
 442 0206 FFF7FEFF 		bl	HAL_GetTick
 443 020a F863     		str	r0, [r7, #60]
 369:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 370:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 371:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 444              		.loc 1 371 0
 445 020c 08E0     		b	.L28
 446              	.L29:
 372:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 373:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 447              		.loc 1 373 0
 448 020e FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccFfEXtt.s 			page 25


 449 0212 0246     		mov	r2, r0
 450 0214 FB6B     		ldr	r3, [r7, #60]
 451 0216 D31A     		subs	r3, r2, r3
 452 0218 022B     		cmp	r3, #2
 453 021a 01D9     		bls	.L28
 374:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 375:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 454              		.loc 1 375 0
 455 021c 0323     		movs	r3, #3
 456 021e 7EE1     		b	.L9
 457              	.L28:
 371:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 458              		.loc 1 371 0
 459 0220 1E4B     		ldr	r3, .L61
 460 0222 1B68     		ldr	r3, [r3]
 461 0224 03F00203 		and	r3, r3, #2
 462 0228 002B     		cmp	r3, #0
 463 022a F0D1     		bne	.L29
 464              	.L19:
 376:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           } 
 377:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         } 
 378:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 379:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 380:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 381:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 382:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 465              		.loc 1 382 0
 466 022c 7B68     		ldr	r3, [r7, #4]
 467 022e 1B68     		ldr	r3, [r3]
 468 0230 03F00803 		and	r3, r3, #8
 469 0234 002B     		cmp	r3, #0
 470 0236 39D0     		beq	.L30
 383:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 384:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the parameters */
 385:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 386:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 387:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the LSI State */
 388:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 471              		.loc 1 388 0
 472 0238 7B68     		ldr	r3, [r7, #4]
 473 023a 5B69     		ldr	r3, [r3, #20]
 474 023c 002B     		cmp	r3, #0
 475 023e 19D0     		beq	.L31
 389:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 390:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 391:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 476              		.loc 1 391 0
 477 0240 164A     		ldr	r2, .L61
 478 0242 164B     		ldr	r3, .L61
 479 0244 5B6F     		ldr	r3, [r3, #116]
 480 0246 43F00103 		orr	r3, r3, #1
 481 024a 5367     		str	r3, [r2, #116]
 392:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 393:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Get Start Tick*/
 394:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 482              		.loc 1 394 0
 483 024c FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccFfEXtt.s 			page 26


 484 0250 F863     		str	r0, [r7, #60]
 395:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 396:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait till LSI is ready */
 397:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 485              		.loc 1 397 0
 486 0252 08E0     		b	.L32
 487              	.L33:
 398:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 399:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 488              		.loc 1 399 0
 489 0254 FFF7FEFF 		bl	HAL_GetTick
 490 0258 0246     		mov	r2, r0
 491 025a FB6B     		ldr	r3, [r7, #60]
 492 025c D31A     		subs	r3, r2, r3
 493 025e 022B     		cmp	r3, #2
 494 0260 01D9     		bls	.L32
 400:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 401:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 495              		.loc 1 401 0
 496 0262 0323     		movs	r3, #3
 497 0264 5BE1     		b	.L9
 498              	.L32:
 397:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 499              		.loc 1 397 0
 500 0266 0D4B     		ldr	r3, .L61
 501 0268 5B6F     		ldr	r3, [r3, #116]
 502 026a 03F00203 		and	r3, r3, #2
 503 026e 002B     		cmp	r3, #0
 504 0270 F0D0     		beq	.L33
 505 0272 1BE0     		b	.L30
 506              	.L31:
 402:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 403:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 404:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 405:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 406:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 407:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 408:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 507              		.loc 1 408 0
 508 0274 094A     		ldr	r2, .L61
 509 0276 094B     		ldr	r3, .L61
 510 0278 5B6F     		ldr	r3, [r3, #116]
 511 027a 23F00103 		bic	r3, r3, #1
 512 027e 5367     		str	r3, [r2, #116]
 409:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 410:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Get Start Tick*/
 411:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 513              		.loc 1 411 0
 514 0280 FFF7FEFF 		bl	HAL_GetTick
 515 0284 F863     		str	r0, [r7, #60]
 412:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 413:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 414:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 516              		.loc 1 414 0
 517 0286 0BE0     		b	.L34
 518              	.L35:
 415:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccFfEXtt.s 			page 27


 416:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 519              		.loc 1 416 0
 520 0288 FFF7FEFF 		bl	HAL_GetTick
 521 028c 0246     		mov	r2, r0
 522 028e FB6B     		ldr	r3, [r7, #60]
 523 0290 D31A     		subs	r3, r2, r3
 524 0292 022B     		cmp	r3, #2
 525 0294 04D9     		bls	.L34
 417:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 418:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 526              		.loc 1 418 0
 527 0296 0323     		movs	r3, #3
 528 0298 41E1     		b	.L9
 529              	.L62:
 530 029a 00BF     		.align	2
 531              	.L61:
 532 029c 00380240 		.word	1073887232
 533              	.L34:
 414:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 534              		.loc 1 414 0
 535 02a0 A14B     		ldr	r3, .L63
 536 02a2 5B6F     		ldr	r3, [r3, #116]
 537 02a4 03F00203 		and	r3, r3, #2
 538 02a8 002B     		cmp	r3, #0
 539 02aa EDD1     		bne	.L35
 540              	.L30:
 419:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 420:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 421:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 422:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 423:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 424:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 541              		.loc 1 424 0
 542 02ac 7B68     		ldr	r3, [r7, #4]
 543 02ae 1B68     		ldr	r3, [r3]
 544 02b0 03F00403 		and	r3, r3, #4
 545 02b4 002B     		cmp	r3, #0
 546 02b6 00F08D80 		beq	.L36
 547              	.LBB39:
 425:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 426:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the parameters */
 427:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 428:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 429:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Enable Power Clock*/
 430:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 548              		.loc 1 430 0
 549 02ba 9B4A     		ldr	r2, .L63
 550 02bc 9A4B     		ldr	r3, .L63
 551 02be 1B6C     		ldr	r3, [r3, #64]
 552 02c0 43F08053 		orr	r3, r3, #268435456
 553 02c4 1364     		str	r3, [r2, #64]
 554 02c6 984B     		ldr	r3, .L63
 555 02c8 1B6C     		ldr	r3, [r3, #64]
 556 02ca 03F08053 		and	r3, r3, #268435456
 557 02ce BB60     		str	r3, [r7, #8]
 558 02d0 BB68     		ldr	r3, [r7, #8]
 559              	.LBE39:
ARM GAS  /tmp/ccFfEXtt.s 			page 28


 431:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 432:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Enable write access to Backup domain */
 433:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     PWR->CR1 |= PWR_CR1_DBP;
 560              		.loc 1 433 0
 561 02d2 964A     		ldr	r2, .L63+4
 562 02d4 954B     		ldr	r3, .L63+4
 563 02d6 1B68     		ldr	r3, [r3]
 564 02d8 43F48073 		orr	r3, r3, #256
 565 02dc 1360     		str	r3, [r2]
 434:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 435:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Wait for Backup domain Write protection disable */
 436:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 566              		.loc 1 436 0
 567 02de FFF7FEFF 		bl	HAL_GetTick
 568 02e2 F863     		str	r0, [r7, #60]
 437:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 438:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 569              		.loc 1 438 0
 570 02e4 08E0     		b	.L37
 571              	.L38:
 439:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 440:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 572              		.loc 1 440 0
 573 02e6 FFF7FEFF 		bl	HAL_GetTick
 574 02ea 0246     		mov	r2, r0
 575 02ec FB6B     		ldr	r3, [r7, #60]
 576 02ee D31A     		subs	r3, r2, r3
 577 02f0 642B     		cmp	r3, #100
 578 02f2 01D9     		bls	.L37
 441:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 442:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_TIMEOUT;
 579              		.loc 1 442 0
 580 02f4 0323     		movs	r3, #3
 581 02f6 12E1     		b	.L9
 582              	.L37:
 438:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 583              		.loc 1 438 0
 584 02f8 8C4B     		ldr	r3, .L63+4
 585 02fa 1B68     		ldr	r3, [r3]
 586 02fc 03F48073 		and	r3, r3, #256
 587 0300 002B     		cmp	r3, #0
 588 0302 F0D0     		beq	.L38
 443:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }      
 444:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 445:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 446:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 447:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 589              		.loc 1 447 0
 590 0304 7B68     		ldr	r3, [r7, #4]
 591 0306 9B68     		ldr	r3, [r3, #8]
 592 0308 012B     		cmp	r3, #1
 593 030a 06D1     		bne	.L39
 594              		.loc 1 447 0 is_stmt 0 discriminator 1
 595 030c 864A     		ldr	r2, .L63
 596 030e 864B     		ldr	r3, .L63
 597 0310 1B6F     		ldr	r3, [r3, #112]
 598 0312 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccFfEXtt.s 			page 29


 599 0316 1367     		str	r3, [r2, #112]
 600 0318 2DE0     		b	.L40
 601              	.L39:
 602              		.loc 1 447 0 discriminator 2
 603 031a 7B68     		ldr	r3, [r7, #4]
 604 031c 9B68     		ldr	r3, [r3, #8]
 605 031e 002B     		cmp	r3, #0
 606 0320 0CD1     		bne	.L41
 607              		.loc 1 447 0 discriminator 3
 608 0322 814A     		ldr	r2, .L63
 609 0324 804B     		ldr	r3, .L63
 610 0326 1B6F     		ldr	r3, [r3, #112]
 611 0328 23F00103 		bic	r3, r3, #1
 612 032c 1367     		str	r3, [r2, #112]
 613 032e 7E4A     		ldr	r2, .L63
 614 0330 7D4B     		ldr	r3, .L63
 615 0332 1B6F     		ldr	r3, [r3, #112]
 616 0334 23F00403 		bic	r3, r3, #4
 617 0338 1367     		str	r3, [r2, #112]
 618 033a 1CE0     		b	.L40
 619              	.L41:
 620              		.loc 1 447 0 discriminator 4
 621 033c 7B68     		ldr	r3, [r7, #4]
 622 033e 9B68     		ldr	r3, [r3, #8]
 623 0340 052B     		cmp	r3, #5
 624 0342 0CD1     		bne	.L42
 625              		.loc 1 447 0 discriminator 5
 626 0344 784A     		ldr	r2, .L63
 627 0346 784B     		ldr	r3, .L63
 628 0348 1B6F     		ldr	r3, [r3, #112]
 629 034a 43F00403 		orr	r3, r3, #4
 630 034e 1367     		str	r3, [r2, #112]
 631 0350 754A     		ldr	r2, .L63
 632 0352 754B     		ldr	r3, .L63
 633 0354 1B6F     		ldr	r3, [r3, #112]
 634 0356 43F00103 		orr	r3, r3, #1
 635 035a 1367     		str	r3, [r2, #112]
 636 035c 0BE0     		b	.L40
 637              	.L42:
 638              		.loc 1 447 0 discriminator 6
 639 035e 724A     		ldr	r2, .L63
 640 0360 714B     		ldr	r3, .L63
 641 0362 1B6F     		ldr	r3, [r3, #112]
 642 0364 23F00103 		bic	r3, r3, #1
 643 0368 1367     		str	r3, [r2, #112]
 644 036a 6F4A     		ldr	r2, .L63
 645 036c 6E4B     		ldr	r3, .L63
 646 036e 1B6F     		ldr	r3, [r3, #112]
 647 0370 23F00403 		bic	r3, r3, #4
 648 0374 1367     		str	r3, [r2, #112]
 649              	.L40:
 448:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the LSE State */
 449:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 650              		.loc 1 449 0 is_stmt 1
 651 0376 7B68     		ldr	r3, [r7, #4]
 652 0378 9B68     		ldr	r3, [r3, #8]
 653 037a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccFfEXtt.s 			page 30


 654 037c 15D0     		beq	.L43
 450:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 451:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Get Start Tick*/
 452:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 655              		.loc 1 452 0
 656 037e FFF7FEFF 		bl	HAL_GetTick
 657 0382 F863     		str	r0, [r7, #60]
 453:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 454:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 455:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 658              		.loc 1 455 0
 659 0384 0AE0     		b	.L44
 660              	.L45:
 456:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 457:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 661              		.loc 1 457 0
 662 0386 FFF7FEFF 		bl	HAL_GetTick
 663 038a 0246     		mov	r2, r0
 664 038c FB6B     		ldr	r3, [r7, #60]
 665 038e D31A     		subs	r3, r2, r3
 666 0390 41F28832 		movw	r2, #5000
 667 0394 9342     		cmp	r3, r2
 668 0396 01D9     		bls	.L44
 458:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 459:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 669              		.loc 1 459 0
 670 0398 0323     		movs	r3, #3
 671 039a C0E0     		b	.L9
 672              	.L44:
 455:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 673              		.loc 1 455 0
 674 039c 624B     		ldr	r3, .L63
 675 039e 1B6F     		ldr	r3, [r3, #112]
 676 03a0 03F00203 		and	r3, r3, #2
 677 03a4 002B     		cmp	r3, #0
 678 03a6 EED0     		beq	.L45
 679 03a8 14E0     		b	.L36
 680              	.L43:
 460:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }       
 461:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 462:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 463:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 464:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 465:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Get Start Tick*/
 466:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 681              		.loc 1 466 0
 682 03aa FFF7FEFF 		bl	HAL_GetTick
 683 03ae F863     		str	r0, [r7, #60]
 467:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 468:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 469:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 684              		.loc 1 469 0
 685 03b0 0AE0     		b	.L46
 686              	.L47:
 470:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 471:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 687              		.loc 1 471 0
ARM GAS  /tmp/ccFfEXtt.s 			page 31


 688 03b2 FFF7FEFF 		bl	HAL_GetTick
 689 03b6 0246     		mov	r2, r0
 690 03b8 FB6B     		ldr	r3, [r7, #60]
 691 03ba D31A     		subs	r3, r2, r3
 692 03bc 41F28832 		movw	r2, #5000
 693 03c0 9342     		cmp	r3, r2
 694 03c2 01D9     		bls	.L46
 472:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 473:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 695              		.loc 1 473 0
 696 03c4 0323     		movs	r3, #3
 697 03c6 AAE0     		b	.L9
 698              	.L46:
 469:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 699              		.loc 1 469 0
 700 03c8 574B     		ldr	r3, .L63
 701 03ca 1B6F     		ldr	r3, [r3, #112]
 702 03cc 03F00203 		and	r3, r3, #2
 703 03d0 002B     		cmp	r3, #0
 704 03d2 EED1     		bne	.L47
 705              	.L36:
 474:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }       
 475:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 476:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 477:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 478:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 479:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check the parameters */
 480:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 481:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 706              		.loc 1 481 0
 707 03d4 7B68     		ldr	r3, [r7, #4]
 708 03d6 9B69     		ldr	r3, [r3, #24]
 709 03d8 002B     		cmp	r3, #0
 710 03da 00F09F80 		beq	.L48
 482:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 483:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 484:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 711              		.loc 1 484 0
 712 03de 524B     		ldr	r3, .L63
 713 03e0 9B68     		ldr	r3, [r3, #8]
 714 03e2 03F00C03 		and	r3, r3, #12
 715 03e6 082B     		cmp	r3, #8
 716 03e8 00F09680 		beq	.L49
 485:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     { 
 486:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 717              		.loc 1 486 0
 718 03ec 7B68     		ldr	r3, [r7, #4]
 719 03ee 9B69     		ldr	r3, [r3, #24]
 720 03f0 022B     		cmp	r3, #2
 721 03f2 77D1     		bne	.L50
 487:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 488:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Check the parameters */
 489:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 490:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 491:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 492:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 493:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
ARM GAS  /tmp/ccFfEXtt.s 			page 32


 494:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #if defined (RCC_PLLCFGR_PLLR)
 495:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 496:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #endif
 497:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         
 498:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Disable the main PLL. */
 499:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 722              		.loc 1 499 0
 723 03f4 4C4A     		ldr	r2, .L63
 724 03f6 4C4B     		ldr	r3, .L63
 725 03f8 1B68     		ldr	r3, [r3]
 726 03fa 23F08073 		bic	r3, r3, #16777216
 727 03fe 1360     		str	r3, [r2]
 500:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         
 501:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 502:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 728              		.loc 1 502 0
 729 0400 FFF7FEFF 		bl	HAL_GetTick
 730 0404 F863     		str	r0, [r7, #60]
 503:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         
 504:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 505:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 731              		.loc 1 505 0
 732 0406 08E0     		b	.L51
 733              	.L52:
 506:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 507:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 734              		.loc 1 507 0
 735 0408 FFF7FEFF 		bl	HAL_GetTick
 736 040c 0246     		mov	r2, r0
 737 040e FB6B     		ldr	r3, [r7, #60]
 738 0410 D31A     		subs	r3, r2, r3
 739 0412 022B     		cmp	r3, #2
 740 0414 01D9     		bls	.L51
 508:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 509:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 741              		.loc 1 509 0
 742 0416 0323     		movs	r3, #3
 743 0418 81E0     		b	.L9
 744              	.L51:
 505:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 745              		.loc 1 505 0
 746 041a 434B     		ldr	r3, .L63
 747 041c 1B68     		ldr	r3, [r3]
 748 041e 03F00073 		and	r3, r3, #33554432
 749 0422 002B     		cmp	r3, #0
 750 0424 F0D1     		bne	.L52
 510:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 511:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 512:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         
 513:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 514:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #if defined (RCC_PLLCFGR_PLLR)
 515:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 751              		.loc 1 515 0
 752 0426 4048     		ldr	r0, .L63
 753 0428 7B68     		ldr	r3, [r7, #4]
 754 042a DA69     		ldr	r2, [r3, #28]
 755 042c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccFfEXtt.s 			page 33


 756 042e 1B6A     		ldr	r3, [r3, #32]
 757 0430 1A43     		orrs	r2, r2, r3
 758 0432 7B68     		ldr	r3, [r7, #4]
 759 0434 596A     		ldr	r1, [r3, #36]
 760 0436 47F6C073 		movw	r3, #32704
 761 043a BB62     		str	r3, [r7, #40]
 762              	.LBB40:
 763              	.LBB41:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 764              		.loc 2 531 0
 765 043c BB6A     		ldr	r3, [r7, #40]
 766              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 767 043e 93FAA3F3 		rbit r3, r3
 768              	@ 0 "" 2
 769              		.thumb
 770 0442 7B62     		str	r3, [r7, #36]
 771              		.loc 2 544 0
 772 0444 7B6A     		ldr	r3, [r7, #36]
 773              	.LBE41:
 774              	.LBE40:
 775              		.loc 1 515 0
 776 0446 B3FA83F3 		clz	r3, r3
 777 044a 01FA03F3 		lsl	r3, r1, r3
 778 044e 1A43     		orrs	r2, r2, r3
 779 0450 7B68     		ldr	r3, [r7, #4]
 780 0452 9B6A     		ldr	r3, [r3, #40]
 781 0454 5B08     		lsrs	r3, r3, #1
 782 0456 591E     		subs	r1, r3, #1
 783 0458 4FF44033 		mov	r3, #196608
 784 045c 3B62     		str	r3, [r7, #32]
 785              	.LBB42:
 786              	.LBB43:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 787              		.loc 2 531 0
 788 045e 3B6A     		ldr	r3, [r7, #32]
 789              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 790 0460 93FAA3F3 		rbit r3, r3
 791              	@ 0 "" 2
 792              		.thumb
 793 0464 FB61     		str	r3, [r7, #28]
 794              		.loc 2 544 0
 795 0466 FB69     		ldr	r3, [r7, #28]
 796              	.LBE43:
 797              	.LBE42:
 798              		.loc 1 515 0
 799 0468 B3FA83F3 		clz	r3, r3
 800 046c 01FA03F3 		lsl	r3, r1, r3
 801 0470 1A43     		orrs	r2, r2, r3
 802 0472 7B68     		ldr	r3, [r7, #4]
 803 0474 D96A     		ldr	r1, [r3, #44]
 804 0476 4FF07063 		mov	r3, #251658240
 805 047a BB61     		str	r3, [r7, #24]
 806              	.LBB44:
 807              	.LBB45:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 808              		.loc 2 531 0
 809 047c BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccFfEXtt.s 			page 34


 810              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 811 047e 93FAA3F3 		rbit r3, r3
 812              	@ 0 "" 2
 813              		.thumb
 814 0482 7B61     		str	r3, [r7, #20]
 815              		.loc 2 544 0
 816 0484 7B69     		ldr	r3, [r7, #20]
 817              	.LBE45:
 818              	.LBE44:
 819              		.loc 1 515 0
 820 0486 B3FA83F3 		clz	r3, r3
 821 048a 01FA03F3 		lsl	r3, r1, r3
 822 048e 1A43     		orrs	r2, r2, r3
 823 0490 7B68     		ldr	r3, [r7, #4]
 824 0492 196B     		ldr	r1, [r3, #48]
 825 0494 4FF0E043 		mov	r3, #1879048192
 826 0498 3B61     		str	r3, [r7, #16]
 827              	.LBB46:
 828              	.LBB47:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 829              		.loc 2 531 0
 830 049a 3B69     		ldr	r3, [r7, #16]
 831              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 832 049c 93FAA3F3 		rbit r3, r3
 833              	@ 0 "" 2
 834              		.thumb
 835 04a0 FB60     		str	r3, [r7, #12]
 836              		.loc 2 544 0
 837 04a2 FB68     		ldr	r3, [r7, #12]
 838              	.LBE47:
 839              	.LBE46:
 840              		.loc 1 515 0
 841 04a4 B3FA83F3 		clz	r3, r3
 842 04a8 01FA03F3 		lsl	r3, r1, r3
 843 04ac 1343     		orrs	r3, r3, r2
 844 04ae 4360     		str	r3, [r0, #4]
 516:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 517:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 518:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 519:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ,
 520:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLR);
 521:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #else
 522:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 523:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 524:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 525:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 526:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ);
 527:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #endif
 528:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 529:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Enable the main PLL. */
 530:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 845              		.loc 1 530 0
 846 04b0 1D4A     		ldr	r2, .L63
 847 04b2 1D4B     		ldr	r3, .L63
 848 04b4 1B68     		ldr	r3, [r3]
 849 04b6 43F08073 		orr	r3, r3, #16777216
 850 04ba 1360     		str	r3, [r2]
ARM GAS  /tmp/ccFfEXtt.s 			page 35


 531:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 532:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 533:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 851              		.loc 1 533 0
 852 04bc FFF7FEFF 		bl	HAL_GetTick
 853 04c0 F863     		str	r0, [r7, #60]
 534:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         
 535:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 536:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 854              		.loc 1 536 0
 855 04c2 08E0     		b	.L57
 856              	.L58:
 537:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 538:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 857              		.loc 1 538 0
 858 04c4 FFF7FEFF 		bl	HAL_GetTick
 859 04c8 0246     		mov	r2, r0
 860 04ca FB6B     		ldr	r3, [r7, #60]
 861 04cc D31A     		subs	r3, r2, r3
 862 04ce 022B     		cmp	r3, #2
 863 04d0 01D9     		bls	.L57
 539:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 540:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 864              		.loc 1 540 0
 865 04d2 0323     		movs	r3, #3
 866 04d4 23E0     		b	.L9
 867              	.L57:
 536:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 868              		.loc 1 536 0
 869 04d6 144B     		ldr	r3, .L63
 870 04d8 1B68     		ldr	r3, [r3]
 871 04da 03F00073 		and	r3, r3, #33554432
 872 04de 002B     		cmp	r3, #0
 873 04e0 F0D0     		beq	.L58
 874 04e2 1BE0     		b	.L48
 875              	.L50:
 541:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           } 
 542:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 543:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 544:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 545:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 546:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Disable the main PLL. */
 547:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 876              		.loc 1 547 0
 877 04e4 104A     		ldr	r2, .L63
 878 04e6 104B     		ldr	r3, .L63
 879 04e8 1B68     		ldr	r3, [r3]
 880 04ea 23F08073 		bic	r3, r3, #16777216
 881 04ee 1360     		str	r3, [r2]
 548:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****  
 549:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 550:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 882              		.loc 1 550 0
 883 04f0 FFF7FEFF 		bl	HAL_GetTick
 884 04f4 F863     		str	r0, [r7, #60]
 551:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         
 552:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till PLL is ready */  
ARM GAS  /tmp/ccFfEXtt.s 			page 36


 553:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 885              		.loc 1 553 0
 886 04f6 08E0     		b	.L59
 887              	.L60:
 554:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 555:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 888              		.loc 1 555 0
 889 04f8 FFF7FEFF 		bl	HAL_GetTick
 890 04fc 0246     		mov	r2, r0
 891 04fe FB6B     		ldr	r3, [r7, #60]
 892 0500 D31A     		subs	r3, r2, r3
 893 0502 022B     		cmp	r3, #2
 894 0504 01D9     		bls	.L59
 556:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 557:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 895              		.loc 1 557 0
 896 0506 0323     		movs	r3, #3
 897 0508 09E0     		b	.L9
 898              	.L59:
 553:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 899              		.loc 1 553 0
 900 050a 074B     		ldr	r3, .L63
 901 050c 1B68     		ldr	r3, [r3]
 902 050e 03F00073 		and	r3, r3, #33554432
 903 0512 002B     		cmp	r3, #0
 904 0514 F0D1     		bne	.L60
 905 0516 01E0     		b	.L48
 906              	.L49:
 558:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 559:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 560:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 561:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 562:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 563:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 564:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_ERROR;
 907              		.loc 1 564 0
 908 0518 0123     		movs	r3, #1
 909 051a 00E0     		b	.L9
 910              	.L48:
 565:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 566:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 567:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return HAL_OK;
 911              		.loc 1 567 0
 912 051c 0023     		movs	r3, #0
 913              	.L9:
 568:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 914              		.loc 1 568 0
 915 051e 1846     		mov	r0, r3
 916 0520 4037     		adds	r7, r7, #64
 917              	.LCFI7:
 918              		.cfi_def_cfa_offset 8
 919 0522 BD46     		mov	sp, r7
 920              	.LCFI8:
 921              		.cfi_def_cfa_register 13
 922              		@ sp needed
 923 0524 80BD     		pop	{r7, pc}
 924              	.L64:
ARM GAS  /tmp/ccFfEXtt.s 			page 37


 925 0526 00BF     		.align	2
 926              	.L63:
 927 0528 00380240 		.word	1073887232
 928 052c 00700040 		.word	1073770496
 929              		.cfi_endproc
 930              	.LFE136:
 932              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 933              		.align	2
 934              		.global	HAL_RCC_ClockConfig
 935              		.thumb
 936              		.thumb_func
 938              	HAL_RCC_ClockConfig:
 939              	.LFB137:
 569:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****  
 570:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 571:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified 
 572:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 573:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 574:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 575:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  FLatency: FLASH Latency, this parameter depend on device selected
 576:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * 
 577:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 578:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 579:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 580:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 581:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 582:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 583:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 584:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           
 585:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 586:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 587:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 588:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 589:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         You can use HAL_RCC_GetClockConfig() function to know which clock is
 590:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         currently used as system clock source.
 591:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 592:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 593:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 594:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 595:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 596:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 597:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 940              		.loc 1 597 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 24
 943              		@ frame_needed = 1, uses_anonymous_args = 0
 944 0000 80B5     		push	{r7, lr}
 945              	.LCFI9:
 946              		.cfi_def_cfa_offset 8
 947              		.cfi_offset 7, -8
 948              		.cfi_offset 14, -4
 949 0002 86B0     		sub	sp, sp, #24
 950              	.LCFI10:
 951              		.cfi_def_cfa_offset 32
 952 0004 00AF     		add	r7, sp, #0
 953              	.LCFI11:
 954              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccFfEXtt.s 			page 38


 955 0006 7860     		str	r0, [r7, #4]
 956 0008 3960     		str	r1, [r7]
 598:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t tickstart = 0;
 957              		.loc 1 598 0
 958 000a 0023     		movs	r3, #0
 959 000c 7B61     		str	r3, [r7, #20]
 599:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 600:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check the parameters */
 601:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 602:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 603:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 604:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 605:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   must be correctly programmed according to the frequency of the CPU clock 
 606:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   (HCLK) and the supply voltage of the device. */
 607:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 608:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Increasing the CPU frequency */
 609:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 960              		.loc 1 609 0
 961 000e 784B     		ldr	r3, .L85
 962 0010 1B68     		ldr	r3, [r3]
 963 0012 03F00F02 		and	r2, r3, #15
 964 0016 3B68     		ldr	r3, [r7]
 965 0018 9A42     		cmp	r2, r3
 966 001a 10D2     		bcs	.L66
 610:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {    
 611:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 612:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 967              		.loc 1 612 0
 968 001c 7449     		ldr	r1, .L85
 969 001e 744B     		ldr	r3, .L85
 970 0020 1B68     		ldr	r3, [r3]
 971 0022 23F00F02 		bic	r2, r3, #15
 972 0026 3B68     		ldr	r3, [r7]
 973 0028 1343     		orrs	r3, r3, r2
 974 002a 0B60     		str	r3, [r1]
 613:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 614:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 615:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 616:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 975              		.loc 1 616 0
 976 002c 704B     		ldr	r3, .L85
 977 002e 1B68     		ldr	r3, [r3]
 978 0030 03F00F02 		and	r2, r3, #15
 979 0034 3B68     		ldr	r3, [r7]
 980 0036 9A42     		cmp	r2, r3
 981 0038 01D0     		beq	.L66
 617:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 618:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_ERROR;
 982              		.loc 1 618 0
 983 003a 0123     		movs	r3, #1
 984 003c D3E0     		b	.L67
 985              	.L66:
 619:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 620:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 621:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 622:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 623:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
ARM GAS  /tmp/ccFfEXtt.s 			page 39


 986              		.loc 1 623 0
 987 003e 7B68     		ldr	r3, [r7, #4]
 988 0040 1B68     		ldr	r3, [r3]
 989 0042 03F00203 		and	r3, r3, #2
 990 0046 002B     		cmp	r3, #0
 991 0048 08D0     		beq	.L68
 624:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 625:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 626:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 992              		.loc 1 626 0
 993 004a 6A49     		ldr	r1, .L85+4
 994 004c 694B     		ldr	r3, .L85+4
 995 004e 9B68     		ldr	r3, [r3, #8]
 996 0050 23F0F002 		bic	r2, r3, #240
 997 0054 7B68     		ldr	r3, [r7, #4]
 998 0056 9B68     		ldr	r3, [r3, #8]
 999 0058 1343     		orrs	r3, r3, r2
 1000 005a 8B60     		str	r3, [r1, #8]
 1001              	.L68:
 627:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 628:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 629:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 630:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1002              		.loc 1 630 0
 1003 005c 7B68     		ldr	r3, [r7, #4]
 1004 005e 1B68     		ldr	r3, [r3]
 1005 0060 03F00103 		and	r3, r3, #1
 1006 0064 002B     		cmp	r3, #0
 1007 0066 6BD0     		beq	.L69
 631:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {    
 632:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 633:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 634:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 635:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1008              		.loc 1 635 0
 1009 0068 7B68     		ldr	r3, [r7, #4]
 1010 006a 5B68     		ldr	r3, [r3, #4]
 1011 006c 012B     		cmp	r3, #1
 1012 006e 07D1     		bne	.L70
 636:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 637:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the HSE ready flag */  
 638:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1013              		.loc 1 638 0
 1014 0070 604B     		ldr	r3, .L85+4
 1015 0072 1B68     		ldr	r3, [r3]
 1016 0074 03F40033 		and	r3, r3, #131072
 1017 0078 002B     		cmp	r3, #0
 1018 007a 15D1     		bne	.L71
 639:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 640:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 1019              		.loc 1 640 0
 1020 007c 0123     		movs	r3, #1
 1021 007e B2E0     		b	.L67
 1022              	.L70:
 641:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 642:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 643:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
ARM GAS  /tmp/ccFfEXtt.s 			page 40


 644:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1023              		.loc 1 644 0
 1024 0080 7B68     		ldr	r3, [r7, #4]
 1025 0082 5B68     		ldr	r3, [r3, #4]
 1026 0084 022B     		cmp	r3, #2
 1027 0086 07D1     		bne	.L72
 645:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 646:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the PLL ready flag */  
 647:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1028              		.loc 1 647 0
 1029 0088 5A4B     		ldr	r3, .L85+4
 1030 008a 1B68     		ldr	r3, [r3]
 1031 008c 03F00073 		and	r3, r3, #33554432
 1032 0090 002B     		cmp	r3, #0
 1033 0092 09D1     		bne	.L71
 648:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 649:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 1034              		.loc 1 649 0
 1035 0094 0123     		movs	r3, #1
 1036 0096 A6E0     		b	.L67
 1037              	.L72:
 650:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 651:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 652:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 653:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 654:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 655:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the HSI ready flag */  
 656:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1038              		.loc 1 656 0
 1039 0098 564B     		ldr	r3, .L85+4
 1040 009a 1B68     		ldr	r3, [r3]
 1041 009c 03F00203 		and	r3, r3, #2
 1042 00a0 002B     		cmp	r3, #0
 1043 00a2 01D1     		bne	.L71
 657:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 658:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 1044              		.loc 1 658 0
 1045 00a4 0123     		movs	r3, #1
 1046 00a6 9EE0     		b	.L67
 1047              	.L71:
 659:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 660:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 661:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 662:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 1048              		.loc 1 662 0
 1049 00a8 5249     		ldr	r1, .L85+4
 1050 00aa 524B     		ldr	r3, .L85+4
 1051 00ac 9B68     		ldr	r3, [r3, #8]
 1052 00ae 23F00302 		bic	r2, r3, #3
 1053 00b2 7B68     		ldr	r3, [r7, #4]
 1054 00b4 5B68     		ldr	r3, [r3, #4]
 1055 00b6 1343     		orrs	r3, r3, r2
 1056 00b8 8B60     		str	r3, [r1, #8]
 663:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Get Start Tick*/
 664:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 1057              		.loc 1 664 0
 1058 00ba FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccFfEXtt.s 			page 41


 1059 00be 7861     		str	r0, [r7, #20]
 665:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 666:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1060              		.loc 1 666 0
 1061 00c0 7B68     		ldr	r3, [r7, #4]
 1062 00c2 5B68     		ldr	r3, [r3, #4]
 1063 00c4 012B     		cmp	r3, #1
 1064 00c6 12D1     		bne	.L73
 667:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 668:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 1065              		.loc 1 668 0
 1066 00c8 0AE0     		b	.L74
 1067              	.L75:
 669:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 670:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1068              		.loc 1 670 0
 1069 00ca FFF7FEFF 		bl	HAL_GetTick
 1070 00ce 0246     		mov	r2, r0
 1071 00d0 7B69     		ldr	r3, [r7, #20]
 1072 00d2 D31A     		subs	r3, r2, r3
 1073 00d4 41F28832 		movw	r2, #5000
 1074 00d8 9342     		cmp	r3, r2
 1075 00da 01D9     		bls	.L74
 671:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 672:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1076              		.loc 1 672 0
 1077 00dc 0323     		movs	r3, #3
 1078 00de 82E0     		b	.L67
 1079              	.L74:
 668:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 1080              		.loc 1 668 0
 1081 00e0 444B     		ldr	r3, .L85+4
 1082 00e2 9B68     		ldr	r3, [r3, #8]
 1083 00e4 03F00C03 		and	r3, r3, #12
 1084 00e8 042B     		cmp	r3, #4
 1085 00ea EED1     		bne	.L75
 1086 00ec 28E0     		b	.L69
 1087              	.L73:
 673:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 674:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 675:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 676:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1088              		.loc 1 676 0
 1089 00ee 7B68     		ldr	r3, [r7, #4]
 1090 00f0 5B68     		ldr	r3, [r3, #4]
 1091 00f2 022B     		cmp	r3, #2
 1092 00f4 12D1     		bne	.L76
 677:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 678:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 1093              		.loc 1 678 0
 1094 00f6 0AE0     		b	.L77
 1095              	.L78:
 679:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 680:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1096              		.loc 1 680 0
 1097 00f8 FFF7FEFF 		bl	HAL_GetTick
 1098 00fc 0246     		mov	r2, r0
ARM GAS  /tmp/ccFfEXtt.s 			page 42


 1099 00fe 7B69     		ldr	r3, [r7, #20]
 1100 0100 D31A     		subs	r3, r2, r3
 1101 0102 41F28832 		movw	r2, #5000
 1102 0106 9342     		cmp	r3, r2
 1103 0108 01D9     		bls	.L77
 681:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 682:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1104              		.loc 1 682 0
 1105 010a 0323     		movs	r3, #3
 1106 010c 6BE0     		b	.L67
 1107              	.L77:
 678:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 1108              		.loc 1 678 0
 1109 010e 394B     		ldr	r3, .L85+4
 1110 0110 9B68     		ldr	r3, [r3, #8]
 1111 0112 03F00C03 		and	r3, r3, #12
 1112 0116 082B     		cmp	r3, #8
 1113 0118 EED1     		bne	.L78
 1114 011a 11E0     		b	.L69
 1115              	.L76:
 683:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 684:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 685:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 686:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 687:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 688:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 1116              		.loc 1 688 0
 1117 011c 0AE0     		b	.L79
 1118              	.L80:
 689:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 690:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1119              		.loc 1 690 0
 1120 011e FFF7FEFF 		bl	HAL_GetTick
 1121 0122 0246     		mov	r2, r0
 1122 0124 7B69     		ldr	r3, [r7, #20]
 1123 0126 D31A     		subs	r3, r2, r3
 1124 0128 41F28832 		movw	r2, #5000
 1125 012c 9342     		cmp	r3, r2
 1126 012e 01D9     		bls	.L79
 691:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 692:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1127              		.loc 1 692 0
 1128 0130 0323     		movs	r3, #3
 1129 0132 58E0     		b	.L67
 1130              	.L79:
 688:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 1131              		.loc 1 688 0
 1132 0134 2F4B     		ldr	r3, .L85+4
 1133 0136 9B68     		ldr	r3, [r3, #8]
 1134 0138 03F00C03 		and	r3, r3, #12
 1135 013c 002B     		cmp	r3, #0
 1136 013e EED1     		bne	.L80
 1137              	.L69:
 693:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 694:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 695:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 696:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
ARM GAS  /tmp/ccFfEXtt.s 			page 43


 697:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 698:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 699:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1138              		.loc 1 699 0
 1139 0140 2B4B     		ldr	r3, .L85
 1140 0142 1B68     		ldr	r3, [r3]
 1141 0144 03F00F02 		and	r2, r3, #15
 1142 0148 3B68     		ldr	r3, [r7]
 1143 014a 9A42     		cmp	r2, r3
 1144 014c 10D9     		bls	.L81
 700:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 701:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 702:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1145              		.loc 1 702 0
 1146 014e 2849     		ldr	r1, .L85
 1147 0150 274B     		ldr	r3, .L85
 1148 0152 1B68     		ldr	r3, [r3]
 1149 0154 23F00F02 		bic	r2, r3, #15
 1150 0158 3B68     		ldr	r3, [r7]
 1151 015a 1343     		orrs	r3, r3, r2
 1152 015c 0B60     		str	r3, [r1]
 703:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 704:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 705:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 706:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1153              		.loc 1 706 0
 1154 015e 244B     		ldr	r3, .L85
 1155 0160 1B68     		ldr	r3, [r3]
 1156 0162 03F00F02 		and	r2, r3, #15
 1157 0166 3B68     		ldr	r3, [r7]
 1158 0168 9A42     		cmp	r2, r3
 1159 016a 01D0     		beq	.L81
 707:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 708:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_ERROR;
 1160              		.loc 1 708 0
 1161 016c 0123     		movs	r3, #1
 1162 016e 3AE0     		b	.L67
 1163              	.L81:
 709:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 710:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 711:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 712:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 713:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1164              		.loc 1 713 0
 1165 0170 7B68     		ldr	r3, [r7, #4]
 1166 0172 1B68     		ldr	r3, [r3]
 1167 0174 03F00403 		and	r3, r3, #4
 1168 0178 002B     		cmp	r3, #0
 1169 017a 08D0     		beq	.L82
 714:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 715:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 716:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1170              		.loc 1 716 0
 1171 017c 1D49     		ldr	r1, .L85+4
 1172 017e 1D4B     		ldr	r3, .L85+4
 1173 0180 9B68     		ldr	r3, [r3, #8]
 1174 0182 23F4E052 		bic	r2, r3, #7168
ARM GAS  /tmp/ccFfEXtt.s 			page 44


 1175 0186 7B68     		ldr	r3, [r7, #4]
 1176 0188 DB68     		ldr	r3, [r3, #12]
 1177 018a 1343     		orrs	r3, r3, r2
 1178 018c 8B60     		str	r3, [r1, #8]
 1179              	.L82:
 717:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 718:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 719:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 720:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1180              		.loc 1 720 0
 1181 018e 7B68     		ldr	r3, [r7, #4]
 1182 0190 1B68     		ldr	r3, [r3]
 1183 0192 03F00803 		and	r3, r3, #8
 1184 0196 002B     		cmp	r3, #0
 1185 0198 09D0     		beq	.L83
 721:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 722:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 723:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1186              		.loc 1 723 0
 1187 019a 1649     		ldr	r1, .L85+4
 1188 019c 154B     		ldr	r3, .L85+4
 1189 019e 9B68     		ldr	r3, [r3, #8]
 1190 01a0 23F46042 		bic	r2, r3, #57344
 1191 01a4 7B68     		ldr	r3, [r7, #4]
 1192 01a6 1B69     		ldr	r3, [r3, #16]
 1193 01a8 DB00     		lsls	r3, r3, #3
 1194 01aa 1343     		orrs	r3, r3, r2
 1195 01ac 8B60     		str	r3, [r1, #8]
 1196              	.L83:
 724:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 725:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 726:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 727:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITI
 1197              		.loc 1 727 0
 1198 01ae FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1199 01b2 0146     		mov	r1, r0
 1200 01b4 0F4B     		ldr	r3, .L85+4
 1201 01b6 9B68     		ldr	r3, [r3, #8]
 1202 01b8 03F0F002 		and	r2, r3, #240
 1203 01bc F023     		movs	r3, #240
 1204 01be 3B61     		str	r3, [r7, #16]
 1205              	.LBB48:
 1206              	.LBB49:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1207              		.loc 2 531 0
 1208 01c0 3B69     		ldr	r3, [r7, #16]
 1209              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1210 01c2 93FAA3F3 		rbit r3, r3
 1211              	@ 0 "" 2
 1212              		.thumb
 1213 01c6 FB60     		str	r3, [r7, #12]
 1214              		.loc 2 544 0
 1215 01c8 FB68     		ldr	r3, [r7, #12]
 1216              	.LBE49:
 1217              	.LBE48:
 1218              		.loc 1 727 0
 1219 01ca B3FA83F3 		clz	r3, r3
ARM GAS  /tmp/ccFfEXtt.s 			page 45


 1220 01ce 22FA03F3 		lsr	r3, r2, r3
 1221 01d2 094A     		ldr	r2, .L85+8
 1222 01d4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1223 01d6 21FA03F3 		lsr	r3, r1, r3
 1224 01da 084A     		ldr	r2, .L85+12
 1225 01dc 1360     		str	r3, [r2]
 728:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 729:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 730:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1226              		.loc 1 730 0
 1227 01de 0020     		movs	r0, #0
 1228 01e0 FFF7FEFF 		bl	HAL_InitTick
 731:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 732:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return HAL_OK;
 1229              		.loc 1 732 0
 1230 01e4 0023     		movs	r3, #0
 1231              	.L67:
 733:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1232              		.loc 1 733 0
 1233 01e6 1846     		mov	r0, r3
 1234 01e8 1837     		adds	r7, r7, #24
 1235              	.LCFI12:
 1236              		.cfi_def_cfa_offset 8
 1237 01ea BD46     		mov	sp, r7
 1238              	.LCFI13:
 1239              		.cfi_def_cfa_register 13
 1240              		@ sp needed
 1241 01ec 80BD     		pop	{r7, pc}
 1242              	.L86:
 1243 01ee 00BF     		.align	2
 1244              	.L85:
 1245 01f0 003C0240 		.word	1073888256
 1246 01f4 00380240 		.word	1073887232
 1247 01f8 00000000 		.word	AHBPrescTable
 1248 01fc 00000000 		.word	SystemCoreClock
 1249              		.cfi_endproc
 1250              	.LFE137:
 1252              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1253              		.align	2
 1254              		.global	HAL_RCC_MCOConfig
 1255              		.thumb
 1256              		.thumb_func
 1258              	HAL_RCC_MCOConfig:
 1259              	.LFB138:
 734:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 735:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 736:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @}
 737:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 738:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 739:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions 
 740:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *  @brief   RCC clocks control functions 
 741:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 742:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   @verbatim   
 743:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ===============================================================================
 744:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
 745:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ===============================================================================  
 746:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]
ARM GAS  /tmp/ccFfEXtt.s 			page 46


 747:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 748:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     frequencies.
 749:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 750:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** @endverbatim
 751:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 752:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 753:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 754:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 755:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 756:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 757:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_MCOx: specifies the output direction for the clock source.
 758:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 759:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 760:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 761:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 762:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 763:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 764:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 765:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 766:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 767:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 768:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 769:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 770:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 771:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_MCODiv: specifies the MCOx prescaler.
 772:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 773:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 774:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 775:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 776:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 777:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
 778:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 779:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 780:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 781:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1260              		.loc 1 781 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 48
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264 0000 80B5     		push	{r7, lr}
 1265              	.LCFI14:
 1266              		.cfi_def_cfa_offset 8
 1267              		.cfi_offset 7, -8
 1268              		.cfi_offset 14, -4
 1269 0002 8CB0     		sub	sp, sp, #48
 1270              	.LCFI15:
 1271              		.cfi_def_cfa_offset 56
 1272 0004 00AF     		add	r7, sp, #0
 1273              	.LCFI16:
 1274              		.cfi_def_cfa_register 7
 1275 0006 F860     		str	r0, [r7, #12]
 1276 0008 B960     		str	r1, [r7, #8]
 1277 000a 7A60     		str	r2, [r7, #4]
 782:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 783:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check the parameters */
 784:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 785:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
ARM GAS  /tmp/ccFfEXtt.s 			page 47


 786:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* RCC_MCO1 */
 787:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 1278              		.loc 1 787 0
 1279 000c FB68     		ldr	r3, [r7, #12]
 1280 000e 002B     		cmp	r3, #0
 1281 0010 27D1     		bne	.L88
 1282              	.LBB50:
 788:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 789:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 790:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 791:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 792:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MCO1_CLK_ENABLE();
 1283              		.loc 1 792 0
 1284 0012 294A     		ldr	r2, .L90
 1285 0014 284B     		ldr	r3, .L90
 1286 0016 1B6B     		ldr	r3, [r3, #48]
 1287 0018 43F00103 		orr	r3, r3, #1
 1288 001c 1363     		str	r3, [r2, #48]
 1289 001e 264B     		ldr	r3, .L90
 1290 0020 1B6B     		ldr	r3, [r3, #48]
 1291 0022 03F00103 		and	r3, r3, #1
 1292 0026 BB61     		str	r3, [r7, #24]
 1293 0028 BB69     		ldr	r3, [r7, #24]
 1294              	.LBE50:
 793:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 794:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Configure the MCO1 pin in alternate function mode */    
 795:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 1295              		.loc 1 795 0
 1296 002a 4FF48073 		mov	r3, #256
 1297 002e FB61     		str	r3, [r7, #28]
 796:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1298              		.loc 1 796 0
 1299 0030 0223     		movs	r3, #2
 1300 0032 3B62     		str	r3, [r7, #32]
 797:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1301              		.loc 1 797 0
 1302 0034 0323     		movs	r3, #3
 1303 0036 BB62     		str	r3, [r7, #40]
 798:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1304              		.loc 1 798 0
 1305 0038 0023     		movs	r3, #0
 1306 003a 7B62     		str	r3, [r7, #36]
 799:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1307              		.loc 1 799 0
 1308 003c 0023     		movs	r3, #0
 1309 003e FB62     		str	r3, [r7, #44]
 800:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1310              		.loc 1 800 0
 1311 0040 07F11C03 		add	r3, r7, #28
 1312 0044 1D48     		ldr	r0, .L90+4
 1313 0046 1946     		mov	r1, r3
 1314 0048 FFF7FEFF 		bl	HAL_GPIO_Init
 801:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 802:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 803:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 1315              		.loc 1 803 0
 1316 004c 1A48     		ldr	r0, .L90
ARM GAS  /tmp/ccFfEXtt.s 			page 48


 1317 004e 1A4B     		ldr	r3, .L90
 1318 0050 9B68     		ldr	r3, [r3, #8]
 1319 0052 23F0EC62 		bic	r2, r3, #123731968
 1320 0056 B968     		ldr	r1, [r7, #8]
 1321 0058 7B68     		ldr	r3, [r7, #4]
 1322 005a 0B43     		orrs	r3, r3, r1
 1323 005c 1343     		orrs	r3, r3, r2
 1324 005e 8360     		str	r3, [r0, #8]
 1325 0060 27E0     		b	.L87
 1326              	.L88:
 1327              	.LBB51:
 804:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 805:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
 806:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 807:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 808:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 809:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 810:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MCO2_CLK_ENABLE();
 1328              		.loc 1 810 0
 1329 0062 154A     		ldr	r2, .L90
 1330 0064 144B     		ldr	r3, .L90
 1331 0066 1B6B     		ldr	r3, [r3, #48]
 1332 0068 43F00403 		orr	r3, r3, #4
 1333 006c 1363     		str	r3, [r2, #48]
 1334 006e 124B     		ldr	r3, .L90
 1335 0070 1B6B     		ldr	r3, [r3, #48]
 1336 0072 03F00403 		and	r3, r3, #4
 1337 0076 7B61     		str	r3, [r7, #20]
 1338 0078 7B69     		ldr	r3, [r7, #20]
 1339              	.LBE51:
 811:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 812:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Configure the MCO2 pin in alternate function mode */
 813:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 1340              		.loc 1 813 0
 1341 007a 4FF40073 		mov	r3, #512
 1342 007e FB61     		str	r3, [r7, #28]
 814:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1343              		.loc 1 814 0
 1344 0080 0223     		movs	r3, #2
 1345 0082 3B62     		str	r3, [r7, #32]
 815:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1346              		.loc 1 815 0
 1347 0084 0323     		movs	r3, #3
 1348 0086 BB62     		str	r3, [r7, #40]
 816:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1349              		.loc 1 816 0
 1350 0088 0023     		movs	r3, #0
 1351 008a 7B62     		str	r3, [r7, #36]
 817:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1352              		.loc 1 817 0
 1353 008c 0023     		movs	r3, #0
 1354 008e FB62     		str	r3, [r7, #44]
 818:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 1355              		.loc 1 818 0
 1356 0090 07F11C03 		add	r3, r7, #28
 1357 0094 0A48     		ldr	r0, .L90+8
 1358 0096 1946     		mov	r1, r3
ARM GAS  /tmp/ccFfEXtt.s 			page 49


 1359 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 819:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     
 820:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 821:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 1360              		.loc 1 821 0
 1361 009c 0648     		ldr	r0, .L90
 1362 009e 064B     		ldr	r3, .L90
 1363 00a0 9B68     		ldr	r3, [r3, #8]
 1364 00a2 23F07842 		bic	r2, r3, #-134217728
 1365 00a6 7B68     		ldr	r3, [r7, #4]
 1366 00a8 D900     		lsls	r1, r3, #3
 1367 00aa BB68     		ldr	r3, [r7, #8]
 1368 00ac 0B43     		orrs	r3, r3, r1
 1369 00ae 1343     		orrs	r3, r3, r2
 1370 00b0 8360     		str	r3, [r0, #8]
 1371              	.L87:
 822:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 823:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1372              		.loc 1 823 0
 1373 00b2 3037     		adds	r7, r7, #48
 1374              	.LCFI17:
 1375              		.cfi_def_cfa_offset 8
 1376 00b4 BD46     		mov	sp, r7
 1377              	.LCFI18:
 1378              		.cfi_def_cfa_register 13
 1379              		@ sp needed
 1380 00b6 80BD     		pop	{r7, pc}
 1381              	.L91:
 1382              		.align	2
 1383              	.L90:
 1384 00b8 00380240 		.word	1073887232
 1385 00bc 00000240 		.word	1073872896
 1386 00c0 00080240 		.word	1073874944
 1387              		.cfi_endproc
 1388              	.LFE138:
 1390              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1391              		.align	2
 1392              		.global	HAL_RCC_EnableCSS
 1393              		.thumb
 1394              		.thumb_func
 1396              	HAL_RCC_EnableCSS:
 1397              	.LFB139:
 824:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 825:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 826:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 827:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 828:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 829:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 830:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 831:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.  
 832:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 833:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 834:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 835:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1398              		.loc 1 835 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccFfEXtt.s 			page 50


 1401              		@ frame_needed = 1, uses_anonymous_args = 0
 1402              		@ link register save eliminated.
 1403 0000 80B4     		push	{r7}
 1404              	.LCFI19:
 1405              		.cfi_def_cfa_offset 4
 1406              		.cfi_offset 7, -4
 1407 0002 00AF     		add	r7, sp, #0
 1408              	.LCFI20:
 1409              		.cfi_def_cfa_register 7
 836:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_CSSON);
 1410              		.loc 1 836 0
 1411 0004 044A     		ldr	r2, .L93
 1412 0006 044B     		ldr	r3, .L93
 1413 0008 1B68     		ldr	r3, [r3]
 1414 000a 43F40023 		orr	r3, r3, #524288
 1415 000e 1360     		str	r3, [r2]
 837:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1416              		.loc 1 837 0
 1417 0010 BD46     		mov	sp, r7
 1418              	.LCFI21:
 1419              		.cfi_def_cfa_register 13
 1420              		@ sp needed
 1421 0012 5DF8047B 		ldr	r7, [sp], #4
 1422              	.LCFI22:
 1423              		.cfi_restore 7
 1424              		.cfi_def_cfa_offset 0
 1425 0016 7047     		bx	lr
 1426              	.L94:
 1427              		.align	2
 1428              	.L93:
 1429 0018 00380240 		.word	1073887232
 1430              		.cfi_endproc
 1431              	.LFE139:
 1433              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1434              		.align	2
 1435              		.global	HAL_RCC_DisableCSS
 1436              		.thumb
 1437              		.thumb_func
 1439              	HAL_RCC_DisableCSS:
 1440              	.LFB140:
 838:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 839:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 840:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 841:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 842:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 843:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 844:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1441              		.loc 1 844 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 1, uses_anonymous_args = 0
 1445              		@ link register save eliminated.
 1446 0000 80B4     		push	{r7}
 1447              	.LCFI23:
 1448              		.cfi_def_cfa_offset 4
 1449              		.cfi_offset 7, -4
 1450 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccFfEXtt.s 			page 51


 1451              	.LCFI24:
 1452              		.cfi_def_cfa_register 7
 845:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_CSSON);
 1453              		.loc 1 845 0
 1454 0004 044A     		ldr	r2, .L96
 1455 0006 044B     		ldr	r3, .L96
 1456 0008 1B68     		ldr	r3, [r3]
 1457 000a 23F40023 		bic	r3, r3, #524288
 1458 000e 1360     		str	r3, [r2]
 846:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1459              		.loc 1 846 0
 1460 0010 BD46     		mov	sp, r7
 1461              	.LCFI25:
 1462              		.cfi_def_cfa_register 13
 1463              		@ sp needed
 1464 0012 5DF8047B 		ldr	r7, [sp], #4
 1465              	.LCFI26:
 1466              		.cfi_restore 7
 1467              		.cfi_def_cfa_offset 0
 1468 0016 7047     		bx	lr
 1469              	.L97:
 1470              		.align	2
 1471              	.L96:
 1472 0018 00380240 		.word	1073887232
 1473              		.cfi_endproc
 1474              	.LFE140:
 1476              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1477              		.align	2
 1478              		.global	HAL_RCC_GetSysClockFreq
 1479              		.thumb
 1480              		.thumb_func
 1482              	HAL_RCC_GetSysClockFreq:
 1483              	.LFB141:
 847:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 848:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 849:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 850:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *        
 851:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 852:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 853:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         constant and the selected clock source:
 854:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 855:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 856:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 857:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 858:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 859:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 860:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *               in voltage and temperature.
 861:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 862:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 863:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 864:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *                have wrong result.
 865:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *                  
 866:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 867:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         value for HSE crystal.
 868:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           
 869:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
 870:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
ARM GAS  /tmp/ccFfEXtt.s 			page 52


 871:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           
 872:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 873:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 874:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         
 875:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *               
 876:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval SYSCLK frequency
 877:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 878:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 879:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1484              		.loc 1 879 0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 40
 1487              		@ frame_needed = 1, uses_anonymous_args = 0
 1488              		@ link register save eliminated.
 1489 0000 80B4     		push	{r7}
 1490              	.LCFI27:
 1491              		.cfi_def_cfa_offset 4
 1492              		.cfi_offset 7, -4
 1493 0002 8BB0     		sub	sp, sp, #44
 1494              	.LCFI28:
 1495              		.cfi_def_cfa_offset 48
 1496 0004 00AF     		add	r7, sp, #0
 1497              	.LCFI29:
 1498              		.cfi_def_cfa_register 7
 880:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t pllm = 0, pllvco = 0, pllp = 0;
 1499              		.loc 1 880 0
 1500 0006 0023     		movs	r3, #0
 1501 0008 FB61     		str	r3, [r7, #28]
 1502 000a 0023     		movs	r3, #0
 1503 000c 7B62     		str	r3, [r7, #36]
 1504 000e 0023     		movs	r3, #0
 1505 0010 BB61     		str	r3, [r7, #24]
 881:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t sysclockfreq = 0;
 1506              		.loc 1 881 0
 1507 0012 0023     		movs	r3, #0
 1508 0014 3B62     		str	r3, [r7, #32]
 882:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 883:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 884:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1509              		.loc 1 884 0
 1510 0016 364B     		ldr	r3, .L111
 1511 0018 9B68     		ldr	r3, [r3, #8]
 1512 001a 03F00C03 		and	r3, r3, #12
 1513 001e 042B     		cmp	r3, #4
 1514 0020 06D0     		beq	.L100
 1515 0022 082B     		cmp	r3, #8
 1516 0024 07D0     		beq	.L101
 1517 0026 002B     		cmp	r3, #0
 1518 0028 58D1     		bne	.L110
 885:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 886:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
 887:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 888:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1519              		.loc 1 888 0
 1520 002a 324B     		ldr	r3, .L111+4
 1521 002c 3B62     		str	r3, [r7, #32]
 889:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****        break;
ARM GAS  /tmp/ccFfEXtt.s 			page 53


 1522              		.loc 1 889 0
 1523 002e 58E0     		b	.L103
 1524              	.L100:
 890:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 891:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
 892:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 893:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1525              		.loc 1 893 0
 1526 0030 314B     		ldr	r3, .L111+8
 1527 0032 3B62     		str	r3, [r7, #32]
 894:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       break;
 1528              		.loc 1 894 0
 1529 0034 55E0     		b	.L103
 1530              	.L101:
 895:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 896:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
 897:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 898:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 899:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
 900:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1531              		.loc 1 900 0
 1532 0036 2E4B     		ldr	r3, .L111
 1533 0038 5B68     		ldr	r3, [r3, #4]
 1534 003a 03F03F03 		and	r3, r3, #63
 1535 003e FB61     		str	r3, [r7, #28]
 901:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 1536              		.loc 1 901 0
 1537 0040 2B4B     		ldr	r3, .L111
 1538 0042 5B68     		ldr	r3, [r3, #4]
 1539 0044 03F48003 		and	r3, r3, #4194304
 1540 0048 002B     		cmp	r3, #0
 1541 004a 17D0     		beq	.L104
 902:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 903:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* HSE used as PLL clock source */
 904:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1542              		.loc 1 904 0
 1543 004c 2A4A     		ldr	r2, .L111+8
 1544 004e FB69     		ldr	r3, [r7, #28]
 1545 0050 B2FBF3F2 		udiv	r2, r2, r3
 1546 0054 264B     		ldr	r3, .L111
 1547 0056 5968     		ldr	r1, [r3, #4]
 1548 0058 47F6C073 		movw	r3, #32704
 1549 005c 0B40     		ands	r3, r3, r1
 1550 005e 47F6C071 		movw	r1, #32704
 1551 0062 7961     		str	r1, [r7, #20]
 1552              	.LBB52:
 1553              	.LBB53:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1554              		.loc 2 531 0
 1555 0064 7969     		ldr	r1, [r7, #20]
 1556              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1557 0066 91FAA1F1 		rbit r1, r1
 1558              	@ 0 "" 2
 1559              		.thumb
 1560 006a 3961     		str	r1, [r7, #16]
 1561              		.loc 2 544 0
 1562 006c 3969     		ldr	r1, [r7, #16]
ARM GAS  /tmp/ccFfEXtt.s 			page 54


 1563              	.LBE53:
 1564              	.LBE52:
 1565              		.loc 1 904 0
 1566 006e B1FA81F1 		clz	r1, r1
 1567 0072 CB40     		lsrs	r3, r3, r1
 1568 0074 03FB02F3 		mul	r3, r3, r2
 1569 0078 7B62     		str	r3, [r7, #36]
 1570 007a 16E0     		b	.L106
 1571              	.L104:
 905:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 906:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 907:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 908:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* HSI used as PLL clock source */
 909:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1572              		.loc 1 909 0
 1573 007c 1D4A     		ldr	r2, .L111+4
 1574 007e FB69     		ldr	r3, [r7, #28]
 1575 0080 B2FBF3F2 		udiv	r2, r2, r3
 1576 0084 1A4B     		ldr	r3, .L111
 1577 0086 5968     		ldr	r1, [r3, #4]
 1578 0088 47F6C073 		movw	r3, #32704
 1579 008c 0B40     		ands	r3, r3, r1
 1580 008e 47F6C071 		movw	r1, #32704
 1581 0092 F960     		str	r1, [r7, #12]
 1582              	.LBB54:
 1583              	.LBB55:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1584              		.loc 2 531 0
 1585 0094 F968     		ldr	r1, [r7, #12]
 1586              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1587 0096 91FAA1F1 		rbit r1, r1
 1588              	@ 0 "" 2
 1589              		.thumb
 1590 009a B960     		str	r1, [r7, #8]
 1591              		.loc 2 544 0
 1592 009c B968     		ldr	r1, [r7, #8]
 1593              	.LBE55:
 1594              	.LBE54:
 1595              		.loc 1 909 0
 1596 009e B1FA81F1 		clz	r1, r1
 1597 00a2 CB40     		lsrs	r3, r3, r1
 1598 00a4 03FB02F3 		mul	r3, r3, r2
 1599 00a8 7B62     		str	r3, [r7, #36]
 1600              	.L106:
 910:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 911:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 1601              		.loc 1 911 0
 1602 00aa 114B     		ldr	r3, .L111
 1603 00ac 5B68     		ldr	r3, [r3, #4]
 1604 00ae 03F44032 		and	r2, r3, #196608
 1605 00b2 4FF44033 		mov	r3, #196608
 1606 00b6 7B60     		str	r3, [r7, #4]
 1607              	.LBB56:
 1608              	.LBB57:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1609              		.loc 2 531 0
 1610 00b8 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccFfEXtt.s 			page 55


 1611              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1612 00ba 93FAA3F3 		rbit r3, r3
 1613              	@ 0 "" 2
 1614              		.thumb
 1615 00be 3B60     		str	r3, [r7]
 1616              		.loc 2 544 0
 1617 00c0 3B68     		ldr	r3, [r7]
 1618              	.LBE57:
 1619              	.LBE56:
 1620              		.loc 1 911 0
 1621 00c2 B3FA83F3 		clz	r3, r3
 1622 00c6 22FA03F3 		lsr	r3, r2, r3
 1623 00ca 0133     		adds	r3, r3, #1
 1624 00cc 5B00     		lsls	r3, r3, #1
 1625 00ce BB61     		str	r3, [r7, #24]
 912:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       
 913:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 1626              		.loc 1 913 0
 1627 00d0 7A6A     		ldr	r2, [r7, #36]
 1628 00d2 BB69     		ldr	r3, [r7, #24]
 1629 00d4 B2FBF3F3 		udiv	r3, r2, r3
 1630 00d8 3B62     		str	r3, [r7, #32]
 914:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       break;
 1631              		.loc 1 914 0
 1632 00da 02E0     		b	.L103
 1633              	.L110:
 915:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 916:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     default:
 917:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 918:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1634              		.loc 1 918 0
 1635 00dc 054B     		ldr	r3, .L111+4
 1636 00de 3B62     		str	r3, [r7, #32]
 919:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       break;
 1637              		.loc 1 919 0
 1638 00e0 00BF     		nop
 1639              	.L103:
 920:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 921:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 922:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return sysclockfreq;
 1640              		.loc 1 922 0
 1641 00e2 3B6A     		ldr	r3, [r7, #32]
 923:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1642              		.loc 1 923 0
 1643 00e4 1846     		mov	r0, r3
 1644 00e6 2C37     		adds	r7, r7, #44
 1645              	.LCFI30:
 1646              		.cfi_def_cfa_offset 4
 1647 00e8 BD46     		mov	sp, r7
 1648              	.LCFI31:
 1649              		.cfi_def_cfa_register 13
 1650              		@ sp needed
 1651 00ea 5DF8047B 		ldr	r7, [sp], #4
 1652              	.LCFI32:
 1653              		.cfi_restore 7
 1654              		.cfi_def_cfa_offset 0
 1655 00ee 7047     		bx	lr
ARM GAS  /tmp/ccFfEXtt.s 			page 56


 1656              	.L112:
 1657              		.align	2
 1658              	.L111:
 1659 00f0 00380240 		.word	1073887232
 1660 00f4 0024F400 		.word	16000000
 1661 00f8 40787D01 		.word	25000000
 1662              		.cfi_endproc
 1663              	.LFE141:
 1665              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1666              		.align	2
 1667              		.global	HAL_RCC_GetHCLKFreq
 1668              		.thumb
 1669              		.thumb_func
 1671              	HAL_RCC_GetHCLKFreq:
 1672              	.LFB142:
 924:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 925:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 926:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
 927:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
 928:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
 929:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 930:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval HCLK frequency
 931:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 932:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
 933:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1673              		.loc 1 933 0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 0
 1676              		@ frame_needed = 1, uses_anonymous_args = 0
 1677              		@ link register save eliminated.
 1678 0000 80B4     		push	{r7}
 1679              	.LCFI33:
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 7, -4
 1682 0002 00AF     		add	r7, sp, #0
 1683              	.LCFI34:
 1684              		.cfi_def_cfa_register 7
 934:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return SystemCoreClock;
 1685              		.loc 1 934 0
 1686 0004 034B     		ldr	r3, .L115
 1687 0006 1B68     		ldr	r3, [r3]
 935:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1688              		.loc 1 935 0
 1689 0008 1846     		mov	r0, r3
 1690 000a BD46     		mov	sp, r7
 1691              	.LCFI35:
 1692              		.cfi_def_cfa_register 13
 1693              		@ sp needed
 1694 000c 5DF8047B 		ldr	r7, [sp], #4
 1695              	.LCFI36:
 1696              		.cfi_restore 7
 1697              		.cfi_def_cfa_offset 0
 1698 0010 7047     		bx	lr
 1699              	.L116:
 1700 0012 00BF     		.align	2
 1701              	.L115:
 1702 0014 00000000 		.word	SystemCoreClock
ARM GAS  /tmp/ccFfEXtt.s 			page 57


 1703              		.cfi_endproc
 1704              	.LFE142:
 1706              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1707              		.align	2
 1708              		.global	HAL_RCC_GetPCLK1Freq
 1709              		.thumb
 1710              		.thumb_func
 1712              	HAL_RCC_GetPCLK1Freq:
 1713              	.LFB143:
 936:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 937:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 938:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
 939:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
 940:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
 941:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval PCLK1 frequency
 942:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 943:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
 944:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {  
 1714              		.loc 1 944 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 8
 1717              		@ frame_needed = 1, uses_anonymous_args = 0
 1718 0000 80B5     		push	{r7, lr}
 1719              	.LCFI37:
 1720              		.cfi_def_cfa_offset 8
 1721              		.cfi_offset 7, -8
 1722              		.cfi_offset 14, -4
 1723 0002 82B0     		sub	sp, sp, #8
 1724              	.LCFI38:
 1725              		.cfi_def_cfa_offset 16
 1726 0004 00AF     		add	r7, sp, #0
 1727              	.LCFI39:
 1728              		.cfi_def_cfa_register 7
 945:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 946:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CF
 1729              		.loc 1 946 0
 1730 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1731 000a 0146     		mov	r1, r0
 1732 000c 0B4B     		ldr	r3, .L120
 1733 000e 9B68     		ldr	r3, [r3, #8]
 1734 0010 03F4E052 		and	r2, r3, #7168
 1735 0014 4FF4E053 		mov	r3, #7168
 1736 0018 7B60     		str	r3, [r7, #4]
 1737              	.LBB58:
 1738              	.LBB59:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1739              		.loc 2 531 0
 1740 001a 7B68     		ldr	r3, [r7, #4]
 1741              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1742 001c 93FAA3F3 		rbit r3, r3
 1743              	@ 0 "" 2
 1744              		.thumb
 1745 0020 3B60     		str	r3, [r7]
 1746              		.loc 2 544 0
 1747 0022 3B68     		ldr	r3, [r7]
 1748              	.LBE59:
 1749              	.LBE58:
ARM GAS  /tmp/ccFfEXtt.s 			page 58


 1750              		.loc 1 946 0
 1751 0024 B3FA83F3 		clz	r3, r3
 1752 0028 22FA03F3 		lsr	r3, r2, r3
 1753 002c 044A     		ldr	r2, .L120+4
 1754 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1755 0030 21FA03F3 		lsr	r3, r1, r3
 947:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1756              		.loc 1 947 0
 1757 0034 1846     		mov	r0, r3
 1758 0036 0837     		adds	r7, r7, #8
 1759              	.LCFI40:
 1760              		.cfi_def_cfa_offset 8
 1761 0038 BD46     		mov	sp, r7
 1762              	.LCFI41:
 1763              		.cfi_def_cfa_register 13
 1764              		@ sp needed
 1765 003a 80BD     		pop	{r7, pc}
 1766              	.L121:
 1767              		.align	2
 1768              	.L120:
 1769 003c 00380240 		.word	1073887232
 1770 0040 00000000 		.word	APBPrescTable
 1771              		.cfi_endproc
 1772              	.LFE143:
 1774              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1775              		.align	2
 1776              		.global	HAL_RCC_GetPCLK2Freq
 1777              		.thumb
 1778              		.thumb_func
 1780              	HAL_RCC_GetPCLK2Freq:
 1781              	.LFB144:
 948:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 949:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 950:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
 951:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 952:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 953:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval PCLK2 frequency
 954:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 955:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 956:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1782              		.loc 1 956 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 8
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786 0000 80B5     		push	{r7, lr}
 1787              	.LCFI42:
 1788              		.cfi_def_cfa_offset 8
 1789              		.cfi_offset 7, -8
 1790              		.cfi_offset 14, -4
 1791 0002 82B0     		sub	sp, sp, #8
 1792              	.LCFI43:
 1793              		.cfi_def_cfa_offset 16
 1794 0004 00AF     		add	r7, sp, #0
 1795              	.LCFI44:
 1796              		.cfi_def_cfa_register 7
 957:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 958:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFG
ARM GAS  /tmp/ccFfEXtt.s 			page 59


 1797              		.loc 1 958 0
 1798 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1799 000a 0146     		mov	r1, r0
 1800 000c 0B4B     		ldr	r3, .L125
 1801 000e 9B68     		ldr	r3, [r3, #8]
 1802 0010 03F46042 		and	r2, r3, #57344
 1803 0014 4FF46043 		mov	r3, #57344
 1804 0018 7B60     		str	r3, [r7, #4]
 1805              	.LBB60:
 1806              	.LBB61:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1807              		.loc 2 531 0
 1808 001a 7B68     		ldr	r3, [r7, #4]
 1809              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1810 001c 93FAA3F3 		rbit r3, r3
 1811              	@ 0 "" 2
 1812              		.thumb
 1813 0020 3B60     		str	r3, [r7]
 1814              		.loc 2 544 0
 1815 0022 3B68     		ldr	r3, [r7]
 1816              	.LBE61:
 1817              	.LBE60:
 1818              		.loc 1 958 0
 1819 0024 B3FA83F3 		clz	r3, r3
 1820 0028 22FA03F3 		lsr	r3, r2, r3
 1821 002c 044A     		ldr	r2, .L125+4
 1822 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1823 0030 21FA03F3 		lsr	r3, r1, r3
 959:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** } 
 1824              		.loc 1 959 0
 1825 0034 1846     		mov	r0, r3
 1826 0036 0837     		adds	r7, r7, #8
 1827              	.LCFI45:
 1828              		.cfi_def_cfa_offset 8
 1829 0038 BD46     		mov	sp, r7
 1830              	.LCFI46:
 1831              		.cfi_def_cfa_register 13
 1832              		@ sp needed
 1833 003a 80BD     		pop	{r7, pc}
 1834              	.L126:
 1835              		.align	2
 1836              	.L125:
 1837 003c 00380240 		.word	1073887232
 1838 0040 00000000 		.word	APBPrescTable
 1839              		.cfi_endproc
 1840              	.LFE144:
 1842              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1843              		.align	2
 1844              		.global	HAL_RCC_GetOscConfig
 1845              		.thumb
 1846              		.thumb_func
 1848              	HAL_RCC_GetOscConfig:
 1849              	.LFB145:
 960:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 961:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 962:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
 963:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * RCC configuration registers.
ARM GAS  /tmp/ccFfEXtt.s 			page 60


 964:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
 965:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * will be configured.
 966:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 967:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 968:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 969:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1850              		.loc 1 969 0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 40
 1853              		@ frame_needed = 1, uses_anonymous_args = 0
 1854              		@ link register save eliminated.
 1855 0000 80B4     		push	{r7}
 1856              	.LCFI47:
 1857              		.cfi_def_cfa_offset 4
 1858              		.cfi_offset 7, -4
 1859 0002 8BB0     		sub	sp, sp, #44
 1860              	.LCFI48:
 1861              		.cfi_def_cfa_offset 48
 1862 0004 00AF     		add	r7, sp, #0
 1863              	.LCFI49:
 1864              		.cfi_def_cfa_register 7
 1865 0006 7860     		str	r0, [r7, #4]
 970:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
 971:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 1866              		.loc 1 971 0
 1867 0008 7B68     		ldr	r3, [r7, #4]
 1868 000a 0F22     		movs	r2, #15
 1869 000c 1A60     		str	r2, [r3]
 972:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 973:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
 974:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1870              		.loc 1 974 0
 1871 000e 584B     		ldr	r3, .L144
 1872 0010 1B68     		ldr	r3, [r3]
 1873 0012 03F48023 		and	r3, r3, #262144
 1874 0016 002B     		cmp	r3, #0
 1875 0018 04D0     		beq	.L128
 975:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 976:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1876              		.loc 1 976 0
 1877 001a 7B68     		ldr	r3, [r7, #4]
 1878 001c 4FF4A022 		mov	r2, #327680
 1879 0020 5A60     		str	r2, [r3, #4]
 1880 0022 0DE0     		b	.L129
 1881              	.L128:
 977:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 978:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1882              		.loc 1 978 0
 1883 0024 524B     		ldr	r3, .L144
 1884 0026 1B68     		ldr	r3, [r3]
 1885 0028 03F48033 		and	r3, r3, #65536
 1886 002c 002B     		cmp	r3, #0
 1887 002e 04D0     		beq	.L130
 979:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 980:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1888              		.loc 1 980 0
 1889 0030 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccFfEXtt.s 			page 61


 1890 0032 4FF48032 		mov	r2, #65536
 1891 0036 5A60     		str	r2, [r3, #4]
 1892 0038 02E0     		b	.L129
 1893              	.L130:
 981:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 982:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
 983:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 984:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1894              		.loc 1 984 0
 1895 003a 7B68     		ldr	r3, [r7, #4]
 1896 003c 0022     		movs	r2, #0
 1897 003e 5A60     		str	r2, [r3, #4]
 1898              	.L129:
 985:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 986:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 987:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
 988:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1899              		.loc 1 988 0
 1900 0040 4B4B     		ldr	r3, .L144
 1901 0042 1B68     		ldr	r3, [r3]
 1902 0044 03F00103 		and	r3, r3, #1
 1903 0048 002B     		cmp	r3, #0
 1904 004a 03D0     		beq	.L131
 989:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 990:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1905              		.loc 1 990 0
 1906 004c 7B68     		ldr	r3, [r7, #4]
 1907 004e 0122     		movs	r2, #1
 1908 0050 DA60     		str	r2, [r3, #12]
 1909 0052 02E0     		b	.L132
 1910              	.L131:
 991:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 992:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
 993:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 994:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1911              		.loc 1 994 0
 1912 0054 7B68     		ldr	r3, [r7, #4]
 1913 0056 0022     		movs	r2, #0
 1914 0058 DA60     		str	r2, [r3, #12]
 1915              	.L132:
 995:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 996:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 997:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC
 1916              		.loc 1 997 0
 1917 005a 454B     		ldr	r3, .L144
 1918 005c 1B68     		ldr	r3, [r3]
 1919 005e 03F0F802 		and	r2, r3, #248
 1920 0062 F823     		movs	r3, #248
 1921 0064 7B62     		str	r3, [r7, #36]
 1922              	.LBB62:
 1923              	.LBB63:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1924              		.loc 2 531 0
 1925 0066 7B6A     		ldr	r3, [r7, #36]
 1926              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1927 0068 93FAA3F3 		rbit r3, r3
 1928              	@ 0 "" 2
ARM GAS  /tmp/ccFfEXtt.s 			page 62


 1929              		.thumb
 1930 006c 3B62     		str	r3, [r7, #32]
 1931              		.loc 2 544 0
 1932 006e 3B6A     		ldr	r3, [r7, #32]
 1933              	.LBE63:
 1934              	.LBE62:
 1935              		.loc 1 997 0
 1936 0070 B3FA83F3 		clz	r3, r3
 1937 0074 DA40     		lsrs	r2, r2, r3
 1938 0076 7B68     		ldr	r3, [r7, #4]
 1939 0078 1A61     		str	r2, [r3, #16]
 998:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
 999:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1000:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1940              		.loc 1 1000 0
 1941 007a 3D4B     		ldr	r3, .L144
 1942 007c 1B6F     		ldr	r3, [r3, #112]
 1943 007e 03F00403 		and	r3, r3, #4
 1944 0082 002B     		cmp	r3, #0
 1945 0084 03D0     		beq	.L134
1001:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1002:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1946              		.loc 1 1002 0
 1947 0086 7B68     		ldr	r3, [r7, #4]
 1948 0088 0522     		movs	r2, #5
 1949 008a 9A60     		str	r2, [r3, #8]
 1950 008c 0CE0     		b	.L135
 1951              	.L134:
1003:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1004:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 1952              		.loc 1 1004 0
 1953 008e 384B     		ldr	r3, .L144
 1954 0090 1B6F     		ldr	r3, [r3, #112]
 1955 0092 03F00103 		and	r3, r3, #1
 1956 0096 002B     		cmp	r3, #0
 1957 0098 03D0     		beq	.L136
1005:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1006:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 1958              		.loc 1 1006 0
 1959 009a 7B68     		ldr	r3, [r7, #4]
 1960 009c 0122     		movs	r2, #1
 1961 009e 9A60     		str	r2, [r3, #8]
 1962 00a0 02E0     		b	.L135
 1963              	.L136:
1007:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1008:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
1009:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1010:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 1964              		.loc 1 1010 0
 1965 00a2 7B68     		ldr	r3, [r7, #4]
 1966 00a4 0022     		movs	r2, #0
 1967 00a6 9A60     		str	r2, [r3, #8]
 1968              	.L135:
1011:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1012:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
1013:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1014:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
ARM GAS  /tmp/ccFfEXtt.s 			page 63


 1969              		.loc 1 1014 0
 1970 00a8 314B     		ldr	r3, .L144
 1971 00aa 5B6F     		ldr	r3, [r3, #116]
 1972 00ac 03F00103 		and	r3, r3, #1
 1973 00b0 002B     		cmp	r3, #0
 1974 00b2 03D0     		beq	.L137
1015:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1016:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1975              		.loc 1 1016 0
 1976 00b4 7B68     		ldr	r3, [r7, #4]
 1977 00b6 0122     		movs	r2, #1
 1978 00b8 5A61     		str	r2, [r3, #20]
 1979 00ba 02E0     		b	.L138
 1980              	.L137:
1017:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1018:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
1019:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1020:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 1981              		.loc 1 1020 0
 1982 00bc 7B68     		ldr	r3, [r7, #4]
 1983 00be 0022     		movs	r2, #0
 1984 00c0 5A61     		str	r2, [r3, #20]
 1985              	.L138:
1021:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1022:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
1023:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1024:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 1986              		.loc 1 1024 0
 1987 00c2 2B4B     		ldr	r3, .L144
 1988 00c4 1B68     		ldr	r3, [r3]
 1989 00c6 03F08073 		and	r3, r3, #16777216
 1990 00ca 002B     		cmp	r3, #0
 1991 00cc 03D0     		beq	.L139
1025:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1026:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 1992              		.loc 1 1026 0
 1993 00ce 7B68     		ldr	r3, [r7, #4]
 1994 00d0 0222     		movs	r2, #2
 1995 00d2 9A61     		str	r2, [r3, #24]
 1996 00d4 02E0     		b	.L140
 1997              	.L139:
1027:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1028:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
1029:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1030:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1998              		.loc 1 1030 0
 1999 00d6 7B68     		ldr	r3, [r7, #4]
 2000 00d8 0122     		movs	r2, #1
 2001 00da 9A61     		str	r2, [r3, #24]
 2002              	.L140:
1031:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1032:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 2003              		.loc 1 1032 0
 2004 00dc 244B     		ldr	r3, .L144
 2005 00de 5B68     		ldr	r3, [r3, #4]
 2006 00e0 03F48002 		and	r2, r3, #4194304
 2007 00e4 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccFfEXtt.s 			page 64


 2008 00e6 DA61     		str	r2, [r3, #28]
1033:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 2009              		.loc 1 1033 0
 2010 00e8 214B     		ldr	r3, .L144
 2011 00ea 5B68     		ldr	r3, [r3, #4]
 2012 00ec 03F03F02 		and	r2, r3, #63
 2013 00f0 7B68     		ldr	r3, [r7, #4]
 2014 00f2 1A62     		str	r2, [r3, #32]
1034:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PL
 2015              		.loc 1 1034 0
 2016 00f4 1E4B     		ldr	r3, .L144
 2017 00f6 5A68     		ldr	r2, [r3, #4]
 2018 00f8 47F6C073 		movw	r3, #32704
 2019 00fc 1340     		ands	r3, r3, r2
 2020 00fe 47F6C072 		movw	r2, #32704
 2021 0102 FA61     		str	r2, [r7, #28]
 2022              	.LBB64:
 2023              	.LBB65:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2024              		.loc 2 531 0
 2025 0104 FA69     		ldr	r2, [r7, #28]
 2026              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2027 0106 92FAA2F2 		rbit r2, r2
 2028              	@ 0 "" 2
 2029              		.thumb
 2030 010a BA61     		str	r2, [r7, #24]
 2031              		.loc 2 544 0
 2032 010c BA69     		ldr	r2, [r7, #24]
 2033              	.LBE65:
 2034              	.LBE64:
 2035              		.loc 1 1034 0
 2036 010e B2FA82F2 		clz	r2, r2
 2037 0112 23FA02F2 		lsr	r2, r3, r2
 2038 0116 7B68     		ldr	r3, [r7, #4]
 2039 0118 5A62     		str	r2, [r3, #36]
1035:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 2040              		.loc 1 1035 0
 2041 011a 154B     		ldr	r3, .L144
 2042 011c 5B68     		ldr	r3, [r3, #4]
 2043 011e 03F44033 		and	r3, r3, #196608
 2044 0122 03F58033 		add	r3, r3, #65536
 2045 0126 5A00     		lsls	r2, r3, #1
 2046 0128 4FF44033 		mov	r3, #196608
 2047 012c 7B61     		str	r3, [r7, #20]
 2048              	.LBB66:
 2049              	.LBB67:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2050              		.loc 2 531 0
 2051 012e 7B69     		ldr	r3, [r7, #20]
 2052              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2053 0130 93FAA3F3 		rbit r3, r3
 2054              	@ 0 "" 2
 2055              		.thumb
 2056 0134 3B61     		str	r3, [r7, #16]
 2057              		.loc 2 544 0
 2058 0136 3B69     		ldr	r3, [r7, #16]
 2059              	.LBE67:
ARM GAS  /tmp/ccFfEXtt.s 			page 65


 2060              	.LBE66:
 2061              		.loc 1 1035 0
 2062 0138 B3FA83F3 		clz	r3, r3
 2063 013c DA40     		lsrs	r2, r2, r3
 2064 013e 7B68     		ldr	r3, [r7, #4]
 2065 0140 9A62     		str	r2, [r3, #40]
1036:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PL
 2066              		.loc 1 1036 0
 2067 0142 0B4B     		ldr	r3, .L144
 2068 0144 5B68     		ldr	r3, [r3, #4]
 2069 0146 03F07062 		and	r2, r3, #251658240
 2070 014a 4FF07063 		mov	r3, #251658240
 2071 014e FB60     		str	r3, [r7, #12]
 2072              	.LBB68:
 2073              	.LBB69:
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2074              		.loc 2 531 0
 2075 0150 FB68     		ldr	r3, [r7, #12]
 2076              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2077 0152 93FAA3F3 		rbit r3, r3
 2078              	@ 0 "" 2
 2079              		.thumb
 2080 0156 BB60     		str	r3, [r7, #8]
 2081              		.loc 2 544 0
 2082 0158 BB68     		ldr	r3, [r7, #8]
 2083              	.LBE69:
 2084              	.LBE68:
 2085              		.loc 1 1036 0
 2086 015a B3FA83F3 		clz	r3, r3
 2087 015e DA40     		lsrs	r2, r2, r3
 2088 0160 7B68     		ldr	r3, [r7, #4]
 2089 0162 DA62     		str	r2, [r3, #44]
1037:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 2090              		.loc 1 1037 0
 2091 0164 2C37     		adds	r7, r7, #44
 2092              	.LCFI50:
 2093              		.cfi_def_cfa_offset 4
 2094 0166 BD46     		mov	sp, r7
 2095              	.LCFI51:
 2096              		.cfi_def_cfa_register 13
 2097              		@ sp needed
 2098 0168 5DF8047B 		ldr	r7, [sp], #4
 2099              	.LCFI52:
 2100              		.cfi_restore 7
 2101              		.cfi_def_cfa_offset 0
 2102 016c 7047     		bx	lr
 2103              	.L145:
 2104 016e 00BF     		.align	2
 2105              	.L144:
 2106 0170 00380240 		.word	1073887232
 2107              		.cfi_endproc
 2108              	.LFE145:
 2110              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2111              		.align	2
 2112              		.global	HAL_RCC_GetClockConfig
 2113              		.thumb
 2114              		.thumb_func
ARM GAS  /tmp/ccFfEXtt.s 			page 66


 2116              	HAL_RCC_GetClockConfig:
 2117              	.LFB146:
1038:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1039:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
1040:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal 
1041:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * RCC configuration registers.
1042:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_ClkInitTypeDef structure that 
1043:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * will be configured.
1044:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  pFLatency: Pointer on the Flash Latency.
1045:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
1046:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1047:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1048:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 2118              		.loc 1 1048 0
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 8
 2121              		@ frame_needed = 1, uses_anonymous_args = 0
 2122              		@ link register save eliminated.
 2123 0000 80B4     		push	{r7}
 2124              	.LCFI53:
 2125              		.cfi_def_cfa_offset 4
 2126              		.cfi_offset 7, -4
 2127 0002 83B0     		sub	sp, sp, #12
 2128              	.LCFI54:
 2129              		.cfi_def_cfa_offset 16
 2130 0004 00AF     		add	r7, sp, #0
 2131              	.LCFI55:
 2132              		.cfi_def_cfa_register 7
 2133 0006 7860     		str	r0, [r7, #4]
 2134 0008 3960     		str	r1, [r7]
1049:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1050:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2135              		.loc 1 1050 0
 2136 000a 7B68     		ldr	r3, [r7, #4]
 2137 000c 0F22     		movs	r2, #15
 2138 000e 1A60     		str	r2, [r3]
1051:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****    
1052:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1053:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2139              		.loc 1 1053 0
 2140 0010 114B     		ldr	r3, .L147
 2141 0012 9B68     		ldr	r3, [r3, #8]
 2142 0014 03F00302 		and	r2, r3, #3
 2143 0018 7B68     		ldr	r3, [r7, #4]
 2144 001a 5A60     		str	r2, [r3, #4]
1054:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
1055:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1056:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 2145              		.loc 1 1056 0
 2146 001c 0E4B     		ldr	r3, .L147
 2147 001e 9B68     		ldr	r3, [r3, #8]
 2148 0020 03F0F002 		and	r2, r3, #240
 2149 0024 7B68     		ldr	r3, [r7, #4]
 2150 0026 9A60     		str	r2, [r3, #8]
1057:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
1058:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1059:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
ARM GAS  /tmp/ccFfEXtt.s 			page 67


 2151              		.loc 1 1059 0
 2152 0028 0B4B     		ldr	r3, .L147
 2153 002a 9B68     		ldr	r3, [r3, #8]
 2154 002c 03F4E052 		and	r2, r3, #7168
 2155 0030 7B68     		ldr	r3, [r7, #4]
 2156 0032 DA60     		str	r2, [r3, #12]
1060:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
1061:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1062:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 2157              		.loc 1 1062 0
 2158 0034 084B     		ldr	r3, .L147
 2159 0036 9B68     		ldr	r3, [r3, #8]
 2160 0038 03F46043 		and	r3, r3, #57344
 2161 003c DA08     		lsrs	r2, r3, #3
 2162 003e 7B68     		ldr	r3, [r7, #4]
 2163 0040 1A61     		str	r2, [r3, #16]
1063:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   
1064:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1065:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 2164              		.loc 1 1065 0
 2165 0042 064B     		ldr	r3, .L147+4
 2166 0044 1B68     		ldr	r3, [r3]
 2167 0046 03F00F02 		and	r2, r3, #15
 2168 004a 3B68     		ldr	r3, [r7]
 2169 004c 1A60     		str	r2, [r3]
1066:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 2170              		.loc 1 1066 0
 2171 004e 0C37     		adds	r7, r7, #12
 2172              	.LCFI56:
 2173              		.cfi_def_cfa_offset 4
 2174 0050 BD46     		mov	sp, r7
 2175              	.LCFI57:
 2176              		.cfi_def_cfa_register 13
 2177              		@ sp needed
 2178 0052 5DF8047B 		ldr	r7, [sp], #4
 2179              	.LCFI58:
 2180              		.cfi_restore 7
 2181              		.cfi_def_cfa_offset 0
 2182 0056 7047     		bx	lr
 2183              	.L148:
 2184              		.align	2
 2185              	.L147:
 2186 0058 00380240 		.word	1073887232
 2187 005c 003C0240 		.word	1073888256
 2188              		.cfi_endproc
 2189              	.LFE146:
 2191              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2192              		.align	2
 2193              		.global	HAL_RCC_NMI_IRQHandler
 2194              		.thumb
 2195              		.thumb_func
 2197              	HAL_RCC_NMI_IRQHandler:
 2198              	.LFB147:
1067:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1068:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
1069:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1070:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
ARM GAS  /tmp/ccFfEXtt.s 			page 68


1071:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
1072:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1073:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1074:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 2199              		.loc 1 1074 0
 2200              		.cfi_startproc
 2201              		@ args = 0, pretend = 0, frame = 0
 2202              		@ frame_needed = 1, uses_anonymous_args = 0
 2203 0000 80B5     		push	{r7, lr}
 2204              	.LCFI59:
 2205              		.cfi_def_cfa_offset 8
 2206              		.cfi_offset 7, -8
 2207              		.cfi_offset 14, -4
 2208 0002 00AF     		add	r7, sp, #0
 2209              	.LCFI60:
 2210              		.cfi_def_cfa_register 7
1075:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1076:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2211              		.loc 1 1076 0
 2212 0004 054B     		ldr	r3, .L151
 2213 0006 DB68     		ldr	r3, [r3, #12]
 2214 0008 03F08003 		and	r3, r3, #128
 2215 000c 002B     		cmp	r3, #0
 2216 000e 04D0     		beq	.L149
1077:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1078:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1079:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2217              		.loc 1 1079 0
 2218 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1080:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1081:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1082:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2219              		.loc 1 1082 0
 2220 0014 024B     		ldr	r3, .L151+4
 2221 0016 8022     		movs	r2, #128
 2222 0018 1A70     		strb	r2, [r3]
 2223              	.L149:
1083:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1084:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 2224              		.loc 1 1084 0
 2225 001a 80BD     		pop	{r7, pc}
 2226              	.L152:
 2227              		.align	2
 2228              	.L151:
 2229 001c 00380240 		.word	1073887232
 2230 0020 0E380240 		.word	1073887246
 2231              		.cfi_endproc
 2232              	.LFE147:
 2234              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2235              		.align	2
 2236              		.weak	HAL_RCC_CSSCallback
 2237              		.thumb
 2238              		.thumb_func
 2240              	HAL_RCC_CSSCallback:
 2241              	.LFB148:
1085:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1086:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
ARM GAS  /tmp/ccFfEXtt.s 			page 69


1087:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1088:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
1089:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1090:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1091:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 2242              		.loc 1 1091 0
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 0
 2245              		@ frame_needed = 1, uses_anonymous_args = 0
 2246              		@ link register save eliminated.
 2247 0000 80B4     		push	{r7}
 2248              	.LCFI61:
 2249              		.cfi_def_cfa_offset 4
 2250              		.cfi_offset 7, -4
 2251 0002 00AF     		add	r7, sp, #0
 2252              	.LCFI62:
 2253              		.cfi_def_cfa_register 7
1092:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1093:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             the HAL_RCC_CSSCallback could be implemented in the user file
1094:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****    */ 
1095:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 2254              		.loc 1 1095 0
 2255 0004 BD46     		mov	sp, r7
 2256              	.LCFI63:
 2257              		.cfi_def_cfa_register 13
 2258              		@ sp needed
 2259 0006 5DF8047B 		ldr	r7, [sp], #4
 2260              	.LCFI64:
 2261              		.cfi_restore 7
 2262              		.cfi_def_cfa_offset 0
 2263 000a 7047     		bx	lr
 2264              		.cfi_endproc
 2265              	.LFE148:
 2267              		.text
 2268              	.Letext0:
 2269              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2270              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2271              		.file 5 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f769xx.h"
 2272              		.file 6 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 2273              		.file 7 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2274              		.file 8 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 2275              		.file 9 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 2276              		.file 10 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 2277              		.file 11 "../../Drivers/CMSIS/Include/core_cm7.h"
 2278              		.file 12 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
ARM GAS  /tmp/ccFfEXtt.s 			page 70


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_rcc.c
     /tmp/ccFfEXtt.s:21     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccFfEXtt.s:26     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccFfEXtt.s:107    .text.HAL_RCC_DeInit:000000000000006c $d
     /tmp/ccFfEXtt.s:117    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccFfEXtt.s:122    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccFfEXtt.s:532    .text.HAL_RCC_OscConfig:000000000000029c $d
     /tmp/ccFfEXtt.s:535    .text.HAL_RCC_OscConfig:00000000000002a0 $t
     /tmp/ccFfEXtt.s:927    .text.HAL_RCC_OscConfig:0000000000000528 $d
     /tmp/ccFfEXtt.s:933    .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccFfEXtt.s:938    .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccFfEXtt.s:1482   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccFfEXtt.s:1245   .text.HAL_RCC_ClockConfig:00000000000001f0 $d
     /tmp/ccFfEXtt.s:1253   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccFfEXtt.s:1258   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccFfEXtt.s:1384   .text.HAL_RCC_MCOConfig:00000000000000b8 $d
     /tmp/ccFfEXtt.s:1391   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccFfEXtt.s:1396   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccFfEXtt.s:1429   .text.HAL_RCC_EnableCSS:0000000000000018 $d
     /tmp/ccFfEXtt.s:1434   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccFfEXtt.s:1439   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccFfEXtt.s:1472   .text.HAL_RCC_DisableCSS:0000000000000018 $d
     /tmp/ccFfEXtt.s:1477   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccFfEXtt.s:1659   .text.HAL_RCC_GetSysClockFreq:00000000000000f0 $d
     /tmp/ccFfEXtt.s:1666   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccFfEXtt.s:1671   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccFfEXtt.s:1702   .text.HAL_RCC_GetHCLKFreq:0000000000000014 $d
     /tmp/ccFfEXtt.s:1707   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccFfEXtt.s:1712   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccFfEXtt.s:1769   .text.HAL_RCC_GetPCLK1Freq:000000000000003c $d
     /tmp/ccFfEXtt.s:1775   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccFfEXtt.s:1780   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccFfEXtt.s:1837   .text.HAL_RCC_GetPCLK2Freq:000000000000003c $d
     /tmp/ccFfEXtt.s:1843   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccFfEXtt.s:1848   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccFfEXtt.s:2106   .text.HAL_RCC_GetOscConfig:0000000000000170 $d
     /tmp/ccFfEXtt.s:2111   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccFfEXtt.s:2116   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccFfEXtt.s:2186   .text.HAL_RCC_GetClockConfig:0000000000000058 $d
     /tmp/ccFfEXtt.s:2192   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccFfEXtt.s:2197   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccFfEXtt.s:2240   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccFfEXtt.s:2229   .text.HAL_RCC_NMI_IRQHandler:000000000000001c $d
     /tmp/ccFfEXtt.s:2235   .text.HAL_RCC_CSSCallback:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_InitTick
AHBPrescTable
HAL_GPIO_Init
APBPrescTable

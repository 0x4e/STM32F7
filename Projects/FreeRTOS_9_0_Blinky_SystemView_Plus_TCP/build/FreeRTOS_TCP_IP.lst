ARM GAS  /tmp/ccyb6dex.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"FreeRTOS_TCP_IP.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.FreeRTOS_max_int32,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	FreeRTOS_max_int32:
  26              	.LFB5:
  27              		.file 1 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
ARM GAS  /tmp/ccyb6dex.s 			page 2


  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #ifndef FREERTOS_IP_H
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FREERTOS_IP_H
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #ifdef __cplusplus
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** extern "C" {
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Application level configuration options. */
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "FreeRTOSIPConfig.h"
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "FreeRTOSIPConfigDefaults.h"
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "IPTraceMacroDefaults.h"
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Some constants defining the sizes of several parts of a packet */
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_HEADER			14u
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_IPv4_HEADER			20u
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_IGMP_HEADER			8u
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ICMP_HEADER			8u
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_UDP_HEADER			8u
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_TCP_HEADER			20u
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* The number of octets in the MAC and IP addresses respectively. */
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipMAC_ADDRESS_LENGTH_BYTES ( 6 )
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipIP_ADDRESS_LENGTH_BYTES ( 4 )
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* IP protocol definitions. */
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_ICMP			( 1 )
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_IGMP         ( 2 )
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_TCP			( 6 )
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_UDP			( 17 )
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
ARM GAS  /tmp/ccyb6dex.s 			page 3


  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Dimensions the buffers that are filled by received Ethernet frames. */
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_CRC_BYTES					( 4UL )
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_OPTIONAL_802_1Q_TAG_BYTES	( 4UL )
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipTOTAL_ETHERNET_FRAME_SIZE				( ( ( uint32_t ) ipconfigNETWORK_MTU ) + ( ( uint32_t ) ipSI
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /*_RB_ Comment may need updating. */
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Space left at the beginning of a network buffer storage area to store a
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** pointer back to the network buffer.  Should be a multiple of 8 to ensure 8 byte
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** alignment is maintained on architectures that require it.
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** In order to get a 32-bit alignment of network packets, an offset of 2 bytes
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** would be desirable, as defined by ipconfigPACKET_FILLER_SIZE.  So the malloc'd
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** buffer will have the following contents:
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint32_t pointer;	// word-aligned
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 filler[6];
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	<< ETH-header >>	// half-word-aligned
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 dest[6];    // start of pucEthernetBuffer
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 dest[6];
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar16_t type;
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	<< IP-header >>		// word-aligned
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t ucVersionHeaderLength;
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	etc
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  */
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigBUFFER_PADDING != 0 )
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ipconfigBUFFER_PADDING
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #else
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ( 8u + ipconfigPACKET_FILLER_SIZE )
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* The structure used to store buffers and pass them around the network stack.
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** Buffers can be in use by the stack, in use by the network interface hardware
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** driver, or free (not in use). */
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef struct xNETWORK_BUFFER
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	ListItem_t xBufferListItem; 	/* Used to reference the buffer form the free buffer list or a socket
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint32_t ulIPAddress;			/* Source or destination IP address, depending on usage scenario. */
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t *pucEthernetBuffer; 	/* Pointer to the start of the Ethernet frame. */
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	size_t xDataLength; 			/* Starts by holding the total Ethernet frame length, then the UDP/TCP payl
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint16_t usPort;				/* Source or destination port, depending on usage scenario. */
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint16_t usBoundPort;			/* The port to which a transmitting socket is bound. */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		struct xNETWORK_BUFFER *pxNextBuffer; /* Possible optimisation for expert users - requires networ
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } NetworkBufferDescriptor_t;
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "pack_struct_start.h"
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** struct xMAC_ADDRESS
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t ucBytes[ ipMAC_ADDRESS_LENGTH_BYTES ];
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** }
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "pack_struct_end.h"
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef struct xMAC_ADDRESS MACAddress_t;
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef enum eNETWORK_EVENTS
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eNetworkUp,		/* The network is configured. */
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eNetworkDown	/* The network connection has been lost. */
ARM GAS  /tmp/ccyb6dex.s 			page 4


 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } eIPCallbackEvent_t;
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef enum ePING_REPLY_STATUS
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eSuccess = 0,		/* A correct reply has been received for an outgoing ping. */
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eInvalidChecksum,	/* A reply was received for an outgoing ping but the checksum of the reply was i
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eInvalidData		/* A reply was received to an outgoing ping but the payload of the reply was not cor
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } ePingReplyStatus_t;
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Endian related definitions. */
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	/* FreeRTOS_htons / FreeRTOS_htonl: some platforms might have built-in versions
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	using a single instruction so allow these versions to be overridden. */
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#ifndef FreeRTOS_htons
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		#define FreeRTOS_htons( usIn ) ( (uint16_t) ( ( ( usIn ) << 8U ) | ( ( usIn ) >> 8U ) ) )
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#ifndef	FreeRTOS_htonl
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		#define FreeRTOS_htonl( ulIn ) 											\
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 			(																	\
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				( uint32_t ) 													\
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				( 																\
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) << 24  ) | 	\
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x0000ff00UL ) <<  8  ) | 	\
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x00ff0000UL ) >>  8  ) | 	\
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) >> 24  )  	\
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				) 																\
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 			)
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #else /* ipconfigBYTE_ORDER */
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#define FreeRTOS_htons( x ) ( ( uint16_t ) ( x ) )
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#define FreeRTOS_htonl( x ) ( ( uint32_t ) ( x ) )
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FreeRTOS_ntohs( x ) FreeRTOS_htons( x )
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FreeRTOS_ntohl( x ) FreeRTOS_htonl( x )
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigHAS_INLINE_FUNCTIONS == 1 )
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b);
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b);
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b);
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b);
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d);
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_down (uint32_t a, uint32_t d);
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_max_BaseType  (BaseType_t  a, BaseType_t  b);
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE UBaseType_t FreeRTOS_max_UBaseTyp (UBaseType_t a, UBaseType_t b);
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  	FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
ARM GAS  /tmp/ccyb6dex.s 			page 5


  28              		.loc 1 202 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7]
  45              		.loc 1 202 0
  46 000a 7A68     		ldr	r2, [r7, #4]
  47 000c 3B68     		ldr	r3, [r7]
  48 000e 9342     		cmp	r3, r2
  49 0010 B8BF     		it	lt
  50 0012 1346     		movlt	r3, r2
  51 0014 1846     		mov	r0, r3
  52 0016 0C37     		adds	r7, r7, #12
  53              	.LCFI3:
  54              		.cfi_def_cfa_offset 4
  55 0018 BD46     		mov	sp, r7
  56              	.LCFI4:
  57              		.cfi_def_cfa_register 13
  58              		@ sp needed
  59 001a 5DF8047B 		ldr	r7, [sp], #4
  60              	.LCFI5:
  61              		.cfi_restore 7
  62              		.cfi_def_cfa_offset 0
  63 001e 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE5:
  67              		.section	.text.FreeRTOS_min_int32,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  72              	FreeRTOS_min_int32:
  73              	.LFB7:
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
  74              		.loc 1 204 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 0000 80B4     		push	{r7}
  80              	.LCFI6:
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 7, -4
  83 0002 83B0     		sub	sp, sp, #12
  84              	.LCFI7:
ARM GAS  /tmp/ccyb6dex.s 			page 6


  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
  87              	.LCFI8:
  88              		.cfi_def_cfa_register 7
  89 0006 7860     		str	r0, [r7, #4]
  90 0008 3960     		str	r1, [r7]
  91              		.loc 1 204 0
  92 000a 7A68     		ldr	r2, [r7, #4]
  93 000c 3B68     		ldr	r3, [r7]
  94 000e 9342     		cmp	r3, r2
  95 0010 A8BF     		it	ge
  96 0012 1346     		movge	r3, r2
  97 0014 1846     		mov	r0, r3
  98 0016 0C37     		adds	r7, r7, #12
  99              	.LCFI9:
 100              		.cfi_def_cfa_offset 4
 101 0018 BD46     		mov	sp, r7
 102              	.LCFI10:
 103              		.cfi_def_cfa_register 13
 104              		@ sp needed
 105 001a 5DF8047B 		ldr	r7, [sp], #4
 106              	.LCFI11:
 107              		.cfi_restore 7
 108              		.cfi_def_cfa_offset 0
 109 001e 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE7:
 113              		.section	.text.FreeRTOS_min_uint32,"ax",%progbits
 114              		.align	2
 115              		.thumb
 116              		.thumb_func
 118              	FreeRTOS_min_uint32:
 119              	.LFB8:
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 120              		.loc 1 205 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 8
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0000 80B4     		push	{r7}
 126              	.LCFI12:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 0002 83B0     		sub	sp, sp, #12
 130              	.LCFI13:
 131              		.cfi_def_cfa_offset 16
 132 0004 00AF     		add	r7, sp, #0
 133              	.LCFI14:
 134              		.cfi_def_cfa_register 7
 135 0006 7860     		str	r0, [r7, #4]
 136 0008 3960     		str	r1, [r7]
 137              		.loc 1 205 0
 138 000a 7A68     		ldr	r2, [r7, #4]
 139 000c 3B68     		ldr	r3, [r7]
 140 000e 9342     		cmp	r3, r2
 141 0010 28BF     		it	cs
 142 0012 1346     		movcs	r3, r2
ARM GAS  /tmp/ccyb6dex.s 			page 7


 143 0014 1846     		mov	r0, r3
 144 0016 0C37     		adds	r7, r7, #12
 145              	.LCFI15:
 146              		.cfi_def_cfa_offset 4
 147 0018 BD46     		mov	sp, r7
 148              	.LCFI16:
 149              		.cfi_def_cfa_register 13
 150              		@ sp needed
 151 001a 5DF8047B 		ldr	r7, [sp], #4
 152              	.LCFI17:
 153              		.cfi_restore 7
 154              		.cfi_def_cfa_offset 0
 155 001e 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE8:
 159              		.section	.text.uxStreamBufferSpace,"ax",%progbits
 160              		.align	2
 161              		.thumb
 162              		.thumb_func
 164              	uxStreamBufferSpace:
 165              	.LFB16:
 166              		.file 2 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
ARM GAS  /tmp/ccyb6dex.s 			page 8


  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *	FreeRTOS_Stream_Buffer.h
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *	A cicular character buffer
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *	An implementation of a circular buffer without a length field
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *	If LENGTH defines the size of the buffer, a maximum of (LENGT-1) bytes can be stored
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  *	In order to add or read data from the buffer, memcpy() will be called at most 2 times
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h ****  */
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** #ifndef FREERTOS_STREAM_BUFFER_H
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** #define	FREERTOS_STREAM_BUFFER_H
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** #ifdef __cplusplus
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** extern "C" {
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** #endif
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** typedef struct xSTREAM_BUFFER {
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxTail;		/* next item to read */
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxMid;		/* iterator within the valid items */
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxHead;		/* next position store a new item */
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxFront;	/* iterator within the free space */
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	size_t LENGTH;				/* const value: number of reserved elements */
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	uint8_t ucArray[ sizeof( size_t ) ];
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** } StreamBuffer_t;
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferClear( StreamBuffer_t *pxBuffer );
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferClear( StreamBuffer_t *pxBuffer )
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** {
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	/* Make the circular buffer empty */
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxHead = 0u;
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxTail = 0u;
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxFront = 0u;
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxMid = 0u;
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** }
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccyb6dex.s 			page 9


  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower,
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower,
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** {
 167              		.loc 2 96 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 24
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 80B4     		push	{r7}
 173              	.LCFI18:
 174              		.cfi_def_cfa_offset 4
 175              		.cfi_offset 7, -4
 176 0002 87B0     		sub	sp, sp, #28
 177              	.LCFI19:
 178              		.cfi_def_cfa_offset 32
 179 0004 00AF     		add	r7, sp, #0
 180              	.LCFI20:
 181              		.cfi_def_cfa_register 7
 182 0006 F860     		str	r0, [r7, #12]
 183 0008 B960     		str	r1, [r7, #8]
 184 000a 7A60     		str	r2, [r7, #4]
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxCount;
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 185              		.loc 2 100 0
 186 000c FB68     		ldr	r3, [r7, #12]
 187 000e 1A69     		ldr	r2, [r3, #16]
 188 0010 7B68     		ldr	r3, [r7, #4]
 189 0012 1A44     		add	r2, r2, r3
 190 0014 BB68     		ldr	r3, [r7, #8]
 191 0016 D31A     		subs	r3, r2, r3
 192 0018 013B     		subs	r3, r3, #1
 193 001a 7B61     		str	r3, [r7, #20]
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
 194              		.loc 2 101 0
 195 001c FB68     		ldr	r3, [r7, #12]
 196 001e 1A69     		ldr	r2, [r3, #16]
 197 0020 7B69     		ldr	r3, [r7, #20]
 198 0022 9A42     		cmp	r2, r3
 199 0024 04D8     		bhi	.L8
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	{
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 		uxCount -= pxBuffer->LENGTH;
 200              		.loc 2 103 0
 201 0026 FB68     		ldr	r3, [r7, #12]
 202 0028 1B69     		ldr	r3, [r3, #16]
 203 002a 7A69     		ldr	r2, [r7, #20]
 204 002c D31A     		subs	r3, r2, r3
 205 002e 7B61     		str	r3, [r7, #20]
 206              	.L8:
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	}
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	return uxCount;
 207              		.loc 2 106 0
 208 0030 7B69     		ldr	r3, [r7, #20]
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** }
ARM GAS  /tmp/ccyb6dex.s 			page 10


 209              		.loc 2 107 0
 210 0032 1846     		mov	r0, r3
 211 0034 1C37     		adds	r7, r7, #28
 212              	.LCFI21:
 213              		.cfi_def_cfa_offset 4
 214 0036 BD46     		mov	sp, r7
 215              	.LCFI22:
 216              		.cfi_def_cfa_register 13
 217              		@ sp needed
 218 0038 5DF8047B 		ldr	r7, [sp], #4
 219              	.LCFI23:
 220              		.cfi_restore 7
 221              		.cfi_def_cfa_offset 0
 222 003c 7047     		bx	lr
 223              		.cfi_endproc
 224              	.LFE16:
 226 003e 00BF     		.section	.text.uxStreamBufferDistance,"ax",%progbits
 227              		.align	2
 228              		.thumb
 229              		.thumb_func
 231              	uxStreamBufferDistance:
 232              	.LFB17:
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLow
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLow
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** {
 233              		.loc 2 112 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 24
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238 0000 80B4     		push	{r7}
 239              	.LCFI24:
 240              		.cfi_def_cfa_offset 4
 241              		.cfi_offset 7, -4
 242 0002 87B0     		sub	sp, sp, #28
 243              	.LCFI25:
 244              		.cfi_def_cfa_offset 32
 245 0004 00AF     		add	r7, sp, #0
 246              	.LCFI26:
 247              		.cfi_def_cfa_register 7
 248 0006 F860     		str	r0, [r7, #12]
 249 0008 B960     		str	r1, [r7, #8]
 250 000a 7A60     		str	r2, [r7, #4]
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /* Returns the distance between uxLower and uxUpper */
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxCount;
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 251              		.loc 2 116 0
 252 000c FB68     		ldr	r3, [r7, #12]
 253 000e 1A69     		ldr	r2, [r3, #16]
 254 0010 7B68     		ldr	r3, [r7, #4]
 255 0012 1A44     		add	r2, r2, r3
 256 0014 BB68     		ldr	r3, [r7, #8]
 257 0016 D31A     		subs	r3, r2, r3
 258 0018 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccyb6dex.s 			page 11


 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 259              		.loc 2 117 0
 260 001a FB68     		ldr	r3, [r7, #12]
 261 001c 1A69     		ldr	r2, [r3, #16]
 262 001e 7B69     		ldr	r3, [r7, #20]
 263 0020 9A42     		cmp	r2, r3
 264 0022 04D8     		bhi	.L11
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	{
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 		uxCount -= pxBuffer->LENGTH;
 265              		.loc 2 119 0
 266 0024 FB68     		ldr	r3, [r7, #12]
 267 0026 1B69     		ldr	r3, [r3, #16]
 268 0028 7A69     		ldr	r2, [r7, #20]
 269 002a D31A     		subs	r3, r2, r3
 270 002c 7B61     		str	r3, [r7, #20]
 271              	.L11:
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	}
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	return uxCount;
 272              		.loc 2 122 0
 273 002e 7B69     		ldr	r3, [r7, #20]
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** }
 274              		.loc 2 123 0
 275 0030 1846     		mov	r0, r3
 276 0032 1C37     		adds	r7, r7, #28
 277              	.LCFI27:
 278              		.cfi_def_cfa_offset 4
 279 0034 BD46     		mov	sp, r7
 280              	.LCFI28:
 281              		.cfi_def_cfa_register 13
 282              		@ sp needed
 283 0036 5DF8047B 		ldr	r7, [sp], #4
 284              	.LCFI29:
 285              		.cfi_restore 7
 286              		.cfi_def_cfa_offset 0
 287 003a 7047     		bx	lr
 288              		.cfi_endproc
 289              	.LFE17:
 291              		.section	.text.uxStreamBufferGetSpace,"ax",%progbits
 292              		.align	2
 293              		.thumb
 294              		.thumb_func
 296              	uxStreamBufferGetSpace:
 297              	.LFB18:
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** {
 298              		.loc 2 128 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 16
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302 0000 80B5     		push	{r7, lr}
 303              	.LCFI30:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 7, -8
ARM GAS  /tmp/ccyb6dex.s 			page 12


 306              		.cfi_offset 14, -4
 307 0002 84B0     		sub	sp, sp, #16
 308              	.LCFI31:
 309              		.cfi_def_cfa_offset 24
 310 0004 00AF     		add	r7, sp, #0
 311              	.LCFI32:
 312              		.cfi_def_cfa_register 7
 313 0006 7860     		str	r0, [r7, #4]
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /* Returns the number of items which can still be added to uxHead
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** before hitting on uxTail */
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
 314              		.loc 2 131 0
 315 0008 7B68     		ldr	r3, [r7, #4]
 316 000a 9B68     		ldr	r3, [r3, #8]
 317 000c FB60     		str	r3, [r7, #12]
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 318              		.loc 2 132 0
 319 000e 7B68     		ldr	r3, [r7, #4]
 320 0010 1B68     		ldr	r3, [r3]
 321 0012 BB60     		str	r3, [r7, #8]
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 322              		.loc 2 134 0
 323 0014 7868     		ldr	r0, [r7, #4]
 324 0016 F968     		ldr	r1, [r7, #12]
 325 0018 BA68     		ldr	r2, [r7, #8]
 326 001a FFF7FEFF 		bl	uxStreamBufferSpace
 327 001e 0346     		mov	r3, r0
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** }
 328              		.loc 2 135 0
 329 0020 1846     		mov	r0, r3
 330 0022 1037     		adds	r7, r7, #16
 331              	.LCFI33:
 332              		.cfi_def_cfa_offset 8
 333 0024 BD46     		mov	sp, r7
 334              	.LCFI34:
 335              		.cfi_def_cfa_register 13
 336              		@ sp needed
 337 0026 80BD     		pop	{r7, pc}
 338              		.cfi_endproc
 339              	.LFE18:
 341              		.section	.text.uxStreamBufferFrontSpace,"ax",%progbits
 342              		.align	2
 343              		.thumb
 344              		.thumb_func
 346              	uxStreamBufferFrontSpace:
 347              	.LFB19:
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** {
 348              		.loc 2 140 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 16
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccyb6dex.s 			page 13


 353              	.LCFI35:
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 7, -8
 356              		.cfi_offset 14, -4
 357 0002 84B0     		sub	sp, sp, #16
 358              	.LCFI36:
 359              		.cfi_def_cfa_offset 24
 360 0004 00AF     		add	r7, sp, #0
 361              	.LCFI37:
 362              		.cfi_def_cfa_register 7
 363 0006 7860     		str	r0, [r7, #4]
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /* Distance between uxFront and uxTail
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** or the number of items which can still be added to uxFront,
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** before hitting on uxTail */
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxFront = pxBuffer->uxFront;
 364              		.loc 2 145 0
 365 0008 7B68     		ldr	r3, [r7, #4]
 366 000a DB68     		ldr	r3, [r3, #12]
 367 000c FB60     		str	r3, [r7, #12]
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 368              		.loc 2 146 0
 369 000e 7B68     		ldr	r3, [r7, #4]
 370 0010 1B68     		ldr	r3, [r3]
 371 0012 BB60     		str	r3, [r7, #8]
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 372              		.loc 2 148 0
 373 0014 7868     		ldr	r0, [r7, #4]
 374 0016 F968     		ldr	r1, [r7, #12]
 375 0018 BA68     		ldr	r2, [r7, #8]
 376 001a FFF7FEFF 		bl	uxStreamBufferSpace
 377 001e 0346     		mov	r3, r0
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** }
 378              		.loc 2 149 0
 379 0020 1846     		mov	r0, r3
 380 0022 1037     		adds	r7, r7, #16
 381              	.LCFI38:
 382              		.cfi_def_cfa_offset 8
 383 0024 BD46     		mov	sp, r7
 384              	.LCFI39:
 385              		.cfi_def_cfa_register 13
 386              		@ sp needed
 387 0026 80BD     		pop	{r7, pc}
 388              		.cfi_endproc
 389              	.LFE19:
 391              		.section	.text.uxStreamBufferMidSpace,"ax",%progbits
 392              		.align	2
 393              		.thumb
 394              		.thumb_func
 396              	uxStreamBufferMidSpace:
 397              	.LFB21:
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** {
ARM GAS  /tmp/ccyb6dex.s 			page 14


 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /* Returns the number of items which can be read from uxTail
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** before reaching uxHead */
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** }
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferMidSpace( const StreamBuffer_t *pxBuffer );
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferMidSpace( const StreamBuffer_t *pxBuffer )
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** {
 398              		.loc 2 166 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 16
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402 0000 80B5     		push	{r7, lr}
 403              	.LCFI40:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 7, -8
 406              		.cfi_offset 14, -4
 407 0002 84B0     		sub	sp, sp, #16
 408              	.LCFI41:
 409              		.cfi_def_cfa_offset 24
 410 0004 00AF     		add	r7, sp, #0
 411              	.LCFI42:
 412              		.cfi_def_cfa_register 7
 413 0006 7860     		str	r0, [r7, #4]
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /* Returns the distance between uxHead and uxMid */
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
 414              		.loc 2 168 0
 415 0008 7B68     		ldr	r3, [r7, #4]
 416 000a 9B68     		ldr	r3, [r3, #8]
 417 000c FB60     		str	r3, [r7, #12]
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxMid = pxBuffer->uxMid;
 418              		.loc 2 169 0
 419 000e 7B68     		ldr	r3, [r7, #4]
 420 0010 5B68     		ldr	r3, [r3, #4]
 421 0012 BB60     		str	r3, [r7, #8]
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 422              		.loc 2 171 0
 423 0014 7868     		ldr	r0, [r7, #4]
 424 0016 B968     		ldr	r1, [r7, #8]
 425 0018 FA68     		ldr	r2, [r7, #12]
 426 001a FFF7FEFF 		bl	uxStreamBufferDistance
 427 001e 0346     		mov	r3, r0
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** }
 428              		.loc 2 172 0
 429 0020 1846     		mov	r0, r3
 430 0022 1037     		adds	r7, r7, #16
 431              	.LCFI43:
 432              		.cfi_def_cfa_offset 8
 433 0024 BD46     		mov	sp, r7
 434              	.LCFI44:
 435              		.cfi_def_cfa_register 13
 436              		@ sp needed
ARM GAS  /tmp/ccyb6dex.s 			page 15


 437 0026 80BD     		pop	{r7, pc}
 438              		.cfi_endproc
 439              	.LFE21:
 441              		.section	.text.vStreamBufferMoveMid,"ax",%progbits
 442              		.align	2
 443              		.thumb
 444              		.thumb_func
 446              	vStreamBufferMoveMid:
 447              	.LFB22:
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferMoveMid( StreamBuffer_t *pxBuffer, size_t uxCount );
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferMoveMid( StreamBuffer_t *pxBuffer, size_t uxCount )
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** {
 448              		.loc 2 177 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 16
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452 0000 80B5     		push	{r7, lr}
 453              	.LCFI45:
 454              		.cfi_def_cfa_offset 8
 455              		.cfi_offset 7, -8
 456              		.cfi_offset 14, -4
 457 0002 84B0     		sub	sp, sp, #16
 458              	.LCFI46:
 459              		.cfi_def_cfa_offset 24
 460 0004 00AF     		add	r7, sp, #0
 461              	.LCFI47:
 462              		.cfi_def_cfa_register 7
 463 0006 7860     		str	r0, [r7, #4]
 464 0008 3960     		str	r1, [r7]
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** /* Increment uxMid, but no further than uxHead */
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 465              		.loc 2 179 0
 466 000a 7868     		ldr	r0, [r7, #4]
 467 000c FFF7FEFF 		bl	uxStreamBufferMidSpace
 468 0010 F860     		str	r0, [r7, #12]
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	if( uxCount > uxSize )
 469              		.loc 2 181 0
 470 0012 3A68     		ldr	r2, [r7]
 471 0014 FB68     		ldr	r3, [r7, #12]
 472 0016 9A42     		cmp	r2, r3
 473 0018 01D9     		bls	.L20
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	{
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 		uxCount = uxSize;
 474              		.loc 2 183 0
 475 001a FB68     		ldr	r3, [r7, #12]
 476 001c 3B60     		str	r3, [r7]
 477              	.L20:
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	}
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxMid += uxCount;
 478              		.loc 2 185 0
 479 001e 7B68     		ldr	r3, [r7, #4]
 480 0020 5A68     		ldr	r2, [r3, #4]
 481 0022 3B68     		ldr	r3, [r7]
 482 0024 1A44     		add	r2, r2, r3
ARM GAS  /tmp/ccyb6dex.s 			page 16


 483 0026 7B68     		ldr	r3, [r7, #4]
 484 0028 5A60     		str	r2, [r3, #4]
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 485              		.loc 2 186 0
 486 002a 7B68     		ldr	r3, [r7, #4]
 487 002c 5A68     		ldr	r2, [r3, #4]
 488 002e 7B68     		ldr	r3, [r7, #4]
 489 0030 1B69     		ldr	r3, [r3, #16]
 490 0032 9A42     		cmp	r2, r3
 491 0034 06D3     		bcc	.L19
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	{
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 		pxBuffer->uxMid -= pxBuffer->LENGTH;
 492              		.loc 2 188 0
 493 0036 7B68     		ldr	r3, [r7, #4]
 494 0038 5A68     		ldr	r2, [r3, #4]
 495 003a 7B68     		ldr	r3, [r7, #4]
 496 003c 1B69     		ldr	r3, [r3, #16]
 497 003e D21A     		subs	r2, r2, r3
 498 0040 7B68     		ldr	r3, [r7, #4]
 499 0042 5A60     		str	r2, [r3, #4]
 500              	.L19:
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** 	}
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h **** }
 501              		.loc 2 190 0
 502 0044 1037     		adds	r7, r7, #16
 503              	.LCFI48:
 504              		.cfi_def_cfa_offset 8
 505 0046 BD46     		mov	sp, r7
 506              	.LCFI49:
 507              		.cfi_def_cfa_register 13
 508              		@ sp needed
 509 0048 80BD     		pop	{r7, pc}
 510              		.cfi_endproc
 511              	.LFE22:
 513 004a 00BF     		.section	.text.ulChar2u32,"ax",%progbits
 514              		.align	2
 515              		.thumb
 516              		.thumb_func
 518              	ulChar2u32:
 519              	.LFB27:
 520              		.file 3 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
ARM GAS  /tmp/ccyb6dex.s 			page 17


  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #ifndef FREERTOS_IP_PRIVATE_H
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define FREERTOS_IP_PRIVATE_H
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #ifdef __cplusplus
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern "C" {
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Application level configuration options. */
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "FreeRTOSIPConfig.h"
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "FreeRTOSIPConfigDefaults.h"
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "FreeRTOS_Sockets.h"
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "IPTraceMacroDefaults.h"
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "FreeRTOS_Stream_Buffer.h"
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#include "FreeRTOS_TCP_WIN.h"
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#include "FreeRTOS_TCP_IP.h"
ARM GAS  /tmp/ccyb6dex.s 			page 18


  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "event_groups.h"
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xNetworkAddressingParameters
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulDefaultIPAddress;
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulNetMask;
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulGatewayAddress;
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulDNSServerAddress;
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulBroadcastAddress;
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } NetworkAddressingParameters_t;
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern BaseType_t xTCPWindowLoggingLevel;
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Protocol headers.                                         */
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xETH_HEADER
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	MACAddress_t xDestinationAddress; /*  0 + 6 = 6  */
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	MACAddress_t xSourceAddress;      /*  6 + 6 = 12 */
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usFrameType;              /* 12 + 2 = 14 */
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xETH_HEADER EthernetHeader_t;
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xARP_HEADER
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usHardwareType;				/*  0 +  2 =  2 */
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usProtocolType;				/*  2 +  2 =  4 */
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucHardwareAddressLength;		/*  4 +  1 =  5 */
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucProtocolAddressLength;		/*  5 +  1 =  6 */
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usOperation;					/*  6 +  2 =  8 */
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	MACAddress_t xSenderHardwareAddress;	/*  8 +  6 = 14 */
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulSenderProtocolAddress;		/* 14 +  4 = 18  */
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	MACAddress_t xTargetHardwareAddress;	/* 18 +  6 = 24  */
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulTargetProtocolAddress;		/* 24 +  4 = 28  */
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xARP_HEADER ARPHeader_t;
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xIP_HEADER
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucVersionHeaderLength;        /*  0 + 1 =  1 */
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucDifferentiatedServicesCode; /*  1 + 1 =  2 */
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usLength;                    /*  2 + 2 =  4 */
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usIdentification;            /*  4 + 2 =  6 */
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usFragmentOffset;            /*  6 + 2 =  8 */
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucTimeToLive;                 /*  8 + 1 =  9 */
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol;                   /*  9 + 1 = 10 */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usHeaderChecksum;            /* 10 + 2 = 12 */
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulSourceIPAddress;           /* 12 + 4 = 16 */
ARM GAS  /tmp/ccyb6dex.s 			page 19


 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulDestinationIPAddress;      /* 16 + 4 = 20 */
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xIP_HEADER IPHeader_t;
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xIGMP_HEADER
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucVersionType;     /* 0 + 1 = 1 */
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucMaxResponseTime; /* 1 + 1 = 2 */
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;       /* 2 + 2 = 4 */
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t usGroupAddress;   /* 4 + 4 = 8 */
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xIGMP_HEADER IGMPHeader_t;
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xICMP_HEADER
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucTypeOfMessage;   /* 0 + 1 = 1 */
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucTypeOfService;   /* 1 + 1 = 2 */
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;       /* 2 + 2 = 4 */
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usIdentifier;     /* 4 + 2 = 6 */
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usSequenceNumber; /* 6 + 2 = 8 */
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xICMP_HEADER ICMPHeader_t;
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xUDP_HEADER
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usSourcePort;      /* 0 + 2 = 2 */
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usDestinationPort; /* 2 + 2 = 4 */
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usLength;          /* 4 + 2 = 6 */
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;        /* 6 + 2 = 8 */
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xUDP_HEADER UDPHeader_t;
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xTCP_HEADER
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usSourcePort;		/* +  2 =  2 */
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usDestinationPort;	/* +  2 =  4 */
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulSequenceNumber;	/* +  4 =  8 */
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulAckNr;   	 	/* +  4 = 12 */
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t  ucTCPOffset;		/* +  1 = 13 */
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t  ucTCPFlags;		/* +  1 = 14 */
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usWindow;			/* +  2 = 15 */
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;		/* +  2 = 18 */
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usUrgent;			/* +  2 = 20 */
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if ipconfigUSE_TCP == 1
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* the option data is not a part of the TCP header */
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t  ucOptdata[ipSIZE_TCP_OPTIONS];		/* + 12 = 32 */
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
ARM GAS  /tmp/ccyb6dex.s 			page 20


 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xTCP_HEADER TCPHeader_t;
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xPSEUDO_HEADER
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulSourceAddress;
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulDestinationAddress;
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucZeros;
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol;
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usUDPLength;
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xPSEUDO_HEADER PseudoHeader_t;
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Nested protocol packets.                                  */
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xARP_PACKET
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;	/*  0 + 14 = 14 */
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ARPHeader_t xARPHeader;			/* 14 + 28 = 42 */
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xARP_PACKET ARPPacket_t;
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xIP_PACKET
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xIP_PACKET IPPacket_t;
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xICMP_PACKET
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ICMPHeader_t xICMPHeader;
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xICMP_PACKET ICMPPacket_t;
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xUDP_PACKET
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader; /*  0 + 14 = 14 */
 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;             /* 14 + 20 = 34 */
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	UDPHeader_t xUDPHeader;           /* 34 +  8 = 42 */
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xUDP_PACKET UDPPacket_t;
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
ARM GAS  /tmp/ccyb6dex.s 			page 21


 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xTCP_PACKET
 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader; /*  0 + 14 = 14 */
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;             /* 14 + 20 = 34 */
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TCPHeader_t xTCPHeader;           /* 34 + 32 = 66 */
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xTCP_PACKET TCPPacket_t;
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef union XPROT_PACKET
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ARPPacket_t xARPPacket;
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TCPPacket_t xTCPPacket;
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	UDPPacket_t xUDPPacket;
 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ICMPPacket_t xICMPPacket;
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } ProtocolPacket_t;
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The maximum UDP payload length. */
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipMAX_UDP_PAYLOAD_LENGTH ( ( ipconfigNETWORK_MTU - ipSIZE_OF_IPv4_HEADER ) - ipSIZE_OF_UDP_
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef enum
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eReleaseBuffer = 0,		/* Processing the frame did not find anything to do - just release the buffer
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eProcessBuffer,			/* An Ethernet frame has a valid address - continue process its contents. */
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eReturnEthernetFrame,	/* The Ethernet frame contains an ARP or ICMP packet that can be returned to
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eFrameConsumed			/* Processing the Ethernet packet contents resulted in the payload being sent to 
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } eFrameProcessingResult_t;
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef enum
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eNoEvent = -1,
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eNetworkDownEvent,		/* 0: The network interface has been lost and/or needs [re]connecting. */
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eNetworkRxEvent,		/* 1: The network interface has queued a received Ethernet frame. */
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eARPTimerEvent,			/* 2: The ARP timer expired. */
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eStackTxEvent,			/* 3: The software stack has queued a packet to transmit. */
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eDHCPEvent,				/* 4: Process the DHCP state machine. */
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eTCPTimerEvent,			/* 5: See if any TCP socket needs attention. */
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eTCPAcceptEvent,		/* 6: Client API FreeRTOS_accept() waiting for client connections. */
 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eTCPNetStat,			/* 7: IP-task is asked to produce a netstat listing. */
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSocketBindEvent,		/* 8: Send a message to the IP-task to bind a socket to a port. */
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSocketCloseEvent,		/* 9: Send a message to the IP-task to close a socket. */
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSocketSelectEvent,		/*10: Send a message to the IP-task for select(). */
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSocketSignalEvent,		/*11: A socket must be signalled. */
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } eIPEvent_t;
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct IP_TASK_COMMANDS
 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eIPEvent_t eEventType;
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	void *pvData;
 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } IPStackEvent_t;
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipBROADCAST_IP_ADDRESS 0xffffffffUL
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Offset into the Ethernet frame that is used to temporarily store information
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** on the fragmentation status of the packet being sent.  The value is important,
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** as it is past the location into which the destination address will get placed. */
ARM GAS  /tmp/ccyb6dex.s 			page 22


 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipFRAGMENTATION_PARAMETERS_OFFSET		( 6 )
 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipSOCKET_OPTIONS_OFFSET					( 6 )
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Only used when outgoing fragmentation is being used (FreeRTOSIPConfig.h
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** setting. */
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipGET_UDP_PAYLOAD_OFFSET_FOR_FRAGMENT( usFragmentOffset ) ( ( ( usFragmentOffset ) == 0 ) ?
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The offset into a UDP packet at which the UDP data (payload) starts. */
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipUDP_PAYLOAD_OFFSET_IPv4	( sizeof( UDPPacket_t ) )
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The offset into an IP packet into which the IP data (payload) starts. */
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipIP_PAYLOAD_OFFSET		( sizeof( IPPacket_t ) )
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xUDP_IP_FRAGMENT_PARAMETERS
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucSocketOptions;
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucPadFor16BitAlignment;
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usFragmentedPacketOffset;
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usFragmentLength;
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usPayloadChecksum;
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xUDP_IP_FRAGMENT_PARAMETERS IPFragmentParameters_t;
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* Ethernet frame types. */
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_FRAME_TYPE	( 0x0608U )
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipIPv4_FRAME_TYPE	( 0x0008U )
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* ARP related definitions. */
 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_PROTOCOL_TYPE				( 0x0008U )
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_HARDWARE_TYPE_ETHERNET	( 0x0100U )
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_REQUEST					( 0x0100U )
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_REPLY						( 0x0200U )
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #else
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* Ethernet frame types. */
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_FRAME_TYPE	( 0x0806U )
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipIPv4_FRAME_TYPE	( 0x0800U )
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* ARP related definitions. */
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_PROTOCOL_TYPE ( 0x0800U )
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_HARDWARE_TYPE_ETHERNET ( 0x0001U )
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_REQUEST ( 0x0001 )
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_REPLY ( 0x0002 )
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* For convenience, a MAC address of all zeros and another of all 0xffs are
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** defined const for quick reference. */
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern const MACAddress_t xBroadcastMACAddress; /* all 0xff's */
 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern uint16_t usPacketIdentifier;
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
ARM GAS  /tmp/ccyb6dex.s 			page 23


 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Define a default UDP packet header (declared in FreeRTOS_UDP_IP.c) */
 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef union xUDPPacketHeader
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucBytes[24];
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulWords[6];
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } UDPPacketHeader_t;
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern UDPPacketHeader_t xDefaultPartUDPPacketHeader;
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Structure that stores the netmask, gateway address and DNS server addresses. */
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern NetworkAddressingParameters_t xNetworkAddressing;
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Structure that stores the defaults for netmask, gateway address and DNS.
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** These values will be copied to 'xNetworkAddressing' in case DHCP is not used,
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** and also in case DHCP does not lead to a confirmed request. */
 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern NetworkAddressingParameters_t xDefaultAddressing;
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* True when BufferAllocation_1.c was included, false for BufferAllocation_2.c */
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern const BaseType_t xBufferAllocFixedSize;
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Defined in FreeRTOS_Sockets.c */
 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if ( ipconfigUSE_TCP == 1 )
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	extern List_t xBoundTCPSocketsList;
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The local IP address is accessed from within xDefaultPartUDPPacketHeader,
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** rather than duplicated in its own variable. */
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipLOCAL_IP_ADDRESS_POINTER ( ( uint32_t * ) &( xDefaultPartUDPPacketHeader.ulWords[ 20u / s
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The local MAC address is accessed from within xDefaultPartUDPPacketHeader,
 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** rather than duplicated in its own variable. */
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipLOCAL_MAC_ADDRESS ( &xDefaultPartUDPPacketHeader.ucBytes[0] )
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* ICMP packets are sent using the same function as UDP packets.  The port
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** number is used to distinguish between the two, as 0 is an invalid UDP port. */
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipPACKET_CONTAINS_ICMP_DATA					( 0 )
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* For now, the lower 8 bits in 'xEventBits' will be reserved for the above
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** socket events. */
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define SOCKET_EVENT_BIT_COUNT   8
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define vSetField16( pxBase, xType, xField, usValue ) \
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** { \
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( ( uint8_t* )( pxBase ) ) [ offsetof( xType, xField ) + 0 ] = ( uint8_t ) ( ( usValue ) >> 8 ); \
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( ( uint8_t* )( pxBase ) ) [ offsetof( xType, xField ) + 1 ] = ( uint8_t ) ( ( usValue ) & 0xff );
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define vSetField32( pxBase, xType, xField, ulValue ) \
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** { \
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 0 ] = ( uint8_t )   ( ( ulValue ) >> 24 ); 
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 1 ] = ( uint8_t ) ( ( ( ulValue ) >> 16 ) &
 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 2 ] = ( uint8_t ) ( ( ( ulValue ) >> 8 ) & 
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 3 ] = ( uint8_t )   ( ( ulValue ) & 0xff );
 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define vFlip_16( left, right ) \
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	do { \
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t tmp = (left); \
ARM GAS  /tmp/ccyb6dex.s 			page 24


 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		(left) = (right); \
 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		(right) = tmp; \
 418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} while (0)
 419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define vFlip_32( left, right ) \
 421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	do { \
 422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t tmp = (left); \
 423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		(left) = (right); \
 424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		(right) = tmp; \
 425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} while (0)
 426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #ifndef ARRAY_SIZE
 428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ARRAY_SIZE(x)	(BaseType_t)(sizeof(x)/sizeof(x)[0])
 429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
 430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * A version of FreeRTOS_GetReleaseNetworkBuffer() that can be called from an
 433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * interrupt.  If a non zero value is returned, then the calling ISR should
 434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * perform a context switch before exiting the ISR.
 435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t FreeRTOS_ReleaseFreeNetworkBufferFromISR( void );
 437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Create a message that contains a command to initialise the network interface.
 440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * This is used during initialisation, and at any time the network interface
 441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * goes down thereafter.  The network interface hardware driver is responsible
 442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * for sending the message that contains the network interface down command/
 443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * event.
 444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
 445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Only use the FreeRTOS_NetworkDownFromISR() version if the function is to be
 446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * called from an interrupt service routine.  If FreeRTOS_NetworkDownFromISR()
 447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * returns a non-zero value then a context switch should be performed ebfore
 448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * the interrupt is exited.
 449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void FreeRTOS_NetworkDown( void );
 451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t FreeRTOS_NetworkDownFromISR( void );
 452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Processes incoming ARP packets.
 455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame );
 457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Inspect an Ethernet frame to see if it contains data that the stack needs to
 460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * process.  eProcessBuffer is returned if the frame should be processed by the
 461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * stack.  eReleaseBuffer is returned if the frame should be discarded.
 462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer );
 464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Return the checksum generated over xDataLengthBytes from pucNextData.
 467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** uint16_t usGenerateChecksum( uint32_t ulSum, const uint8_t * pucNextData, size_t uxDataLengthBytes 
 469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Socket related private functions. */
 471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
 472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void vNetworkSocketsInit( void );
ARM GAS  /tmp/ccyb6dex.s 			page 25


 473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Returns pdTRUE if the IP task has been created and is initialised.  Otherwise
 476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * returns pdFALSE.
 477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t xIPIsNetworkTaskReady( void );
 479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
 481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/*
 483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * Actually a user thing, but because xBoundTCPSocketsList, let it do by the
 484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * IP-task
 485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 */
 486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	void vTCPNetStat( void );
 487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/*
 489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * At least one socket needs to check for timeouts
 490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 */
 491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TickType_t xTCPTimerCheck( BaseType_t xWillSleep );
 492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* Every TCP socket has a buffer space just big enough to store
 494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	the last TCP header received.
 495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	As a reference of this field may be passed to DMA, force the
 496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	alignment to 8 bytes. */
 497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	typedef union
 498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	{
 499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct
 500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		{
 501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			/* Increase the alignment of this union by adding a 64-bit variable. */
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint64_t ullAlignmentWord;
 503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		} a;
 504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct
 505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		{
 506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			/* The next field only serves to give 'ucLastPacket' a correct
 507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			alignment of 8 + 2.  See comments in FreeRTOS_IP.h */
 508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucFillPacket[ ipconfigPACKET_FILLER_SIZE ];
 509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucLastPacket[ sizeof( TCPPacket_t ) ];
 510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		} u;
 511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} LastTCPPacket_t;
 512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/*
 514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * Note that the values of all short and long integers in these structs
 515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * are being stored in the native-endian way
 516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * Translation should take place when accessing any structure which defines
 517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * network packets, such as IPHeader_t and TCPHeader_t
 518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 */
 519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	typedef struct TCPSOCKET
 520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	{
 521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t ulRemoteIP;		/* IP address of remote machine */
 522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usRemotePort;		/* Port on remote machine */
 523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct {
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			/* Most compilers do like bit-flags */
 525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint32_t
 526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bMssChange : 1,		/* This socket has seen a change in MSS */
 527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bPassAccept : 1,	/* when true, this socket may be returned in a call to accept() */
 528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bPassQueued : 1,	/* when true, this socket is an orphan until it gets connected
 529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 									 * Why an orphan? Because it may not be returned in a accept() call until it
ARM GAS  /tmp/ccyb6dex.s 			page 26


 530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 									 * gets the state eESTABLISHED */
 531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bReuseSocket : 1,	/* When a listening socket gets a connection, do not create a new instance bu
 532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bCloseAfterSend : 1,/* As soon as the last byte has been transmitted, finalise the connection
 533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 									 * Useful in e.g. FTP connections, where the last data bytes are sent along with the FIN f
 534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bUserShutdown : 1,	/* User requesting a graceful shutdown */
 535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bCloseRequested : 1,/* Request to finalise the connection */
 536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bLowWater : 1,		/* high-water level has been reached. Cleared as soon as 'rx-count < lo-water' 
 537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bWinChange : 1,		/* The value of bLowWater has changed, must send a window update */
 538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bSendKeepAlive : 1,	/* When this flag is true, a TCP keep-alive message must be send */
 539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bWaitKeepAlive : 1,	/* When this flag is true, a TCP keep-alive reply is expected */
 540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bConnPrepared : 1,	/* Connecting socket: Message has been prepared */
 541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 					bConnPassed : 1,	/* Connecting socket: Socket has been passed in a successful select()  */
 543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
 544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinAccepted : 1,	/* This socket has received (or sent) a FIN and accepted it */
 545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinSent : 1,		/* We've sent out a FIN */
 546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinRecv : 1,		/* We've received a FIN from our peer */
 547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinAcked : 1,		/* Our FIN packet has been acked */
 548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinLast : 1,		/* The last ACK (after FIN and FIN+ACK) has been sent or will be sent by the pee
 549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bRxStopped : 1,		/* Application asked to temporarily stop reception */
 550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bMallocError : 1,	/* There was an error allocating a stream */
 551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bWinScaling : 1;	/* A TCP-Window Scaling option was offered and accepted in the SYN phase. */
 552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		} bits;
 553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t ulHighestRxAllowed;
 554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 								/* The highest sequence number that we can receive at any moment */
 555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usTimeout;		/* Time (in ticks) after which this socket needs attention */
 556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usCurMSS;		/* Current Maximum Segment Size */
 557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usInitMSS;		/* Initial maximum segment Size */
 558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usChildCount;	/* In case of a listening socket: number of connections on this port numbe
 559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usBacklog;		/* In case of a listening socket: maximum number of concurrent connections o
 560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint8_t ucRepCount;		/* Send repeat count, for retransmissions
 561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 								 * This counter is separate from the xmitCount in the
 562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 								 * TCP win segments */
 563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint8_t ucTCPState;		/* TCP state: see eTCP_STATE */
 564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct XSOCKET *pxPeerSocket;	/* for server socket: child, for child socket: parent */
 565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigTCP_KEEP_ALIVE == 1 )
 566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucKeepRepCount;
 567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			TickType_t xLastAliveTime;
 568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigTCP_KEEP_ALIVE */
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigTCP_HANG_PROTECTION == 1 )
 570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			TickType_t xLastActTime;
 571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigTCP_HANG_PROTECTION */
 572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxLittleSpace;
 573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxEnoughSpace;
 574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxRxStreamSize;
 575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxTxStreamSize;
 576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		StreamBuffer_t *rxStream;
 577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		StreamBuffer_t *txStream;
 578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP_WIN == 1 )
 579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			NetworkBufferDescriptor_t *pxAckMessage;
 580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_TCP_WIN */
 581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		/* Buffer space to store the last TCP header received. */
 582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		LastTCPPacket_t xPacket;
 583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint8_t tcpflags;		/* TCP flags */
 584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP_WIN != 0 )
 585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucMyWinScaleFactor;
 586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucPeerWinScaleFactor;
ARM GAS  /tmp/ccyb6dex.s 			page 27


 587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif
 588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_CALLBACKS == 1 )
 589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			FOnTCPReceive_t pxHandleReceive;	/*
 590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 										 		 * In case of a TCP socket:
 591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 										 		 * typedef void (* FOnTCPReceive_t) (Socket_t xSocket, void *pData, size_t xLength );
 592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 										 		 */
 593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			FOnTCPSent_t pxHandleSent;
 594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			FOnConnected_t pxHandleConnected;	/* Actually type: typedef void (* FOnConnected_t) (Socket_t xS
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_CALLBACKS */
 596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t ulWindowSize;		/* Current Window size advertised by peer */
 597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t ulRxCurWinSize;	/* Constantly changing: this is the current size available for data rece
 598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxRxWinSize;	/* Fixed value: size of the TCP reception window */
 599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxTxWinSize;	/* Fixed value: size of the TCP transmit window */
 600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		TCPWindow_t xTCPWindow;
 602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} IPTCPSocket_t;
 603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif /* ipconfigUSE_TCP */
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct UDPSOCKET
 607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	List_t xWaitingPacketsList;	/* Incoming packets */
 609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#if( ipconfigUDP_MAX_RX_PACKETS > 0 )
 610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		UBaseType_t uxMaxPackets; /* Protection: limits the number of packets buffered per socket */
 611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#endif /* ipconfigUDP_MAX_RX_PACKETS */
 612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#if( ipconfigUSE_CALLBACKS == 1 )
 613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		FOnUDPReceive_t pxHandleReceive;	/*
 614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 											 * In case of a UDP socket:
 615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 											 * typedef void (* FOnUDPReceive_t) (Socket_t xSocket, void *pData, size_t xLength, stru
 616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 											 */
 617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		FOnUDPSent_t pxHandleSent;
 618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#endif /* ipconfigUSE_CALLBACKS */
 619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } IPUDPSocket_t;
 620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef enum eSOCKET_EVENT {
 622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_RECEIVE = 0x0001,
 623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_SEND    = 0x0002,
 624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_ACCEPT  = 0x0004,
 625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_CONNECT = 0x0008,
 626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_BOUND   = 0x0010,
 627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_CLOSED	= 0x0020,
 628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_INTR	= 0x0040,
 629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_ALL		= 0x007F,
 630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } eSocketEvent_t;
 631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct XSOCKET
 633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EventBits_t xEventBits;
 635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EventGroupHandle_t xEventGroup;
 636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ListItem_t xBoundSocketListItem; /* Used to reference the socket from a bound sockets list. */
 638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TickType_t xReceiveBlockTime; /* if recv[to] is called while no data is available, wait this amoun
 639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TickType_t xSendBlockTime; /* if send[to] is called while there is not enough space to send, wait 
 640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usLocalPort;		/* Local port on this machine */
 642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucSocketOptions;
 643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol; /* choice of FREERTOS_IPPROTO_UDP/TCP */
ARM GAS  /tmp/ccyb6dex.s 			page 28


 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#if( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
 645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		SemaphoreHandle_t pxUserSemaphore;
 646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
 647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct xSOCKET_SET *pxSocketSet;
 649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		/* User may indicate which bits are interesting for this socket. */
 650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		EventBits_t xSelectBits;
 651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		/* These bits indicate the events which have actually occurred.
 652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		They are maintained by the IP-task */
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		EventBits_t xSocketBits;
 654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
 655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* TCP/UDP specific fields: */
 656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* Before accessing any member of this structure, it should be confirmed */
 657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* that the protocol corresponds with the type of structure */
 658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	union
 660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	{
 661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		IPUDPSocket_t xUDP;
 662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP == 1 )
 663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			IPTCPSocket_t xTCP;
 664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			/* Make sure that xTCP is 8-bytes aligned by
 665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			declaring a 64-bit variable in the same union */
 666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint64_t ullTCPAlignment;
 667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_TCP */
 668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} u;
 669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } FreeRTOS_Socket_t;
 670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
 672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/*
 673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * Lookup a TCP socket, using a multiple matching: both port numbers and
 674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * return IP address.
 675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 */
 676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemo
 677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif /* ipconfigUSE_TCP */
 679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Look up a local socket by finding a match with the local port.
 682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort );
 684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Called when the application has generated a UDP packet to send.
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer );
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Calculate the upper-layer checksum
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Works both for UDP, ICMP and TCP packages
 693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * bOut = true: checksum will be set in outgoing packets
 694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * bOut = false: checksum will be calculated for incoming packets
 695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *     returning 0xffff means: checksum was correct
 696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, BaseType_t xOutgoingP
 698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * An Ethernet frame has been updated (maybe it was an ARP request or a PING
ARM GAS  /tmp/ccyb6dex.s 			page 29


 701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * request?) and is to be sent back to its source.
 702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSen
 704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The internal version of bind()
 707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * If 'ulInternal' is true, it is called by the driver
 708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The TCP driver needs to bind a socket at the moment a listening socket
 709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * creates a new connected socket
 710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t u
 712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Internal function to add streaming data to a TCP socket. If ulIn == true,
 715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * data will be added to the rxStream, otherwise to the tXStream.  Normally data
 716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * will be written with ulOffset == 0, meaning: at the end of the FIFO.  When
 717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * packet come in out-of-order, an offset will be used to put it in front and
 718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * the head will not change yet.
 719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** int32_t lTCPAddRxdata(FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t
 721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Currently called for any important event.
 724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket );
 726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Some helping function, their meaning should be clear
 729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** static portINLINE uint32_t ulChar2u32 (const uint8_t *apChr);
 731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** static portINLINE uint32_t ulChar2u32 (const uint8_t *apChr)
 732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 521              		.loc 3 732 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 8
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 526 0000 80B4     		push	{r7}
 527              	.LCFI50:
 528              		.cfi_def_cfa_offset 4
 529              		.cfi_offset 7, -4
 530 0002 83B0     		sub	sp, sp, #12
 531              	.LCFI51:
 532              		.cfi_def_cfa_offset 16
 533 0004 00AF     		add	r7, sp, #0
 534              	.LCFI52:
 535              		.cfi_def_cfa_register 7
 536 0006 7860     		str	r0, [r7, #4]
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 537              		.loc 3 733 0
 538 0008 7B68     		ldr	r3, [r7, #4]
 539 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 540 000c 1A06     		lsls	r2, r3, #24
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[1] ) << 16) |
 541              		.loc 3 734 0
 542 000e 7B68     		ldr	r3, [r7, #4]
 543 0010 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccyb6dex.s 			page 30


 544 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 545 0014 1B04     		lsls	r3, r3, #16
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 546              		.loc 3 733 0
 547 0016 1A43     		orrs	r2, r2, r3
 735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[2] ) << 8) |
 548              		.loc 3 735 0
 549 0018 7B68     		ldr	r3, [r7, #4]
 550 001a 0233     		adds	r3, r3, #2
 551 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 552 001e 1B02     		lsls	r3, r3, #8
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[1] ) << 16) |
 553              		.loc 3 734 0
 554 0020 1343     		orrs	r3, r3, r2
 736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[3] ) );
 555              		.loc 3 736 0
 556 0022 7A68     		ldr	r2, [r7, #4]
 557 0024 0332     		adds	r2, r2, #3
 558 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[1] ) << 16) |
 559              		.loc 3 733 0
 560 0028 1343     		orrs	r3, r3, r2
 737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 561              		.loc 3 737 0
 562 002a 1846     		mov	r0, r3
 563 002c 0C37     		adds	r7, r7, #12
 564              	.LCFI53:
 565              		.cfi_def_cfa_offset 4
 566 002e BD46     		mov	sp, r7
 567              	.LCFI54:
 568              		.cfi_def_cfa_register 13
 569              		@ sp needed
 570 0030 5DF8047B 		ldr	r7, [sp], #4
 571              	.LCFI55:
 572              		.cfi_restore 7
 573              		.cfi_def_cfa_offset 0
 574 0034 7047     		bx	lr
 575              		.cfi_endproc
 576              	.LFE27:
 578 0036 00BF     		.section	.text.usChar2u16,"ax",%progbits
 579              		.align	2
 580              		.thumb
 581              		.thumb_func
 583              	usChar2u16:
 584              	.LFB28:
 738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
 740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
 741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 585              		.loc 3 741 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 8
 588              		@ frame_needed = 1, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590 0000 80B4     		push	{r7}
 591              	.LCFI56:
 592              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccyb6dex.s 			page 31


 593              		.cfi_offset 7, -4
 594 0002 83B0     		sub	sp, sp, #12
 595              	.LCFI57:
 596              		.cfi_def_cfa_offset 16
 597 0004 00AF     		add	r7, sp, #0
 598              	.LCFI58:
 599              		.cfi_def_cfa_register 7
 600 0006 7860     		str	r0, [r7, #4]
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return ( uint16_t )
 743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( ( uint32_t )apChr[0] ) << 8) |
 601              		.loc 3 743 0
 602 0008 7B68     		ldr	r3, [r7, #4]
 603 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return ( uint16_t )
 604              		.loc 3 742 0
 605 000c 9BB2     		uxth	r3, r3
 606 000e 1B02     		lsls	r3, r3, #8
 607 0010 9AB2     		uxth	r2, r3
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			  ( ( ( uint32_t )apChr[1] ) ) );
 608              		.loc 3 744 0
 609 0012 7B68     		ldr	r3, [r7, #4]
 610 0014 0133     		adds	r3, r3, #1
 611 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return ( uint16_t )
 612              		.loc 3 742 0
 613 0018 9BB2     		uxth	r3, r3
 614 001a 1343     		orrs	r3, r3, r2
 615 001c 9BB2     		uxth	r3, r3
 745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 616              		.loc 3 745 0
 617 001e 1846     		mov	r0, r3
 618 0020 0C37     		adds	r7, r7, #12
 619              	.LCFI59:
 620              		.cfi_def_cfa_offset 4
 621 0022 BD46     		mov	sp, r7
 622              	.LCFI60:
 623              		.cfi_def_cfa_register 13
 624              		@ sp needed
 625 0024 5DF8047B 		ldr	r7, [sp], #4
 626              	.LCFI61:
 627              		.cfi_restore 7
 628              		.cfi_def_cfa_offset 0
 629 0028 7047     		bx	lr
 630              		.cfi_endproc
 631              	.LFE28:
 633 002a 00BF     		.section	.rodata
 634              		.align	2
 635              	.LC0:
 636 0000 65434C4F 		.ascii	"eCLOSED\000"
 636      53454400 
 637              		.align	2
 638              	.LC1:
 639 0008 65544350 		.ascii	"eTCP_LISTEN\000"
 639      5F4C4953 
 639      54454E00 
 640              		.align	2
 641              	.LC2:
ARM GAS  /tmp/ccyb6dex.s 			page 32


 642 0014 65434F4E 		.ascii	"eCONNECT_SYN\000"
 642      4E454354 
 642      5F53594E 
 642      00
 643 0021 000000   		.align	2
 644              	.LC3:
 645 0024 6553594E 		.ascii	"eSYN_FIRST\000"
 645      5F464952 
 645      535400
 646 002f 00       		.align	2
 647              	.LC4:
 648 0030 6553594E 		.ascii	"eSYN_RECEIVED\000"
 648      5F524543 
 648      45495645 
 648      4400
 649 003e 0000     		.align	2
 650              	.LC5:
 651 0040 65455354 		.ascii	"eESTABLISHED\000"
 651      41424C49 
 651      53484544 
 651      00
 652 004d 000000   		.align	2
 653              	.LC6:
 654 0050 6546494E 		.ascii	"eFIN_WAIT_1\000"
 654      5F574149 
 654      545F3100 
 655              		.align	2
 656              	.LC7:
 657 005c 6546494E 		.ascii	"eFIN_WAIT_2\000"
 657      5F574149 
 657      545F3200 
 658              		.align	2
 659              	.LC8:
 660 0068 65434C4F 		.ascii	"eCLOSE_WAIT\000"
 660      53455F57 
 660      41495400 
 661              		.align	2
 662              	.LC9:
 663 0074 65434C4F 		.ascii	"eCLOSING\000"
 663      53494E47 
 663      00
 664 007d 000000   		.align	2
 665              	.LC10:
 666 0080 654C4153 		.ascii	"eLAST_ACK\000"
 666      545F4143 
 666      4B00
 667 008a 0000     		.align	2
 668              	.LC11:
 669 008c 6554494D 		.ascii	"eTIME_WAIT\000"
 669      455F5741 
 669      495400
 670 0097 00       		.align	2
 671              	.LC12:
 672 0098 65554E4B 		.ascii	"eUNKNOWN\000"
 672      4E4F574E 
 672      00
 673              		.section	.data.pcStateNames,"aw",%progbits
ARM GAS  /tmp/ccyb6dex.s 			page 33


 674              		.align	2
 677              	pcStateNames:
 678 0000 00000000 		.word	.LC0
 679 0004 08000000 		.word	.LC1
 680 0008 14000000 		.word	.LC2
 681 000c 24000000 		.word	.LC3
 682 0010 30000000 		.word	.LC4
 683 0014 40000000 		.word	.LC5
 684 0018 50000000 		.word	.LC6
 685 001c 5C000000 		.word	.LC7
 686 0020 68000000 		.word	.LC8
 687 0024 74000000 		.word	.LC9
 688 0028 80000000 		.word	.LC10
 689 002c 8C000000 		.word	.LC11
 690 0030 98000000 		.word	.LC12
 691              		.global	ulNextInitialSequenceNumber
 692              		.section	.bss.ulNextInitialSequenceNumber,"aw",%nobits
 693              		.align	2
 696              	ulNextInitialSequenceNumber:
 697 0000 00000000 		.space	4
 698              		.section	.text.prvTCPSocketIsActive,"ax",%progbits
 699              		.align	2
 700              		.thumb
 701              		.thumb_func
 703              	prvTCPSocketIsActive:
 704              	.LFB29:
 705              		.file 4 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * executed, as follows:
ARM GAS  /tmp/ccyb6dex.s 			page 34


  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * FreeRTOS_TCP_IP.c
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Module which handles the TCP connections for FreeRTOS+TCP.
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * It depends on  FreeRTOS_TCP_WIN.c, which handles the TCP windowing
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * schemes.
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Endianness: in this module all ports and IP addresses are stored in
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * host byte-order, except fields in the IP-packets
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* Standard includes. */
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include <stdint.h>
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include <stdio.h>
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* FreeRTOS includes. */
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS.h"
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "task.h"
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "queue.h"
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "semphr.h"
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* FreeRTOS+TCP includes. */
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS_IP.h"
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS_Sockets.h"
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS_IP_Private.h"
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS_UDP_IP.h"
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS_TCP_IP.h"
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS_DHCP.h"
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "NetworkInterface.h"
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "NetworkBufferManagement.h"
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS_ARP.h"
ARM GAS  /tmp/ccyb6dex.s 			page 35


  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #include "FreeRTOS_TCP_WIN.h"
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* Just make sure the contents doesn't get compiled if TCP is not enabled. */
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if ipconfigUSE_TCP == 1
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* This compile-time test was moved to here because some macro's
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** were unknown within 'FreeRTOSIPConfigDefaults.h'.  It tests whether
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** the defined MTU size can contain at ;east a complete TCP packet. */
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if ( ( ipconfigTCP_MSS + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) > ipconfigNETWORK_MTU )
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#error The ipconfigTCP_MSS setting in FreeRTOSIPConfig.h is too large.
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The meaning of the TCP flags:
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_FIN			0x0001u /* No more data from sender */
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_SYN			0x0002u /* Synchronize sequence numbers */
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_RST			0x0004u /* Reset the connection */
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_PSH			0x0008u /* Push function: please push buffered data to the recv applicatio
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_ACK			0x0010u /* Acknowledgment field is significant */
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_URG			0x0020u /* Urgent pointer field is significant */
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_ECN			0x0040u /* ECN-Echo */
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_CWR			0x0080u /* Congestion Window Reduced */
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_NS			0x0100u /* ECN-nonce concealment protection */
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_RSV			0x0E00u /* Reserved, keep 0 */
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* A mask to filter all protocol flags. */
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_CTRL			0x001Fu
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * A few values of the TCP options:
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_END				0u   /* End of TCP options list */
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_NOOP			1u   /* "No-operation" TCP option */
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_MSS				2u   /* Maximum segment size TCP option */
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_WSOPT			3u   /* TCP Window Scale Option (3-byte long) */
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_SACK_P			4u   /* Advertize that SACK is permitted */
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_SACK_A			5u   /* SACK option with first/last */
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_TIMESTAMP		8u   /* Time-stamp option */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_MSS_LEN			4u   /* Length of TCP MSS option. */
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_WSOPT_LEN		3u   /* Length of TCP WSOPT option. */
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OPT_TIMESTAMP_LEN	10	/* fixed length of the time-stamp option */
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #ifndef ipconfigTCP_ACK_EARLIER_PACKET
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#define ipconfigTCP_ACK_EARLIER_PACKET		1
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The macro NOW_CONNECTED() is use to determine if the connection makes a
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * transition from connected to non-connected and vice versa.
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * NOW_CONNECTED() returns true when the status has one of these values:
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * eESTABLISHED, eFIN_WAIT_1, eFIN_WAIT_2, eCLOSING, eLAST_ACK, eTIME_WAIT
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Technically the connection status is closed earlier, but the library wants
ARM GAS  /tmp/ccyb6dex.s 			page 36


 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * to prevent that the socket will be deleted before the last ACK has been
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * and thus causing a 'RST' packet on either side.
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define NOW_CONNECTED( status )\
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	( ( status >= eESTABLISHED ) && ( status != eCLOSE_WAIT ) )
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The highest 4 bits in the TCP offset byte indicate the total length of the
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * TCP header, divided by 4.
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define VALID_BITS_IN_TCP_OFFSET_BYTE		( 0xF0u )
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Acknowledgements to TCP data packets may be delayed as long as more is being expected.
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * A normal delay would be 200ms.  Here a much shorter delay of 20 ms is being used to
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * gain performance.
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define DELAYED_ACK_SHORT_DELAY_MS			( 2 )
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define DELAYED_ACK_LONGER_DELAY_MS			( 20 )
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The MSS (Maximum Segment Size) will be taken as large as possible. However, packets with
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * an MSS of 1460 bytes won't be transported through the internet.  The MSS will be reduced
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * to 1400 bytes.
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define REDUCED_MSS_THROUGH_INTERNET		( 1400 )
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Each time a new TCP connection is being made, a new Initial Sequence Number shall be used.
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The variable 'ulNextInitialSequenceNumber' will be incremented with a recommended value
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * of 0x102.
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define INITIAL_SEQUENCE_NUMBER_INCREMENT		( 0x102UL )
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * the number 5 (words) in the higher niblle of the TCP-offset byte.
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OFFSET_LENGTH_BITS			( 0xf0u )
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #define TCP_OFFSET_STANDARD_LENGTH		( 0x50u )
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Each TCP socket is checked regularly to see if it can send data packets.
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * By default, the maximum number of packets sent during one check is limited to 8.
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * This amount may be further limited by setting the socket's TX window size.
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( !defined( SEND_REPEATED_COUNT ) )
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#define SEND_REPEATED_COUNT		( 8 )
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif /* !defined( SEND_REPEATED_COUNT ) */
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The names of the different TCP states may be useful in logging.
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static const char *pcStateNames[] = {
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eCLOSED",
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eTCP_LISTEN",
ARM GAS  /tmp/ccyb6dex.s 			page 37


 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eCONNECT_SYN",
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eSYN_FIRST",
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eSYN_RECEIVED",
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eESTABLISHED",
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eFIN_WAIT_1",
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eFIN_WAIT_2",
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eCLOSE_WAIT",
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eCLOSING",
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eLAST_ACK",
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eTIME_WAIT",
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		"eUNKNOWN",
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** };
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) */
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Returns true if the socket must be checked.  Non-active sockets are waiting
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * for user action, either connect() or close().
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus );
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Either sends a SYN or calls prvTCPSendRepeated (for regular messages).
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket );
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Try to send a series of messages.
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetw
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Return or send a packet to the other party.
 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBu
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint32_t ulLen, BaseType_t xReleaseAfterSend );
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Initialise the data structures which keep track of the TCP windowing system.
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket );
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Let ARP look-up the MAC-address of the peer and initialise the first SYN
 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * packet.
 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket );
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/*
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	 * For logging and debugging: make a string showing the TCP flags.
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	 */
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static const char *prvTCPFlagMeaning( UBaseType_t xFlags);
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Parse the TCP option(s) received, if present.
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
ARM GAS  /tmp/ccyb6dex.s 			page 38


 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffe
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Set the initial properties in the options fields, like the preferred
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * value of MSS and whether SACK allowed.  Will be transmitted in the state
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * 'eCONNECT_SYN'.
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket );
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * For anti-hang protection and TCP keep-alive messages.  Called in two places:
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * after receiving a packet and after a state change.  The socket's alive timer
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * may be reset.
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket );
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Prepare an outgoing message, if anything has to be sent.
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetwo
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Calculate when this socket needs to be checked to do (re-)transmissions.
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t *pxSocket );
 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The API FreeRTOS_send() adds data to the TX stream.  Add
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * this data to the windowing system to it can be transmitted.
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket );
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *  Called to handle the closure of a TCP connection.
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetwor
 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if(	ipconfigUSE_TCP_TIMESTAMPS == 1 )
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static UBaseType_t prvTCPSetTimeStamp( BaseType_t lOffset, FreeRTOS_Socket_t *pxSocket, TCPHeader_
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState().  Find the TCP payload data and check and
 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * return its length.
 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvDat
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState().  Check if the payload data may be accepted.
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * If so, it will be added to the socket's reception queue.
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength );
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Set the TCP options (if any) for the outgoing packet.
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
ARM GAS  /tmp/ccyb6dex.s 			page 39


 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetwork
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState() as long as the TCP status is eSYN_RECEIVED to
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * eCONNECT_SYN.
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **pp
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength );
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState() as long as the TCP status is eESTABLISHED.
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **pp
 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength );
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState().  There is data to be sent.
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * If ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will
 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * be checked if it would better be postponed for efficiency.
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkB
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, BaseType_t xSendLength );
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The heart of all: check incoming packet for valid data and acks and do what
 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * is necessary in each state.
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNe
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Reply to a peer with the RST flag on, in case a packet can not be handled.
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer );
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Set the initial value for MSS (Maximum Segment Size) to be used.
 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket );
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Return either a newly created socket, or the current socket in a connected
 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * state (depends on the 'bReuseSocket' flag).
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *
 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * After a listening socket receives a new connection, it may duplicate itself.
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The copying takes place in prvTCPSocketCopy.
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket );
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvTCPStatusAgeCheck() will see if the socket has been in a non-connected
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * state for too long.  If so, the socket will be closed, and -1 will be
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * returned.
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigTCP_HANG_PROTECTION == 1 )
ARM GAS  /tmp/ccyb6dex.s 			page 40


 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket );
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDes
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	int32_t lDataLen, UBaseType_t uxOptionsLength );
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	const char *FreeRTOS_GetTCPStateName( UBaseType_t ulState );
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_TCP_WIN != 0 )
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket );
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* Initial Sequence Number, i.e. the next initial sequence number that will be
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** used when a new connection is opened.  The value should be randomized to prevent
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** attacks from outside (spoofing). */
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulNextInitialSequenceNumber = 0ul;
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* prvTCPSocketIsActive() returns true if the socket must be checked.
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Non-active sockets are waiting for user action, either connect()
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * or close(). */
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus )
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 706              		.loc 4 400 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 8
 709              		@ frame_needed = 1, uses_anonymous_args = 0
 710              		@ link register save eliminated.
 711 0000 80B4     		push	{r7}
 712              	.LCFI62:
 713              		.cfi_def_cfa_offset 4
 714              		.cfi_offset 7, -4
 715 0002 83B0     		sub	sp, sp, #12
 716              	.LCFI63:
 717              		.cfi_def_cfa_offset 16
 718 0004 00AF     		add	r7, sp, #0
 719              	.LCFI64:
 720              		.cfi_def_cfa_register 7
 721 0006 7860     		str	r0, [r7, #4]
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	switch( uxStatus )
 722              		.loc 4 401 0
 723 0008 7B68     		ldr	r3, [r7, #4]
 724 000a 0B2B     		cmp	r3, #11
 725 000c 1CD8     		bhi	.L27
 726 000e 01A2     		adr	r2, .L29
 727 0010 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 728              		.p2align 2
 729              	.L29:
 730 0014 45000000 		.word	.L28+1
 731 0018 49000000 		.word	.L27+1
 732 001c 49000000 		.word	.L27+1
 733 0020 49000000 		.word	.L27+1
ARM GAS  /tmp/ccyb6dex.s 			page 41


 734 0024 49000000 		.word	.L27+1
 735 0028 49000000 		.word	.L27+1
 736 002c 49000000 		.word	.L27+1
 737 0030 45000000 		.word	.L28+1
 738 0034 45000000 		.word	.L28+1
 739 0038 45000000 		.word	.L28+1
 740 003c 49000000 		.word	.L27+1
 741 0040 45000000 		.word	.L28+1
 742              		.p2align 1
 743              	.L28:
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eCLOSED:
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eCLOSE_WAIT:
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eFIN_WAIT_2:
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eCLOSING:
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eTIME_WAIT:
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return pdFALSE;
 744              		.loc 4 408 0
 745 0044 0023     		movs	r3, #0
 746 0046 00E0     		b	.L30
 747              	.L27:
 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	default:
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return pdTRUE;
 748              		.loc 4 410 0
 749 0048 0123     		movs	r3, #1
 750              	.L30:
 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 751              		.loc 4 412 0
 752 004a 1846     		mov	r0, r3
 753 004c 0C37     		adds	r7, r7, #12
 754              	.LCFI65:
 755              		.cfi_def_cfa_offset 4
 756 004e BD46     		mov	sp, r7
 757              	.LCFI66:
 758              		.cfi_def_cfa_register 13
 759              		@ sp needed
 760 0050 5DF8047B 		ldr	r7, [sp], #4
 761              	.LCFI67:
 762              		.cfi_restore 7
 763              		.cfi_def_cfa_offset 0
 764 0054 7047     		bx	lr
 765              		.cfi_endproc
 766              	.LFE29:
 768 0056 00BF     		.section	.text.prvTCPStatusAgeCheck,"ax",%progbits
 769              		.align	2
 770              		.thumb
 771              		.thumb_func
 773              	prvTCPStatusAgeCheck:
 774              	.LFB30:
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigTCP_HANG_PROTECTION == 1 )
 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
 418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 775              		.loc 4 418 0
ARM GAS  /tmp/ccyb6dex.s 			page 42


 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 16
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779 0000 80B5     		push	{r7, lr}
 780              	.LCFI68:
 781              		.cfi_def_cfa_offset 8
 782              		.cfi_offset 7, -8
 783              		.cfi_offset 14, -4
 784 0002 84B0     		sub	sp, sp, #16
 785              	.LCFI69:
 786              		.cfi_def_cfa_offset 24
 787 0004 00AF     		add	r7, sp, #0
 788              	.LCFI70:
 789              		.cfi_def_cfa_register 7
 790 0006 7860     		str	r0, [r7, #4]
 419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	BaseType_t xResult;
 420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		switch( pxSocket->u.xTCP.ucTCPState )
 791              		.loc 4 420 0
 792 0008 7B68     		ldr	r3, [r7, #4]
 793 000a 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 794 000e 082B     		cmp	r3, #8
 795 0010 1AD8     		bhi	.L32
 796 0012 01A2     		adr	r2, .L34
 797 0014 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 798              		.p2align 2
 799              	.L34:
 800 0018 43000000 		.word	.L33+1
 801 001c 43000000 		.word	.L33+1
 802 0020 49000000 		.word	.L32+1
 803 0024 49000000 		.word	.L32+1
 804 0028 49000000 		.word	.L32+1
 805 002c 3D000000 		.word	.L35+1
 806 0030 49000000 		.word	.L32+1
 807 0034 49000000 		.word	.L32+1
 808 0038 43000000 		.word	.L33+1
 809              		.p2align 1
 810              	.L35:
 421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eESTABLISHED:
 423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
 424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			state ESTABLISHED can be protected using keep-alive messages. */
 425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xResult = pdFALSE;
 811              		.loc 4 425 0
 812 003c 0023     		movs	r3, #0
 813 003e FB60     		str	r3, [r7, #12]
 426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 814              		.loc 4 426 0
 815 0040 05E0     		b	.L36
 816              	.L33:
 427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eCLOSED:
 428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eTCP_LISTEN:
 429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eCLOSE_WAIT:
 430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* These 3 states may last for ever, up to the owner. */
 431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xResult = pdFALSE;
 817              		.loc 4 431 0
 818 0042 0023     		movs	r3, #0
 819 0044 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccyb6dex.s 			page 43


 432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 820              		.loc 4 432 0
 821 0046 02E0     		b	.L36
 822              	.L32:
 433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		default:
 434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* All other (non-connected) states will get anti-hanging
 435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			protection. */
 436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xResult = pdTRUE;
 823              		.loc 4 436 0
 824 0048 0123     		movs	r3, #1
 825 004a FB60     		str	r3, [r7, #12]
 437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 826              		.loc 4 437 0
 827 004c 00BF     		nop
 828              	.L36:
 438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( xResult != pdFALSE )
 829              		.loc 4 439 0
 830 004e FB68     		ldr	r3, [r7, #12]
 831 0050 002B     		cmp	r3, #0
 832 0052 25D0     		beq	.L37
 833              	.LBB4:
 440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* How much time has past since the last active moment which is
 442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			defined as A) a state change or B) a packet has arrived. */
 443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 834              		.loc 4 443 0
 835 0054 FFF7FEFF 		bl	xTaskGetTickCount
 836 0058 0246     		mov	r2, r0
 837 005a 7B68     		ldr	r3, [r7, #4]
 838 005c 1B6E     		ldr	r3, [r3, #96]
 839 005e D31A     		subs	r3, r2, r3
 840 0060 BB60     		str	r3, [r7, #8]
 444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
 446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 841              		.loc 4 446 0
 842 0062 BB68     		ldr	r3, [r7, #8]
 843 0064 47F23052 		movw	r2, #30000
 844 0068 9342     		cmp	r3, r2
 845 006a 19D9     		bls	.L37
 447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#if( ipconfigHAS_DEBUG_PRINTF == 1 )
 449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->usLocalPort,
 452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.ulRemoteIP,
 453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.usRemotePort,
 454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
 455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#endif /* ipconfigHAS_DEBUG_PRINTF */
 457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Move to eCLOSE_WAIT, user may close the socket. */
 459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 846              		.loc 4 459 0
 847 006c 7868     		ldr	r0, [r7, #4]
 848 006e 0821     		movs	r1, #8
ARM GAS  /tmp/ccyb6dex.s 			page 44


 849 0070 FFF7FEFF 		bl	vTCPStateChange
 460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* When 'bPassQueued' true, this socket is an orphan until it
 462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				gets connected. */
 463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 850              		.loc 4 463 0
 851 0074 7B68     		ldr	r3, [r7, #4]
 852 0076 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 853 007a 03F00403 		and	r3, r3, #4
 854 007e DBB2     		uxtb	r3, r3
 855 0080 002B     		cmp	r3, #0
 856 0082 0DD0     		beq	.L37
 464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 857              		.loc 4 465 0
 858 0084 7B68     		ldr	r3, [r7, #4]
 859 0086 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 860 008a 03F00803 		and	r3, r3, #8
 861 008e DBB2     		uxtb	r3, r3
 862 0090 002B     		cmp	r3, #0
 863 0092 02D1     		bne	.L38
 466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
 467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						/* As it did not get connected, and the user can never
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						accept() it anymore, it will be deleted now.  Called from
 469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						the IP-task, so it's safe to call the internal Close
 470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						function: vSocketClose(). */
 471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						vSocketClose( pxSocket );
 864              		.loc 4 471 0
 865 0094 7868     		ldr	r0, [r7, #4]
 866 0096 FFF7FEFF 		bl	vSocketClose
 867              	.L38:
 472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
 473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					/* Return a negative value to tell to inform the caller
 474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xTCPTimerCheck()
 475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					that the socket got closed and may not be accessed anymore. */
 476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xResult = -1;
 868              		.loc 4 476 0
 869 009a 4FF0FF33 		mov	r3, #-1
 870 009e FB60     		str	r3, [r7, #12]
 871              	.L37:
 872              	.LBE4:
 477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return xResult;
 873              		.loc 4 480 0
 874 00a0 FB68     		ldr	r3, [r7, #12]
 481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 875              		.loc 4 481 0
 876 00a2 1846     		mov	r0, r3
 877 00a4 1037     		adds	r7, r7, #16
 878              	.LCFI71:
 879              		.cfi_def_cfa_offset 8
 880 00a6 BD46     		mov	sp, r7
 881              	.LCFI72:
 882              		.cfi_def_cfa_register 13
 883              		@ sp needed
ARM GAS  /tmp/ccyb6dex.s 			page 45


 884 00a8 80BD     		pop	{r7, pc}
 885              		.cfi_endproc
 886              	.LFE30:
 888 00aa 00BF     		.section	.text.xTCPSocketCheck,"ax",%progbits
 889              		.align	2
 890              		.global	xTCPSocketCheck
 891              		.thumb
 892              		.thumb_func
 894              	xTCPSocketCheck:
 895              	.LFB31:
 482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/*-----------------------------------------------------------*/
 483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
 485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * As soon as a TCP socket timer expires, this function xTCPSocketCheck
 488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * will be called (from xTCPTimerCheck)
 489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * It can send a delayed ACK or new data
 490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Sequence of calling (normally) :
 491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * IP-Task:
 492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		xTCPTimerCheck()				// Check all sockets ( declared in FreeRTOS_Sockets.c )
 493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		xTCPSocketCheck()				// Either send a delayed ACK or call prvTCPSendPacket()
 494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvTCPSendPacket()				// Either send a SYN or call prvTCPSendRepeated ( regular messages )
 495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *			prvTCPReturnPacket()		// Prepare for returning
 497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx
 498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
 500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 896              		.loc 4 500 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 16
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900 0000 80B5     		push	{r7, lr}
 901              	.LCFI73:
 902              		.cfi_def_cfa_offset 8
 903              		.cfi_offset 7, -8
 904              		.cfi_offset 14, -4
 905 0002 84B0     		sub	sp, sp, #16
 906              	.LCFI74:
 907              		.cfi_def_cfa_offset 24
 908 0004 00AF     		add	r7, sp, #0
 909              	.LCFI75:
 910              		.cfi_def_cfa_register 7
 911 0006 7860     		str	r0, [r7, #4]
 501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xResult = 0;
 912              		.loc 4 501 0
 913 0008 0023     		movs	r3, #0
 914 000a FB60     		str	r3, [r7, #12]
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xReady = pdFALSE;
 915              		.loc 4 502 0
 916 000c 0023     		movs	r3, #0
 917 000e BB60     		str	r3, [r7, #8]
 503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 918              		.loc 4 504 0
 919 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccyb6dex.s 			page 46


 920 0012 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 921 0016 042B     		cmp	r3, #4
 922 0018 06D9     		bls	.L41
 923              		.loc 4 504 0 is_stmt 0 discriminator 1
 924 001a 7B68     		ldr	r3, [r7, #4]
 925 001c 9B6F     		ldr	r3, [r3, #120]
 926 001e 002B     		cmp	r3, #0
 927 0020 02D0     		beq	.L41
 505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
 507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		this data to the windowing system to it can be transmitted. */
 508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPAddTxData( pxSocket );
 928              		.loc 4 508 0 is_stmt 1
 929 0022 7868     		ldr	r0, [r7, #4]
 930 0024 FFF7FEFF 		bl	prvTCPAddTxData
 931              	.L41:
 509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if ipconfigUSE_TCP_WIN == 1
 512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 932              		.loc 4 513 0
 933 0028 7B68     		ldr	r3, [r7, #4]
 934 002a DB6F     		ldr	r3, [r3, #124]
 935 002c 002B     		cmp	r3, #0
 936 002e 2ED0     		beq	.L42
 514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The first task of this regular socket check is to send-out delayed
 516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ACK's. */
 517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 937              		.loc 4 517 0
 938 0030 7B68     		ldr	r3, [r7, #4]
 939 0032 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 940 0036 03F02003 		and	r3, r3, #32
 941 003a DBB2     		uxtb	r3, r3
 942 003c 002B     		cmp	r3, #0
 943 003e 1AD1     		bne	.L43
 518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Earlier data was received but not yet acknowledged.  This
 520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				function is called when the TCP timer for the socket expires, the
 521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ACK may be sent now. */
 522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 944              		.loc 4 522 0
 945 0040 7B68     		ldr	r3, [r7, #4]
 946 0042 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 947 0046 002B     		cmp	r3, #0
 948 0048 0DD0     		beq	.L44
 523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 949              		.loc 4 524 0
 950 004a 1F4B     		ldr	r3, .L51
 951 004c 1B68     		ldr	r3, [r3]
 952 004e 012B     		cmp	r3, #1
 525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
 526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %u)\n",
 527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->usLocalPort,
 528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.usRemotePort,
ARM GAS  /tmp/ccyb6dex.s 			page 47


 529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFi
 530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSe
 531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
 532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
 533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF
 953              		.loc 4 534 0
 954 0050 7B68     		ldr	r3, [r7, #4]
 955 0052 DB6F     		ldr	r3, [r3, #124]
 956 0054 7868     		ldr	r0, [r7, #4]
 957 0056 1946     		mov	r1, r3
 958 0058 2822     		movs	r2, #40
 959 005a 0123     		movs	r3, #1
 960 005c FFF7FEFF 		bl	prvTCPReturnPacket
 535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
 538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						/* The ownership has been passed to the SEND routine,
 539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						clear the pointer to it. */
 540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.pxAckMessage = NULL;
 961              		.loc 4 540 0
 962 0060 7B68     		ldr	r3, [r7, #4]
 963 0062 0022     		movs	r2, #0
 964 0064 DA67     		str	r2, [r3, #124]
 965              	.L44:
 541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
 542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					#endif /* ipconfigZERO_COPY_TX_DRIVER */
 543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( prvTCPNextTimeout( pxSocket ) > 1 )
 966              		.loc 4 544 0
 967 0066 7868     		ldr	r0, [r7, #4]
 968 0068 FFF7FEFF 		bl	prvTCPNextTimeout
 969 006c 0346     		mov	r3, r0
 970 006e 012B     		cmp	r3, #1
 971 0070 01D9     		bls	.L43
 545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					/* Tell the code below that this function is ready. */
 547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xReady = pdTRUE;
 972              		.loc 4 547 0
 973 0072 0123     		movs	r3, #1
 974 0074 BB60     		str	r3, [r7, #8]
 975              	.L43:
 548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
 551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* The user wants to perform an active shutdown(), skip sending
 553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				the	delayed	ACK.  The function prvTCPSendPacket() will send the
 554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FIN	along with the ACK's. */
 555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 976              		.loc 4 557 0
 977 0076 7B68     		ldr	r3, [r7, #4]
 978 0078 DB6F     		ldr	r3, [r3, #124]
 979 007a 002B     		cmp	r3, #0
 980 007c 07D0     		beq	.L42
ARM GAS  /tmp/ccyb6dex.s 			page 48


 558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 981              		.loc 4 559 0
 982 007e 7B68     		ldr	r3, [r7, #4]
 983 0080 DB6F     		ldr	r3, [r3, #124]
 984 0082 1846     		mov	r0, r3
 985 0084 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxAckMessage = NULL;
 986              		.loc 4 560 0
 987 0088 7B68     		ldr	r3, [r7, #4]
 988 008a 0022     		movs	r2, #0
 989 008c DA67     		str	r2, [r3, #124]
 990              	.L42:
 561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigUSE_TCP_WIN */
 565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xReady == pdFALSE )
 991              		.loc 4 566 0
 992 008e BB68     		ldr	r3, [r7, #8]
 993 0090 002B     		cmp	r3, #0
 994 0092 13D1     		bne	.L47
 567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The second task of this regular socket check is sending out data. */
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 995              		.loc 4 569 0
 996 0094 7B68     		ldr	r3, [r7, #4]
 997 0096 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 998 009a 042B     		cmp	r3, #4
 999 009c 04D8     		bhi	.L48
 570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 1000              		.loc 4 570 0 discriminator 1
 1001 009e 7B68     		ldr	r3, [r7, #4]
 1002 00a0 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 1003              		.loc 4 569 0 discriminator 1
 1004 00a4 022B     		cmp	r3, #2
 1005 00a6 02D1     		bne	.L49
 1006              	.L48:
 571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			prvTCPSendPacket( pxSocket );
 1007              		.loc 4 572 0
 1008 00a8 7868     		ldr	r0, [r7, #4]
 1009 00aa FFF7FEFF 		bl	prvTCPSendPacket
 1010              	.L49:
 573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Set the time-out for the next wakeup for this socket. */
 576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPNextTimeout( pxSocket );
 1011              		.loc 4 576 0
 1012 00ae 7868     		ldr	r0, [r7, #4]
 1013 00b0 FFF7FEFF 		bl	prvTCPNextTimeout
 577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigTCP_HANG_PROTECTION == 1 )
 579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* In all (non-connected) states in which keep-alive messages can not be sent
ARM GAS  /tmp/ccyb6dex.s 			page 49


 581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			the anti-hang protocol will close sockets that are 'hanging'. */
 582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xResult = prvTCPStatusAgeCheck( pxSocket );
 1014              		.loc 4 582 0
 1015 00b4 7868     		ldr	r0, [r7, #4]
 1016 00b6 FFF7FEFF 		bl	prvTCPStatusAgeCheck
 1017 00ba F860     		str	r0, [r7, #12]
 1018              	.L47:
 583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif
 585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xResult;
 1019              		.loc 4 587 0
 1020 00bc FB68     		ldr	r3, [r7, #12]
 588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 1021              		.loc 4 588 0
 1022 00be 1846     		mov	r0, r3
 1023 00c0 1037     		adds	r7, r7, #16
 1024              	.LCFI76:
 1025              		.cfi_def_cfa_offset 8
 1026 00c2 BD46     		mov	sp, r7
 1027              	.LCFI77:
 1028              		.cfi_def_cfa_register 13
 1029              		@ sp needed
 1030 00c4 80BD     		pop	{r7, pc}
 1031              	.L52:
 1032 00c6 00BF     		.align	2
 1033              	.L51:
 1034 00c8 00000000 		.word	xTCPWindowLoggingLevel
 1035              		.cfi_endproc
 1036              	.LFE31:
 1038              		.section	.text.prvTCPSendPacket,"ax",%progbits
 1039              		.align	2
 1040              		.thumb
 1041              		.thumb_func
 1043              	prvTCPSendPacket:
 1044              	.LFB32:
 589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvTCPSendPacket() will be called when the socket time-out has been reached.
 593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * It is only called by xTCPSocketCheck().
 594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
 596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 1045              		.loc 4 596 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 24
 1048              		@ frame_needed = 1, uses_anonymous_args = 0
 1049 0000 80B5     		push	{r7, lr}
 1050              	.LCFI78:
 1051              		.cfi_def_cfa_offset 8
 1052              		.cfi_offset 7, -8
 1053              		.cfi_offset 14, -4
 1054 0002 86B0     		sub	sp, sp, #24
 1055              	.LCFI79:
 1056              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccyb6dex.s 			page 50


 1057 0004 00AF     		add	r7, sp, #0
 1058              	.LCFI80:
 1059              		.cfi_def_cfa_register 7
 1060 0006 7860     		str	r0, [r7, #4]
 597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lResult = 0;
 1061              		.loc 4 597 0
 1062 0008 0023     		movs	r3, #0
 1063 000a 7B61     		str	r3, [r7, #20]
 598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength;
 599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket;
 600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 1064              		.loc 4 602 0
 1065 000c 7B68     		ldr	r3, [r7, #4]
 1066 000e 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 1067 0012 022B     		cmp	r3, #2
 1068 0014 10D0     		beq	.L54
 603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The connection is in s state other than SYN. */
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer = NULL;
 1069              		.loc 4 605 0
 1070 0016 0023     		movs	r3, #0
 1071 0018 BB60     		str	r3, [r7, #8]
 606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* prvTCPSendRepeated() will only create a network buffer if necessary,
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		i.e. when data must be sent to the peer. */
 609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 1072              		.loc 4 609 0
 1073 001a 07F10803 		add	r3, r7, #8
 1074 001e 7868     		ldr	r0, [r7, #4]
 1075 0020 1946     		mov	r1, r3
 1076 0022 FFF7FEFF 		bl	prvTCPSendRepeated
 1077 0026 7861     		str	r0, [r7, #20]
 610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxNetworkBuffer != NULL )
 1078              		.loc 4 611 0
 1079 0028 BB68     		ldr	r3, [r7, #8]
 1080 002a 002B     		cmp	r3, #0
 1081 002c 3FD0     		beq	.L56
 612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 1082              		.loc 4 613 0
 1083 002e BB68     		ldr	r3, [r7, #8]
 1084 0030 1846     		mov	r0, r3
 1085 0032 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 1086 0036 3AE0     		b	.L56
 1087              	.L54:
 614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
 617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 1088              		.loc 4 618 0
 1089 0038 7B68     		ldr	r3, [r7, #4]
 1090 003a 93F85230 		ldrb	r3, [r3, #82]	@ zero_extendqisi2
 1091 003e 022B     		cmp	r3, #2
ARM GAS  /tmp/ccyb6dex.s 			page 51


 1092 0040 04D9     		bls	.L57
 619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The connection is in the SYN status. The packet will be repeated
 621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			to most 3 times.  When there is no response, the socket get the
 622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			status 'eCLOSE_WAIT'. */
 623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
 624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
 625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
 626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 1093              		.loc 4 626 0
 1094 0042 7868     		ldr	r0, [r7, #4]
 1095 0044 0821     		movs	r1, #8
 1096 0046 FFF7FEFF 		bl	vTCPStateChange
 1097 004a 30E0     		b	.L56
 1098              	.L57:
 627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( p
 1099              		.loc 4 628 0
 1100 004c 7B68     		ldr	r3, [r7, #4]
 1101 004e 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 1102 0052 03F00803 		and	r3, r3, #8
 1103 0056 DBB2     		uxtb	r3, r3
 1104 0058 002B     		cmp	r3, #0
 1105 005a 05D1     		bne	.L58
 1106              		.loc 4 628 0 is_stmt 0 discriminator 1
 1107 005c 7868     		ldr	r0, [r7, #4]
 1108 005e FFF7FEFF 		bl	prvTCPPrepareConnect
 1109 0062 0346     		mov	r3, r0
 1110 0064 012B     		cmp	r3, #1
 1111 0066 22D1     		bne	.L56
 1112              	.L58:
 629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Or else, if the connection has been prepared, or can be prepared
 631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			now, proceed to send the packet with the SYN flag.
 632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
 633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			the Ethernet address of the peer or the gateway is found. */
 634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 1113              		.loc 4 634 0 is_stmt 1
 1114 0068 7B68     		ldr	r3, [r7, #4]
 1115 006a 8233     		adds	r3, r3, #130
 1116 006c 3B61     		str	r3, [r7, #16]
 635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#if( ipconfigUSE_TCP_TIMESTAMPS == 1 )
 637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* When TCP time stamps are enabled, but they will only be applied
 639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if the peer is outside the netmask, usually on the internet.
 640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				Packages sent on a LAN are usually too big to carry time stamps. */
 641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( ( ( pxSocket->u.xTCP.ulRemoteIP ^ FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) ) & xNetwor
 642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.xTCPWindow.u.bits.bTimeStamps = pdTRUE_UNSIGNED;
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#endif
 647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
 649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			the proper options: The size of MSS and whether SACK's are
 650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			allowed. */
ARM GAS  /tmp/ccyb6dex.s 			page 52


 651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 1117              		.loc 4 651 0
 1118 006e 7868     		ldr	r0, [r7, #4]
 1119 0070 3969     		ldr	r1, [r7, #16]
 1120 0072 FFF7FEFF 		bl	prvSetSynAckOptions
 1121 0076 F860     		str	r0, [r7, #12]
 652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Return the number of bytes to be sent. */
 654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			lResult = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 1122              		.loc 4 654 0
 1123 0078 FB68     		ldr	r3, [r7, #12]
 1124 007a 2833     		adds	r3, r3, #40
 1125 007c 7B61     		str	r3, [r7, #20]
 655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
 657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			uxOptionsLength is always a multiple of 4.  The complete expression
 658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			would be:
 659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
 660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) <<
 1126              		.loc 4 660 0
 1127 007e FB68     		ldr	r3, [r7, #12]
 1128 0080 DBB2     		uxtb	r3, r3
 1129 0082 1433     		adds	r3, r3, #20
 1130 0084 DBB2     		uxtb	r3, r3
 1131 0086 9B00     		lsls	r3, r3, #2
 1132 0088 DAB2     		uxtb	r2, r3
 1133 008a 3B69     		ldr	r3, [r7, #16]
 1134 008c 83F82E20 		strb	r2, [r3, #46]
 661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Repeat Count is used for a connecting socket, to limit the number
 663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			of tries. */
 664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucRepCount++;
 1135              		.loc 4 664 0
 1136 0090 7B68     		ldr	r3, [r7, #4]
 1137 0092 93F85230 		ldrb	r3, [r3, #82]	@ zero_extendqisi2
 1138 0096 0133     		adds	r3, r3, #1
 1139 0098 DAB2     		uxtb	r2, r3
 1140 009a 7B68     		ldr	r3, [r7, #4]
 1141 009c 83F85220 		strb	r2, [r3, #82]
 665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Send the SYN message to make a connection.  The messages is
 667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			stored in the socket field 'xPacket'.  It will be wrapped in a
 668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pseudo network buffer descriptor before it will be sent. */
 669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 1142              		.loc 4 669 0
 1143 00a0 7B69     		ldr	r3, [r7, #20]
 1144 00a2 7868     		ldr	r0, [r7, #4]
 1145 00a4 0021     		movs	r1, #0
 1146 00a6 1A46     		mov	r2, r3
 1147 00a8 0023     		movs	r3, #0
 1148 00aa FFF7FEFF 		bl	prvTCPReturnPacket
 1149              	.L56:
 670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Return the total number of bytes sent. */
 674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return lResult;
ARM GAS  /tmp/ccyb6dex.s 			page 53


 1150              		.loc 4 674 0
 1151 00ae 7B69     		ldr	r3, [r7, #20]
 675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 1152              		.loc 4 675 0
 1153 00b0 1846     		mov	r0, r3
 1154 00b2 1837     		adds	r7, r7, #24
 1155              	.LCFI81:
 1156              		.cfi_def_cfa_offset 8
 1157 00b4 BD46     		mov	sp, r7
 1158              	.LCFI82:
 1159              		.cfi_def_cfa_register 13
 1160              		@ sp needed
 1161 00b6 80BD     		pop	{r7, pc}
 1162              		.cfi_endproc
 1163              	.LFE32:
 1165              		.section	.text.prvTCPSendRepeated,"ax",%progbits
 1166              		.align	2
 1167              		.thumb
 1168              		.thumb_func
 1170              	prvTCPSendRepeated:
 1171              	.LFB33:
 676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvTCPSendRepeated will try to send a series of messages, as long as there is
 680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * data to be sent and as long as the transmit window isn't full.
 681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetw
 683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 1172              		.loc 4 683 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 24
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176 0000 80B5     		push	{r7, lr}
 1177              	.LCFI83:
 1178              		.cfi_def_cfa_offset 8
 1179              		.cfi_offset 7, -8
 1180              		.cfi_offset 14, -4
 1181 0002 86B0     		sub	sp, sp, #24
 1182              	.LCFI84:
 1183              		.cfi_def_cfa_offset 32
 1184 0004 00AF     		add	r7, sp, #0
 1185              	.LCFI85:
 1186              		.cfi_def_cfa_register 7
 1187 0006 7860     		str	r0, [r7, #4]
 1188 0008 3960     		str	r1, [r7]
 684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** UBaseType_t uxIndex;
 685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lResult = 0;
 1189              		.loc 4 685 0
 1190 000a 0023     		movs	r3, #0
 1191 000c 3B61     		str	r3, [r7, #16]
 686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength = 0u;
 1192              		.loc 4 686 0
 1193 000e 0023     		movs	r3, #0
 1194 0010 FB60     		str	r3, [r7, #12]
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t xSendLength;
 688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
ARM GAS  /tmp/ccyb6dex.s 			page 54


 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 1195              		.loc 4 689 0
 1196 0012 0023     		movs	r3, #0
 1197 0014 7B61     		str	r3, [r7, #20]
 1198 0016 1CE0     		b	.L61
 1199              	.L64:
 690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* prvTCPPrepareSend() might allocate a network buffer if there is data
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		to be sent. */
 693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 1200              		.loc 4 693 0
 1201 0018 7868     		ldr	r0, [r7, #4]
 1202 001a 3968     		ldr	r1, [r7]
 1203 001c FA68     		ldr	r2, [r7, #12]
 1204 001e FFF7FEFF 		bl	prvTCPPrepareSend
 1205 0022 B860     		str	r0, [r7, #8]
 694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( xSendLength <= 0 )
 1206              		.loc 4 694 0
 1207 0024 BB68     		ldr	r3, [r7, #8]
 1208 0026 002B     		cmp	r3, #0
 1209 0028 00DC     		bgt	.L62
 695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 1210              		.loc 4 696 0
 1211 002a 15E0     		b	.L63
 1212              	.L62:
 697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* And return the packet to the peer. */
 700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_D
 1213              		.loc 4 700 0 discriminator 2
 1214 002c 3B68     		ldr	r3, [r7]
 1215 002e 1A68     		ldr	r2, [r3]
 1216 0030 BB68     		ldr	r3, [r7, #8]
 1217 0032 7868     		ldr	r0, [r7, #4]
 1218 0034 1146     		mov	r1, r2
 1219 0036 1A46     		mov	r2, r3
 1220 0038 0123     		movs	r3, #1
 1221 003a FFF7FEFF 		bl	prvTCPReturnPacket
 701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			*ppxNetworkBuffer = NULL;
 1222              		.loc 4 704 0 discriminator 2
 1223 003e 3B68     		ldr	r3, [r7]
 1224 0040 0022     		movs	r2, #0
 1225 0042 1A60     		str	r2, [r3]
 705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigZERO_COPY_TX_DRIVER */
 707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lResult += xSendLength;
 1226              		.loc 4 708 0 discriminator 2
 1227 0044 3A69     		ldr	r2, [r7, #16]
 1228 0046 BB68     		ldr	r3, [r7, #8]
 1229 0048 1344     		add	r3, r3, r2
 1230 004a 3B61     		str	r3, [r7, #16]
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
ARM GAS  /tmp/ccyb6dex.s 			page 55


 1231              		.loc 4 689 0 discriminator 2
 1232 004c 7B69     		ldr	r3, [r7, #20]
 1233 004e 0133     		adds	r3, r3, #1
 1234 0050 7B61     		str	r3, [r7, #20]
 1235              	.L61:
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 1236              		.loc 4 689 0 is_stmt 0 discriminator 1
 1237 0052 7B69     		ldr	r3, [r7, #20]
 1238 0054 072B     		cmp	r3, #7
 1239 0056 DFD9     		bls	.L64
 1240              	.L63:
 709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Return the total number of bytes sent. */
 712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return lResult;
 1241              		.loc 4 712 0 is_stmt 1
 1242 0058 3B69     		ldr	r3, [r7, #16]
 713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 1243              		.loc 4 713 0
 1244 005a 1846     		mov	r0, r3
 1245 005c 1837     		adds	r7, r7, #24
 1246              	.LCFI86:
 1247              		.cfi_def_cfa_offset 8
 1248 005e BD46     		mov	sp, r7
 1249              	.LCFI87:
 1250              		.cfi_def_cfa_register 13
 1251              		@ sp needed
 1252 0060 80BD     		pop	{r7, pc}
 1253              		.cfi_endproc
 1254              	.LFE33:
 1256 0062 00BF     		.section	.text.prvTCPReturnPacket,"ax",%progbits
 1257              		.align	2
 1258              		.thumb
 1259              		.thumb_func
 1261              	prvTCPReturnPacket:
 1262              	.LFB34:
 714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Return (or send) a packet the the peer.  The data is stored in pxBuffer,
 718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * which may either point to a real network buffer or to a TCP socket field
 719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * the data to the NIC.
 721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
 722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBu
 723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 1263              		.loc 4 723 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 96
 1266              		@ frame_needed = 1, uses_anonymous_args = 0
 1267 0000 80B5     		push	{r7, lr}
 1268              	.LCFI88:
 1269              		.cfi_def_cfa_offset 8
 1270              		.cfi_offset 7, -8
 1271              		.cfi_offset 14, -4
 1272 0002 98B0     		sub	sp, sp, #96
 1273              	.LCFI89:
ARM GAS  /tmp/ccyb6dex.s 			page 56


 1274              		.cfi_def_cfa_offset 104
 1275 0004 00AF     		add	r7, sp, #0
 1276              	.LCFI90:
 1277              		.cfi_def_cfa_register 7
 1278 0006 F860     		str	r0, [r7, #12]
 1279 0008 B960     		str	r1, [r7, #8]
 1280 000a 7A60     		str	r2, [r7, #4]
 1281 000c 3B60     		str	r3, [r7]
 724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket;
 725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** IPHeader_t *pxIPHeader;
 726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** EthernetHeader_t *pxEthernetHeader;
 727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
 728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow;
 729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** NetworkBufferDescriptor_t xTempBuffer;
 730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* For sending, a pseudo network buffer will be used, as explained above. */
 731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxNetworkBuffer == NULL )
 1282              		.loc 4 732 0
 1283 000e BB68     		ldr	r3, [r7, #8]
 1284 0010 002B     		cmp	r3, #0
 1285 0012 09D1     		bne	.L67
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer = &xTempBuffer;
 1286              		.loc 4 734 0
 1287 0014 07F11003 		add	r3, r7, #16
 1288 0018 BB60     		str	r3, [r7, #8]
 735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
 737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xTempBuffer.pxNextBuffer = NULL;
 739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif
 741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 1289              		.loc 4 741 0
 1290 001a FB68     		ldr	r3, [r7, #12]
 1291 001c 8233     		adds	r3, r3, #130
 1292 001e BB62     		str	r3, [r7, #40]
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 1293              		.loc 4 742 0
 1294 0020 4623     		movs	r3, #70
 1295 0022 FB62     		str	r3, [r7, #44]
 743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xReleaseAfterSend = pdFALSE;
 1296              		.loc 4 743 0
 1297 0024 0023     		movs	r3, #0
 1298 0026 3B60     		str	r3, [r7]
 1299              	.L67:
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( xReleaseAfterSend == pdFALSE )
 1300              		.loc 4 748 0
 1301 0028 3B68     		ldr	r3, [r7]
 1302 002a 002B     		cmp	r3, #0
 1303 002c 08D1     		bne	.L68
 749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( BaseType_t ) pxNetw
ARM GAS  /tmp/ccyb6dex.s 			page 57


 1304              		.loc 4 750 0
 1305 002e BB68     		ldr	r3, [r7, #8]
 1306 0030 DB69     		ldr	r3, [r3, #28]
 1307 0032 B868     		ldr	r0, [r7, #8]
 1308 0034 1946     		mov	r1, r3
 1309 0036 FFF7FEFF 		bl	pxDuplicateNetworkBufferWithDescriptor
 1310 003a B860     		str	r0, [r7, #8]
 751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxNetworkBuffer == NULL )
 752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xReleaseAfterSend = pdTRUE;
 1311              		.loc 4 755 0
 1312 003c 0123     		movs	r3, #1
 1313 003e 3B60     		str	r3, [r7]
 1314              	.L68:
 756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigZERO_COPY_TX_DRIVER */
 759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxNetworkBuffer != NULL )
 1315              		.loc 4 760 0
 1316 0040 BB68     		ldr	r3, [r7, #8]
 1317 0042 002B     		cmp	r3, #0
 1318 0044 00F08C81 		beq	.L66
 761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 1319              		.loc 4 762 0
 1320 0048 BB68     		ldr	r3, [r7, #8]
 1321 004a 9B69     		ldr	r3, [r3, #24]
 1322 004c FB64     		str	r3, [r7, #76]
 763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader = &pxTCPPacket->xIPHeader;
 1323              		.loc 4 763 0
 1324 004e FB6C     		ldr	r3, [r7, #76]
 1325 0050 0E33     		adds	r3, r3, #14
 1326 0052 BB64     		str	r3, [r7, #72]
 764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 1327              		.loc 4 764 0
 1328 0054 FB6C     		ldr	r3, [r7, #76]
 1329 0056 7B64     		str	r3, [r7, #68]
 765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Fill the packet, using hton translations. */
 767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket != NULL )
 1330              		.loc 4 767 0
 1331 0058 FB68     		ldr	r3, [r7, #12]
 1332 005a 002B     		cmp	r3, #0
 1333 005c 00F0ED80 		beq	.L70
 768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Calculate the space in the RX buffer in order to advertise the
 770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			size of this socket's reception window. */
 771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 1334              		.loc 4 771 0
 1335 0060 FB68     		ldr	r3, [r7, #12]
 1336 0062 DC33     		adds	r3, r3, #220
 1337 0064 3B64     		str	r3, [r7, #64]
 772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.rxStream != NULL )
ARM GAS  /tmp/ccyb6dex.s 			page 58


 1338              		.loc 4 773 0
 1339 0066 FB68     		ldr	r3, [r7, #12]
 1340 0068 5B6F     		ldr	r3, [r3, #116]
 1341 006a 002B     		cmp	r3, #0
 1342 006c 06D0     		beq	.L71
 774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* An RX stream was created already, see how much space is
 776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				available. */
 777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 1343              		.loc 4 777 0
 1344 006e FB68     		ldr	r3, [r7, #12]
 1345 0070 5B6F     		ldr	r3, [r3, #116]
 1346 0072 1846     		mov	r0, r3
 1347 0074 FFF7FEFF 		bl	uxStreamBufferFrontSpace
 1348 0078 F865     		str	r0, [r7, #92]
 1349 007a 02E0     		b	.L72
 1350              	.L71:
 778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
 780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* No RX stream has been created, the full stream size is
 782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				available. */
 783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 1351              		.loc 4 783 0
 1352 007c FB68     		ldr	r3, [r7, #12]
 1353 007e DB6E     		ldr	r3, [r3, #108]
 1354 0080 FB65     		str	r3, [r7, #92]
 1355              	.L72:
 784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Take the minimum of the RX buffer space and the RX window size. */
 787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLen
 1356              		.loc 4 787 0
 1357 0082 FB68     		ldr	r3, [r7, #12]
 1358 0084 D3F8D020 		ldr	r2, [r3, #208]
 1359 0088 3B6C     		ldr	r3, [r7, #64]
 1360 008a 5B68     		ldr	r3, [r3, #4]
 1361 008c 1046     		mov	r0, r2
 1362 008e 1946     		mov	r1, r3
 1363 0090 FFF7FEFF 		bl	FreeRTOS_min_uint32
 1364 0094 B865     		str	r0, [r7, #88]
 788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStoppe
 1365              		.loc 4 789 0
 1366 0096 FB68     		ldr	r3, [r7, #12]
 1367 0098 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 1368 009c 23F07F03 		bic	r3, r3, #127
 1369 00a0 DBB2     		uxtb	r3, r3
 1370 00a2 002B     		cmp	r3, #0
 1371 00a4 07D1     		bne	.L73
 1372              		.loc 4 789 0 is_stmt 0 discriminator 1
 1373 00a6 FB68     		ldr	r3, [r7, #12]
 1374 00a8 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1375 00ac 03F00403 		and	r3, r3, #4
 1376 00b0 DBB2     		uxtb	r3, r3
 1377 00b2 002B     		cmp	r3, #0
 1378 00b4 01D0     		beq	.L74
ARM GAS  /tmp/ccyb6dex.s 			page 59


 1379              	.L73:
 790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* The low-water mark was reached, meaning there was little
 792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				space left.  The socket will wait until the application has read
 793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				or flushed the incoming data, and 'zero-window' will be
 794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				advertised. */
 795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulSpace = 0u;
 1380              		.loc 4 795 0 is_stmt 1
 1381 00b6 0023     		movs	r3, #0
 1382 00b8 BB65     		str	r3, [r7, #88]
 1383              	.L74:
 796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
 799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			the peer might start 'zero window probing', i.e. sending small packets
 800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			(1, 2, 4, 8... bytes). */
 801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 1384              		.loc 4 801 0
 1385 00ba FB68     		ldr	r3, [r7, #12]
 1386 00bc B3F84A30 		ldrh	r3, [r3, #74]
 1387 00c0 1A46     		mov	r2, r3
 1388 00c2 BB6D     		ldr	r3, [r7, #88]
 1389 00c4 9A42     		cmp	r2, r3
 1390 00c6 0AD9     		bls	.L75
 1391              		.loc 4 801 0 is_stmt 0 discriminator 1
 1392 00c8 FB68     		ldr	r3, [r7, #12]
 1393 00ca B3F84A30 		ldrh	r3, [r3, #74]
 1394 00ce 1A46     		mov	r2, r3
 1395 00d0 FB6D     		ldr	r3, [r7, #92]
 1396 00d2 9A42     		cmp	r2, r3
 1397 00d4 03D8     		bhi	.L75
 802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulSpace = pxSocket->u.xTCP.usCurMSS;
 1398              		.loc 4 803 0 is_stmt 1
 1399 00d6 FB68     		ldr	r3, [r7, #12]
 1400 00d8 B3F84A30 		ldrh	r3, [r3, #74]
 1401 00dc BB65     		str	r3, [r7, #88]
 1402              	.L75:
 804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Avoid overflow of the 16-bit win field. */
 807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 1403              		.loc 4 807 0
 1404 00de FB68     		ldr	r3, [r7, #12]
 1405 00e0 93F8C930 		ldrb	r3, [r3, #201]	@ zero_extendqisi2
 1406 00e4 1A46     		mov	r2, r3
 1407 00e6 BB6D     		ldr	r3, [r7, #88]
 1408 00e8 D340     		lsrs	r3, r3, r2
 1409 00ea 3B65     		str	r3, [r7, #80]
 808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ulWinSize > 0xfffcUL )
 1410              		.loc 4 808 0
 1411 00ec 3B6D     		ldr	r3, [r7, #80]
 1412 00ee 4FF6FC72 		movw	r2, #65532
 1413 00f2 9342     		cmp	r3, r2
 1414 00f4 02D9     		bls	.L76
 809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulWinSize = 0xfffcUL;
ARM GAS  /tmp/ccyb6dex.s 			page 60


 1415              		.loc 4 810 0
 1416 00f6 4FF6FC73 		movw	r3, #65532
 1417 00fa 3B65     		str	r3, [r7, #80]
 1418              	.L76:
 811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 1419              		.loc 4 813 0
 1420 00fc 3B6D     		ldr	r3, [r7, #80]
 1421 00fe 9BB2     		uxth	r3, r3
 1422 0100 1B02     		lsls	r3, r3, #8
 1423 0102 9AB2     		uxth	r2, r3
 1424 0104 3B6D     		ldr	r3, [r7, #80]
 1425 0106 9BB2     		uxth	r3, r3
 1426 0108 1B0A     		lsrs	r3, r3, #8
 1427 010a 9BB2     		uxth	r3, r3
 1428 010c 9BB2     		uxth	r3, r3
 1429 010e 1343     		orrs	r3, r3, r2
 1430 0110 9BB2     		uxth	r3, r3
 1431 0112 9AB2     		uxth	r2, r3
 1432 0114 FB6C     		ldr	r3, [r7, #76]
 1433 0116 1A86     		strh	r2, [r3, #48]	@ unaligned
 814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
 816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE )
 818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( ( xTCPWindowLoggingLevel != 0 ) && ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED 
 820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
 821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					size_t uxFrontSpace;
 822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						if(pxSocket->u.xTCP.rxStream != NULL)
 824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						{
 825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							uxFrontSpace =  uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream ) ;
 826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						}
 827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						else
 828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						{
 829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							uxFrontSpace = 0u;
 830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						}
 831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "%s: %lxip:%u: [%lu < %lu] winSize %ld\n",
 833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.bits.bLowWater ? "STOP" : "GO ",
 834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.ulRemoteIP,
 835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.usRemotePort,
 836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.bits.bLowWater ? pxSocket->u.xTCP.uxLittleSpace : uxFrontSpace, pxSocket->u
 837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							(int32_t) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumbe
 838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
 839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
 842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The new window size has been advertised, switch off the flag. */
 844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 1434              		.loc 4 844 0
 1435 0118 FA68     		ldr	r2, [r7, #12]
 1436 011a 92F84130 		ldrb	r3, [r2, #65]
 1437 011e 6FF30003 		bfc	r3, #0, #1
ARM GAS  /tmp/ccyb6dex.s 			page 61


 1438 0122 82F84130 		strb	r3, [r2, #65]
 845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Later on, when deciding to delay an ACK, a precise estimate is needed
 847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
 848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			highest sequence number minus 1 that the socket will accept. */
 849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 1439              		.loc 4 849 0
 1440 0126 3B6C     		ldr	r3, [r7, #64]
 1441 0128 1A69     		ldr	r2, [r3, #16]
 1442 012a BB6D     		ldr	r3, [r7, #88]
 1443 012c 1A44     		add	r2, r2, r3
 1444 012e FB68     		ldr	r3, [r7, #12]
 1445 0130 5A64     		str	r2, [r3, #68]
 850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#if( ipconfigTCP_KEEP_ALIVE == 1 )
 852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 1446              		.loc 4 852 0
 1447 0132 FB68     		ldr	r3, [r7, #12]
 1448 0134 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 1449 0138 03F00203 		and	r3, r3, #2
 1450 013c DBB2     		uxtb	r3, r3
 1451 013e 002B     		cmp	r3, #0
 1452 0140 2FD0     		beq	.L77
 853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					/* Sending a keep-alive packet, send the current sequence number
 855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					minus 1, which will	be recognised as a keep-alive packet an
 856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					responded to by acknowledging the last byte. */
 857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 1453              		.loc 4 857 0
 1454 0142 FA68     		ldr	r2, [r7, #12]
 1455 0144 92F84130 		ldrb	r3, [r2, #65]
 1456 0148 6FF34103 		bfc	r3, #1, #1
 1457 014c 82F84130 		strb	r3, [r2, #65]
 858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 1458              		.loc 4 858 0
 1459 0150 FA68     		ldr	r2, [r7, #12]
 1460 0152 92F84130 		ldrb	r3, [r2, #65]
 1461 0156 43F00403 		orr	r3, r3, #4
 1462 015a 82F84130 		strb	r3, [r2, #65]
 859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1
 1463              		.loc 4 860 0
 1464 015e FB68     		ldr	r3, [r7, #12]
 1465 0160 D3F80831 		ldr	r3, [r3, #264]
 1466 0164 5A1E     		subs	r2, r3, #1
 1467 0166 FB6C     		ldr	r3, [r7, #76]
 1468 0168 C3F82620 		str	r2, [r3, #38]	@ unaligned
 861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceN
 1469              		.loc 4 861 0
 1470 016c FB6C     		ldr	r3, [r7, #76]
 1471 016e D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 1472 0172 1A06     		lsls	r2, r3, #24
 1473 0174 FB6C     		ldr	r3, [r7, #76]
 1474 0176 D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 1475 017a 03F47F43 		and	r3, r3, #65280
 1476 017e 1B02     		lsls	r3, r3, #8
 1477 0180 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/ccyb6dex.s 			page 62


 1478 0182 FB6C     		ldr	r3, [r7, #76]
 1479 0184 D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 1480 0188 03F47F03 		and	r3, r3, #16711680
 1481 018c 1B0A     		lsrs	r3, r3, #8
 1482 018e 1A43     		orrs	r2, r2, r3
 1483 0190 FB6C     		ldr	r3, [r7, #76]
 1484 0192 D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 1485 0196 1B0E     		lsrs	r3, r3, #24
 1486 0198 1A43     		orrs	r2, r2, r3
 1487 019a FB6C     		ldr	r3, [r7, #76]
 1488 019c C3F82620 		str	r2, [r3, #38]	@ unaligned
 1489 01a0 34E0     		b	.L78
 1490              	.L77:
 862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				else
 864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#endif
 865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSeq
 1491              		.loc 4 866 0
 1492 01a2 FB68     		ldr	r3, [r7, #12]
 1493 01a4 D3F80831 		ldr	r3, [r3, #264]
 1494 01a8 1A06     		lsls	r2, r3, #24
 1495 01aa FB68     		ldr	r3, [r7, #12]
 1496 01ac D3F80831 		ldr	r3, [r3, #264]
 1497 01b0 03F47F43 		and	r3, r3, #65280
 1498 01b4 1B02     		lsls	r3, r3, #8
 1499 01b6 1A43     		orrs	r2, r2, r3
 1500 01b8 FB68     		ldr	r3, [r7, #12]
 1501 01ba D3F80831 		ldr	r3, [r3, #264]
 1502 01be 03F47F03 		and	r3, r3, #16711680
 1503 01c2 1B0A     		lsrs	r3, r3, #8
 1504 01c4 1A43     		orrs	r2, r2, r3
 1505 01c6 FB68     		ldr	r3, [r7, #12]
 1506 01c8 D3F80831 		ldr	r3, [r3, #264]
 1507 01cc 1B0E     		lsrs	r3, r3, #24
 1508 01ce 1A43     		orrs	r2, r2, r3
 1509 01d0 FB6C     		ldr	r3, [r7, #76]
 1510 01d2 C3F82620 		str	r2, [r3, #38]	@ unaligned
 867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 1511              		.loc 4 868 0
 1512 01d6 FB6C     		ldr	r3, [r7, #76]
 1513 01d8 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 1514 01dc 03F00103 		and	r3, r3, #1
 1515 01e0 002B     		cmp	r3, #0
 1516 01e2 13D0     		beq	.L78
 1517              	.LBB5:
 869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					/* Suppress FIN in case this packet carries earlier data to be
 871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					retransmitted. */
 872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) )
 1518              		.loc 4 872 0
 1519 01e4 7B68     		ldr	r3, [r7, #4]
 1520 01e6 283B     		subs	r3, r3, #40
 1521 01e8 FB63     		str	r3, [r7, #60]
 873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 1522              		.loc 4 873 0
ARM GAS  /tmp/ccyb6dex.s 			page 63


 1523 01ea 3B6C     		ldr	r3, [r7, #64]
 1524 01ec DA6A     		ldr	r2, [r3, #44]
 1525 01ee FB6B     		ldr	r3, [r7, #60]
 1526 01f0 1A44     		add	r2, r2, r3
 1527 01f2 3B6C     		ldr	r3, [r7, #64]
 1528 01f4 5B6A     		ldr	r3, [r3, #36]
 1529 01f6 9A42     		cmp	r2, r3
 1530 01f8 08D0     		beq	.L78
 874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
 875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 1531              		.loc 4 875 0
 1532 01fa FB6C     		ldr	r3, [r7, #76]
 1533 01fc 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 1534 0200 23F00103 		bic	r3, r3, #1
 1535 0204 DAB2     		uxtb	r2, r3
 1536 0206 FB6C     		ldr	r3, [r7, #76]
 1537 0208 83F82F20 		strb	r2, [r3, #47]
 1538              	.L78:
 1539              	.LBE5:
 876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
 877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
 878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							ulDataLen,
 879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxTCPWindow->tx.ulFINSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ) );
 880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
 881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Tell which sequence number is expected next time */
 885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 1540              		.loc 4 885 0
 1541 020c 3B6C     		ldr	r3, [r7, #64]
 1542 020e 1B69     		ldr	r3, [r3, #16]
 1543 0210 1A06     		lsls	r2, r3, #24
 1544 0212 3B6C     		ldr	r3, [r7, #64]
 1545 0214 1B69     		ldr	r3, [r3, #16]
 1546 0216 03F47F43 		and	r3, r3, #65280
 1547 021a 1B02     		lsls	r3, r3, #8
 1548 021c 1A43     		orrs	r2, r2, r3
 1549 021e 3B6C     		ldr	r3, [r7, #64]
 1550 0220 1B69     		ldr	r3, [r3, #16]
 1551 0222 03F47F03 		and	r3, r3, #16711680
 1552 0226 1B0A     		lsrs	r3, r3, #8
 1553 0228 1A43     		orrs	r2, r2, r3
 1554 022a 3B6C     		ldr	r3, [r7, #64]
 1555 022c 1B69     		ldr	r3, [r3, #16]
 1556 022e 1B0E     		lsrs	r3, r3, #24
 1557 0230 1A43     		orrs	r2, r2, r3
 1558 0232 FB6C     		ldr	r3, [r7, #76]
 1559 0234 C3F82A20 		str	r2, [r3, #42]	@ unaligned
 1560 0238 0DE0     		b	.L79
 1561              	.L70:
 1562              	.LBB6:
 886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
 888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Sending data without a socket, probably replying with a RST flag
 890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			Just swap the two sequence numbers. */
ARM GAS  /tmp/ccyb6dex.s 			page 64


 891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 1563              		.loc 4 891 0
 1564 023a FB6C     		ldr	r3, [r7, #76]
 1565 023c D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 1566 0240 BB63     		str	r3, [r7, #56]
 1567 0242 FB6C     		ldr	r3, [r7, #76]
 1568 0244 D3F82A20 		ldr	r2, [r3, #42]	@ unaligned
 1569 0248 FB6C     		ldr	r3, [r7, #76]
 1570 024a C3F82620 		str	r2, [r3, #38]	@ unaligned
 1571 024e FB6C     		ldr	r3, [r7, #76]
 1572 0250 BA6B     		ldr	r2, [r7, #56]
 1573 0252 C3F82A20 		str	r2, [r3, #42]	@ unaligned
 1574              	.L79:
 1575              	.LBE6:
 892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 1576              		.loc 4 894 0
 1577 0256 BB6C     		ldr	r3, [r7, #72]
 1578 0258 8022     		movs	r2, #128
 1579 025a 1A72     		strb	r2, [r3, #8]
 895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 1580              		.loc 4 895 0
 1581 025c 7B68     		ldr	r3, [r7, #4]
 1582 025e 9BB2     		uxth	r3, r3
 1583 0260 1B02     		lsls	r3, r3, #8
 1584 0262 9AB2     		uxth	r2, r3
 1585 0264 7B68     		ldr	r3, [r7, #4]
 1586 0266 1B0A     		lsrs	r3, r3, #8
 1587 0268 9BB2     		uxth	r3, r3
 1588 026a 1343     		orrs	r3, r3, r2
 1589 026c 9AB2     		uxth	r2, r3
 1590 026e BB6C     		ldr	r3, [r7, #72]
 1591 0270 5A80     		strh	r2, [r3, #2]	@ unaligned
 896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 1592              		.loc 4 896 0
 1593 0272 FB68     		ldr	r3, [r7, #12]
 1594 0274 002B     		cmp	r3, #0
 1595 0276 03D0     		beq	.L80
 1596              		.loc 4 896 0 is_stmt 0 discriminator 1
 1597 0278 3B4B     		ldr	r3, .L83
 1598 027a 5B69     		ldr	r3, [r3, #20]
 1599 027c 002B     		cmp	r3, #0
 1600 027e 03D1     		bne	.L81
 1601              	.L80:
 897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
 899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			and the IP-addresses must be swapped.
 900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			Also swap the IP-addresses in case the IP-tack doesn't have an
 901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ). */
 902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 1602              		.loc 4 902 0 is_stmt 1
 1603 0280 BB6C     		ldr	r3, [r7, #72]
 1604 0282 1B69     		ldr	r3, [r3, #16]	@ unaligned
 1605 0284 7B65     		str	r3, [r7, #84]
 1606 0286 02E0     		b	.L82
 1607              	.L81:
ARM GAS  /tmp/ccyb6dex.s 			page 65


 903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
 905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 1608              		.loc 4 906 0
 1609 0288 374B     		ldr	r3, .L83
 1610 028a 5B69     		ldr	r3, [r3, #20]
 1611 028c 7B65     		str	r3, [r7, #84]
 1612              	.L82:
 907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 1613              		.loc 4 908 0
 1614 028e BB6C     		ldr	r3, [r7, #72]
 1615 0290 DA68     		ldr	r2, [r3, #12]	@ unaligned
 1616 0292 BB6C     		ldr	r3, [r7, #72]
 1617 0294 1A61     		str	r2, [r3, #16]	@ unaligned
 909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 1618              		.loc 4 909 0
 1619 0296 BB6C     		ldr	r3, [r7, #72]
 1620 0298 7A6D     		ldr	r2, [r7, #84]
 1621 029a DA60     		str	r2, [r3, #12]	@ unaligned
 1622              	.LBB7:
 910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 1623              		.loc 4 910 0
 1624 029c FB6C     		ldr	r3, [r7, #76]
 1625 029e 93F82220 		ldrb	r2, [r3, #34]	@ zero_extendqisi2
 1626 02a2 93F82330 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 1627 02a6 1B02     		lsls	r3, r3, #8
 1628 02a8 1343     		orrs	r3, r3, r2
 1629 02aa FB86     		strh	r3, [r7, #54]	@ movhi
 1630 02ac FB6C     		ldr	r3, [r7, #76]
 1631 02ae 9B8C     		ldrh	r3, [r3, #36]	@ unaligned
 1632 02b0 9AB2     		uxth	r2, r3
 1633 02b2 FB6C     		ldr	r3, [r7, #76]
 1634 02b4 5A84     		strh	r2, [r3, #34]	@ unaligned
 1635 02b6 FB6C     		ldr	r3, [r7, #76]
 1636 02b8 FA8E     		ldrh	r2, [r7, #54]	@ movhi
 1637 02ba 9A84     		strh	r2, [r3, #36]	@ unaligned
 1638              	.LBE7:
 911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Just an increasing number. */
 913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 1639              		.loc 4 913 0
 1640 02bc 2B4B     		ldr	r3, .L83+4
 1641 02be 1B88     		ldrh	r3, [r3]
 1642 02c0 1B02     		lsls	r3, r3, #8
 1643 02c2 9AB2     		uxth	r2, r3
 1644 02c4 294B     		ldr	r3, .L83+4
 1645 02c6 1B88     		ldrh	r3, [r3]
 1646 02c8 1B0A     		lsrs	r3, r3, #8
 1647 02ca 9BB2     		uxth	r3, r3
 1648 02cc 9BB2     		uxth	r3, r3
 1649 02ce 1343     		orrs	r3, r3, r2
 1650 02d0 9BB2     		uxth	r3, r3
 1651 02d2 9AB2     		uxth	r2, r3
 1652 02d4 BB6C     		ldr	r3, [r7, #72]
 1653 02d6 9A80     		strh	r2, [r3, #4]	@ unaligned
ARM GAS  /tmp/ccyb6dex.s 			page 66


 914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		usPacketIdentifier++;
 1654              		.loc 4 914 0
 1655 02d8 244B     		ldr	r3, .L83+4
 1656 02da 1B88     		ldrh	r3, [r3]
 1657 02dc 0133     		adds	r3, r3, #1
 1658 02de 9AB2     		uxth	r2, r3
 1659 02e0 224B     		ldr	r3, .L83+4
 1660 02e2 1A80     		strh	r2, [r3]	@ movhi
 915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->usFragmentOffset = 0u;
 1661              		.loc 4 915 0
 1662 02e4 BB6C     		ldr	r3, [r7, #72]
 1663 02e6 0022     		movs	r2, #0
 1664 02e8 9A71     		strb	r2, [r3, #6]
 1665 02ea 0022     		movs	r2, #0
 1666 02ec DA71     		strb	r2, [r3, #7]
 916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
 918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* calculate the IP header checksum, in case the driver won't do that. */
 920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = 0x00u;
 921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHe
 922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* calculate the TCP checksum for an outgoing packet. */
 925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			usGenerateProtocolChecksum( (uint8_t*)pxTCPPacket, pdTRUE );
 926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* A calculated checksum of 0 must be inverted as 0 means the checksum
 928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			is disabled. */
 929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxTCPPacket->xTCPHeader.usChecksum == 0x00u )
 930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
 932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif
 935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
 937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer->pxNextBuffer = NULL;
 938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif
 939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Important: tell NIC driver how many bytes must be sent. */
 941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 1667              		.loc 4 941 0
 1668 02ee 7B68     		ldr	r3, [r7, #4]
 1669 02f0 03F10E02 		add	r2, r3, #14
 1670 02f4 BB68     		ldr	r3, [r7, #8]
 1671 02f6 DA61     		str	r2, [r3, #28]
 942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Fill in the destination MAC addresses. */
 944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xS
 1672              		.loc 4 944 0
 1673 02f8 7A6C     		ldr	r2, [r7, #68]
 1674 02fa 7B6C     		ldr	r3, [r7, #68]
 1675 02fc 0633     		adds	r3, r3, #6
 1676 02fe 1046     		mov	r0, r2
 1677 0300 1946     		mov	r1, r3
 1678 0302 0622     		movs	r2, #6
 1679 0304 FFF7FEFF 		bl	memcpy
ARM GAS  /tmp/ccyb6dex.s 			page 67


 945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			sizeof( pxEthernetHeader->xDestinationAddress ) );
 946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
 948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_
 1680              		.loc 4 948 0
 1681 0308 7B6C     		ldr	r3, [r7, #68]
 1682 030a 0633     		adds	r3, r3, #6
 1683 030c 1846     		mov	r0, r3
 1684 030e 1649     		ldr	r1, .L83
 1685 0310 0622     		movs	r2, #6
 1686 0312 FFF7FEFF 		bl	memcpy
 949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			BaseType_t xIndex;
 955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_printf( ( "prvTCPReturnPacket: length %lu\n", pxNetworkBuffer->xDataLength ) );
 957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHE
 958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
 959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0u;
 960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
 961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
 963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif
 965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Send! */
 967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 1687              		.loc 4 967 0
 1688 0316 B868     		ldr	r0, [r7, #8]
 1689 0318 3968     		ldr	r1, [r7]
 1690 031a FFF7FEFF 		bl	xNetworkInterfaceOutput
 968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( xReleaseAfterSend == pdFALSE )
 1691              		.loc 4 969 0
 1692 031e 3B68     		ldr	r3, [r7]
 1693 0320 002B     		cmp	r3, #0
 1694 0322 1DD1     		bne	.L66
 1695              	.LBB8:
 970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Swap-back some fields, as pxBuffer probably points to a socket field
 972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			containing the packet header. */
 973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 1696              		.loc 4 973 0
 1697 0324 FB6C     		ldr	r3, [r7, #76]
 1698 0326 93F82220 		ldrb	r2, [r3, #34]	@ zero_extendqisi2
 1699 032a 93F82330 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 1700 032e 1B02     		lsls	r3, r3, #8
 1701 0330 1343     		orrs	r3, r3, r2
 1702 0332 BB86     		strh	r3, [r7, #52]	@ movhi
 1703 0334 FB6C     		ldr	r3, [r7, #76]
 1704 0336 9B8C     		ldrh	r3, [r3, #36]	@ unaligned
 1705 0338 9AB2     		uxth	r2, r3
 1706 033a FB6C     		ldr	r3, [r7, #76]
 1707 033c 5A84     		strh	r2, [r3, #34]	@ unaligned
ARM GAS  /tmp/ccyb6dex.s 			page 68


 1708 033e FB6C     		ldr	r3, [r7, #76]
 1709 0340 BA8E     		ldrh	r2, [r7, #52]	@ movhi
 1710 0342 9A84     		strh	r2, [r3, #36]	@ unaligned
 1711              	.LBE8:
 974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 1712              		.loc 4 974 0
 1713 0344 FB6C     		ldr	r3, [r7, #76]
 1714 0346 D3F81E20 		ldr	r2, [r3, #30]	@ unaligned
 1715 034a FB6C     		ldr	r3, [r7, #76]
 1716 034c C3F81A20 		str	r2, [r3, #26]	@ unaligned
 975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes,
 1717              		.loc 4 975 0
 1718 0350 7B6C     		ldr	r3, [r7, #68]
 1719 0352 9A1D     		adds	r2, r3, #6
 1720 0354 7B6C     		ldr	r3, [r7, #68]
 1721 0356 1046     		mov	r0, r2
 1722 0358 1946     		mov	r1, r3
 1723 035a 0622     		movs	r2, #6
 1724 035c FFF7FEFF 		bl	memcpy
 1725              	.L66:
 976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
 978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
 979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
 980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
 981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	} /* if( pxNetworkBuffer != NULL ) */
 982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 1726              		.loc 4 982 0
 1727 0360 6037     		adds	r7, r7, #96
 1728              	.LCFI91:
 1729              		.cfi_def_cfa_offset 8
 1730 0362 BD46     		mov	sp, r7
 1731              	.LCFI92:
 1732              		.cfi_def_cfa_register 13
 1733              		@ sp needed
 1734 0364 80BD     		pop	{r7, pc}
 1735              	.L84:
 1736 0366 00BF     		.align	2
 1737              	.L83:
 1738 0368 00000000 		.word	xDefaultPartUDPPacketHeader
 1739 036c 00000000 		.word	usPacketIdentifier
 1740              		.cfi_endproc
 1741              	.LFE34:
 1743              		.section	.text.prvTCPCreateWindow,"ax",%progbits
 1744              		.align	2
 1745              		.thumb
 1746              		.thumb_func
 1748              	prvTCPCreateWindow:
 1749              	.LFB35:
 983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
 985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
 986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The SYN event is very important: the sequence numbers, which have a kind of
 987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * random starting value, are being synchronised.  The sliding window manager
 988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Size (MSS) in use.
 990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
ARM GAS  /tmp/ccyb6dex.s 			page 69


 991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
 992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 1750              		.loc 4 992 0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 8
 1753              		@ frame_needed = 1, uses_anonymous_args = 0
 1754 0000 B0B5     		push	{r4, r5, r7, lr}
 1755              	.LCFI93:
 1756              		.cfi_def_cfa_offset 16
 1757              		.cfi_offset 4, -16
 1758              		.cfi_offset 5, -12
 1759              		.cfi_offset 7, -8
 1760              		.cfi_offset 14, -4
 1761 0002 84B0     		sub	sp, sp, #16
 1762              	.LCFI94:
 1763              		.cfi_def_cfa_offset 32
 1764 0004 02AF     		add	r7, sp, #8
 1765              	.LCFI95:
 1766              		.cfi_def_cfa 7, 24
 1767 0006 7860     		str	r0, [r7, #4]
 993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xTCPWindowLoggingLevel )
 994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
 995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
 996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxLittleSpace ,
 997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxEnoughSpace,
 998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxRxStreamSize ) );
 999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	vTCPWindowCreate(
 1768              		.loc 4 999 0
 1769 0008 7B68     		ldr	r3, [r7, #4]
 1770 000a 03F1DC00 		add	r0, r3, #220
1000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		&pxSocket->u.xTCP.xTCPWindow,
1001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 1771              		.loc 4 1001 0
 1772 000e 7B68     		ldr	r3, [r7, #4]
 1773 0010 D3F8D430 		ldr	r3, [r3, #212]
 1774 0014 40F2B452 		movw	r2, #1460
 1775 0018 02FB03F1 		mul	r1, r2, r3
1002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 1776              		.loc 4 1002 0
 1777 001c 7B68     		ldr	r3, [r7, #4]
 1778 001e D3F8D830 		ldr	r3, [r3, #216]
 1779 0022 40F2B452 		movw	r2, #1460
 1780 0026 02FB03F5 		mul	r5, r2, r3
 999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		&pxSocket->u.xTCP.xTCPWindow,
 1781              		.loc 4 999 0
 1782 002a 7B68     		ldr	r3, [r7, #4]
 1783 002c D3F8EC40 		ldr	r4, [r3, #236]
 1784 0030 7B68     		ldr	r3, [r7, #4]
 1785 0032 D3F80831 		ldr	r3, [r3, #264]
1003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
1004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
1005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 1786              		.loc 4 1005 0
 1787 0036 7A68     		ldr	r2, [r7, #4]
 1788 0038 B2F84C20 		ldrh	r2, [r2, #76]
 999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		&pxSocket->u.xTCP.xTCPWindow,
 1789              		.loc 4 999 0
ARM GAS  /tmp/ccyb6dex.s 			page 70


 1790 003c 0093     		str	r3, [sp]
 1791 003e 0192     		str	r2, [sp, #4]
 1792 0040 2A46     		mov	r2, r5
 1793 0042 2346     		mov	r3, r4
 1794 0044 FFF7FEFF 		bl	vTCPWindowCreate
1006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 1795              		.loc 4 1006 0
 1796 0048 0837     		adds	r7, r7, #8
 1797              	.LCFI96:
 1798              		.cfi_def_cfa_offset 16
 1799 004a BD46     		mov	sp, r7
 1800              	.LCFI97:
 1801              		.cfi_def_cfa_register 13
 1802              		@ sp needed
 1803 004c B0BD     		pop	{r4, r5, r7, pc}
 1804              		.cfi_endproc
 1805              	.LFE35:
 1807 004e 00BF     		.section	.text.prvTCPPrepareConnect,"ax",%progbits
 1808              		.align	2
 1809              		.thumb
 1810              		.thumb_func
 1812              	prvTCPPrepareConnect:
 1813              	.LFB36:
1007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
1010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Connecting sockets have a special state: eCONNECT_SYN.  In this phase,
1011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * the Ethernet address of the target will be found using ARP.  In case the
1012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * target IP address is not within the netmask, the hardware address of the
1013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * gateway will be used.
1014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
1015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
1016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 1814              		.loc 4 1016 0
 1815              		.cfi_startproc
 1816              		@ args = 0, pretend = 0, frame = 40
 1817              		@ frame_needed = 1, uses_anonymous_args = 0
 1818 0000 80B5     		push	{r7, lr}
 1819              	.LCFI98:
 1820              		.cfi_def_cfa_offset 8
 1821              		.cfi_offset 7, -8
 1822              		.cfi_offset 14, -4
 1823 0002 8AB0     		sub	sp, sp, #40
 1824              	.LCFI99:
 1825              		.cfi_def_cfa_offset 48
 1826 0004 00AF     		add	r7, sp, #0
 1827              	.LCFI100:
 1828              		.cfi_def_cfa_register 7
 1829 0006 7860     		str	r0, [r7, #4]
1017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket;
1018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** IPHeader_t *pxIPHeader;
1019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** eARPLookupResult_t eReturned;
1020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulRemoteIP;
1021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** MACAddress_t xEthAddress;
1022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xReturn = pdTRUE;
 1830              		.loc 4 1022 0
 1831 0008 0123     		movs	r3, #1
ARM GAS  /tmp/ccyb6dex.s 			page 71


 1832 000a 7B62     		str	r3, [r7, #36]
1023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigHAS_PRINTF != 0 )
1025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Only necessary for nicer logging. */
1027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
 1833              		.loc 4 1027 0
 1834 000c 07F10C03 		add	r3, r7, #12
 1835 0010 1846     		mov	r0, r3
 1836 0012 0021     		movs	r1, #0
 1837 0014 0622     		movs	r2, #6
 1838 0016 FFF7FEFF 		bl	memset
1028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigHAS_PRINTF != 0 */
1030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 1839              		.loc 4 1031 0
 1840 001a 7B68     		ldr	r3, [r7, #4]
 1841 001c 9B6B     		ldr	r3, [r3, #56]
 1842 001e 1A06     		lsls	r2, r3, #24
 1843 0020 7B68     		ldr	r3, [r7, #4]
 1844 0022 9B6B     		ldr	r3, [r3, #56]
 1845 0024 03F47F43 		and	r3, r3, #65280
 1846 0028 1B02     		lsls	r3, r3, #8
 1847 002a 1A43     		orrs	r2, r2, r3
 1848 002c 7B68     		ldr	r3, [r7, #4]
 1849 002e 9B6B     		ldr	r3, [r3, #56]
 1850 0030 03F47F03 		and	r3, r3, #16711680
 1851 0034 1B0A     		lsrs	r3, r3, #8
 1852 0036 1A43     		orrs	r2, r2, r3
 1853 0038 7B68     		ldr	r3, [r7, #4]
 1854 003a 9B6B     		ldr	r3, [r3, #56]
 1855 003c 1B0E     		lsrs	r3, r3, #24
 1856 003e 1343     		orrs	r3, r3, r2
 1857 0040 7B61     		str	r3, [r7, #20]
1032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Determine the ARP cache status for the requested IP address. */
1034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 1858              		.loc 4 1034 0
 1859 0042 07F11402 		add	r2, r7, #20
 1860 0046 07F10C03 		add	r3, r7, #12
 1861 004a 1046     		mov	r0, r2
 1862 004c 1946     		mov	r1, r3
 1863 004e FFF7FEFF 		bl	eARPGetCacheEntry
 1864 0052 0346     		mov	r3, r0
 1865 0054 87F82330 		strb	r3, [r7, #35]
1035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	switch( eReturned )
 1866              		.loc 4 1036 0
 1867 0058 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1868 005c 012B     		cmp	r3, #1
 1869 005e 0ED0     		beq	.L92
1037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eARPCacheHit:		/* An ARP table lookup found a valid entry. */
1039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		break;				/* We can now prepare the SYN packet. */
1040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
1041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
ARM GAS  /tmp/ccyb6dex.s 			page 72


1042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	default:
1043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Count the number of times it couldn't find the ARP address. */
1044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucRepCount++;
 1870              		.loc 4 1044 0
 1871 0060 7B68     		ldr	r3, [r7, #4]
 1872 0062 93F85230 		ldrb	r3, [r3, #82]	@ zero_extendqisi2
 1873 0066 0133     		adds	r3, r3, #1
 1874 0068 DAB2     		uxtb	r2, r3
 1875 006a 7B68     		ldr	r3, [r7, #4]
 1876 006c 83F85220 		strb	r2, [r3, #82]
1045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
1047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulRemoteIP,
1048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_htonl( ulRemoteIP ),
1049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			eReturned,
1050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 0 ],
1051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 1 ],
1052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 2 ],
1053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 3 ],
1054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 4 ],
1055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 5 ] ) );
1056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* And issue a (new) ARP request */
1058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_OutputARPRequest( ulRemoteIP );
 1877              		.loc 4 1058 0
 1878 0070 7B69     		ldr	r3, [r7, #20]
 1879 0072 1846     		mov	r0, r3
 1880 0074 FFF7FEFF 		bl	FreeRTOS_OutputARPRequest
1059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xReturn = pdFALSE;
 1881              		.loc 4 1060 0
 1882 0078 0023     		movs	r3, #0
 1883 007a 7B62     		str	r3, [r7, #36]
 1884 007c 00E0     		b	.L89
 1885              	.L92:
1039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
 1886              		.loc 4 1039 0
 1887 007e 00BF     		nop
 1888              	.L89:
1061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xReturn != pdFALSE )
 1889              		.loc 4 1063 0
 1890 0080 7B6A     		ldr	r3, [r7, #36]
 1891 0082 002B     		cmp	r3, #0
 1892 0084 00F09180 		beq	.L90
1064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The MAC-address of the peer (or gateway) has been found,
1066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		now prepare the initial TCP packet and some fields in the socket. */
1067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 1893              		.loc 4 1067 0
 1894 0088 7B68     		ldr	r3, [r7, #4]
 1895 008a 8233     		adds	r3, r3, #130
 1896 008c FB61     		str	r3, [r7, #28]
1068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader = &pxTCPPacket->xIPHeader;
 1897              		.loc 4 1068 0
 1898 008e FB69     		ldr	r3, [r7, #28]
ARM GAS  /tmp/ccyb6dex.s 			page 73


 1899 0090 0E33     		adds	r3, r3, #14
 1900 0092 BB61     		str	r3, [r7, #24]
1069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* reset the retry counter to zero. */
1071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucRepCount = 0u;
 1901              		.loc 4 1071 0
 1902 0094 7B68     		ldr	r3, [r7, #4]
 1903 0096 0022     		movs	r2, #0
 1904 0098 83F85220 		strb	r2, [r3, #82]
1072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* And remember that the connect/SYN data are prepared. */
1074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 1905              		.loc 4 1074 0
 1906 009c 7A68     		ldr	r2, [r7, #4]
 1907 009e 92F84130 		ldrb	r3, [r2, #65]
 1908 00a2 43F00803 		orr	r3, r3, #8
 1909 00a6 82F84130 		strb	r3, [r2, #65]
1075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Now that the Ethernet address is known, the initial packet can be
1077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prepared. */
1078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastP
 1910              		.loc 4 1078 0
 1911 00aa 7B68     		ldr	r3, [r7, #4]
 1912 00ac 8233     		adds	r3, r3, #130
 1913 00ae 1846     		mov	r0, r3
 1914 00b0 0021     		movs	r1, #0
 1915 00b2 4622     		movs	r2, #70
 1916 00b4 FFF7FEFF 		bl	memset
1079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Write the Ethernet address in Source, because it will be swapped by
1081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPReturnPacket(). */
1082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 1917              		.loc 4 1082 0
 1918 00b8 FB69     		ldr	r3, [r7, #28]
 1919 00ba 9A1D     		adds	r2, r3, #6
 1920 00bc 07F10C03 		add	r3, r7, #12
 1921 00c0 1046     		mov	r0, r2
 1922 00c2 1946     		mov	r1, r3
 1923 00c4 0622     		movs	r2, #6
 1924 00c6 FFF7FEFF 		bl	memcpy
1083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
1085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 1925              		.loc 4 1085 0
 1926 00ca FB69     		ldr	r3, [r7, #28]
 1927 00cc 0022     		movs	r2, #0
 1928 00ce 42F00802 		orr	r2, r2, #8
 1929 00d2 1A73     		strb	r2, [r3, #12]
 1930 00d4 0022     		movs	r2, #0
 1931 00d6 5A73     		strb	r2, [r3, #13]
1086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucVersionHeaderLength = 0x45u;
 1932              		.loc 4 1087 0
 1933 00d8 BB69     		ldr	r3, [r7, #24]
 1934 00da 4522     		movs	r2, #69
 1935 00dc 1A70     		strb	r2, [r3]
1088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHead
ARM GAS  /tmp/ccyb6dex.s 			page 74


 1936              		.loc 4 1088 0
 1937 00de BB69     		ldr	r3, [r7, #24]
 1938 00e0 0022     		movs	r2, #0
 1939 00e2 9A70     		strb	r2, [r3, #2]
 1940 00e4 0022     		movs	r2, #0
 1941 00e6 42F03802 		orr	r2, r2, #56
 1942 00ea DA70     		strb	r2, [r3, #3]
1089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 1943              		.loc 4 1089 0
 1944 00ec BB69     		ldr	r3, [r7, #24]
 1945 00ee 8022     		movs	r2, #128
 1946 00f0 1A72     		strb	r2, [r3, #8]
1090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 1947              		.loc 4 1091 0
 1948 00f2 BB69     		ldr	r3, [r7, #24]
 1949 00f4 0622     		movs	r2, #6
 1950 00f6 5A72     		strb	r2, [r3, #9]
1092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
1094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		will swap them back while replying. */
1095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 1951              		.loc 4 1095 0
 1952 00f8 2E4B     		ldr	r3, .L93
 1953 00fa 5A69     		ldr	r2, [r3, #20]
 1954 00fc BB69     		ldr	r3, [r7, #24]
 1955 00fe 1A61     		str	r2, [r3, #16]	@ unaligned
1096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 1956              		.loc 4 1096 0
 1957 0100 7B68     		ldr	r3, [r7, #4]
 1958 0102 9B6B     		ldr	r3, [r3, #56]
 1959 0104 1A06     		lsls	r2, r3, #24
 1960 0106 7B68     		ldr	r3, [r7, #4]
 1961 0108 9B6B     		ldr	r3, [r3, #56]
 1962 010a 03F47F43 		and	r3, r3, #65280
 1963 010e 1B02     		lsls	r3, r3, #8
 1964 0110 1A43     		orrs	r2, r2, r3
 1965 0112 7B68     		ldr	r3, [r7, #4]
 1966 0114 9B6B     		ldr	r3, [r3, #56]
 1967 0116 03F47F03 		and	r3, r3, #16711680
 1968 011a 1B0A     		lsrs	r3, r3, #8
 1969 011c 1A43     		orrs	r2, r2, r3
 1970 011e 7B68     		ldr	r3, [r7, #4]
 1971 0120 9B6B     		ldr	r3, [r3, #56]
 1972 0122 1B0E     		lsrs	r3, r3, #24
 1973 0124 1A43     		orrs	r2, r2, r3
 1974 0126 BB69     		ldr	r3, [r7, #24]
 1975 0128 DA60     		str	r2, [r3, #12]	@ unaligned
1097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 1976              		.loc 4 1098 0
 1977 012a 7B68     		ldr	r3, [r7, #4]
 1978 012c 9B8F     		ldrh	r3, [r3, #60]
 1979 012e 1B02     		lsls	r3, r3, #8
 1980 0130 9AB2     		uxth	r2, r3
 1981 0132 7B68     		ldr	r3, [r7, #4]
 1982 0134 9B8F     		ldrh	r3, [r3, #60]
ARM GAS  /tmp/ccyb6dex.s 			page 75


 1983 0136 1B0A     		lsrs	r3, r3, #8
 1984 0138 9BB2     		uxth	r3, r3
 1985 013a 9BB2     		uxth	r3, r3
 1986 013c 1343     		orrs	r3, r3, r2
 1987 013e 9BB2     		uxth	r3, r3
 1988 0140 9AB2     		uxth	r2, r3
 1989 0142 FB69     		ldr	r3, [r7, #28]
 1990 0144 5A84     		strh	r2, [r3, #34]	@ unaligned
1099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 1991              		.loc 4 1099 0
 1992 0146 7B68     		ldr	r3, [r7, #4]
 1993 0148 9B8C     		ldrh	r3, [r3, #36]
 1994 014a 1B02     		lsls	r3, r3, #8
 1995 014c 9AB2     		uxth	r2, r3
 1996 014e 7B68     		ldr	r3, [r7, #4]
 1997 0150 9B8C     		ldrh	r3, [r3, #36]
 1998 0152 1B0A     		lsrs	r3, r3, #8
 1999 0154 9BB2     		uxth	r3, r3
 2000 0156 9BB2     		uxth	r3, r3
 2001 0158 1343     		orrs	r3, r3, r2
 2002 015a 9BB2     		uxth	r3, r3
 2003 015c 9AB2     		uxth	r2, r3
 2004 015e FB69     		ldr	r3, [r7, #28]
 2005 0160 9A84     		strh	r2, [r3, #36]	@ unaligned
1100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
1102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		isn't known yet. */
1103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 2006              		.loc 4 1103 0
 2007 0162 7B68     		ldr	r3, [r7, #4]
 2008 0164 0022     		movs	r2, #0
 2009 0166 C3F8EC20 		str	r2, [r3, #236]
1104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Start with ISN (Initial Sequence Number). */
1106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 2010              		.loc 4 1106 0
 2011 016a 134B     		ldr	r3, .L93+4
 2012 016c 1A68     		ldr	r2, [r3]
 2013 016e 7B68     		ldr	r3, [r7, #4]
 2014 0170 C3F80821 		str	r2, [r3, #264]
1107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* And increment it with 268 for the next new connection, which is
1109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		recommended value. */
1110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulNextInitialSequenceNumber += 0x102UL;
 2015              		.loc 4 1110 0
 2016 0174 104B     		ldr	r3, .L93+4
 2017 0176 1B68     		ldr	r3, [r3]
 2018 0178 03F58173 		add	r3, r3, #258
 2019 017c 0E4A     		ldr	r2, .L93+4
 2020 017e 1360     		str	r3, [r2]
1111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
1113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		the high nibble of the TCP offset field. */
1114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 2021              		.loc 4 1114 0
 2022 0180 FB69     		ldr	r3, [r7, #28]
 2023 0182 5022     		movs	r2, #80
ARM GAS  /tmp/ccyb6dex.s 			page 76


 2024 0184 83F82E20 		strb	r2, [r3, #46]
1115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Only set the SYN flag. */
1117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 2025              		.loc 4 1117 0
 2026 0188 FB69     		ldr	r3, [r7, #28]
 2027 018a 0222     		movs	r2, #2
 2028 018c 83F82F20 		strb	r2, [r3, #47]
1118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Set the values of usInitMSS / usCurMSS for this socket. */
1120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvSocketSetMSS( pxSocket );
 2029              		.loc 4 1120 0
 2030 0190 7868     		ldr	r0, [r7, #4]
 2031 0192 FFF7FEFF 		bl	prvSocketSetMSS
1121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* For now this is also the advertised window size. */
1123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 2032              		.loc 4 1123 0
 2033 0196 7B68     		ldr	r3, [r7, #4]
 2034 0198 B3F84C30 		ldrh	r3, [r3, #76]
 2035 019c 1A46     		mov	r2, r3
 2036 019e 7B68     		ldr	r3, [r7, #4]
 2037 01a0 C3F8D020 		str	r2, [r3, #208]
1124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The initial sequence numbers at our side are known.  Later
1126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
1127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		first wait for a SYN+ACK reply. */
1128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPCreateWindow( pxSocket );
 2038              		.loc 4 1128 0
 2039 01a4 7868     		ldr	r0, [r7, #4]
 2040 01a6 FFF7FEFF 		bl	prvTCPCreateWindow
 2041              	.L90:
1129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xReturn;
 2042              		.loc 4 1131 0
 2043 01aa 7B6A     		ldr	r3, [r7, #36]
1132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 2044              		.loc 4 1132 0
 2045 01ac 1846     		mov	r0, r3
 2046 01ae 2837     		adds	r7, r7, #40
 2047              	.LCFI101:
 2048              		.cfi_def_cfa_offset 8
 2049 01b0 BD46     		mov	sp, r7
 2050              	.LCFI102:
 2051              		.cfi_def_cfa_register 13
 2052              		@ sp needed
 2053 01b2 80BD     		pop	{r7, pc}
 2054              	.L94:
 2055              		.align	2
 2056              	.L93:
 2057 01b4 00000000 		.word	xDefaultPartUDPPacketHeader
 2058 01b8 00000000 		.word	ulNextInitialSequenceNumber
 2059              		.cfi_endproc
 2060              	.LFE36:
 2062              		.section	.text.prvCheckOptions,"ax",%progbits
 2063              		.align	2
ARM GAS  /tmp/ccyb6dex.s 			page 77


 2064              		.thumb
 2065              		.thumb_func
 2067              	prvCheckOptions:
 2068              	.LFB37:
1133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* For logging and debugging: make a string showing the TCP flags
1136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** */
1137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
1138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static const char *prvTCPFlagMeaning( UBaseType_t xFlags)
1140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		static char retString[10];
1142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		snprintf(retString, sizeof( retString ), "%c%c%c%c%c%c%c%c%c",
1143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_FIN )  ? 'F' : '.',	/* 0x0001: No more data from sender */
1144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_SYN )  ? 'S' : '.',	/* 0x0002: Synchronize sequence numbers */
1145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_RST )  ? 'R' : '.',	/* 0x0004: Reset the connection */
1146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_PSH )  ? 'P' : '.',	/* 0x0008: Push function: please push buffered data to
1147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_ACK )  ? 'A' : '.',	/* 0x0010: Acknowledgment field is significant */
1148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_URG )  ? 'U' : '.',	/* 0x0020: Urgent pointer field is significant */
1149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_ECN )  ? 'E' : '.',	/* 0x0040: ECN-Echo */
1150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_CWR )  ? 'C' : '.',	/* 0x0080: Congestion Window Reduced */
1151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_NS )   ? 'N' : '.');	/* 0x0100: ECN-nonce concealment protection */
1152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return retString;
1153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/*-----------------------------------------------------------*/
1155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif /* ipconfigHAS_DEBUG_PRINTF */
1157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
1159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Parse the TCP option(s) received, if present.  It has already been verified
1160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
1161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * is longer than the usual 20 (5 x 4) bytes.
1162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
1163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffe
1164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 2069              		.loc 4 1164 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 48
 2072              		@ frame_needed = 1, uses_anonymous_args = 0
 2073 0000 80B5     		push	{r7, lr}
 2074              	.LCFI103:
 2075              		.cfi_def_cfa_offset 8
 2076              		.cfi_offset 7, -8
 2077              		.cfi_offset 14, -4
 2078 0002 8EB0     		sub	sp, sp, #56
 2079              	.LCFI104:
 2080              		.cfi_def_cfa_offset 64
 2081 0004 02AF     		add	r7, sp, #8
 2082              	.LCFI105:
 2083              		.cfi_def_cfa 7, 56
 2084 0006 7860     		str	r0, [r7, #4]
 2085 0008 3960     		str	r1, [r7]
1165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket;
1166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t * pxTCPHeader;
1167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** const unsigned char *pucPtr;
1168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** const unsigned char *pucLast;
ARM GAS  /tmp/ccyb6dex.s 			page 78


1169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow;
1170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** UBaseType_t uxNewMSS;
1171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 2086              		.loc 4 1172 0
 2087 000a 3B68     		ldr	r3, [r7]
 2088 000c 9B69     		ldr	r3, [r3, #24]
 2089 000e 7B62     		str	r3, [r7, #36]
1173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPHeader = &pxTCPPacket->xTCPHeader;
 2090              		.loc 4 1173 0
 2091 0010 7B6A     		ldr	r3, [r7, #36]
 2092 0012 2233     		adds	r3, r3, #34
 2093 0014 3B62     		str	r3, [r7, #32]
1174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* A character pointer to iterate through the option data */
1176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pucPtr = pxTCPHeader->ucOptdata;
 2094              		.loc 4 1176 0
 2095 0016 3B6A     		ldr	r3, [r7, #32]
 2096 0018 1433     		adds	r3, r3, #20
 2097 001a FB62     		str	r3, [r7, #44]
1177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 2098              		.loc 4 1177 0
 2099 001c 3B6A     		ldr	r3, [r7, #32]
 2100 001e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2101 0020 1B09     		lsrs	r3, r3, #4
 2102 0022 DBB2     		uxtb	r3, r3
 2103 0024 053B     		subs	r3, r3, #5
 2104 0026 9B00     		lsls	r3, r3, #2
 2105 0028 1A46     		mov	r2, r3
 2106 002a FB6A     		ldr	r3, [r7, #44]
 2107 002c 1344     		add	r3, r3, r2
 2108 002e FB61     		str	r3, [r7, #28]
1178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 2109              		.loc 4 1178 0
 2110 0030 7B68     		ldr	r3, [r7, #4]
 2111 0032 DC33     		adds	r3, r3, #220
 2112 0034 BB61     		str	r3, [r7, #24]
1179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* The comparison with pucLast is only necessary in case the option data are
1181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	corrupted, we don't like to run into invalid memory and crash. */
1182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	while( pucPtr < pucLast )
 2113              		.loc 4 1182 0
 2114 0036 C9E0     		b	.L96
 2115              	.L109:
1183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pucPtr[ 0 ] == TCP_OPT_END )
 2116              		.loc 4 1184 0
 2117 0038 FB6A     		ldr	r3, [r7, #44]
 2118 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2119 003c 002B     		cmp	r3, #0
 2120 003e 00D1     		bne	.L97
1185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* End of options. */
1187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			return;
 2121              		.loc 4 1187 0
 2122 0040 C9E0     		b	.L95
 2123              	.L97:
ARM GAS  /tmp/ccyb6dex.s 			page 79


1188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 2124              		.loc 4 1189 0
 2125 0042 FB6A     		ldr	r3, [r7, #44]
 2126 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2127 0046 012B     		cmp	r3, #1
 2128 0048 03D1     		bne	.L99
1190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pucPtr++;
 2129              		.loc 4 1191 0
 2130 004a FB6A     		ldr	r3, [r7, #44]
 2131 004c 0133     		adds	r3, r3, #1
 2132 004e FB62     		str	r3, [r7, #44]
 2133 0050 BCE0     		b	.L96
 2134              	.L99:
1192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* NOP option, inserted to make the length a multiple of 4. */
1194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_TCP_WIN != 0 )
1196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else if( ( pucPtr[ 0 ] == TCP_OPT_WSOPT ) && ( pucPtr[ 1 ] == TCP_OPT_WSOPT_LEN ) )
 2135              		.loc 4 1196 0
 2136 0052 FB6A     		ldr	r3, [r7, #44]
 2137 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2138 0056 032B     		cmp	r3, #3
 2139 0058 14D1     		bne	.L100
 2140              		.loc 4 1196 0 is_stmt 0 discriminator 1
 2141 005a FB6A     		ldr	r3, [r7, #44]
 2142 005c 0133     		adds	r3, r3, #1
 2143 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2144 0060 032B     		cmp	r3, #3
 2145 0062 0FD1     		bne	.L100
1197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 2146              		.loc 4 1198 0 is_stmt 1
 2147 0064 FB6A     		ldr	r3, [r7, #44]
 2148 0066 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 2149 0068 7B68     		ldr	r3, [r7, #4]
 2150 006a 83F8CA20 		strb	r2, [r3, #202]
1199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 2151              		.loc 4 1199 0
 2152 006e 7A68     		ldr	r2, [r7, #4]
 2153 0070 92F84230 		ldrb	r3, [r2, #66]
 2154 0074 43F01003 		orr	r3, r3, #16
 2155 0078 82F84230 		strb	r3, [r2, #66]
1200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pucPtr += TCP_OPT_WSOPT_LEN;
 2156              		.loc 4 1200 0
 2157 007c FB6A     		ldr	r3, [r7, #44]
 2158 007e 0333     		adds	r3, r3, #3
 2159 0080 FB62     		str	r3, [r7, #44]
 2160 0082 A3E0     		b	.L96
 2161              	.L100:
1201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif	/* ipconfigUSE_TCP_WIN */
1203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else if( ( pucPtr[ 0 ] == TCP_OPT_MSS ) && ( pucPtr[ 1 ] == TCP_OPT_MSS_LEN ) )
 2162              		.loc 4 1203 0
 2163 0084 FB6A     		ldr	r3, [r7, #44]
 2164 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccyb6dex.s 			page 80


 2165 0088 022B     		cmp	r3, #2
 2166 008a 4AD1     		bne	.L101
 2167              		.loc 4 1203 0 is_stmt 0 discriminator 1
 2168 008c FB6A     		ldr	r3, [r7, #44]
 2169 008e 0133     		adds	r3, r3, #1
 2170 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2171 0092 042B     		cmp	r3, #4
 2172 0094 45D1     		bne	.L101
1204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* An MSS option with the correct option length.  FreeRTOS_htons()
1206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			is not needed here because usChar2u16() already returns a host
1207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			endian number. */
1208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			uxNewMSS = usChar2u16( pucPtr + 2 );
 2173              		.loc 4 1208 0 is_stmt 1
 2174 0096 FB6A     		ldr	r3, [r7, #44]
 2175 0098 0233     		adds	r3, r3, #2
 2176 009a 1846     		mov	r0, r3
 2177 009c FFF7FEFF 		bl	usChar2u16
 2178 00a0 0346     		mov	r3, r0
 2179 00a2 7B61     		str	r3, [r7, #20]
1209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
1211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
1213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 2180              		.loc 4 1215 0
 2181 00a4 7B68     		ldr	r3, [r7, #4]
 2182 00a6 B3F84C30 		ldrh	r3, [r3, #76]
 2183 00aa 1A46     		mov	r2, r3
 2184 00ac 7B69     		ldr	r3, [r7, #20]
 2185 00ae 9A42     		cmp	r2, r3
 2186 00b0 33D9     		bls	.L102
1216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* our MSS was bigger than the MSS of the other party: adapt it. */
1218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 2187              		.loc 4 1218 0
 2188 00b2 7A68     		ldr	r2, [r7, #4]
 2189 00b4 92F84030 		ldrb	r3, [r2, #64]
 2190 00b8 43F00103 		orr	r3, r3, #1
 2191 00bc 82F84030 		strb	r3, [r2, #64]
1219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 2192              		.loc 4 1219 0
 2193 00c0 BB69     		ldr	r3, [r7, #24]
 2194 00c2 002B     		cmp	r3, #0
 2195 00c4 0BD0     		beq	.L103
 2196              		.loc 4 1219 0 is_stmt 0 discriminator 1
 2197 00c6 7B68     		ldr	r3, [r7, #4]
 2198 00c8 B3F84A30 		ldrh	r3, [r3, #74]
 2199 00cc 1A46     		mov	r2, r3
 2200 00ce 7B69     		ldr	r3, [r7, #20]
 2201 00d0 9A42     		cmp	r2, r3
 2202 00d2 04D9     		bls	.L103
1220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					/* The peer advertises a smaller MSS than this socket was
1222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					using.  Use that as well. */
ARM GAS  /tmp/ccyb6dex.s 			page 81


1223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
1224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 2203              		.loc 4 1224 0 is_stmt 1
 2204 00d4 7B69     		ldr	r3, [r7, #20]
 2205 00d6 9AB2     		uxth	r2, r3
 2206 00d8 7B68     		ldr	r3, [r7, #4]
 2207 00da A3F84A20 		strh	r2, [r3, #74]	@ movhi
 2208              	.L103:
1225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWind
 2209              		.loc 4 1226 0
 2210 00de BB69     		ldr	r3, [r7, #24]
 2211 00e0 5A68     		ldr	r2, [r3, #4]
 2212 00e2 7B69     		ldr	r3, [r7, #20]
 2213 00e4 B2FBF3F3 		udiv	r3, r2, r3
 2214 00e8 7A69     		ldr	r2, [r7, #20]
 2215 00ea 02FB03F2 		mul	r2, r2, r3
 2216 00ee BB69     		ldr	r3, [r7, #24]
 2217 00f0 5A60     		str	r2, [r3, #4]
1227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 2218              		.loc 4 1227 0
 2219 00f2 7B69     		ldr	r3, [r7, #20]
 2220 00f4 9AB2     		uxth	r2, r3
 2221 00f6 BB69     		ldr	r3, [r7, #24]
 2222 00f8 A3F8BE20 		strh	r2, [r3, #190]	@ movhi
1228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 2223              		.loc 4 1228 0
 2224 00fc 7B69     		ldr	r3, [r7, #20]
 2225 00fe 9AB2     		uxth	r2, r3
 2226 0100 BB69     		ldr	r3, [r7, #24]
 2227 0102 A3F8BC20 		strh	r2, [r3, #188]	@ movhi
1229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 2228              		.loc 4 1229 0
 2229 0106 7B69     		ldr	r3, [r7, #20]
 2230 0108 9AB2     		uxth	r2, r3
 2231 010a 7B68     		ldr	r3, [r7, #4]
 2232 010c A3F84C20 		strh	r2, [r3, #76]	@ movhi
1230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 2233              		.loc 4 1230 0
 2234 0110 7B69     		ldr	r3, [r7, #20]
 2235 0112 9AB2     		uxth	r2, r3
 2236 0114 7B68     		ldr	r3, [r7, #4]
 2237 0116 A3F84A20 		strh	r2, [r3, #74]	@ movhi
 2238              	.L102:
1231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#if( ipconfigUSE_TCP_WIN != 1 )
1234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Without scaled windows, MSS is the only interesting option. */
1235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				break;
1236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#else
1237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Or else we continue to check another option: selective ACK. */
1238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pucPtr += TCP_OPT_MSS_LEN;
 2239              		.loc 4 1238 0
 2240 011a FB6A     		ldr	r3, [r7, #44]
 2241 011c 0433     		adds	r3, r3, #4
 2242 011e FB62     		str	r3, [r7, #44]
 2243 0120 54E0     		b	.L96
ARM GAS  /tmp/ccyb6dex.s 			page 82


 2244              	.L101:
 2245              	.LBB9:
1239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#endif	/* ipconfigUSE_TCP_WIN != 1 */
1240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
1242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* All other options have a length field, so that we easily
1244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			can skip past them. */
1245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			int len = ( int )pucPtr[ 1 ];
 2246              		.loc 4 1245 0
 2247 0122 FB6A     		ldr	r3, [r7, #44]
 2248 0124 0133     		adds	r3, r3, #1
 2249 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2250 0128 BB62     		str	r3, [r7, #40]
1246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( len == 0 )
 2251              		.loc 4 1246 0
 2252 012a BB6A     		ldr	r3, [r7, #40]
 2253 012c 002B     		cmp	r3, #0
 2254 012e 00D1     		bne	.L104
1247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* If the length field is zero, the options are malformed
1249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				and we don't process them further. */
1250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				break;
 2255              		.loc 4 1250 0
 2256 0130 51E0     		b	.L95
 2257              	.L104:
1251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#if( ipconfigUSE_TCP_WIN == 1 )
1254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Selective ACK: the peer has received a packet but it is missing earlier
1256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				packets.  At least this packet does not need retransmission anymore
1257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulTCPWindowTxSack( ) takes care of this administration. */
1258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pucPtr[0] == TCP_OPT_SACK_A )
 2258              		.loc 4 1258 0
 2259 0132 FB6A     		ldr	r3, [r7, #44]
 2260 0134 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2261 0136 052B     		cmp	r3, #5
 2262 0138 44D1     		bne	.L105
1259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					len -= 2;
 2263              		.loc 4 1260 0
 2264 013a BB6A     		ldr	r3, [r7, #40]
 2265 013c 023B     		subs	r3, r3, #2
 2266 013e BB62     		str	r3, [r7, #40]
1261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pucPtr += 2;
 2267              		.loc 4 1261 0
 2268 0140 FB6A     		ldr	r3, [r7, #44]
 2269 0142 0233     		adds	r3, r3, #2
 2270 0144 FB62     		str	r3, [r7, #44]
1262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					while( len >= 8 )
 2271              		.loc 4 1263 0
 2272 0146 3AE0     		b	.L106
 2273              	.L108:
 2274              	.LBB10:
1264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
ARM GAS  /tmp/ccyb6dex.s 			page 83


1265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					uint32_t ulFirst = ulChar2u32( pucPtr );
 2275              		.loc 4 1265 0
 2276 0148 F86A     		ldr	r0, [r7, #44]
 2277 014a FFF7FEFF 		bl	ulChar2u32
 2278 014e 3861     		str	r0, [r7, #16]
1266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
 2279              		.loc 4 1266 0
 2280 0150 FB6A     		ldr	r3, [r7, #44]
 2281 0152 0433     		adds	r3, r3, #4
 2282 0154 1846     		mov	r0, r3
 2283 0156 FFF7FEFF 		bl	ulChar2u32
 2284 015a F860     		str	r0, [r7, #12]
1267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 2285              		.loc 4 1267 0
 2286 015c 7B68     		ldr	r3, [r7, #4]
 2287 015e DC33     		adds	r3, r3, #220
 2288 0160 1846     		mov	r0, r3
 2289 0162 3969     		ldr	r1, [r7, #16]
 2290 0164 FA68     		ldr	r2, [r7, #12]
 2291 0166 FFF7FEFF 		bl	ulTCPWindowTxSack
 2292 016a B860     		str	r0, [r7, #8]
1268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
1269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						starting from the head position.
1270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						Advance the tail pointer in txStream. */
1271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 2293              		.loc 4 1271 0
 2294 016c 7B68     		ldr	r3, [r7, #4]
 2295 016e 9B6F     		ldr	r3, [r3, #120]
 2296 0170 002B     		cmp	r3, #0
 2297 0172 1ED0     		beq	.L107
 2298              		.loc 4 1271 0 is_stmt 0 discriminator 1
 2299 0174 BB68     		ldr	r3, [r7, #8]
 2300 0176 002B     		cmp	r3, #0
 2301 0178 1BD0     		beq	.L107
1272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						{
1273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
1274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 2302              		.loc 4 1274 0 is_stmt 1
 2303 017a 7B68     		ldr	r3, [r7, #4]
 2304 017c 9A6F     		ldr	r2, [r3, #120]
 2305 017e 0023     		movs	r3, #0
 2306 0180 0093     		str	r3, [sp]
 2307 0182 1046     		mov	r0, r2
 2308 0184 0021     		movs	r1, #0
 2309 0186 0022     		movs	r2, #0
 2310 0188 BB68     		ldr	r3, [r7, #8]
 2311 018a FFF7FEFF 		bl	uxStreamBufferGet
1275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->xEventBits |= eSOCKET_SEND;
 2312              		.loc 4 1275 0
 2313 018e 7B68     		ldr	r3, [r7, #4]
 2314 0190 1B68     		ldr	r3, [r3]
 2315 0192 43F00202 		orr	r2, r3, #2
 2316 0196 7B68     		ldr	r3, [r7, #4]
 2317 0198 1A60     		str	r2, [r3]
1276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
1278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							{
ARM GAS  /tmp/ccyb6dex.s 			page 84


1279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								if( pxSocket->xSelectBits & eSELECT_WRITE )
 2318              		.loc 4 1279 0
 2319 019a 7B68     		ldr	r3, [r7, #4]
 2320 019c DB6A     		ldr	r3, [r3, #44]
 2321 019e 03F00203 		and	r3, r3, #2
 2322 01a2 002B     		cmp	r3, #0
 2323 01a4 05D0     		beq	.L107
1280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								{
1281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 									/* The field 'xEventBits' is used to store regular socket events (at most 8),
1282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 									as well as 'select events', which will be left-shifted */
1283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 2324              		.loc 4 1283 0
 2325 01a6 7B68     		ldr	r3, [r7, #4]
 2326 01a8 1B68     		ldr	r3, [r3]
 2327 01aa 43F40072 		orr	r2, r3, #512
 2328 01ae 7B68     		ldr	r3, [r7, #4]
 2329 01b0 1A60     		str	r2, [r3]
 2330              	.L107:
1284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								}
1285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							}
1286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							#endif
1287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							/* In case the socket owner has installed an OnSent handler,
1289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							call it now. */
1290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							#if( ipconfigUSE_CALLBACKS == 1 )
1291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							{
1292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
1293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								{
1294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 									pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
1295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								}
1296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							}
1297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							#endif /* ipconfigUSE_CALLBACKS == 1  */
1298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						}
1299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pucPtr += 8;
 2331              		.loc 4 1299 0
 2332 01b2 FB6A     		ldr	r3, [r7, #44]
 2333 01b4 0833     		adds	r3, r3, #8
 2334 01b6 FB62     		str	r3, [r7, #44]
1300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						len -= 8;
 2335              		.loc 4 1300 0
 2336 01b8 BB6A     		ldr	r3, [r7, #40]
 2337 01ba 083B     		subs	r3, r3, #8
 2338 01bc BB62     		str	r3, [r7, #40]
 2339              	.L106:
 2340              	.LBE10:
1263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
 2341              		.loc 4 1263 0
 2342 01be BB6A     		ldr	r3, [r7, #40]
 2343 01c0 072B     		cmp	r3, #7
 2344 01c2 C1DC     		bgt	.L108
 2345              	.L105:
1301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
1302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					/* len should be 0 by now. */
1303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#if	ipconfigUSE_TCP_TIMESTAMPS == 1
1305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					else if( pucPtr[0] == TCP_OPT_TIMESTAMP )
1306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
ARM GAS  /tmp/ccyb6dex.s 			page 85


1307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						len -= 2;	/* Skip option and length byte. */
1308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pucPtr += 2;
1309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.xTCPWindow.u.bits.bTimeStamps = pdTRUE_UNSIGNED;
1310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.xTCPWindow.rx.ulTimeStamp = ulChar2u32( pucPtr );
1311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.xTCPWindow.tx.ulTimeStamp = ulChar2u32( pucPtr + 4 );
1312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
1313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */
1314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#endif	/* ipconfigUSE_TCP_WIN == 1 */
1316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pucPtr += len;
 2346              		.loc 4 1317 0
 2347 01c4 BB6A     		ldr	r3, [r7, #40]
 2348 01c6 FA6A     		ldr	r2, [r7, #44]
 2349 01c8 1344     		add	r3, r3, r2
 2350 01ca FB62     		str	r3, [r7, #44]
 2351              	.L96:
 2352              	.LBE9:
1182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 2353              		.loc 4 1182 0
 2354 01cc FA6A     		ldr	r2, [r7, #44]
 2355 01ce FB69     		ldr	r3, [r7, #28]
 2356 01d0 9A42     		cmp	r2, r3
 2357 01d2 FFF431AF 		bcc	.L109
 2358              	.L95:
1318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 2359              		.loc 4 1320 0
 2360 01d6 3037     		adds	r7, r7, #48
 2361              	.LCFI106:
 2362              		.cfi_def_cfa_offset 8
 2363 01d8 BD46     		mov	sp, r7
 2364              	.LCFI107:
 2365              		.cfi_def_cfa_register 13
 2366              		@ sp needed
 2367 01da 80BD     		pop	{r7, pc}
 2368              		.cfi_endproc
 2369              	.LFE37:
 2371              		.section	.text.prvWinScaleFactor,"ax",%progbits
 2372              		.align	2
 2373              		.thumb
 2374              		.thumb_func
 2376              	prvWinScaleFactor:
 2377              	.LFB38:
1321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_TCP_WIN != 0 )
1324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
1326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 2378              		.loc 4 1326 0
 2379              		.cfi_startproc
 2380              		@ args = 0, pretend = 0, frame = 16
 2381              		@ frame_needed = 1, uses_anonymous_args = 0
 2382              		@ link register save eliminated.
 2383 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccyb6dex.s 			page 86


 2384              	.LCFI108:
 2385              		.cfi_def_cfa_offset 4
 2386              		.cfi_offset 7, -4
 2387 0002 85B0     		sub	sp, sp, #20
 2388              	.LCFI109:
 2389              		.cfi_def_cfa_offset 24
 2390 0004 00AF     		add	r7, sp, #0
 2391              	.LCFI110:
 2392              		.cfi_def_cfa_register 7
 2393 0006 7860     		str	r0, [r7, #4]
1327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	size_t uxWinSize;
1328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint8_t ucFactor;
1329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
1331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 2394              		.loc 4 1331 0
 2395 0008 7B68     		ldr	r3, [r7, #4]
 2396 000a D3F8D430 		ldr	r3, [r3, #212]
 2397 000e 7A68     		ldr	r2, [r7, #4]
 2398 0010 B2F84C20 		ldrh	r2, [r2, #76]
 2399 0014 02FB03F3 		mul	r3, r2, r3
 2400 0018 FB60     		str	r3, [r7, #12]
1332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ucFactor = 0u;
 2401              		.loc 4 1332 0
 2402 001a 0023     		movs	r3, #0
 2403 001c FB72     		strb	r3, [r7, #11]
1333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		while( uxWinSize > 0xfffful )
 2404              		.loc 4 1333 0
 2405 001e 05E0     		b	.L111
 2406              	.L112:
1334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Divide by two and increase the binary factor by 1. */
1336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			uxWinSize >>= 1;
 2407              		.loc 4 1336 0
 2408 0020 FB68     		ldr	r3, [r7, #12]
 2409 0022 5B08     		lsrs	r3, r3, #1
 2410 0024 FB60     		str	r3, [r7, #12]
1337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ucFactor++;
 2411              		.loc 4 1337 0
 2412 0026 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2413 0028 0133     		adds	r3, r3, #1
 2414 002a FB72     		strb	r3, [r7, #11]
 2415              	.L111:
1333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		while( uxWinSize > 0xfffful )
 2416              		.loc 4 1333 0
 2417 002c FB68     		ldr	r3, [r7, #12]
 2418 002e B3F5803F 		cmp	r3, #65536
 2419 0032 F5D2     		bcs	.L112
1338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
1341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxRxWinSize,
1342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.usInitMSS,
1343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ucFactor ) );
1344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return ucFactor;
 2420              		.loc 4 1345 0
ARM GAS  /tmp/ccyb6dex.s 			page 87


 2421 0034 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 2422              		.loc 4 1346 0
 2423 0036 1846     		mov	r0, r3
 2424 0038 1437     		adds	r7, r7, #20
 2425              	.LCFI111:
 2426              		.cfi_def_cfa_offset 4
 2427 003a BD46     		mov	sp, r7
 2428              	.LCFI112:
 2429              		.cfi_def_cfa_register 13
 2430              		@ sp needed
 2431 003c 5DF8047B 		ldr	r7, [sp], #4
 2432              	.LCFI113:
 2433              		.cfi_restore 7
 2434              		.cfi_def_cfa_offset 0
 2435 0040 7047     		bx	lr
 2436              		.cfi_endproc
 2437              	.LFE38:
 2439 0042 00BF     		.section	.text.prvSetSynAckOptions,"ax",%progbits
 2440              		.align	2
 2441              		.thumb
 2442              		.thumb_func
 2444              	prvSetSynAckOptions:
 2445              	.LFB39:
1347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
1349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
1352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * When opening a TCP connection, while SYN's are being sent, the  parties may
1353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
1354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * nett size of the payload, always smaller than MTU.
1355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** */
1356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket )
1357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 2446              		.loc 4 1357 0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 24
 2449              		@ frame_needed = 1, uses_anonymous_args = 0
 2450 0000 80B5     		push	{r7, lr}
 2451              	.LCFI114:
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 7, -8
 2454              		.cfi_offset 14, -4
 2455 0002 86B0     		sub	sp, sp, #24
 2456              	.LCFI115:
 2457              		.cfi_def_cfa_offset 32
 2458 0004 00AF     		add	r7, sp, #0
 2459              	.LCFI116:
 2460              		.cfi_def_cfa_register 7
 2461 0006 7860     		str	r0, [r7, #4]
 2462 0008 3960     		str	r1, [r7]
1358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 2463              		.loc 4 1358 0
 2464 000a 3B68     		ldr	r3, [r7]
 2465 000c 2233     		adds	r3, r3, #34
 2466 000e 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccyb6dex.s 			page 88


1359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 2467              		.loc 4 1359 0
 2468 0010 7B68     		ldr	r3, [r7, #4]
 2469 0012 B3F84C30 		ldrh	r3, [r3, #76]	@ movhi
 2470 0016 7B82     		strh	r3, [r7, #18]	@ movhi
1360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if	ipconfigUSE_TCP_WIN == 1
1361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	UBaseType_t uxOptionsLength;
1362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
1363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */
1365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 2471              		.loc 4 1366 0
 2472 0018 7B69     		ldr	r3, [r7, #20]
 2473 001a 0222     		movs	r2, #2
 2474 001c 1A75     		strb	r2, [r3, #20]
1367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 2475              		.loc 4 1367 0
 2476 001e 7B69     		ldr	r3, [r7, #20]
 2477 0020 0422     		movs	r2, #4
 2478 0022 5A75     		strb	r2, [r3, #21]
1368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 2479              		.loc 4 1368 0
 2480 0024 7B8A     		ldrh	r3, [r7, #18]
 2481 0026 1B0A     		lsrs	r3, r3, #8
 2482 0028 9BB2     		uxth	r3, r3
 2483 002a DAB2     		uxtb	r2, r3
 2484 002c 7B69     		ldr	r3, [r7, #20]
 2485 002e 9A75     		strb	r2, [r3, #22]
1369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 2486              		.loc 4 1369 0
 2487 0030 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 2488 0032 DAB2     		uxtb	r2, r3
 2489 0034 7B69     		ldr	r3, [r7, #20]
 2490 0036 DA75     		strb	r2, [r3, #23]
1370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_TCP_WIN != 0 )
1372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 2491              		.loc 4 1373 0
 2492 0038 7868     		ldr	r0, [r7, #4]
 2493 003a FFF7FEFF 		bl	prvWinScaleFactor
 2494 003e 0346     		mov	r3, r0
 2495 0040 1A46     		mov	r2, r3
 2496 0042 7B68     		ldr	r3, [r7, #4]
 2497 0044 83F8C920 		strb	r2, [r3, #201]
1374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 2498              		.loc 4 1375 0
 2499 0048 7B69     		ldr	r3, [r7, #20]
 2500 004a 0122     		movs	r2, #1
 2501 004c 1A76     		strb	r2, [r3, #24]
1376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 2502              		.loc 4 1376 0
 2503 004e 7B69     		ldr	r3, [r7, #20]
 2504 0050 0322     		movs	r2, #3
 2505 0052 5A76     		strb	r2, [r3, #25]
ARM GAS  /tmp/ccyb6dex.s 			page 89


1377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 2506              		.loc 4 1377 0
 2507 0054 7B69     		ldr	r3, [r7, #20]
 2508 0056 0322     		movs	r2, #3
 2509 0058 9A76     		strb	r2, [r3, #26]
1378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 2510              		.loc 4 1378 0
 2511 005a 7B68     		ldr	r3, [r7, #4]
 2512 005c 93F8C920 		ldrb	r2, [r3, #201]	@ zero_extendqisi2
 2513 0060 7B69     		ldr	r3, [r7, #20]
 2514 0062 DA76     		strb	r2, [r3, #27]
1379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 8u;
 2515              		.loc 4 1379 0
 2516 0064 0823     		movs	r3, #8
 2517 0066 FB60     		str	r3, [r7, #12]
1380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#else
1382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 4u;
1384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif
1386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_TCP_WIN == 0 )
1389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return uxOptionsLength;
1391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#else
1393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_TCP_TIMESTAMPS == 1 )
1395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.xTCPWindow.u.bits.bTimeStamps )
1396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				uxOptionsLength += prvTCPSetTimeStamp( uxOptionsLength, pxSocket, &pxTCPPacket->xTCPHeader );
1398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
1399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = 2u;
1400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				uxOptionsLength += 2u;
1401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
1403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif
1404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 2518              		.loc 4 1405 0
 2519 0068 7A69     		ldr	r2, [r7, #20]
 2520 006a FB68     		ldr	r3, [r7, #12]
 2521 006c 1344     		add	r3, r3, r2
 2522 006e 1033     		adds	r3, r3, #16
 2523 0070 0122     		movs	r2, #1
 2524 0072 1A71     		strb	r2, [r3, #4]
1406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 2525              		.loc 4 1406 0
 2526 0074 FB68     		ldr	r3, [r7, #12]
 2527 0076 0133     		adds	r3, r3, #1
 2528 0078 7A69     		ldr	r2, [r7, #20]
 2529 007a 1344     		add	r3, r3, r2
 2530 007c 0122     		movs	r2, #1
 2531 007e 1A75     		strb	r2, [r3, #20]
1407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
ARM GAS  /tmp/ccyb6dex.s 			page 90


 2532              		.loc 4 1407 0
 2533 0080 FB68     		ldr	r3, [r7, #12]
 2534 0082 0233     		adds	r3, r3, #2
 2535 0084 7A69     		ldr	r2, [r7, #20]
 2536 0086 1344     		add	r3, r3, r2
 2537 0088 0422     		movs	r2, #4
 2538 008a 1A75     		strb	r2, [r3, #20]
1408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 2539              		.loc 4 1408 0
 2540 008c FB68     		ldr	r3, [r7, #12]
 2541 008e 0333     		adds	r3, r3, #3
 2542 0090 7A69     		ldr	r2, [r7, #20]
 2543 0092 1344     		add	r3, r3, r2
 2544 0094 0222     		movs	r2, #2
 2545 0096 1A75     		strb	r2, [r3, #20]
1409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			uxOptionsLength += 4u;
 2546              		.loc 4 1409 0
 2547 0098 FB68     		ldr	r3, [r7, #12]
 2548 009a 0433     		adds	r3, r3, #4
 2549 009c FB60     		str	r3, [r7, #12]
1410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return uxOptionsLength; /* bytes, not words. */
 2550              		.loc 4 1411 0
 2551 009e FB68     		ldr	r3, [r7, #12]
1412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif	/* ipconfigUSE_TCP_WIN == 0 */
1414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 2552              		.loc 4 1414 0
 2553 00a0 1846     		mov	r0, r3
 2554 00a2 1837     		adds	r7, r7, #24
 2555              	.LCFI117:
 2556              		.cfi_def_cfa_offset 8
 2557 00a4 BD46     		mov	sp, r7
 2558              	.LCFI118:
 2559              		.cfi_def_cfa_register 13
 2560              		@ sp needed
 2561 00a6 80BD     		pop	{r7, pc}
 2562              		.cfi_endproc
 2563              	.LFE39:
 2565              		.section	.text.prvTCPTouchSocket,"ax",%progbits
 2566              		.align	2
 2567              		.thumb
 2568              		.thumb_func
 2570              	prvTCPTouchSocket:
 2571              	.LFB40:
1415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
1417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * For anti-hanging protection and TCP keep-alive messages.  Called in two
1418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * places: after receiving a packet and after a state change.  The socket's
1419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * alive timer may be reset.
1420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
1421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
1422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 2572              		.loc 4 1422 0
 2573              		.cfi_startproc
 2574              		@ args = 0, pretend = 0, frame = 8
 2575              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccyb6dex.s 			page 91


 2576 0000 80B5     		push	{r7, lr}
 2577              	.LCFI119:
 2578              		.cfi_def_cfa_offset 8
 2579              		.cfi_offset 7, -8
 2580              		.cfi_offset 14, -4
 2581 0002 82B0     		sub	sp, sp, #8
 2582              	.LCFI120:
 2583              		.cfi_def_cfa_offset 16
 2584 0004 00AF     		add	r7, sp, #0
 2585              	.LCFI121:
 2586              		.cfi_def_cfa_register 7
 2587 0006 7860     		str	r0, [r7, #4]
1423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigTCP_HANG_PROTECTION == 1 )
1424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 2588              		.loc 4 1425 0
 2589 0008 FFF7FEFF 		bl	xTaskGetTickCount
 2590 000c 0246     		mov	r2, r0
 2591 000e 7B68     		ldr	r3, [r7, #4]
 2592 0010 1A66     		str	r2, [r3, #96]
1426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif
1428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigTCP_KEEP_ALIVE == 1 )
1430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 2593              		.loc 4 1431 0
 2594 0012 7A68     		ldr	r2, [r7, #4]
 2595 0014 92F84130 		ldrb	r3, [r2, #65]
 2596 0018 6FF38203 		bfc	r3, #2, #1
 2597 001c 82F84130 		strb	r3, [r2, #65]
1432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 2598              		.loc 4 1432 0
 2599 0020 7A68     		ldr	r2, [r7, #4]
 2600 0022 92F84130 		ldrb	r3, [r2, #65]
 2601 0026 6FF34103 		bfc	r3, #1, #1
 2602 002a 82F84130 		strb	r3, [r2, #65]
1433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 2603              		.loc 4 1433 0
 2604 002e 7B68     		ldr	r3, [r7, #4]
 2605 0030 0022     		movs	r2, #0
 2606 0032 83F85820 		strb	r2, [r3, #88]
1434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 2607              		.loc 4 1434 0
 2608 0036 FFF7FEFF 		bl	xTaskGetTickCount
 2609 003a 0246     		mov	r2, r0
 2610 003c 7B68     		ldr	r3, [r7, #4]
 2611 003e DA65     		str	r2, [r3, #92]
1435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif
1437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	( void ) pxSocket;
1439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 2612              		.loc 4 1439 0
 2613 0040 0837     		adds	r7, r7, #8
 2614              	.LCFI122:
 2615              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccyb6dex.s 			page 92


 2616 0042 BD46     		mov	sp, r7
 2617              	.LCFI123:
 2618              		.cfi_def_cfa_register 13
 2619              		@ sp needed
 2620 0044 80BD     		pop	{r7, pc}
 2621              		.cfi_endproc
 2622              	.LFE40:
 2624 0046 00BF     		.section	.text.vTCPStateChange,"ax",%progbits
 2625              		.align	2
 2626              		.global	vTCPStateChange
 2627              		.thumb
 2628              		.thumb_func
 2630              	vTCPStateChange:
 2631              	.LFB41:
1440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
1443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Changing to a new state. Centralised here to do specific actions such as
1444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * resetting the alive timer, calling the user's OnConnect handler to notify
1445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * that a socket has got (dis)connected, and setting bit to unblock a call to
1446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * FreeRTOS_select()
1447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
1448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
1449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 2632              		.loc 4 1449 0
 2633              		.cfi_startproc
 2634              		@ args = 0, pretend = 0, frame = 24
 2635              		@ frame_needed = 1, uses_anonymous_args = 0
 2636 0000 80B5     		push	{r7, lr}
 2637              	.LCFI124:
 2638              		.cfi_def_cfa_offset 8
 2639              		.cfi_offset 7, -8
 2640              		.cfi_offset 14, -4
 2641 0002 86B0     		sub	sp, sp, #24
 2642              	.LCFI125:
 2643              		.cfi_def_cfa_offset 32
 2644 0004 00AF     		add	r7, sp, #0
 2645              	.LCFI126:
 2646              		.cfi_def_cfa_register 7
 2647 0006 7860     		str	r0, [r7, #4]
 2648 0008 0B46     		mov	r3, r1
 2649 000a FB70     		strb	r3, [r7, #3]
1450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *xParent = NULL;
 2650              		.loc 4 1450 0
 2651 000c 0023     		movs	r3, #0
 2652 000e 7B61     		str	r3, [r7, #20]
1451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connect
 2653              		.loc 4 1451 0
 2654 0010 7B68     		ldr	r3, [r7, #4]
 2655 0012 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 2656 0016 042B     		cmp	r3, #4
 2657 0018 06D9     		bls	.L118
 2658              		.loc 4 1451 0 is_stmt 0 discriminator 1
 2659 001a 7B68     		ldr	r3, [r7, #4]
 2660 001c 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 2661 0020 082B     		cmp	r3, #8
 2662 0022 01D0     		beq	.L118
ARM GAS  /tmp/ccyb6dex.s 			page 93


 2663              		.loc 4 1451 0 discriminator 3
 2664 0024 0123     		movs	r3, #1
 2665 0026 00E0     		b	.L119
 2666              	.L118:
 2667              		.loc 4 1451 0 discriminator 4
 2668 0028 0023     		movs	r3, #0
 2669              	.L119:
 2670              		.loc 4 1451 0 discriminator 6
 2671 002a 3B61     		str	r3, [r7, #16]
1452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 2672              		.loc 4 1452 0 is_stmt 1 discriminator 6
 2673 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2674 002e 042B     		cmp	r3, #4
 2675 0030 04D9     		bls	.L120
 2676              		.loc 4 1452 0 is_stmt 0 discriminator 1
 2677 0032 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2678 0034 082B     		cmp	r3, #8
 2679 0036 01D0     		beq	.L120
 2680              		.loc 4 1452 0 discriminator 3
 2681 0038 0123     		movs	r3, #1
 2682 003a 00E0     		b	.L121
 2683              	.L120:
 2684              		.loc 4 1452 0 discriminator 4
 2685 003c 0023     		movs	r3, #0
 2686              	.L121:
 2687              		.loc 4 1452 0 discriminator 6
 2688 003e FB60     		str	r3, [r7, #12]
1453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
1454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	BaseType_t xPreviousState = ( BaseType_t ) pxSocket->u.xTCP.ucTCPState;
1455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
1456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_CALLBACKS == 1 )
1457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	FreeRTOS_Socket_t *xConnected = NULL;
1458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
1459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Has the connected status changed? */
1461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( bBefore != bAfter )
 2689              		.loc 4 1461 0 is_stmt 1 discriminator 6
 2690 0040 3A69     		ldr	r2, [r7, #16]
 2691 0042 FB68     		ldr	r3, [r7, #12]
 2692 0044 9A42     		cmp	r2, r3
 2693 0046 00F08780 		beq	.L122
1462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Is the socket connected now ? */
1464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( bAfter != pdFALSE )
 2694              		.loc 4 1464 0
 2695 004a FB68     		ldr	r3, [r7, #12]
 2696 004c 002B     		cmp	r3, #0
 2697 004e 63D0     		beq	.L123
1465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
1467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 2698              		.loc 4 1467 0
 2699 0050 7B68     		ldr	r3, [r7, #4]
 2700 0052 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 2701 0056 03F00403 		and	r3, r3, #4
 2702 005a DBB2     		uxtb	r3, r3
 2703 005c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccyb6dex.s 			page 94


 2704 005e 48D0     		beq	.L124
1468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Now that it is connected, find it's parent. */
1470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 2705              		.loc 4 1470 0
 2706 0060 7B68     		ldr	r3, [r7, #4]
 2707 0062 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 2708 0066 03F00803 		and	r3, r3, #8
 2709 006a DBB2     		uxtb	r3, r3
 2710 006c 002B     		cmp	r3, #0
 2711 006e 02D0     		beq	.L125
1471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xParent = pxSocket;
 2712              		.loc 4 1472 0
 2713 0070 7B68     		ldr	r3, [r7, #4]
 2714 0072 7B61     		str	r3, [r7, #20]
 2715 0074 0FE0     		b	.L126
 2716              	.L125:
1473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				else
1475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xParent = pxSocket->u.xTCP.pxPeerSocket;
 2717              		.loc 4 1476 0
 2718 0076 7B68     		ldr	r3, [r7, #4]
 2719 0078 5B6D     		ldr	r3, [r3, #84]
 2720 007a 7B61     		str	r3, [r7, #20]
1477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					configASSERT( xParent != NULL );
 2721              		.loc 4 1477 0
 2722 007c 7B69     		ldr	r3, [r7, #20]
 2723 007e 002B     		cmp	r3, #0
 2724 0080 09D1     		bne	.L126
 2725              	.LBB11:
 2726              	.LBB12:
 2727              		.file 5 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
ARM GAS  /tmp/ccyb6dex.s 			page 95


  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  /tmp/ccyb6dex.s 			page 96


  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccyb6dex.s 			page 97


 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccyb6dex.s 			page 98


 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 2728              		.loc 5 237 0 discriminator 1
 2729              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2730 0082 4FF05003 			mov r3, #80												
 2731 0086 83F31188 		msr basepri, r3											
 2732 008a BFF36F8F 		isb														
 2733 008e BFF34F8F 		dsb														
 2734              	
 2735              	@ 0 "" 2
 2736              		.thumb
 2737 0092 BB60     		str	r3, [r7, #8]
 2738              	.L127:
 2739              	.LBE12:
 2740              	.LBE11:
 2741              		.loc 4 1477 0 discriminator 1
ARM GAS  /tmp/ccyb6dex.s 			page 99


 2742 0094 FEE7     		b	.L127
 2743              	.L126:
1478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( xParent != NULL )
 2744              		.loc 4 1479 0
 2745 0096 7B69     		ldr	r3, [r7, #20]
 2746 0098 002B     		cmp	r3, #0
 2747 009a 18D0     		beq	.L128
1480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( xParent->u.xTCP.pxPeerSocket == NULL )
 2748              		.loc 4 1481 0
 2749 009c 7B69     		ldr	r3, [r7, #20]
 2750 009e 5B6D     		ldr	r3, [r3, #84]
 2751 00a0 002B     		cmp	r3, #0
 2752 00a2 02D1     		bne	.L129
1482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
1483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						xParent->u.xTCP.pxPeerSocket = pxSocket;
 2753              		.loc 4 1483 0
 2754 00a4 7B69     		ldr	r3, [r7, #20]
 2755 00a6 7A68     		ldr	r2, [r7, #4]
 2756 00a8 5A65     		str	r2, [r3, #84]
 2757              	.L129:
1484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
1485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xParent->xEventBits |= eSOCKET_ACCEPT;
 2758              		.loc 4 1486 0
 2759 00aa 7B69     		ldr	r3, [r7, #20]
 2760 00ac 1B68     		ldr	r3, [r3]
 2761 00ae 43F00402 		orr	r2, r3, #4
 2762 00b2 7B69     		ldr	r3, [r7, #20]
 2763 00b4 1A60     		str	r2, [r3]
1487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
1489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
1490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						/* Library support FreeRTOS_select().  Receiving a new
1491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						connection is being translated as a READ event. */
1492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 2764              		.loc 4 1492 0
 2765 00b6 7B69     		ldr	r3, [r7, #20]
 2766 00b8 DB6A     		ldr	r3, [r3, #44]
 2767 00ba 03F00103 		and	r3, r3, #1
 2768 00be 002B     		cmp	r3, #0
 2769 00c0 05D0     		beq	.L128
1493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						{
1494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 2770              		.loc 4 1494 0
 2771 00c2 7B69     		ldr	r3, [r7, #20]
 2772 00c4 1B68     		ldr	r3, [r3]
 2773 00c6 43F48072 		orr	r2, r3, #256
 2774 00ca 7B69     		ldr	r3, [r7, #20]
 2775 00cc 1A60     		str	r2, [r3]
 2776              	.L128:
1495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						}
1496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
1497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					#endif
1498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					#if( ipconfigUSE_CALLBACKS == 1 )
ARM GAS  /tmp/ccyb6dex.s 			page 100


1500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
1501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) != pdFALSE ) &&
1502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
1503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						{
1504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							/* The listening socket does not become connected itself, in stead
1505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							a child socket is created.
1506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							Postpone a call the OnConnect event until the end of this function. */
1507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							xConnected = xParent;
1508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						}
1509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
1510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					#endif
1511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Don't need to access the parent socket anymore, so the
1514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				reference 'pxPeerSocket' may be cleared. */
1515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxPeerSocket = NULL;
 2777              		.loc 4 1515 0
 2778 00ce 7B68     		ldr	r3, [r7, #4]
 2779 00d0 0022     		movs	r2, #0
 2780 00d2 5A65     		str	r2, [r3, #84]
1516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 2781              		.loc 4 1516 0
 2782 00d4 7A68     		ldr	r2, [r7, #4]
 2783 00d6 92F84030 		ldrb	r3, [r2, #64]
 2784 00da 6FF38203 		bfc	r3, #2, #1
 2785 00de 82F84030 		strb	r3, [r2, #64]
1517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* When true, this socket may be returned in a call to accept(). */
1519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 2786              		.loc 4 1519 0
 2787 00e2 7A68     		ldr	r2, [r7, #4]
 2788 00e4 92F84030 		ldrb	r3, [r2, #64]
 2789 00e8 43F00203 		orr	r3, r3, #2
 2790 00ec 82F84030 		strb	r3, [r2, #64]
 2791 00f0 24E0     		b	.L131
 2792              	.L124:
1520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
1522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->xEventBits |= eSOCKET_CONNECT;
 2793              		.loc 4 1523 0
 2794 00f2 7B68     		ldr	r3, [r7, #4]
 2795 00f4 1B68     		ldr	r3, [r3]
 2796 00f6 43F00802 		orr	r2, r3, #8
 2797 00fa 7B68     		ldr	r3, [r7, #4]
 2798 00fc 1A60     		str	r2, [r3]
1524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
1526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( pxSocket->xSelectBits & eSELECT_WRITE )
 2799              		.loc 4 1527 0
 2800 00fe 7B68     		ldr	r3, [r7, #4]
 2801 0100 DB6A     		ldr	r3, [r3, #44]
 2802 0102 03F00203 		and	r3, r3, #2
 2803 0106 002B     		cmp	r3, #0
 2804 0108 18D0     		beq	.L131
1528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
ARM GAS  /tmp/ccyb6dex.s 			page 101


1529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 2805              		.loc 4 1529 0
 2806 010a 7B68     		ldr	r3, [r7, #4]
 2807 010c 1B68     		ldr	r3, [r3]
 2808 010e 43F40072 		orr	r2, r3, #512
 2809 0112 7B68     		ldr	r3, [r7, #4]
 2810 0114 1A60     		str	r2, [r3]
 2811 0116 11E0     		b	.L131
 2812              	.L123:
1530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
1531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#endif
1533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else  /* bAfter == pdFALSE, connection is closed. */
1536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Notify/wake-up the socket-owner by setting a semaphore. */
1538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->xEventBits |= eSOCKET_CLOSED;
 2813              		.loc 4 1538 0
 2814 0118 7B68     		ldr	r3, [r7, #4]
 2815 011a 1B68     		ldr	r3, [r3]
 2816 011c 43F02002 		orr	r2, r3, #32
 2817 0120 7B68     		ldr	r3, [r7, #4]
 2818 0122 1A60     		str	r2, [r3]
1539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
1541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 2819              		.loc 4 1542 0
 2820 0124 7B68     		ldr	r3, [r7, #4]
 2821 0126 DB6A     		ldr	r3, [r3, #44]
 2822 0128 03F00403 		and	r3, r3, #4
 2823 012c 002B     		cmp	r3, #0
 2824 012e 05D0     		beq	.L131
1543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 2825              		.loc 4 1544 0
 2826 0130 7B68     		ldr	r3, [r7, #4]
 2827 0132 1B68     		ldr	r3, [r3]
 2828 0134 43F48062 		orr	r2, r3, #1024
 2829 0138 7B68     		ldr	r3, [r7, #4]
 2830 013a 1A60     		str	r2, [r3]
 2831              	.L131:
1545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#endif
1548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_CALLBACKS == 1 )
1550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) != pdFALSE ) && ( xCon
1552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* The 'connected' state has changed, call the user handler. */
1554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xConnected = pxSocket;
1555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigUSE_CALLBACKS */
1558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
ARM GAS  /tmp/ccyb6dex.s 			page 102


1559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE )
 2832              		.loc 4 1559 0
 2833 013c 7B68     		ldr	r3, [r7, #4]
 2834 013e 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 2835 0142 1846     		mov	r0, r3
 2836 0144 FFF7FEFF 		bl	prvTCPSocketIsActive
 2837 0148 0346     		mov	r3, r0
 2838 014a 002B     		cmp	r3, #0
 2839 014c 22D1     		bne	.L133
1560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Now the socket isn't in an active state anymore so it
1562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			won't need further attention of the IP-task.
1563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			Setting time-out to zero means that the socket won't get checked during
1564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			timer events. */
1565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.usTimeout = 0u;
 2840              		.loc 4 1565 0
 2841 014e 7B68     		ldr	r3, [r7, #4]
 2842 0150 0022     		movs	r2, #0
 2843 0152 A3F84820 		strh	r2, [r3, #72]	@ movhi
 2844 0156 1DE0     		b	.L133
 2845              	.L122:
1566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
1569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( eTCPState == eCLOSED )
 2846              		.loc 4 1570 0
 2847 0158 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2848 015a 002B     		cmp	r3, #0
 2849 015c 1AD1     		bne	.L133
1571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Socket goes to status eCLOSED because of a RST.
1573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			When nobody owns the socket yet, delete it. */
1574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 2850              		.loc 4 1574 0
 2851 015e 7B68     		ldr	r3, [r7, #4]
 2852 0160 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 2853 0164 03F00403 		and	r3, r3, #4
 2854 0168 DBB2     		uxtb	r3, r3
 2855 016a 002B     		cmp	r3, #0
 2856 016c 07D1     		bne	.L134
1575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 2857              		.loc 4 1575 0 discriminator 1
 2858 016e 7B68     		ldr	r3, [r7, #4]
 2859 0170 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 2860 0174 03F00203 		and	r3, r3, #2
 2861 0178 DBB2     		uxtb	r3, r3
1574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 2862              		.loc 4 1574 0 discriminator 1
 2863 017a 002B     		cmp	r3, #0
 2864 017c 0AD0     		beq	.L133
 2865              	.L134:
1576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
1578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 2866              		.loc 4 1578 0
 2867 017e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccyb6dex.s 			page 103


 2868 0180 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 2869 0184 03F00803 		and	r3, r3, #8
 2870 0188 DBB2     		uxtb	r3, r3
 2871 018a 002B     		cmp	r3, #0
 2872 018c 02D1     		bne	.L133
1579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					FreeRTOS_closesocket( pxSocket );
 2873              		.loc 4 1580 0
 2874 018e 7868     		ldr	r0, [r7, #4]
 2875 0190 FFF7FEFF 		bl	FreeRTOS_closesocket
 2876              	.L133:
1581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Fill in the new state. */
1587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 2877              		.loc 4 1587 0
 2878 0194 7B68     		ldr	r3, [r7, #4]
 2879 0196 FA78     		ldrb	r2, [r7, #3]
 2880 0198 83F85320 		strb	r2, [r3, #83]
1588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* touch the alive timers because moving to another state. */
1590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	prvTCPTouchSocket( pxSocket );
 2881              		.loc 4 1590 0
 2882 019c 7868     		ldr	r0, [r7, #4]
 2883 019e FFF7FEFF 		bl	prvTCPTouchSocket
1591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigHAS_DEBUG_PRINTF == 1 )
1593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFA
1595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
1596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->usLocalPort,
1597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulRemoteIP,
1598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.usRemotePort,
1599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_GetTCPStateName( ( UBaseType_t ) xPreviousState ),
1600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_GetTCPStateName( ( UBaseType_t ) eTCPState ) ) );
1601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigHAS_DEBUG_PRINTF */
1603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_CALLBACKS == 1 )
1605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( xConnected != NULL )
1607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
1609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xConnected->u.xTCP.pxHandleConnected( ( Socket_t * ) xConnected, bAfter );
1610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif
1613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xParent != NULL )
 2884              		.loc 4 1613 0
 2885 01a2 7B69     		ldr	r3, [r7, #20]
 2886 01a4 002B     		cmp	r3, #0
 2887 01a6 02D0     		beq	.L117
1614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		vSocketWakeUpUser( xParent );
ARM GAS  /tmp/ccyb6dex.s 			page 104


 2888              		.loc 4 1615 0
 2889 01a8 7869     		ldr	r0, [r7, #20]
 2890 01aa FFF7FEFF 		bl	vSocketWakeUpUser
 2891              	.L117:
1616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 2892              		.loc 4 1617 0
 2893 01ae 1837     		adds	r7, r7, #24
 2894              	.LCFI127:
 2895              		.cfi_def_cfa_offset 8
 2896 01b0 BD46     		mov	sp, r7
 2897              	.LCFI128:
 2898              		.cfi_def_cfa_register 13
 2899              		@ sp needed
 2900 01b2 80BD     		pop	{r7, pc}
 2901              		.cfi_endproc
 2902              	.LFE41:
 2904              		.section	.text.prvTCPBufferResize,"ax",%progbits
 2905              		.align	2
 2906              		.thumb
 2907              		.thumb_func
 2909              	prvTCPBufferResize:
 2910              	.LFB42:
1618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDes
1621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	int32_t lDataLen, UBaseType_t uxOptionsLength )
1622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 2911              		.loc 4 1622 0
 2912              		.cfi_startproc
 2913              		@ args = 0, pretend = 0, frame = 32
 2914              		@ frame_needed = 1, uses_anonymous_args = 0
 2915 0000 80B5     		push	{r7, lr}
 2916              	.LCFI129:
 2917              		.cfi_def_cfa_offset 8
 2918              		.cfi_offset 7, -8
 2919              		.cfi_offset 14, -4
 2920 0002 88B0     		sub	sp, sp, #32
 2921              	.LCFI130:
 2922              		.cfi_def_cfa_offset 40
 2923 0004 00AF     		add	r7, sp, #0
 2924              	.LCFI131:
 2925              		.cfi_def_cfa_register 7
 2926 0006 F860     		str	r0, [r7, #12]
 2927 0008 B960     		str	r1, [r7, #8]
 2928 000a 7A60     		str	r2, [r7, #4]
 2929 000c 3B60     		str	r3, [r7]
1623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** NetworkBufferDescriptor_t *pxReturn;
1624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lNeeded;
1625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xResize;
1626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xBufferAllocFixedSize != pdFALSE )
 2930              		.loc 4 1627 0
 2931 000e 2D4B     		ldr	r3, .L147
 2932 0010 1B68     		ldr	r3, [r3]
 2933 0012 002B     		cmp	r3, #0
 2934 0014 0AD0     		beq	.L137
ARM GAS  /tmp/ccyb6dex.s 			page 105


1628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Network buffers are created with a fixed size and can hold the largest
1630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		MTU. */
1631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 2935              		.loc 4 1631 0
 2936 0016 40F2F253 		movw	r3, #1522
 2937 001a BB61     		str	r3, [r7, #24]
1632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* and therefore, the buffer won't be too small.
1633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		Only ask for a new network buffer in case none was supplied. */
1634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xResize = ( pxNetworkBuffer == NULL );
 2938              		.loc 4 1634 0
 2939 001c BB68     		ldr	r3, [r7, #8]
 2940 001e 002B     		cmp	r3, #0
 2941 0020 0CBF     		ite	eq
 2942 0022 0123     		moveq	r3, #1
 2943 0024 0023     		movne	r3, #0
 2944 0026 DBB2     		uxtb	r3, r3
 2945 0028 7B61     		str	r3, [r7, #20]
 2946 002a 14E0     		b	.L138
 2947              	.L137:
1635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
1637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Network buffers are created with a variable size. See if it must
1639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		grow. */
1640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
1641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLen
 2948              		.loc 4 1641 0
 2949 002c 7A68     		ldr	r2, [r7, #4]
 2950 002e 3B68     		ldr	r3, [r7]
 2951 0030 1344     		add	r3, r3, r2
 2952 0032 3633     		adds	r3, r3, #54
1640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLen
 2953              		.loc 4 1640 0
 2954 0034 4620     		movs	r0, #70
 2955 0036 1946     		mov	r1, r3
 2956 0038 FFF7FEFF 		bl	FreeRTOS_max_int32
 2957 003c B861     		str	r0, [r7, #24]
1642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* In case we were called from a TCP timer event, a buffer must be
1643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		created.  Otherwise, test 'xDataLength' of the provided buffer. */
1644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 2958              		.loc 4 1644 0
 2959 003e BB68     		ldr	r3, [r7, #8]
 2960 0040 002B     		cmp	r3, #0
 2961 0042 04D0     		beq	.L139
 2962              		.loc 4 1644 0 is_stmt 0 discriminator 2
 2963 0044 BB68     		ldr	r3, [r7, #8]
 2964 0046 DA69     		ldr	r2, [r3, #28]
 2965 0048 BB69     		ldr	r3, [r7, #24]
 2966 004a 9A42     		cmp	r2, r3
 2967 004c 01D2     		bcs	.L140
 2968              	.L139:
 2969              		.loc 4 1644 0 discriminator 3
 2970 004e 0123     		movs	r3, #1
 2971 0050 00E0     		b	.L141
 2972              	.L140:
 2973              		.loc 4 1644 0 discriminator 4
ARM GAS  /tmp/ccyb6dex.s 			page 106


 2974 0052 0023     		movs	r3, #0
 2975              	.L141:
 2976              		.loc 4 1644 0 discriminator 6
 2977 0054 7B61     		str	r3, [r7, #20]
 2978              	.L138:
1645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xResize != pdFALSE )
 2979              		.loc 4 1647 0 is_stmt 1
 2980 0056 7B69     		ldr	r3, [r7, #20]
 2981 0058 002B     		cmp	r3, #0
 2982 005a 24D0     		beq	.L142
1648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The caller didn't provide a network buffer or the provided buffer is
1650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		too small.  As we must send-out a data packet, a buffer will be created
1651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		here. */
1652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 2983              		.loc 4 1652 0
 2984 005c BB69     		ldr	r3, [r7, #24]
 2985 005e 1846     		mov	r0, r3
 2986 0060 0021     		movs	r1, #0
 2987 0062 FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 2988 0066 F861     		str	r0, [r7, #28]
1653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxReturn != NULL )
 2989              		.loc 4 1654 0
 2990 0068 FB69     		ldr	r3, [r7, #28]
 2991 006a 002B     		cmp	r3, #0
 2992 006c 24D0     		beq	.L145
1655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Copy the existing data to the new created buffer. */
1657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxNetworkBuffer )
 2993              		.loc 4 1657 0
 2994 006e BB68     		ldr	r3, [r7, #8]
 2995 0070 002B     		cmp	r3, #0
 2996 0072 0ED0     		beq	.L144
1658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Either from the previous buffer... */
1660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xData
 2997              		.loc 4 1660 0
 2998 0074 FB69     		ldr	r3, [r7, #28]
 2999 0076 9969     		ldr	r1, [r3, #24]
 3000 0078 BB68     		ldr	r3, [r7, #8]
 3001 007a 9A69     		ldr	r2, [r3, #24]
 3002 007c BB68     		ldr	r3, [r7, #8]
 3003 007e DB69     		ldr	r3, [r3, #28]
 3004 0080 0846     		mov	r0, r1
 3005 0082 1146     		mov	r1, r2
 3006 0084 1A46     		mov	r2, r3
 3007 0086 FFF7FEFF 		bl	memcpy
1661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* ...and release it. */
1663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 3008              		.loc 4 1663 0
 3009 008a B868     		ldr	r0, [r7, #8]
 3010 008c FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 3011 0090 12E0     		b	.L145
ARM GAS  /tmp/ccyb6dex.s 			page 107


 3012              	.L144:
1664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
1666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Or from the socket field 'xTCP.xPacket'. */
1668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket-
 3013              		.loc 4 1668 0
 3014 0092 FB69     		ldr	r3, [r7, #28]
 3015 0094 9A69     		ldr	r2, [r3, #24]
 3016 0096 FB68     		ldr	r3, [r7, #12]
 3017 0098 8233     		adds	r3, r3, #130
 3018 009a 1046     		mov	r0, r2
 3019 009c 1946     		mov	r1, r3
 3020 009e 4622     		movs	r2, #70
 3021 00a0 FFF7FEFF 		bl	memcpy
 3022 00a4 08E0     		b	.L145
 3023              	.L142:
1669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
1673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* xResize is false, the network buffer provided was big enough. */
1675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxReturn = pxNetworkBuffer;
 3024              		.loc 4 1675 0
 3025 00a6 BB68     		ldr	r3, [r7, #8]
 3026 00a8 FB61     		str	r3, [r7, #28]
1676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
1678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xDataLength member must get the correct length too! */
1679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE
 3027              		.loc 4 1679 0
 3028 00aa 7A68     		ldr	r2, [r7, #4]
 3029 00ac 3B68     		ldr	r3, [r7]
 3030 00ae 1344     		add	r3, r3, r2
 3031 00b0 03F13602 		add	r2, r3, #54
 3032 00b4 BB68     		ldr	r3, [r7, #8]
 3033 00b6 DA61     		str	r2, [r3, #28]
 3034              	.L145:
1680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return pxReturn;
 3035              		.loc 4 1682 0
 3036 00b8 FB69     		ldr	r3, [r7, #28]
1683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 3037              		.loc 4 1683 0
 3038 00ba 1846     		mov	r0, r3
 3039 00bc 2037     		adds	r7, r7, #32
 3040              	.LCFI132:
 3041              		.cfi_def_cfa_offset 8
 3042 00be BD46     		mov	sp, r7
 3043              	.LCFI133:
 3044              		.cfi_def_cfa_register 13
 3045              		@ sp needed
 3046 00c0 80BD     		pop	{r7, pc}
 3047              	.L148:
 3048 00c2 00BF     		.align	2
ARM GAS  /tmp/ccyb6dex.s 			page 108


 3049              	.L147:
 3050 00c4 00000000 		.word	xBufferAllocFixedSize
 3051              		.cfi_endproc
 3052              	.LFE42:
 3054              		.section	.text.prvTCPPrepareSend,"ax",%progbits
 3055              		.align	2
 3056              		.thumb
 3057              		.thumb_func
 3059              	prvTCPPrepareSend:
 3060              	.LFB43:
1684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
1687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Prepare an outgoing message, in case anything has to be sent.
1688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
1689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetwo
1690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 3061              		.loc 4 1690 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 64
 3064              		@ frame_needed = 1, uses_anonymous_args = 0
 3065 0000 90B5     		push	{r4, r7, lr}
 3066              	.LCFI134:
 3067              		.cfi_def_cfa_offset 12
 3068              		.cfi_offset 4, -12
 3069              		.cfi_offset 7, -8
 3070              		.cfi_offset 14, -4
 3071 0002 93B0     		sub	sp, sp, #76
 3072              	.LCFI135:
 3073              		.cfi_def_cfa_offset 88
 3074 0004 02AF     		add	r7, sp, #8
 3075              	.LCFI136:
 3076              		.cfi_def_cfa 7, 80
 3077 0006 F860     		str	r0, [r7, #12]
 3078 0008 B960     		str	r1, [r7, #8]
 3079 000a 7A60     		str	r2, [r7, #4]
1691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lDataLen;
1692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint8_t *pucEthernetBuffer, *pucSendData;
1693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket;
1694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** size_t uxOffset;
1695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulDataGot, ulDistance;
1696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow;
1697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** NetworkBufferDescriptor_t *pxNewBuffer;
1698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lStreamPos;
1699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( *ppxNetworkBuffer ) != NULL )
 3080              		.loc 4 1700 0
 3081 000c BB68     		ldr	r3, [r7, #8]
 3082 000e 1B68     		ldr	r3, [r3]
 3083 0010 002B     		cmp	r3, #0
 3084 0012 04D0     		beq	.L150
1701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* A network buffer descriptor was already supplied */
1703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 3085              		.loc 4 1703 0
 3086 0014 BB68     		ldr	r3, [r7, #8]
 3087 0016 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccyb6dex.s 			page 109


 3088 0018 9B69     		ldr	r3, [r3, #24]
 3089 001a BB63     		str	r3, [r7, #56]
 3090 001c 02E0     		b	.L151
 3091              	.L150:
1704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
1706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* For now let it point to the last packet header */
1708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 3092              		.loc 4 1708 0
 3093 001e FB68     		ldr	r3, [r7, #12]
 3094 0020 8233     		adds	r3, r3, #130
 3095 0022 BB63     		str	r3, [r7, #56]
 3096              	.L151:
1709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 3097              		.loc 4 1711 0
 3098 0024 BB6B     		ldr	r3, [r7, #56]
 3099 0026 7B63     		str	r3, [r7, #52]
1712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 3100              		.loc 4 1712 0
 3101 0028 FB68     		ldr	r3, [r7, #12]
 3102 002a DC33     		adds	r3, r3, #220
 3103 002c FB62     		str	r3, [r7, #44]
1713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	lDataLen = 0;
 3104              		.loc 4 1713 0
 3105 002e 0023     		movs	r3, #0
 3106 0030 FB63     		str	r3, [r7, #60]
1714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	lStreamPos = 0;
 3107              		.loc 4 1714 0
 3108 0032 0023     		movs	r3, #0
 3109 0034 3B61     		str	r3, [r7, #16]
1715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 3110              		.loc 4 1715 0
 3111 0036 7B6B     		ldr	r3, [r7, #52]
 3112 0038 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 3113 003c 43F01003 		orr	r3, r3, #16
 3114 0040 DAB2     		uxtb	r2, r3
 3115 0042 7B6B     		ldr	r3, [r7, #52]
 3116 0044 83F82F20 		strb	r2, [r3, #47]
1716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.txStream != NULL )
 3117              		.loc 4 1717 0
 3118 0048 FB68     		ldr	r3, [r7, #12]
 3119 004a 9B6F     		ldr	r3, [r3, #120]
 3120 004c 002B     		cmp	r3, #0
 3121 004e 7FD0     		beq	.L152
1718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* ulTCPWindowTxGet will return the amount of data which may be sent
1720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		along with the position in the txStream.
1721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		Why check for MSS > 1 ?
1722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		Because some TCP-stacks (like uIP) use it for flow-control. */
1723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.usCurMSS > 1u )
 3122              		.loc 4 1723 0
 3123 0050 FB68     		ldr	r3, [r7, #12]
 3124 0052 B3F84A30 		ldrh	r3, [r3, #74]
ARM GAS  /tmp/ccyb6dex.s 			page 110


 3125 0056 012B     		cmp	r3, #1
 3126 0058 0BD9     		bls	.L153
1724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos
 3127              		.loc 4 1725 0
 3128 005a FB68     		ldr	r3, [r7, #12]
 3129 005c D3F8CC20 		ldr	r2, [r3, #204]
 3130 0060 07F11003 		add	r3, r7, #16
 3131 0064 F86A     		ldr	r0, [r7, #44]
 3132 0066 1146     		mov	r1, r2
 3133 0068 1A46     		mov	r2, r3
 3134 006a FFF7FEFF 		bl	ulTCPWindowTxGet
 3135 006e 0346     		mov	r3, r0
 3136 0070 FB63     		str	r3, [r7, #60]
 3137              	.L153:
1726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( lDataLen > 0 )
 3138              		.loc 4 1728 0
 3139 0072 FB6B     		ldr	r3, [r7, #60]
 3140 0074 002B     		cmp	r3, #0
 3141 0076 6BDD     		ble	.L152
1729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Check if the current network buffer is big enough, if not,
1731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			resize it. */
1732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 3142              		.loc 4 1732 0
 3143 0078 BB68     		ldr	r3, [r7, #8]
 3144 007a 1B68     		ldr	r3, [r3]
 3145 007c F868     		ldr	r0, [r7, #12]
 3146 007e 1946     		mov	r1, r3
 3147 0080 FA6B     		ldr	r2, [r7, #60]
 3148 0082 7B68     		ldr	r3, [r7, #4]
 3149 0084 FFF7FEFF 		bl	prvTCPBufferResize
 3150 0088 B862     		str	r0, [r7, #40]
1733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxNewBuffer != NULL )
 3151              		.loc 4 1734 0
 3152 008a BB6A     		ldr	r3, [r7, #40]
 3153 008c 002B     		cmp	r3, #0
 3154 008e 5CD0     		beq	.L154
1735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				*ppxNetworkBuffer = pxNewBuffer;
 3155              		.loc 4 1736 0
 3156 0090 BB68     		ldr	r3, [r7, #8]
 3157 0092 BA6A     		ldr	r2, [r7, #40]
 3158 0094 1A60     		str	r2, [r3]
1737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 3159              		.loc 4 1737 0
 3160 0096 BB6A     		ldr	r3, [r7, #40]
 3161 0098 9B69     		ldr	r3, [r3, #24]
 3162 009a BB63     		str	r3, [r7, #56]
1738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 3163              		.loc 4 1738 0
 3164 009c BB6B     		ldr	r3, [r7, #56]
 3165 009e 7B63     		str	r3, [r7, #52]
1739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
ARM GAS  /tmp/ccyb6dex.s 			page 111


1740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_
 3166              		.loc 4 1740 0
 3167 00a0 7B68     		ldr	r3, [r7, #4]
 3168 00a2 3633     		adds	r3, r3, #54
 3169 00a4 BA6B     		ldr	r2, [r7, #56]
 3170 00a6 1344     		add	r3, r3, r2
 3171 00a8 7B62     		str	r3, [r7, #36]
1741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Translate the position in txStream to an offset from the tail
1743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				marker. */
1744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail
 3172              		.loc 4 1744 0
 3173 00aa FB68     		ldr	r3, [r7, #12]
 3174 00ac 9A6F     		ldr	r2, [r3, #120]
 3175 00ae FB68     		ldr	r3, [r7, #12]
 3176 00b0 9B6F     		ldr	r3, [r3, #120]
 3177 00b2 1B68     		ldr	r3, [r3]
 3178 00b4 3969     		ldr	r1, [r7, #16]
 3179 00b6 0C46     		mov	r4, r1
 3180 00b8 1046     		mov	r0, r2
 3181 00ba 1946     		mov	r1, r3
 3182 00bc 2246     		mov	r2, r4
 3183 00be FFF7FEFF 		bl	uxStreamBufferDistance
 3184 00c2 3862     		str	r0, [r7, #32]
1745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Here data is copied from the txStream in 'peek' mode.  Only
1747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				when the packets are acked, the tail marker will be updated. */
1748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, (
 3185              		.loc 4 1748 0
 3186 00c4 FB68     		ldr	r3, [r7, #12]
 3187 00c6 9A6F     		ldr	r2, [r3, #120]
 3188 00c8 FC6B     		ldr	r4, [r7, #60]
 3189 00ca 0123     		movs	r3, #1
 3190 00cc 0093     		str	r3, [sp]
 3191 00ce 1046     		mov	r0, r2
 3192 00d0 396A     		ldr	r1, [r7, #32]
 3193 00d2 7A6A     		ldr	r2, [r7, #36]
 3194 00d4 2346     		mov	r3, r4
 3195 00d6 FFF7FEFF 		bl	uxStreamBufferGet
 3196 00da F861     		str	r0, [r7, #28]
1749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( ulDataGot != ( uint32_t ) lDataLen )
1753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
1754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %lu offs %lu only %lu != %lu\n",
1755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							lStreamPos, uxOffset, ulDataGot, lDataLen ) );
1756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
1757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#endif
1759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* If the owner of the socket requests a closure, add the FIN
1761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				flag to the last packet. */
1762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bF
 3197              		.loc 4 1762 0
 3198 00dc FB68     		ldr	r3, [r7, #12]
 3199 00de 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
ARM GAS  /tmp/ccyb6dex.s 			page 112


 3200 00e2 03F04003 		and	r3, r3, #64
 3201 00e6 DBB2     		uxtb	r3, r3
 3202 00e8 002B     		cmp	r3, #0
 3203 00ea 31D0     		beq	.L152
 3204              		.loc 4 1762 0 is_stmt 0 discriminator 1
 3205 00ec FB68     		ldr	r3, [r7, #12]
 3206 00ee 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 3207 00f2 03F04003 		and	r3, r3, #64
 3208 00f6 DBB2     		uxtb	r3, r3
 3209 00f8 002B     		cmp	r3, #0
 3210 00fa 29D1     		bne	.L152
1763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStrea
 3211              		.loc 4 1764 0 is_stmt 1
 3212 00fc FB68     		ldr	r3, [r7, #12]
 3213 00fe 9A6F     		ldr	r2, [r3, #120]
 3214 0100 3B69     		ldr	r3, [r7, #16]
 3215 0102 1946     		mov	r1, r3
 3216 0104 FB68     		ldr	r3, [r7, #12]
 3217 0106 9B6F     		ldr	r3, [r3, #120]
 3218 0108 9B68     		ldr	r3, [r3, #8]
 3219 010a 1046     		mov	r0, r2
 3220 010c 1A46     		mov	r2, r3
 3221 010e FFF7FEFF 		bl	uxStreamBufferDistance
 3222 0112 B861     		str	r0, [r7, #24]
1765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( ulDistance == ulDataGot )
 3223              		.loc 4 1766 0
 3224 0114 BA69     		ldr	r2, [r7, #24]
 3225 0116 FB69     		ldr	r3, [r7, #28]
 3226 0118 9A42     		cmp	r2, r3
 3227 011a 19D1     		bne	.L152
1767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
1768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						#if (ipconfigHAS_DEBUG_PRINTF == 1)
1769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						{
1770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						/* the order of volatile accesses is undefined
1771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							so such workaround */
1772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
1773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
1774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
1775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							FreeRTOS_debug_printf( ( "CheckClose %lu <= %lu (%lu <= %lu <= %lu)\n", ulDataGot, ulDistanc
1777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								uxTail, uxMid, uxHead ) );
1778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						}
1779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						#endif
1780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						/* Although the socket sends a FIN, it will stay in
1781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						ESTABLISHED until all current data has been received or
1782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						delivered. */
1783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 3228              		.loc 4 1783 0
 3229 011c 7B6B     		ldr	r3, [r7, #52]
 3230 011e 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 3231 0122 43F00103 		orr	r3, r3, #1
 3232 0126 DAB2     		uxtb	r2, r3
 3233 0128 7B6B     		ldr	r3, [r7, #52]
 3234 012a 83F82F20 		strb	r2, [r3, #47]
1784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLe
ARM GAS  /tmp/ccyb6dex.s 			page 113


 3235              		.loc 4 1784 0
 3236 012e FB6A     		ldr	r3, [r7, #44]
 3237 0130 DA6A     		ldr	r2, [r3, #44]
 3238 0132 FB6B     		ldr	r3, [r7, #60]
 3239 0134 1A44     		add	r2, r2, r3
 3240 0136 FB6A     		ldr	r3, [r7, #44]
 3241 0138 5A62     		str	r2, [r3, #36]
1785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 3242              		.loc 4 1785 0
 3243 013a FA68     		ldr	r2, [r7, #12]
 3244 013c 92F84130 		ldrb	r3, [r2, #65]
 3245 0140 43F04003 		orr	r3, r3, #64
 3246 0144 82F84130 		strb	r3, [r2, #65]
 3247 0148 02E0     		b	.L152
 3248              	.L154:
1786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
1787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
1790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				lDataLen = -1;
 3249              		.loc 4 1791 0
 3250 014a 4FF0FF33 		mov	r3, #-1
 3251 014e FB63     		str	r3, [r7, #60]
 3252              	.L152:
1792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 3253              		.loc 4 1796 0
 3254 0150 FB6B     		ldr	r3, [r7, #60]
 3255 0152 002B     		cmp	r3, #0
 3256 0154 7EDB     		blt	.L156
 3257              		.loc 4 1796 0 is_stmt 0 discriminator 1
 3258 0156 FB68     		ldr	r3, [r7, #12]
 3259 0158 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 3260 015c 052B     		cmp	r3, #5
 3261 015e 79D1     		bne	.L156
1797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* See if the socket owner wants to shutdown this connection. */
1799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 3262              		.loc 4 1799 0 is_stmt 1
 3263 0160 FB68     		ldr	r3, [r7, #12]
 3264 0162 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 3265 0166 03F02003 		and	r3, r3, #32
 3266 016a DBB2     		uxtb	r3, r3
 3267 016c 002B     		cmp	r3, #0
 3268 016e 2BD0     		beq	.L157
1800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 3269              		.loc 4 1800 0 discriminator 1
 3270 0170 F86A     		ldr	r0, [r7, #44]
 3271 0172 FFF7FEFF 		bl	xTCPWindowTxDone
 3272 0176 0346     		mov	r3, r0
1799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 3273              		.loc 4 1799 0 discriminator 1
 3274 0178 002B     		cmp	r3, #0
ARM GAS  /tmp/ccyb6dex.s 			page 114


 3275 017a 25D0     		beq	.L157
1801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 3276              		.loc 4 1802 0
 3277 017c FA68     		ldr	r2, [r7, #12]
 3278 017e 92F84030 		ldrb	r3, [r2, #64]
 3279 0182 6FF34513 		bfc	r3, #5, #1
 3280 0186 82F84030 		strb	r3, [r2, #64]
1803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 3281              		.loc 4 1803 0
 3282 018a 7B6B     		ldr	r3, [r7, #52]
 3283 018c 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 3284 0190 43F00103 		orr	r3, r3, #1
 3285 0194 DAB2     		uxtb	r2, r3
 3286 0196 7B6B     		ldr	r3, [r7, #52]
 3287 0198 83F82F20 		strb	r2, [r3, #47]
1804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 3288              		.loc 4 1804 0
 3289 019c FA68     		ldr	r2, [r7, #12]
 3290 019e 92F84130 		ldrb	r3, [r2, #65]
 3291 01a2 43F04003 		orr	r3, r3, #64
 3292 01a6 82F84130 		strb	r3, [r2, #65]
1805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 3293              		.loc 4 1805 0
 3294 01aa FA68     		ldr	r2, [r7, #12]
 3295 01ac 92F84130 		ldrb	r3, [r2, #65]
 3296 01b0 43F00103 		orr	r3, r3, #1
 3297 01b4 82F84130 		strb	r3, [r2, #65]
1806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 3298              		.loc 4 1806 0
 3299 01b8 FB6A     		ldr	r3, [r7, #44]
 3300 01ba 1A6A     		ldr	r2, [r3, #32]
 3301 01bc FB6A     		ldr	r3, [r7, #44]
 3302 01be 5A62     		str	r2, [r3, #36]
1807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 3303              		.loc 4 1807 0
 3304 01c0 F868     		ldr	r0, [r7, #12]
 3305 01c2 0621     		movs	r1, #6
 3306 01c4 FFF7FEFF 		bl	vTCPStateChange
 3307              	.L157:
1808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigTCP_KEEP_ALIVE != 0 )
1811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 3308              		.loc 4 1812 0
 3309 01c8 FB68     		ldr	r3, [r7, #12]
 3310 01ca 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 3311 01ce 032B     		cmp	r3, #3
 3312 01d0 06D9     		bls	.L158
1813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
1815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
1816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
1817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 3313              		.loc 4 1817 0
 3314 01d2 F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/ccyb6dex.s 			page 115


 3315 01d4 0821     		movs	r1, #8
 3316 01d6 FFF7FEFF 		bl	vTCPStateChange
1818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				lDataLen = -1;
 3317              		.loc 4 1818 0
 3318 01da 4FF0FF33 		mov	r3, #-1
 3319 01de FB63     		str	r3, [r7, #60]
 3320              	.L158:
1819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 3321              		.loc 4 1820 0
 3322 01e0 FB6B     		ldr	r3, [r7, #60]
 3323 01e2 002B     		cmp	r3, #0
 3324 01e4 36D1     		bne	.L156
 3325              		.loc 4 1820 0 is_stmt 0 discriminator 1
 3326 01e6 FB68     		ldr	r3, [r7, #12]
 3327 01e8 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 3328 01ec 03F00103 		and	r3, r3, #1
 3329 01f0 DBB2     		uxtb	r3, r3
 3330 01f2 002B     		cmp	r3, #0
 3331 01f4 2ED1     		bne	.L156
 3332              	.LBB13:
1821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* If there is no data to be sent, and no window-update message,
1823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				we might want to send a keep-alive message. */
1824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 3333              		.loc 4 1824 0 is_stmt 1
 3334 01f6 FFF7FEFF 		bl	xTaskGetTickCount
 3335 01fa 0246     		mov	r2, r0
 3336 01fc FB68     		ldr	r3, [r7, #12]
 3337 01fe DB6D     		ldr	r3, [r3, #92]
 3338 0200 D31A     		subs	r3, r2, r3
 3339 0202 7B61     		str	r3, [r7, #20]
1825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				TickType_t xMax;
1826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 3340              		.loc 4 1826 0
 3341 0204 44F62063 		movw	r3, #20000
 3342 0208 3B63     		str	r3, [r7, #48]
1827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.ucKeepRepCount )
 3343              		.loc 4 1827 0
 3344 020a FB68     		ldr	r3, [r7, #12]
 3345 020c 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 3346 0210 002B     		cmp	r3, #0
 3347 0212 02D0     		beq	.L159
1828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xMax = ( 3u * configTICK_RATE_HZ );
 3348              		.loc 4 1829 0
 3349 0214 40F6B833 		movw	r3, #3000
 3350 0218 3B63     		str	r3, [r7, #48]
 3351              	.L159:
1830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( xAge > xMax )
 3352              		.loc 4 1831 0
 3353 021a 7A69     		ldr	r2, [r7, #20]
 3354 021c 3B6B     		ldr	r3, [r7, #48]
 3355 021e 9A42     		cmp	r2, r3
 3356 0220 18D9     		bls	.L156
1832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
ARM GAS  /tmp/ccyb6dex.s 			page 116


1833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 3357              		.loc 4 1833 0
 3358 0222 FFF7FEFF 		bl	xTaskGetTickCount
 3359 0226 0246     		mov	r2, r0
 3360 0228 FB68     		ldr	r3, [r7, #12]
 3361 022a DA65     		str	r2, [r3, #92]
1834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( xTCPWindowLoggingLevel )
1835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
1836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.ulRemoteIP,
1837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.usRemotePort,
1838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.ucKeepRepCount ) );
1839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 3362              		.loc 4 1839 0
 3363 022c FA68     		ldr	r2, [r7, #12]
 3364 022e 92F84130 		ldrb	r3, [r2, #65]
 3365 0232 43F00203 		orr	r3, r3, #2
 3366 0236 82F84130 		strb	r3, [r2, #65]
1840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 3367              		.loc 4 1840 0
 3368 023a FB68     		ldr	r3, [r7, #12]
 3369 023c 40F6C412 		movw	r2, #2500
 3370 0240 A3F84820 		strh	r2, [r3, #72]	@ movhi
1841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.ucKeepRepCount++;
 3371              		.loc 4 1841 0
 3372 0244 FB68     		ldr	r3, [r7, #12]
 3373 0246 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 3374 024a 0133     		adds	r3, r3, #1
 3375 024c DAB2     		uxtb	r2, r3
 3376 024e FB68     		ldr	r3, [r7, #12]
 3377 0250 83F85820 		strb	r2, [r3, #88]
 3378              	.L156:
 3379              	.LBE13:
1842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigTCP_KEEP_ALIVE */
1846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Anything to send, a change of the advertised window size, or maybe send a
1849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	keep-alive message? */
1850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( lDataLen > 0 ) ||
 3380              		.loc 4 1850 0
 3381 0254 FB6B     		ldr	r3, [r7, #60]
 3382 0256 002B     		cmp	r3, #0
 3383 0258 0FDC     		bgt	.L160
1851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 3384              		.loc 4 1851 0 discriminator 1
 3385 025a FB68     		ldr	r3, [r7, #12]
 3386 025c 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 3387 0260 03F00103 		and	r3, r3, #1
 3388 0264 DBB2     		uxtb	r3, r3
1850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 3389              		.loc 4 1850 0 discriminator 1
 3390 0266 002B     		cmp	r3, #0
 3391 0268 07D1     		bne	.L160
1852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 3392              		.loc 4 1852 0
ARM GAS  /tmp/ccyb6dex.s 			page 117


 3393 026a FB68     		ldr	r3, [r7, #12]
 3394 026c 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 3395 0270 03F00203 		and	r3, r3, #2
 3396 0274 DBB2     		uxtb	r3, r3
1851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 3397              		.loc 4 1851 0
 3398 0276 002B     		cmp	r3, #0
 3399 0278 2BD0     		beq	.L161
 3400              	.L160:
1853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 3401              		.loc 4 1854 0
 3402 027a 7B6B     		ldr	r3, [r7, #52]
 3403 027c 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 3404 0280 23F00803 		bic	r3, r3, #8
 3405 0284 DAB2     		uxtb	r2, r3
 3406 0286 7B6B     		ldr	r3, [r7, #52]
 3407 0288 83F82F20 		strb	r2, [r3, #47]
1855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 
 3408              		.loc 4 1855 0
 3409 028c 7B68     		ldr	r3, [r7, #4]
 3410 028e DBB2     		uxtb	r3, r3
 3411 0290 1433     		adds	r3, r3, #20
 3412 0292 DBB2     		uxtb	r3, r3
 3413 0294 9B00     		lsls	r3, r3, #2
 3414 0296 DAB2     		uxtb	r2, r3
 3415 0298 7B6B     		ldr	r3, [r7, #52]
 3416 029a 83F82E20 		strb	r2, [r3, #46]
1856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 3417              		.loc 4 1857 0
 3418 029e 7B6B     		ldr	r3, [r7, #52]
 3419 02a0 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 3420 02a4 43F01003 		orr	r3, r3, #16
 3421 02a8 DAB2     		uxtb	r2, r3
 3422 02aa 7B6B     		ldr	r3, [r7, #52]
 3423 02ac 83F82F20 		strb	r2, [r3, #47]
1858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( lDataLen != 0l )
 3424              		.loc 4 1859 0
 3425 02b0 FB6B     		ldr	r3, [r7, #60]
 3426 02b2 002B     		cmp	r3, #0
 3427 02b4 08D0     		beq	.L162
1860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 3428              		.loc 4 1861 0
 3429 02b6 7B6B     		ldr	r3, [r7, #52]
 3430 02b8 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 3431 02bc 43F00803 		orr	r3, r3, #8
 3432 02c0 DAB2     		uxtb	r2, r3
 3433 02c2 7B6B     		ldr	r3, [r7, #52]
 3434 02c4 83F82F20 		strb	r2, [r3, #47]
 3435              	.L162:
1862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if	ipconfigUSE_TCP_TIMESTAMPS == 1
1865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
ARM GAS  /tmp/ccyb6dex.s 			page 118


1866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( xOptionsLength == 0 )
1867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.xTCPWindow.u.bits.bTimeStamps )
1869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
1870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
1871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xOptionsLength = prvTCPSetTimeStamp( 0, pxSocket, &pxTCPPacket->xTCPHeader );
1872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
1873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif
1876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 3436              		.loc 4 1877 0
 3437 02c8 FA6B     		ldr	r2, [r7, #60]
 3438 02ca 7B68     		ldr	r3, [r7, #4]
 3439 02cc 1344     		add	r3, r3, r2
 3440 02ce 2833     		adds	r3, r3, #40
 3441 02d0 FB63     		str	r3, [r7, #60]
 3442              	.L161:
1878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return lDataLen;
 3443              		.loc 4 1880 0
 3444 02d2 FB6B     		ldr	r3, [r7, #60]
1881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 3445              		.loc 4 1881 0
 3446 02d4 1846     		mov	r0, r3
 3447 02d6 4437     		adds	r7, r7, #68
 3448              	.LCFI137:
 3449              		.cfi_def_cfa_offset 12
 3450 02d8 BD46     		mov	sp, r7
 3451              	.LCFI138:
 3452              		.cfi_def_cfa_register 13
 3453              		@ sp needed
 3454 02da 90BD     		pop	{r4, r7, pc}
 3455              		.cfi_endproc
 3456              	.LFE43:
 3458              		.section	.text.prvTCPNextTimeout,"ax",%progbits
 3459              		.align	2
 3460              		.thumb
 3461              		.thumb_func
 3463              	prvTCPNextTimeout:
 3464              	.LFB44:
1882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
1885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Calculate after how much time this socket needs to be checked again.
1886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
1887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
1888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 3465              		.loc 4 1888 0
 3466              		.cfi_startproc
 3467              		@ args = 0, pretend = 0, frame = 16
 3468              		@ frame_needed = 1, uses_anonymous_args = 0
 3469 0000 80B5     		push	{r7, lr}
 3470              	.LCFI139:
 3471              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccyb6dex.s 			page 119


 3472              		.cfi_offset 7, -8
 3473              		.cfi_offset 14, -4
 3474 0002 84B0     		sub	sp, sp, #16
 3475              	.LCFI140:
 3476              		.cfi_def_cfa_offset 24
 3477 0004 00AF     		add	r7, sp, #0
 3478              	.LCFI141:
 3479              		.cfi_def_cfa_register 7
 3480 0006 7860     		str	r0, [r7, #4]
1889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TickType_t ulDelayMs = ( TickType_t ) 20000;
 3481              		.loc 4 1889 0
 3482 0008 44F62063 		movw	r3, #20000
 3483 000c BB60     		str	r3, [r7, #8]
1890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 3484              		.loc 4 1891 0
 3485 000e 7B68     		ldr	r3, [r7, #4]
 3486 0010 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 3487 0014 022B     		cmp	r3, #2
 3488 0016 35D1     		bne	.L165
1892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The socket is actively connecting to a peer. */
1894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bConnPrepared )
 3489              		.loc 4 1894 0
 3490 0018 7B68     		ldr	r3, [r7, #4]
 3491 001a 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 3492 001e 03F00803 		and	r3, r3, #8
 3493 0022 DBB2     		uxtb	r3, r3
 3494 0024 002B     		cmp	r3, #0
 3495 0026 12D0     		beq	.L166
1895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Ethernet address has been found, use progressive timeout for
1897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			active connect(). */
1898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.ucRepCount < 3u )
 3496              		.loc 4 1898 0
 3497 0028 7B68     		ldr	r3, [r7, #4]
 3498 002a 93F85230 		ldrb	r3, [r3, #82]	@ zero_extendqisi2
 3499 002e 022B     		cmp	r3, #2
 3500 0030 09D8     		bhi	.L167
1899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 3501              		.loc 4 1900 0
 3502 0032 7B68     		ldr	r3, [r7, #4]
 3503 0034 93F85230 		ldrb	r3, [r3, #82]	@ zero_extendqisi2
 3504 0038 013B     		subs	r3, r3, #1
 3505 003a 1A46     		mov	r2, r3
 3506 003c 40F6B833 		movw	r3, #3000
 3507 0040 9340     		lsls	r3, r3, r2
 3508 0042 BB60     		str	r3, [r7, #8]
 3509 0044 06E0     		b	.L169
 3510              	.L167:
1901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
1903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
1904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulDelayMs = 11000UL;
 3511              		.loc 4 1904 0
 3512 0046 42F6F823 		movw	r3, #11000
ARM GAS  /tmp/ccyb6dex.s 			page 120


 3513 004a BB60     		str	r3, [r7, #8]
 3514 004c 02E0     		b	.L169
 3515              	.L166:
1905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
1906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
1908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Still in the ARP phase: check every half second. */
1910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulDelayMs = 500UL;
 3516              		.loc 4 1910 0
 3517 004e 4FF4FA73 		mov	r3, #500
 3518 0052 BB60     		str	r3, [r7, #8]
 3519              	.L169:
1911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
1914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
1915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
1916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 3520              		.loc 4 1916 0
 3521 0054 BB68     		ldr	r3, [r7, #8]
 3522 0056 4FF47A72 		mov	r2, #1000
 3523 005a 02FB03F3 		mul	r3, r2, r3
 3524 005e B3F57A7F 		cmp	r3, #1000
 3525 0062 0AD3     		bcc	.L170
 3526              		.loc 4 1916 0 is_stmt 0 discriminator 1
 3527 0064 BB68     		ldr	r3, [r7, #8]
 3528 0066 4FF47A72 		mov	r2, #1000
 3529 006a 02FB03F3 		mul	r3, r2, r3
 3530 006e 234A     		ldr	r2, .L179
 3531 0070 A2FB0323 		umull	r2, r3, r2, r3
 3532 0074 9B09     		lsrs	r3, r3, #6
 3533 0076 9AB2     		uxth	r2, r3
 3534 0078 00E0     		b	.L171
 3535              	.L170:
 3536              		.loc 4 1916 0 discriminator 2
 3537 007a 0122     		movs	r2, #1
 3538              	.L171:
 3539              		.loc 4 1916 0 discriminator 4
 3540 007c 7B68     		ldr	r3, [r7, #4]
 3541 007e A3F84820 		strh	r2, [r3, #72]	@ movhi
 3542 0082 34E0     		b	.L172
 3543              	.L165:
1917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else if( pxSocket->u.xTCP.usTimeout == 0u )
 3544              		.loc 4 1918 0 is_stmt 1
 3545 0084 7B68     		ldr	r3, [r7, #4]
 3546 0086 B3F84830 		ldrh	r3, [r3, #72]
 3547 008a 002B     		cmp	r3, #0
 3548 008c 2FD1     		bne	.L172
 3549              	.LBB14:
1919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Let the sliding window mechanism decide what time-out is appropriate. */
1921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindow
 3550              		.loc 4 1921 0
 3551 008e 7B68     		ldr	r3, [r7, #4]
 3552 0090 03F1DC01 		add	r1, r3, #220
ARM GAS  /tmp/ccyb6dex.s 			page 121


 3553 0094 7B68     		ldr	r3, [r7, #4]
 3554 0096 D3F8CC20 		ldr	r2, [r3, #204]
 3555 009a 07F10803 		add	r3, r7, #8
 3556 009e 0846     		mov	r0, r1
 3557 00a0 1146     		mov	r1, r2
 3558 00a2 1A46     		mov	r2, r3
 3559 00a4 FFF7FEFF 		bl	xTCPWindowTxHasData
 3560 00a8 F860     		str	r0, [r7, #12]
1922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ulDelayMs == 0u )
 3561              		.loc 4 1922 0
 3562 00aa BB68     		ldr	r3, [r7, #8]
 3563 00ac 002B     		cmp	r3, #0
 3564 00ae 07D1     		bne	.L173
1923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulDelayMs = xResult ? 1UL : 20000UL;
 3565              		.loc 4 1924 0
 3566 00b0 FB68     		ldr	r3, [r7, #12]
 3567 00b2 002B     		cmp	r3, #0
 3568 00b4 01D0     		beq	.L174
 3569              		.loc 4 1924 0 is_stmt 0 discriminator 1
 3570 00b6 0123     		movs	r3, #1
 3571 00b8 01E0     		b	.L175
 3572              	.L174:
 3573              		.loc 4 1924 0 discriminator 2
 3574 00ba 44F62063 		movw	r3, #20000
 3575              	.L175:
 3576              		.loc 4 1924 0 discriminator 4
 3577 00be BB60     		str	r3, [r7, #8]
 3578              	.L173:
1925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
1927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* ulDelayMs contains the time to wait before a re-transmission. */
1929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 3579              		.loc 4 1930 0 is_stmt 1
 3580 00c0 BB68     		ldr	r3, [r7, #8]
 3581 00c2 4FF47A72 		mov	r2, #1000
 3582 00c6 02FB03F3 		mul	r3, r2, r3
 3583 00ca B3F57A7F 		cmp	r3, #1000
 3584 00ce 0AD3     		bcc	.L176
 3585              		.loc 4 1930 0 is_stmt 0 discriminator 1
 3586 00d0 BB68     		ldr	r3, [r7, #8]
 3587 00d2 4FF47A72 		mov	r2, #1000
 3588 00d6 02FB03F3 		mul	r3, r2, r3
 3589 00da 084A     		ldr	r2, .L179
 3590 00dc A2FB0323 		umull	r2, r3, r2, r3
 3591 00e0 9B09     		lsrs	r3, r3, #6
 3592 00e2 9AB2     		uxth	r2, r3
 3593 00e4 00E0     		b	.L177
 3594              	.L176:
 3595              		.loc 4 1930 0 discriminator 2
 3596 00e6 0122     		movs	r2, #1
 3597              	.L177:
 3598              		.loc 4 1930 0 discriminator 4
 3599 00e8 7B68     		ldr	r3, [r7, #4]
 3600 00ea A3F84820 		strh	r2, [r3, #72]	@ movhi
ARM GAS  /tmp/ccyb6dex.s 			page 122


 3601              	.L172:
 3602              	.LBE14:
1931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
1933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* field '.usTimeout' has already been set (by the
1935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		keep-alive/delayed-ACK mechanism). */
1936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Return the number of clock ticks before the timer expires. */
1939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 3603              		.loc 4 1939 0 is_stmt 1
 3604 00ee 7B68     		ldr	r3, [r7, #4]
 3605 00f0 B3F84830 		ldrh	r3, [r3, #72]
1940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 3606              		.loc 4 1940 0
 3607 00f4 1846     		mov	r0, r3
 3608 00f6 1037     		adds	r7, r7, #16
 3609              	.LCFI142:
 3610              		.cfi_def_cfa_offset 8
 3611 00f8 BD46     		mov	sp, r7
 3612              	.LCFI143:
 3613              		.cfi_def_cfa_register 13
 3614              		@ sp needed
 3615 00fa 80BD     		pop	{r7, pc}
 3616              	.L180:
 3617              		.align	2
 3618              	.L179:
 3619 00fc D34D6210 		.word	274877907
 3620              		.cfi_endproc
 3621              	.LFE44:
 3623              		.section	.text.prvTCPAddTxData,"ax",%progbits
 3624              		.align	2
 3625              		.thumb
 3626              		.thumb_func
 3628              	prvTCPAddTxData:
 3629              	.LFB45:
1941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
1944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 3630              		.loc 4 1944 0
 3631              		.cfi_startproc
 3632              		@ args = 0, pretend = 0, frame = 16
 3633              		@ frame_needed = 1, uses_anonymous_args = 0
 3634 0000 90B5     		push	{r4, r7, lr}
 3635              	.LCFI144:
 3636              		.cfi_def_cfa_offset 12
 3637              		.cfi_offset 4, -12
 3638              		.cfi_offset 7, -8
 3639              		.cfi_offset 14, -4
 3640 0002 85B0     		sub	sp, sp, #20
 3641              	.LCFI145:
 3642              		.cfi_def_cfa_offset 32
 3643 0004 00AF     		add	r7, sp, #0
 3644              	.LCFI146:
 3645              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccyb6dex.s 			page 123


 3646 0006 7860     		str	r0, [r7, #4]
1945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lCount, lLength;
1946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* A txStream has been created already, see if the socket has new data for
1948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	the sliding window.
1949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
1951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	Tx data which has not been passed to the sliding window yet.  The oldest
1952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	data not-yet-confirmed can be found at rxTail. */
1953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 3647              		.loc 4 1953 0
 3648 0008 7B68     		ldr	r3, [r7, #4]
 3649 000a 9B6F     		ldr	r3, [r3, #120]
 3650 000c 1846     		mov	r0, r3
 3651 000e FFF7FEFF 		bl	uxStreamBufferMidSpace
 3652 0012 0346     		mov	r3, r0
 3653 0014 FB60     		str	r3, [r7, #12]
1954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( lLength > 0 )
 3654              		.loc 4 1955 0
 3655 0016 FB68     		ldr	r3, [r7, #12]
 3656 0018 002B     		cmp	r3, #0
 3657 001a 1ADD     		ble	.L181
1956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* All data between txMid and rxHead will now be passed to the sliding
1958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		window manager, so it can start transmitting them.
1959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		Hand over the new data to the sliding window handler.  It will be
1961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		split-up in chunks of 1460 bytes each (or less, depending on
1962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ipconfigTCP_MSS). */
1963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 3658              		.loc 4 1963 0
 3659 001c 7B68     		ldr	r3, [r7, #4]
 3660 001e 03F1DC01 		add	r1, r3, #220
 3661 0022 FA68     		ldr	r2, [r7, #12]
1964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								( uint32_t ) lLength,
1965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 3662              		.loc 4 1965 0
 3663 0024 7B68     		ldr	r3, [r7, #4]
 3664 0026 9B6F     		ldr	r3, [r3, #120]
 3665 0028 5B68     		ldr	r3, [r3, #4]
1963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								( uint32_t ) lLength,
 3666              		.loc 4 1963 0
 3667 002a 1C46     		mov	r4, r3
1966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 3668              		.loc 4 1966 0
 3669 002c 7B68     		ldr	r3, [r7, #4]
 3670 002e 9B6F     		ldr	r3, [r3, #120]
 3671 0030 1B69     		ldr	r3, [r3, #16]
1963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 								( uint32_t ) lLength,
 3672              		.loc 4 1963 0
 3673 0032 0846     		mov	r0, r1
 3674 0034 1146     		mov	r1, r2
 3675 0036 2246     		mov	r2, r4
 3676 0038 FFF7FEFF 		bl	lTCPWindowTxAdd
 3677 003c B860     		str	r0, [r7, #8]
1967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
ARM GAS  /tmp/ccyb6dex.s 			page 124


1968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Move the rxMid pointer forward up to rxHead. */
1969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( lCount > 0 )
 3678              		.loc 4 1969 0
 3679 003e BB68     		ldr	r3, [r7, #8]
 3680 0040 002B     		cmp	r3, #0
 3681 0042 06DD     		ble	.L181
1970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
1971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 3682              		.loc 4 1971 0
 3683 0044 7B68     		ldr	r3, [r7, #4]
 3684 0046 9A6F     		ldr	r2, [r3, #120]
 3685 0048 BB68     		ldr	r3, [r7, #8]
 3686 004a 1046     		mov	r0, r2
 3687 004c 1946     		mov	r1, r3
 3688 004e FFF7FEFF 		bl	vStreamBufferMoveMid
 3689              	.L181:
1972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
1973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 3690              		.loc 4 1974 0
 3691 0052 1437     		adds	r7, r7, #20
 3692              	.LCFI147:
 3693              		.cfi_def_cfa_offset 12
 3694 0054 BD46     		mov	sp, r7
 3695              	.LCFI148:
 3696              		.cfi_def_cfa_register 13
 3697              		@ sp needed
 3698 0056 90BD     		pop	{r4, r7, pc}
 3699              		.cfi_endproc
 3700              	.LFE45:
 3702              		.section	.text.prvTCPHandleFin,"ax",%progbits
 3703              		.align	2
 3704              		.thumb
 3705              		.thumb_func
 3707              	prvTCPHandleFin:
 3708              	.LFB46:
1975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
1978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvTCPHandleFin() will be called to handle socket closure
1979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The Closure starts when either a FIN has been received and accepted,
1980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Or when the socket has sent a FIN flag to the peer
1981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Before being called, it has been checked that both reception and transmission
1982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * are complete.
1983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
1984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetwor
1985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 3709              		.loc 4 1985 0
 3710              		.cfi_startproc
 3711              		@ args = 0, pretend = 0, frame = 32
 3712              		@ frame_needed = 1, uses_anonymous_args = 0
 3713 0000 80B5     		push	{r7, lr}
 3714              	.LCFI149:
 3715              		.cfi_def_cfa_offset 8
 3716              		.cfi_offset 7, -8
 3717              		.cfi_offset 14, -4
 3718 0002 88B0     		sub	sp, sp, #32
ARM GAS  /tmp/ccyb6dex.s 			page 125


 3719              	.LCFI150:
 3720              		.cfi_def_cfa_offset 40
 3721 0004 00AF     		add	r7, sp, #0
 3722              	.LCFI151:
 3723              		.cfi_def_cfa_register 7
 3724 0006 7860     		str	r0, [r7, #4]
 3725 0008 3960     		str	r1, [r7]
1986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 3726              		.loc 4 1986 0
 3727 000a 3B68     		ldr	r3, [r7]
 3728 000c 9B69     		ldr	r3, [r3, #24]
 3729 000e BB61     		str	r3, [r7, #24]
1987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 3730              		.loc 4 1987 0
 3731 0010 BB69     		ldr	r3, [r7, #24]
 3732 0012 2233     		adds	r3, r3, #34
 3733 0014 7B61     		str	r3, [r7, #20]
1988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 3734              		.loc 4 1988 0
 3735 0016 7B69     		ldr	r3, [r7, #20]
 3736 0018 5B7B     		ldrb	r3, [r3, #13]
 3737 001a FB74     		strb	r3, [r7, #19]
1989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 3738              		.loc 4 1989 0
 3739 001c 7B68     		ldr	r3, [r7, #4]
 3740 001e DC33     		adds	r3, r3, #220
 3741 0020 FB60     		str	r3, [r7, #12]
1990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0;
 3742              		.loc 4 1990 0
 3743 0022 0023     		movs	r3, #0
 3744 0024 FB61     		str	r3, [r7, #28]
1991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 3745              		.loc 4 1991 0
 3746 0026 7B69     		ldr	r3, [r7, #20]
 3747 0028 9B68     		ldr	r3, [r3, #8]	@ unaligned
 3748 002a 1A06     		lsls	r2, r3, #24
 3749 002c 7B69     		ldr	r3, [r7, #20]
 3750 002e 9B68     		ldr	r3, [r3, #8]	@ unaligned
 3751 0030 03F47F43 		and	r3, r3, #65280
 3752 0034 1B02     		lsls	r3, r3, #8
 3753 0036 1A43     		orrs	r2, r2, r3
 3754 0038 7B69     		ldr	r3, [r7, #20]
 3755 003a 9B68     		ldr	r3, [r3, #8]	@ unaligned
 3756 003c 03F47F03 		and	r3, r3, #16711680
 3757 0040 1B0A     		lsrs	r3, r3, #8
 3758 0042 1A43     		orrs	r2, r2, r3
 3759 0044 7B69     		ldr	r3, [r7, #20]
 3760 0046 9B68     		ldr	r3, [r3, #8]	@ unaligned
 3761 0048 1B0E     		lsrs	r3, r3, #24
 3762 004a 1343     		orrs	r3, r3, r2
 3763 004c BB60     		str	r3, [r7, #8]
1992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
1993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 3764              		.loc 4 1993 0
 3765 004e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3766 0050 03F00103 		and	r3, r3, #1
 3767 0054 002B     		cmp	r3, #0
ARM GAS  /tmp/ccyb6dex.s 			page 126


 3768 0056 04D0     		beq	.L184
1994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 3769              		.loc 4 1995 0
 3770 0058 FB68     		ldr	r3, [r7, #12]
 3771 005a 5B69     		ldr	r3, [r3, #20]
 3772 005c 5A1C     		adds	r2, r3, #1
 3773 005e FB68     		ldr	r3, [r7, #12]
 3774 0060 1A61     		str	r2, [r3, #16]
 3775              	.L184:
1996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
1997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 3776              		.loc 4 1997 0
 3777 0062 7B68     		ldr	r3, [r7, #4]
 3778 0064 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 3779 0068 03F04003 		and	r3, r3, #64
 3780 006c DBB2     		uxtb	r3, r3
 3781 006e 002B     		cmp	r3, #0
 3782 0070 0BD1     		bne	.L185
1998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
1999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* We haven't yet replied with a FIN, do so now. */
2000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 3783              		.loc 4 2000 0
 3784 0072 FB68     		ldr	r3, [r7, #12]
 3785 0074 1A6A     		ldr	r2, [r3, #32]
 3786 0076 FB68     		ldr	r3, [r7, #12]
 3787 0078 5A62     		str	r2, [r3, #36]
2001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 3788              		.loc 4 2001 0
 3789 007a 7A68     		ldr	r2, [r7, #4]
 3790 007c 92F84130 		ldrb	r3, [r2, #65]
 3791 0080 43F04003 		orr	r3, r3, #64
 3792 0084 82F84130 		strb	r3, [r2, #65]
 3793 0088 0CE0     		b	.L186
 3794              	.L185:
2002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
2004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* We did send a FIN already, see if it's ACK'd. */
2006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 3795              		.loc 4 2006 0
 3796 008a FB68     		ldr	r3, [r7, #12]
 3797 008c 5B6A     		ldr	r3, [r3, #36]
 3798 008e 5A1C     		adds	r2, r3, #1
 3799 0090 BB68     		ldr	r3, [r7, #8]
 3800 0092 9A42     		cmp	r2, r3
 3801 0094 06D1     		bne	.L186
2007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 3802              		.loc 4 2008 0
 3803 0096 7A68     		ldr	r2, [r7, #4]
 3804 0098 92F84230 		ldrb	r3, [r2, #66]
 3805 009c 43F00103 		orr	r3, r3, #1
 3806 00a0 82F84230 		strb	r3, [r2, #66]
 3807              	.L186:
2009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
ARM GAS  /tmp/ccyb6dex.s 			page 127


2011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 3808              		.loc 4 2012 0
 3809 00a4 7B68     		ldr	r3, [r7, #4]
 3810 00a6 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 3811 00aa 03F00103 		and	r3, r3, #1
 3812 00ae DBB2     		uxtb	r3, r3
 3813 00b0 002B     		cmp	r3, #0
 3814 00b2 0BD1     		bne	.L187
2013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 3815              		.loc 4 2014 0
 3816 00b4 FB68     		ldr	r3, [r7, #12]
 3817 00b6 5A6A     		ldr	r2, [r3, #36]
 3818 00b8 FB68     		ldr	r3, [r7, #12]
 3819 00ba 1A62     		str	r2, [r3, #32]
2015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 3820              		.loc 4 2015 0
 3821 00bc 7B69     		ldr	r3, [r7, #20]
 3822 00be 1122     		movs	r2, #17
 3823 00c0 5A73     		strb	r2, [r3, #13]
2016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* And wait for the final ACK. */
2018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		vTCPStateChange( pxSocket, eLAST_ACK );
 3824              		.loc 4 2018 0
 3825 00c2 7868     		ldr	r0, [r7, #4]
 3826 00c4 0A21     		movs	r1, #10
 3827 00c6 FFF7FEFF 		bl	vTCPStateChange
 3828 00ca 23E0     		b	.L188
 3829              	.L187:
2019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
2021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
2023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 3830              		.loc 4 2023 0
 3831 00cc FB68     		ldr	r3, [r7, #12]
 3832 00ce 5B6A     		ldr	r3, [r3, #36]
 3833 00d0 5A1C     		adds	r2, r3, #1
 3834 00d2 FB68     		ldr	r3, [r7, #12]
 3835 00d4 1A62     		str	r2, [r3, #32]
2024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 3836              		.loc 4 2024 0
 3837 00d6 7B68     		ldr	r3, [r7, #4]
 3838 00d8 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 3839 00dc 23F07F03 		bic	r3, r3, #127
 3840 00e0 DBB2     		uxtb	r3, r3
 3841 00e2 002B     		cmp	r3, #0
 3842 00e4 03D1     		bne	.L189
2025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* We have sent out a FIN but the peer hasn't replied with a FIN
2027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			yet. Do nothing for the moment. */
2028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPFlags = 0u;
 3843              		.loc 4 2028 0
 3844 00e6 7B69     		ldr	r3, [r7, #20]
 3845 00e8 0022     		movs	r2, #0
 3846 00ea 5A73     		strb	r2, [r3, #13]
ARM GAS  /tmp/ccyb6dex.s 			page 128


 3847 00ec 12E0     		b	.L188
 3848              	.L189:
2029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
2031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 3849              		.loc 4 2032 0
 3850 00ee 7B68     		ldr	r3, [r7, #4]
 3851 00f0 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 3852 00f4 03F00203 		and	r3, r3, #2
 3853 00f8 DBB2     		uxtb	r3, r3
 3854 00fa 002B     		cmp	r3, #0
 3855 00fc 03D1     		bne	.L190
2033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* This is the third of the three-way hand shake: the last
2035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ACK. */
2036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 3856              		.loc 4 2036 0
 3857 00fe 7B69     		ldr	r3, [r7, #20]
 3858 0100 1022     		movs	r2, #16
 3859 0102 5A73     		strb	r2, [r3, #13]
 3860 0104 02E0     		b	.L191
 3861              	.L190:
2037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
2039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* The other party started the closure, so we just wait for the
2041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				last ACK. */
2042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucTCPFlags = 0u;
 3862              		.loc 4 2042 0
 3863 0106 7B69     		ldr	r3, [r7, #20]
 3864 0108 0022     		movs	r2, #0
 3865 010a 5A73     		strb	r2, [r3, #13]
 3866              	.L191:
2043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* And wait for the user to close this socket. */
2046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 3867              		.loc 4 2046 0
 3868 010c 7868     		ldr	r0, [r7, #4]
 3869 010e 0821     		movs	r1, #8
 3870 0110 FFF7FEFF 		bl	vTCPStateChange
 3871              	.L188:
2047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 3872              		.loc 4 2050 0
 3873 0114 FB68     		ldr	r3, [r7, #12]
 3874 0116 1A6A     		ldr	r2, [r3, #32]
 3875 0118 FB68     		ldr	r3, [r7, #12]
 3876 011a DA62     		str	r2, [r3, #44]
2051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxTCPHeader->ucTCPFlags != 0u )
 3877              		.loc 4 2052 0
 3878 011c 7B69     		ldr	r3, [r7, #20]
 3879 011e 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
ARM GAS  /tmp/ccyb6dex.s 			page 129


 3880 0120 002B     		cmp	r3, #0
 3881 0122 04D0     		beq	.L192
2053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOpti
 3882              		.loc 4 2054 0
 3883 0124 FB68     		ldr	r3, [r7, #12]
 3884 0126 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 3885 012a 2833     		adds	r3, r3, #40
 3886 012c FB61     		str	r3, [r7, #28]
 3887              	.L192:
2055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) <<
 3888              		.loc 4 2057 0
 3889 012e FB68     		ldr	r3, [r7, #12]
 3890 0130 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 3891 0134 1433     		adds	r3, r3, #20
 3892 0136 DBB2     		uxtb	r3, r3
 3893 0138 9B00     		lsls	r3, r3, #2
 3894 013a DAB2     		uxtb	r2, r3
 3895 013c 7B69     		ldr	r3, [r7, #20]
 3896 013e 1A73     		strb	r2, [r3, #12]
2058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xTCPWindowLoggingLevel != 0 )
2060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %lu, cur/nxt %lu/%lu) ourSeqNr %lu | Rx %lu\n",
2062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulAckNr - pxTCPWindow->tx.ulFirstSequenceNumber,
2063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->tx.ulCurrentSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
2067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xSendLength;
 3897              		.loc 4 2069 0
 3898 0140 FB69     		ldr	r3, [r7, #28]
2070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 3899              		.loc 4 2070 0
 3900 0142 1846     		mov	r0, r3
 3901 0144 2037     		adds	r7, r7, #32
 3902              	.LCFI152:
 3903              		.cfi_def_cfa_offset 8
 3904 0146 BD46     		mov	sp, r7
 3905              	.LCFI153:
 3906              		.cfi_def_cfa_register 13
 3907              		@ sp needed
 3908 0148 80BD     		pop	{r7, pc}
 3909              		.cfi_endproc
 3910              	.LFE46:
 3912 014a 00BF     		.section	.text.prvCheckRxData,"ax",%progbits
 3913              		.align	2
 3914              		.thumb
 3915              		.thumb_func
 3917              	prvCheckRxData:
 3918              	.LFB47:
2071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
ARM GAS  /tmp/ccyb6dex.s 			page 130


2073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if	ipconfigUSE_TCP_TIMESTAMPS == 1
2074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	static UBaseType_t prvTCPSetTimeStamp( BaseType_t lOffset, FreeRTOS_Socket_t *pxSocket, TCPHeader_
2076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint32_t ulTimes[2];
2078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint8_t *ucOptdata = &( pxTCPHeader->ucOptdata[ lOffset ] );
2079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulTimes[0]   = ( xTaskGetTickCount ( ) * 1000u ) / configTICK_RATE_HZ;
2081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulTimes[0]   = FreeRTOS_htonl( ulTimes[0] );
2082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulTimes[1]   = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.rx.ulTimeStamp );
2083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ucOptdata[0] = ( uint8_t ) TCP_OPT_TIMESTAMP;
2084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ucOptdata[1] = ( uint8_t ) TCP_OPT_TIMESTAMP_LEN;
2085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		memcpy( &(ucOptdata[2] ), ulTimes, 8u );
2086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ucOptdata[10] = ( uint8_t ) TCP_OPT_NOOP;
2087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ucOptdata[11] = ( uint8_t ) TCP_OPT_NOOP;
2088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Do not return the same timestamps 2 times. */
2089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.rx.ulTimeStamp = 0ul;
2090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return 12u;
2091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
2094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
2097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvCheckRxData(): called from prvTCPHandleState()
2098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
2099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The first thing that will be done is find the TCP payload data
2100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * and check the length of this data.
2101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
2102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvDat
2103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 3919              		.loc 4 2103 0
 3920              		.cfi_startproc
 3921              		@ args = 0, pretend = 0, frame = 32
 3922              		@ frame_needed = 1, uses_anonymous_args = 0
 3923 0000 80B5     		push	{r7, lr}
 3924              	.LCFI154:
 3925              		.cfi_def_cfa_offset 8
 3926              		.cfi_offset 7, -8
 3927              		.cfi_offset 14, -4
 3928 0002 88B0     		sub	sp, sp, #32
 3929              	.LCFI155:
 3930              		.cfi_def_cfa_offset 40
 3931 0004 00AF     		add	r7, sp, #0
 3932              	.LCFI156:
 3933              		.cfi_def_cfa_register 7
 3934 0006 7860     		str	r0, [r7, #4]
 3935 0008 3960     		str	r1, [r7]
2104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 3936              		.loc 4 2104 0
 3937 000a 7B68     		ldr	r3, [r7, #4]
 3938 000c 9B69     		ldr	r3, [r3, #24]
 3939 000e BB61     		str	r3, [r7, #24]
2105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 3940              		.loc 4 2105 0
 3941 0010 BB69     		ldr	r3, [r7, #24]
 3942 0012 2233     		adds	r3, r3, #34
ARM GAS  /tmp/ccyb6dex.s 			page 131


 3943 0014 7B61     		str	r3, [r7, #20]
2106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;
2107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Determine the length and the offset of the user-data sent to this
2109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	node.
2110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	The size of the TCP header is given in a multiple of 4-byte words (single
2112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	byte, needs no ntoh() translation).  A shift-right 2: is the same as
2113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	(offset >> 4) * 4. */
2114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****     lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE 
 3944              		.loc 4 2114 0
 3945 0016 7B69     		ldr	r3, [r7, #20]
 3946 0018 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3947 001a 03F0F003 		and	r3, r3, #240
 3948 001e 9B08     		lsrs	r3, r3, #2
 3949 0020 3B61     		str	r3, [r7, #16]
2115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Let pucRecvData point to the first byte received. */
2117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER 
 3950              		.loc 4 2117 0
 3951 0022 7B68     		ldr	r3, [r7, #4]
 3952 0024 9A69     		ldr	r2, [r3, #24]
 3953 0026 3B69     		ldr	r3, [r7, #16]
 3954 0028 2233     		adds	r3, r3, #34
 3955 002a 1A44     		add	r2, r2, r3
 3956 002c 3B68     		ldr	r3, [r7]
 3957 002e 1A60     		str	r2, [r3]
2118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Calculate lReceiveLength - the length of the TCP data received.  This is
2120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	equal to the total packet length minus:
2121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
2122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 3958              		.loc 4 2122 0
 3959 0030 7B68     		ldr	r3, [r7, #4]
 3960 0032 DB69     		ldr	r3, [r3, #28]
 3961 0034 0E3B     		subs	r3, r3, #14
 3962 0036 FB61     		str	r3, [r7, #28]
2123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 3963              		.loc 4 2123 0
 3964 0038 BB69     		ldr	r3, [r7, #24]
 3965 003a 1B8A     		ldrh	r3, [r3, #16]	@ unaligned
 3966 003c 9BB2     		uxth	r3, r3
 3967 003e 1B02     		lsls	r3, r3, #8
 3968 0040 9AB2     		uxth	r2, r3
 3969 0042 BB69     		ldr	r3, [r7, #24]
 3970 0044 1B8A     		ldrh	r3, [r3, #16]	@ unaligned
 3971 0046 9BB2     		uxth	r3, r3
 3972 0048 1B0A     		lsrs	r3, r3, #8
 3973 004a 9BB2     		uxth	r3, r3
 3974 004c 9BB2     		uxth	r3, r3
 3975 004e 1343     		orrs	r3, r3, r2
 3976 0050 9BB2     		uxth	r3, r3
 3977 0052 9BB2     		uxth	r3, r3
 3978 0054 FB60     		str	r3, [r7, #12]
2124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( lReceiveLength > lLength )
 3979              		.loc 4 2125 0
ARM GAS  /tmp/ccyb6dex.s 			page 132


 3980 0056 FA69     		ldr	r2, [r7, #28]
 3981 0058 FB68     		ldr	r3, [r7, #12]
 3982 005a 9A42     		cmp	r2, r3
 3983 005c 01DD     		ble	.L195
2126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* More bytes were received than the reported length, often because of
2128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		padding bytes at the end. */
2129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lReceiveLength = lLength;
 3984              		.loc 4 2129 0
 3985 005e FB68     		ldr	r3, [r7, #12]
 3986 0060 FB61     		str	r3, [r7, #28]
 3987              	.L195:
2130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Subtract the size of the TCP and IP headers and the actual data size is
2133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	known. */
2134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 3988              		.loc 4 2134 0
 3989 0062 3B69     		ldr	r3, [r7, #16]
 3990 0064 03F11402 		add	r2, r3, #20
 3991 0068 FB69     		ldr	r3, [r7, #28]
 3992 006a 9A42     		cmp	r2, r3
 3993 006c 07DA     		bge	.L196
2135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 3994              		.loc 4 2136 0
 3995 006e 3A69     		ldr	r2, [r7, #16]
 3996 0070 6FF01303 		mvn	r3, #19
 3997 0074 9B1A     		subs	r3, r3, r2
 3998 0076 FA69     		ldr	r2, [r7, #28]
 3999 0078 1344     		add	r3, r3, r2
 4000 007a FB61     		str	r3, [r7, #28]
 4001 007c 01E0     		b	.L197
 4002              	.L196:
2137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
2139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lReceiveLength = 0;
 4003              		.loc 4 2140 0
 4004 007e 0023     		movs	r3, #0
 4005 0080 FB61     		str	r3, [r7, #28]
 4006              	.L197:
2141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Urgent Pointer:
2144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	This field communicates the current value of the urgent pointer as a
2145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	positive offset from the sequence number in this segment.  The urgent
2146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pointer points to the sequence number of the octet following the urgent
2147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	data.  This field is only be interpreted in segments with the URG control
2148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	bit set. */
2149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 4007              		.loc 4 2149 0
 4008 0082 7B69     		ldr	r3, [r7, #20]
 4009 0084 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 4010 0086 03F02003 		and	r3, r3, #32
 4011 008a 002B     		cmp	r3, #0
 4012 008c 1CD0     		beq	.L198
ARM GAS  /tmp/ccyb6dex.s 			page 133


2150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Although we ignore the urgent data, we have to skip it. */
2152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 4013              		.loc 4 2152 0
 4014 008e 7B69     		ldr	r3, [r7, #20]
 4015 0090 5B8A     		ldrh	r3, [r3, #18]	@ unaligned
 4016 0092 9BB2     		uxth	r3, r3
 4017 0094 1B02     		lsls	r3, r3, #8
 4018 0096 9AB2     		uxth	r2, r3
 4019 0098 7B69     		ldr	r3, [r7, #20]
 4020 009a 5B8A     		ldrh	r3, [r3, #18]	@ unaligned
 4021 009c 9BB2     		uxth	r3, r3
 4022 009e 1B0A     		lsrs	r3, r3, #8
 4023 00a0 9BB2     		uxth	r3, r3
 4024 00a2 9BB2     		uxth	r3, r3
 4025 00a4 1343     		orrs	r3, r3, r2
 4026 00a6 9BB2     		uxth	r3, r3
 4027 00a8 9BB2     		uxth	r3, r3
 4028 00aa BB60     		str	r3, [r7, #8]
2153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		*ppucRecvData += lUrgentLength;
 4029              		.loc 4 2153 0
 4030 00ac 3B68     		ldr	r3, [r7]
 4031 00ae 1A68     		ldr	r2, [r3]
 4032 00b0 BB68     		ldr	r3, [r7, #8]
 4033 00b2 1A44     		add	r2, r2, r3
 4034 00b4 3B68     		ldr	r3, [r7]
 4035 00b6 1A60     		str	r2, [r3]
2154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 4036              		.loc 4 2154 0
 4037 00b8 F869     		ldr	r0, [r7, #28]
 4038 00ba B968     		ldr	r1, [r7, #8]
 4039 00bc FFF7FEFF 		bl	FreeRTOS_min_int32
 4040 00c0 0246     		mov	r2, r0
 4041 00c2 FB69     		ldr	r3, [r7, #28]
 4042 00c4 9B1A     		subs	r3, r3, r2
 4043 00c6 FB61     		str	r3, [r7, #28]
 4044              	.L198:
2155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return ( BaseType_t ) lReceiveLength;
 4045              		.loc 4 2157 0
 4046 00c8 FB69     		ldr	r3, [r7, #28]
2158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 4047              		.loc 4 2158 0
 4048 00ca 1846     		mov	r0, r3
 4049 00cc 2037     		adds	r7, r7, #32
 4050              	.LCFI157:
 4051              		.cfi_def_cfa_offset 8
 4052 00ce BD46     		mov	sp, r7
 4053              	.LCFI158:
 4054              		.cfi_def_cfa_register 13
 4055              		@ sp needed
 4056 00d0 80BD     		pop	{r7, pc}
 4057              		.cfi_endproc
 4058              	.LFE47:
 4060 00d2 00BF     		.section	.text.prvStoreRxData,"ax",%progbits
 4061              		.align	2
ARM GAS  /tmp/ccyb6dex.s 			page 134


 4062              		.thumb
 4063              		.thumb_func
 4065              	prvStoreRxData:
 4066              	.LFB48:
2159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
2162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvStoreRxData(): called from prvTCPHandleState()
2163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
2164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * The second thing is to do is check if the payload data may be accepted
2165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * If so, they will be added to the reception queue.
2166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
2167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
2168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
2169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 4067              		.loc 4 2169 0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 48
 4070              		@ frame_needed = 1, uses_anonymous_args = 0
 4071 0000 80B5     		push	{r7, lr}
 4072              	.LCFI159:
 4073              		.cfi_def_cfa_offset 8
 4074              		.cfi_offset 7, -8
 4075              		.cfi_offset 14, -4
 4076 0002 8CB0     		sub	sp, sp, #48
 4077              	.LCFI160:
 4078              		.cfi_def_cfa_offset 56
 4079 0004 00AF     		add	r7, sp, #0
 4080              	.LCFI161:
 4081              		.cfi_def_cfa_register 7
 4082 0006 F860     		str	r0, [r7, #12]
 4083 0008 B960     		str	r1, [r7, #8]
 4084 000a 7A60     		str	r2, [r7, #4]
 4085 000c 3B60     		str	r3, [r7]
2170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 4086              		.loc 4 2170 0
 4087 000e 7B68     		ldr	r3, [r7, #4]
 4088 0010 9B69     		ldr	r3, [r3, #24]
 4089 0012 7B62     		str	r3, [r7, #36]
2171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 4090              		.loc 4 2171 0
 4091 0014 7B6A     		ldr	r3, [r7, #36]
 4092 0016 2233     		adds	r3, r3, #34
 4093 0018 3B62     		str	r3, [r7, #32]
2172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 4094              		.loc 4 2172 0
 4095 001a FB68     		ldr	r3, [r7, #12]
 4096 001c DC33     		adds	r3, r3, #220
 4097 001e FB61     		str	r3, [r7, #28]
2173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber, ulSpace;
2174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lOffset, lStored;
2175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xResult = 0;
 4098              		.loc 4 2175 0
 4099 0020 0023     		movs	r3, #0
 4100 0022 BB62     		str	r3, [r7, #40]
2176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
ARM GAS  /tmp/ccyb6dex.s 			page 135


 4101              		.loc 4 2177 0
 4102 0024 3B6A     		ldr	r3, [r7, #32]
 4103 0026 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4104 0028 1A06     		lsls	r2, r3, #24
 4105 002a 3B6A     		ldr	r3, [r7, #32]
 4106 002c 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4107 002e 03F47F43 		and	r3, r3, #65280
 4108 0032 1B02     		lsls	r3, r3, #8
 4109 0034 1A43     		orrs	r2, r2, r3
 4110 0036 3B6A     		ldr	r3, [r7, #32]
 4111 0038 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4112 003a 03F47F03 		and	r3, r3, #16711680
 4113 003e 1B0A     		lsrs	r3, r3, #8
 4114 0040 1A43     		orrs	r2, r2, r3
 4115 0042 3B6A     		ldr	r3, [r7, #32]
 4116 0044 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4117 0046 1B0E     		lsrs	r3, r3, #24
 4118 0048 1343     		orrs	r3, r3, r2
 4119 004a BB61     		str	r3, [r7, #24]
2178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 4120              		.loc 4 2179 0
 4121 004c 3B68     		ldr	r3, [r7]
 4122 004e 002B     		cmp	r3, #0
 4123 0050 41D0     		beq	.L201
 4124              		.loc 4 2179 0 is_stmt 0 discriminator 1
 4125 0052 FB68     		ldr	r3, [r7, #12]
 4126 0054 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 4127 0058 032B     		cmp	r3, #3
 4128 005a 3CD9     		bls	.L201
2180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* See if way may accept the data contents and forward it to the socket
2182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		owner.
2183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		If it can't be "accept"ed it may have to be stored and send a selective
2185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ack (SACK) option to confirm it.  In that case, xTCPWindowRxStore() will be
2186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		called later to store an out-of-order packet (in case lOffset is
2187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		negative). */
2188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if ( pxSocket->u.xTCP.rxStream )
 4129              		.loc 4 2188 0 is_stmt 1
 4130 005c FB68     		ldr	r3, [r7, #12]
 4131 005e 5B6F     		ldr	r3, [r3, #116]
 4132 0060 002B     		cmp	r3, #0
 4133 0062 06D0     		beq	.L202
2189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
 4134              		.loc 4 2190 0
 4135 0064 FB68     		ldr	r3, [r7, #12]
 4136 0066 5B6F     		ldr	r3, [r3, #116]
 4137 0068 1846     		mov	r0, r3
 4138 006a FFF7FEFF 		bl	uxStreamBufferGetSpace
 4139 006e F862     		str	r0, [r7, #44]
 4140 0070 02E0     		b	.L203
 4141              	.L202:
2191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
2193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
ARM GAS  /tmp/ccyb6dex.s 			page 136


2194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 4142              		.loc 4 2194 0
 4143 0072 FB68     		ldr	r3, [r7, #12]
 4144 0074 DB6E     		ldr	r3, [r3, #108]
 4145 0076 FB62     		str	r3, [r7, #44]
 4146              	.L203:
2195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 4147              		.loc 4 2197 0
 4148 0078 F869     		ldr	r0, [r7, #28]
 4149 007a B969     		ldr	r1, [r7, #24]
 4150 007c 3A68     		ldr	r2, [r7]
 4151 007e FB6A     		ldr	r3, [r7, #44]
 4152 0080 FFF7FEFF 		bl	lTCPWindowRxCheck
 4153 0084 7861     		str	r0, [r7, #20]
2198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( lOffset >= 0 )
 4154              		.loc 4 2199 0
 4155 0086 7B69     		ldr	r3, [r7, #20]
 4156 0088 002B     		cmp	r3, #0
 4157 008a 11DB     		blt	.L204
2200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* New data has arrived and may be made available to the user.  See
2202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if the head marker in rxStream may be advanced,	only if lOffset == 0.
2203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			In case the low-water mark is reached, bLowWater will be set
2204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			"low-water" here stands for "little space". */
2205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 4158              		.loc 4 2205 0
 4159 008c 7B69     		ldr	r3, [r7, #20]
 4160 008e F868     		ldr	r0, [r7, #12]
 4161 0090 1946     		mov	r1, r3
 4162 0092 BA68     		ldr	r2, [r7, #8]
 4163 0094 3B68     		ldr	r3, [r7]
 4164 0096 FFF7FEFF 		bl	lTCPAddRxdata
 4165 009a 3861     		str	r0, [r7, #16]
2206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( lStored != ( int32_t ) ulReceiveLength )
 4166              		.loc 4 2207 0
 4167 009c 3A68     		ldr	r2, [r7]
 4168 009e 3B69     		ldr	r3, [r7, #16]
 4169 00a0 9A42     		cmp	r2, r3
 4170 00a2 05D0     		beq	.L204
2208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength 
2210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Received data could not be stored.  The socket's flag
2212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				bMallocError has been set.  The socket now has the status
2213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				eCLOSE_WAIT and a RST packet will be sent back. */
2214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				prvTCPSendReset( pxNetworkBuffer );
 4171              		.loc 4 2214 0
 4172 00a4 7868     		ldr	r0, [r7, #4]
 4173 00a6 FFF7FEFF 		bl	prvTCPSendReset
2215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xResult = -1;
 4174              		.loc 4 2215 0
 4175 00aa 4FF0FF33 		mov	r3, #-1
 4176 00ae BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/ccyb6dex.s 			page 137


 4177              	.L204:
2216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* After a missing packet has come in, higher packets may be passed to
2220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		the user. */
2221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_TCP_WIN == 1 )
2222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Now lTCPAddRxdata() will move the rxHead pointer forward
2224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			so data becomes available to the user immediately
2225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			In case the low-water mark is reached, bLowWater will be set. */
2226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 4178              		.loc 4 2226 0
 4179 00b0 BB6A     		ldr	r3, [r7, #40]
 4180 00b2 002B     		cmp	r3, #0
 4181 00b4 0ED1     		bne	.L205
 4182              		.loc 4 2226 0 is_stmt 0 discriminator 1
 4183 00b6 FB69     		ldr	r3, [r7, #28]
 4184 00b8 1B6B     		ldr	r3, [r3, #48]
 4185 00ba 002B     		cmp	r3, #0
 4186 00bc 0AD0     		beq	.L205
2227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 4187              		.loc 4 2228 0 is_stmt 1
 4188 00be FB69     		ldr	r3, [r7, #28]
 4189 00c0 1B6B     		ldr	r3, [r3, #48]
 4190 00c2 F868     		ldr	r0, [r7, #12]
 4191 00c4 0021     		movs	r1, #0
 4192 00c6 0022     		movs	r2, #0
 4193 00c8 FFF7FEFF 		bl	lTCPAddRxdata
2229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->ulUserDataLength = 0;
 4194              		.loc 4 2229 0
 4195 00cc FB69     		ldr	r3, [r7, #28]
 4196 00ce 0022     		movs	r2, #0
 4197 00d0 1A63     		str	r2, [r3, #48]
2226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
 4198              		.loc 4 2226 0
 4199 00d2 04E0     		b	.L206
 4200              	.L205:
 4201 00d4 03E0     		b	.L206
 4202              	.L201:
2230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigUSE_TCP_WIN */
2233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
2235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->ucOptionLength = 0u;
 4203              		.loc 4 2236 0
 4204 00d6 FB69     		ldr	r3, [r7, #28]
 4205 00d8 0022     		movs	r2, #0
 4206 00da 83F83C20 		strb	r2, [r3, #60]
 4207              	.L206:
2237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xResult;
 4208              		.loc 4 2239 0
ARM GAS  /tmp/ccyb6dex.s 			page 138


 4209 00de BB6A     		ldr	r3, [r7, #40]
2240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 4210              		.loc 4 2240 0
 4211 00e0 1846     		mov	r0, r3
 4212 00e2 3037     		adds	r7, r7, #48
 4213              	.LCFI162:
 4214              		.cfi_def_cfa_offset 8
 4215 00e4 BD46     		mov	sp, r7
 4216              	.LCFI163:
 4217              		.cfi_def_cfa_register 13
 4218              		@ sp needed
 4219 00e6 80BD     		pop	{r7, pc}
 4220              		.cfi_endproc
 4221              	.LFE48:
 4223              		.section	.text.prvSetOptions,"ax",%progbits
 4224              		.align	2
 4225              		.thumb
 4226              		.thumb_func
 4228              	prvSetOptions:
 4229              	.LFB49:
2241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* Set the TCP options (if any) for the outgoing packet. */
2244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetwork
2245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 4230              		.loc 4 2245 0
 4231              		.cfi_startproc
 4232              		@ args = 0, pretend = 0, frame = 24
 4233              		@ frame_needed = 1, uses_anonymous_args = 0
 4234 0000 80B5     		push	{r7, lr}
 4235              	.LCFI164:
 4236              		.cfi_def_cfa_offset 8
 4237              		.cfi_offset 7, -8
 4238              		.cfi_offset 14, -4
 4239 0002 86B0     		sub	sp, sp, #24
 4240              	.LCFI165:
 4241              		.cfi_def_cfa_offset 32
 4242 0004 00AF     		add	r7, sp, #0
 4243              	.LCFI166:
 4244              		.cfi_def_cfa_register 7
 4245 0006 7860     		str	r0, [r7, #4]
 4246 0008 3960     		str	r1, [r7]
2246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 4247              		.loc 4 2246 0
 4248 000a 3B68     		ldr	r3, [r7]
 4249 000c 9B69     		ldr	r3, [r3, #24]
 4250 000e 3B61     		str	r3, [r7, #16]
2247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 4251              		.loc 4 2247 0
 4252 0010 3B69     		ldr	r3, [r7, #16]
 4253 0012 2233     		adds	r3, r3, #34
 4254 0014 FB60     		str	r3, [r7, #12]
2248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 4255              		.loc 4 2248 0
 4256 0016 7B68     		ldr	r3, [r7, #4]
 4257 0018 DC33     		adds	r3, r3, #220
 4258 001a BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccyb6dex.s 			page 139


2249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 4259              		.loc 4 2249 0
 4260 001c BB68     		ldr	r3, [r7, #8]
 4261 001e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4262 0022 7B61     		str	r3, [r7, #20]
2250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if(	ipconfigUSE_TCP_WIN == 1 )
2252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( uxOptionsLength != 0u )
 4263              		.loc 4 2252 0
 4264 0024 7B69     		ldr	r3, [r7, #20]
 4265 0026 002B     		cmp	r3, #0
 4266 0028 12D0     		beq	.L209
2253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* TCP options must be sent because a packet which is out-of-order
2255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			was received. */
2256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( xTCPWindowLoggingLevel >= 0 )
2257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "SACK[%d,%d]: optlen %lu sending %lu - %lu\n",
2258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->usLocalPort,
2259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usRemotePort,
2260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					uxOptionsLength,
2261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequ
2262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequ
2263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 4267              		.loc 4 2263 0
 4268 002a FB68     		ldr	r3, [r7, #12]
 4269 002c 03F11402 		add	r2, r3, #20
 4270 0030 BB68     		ldr	r3, [r7, #8]
 4271 0032 8033     		adds	r3, r3, #128
 4272 0034 1046     		mov	r0, r2
 4273 0036 1946     		mov	r1, r3
 4274 0038 7A69     		ldr	r2, [r7, #20]
 4275 003a FFF7FEFF 		bl	memcpy
2264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The header length divided by 4, goes into the higher nibble,
2266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			effectively a shift-left 2. */
2267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 4276              		.loc 4 2267 0
 4277 003e 7B69     		ldr	r3, [r7, #20]
 4278 0040 DBB2     		uxtb	r3, r3
 4279 0042 1433     		adds	r3, r3, #20
 4280 0044 DBB2     		uxtb	r3, r3
 4281 0046 9B00     		lsls	r3, r3, #2
 4282 0048 DAB2     		uxtb	r2, r3
 4283 004a FB68     		ldr	r3, [r7, #12]
 4284 004c 1A73     		strb	r2, [r3, #12]
 4285 004e 31E0     		b	.L210
 4286              	.L209:
2268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
2270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif	/* ipconfigUSE_TCP_WIN */
2271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFAL
 4287              		.loc 4 2271 0
 4288 0050 7B68     		ldr	r3, [r7, #4]
 4289 0052 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 4290 0056 042B     		cmp	r3, #4
 4291 0058 2CD9     		bls	.L210
 4292              		.loc 4 2271 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccyb6dex.s 			page 140


 4293 005a 7B68     		ldr	r3, [r7, #4]
 4294 005c 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 4295 0060 03F00103 		and	r3, r3, #1
 4296 0064 DBB2     		uxtb	r3, r3
 4297 0066 002B     		cmp	r3, #0
 4298 0068 24D0     		beq	.L210
2272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* TCP options must be sent because the MSS has changed. */
2274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 4299              		.loc 4 2274 0 is_stmt 1
 4300 006a 7A68     		ldr	r2, [r7, #4]
 4301 006c 92F84030 		ldrb	r3, [r2, #64]
 4302 0070 6FF30003 		bfc	r3, #0, #1
 4303 0074 82F84030 		strb	r3, [r2, #64]
2275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( xTCPWindowLoggingLevel >= 0 )
2276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
2278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 4304              		.loc 4 2280 0
 4305 0078 FB68     		ldr	r3, [r7, #12]
 4306 007a 0222     		movs	r2, #2
 4307 007c 1A75     		strb	r2, [r3, #20]
2281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 4308              		.loc 4 2281 0
 4309 007e FB68     		ldr	r3, [r7, #12]
 4310 0080 0422     		movs	r2, #4
 4311 0082 5A75     		strb	r2, [r3, #21]
2282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 4312              		.loc 4 2282 0
 4313 0084 7B68     		ldr	r3, [r7, #4]
 4314 0086 B3F84A30 		ldrh	r3, [r3, #74]
 4315 008a 1B0A     		lsrs	r3, r3, #8
 4316 008c 9BB2     		uxth	r3, r3
 4317 008e DAB2     		uxtb	r2, r3
 4318 0090 FB68     		ldr	r3, [r7, #12]
 4319 0092 9A75     		strb	r2, [r3, #22]
2283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 4320              		.loc 4 2283 0
 4321 0094 7B68     		ldr	r3, [r7, #4]
 4322 0096 B3F84A30 		ldrh	r3, [r3, #74]
 4323 009a DAB2     		uxtb	r2, r3
 4324 009c FB68     		ldr	r3, [r7, #12]
 4325 009e DA75     		strb	r2, [r3, #23]
2284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 4u;
 4326              		.loc 4 2284 0
 4327 00a0 0423     		movs	r3, #4
 4328 00a2 7B61     		str	r3, [r7, #20]
2285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 4329              		.loc 4 2285 0
 4330 00a4 7B69     		ldr	r3, [r7, #20]
 4331 00a6 DBB2     		uxtb	r3, r3
 4332 00a8 1433     		adds	r3, r3, #20
 4333 00aa DBB2     		uxtb	r3, r3
 4334 00ac 9B00     		lsls	r3, r3, #2
 4335 00ae DAB2     		uxtb	r2, r3
ARM GAS  /tmp/ccyb6dex.s 			page 141


 4336 00b0 FB68     		ldr	r3, [r7, #12]
 4337 00b2 1A73     		strb	r2, [r3, #12]
 4338              	.L210:
2286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if(	ipconfigUSE_TCP_TIMESTAMPS == 1 )
2289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.xTCPWindow.u.bits.bTimeStamps )
2291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			uxOptionsLength += prvTCPSetTimeStamp( xOptionsLength, pxSocket, pxTCPHeader );
2293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */
2296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return uxOptionsLength;
 4339              		.loc 4 2297 0
 4340 00b4 7B69     		ldr	r3, [r7, #20]
2298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 4341              		.loc 4 2298 0
 4342 00b6 1846     		mov	r0, r3
 4343 00b8 1837     		adds	r7, r7, #24
 4344              	.LCFI167:
 4345              		.cfi_def_cfa_offset 8
 4346 00ba BD46     		mov	sp, r7
 4347              	.LCFI168:
 4348              		.cfi_def_cfa_register 13
 4349              		@ sp needed
 4350 00bc 80BD     		pop	{r7, pc}
 4351              		.cfi_endproc
 4352              	.LFE49:
 4354 00be 00BF     		.section	.text.prvHandleSynReceived,"ax",%progbits
 4355              		.align	2
 4356              		.thumb
 4357              		.thumb_func
 4359              	prvHandleSynReceived:
 4360              	.LFB50:
2299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
2302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvHandleSynReceived(): called from prvTCPHandleState()
2303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
2304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
2305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * If the flags received are correct, the socket will move to eESTABLISHED.
2306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
2307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **pp
2308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
2309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 4361              		.loc 4 2309 0
 4362              		.cfi_startproc
 4363              		@ args = 0, pretend = 0, frame = 48
 4364              		@ frame_needed = 1, uses_anonymous_args = 0
 4365 0000 80B5     		push	{r7, lr}
 4366              	.LCFI169:
 4367              		.cfi_def_cfa_offset 8
 4368              		.cfi_offset 7, -8
 4369              		.cfi_offset 14, -4
 4370 0002 8CB0     		sub	sp, sp, #48
ARM GAS  /tmp/ccyb6dex.s 			page 142


 4371              	.LCFI170:
 4372              		.cfi_def_cfa_offset 56
 4373 0004 00AF     		add	r7, sp, #0
 4374              	.LCFI171:
 4375              		.cfi_def_cfa_register 7
 4376 0006 F860     		str	r0, [r7, #12]
 4377 0008 B960     		str	r1, [r7, #8]
 4378 000a 7A60     		str	r2, [r7, #4]
 4379 000c 3B60     		str	r3, [r7]
2310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 4380              		.loc 4 2310 0
 4381 000e BB68     		ldr	r3, [r7, #8]
 4382 0010 1B68     		ldr	r3, [r3]
 4383 0012 9B69     		ldr	r3, [r3, #24]
 4384 0014 7B62     		str	r3, [r7, #36]
2311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 4385              		.loc 4 2311 0
 4386 0016 7B6A     		ldr	r3, [r7, #36]
 4387 0018 2233     		adds	r3, r3, #34
 4388 001a 3B62     		str	r3, [r7, #32]
2312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 4389              		.loc 4 2312 0
 4390 001c FB68     		ldr	r3, [r7, #12]
 4391 001e DC33     		adds	r3, r3, #220
 4392 0020 FB61     		str	r3, [r7, #28]
2313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 4393              		.loc 4 2313 0
 4394 0022 3B6A     		ldr	r3, [r7, #32]
 4395 0024 5B7B     		ldrb	r3, [r3, #13]
 4396 0026 FB76     		strb	r3, [r7, #27]
2314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 4397              		.loc 4 2314 0
 4398 0028 3B6A     		ldr	r3, [r7, #32]
 4399 002a 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4400 002c 1A06     		lsls	r2, r3, #24
 4401 002e 3B6A     		ldr	r3, [r7, #32]
 4402 0030 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4403 0032 03F47F43 		and	r3, r3, #65280
 4404 0036 1B02     		lsls	r3, r3, #8
 4405 0038 1A43     		orrs	r2, r2, r3
 4406 003a 3B6A     		ldr	r3, [r7, #32]
 4407 003c 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4408 003e 03F47F03 		and	r3, r3, #16711680
 4409 0042 1B0A     		lsrs	r3, r3, #8
 4410 0044 1A43     		orrs	r2, r2, r3
 4411 0046 3B6A     		ldr	r3, [r7, #32]
 4412 0048 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4413 004a 1B0E     		lsrs	r3, r3, #24
 4414 004c 1343     		orrs	r3, r3, r2
 4415 004e 7B61     		str	r3, [r7, #20]
2315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0;
 4416              		.loc 4 2315 0
 4417 0050 0023     		movs	r3, #0
 4418 0052 FB62     		str	r3, [r7, #44]
2316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Either expect a ACK or a SYN+ACK. */
2318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
ARM GAS  /tmp/ccyb6dex.s 			page 143


 4419              		.loc 4 2318 0
 4420 0054 1023     		movs	r3, #16
 4421 0056 7B85     		strh	r3, [r7, #42]	@ movhi
2319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 4422              		.loc 4 2319 0
 4423 0058 FB68     		ldr	r3, [r7, #12]
 4424 005a 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 4425 005e 022B     		cmp	r3, #2
 4426 0060 03D1     		bne	.L213
2320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 4427              		.loc 4 2321 0
 4428 0062 7B8D     		ldrh	r3, [r7, #42]	@ movhi
 4429 0064 43F00203 		orr	r3, r3, #2
 4430 0068 7B85     		strh	r3, [r7, #42]	@ movhi
 4431              	.L213:
2322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( ucTCPFlags & 0x17u ) != usExpect )
 4432              		.loc 4 2324 0
 4433 006a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4434 006c 03F01702 		and	r2, r3, #23
 4435 0070 7B8D     		ldrh	r3, [r7, #42]
 4436 0072 9A42     		cmp	r2, r3
 4437 0074 16D0     		beq	.L214
2325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
2327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
2328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
2329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ? "eSYN_RECEIVED" : "eCONNECT_SYN",
2330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			usExpect, ucTCPFlags ) );
2331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 4438              		.loc 4 2331 0
 4439 0076 F868     		ldr	r0, [r7, #12]
 4440 0078 0821     		movs	r1, #8
 4441 007a FFF7FEFF 		bl	vTCPStateChange
2332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 4442              		.loc 4 2332 0
 4443 007e 3B6A     		ldr	r3, [r7, #32]
 4444 0080 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 4445 0082 43F00403 		orr	r3, r3, #4
 4446 0086 DAB2     		uxtb	r2, r3
 4447 0088 3B6A     		ldr	r3, [r7, #32]
 4448 008a 5A73     		strb	r2, [r3, #13]
2333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 4449              		.loc 4 2333 0
 4450 008c 3B68     		ldr	r3, [r7]
 4451 008e 2833     		adds	r3, r3, #40
 4452 0090 FB62     		str	r3, [r7, #44]
2334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 4453              		.loc 4 2334 0
 4454 0092 3B68     		ldr	r3, [r7]
 4455 0094 DBB2     		uxtb	r3, r3
 4456 0096 1433     		adds	r3, r3, #20
 4457 0098 DBB2     		uxtb	r3, r3
 4458 009a 9B00     		lsls	r3, r3, #2
 4459 009c DAB2     		uxtb	r2, r3
ARM GAS  /tmp/ccyb6dex.s 			page 144


 4460 009e 3B6A     		ldr	r3, [r7, #32]
 4461 00a0 1A73     		strb	r2, [r3, #12]
 4462 00a2 6AE0     		b	.L215
 4463              	.L214:
2335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
2337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 4464              		.loc 4 2338 0
 4465 00a4 FB68     		ldr	r3, [r7, #12]
 4466 00a6 9A8F     		ldrh	r2, [r3, #60]
 4467 00a8 FB69     		ldr	r3, [r7, #28]
 4468 00aa A3F8BA20 		strh	r2, [r3, #186]	@ movhi
2339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 4469              		.loc 4 2339 0
 4470 00ae FB68     		ldr	r3, [r7, #12]
 4471 00b0 9A8C     		ldrh	r2, [r3, #36]
 4472 00b2 FB69     		ldr	r3, [r7, #28]
 4473 00b4 A3F8B820 		strh	r2, [r3, #184]	@ movhi
2340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 4474              		.loc 4 2341 0
 4475 00b8 FB68     		ldr	r3, [r7, #12]
 4476 00ba 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 4477 00be 022B     		cmp	r3, #2
 4478 00c0 26D1     		bne	.L216
 4479              	.LBB15:
2342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			TCPPacket_t *pxLastTCPPacket = ( TCPPacket_t * ) ( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 4480              		.loc 4 2343 0
 4481 00c2 FB68     		ldr	r3, [r7, #12]
 4482 00c4 8233     		adds	r3, r3, #130
 4483 00c6 3B61     		str	r3, [r7, #16]
2344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Clear the SYN flag in lastPacket. */
2346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 4484              		.loc 4 2346 0
 4485 00c8 3B69     		ldr	r3, [r7, #16]
 4486 00ca 1022     		movs	r2, #16
 4487 00cc 83F82F20 		strb	r2, [r3, #47]
2347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* This socket was the one connecting actively so now perofmr the
2349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			synchronisation. */
2350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 4488              		.loc 4 2350 0
 4489 00d0 FB68     		ldr	r3, [r7, #12]
 4490 00d2 03F1DC01 		add	r1, r3, #220
 4491 00d6 FB68     		ldr	r3, [r7, #12]
 4492 00d8 D3F80821 		ldr	r2, [r3, #264]
2351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTC
 4493              		.loc 4 2351 0
 4494 00dc FB68     		ldr	r3, [r7, #12]
 4495 00de B3F84A30 		ldrh	r3, [r3, #74]
2350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTC
 4496              		.loc 4 2350 0
 4497 00e2 0846     		mov	r0, r1
 4498 00e4 7969     		ldr	r1, [r7, #20]
ARM GAS  /tmp/ccyb6dex.s 			page 145


 4499 00e6 FFF7FEFF 		bl	vTCPWindowInit
2352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNu
 4500              		.loc 4 2352 0
 4501 00ea 7B69     		ldr	r3, [r7, #20]
 4502 00ec 5A1C     		adds	r2, r3, #1
 4503 00ee FB69     		ldr	r3, [r7, #28]
 4504 00f0 9A61     		str	r2, [r3, #24]
 4505 00f2 FB69     		ldr	r3, [r7, #28]
 4506 00f4 9A69     		ldr	r2, [r3, #24]
 4507 00f6 FB69     		ldr	r3, [r7, #28]
 4508 00f8 1A61     		str	r2, [r3, #16]
2353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 4509              		.loc 4 2353 0
 4510 00fa FB69     		ldr	r3, [r7, #28]
 4511 00fc 1B6A     		ldr	r3, [r3, #32]
 4512 00fe 5A1C     		adds	r2, r3, #1
 4513 0100 FB69     		ldr	r3, [r7, #28]
 4514 0102 1A62     		str	r2, [r3, #32]
2354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->ulNextTxSequenceNumber++;
 4515              		.loc 4 2354 0
 4516 0104 FB69     		ldr	r3, [r7, #28]
 4517 0106 5B6B     		ldr	r3, [r3, #52]
 4518 0108 5A1C     		adds	r2, r3, #1
 4519 010a FB69     		ldr	r3, [r7, #28]
 4520 010c 5A63     		str	r2, [r3, #52]
 4521              	.LBE15:
 4522 010e 05E0     		b	.L217
 4523              	.L216:
2355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else if( ulReceiveLength == 0u )
 4524              		.loc 4 2356 0
 4525 0110 7B68     		ldr	r3, [r7, #4]
 4526 0112 002B     		cmp	r3, #0
 4527 0114 02D1     		bne	.L217
2357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 4528              		.loc 4 2358 0
 4529 0116 FB69     		ldr	r3, [r7, #28]
 4530 0118 7A69     		ldr	r2, [r7, #20]
 4531 011a 1A61     		str	r2, [r3, #16]
 4532              	.L217:
2359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The SYN+ACK has been confirmed, increase the next sequence number by
2362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		1. */
2363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 4533              		.loc 4 2363 0
 4534 011c FB69     		ldr	r3, [r7, #28]
 4535 011e DB69     		ldr	r3, [r3, #28]
 4536 0120 5A1C     		adds	r2, r3, #1
 4537 0122 FB69     		ldr	r3, [r7, #28]
 4538 0124 DA62     		str	r2, [r3, #44]
2364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_TCP_WIN == 1 )
2366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
2368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ? "active" : "passive",
ARM GAS  /tmp/ccyb6dex.s 			page 146


2369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->usLocalPort,
2370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ulRemoteIP,
2371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usRemotePort,
2372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
2373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigUSE_TCP_WIN */
2375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 4539              		.loc 4 2376 0
 4540 0126 FB68     		ldr	r3, [r7, #12]
 4541 0128 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 4542 012c 022B     		cmp	r3, #2
 4543 012e 02D0     		beq	.L218
 4544              		.loc 4 2376 0 is_stmt 0 discriminator 1
 4545 0130 7B68     		ldr	r3, [r7, #4]
 4546 0132 002B     		cmp	r3, #0
 4547 0134 0DD0     		beq	.L219
 4548              	.L218:
2377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 4549              		.loc 4 2378 0 is_stmt 1
 4550 0136 3B6A     		ldr	r3, [r7, #32]
 4551 0138 1022     		movs	r2, #16
 4552 013a 5A73     		strb	r2, [r3, #13]
2379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 4553              		.loc 4 2379 0
 4554 013c 3B68     		ldr	r3, [r7]
 4555 013e 2833     		adds	r3, r3, #40
 4556 0140 FB62     		str	r3, [r7, #44]
2380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 4557              		.loc 4 2380 0
 4558 0142 3B68     		ldr	r3, [r7]
 4559 0144 DBB2     		uxtb	r3, r3
 4560 0146 1433     		adds	r3, r3, #20
 4561 0148 DBB2     		uxtb	r3, r3
 4562 014a 9B00     		lsls	r3, r3, #2
 4563 014c DAB2     		uxtb	r2, r3
 4564 014e 3B6A     		ldr	r3, [r7, #32]
 4565 0150 1A73     		strb	r2, [r3, #12]
 4566              	.L219:
2381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 4567              		.loc 4 2383 0
 4568 0152 FB68     		ldr	r3, [r7, #12]
 4569 0154 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 4570 0158 03F01003 		and	r3, r3, #16
 4571 015c DBB2     		uxtb	r3, r3
 4572 015e 002B     		cmp	r3, #0
 4573 0160 07D1     		bne	.L220
2384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The other party did not send a scaling factor.
2386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			A shifting factor in this side must be canceled. */
2387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 4574              		.loc 4 2387 0
 4575 0162 FB68     		ldr	r3, [r7, #12]
 4576 0164 0022     		movs	r2, #0
ARM GAS  /tmp/ccyb6dex.s 			page 147


 4577 0166 83F8C920 		strb	r2, [r3, #201]
2388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 4578              		.loc 4 2388 0
 4579 016a FB68     		ldr	r3, [r7, #12]
 4580 016c 0022     		movs	r2, #0
 4581 016e 83F8CA20 		strb	r2, [r3, #202]
 4582              	.L220:
2389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
2391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		connection is established. */
2392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		vTCPStateChange( pxSocket, eESTABLISHED );
 4583              		.loc 4 2392 0
 4584 0172 F868     		ldr	r0, [r7, #12]
 4585 0174 0521     		movs	r1, #5
 4586 0176 FFF7FEFF 		bl	vTCPStateChange
 4587              	.L215:
2393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xSendLength;
 4588              		.loc 4 2395 0
 4589 017a FB6A     		ldr	r3, [r7, #44]
2396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 4590              		.loc 4 2396 0
 4591 017c 1846     		mov	r0, r3
 4592 017e 3037     		adds	r7, r7, #48
 4593              	.LCFI172:
 4594              		.cfi_def_cfa_offset 8
 4595 0180 BD46     		mov	sp, r7
 4596              	.LCFI173:
 4597              		.cfi_def_cfa_register 13
 4598              		@ sp needed
 4599 0182 80BD     		pop	{r7, pc}
 4600              		.cfi_endproc
 4601              	.LFE50:
 4603              		.section	.text.prvHandleEstablished,"ax",%progbits
 4604              		.align	2
 4605              		.thumb
 4606              		.thumb_func
 4608              	prvHandleEstablished:
 4609              	.LFB51:
2397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
2400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvHandleEstablished(): called from prvTCPHandleState()
2401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
2402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Called if the status is eESTABLISHED.  Data reception has been handled
2403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * earlier.  Here the ACK's from peer will be checked, and if a FIN is received,
2404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * the code will check if it may be accepted, i.e. if all expected data has been
2405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * completely received.
2406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
2407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **pp
2408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
2409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 4610              		.loc 4 2409 0
 4611              		.cfi_startproc
 4612              		@ args = 0, pretend = 0, frame = 64
 4613              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccyb6dex.s 			page 148


 4614 0000 80B5     		push	{r7, lr}
 4615              	.LCFI174:
 4616              		.cfi_def_cfa_offset 8
 4617              		.cfi_offset 7, -8
 4618              		.cfi_offset 14, -4
 4619 0002 92B0     		sub	sp, sp, #72
 4620              	.LCFI175:
 4621              		.cfi_def_cfa_offset 80
 4622 0004 02AF     		add	r7, sp, #8
 4623              	.LCFI176:
 4624              		.cfi_def_cfa 7, 72
 4625 0006 F860     		str	r0, [r7, #12]
 4626 0008 B960     		str	r1, [r7, #8]
 4627 000a 7A60     		str	r2, [r7, #4]
 4628 000c 3B60     		str	r3, [r7]
2410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 4629              		.loc 4 2410 0
 4630 000e BB68     		ldr	r3, [r7, #8]
 4631 0010 1B68     		ldr	r3, [r3]
 4632 0012 9B69     		ldr	r3, [r3, #24]
 4633 0014 7B63     		str	r3, [r7, #52]
2411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 4634              		.loc 4 2411 0
 4635 0016 7B6B     		ldr	r3, [r7, #52]
 4636 0018 2233     		adds	r3, r3, #34
 4637 001a 3B63     		str	r3, [r7, #48]
2412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 4638              		.loc 4 2412 0
 4639 001c FB68     		ldr	r3, [r7, #12]
 4640 001e DC33     		adds	r3, r3, #220
 4641 0020 FB62     		str	r3, [r7, #44]
2413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 4642              		.loc 4 2413 0
 4643 0022 3B6B     		ldr	r3, [r7, #48]
 4644 0024 5B7B     		ldrb	r3, [r3, #13]
 4645 0026 87F82B30 		strb	r3, [r7, #43]
2414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 4646              		.loc 4 2414 0
 4647 002a 3B6B     		ldr	r3, [r7, #48]
 4648 002c 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4649 002e 1A06     		lsls	r2, r3, #24
 4650 0030 3B6B     		ldr	r3, [r7, #48]
 4651 0032 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4652 0034 03F47F43 		and	r3, r3, #65280
 4653 0038 1B02     		lsls	r3, r3, #8
 4654 003a 1A43     		orrs	r2, r2, r3
 4655 003c 3B6B     		ldr	r3, [r7, #48]
 4656 003e 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4657 0040 03F47F03 		and	r3, r3, #16711680
 4658 0044 1B0A     		lsrs	r3, r3, #8
 4659 0046 1A43     		orrs	r2, r2, r3
 4660 0048 3B6B     		ldr	r3, [r7, #48]
 4661 004a 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4662 004c 1B0E     		lsrs	r3, r3, #24
 4663 004e 1343     		orrs	r3, r3, r2
 4664 0050 7B62     		str	r3, [r7, #36]
2415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
ARM GAS  /tmp/ccyb6dex.s 			page 149


 4665              		.loc 4 2415 0
 4666 0052 0023     		movs	r3, #0
 4667 0054 FB63     		str	r3, [r7, #60]
 4668 0056 0023     		movs	r3, #0
 4669 0058 BB63     		str	r3, [r7, #56]
2416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lDistance, lSendResult;
2417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Remember the window size the peer is advertising. */
2419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 4670              		.loc 4 2419 0
 4671 005a 3B6B     		ldr	r3, [r7, #48]
 4672 005c DB89     		ldrh	r3, [r3, #14]	@ unaligned
 4673 005e 9BB2     		uxth	r3, r3
 4674 0060 1B02     		lsls	r3, r3, #8
 4675 0062 9AB2     		uxth	r2, r3
 4676 0064 3B6B     		ldr	r3, [r7, #48]
 4677 0066 DB89     		ldrh	r3, [r3, #14]	@ unaligned
 4678 0068 9BB2     		uxth	r3, r3
 4679 006a 1B0A     		lsrs	r3, r3, #8
 4680 006c 9BB2     		uxth	r3, r3
 4681 006e 9BB2     		uxth	r3, r3
 4682 0070 1343     		orrs	r3, r3, r2
 4683 0072 9BB2     		uxth	r3, r3
 4684 0074 9BB2     		uxth	r3, r3
 4685 0076 1A46     		mov	r2, r3
 4686 0078 FB68     		ldr	r3, [r7, #12]
 4687 007a C3F8CC20 		str	r2, [r3, #204]
2420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ulWindowSize =
2421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 4688              		.loc 4 2421 0
 4689 007e FB68     		ldr	r3, [r7, #12]
 4690 0080 D3F8CC30 		ldr	r3, [r3, #204]
 4691 0084 FA68     		ldr	r2, [r7, #12]
 4692 0086 92F8CA20 		ldrb	r2, [r2, #202]	@ zero_extendqisi2
 4693 008a 03FA02F2 		lsl	r2, r3, r2
2420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ulWindowSize =
 4694              		.loc 4 2420 0
 4695 008e FB68     		ldr	r3, [r7, #12]
 4696 0090 C3F8CC20 		str	r2, [r3, #204]
2422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 4697              		.loc 4 2423 0
 4698 0094 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 4699 0098 03F01003 		and	r3, r3, #16
 4700 009c 002B     		cmp	r3, #0
 4701 009e 41D0     		beq	.L223
2424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 4702              		.loc 4 2425 0
 4703 00a0 7B6B     		ldr	r3, [r7, #52]
 4704 00a2 D3F82A30 		ldr	r3, [r3, #42]	@ unaligned
 4705 00a6 1A06     		lsls	r2, r3, #24
 4706 00a8 7B6B     		ldr	r3, [r7, #52]
 4707 00aa D3F82A30 		ldr	r3, [r3, #42]	@ unaligned
 4708 00ae 03F47F43 		and	r3, r3, #65280
 4709 00b2 1B02     		lsls	r3, r3, #8
 4710 00b4 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/ccyb6dex.s 			page 150


 4711 00b6 7B6B     		ldr	r3, [r7, #52]
 4712 00b8 D3F82A30 		ldr	r3, [r3, #42]	@ unaligned
 4713 00bc 03F47F03 		and	r3, r3, #16711680
 4714 00c0 1B0A     		lsrs	r3, r3, #8
 4715 00c2 1A43     		orrs	r2, r2, r3
 4716 00c4 7B6B     		ldr	r3, [r7, #52]
 4717 00c6 D3F82A30 		ldr	r3, [r3, #42]	@ unaligned
 4718 00ca 1B0E     		lsrs	r3, r3, #24
 4719 00cc 1343     		orrs	r3, r3, r2
 4720 00ce F86A     		ldr	r0, [r7, #44]
 4721 00d0 1946     		mov	r1, r3
 4722 00d2 FFF7FEFF 		bl	ulTCPWindowTxAck
 4723 00d6 3862     		str	r0, [r7, #32]
2426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
2428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
2429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		txStream. */
2430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 4724              		.loc 4 2430 0
 4725 00d8 FB68     		ldr	r3, [r7, #12]
 4726 00da 9B6F     		ldr	r3, [r3, #120]
 4727 00dc 002B     		cmp	r3, #0
 4728 00de 21D0     		beq	.L223
 4729              		.loc 4 2430 0 is_stmt 0 discriminator 1
 4730 00e0 3B6A     		ldr	r3, [r7, #32]
 4731 00e2 002B     		cmp	r3, #0
 4732 00e4 1ED0     		beq	.L223
2431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Just advancing the tail index, 'ulCount' bytes have been
2433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			confirmed, and because there is new space in the txStream, the
2434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			user/owner should be woken up. */
2435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* _HT_ : only in case the socket's waiting? */
2436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u 
 4733              		.loc 4 2436 0 is_stmt 1
 4734 00e6 FB68     		ldr	r3, [r7, #12]
 4735 00e8 9A6F     		ldr	r2, [r3, #120]
 4736 00ea 0023     		movs	r3, #0
 4737 00ec 0093     		str	r3, [sp]
 4738 00ee 1046     		mov	r0, r2
 4739 00f0 0021     		movs	r1, #0
 4740 00f2 0022     		movs	r2, #0
 4741 00f4 3B6A     		ldr	r3, [r7, #32]
 4742 00f6 FFF7FEFF 		bl	uxStreamBufferGet
 4743 00fa 0346     		mov	r3, r0
 4744 00fc 002B     		cmp	r3, #0
 4745 00fe 11D0     		beq	.L223
2437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->xEventBits |= eSOCKET_SEND;
 4746              		.loc 4 2438 0
 4747 0100 FB68     		ldr	r3, [r7, #12]
 4748 0102 1B68     		ldr	r3, [r3]
 4749 0104 43F00202 		orr	r2, r3, #2
 4750 0108 FB68     		ldr	r3, [r7, #12]
 4751 010a 1A60     		str	r2, [r3]
2439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
2441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
ARM GAS  /tmp/ccyb6dex.s 			page 151


2442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 4752              		.loc 4 2442 0
 4753 010c FB68     		ldr	r3, [r7, #12]
 4754 010e DB6A     		ldr	r3, [r3, #44]
 4755 0110 03F00203 		and	r3, r3, #2
 4756 0114 002B     		cmp	r3, #0
 4757 0116 05D0     		beq	.L223
2443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
2444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 4758              		.loc 4 2444 0
 4759 0118 FB68     		ldr	r3, [r7, #12]
 4760 011a 1B68     		ldr	r3, [r3]
 4761 011c 43F40072 		orr	r2, r3, #512
 4762 0120 FB68     		ldr	r3, [r7, #12]
 4763 0122 1A60     		str	r2, [r3]
 4764              	.L223:
2445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
2446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
2447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#endif
2448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* In case the socket owner has installed an OnSent handler,
2449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				call it now. */
2450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#if( ipconfigUSE_CALLBACKS == 1 )
2451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
2452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
2453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					{
2454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
2455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					}
2456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
2457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#endif /* ipconfigUSE_CALLBACKS == 1  */
2458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* If this socket has a stream for transmission, add the data to the
2463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	outgoing segment(s). */
2464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.txStream != NULL )
 4765              		.loc 4 2464 0
 4766 0124 FB68     		ldr	r3, [r7, #12]
 4767 0126 9B6F     		ldr	r3, [r3, #120]
 4768 0128 002B     		cmp	r3, #0
 4769 012a 02D0     		beq	.L224
2465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPAddTxData( pxSocket );
 4770              		.loc 4 2466 0
 4771 012c F868     		ldr	r0, [r7, #12]
 4772 012e FFF7FEFF 		bl	prvTCPAddTxData
 4773              	.L224:
2467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 4774              		.loc 4 2469 0
 4775 0132 FB6A     		ldr	r3, [r7, #44]
 4776 0134 1A6A     		ldr	r2, [r3, #32]
 4777 0136 FB68     		ldr	r3, [r7, #12]
 4778 0138 C3F80821 		str	r2, [r3, #264]
2470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipT
ARM GAS  /tmp/ccyb6dex.s 			page 152


 4779              		.loc 4 2471 0
 4780 013c FB68     		ldr	r3, [r7, #12]
 4781 013e 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 4782 0142 03F02003 		and	r3, r3, #32
 4783 0146 DBB2     		uxtb	r3, r3
 4784 0148 002B     		cmp	r3, #0
 4785 014a 05D1     		bne	.L225
 4786              		.loc 4 2471 0 is_stmt 0 discriminator 1
 4787 014c 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 4788 0150 03F00103 		and	r3, r3, #1
 4789 0154 002B     		cmp	r3, #0
 4790 0156 37D0     		beq	.L226
 4791              	.L225:
2472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Peer is requesting to stop, see if we're really finished. */
2474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xMayClose = pdTRUE;
 4792              		.loc 4 2474 0 is_stmt 1
 4793 0158 0123     		movs	r3, #1
 4794 015a BB63     		str	r3, [r7, #56]
2475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Checks are only necessary if we haven't sent a FIN yet. */
2477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 4795              		.loc 4 2477 0
 4796 015c FB68     		ldr	r3, [r7, #12]
 4797 015e 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 4798 0162 03F04003 		and	r3, r3, #64
 4799 0166 DBB2     		uxtb	r3, r3
 4800 0168 002B     		cmp	r3, #0
 4801 016a 1CD1     		bne	.L227
2478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
2480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 4802              		.loc 4 2480 0
 4803 016c F86A     		ldr	r0, [r7, #44]
 4804 016e FFF7FEFF 		bl	xTCPWindowRxEmpty
 4805 0172 F861     		str	r0, [r7, #28]
2481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 4806              		.loc 4 2481 0
 4807 0174 F86A     		ldr	r0, [r7, #44]
 4808 0176 FFF7FEFF 		bl	xTCPWindowTxDone
 4809 017a B861     		str	r0, [r7, #24]
2482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 4810              		.loc 4 2483 0
 4811 017c FB69     		ldr	r3, [r7, #28]
 4812 017e 002B     		cmp	r3, #0
 4813 0180 02D0     		beq	.L228
 4814              		.loc 4 2483 0 is_stmt 0 discriminator 1
 4815 0182 BB69     		ldr	r3, [r7, #24]
 4816 0184 002B     		cmp	r3, #0
 4817 0186 02D1     		bne	.L229
 4818              	.L228:
2484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
2486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
2487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->usLocalPort,
2488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usRemotePort,
ARM GAS  /tmp/ccyb6dex.s 			page 153


2489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					bRxComplete, bTxDone ) );
2490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xMayClose = pdFALSE;
 4819              		.loc 4 2490 0 is_stmt 1
 4820 0188 0023     		movs	r3, #0
 4821 018a BB63     		str	r3, [r7, #56]
 4822 018c 0BE0     		b	.L227
 4823              	.L229:
2491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
2493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenc
 4824              		.loc 4 2494 0
 4825 018e 7A6A     		ldr	r2, [r7, #36]
 4826 0190 7B68     		ldr	r3, [r7, #4]
 4827 0192 1A44     		add	r2, r2, r3
 4828 0194 FB6A     		ldr	r3, [r7, #44]
 4829 0196 1B69     		ldr	r3, [r3, #16]
 4830 0198 D31A     		subs	r3, r2, r3
 4831 019a 7B61     		str	r3, [r7, #20]
2495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( lDistance > 1 )
 4832              		.loc 4 2496 0
 4833 019c 7B69     		ldr	r3, [r7, #20]
 4834 019e 012B     		cmp	r3, #1
 4835 01a0 01DD     		ble	.L227
2497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
2498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
2499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
2500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
2501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xMayClose = pdFALSE;
 4836              		.loc 4 2502 0
 4837 01a2 0023     		movs	r3, #0
 4838 01a4 BB63     		str	r3, [r7, #56]
 4839              	.L227:
2503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
2504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( xTCPWindowLoggingLevel > 0 )
2508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
2510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLe
2511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber 
2512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( xMayClose != pdFALSE )
 4840              		.loc 4 2514 0
 4841 01a6 BB6B     		ldr	r3, [r7, #56]
 4842 01a8 002B     		cmp	r3, #0
 4843 01aa 0DD0     		beq	.L226
2515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 4844              		.loc 4 2516 0
 4845 01ac FA68     		ldr	r2, [r7, #12]
 4846 01ae 92F84130 		ldrb	r3, [r2, #65]
 4847 01b2 43F02003 		orr	r3, r3, #32
ARM GAS  /tmp/ccyb6dex.s 			page 154


 4848 01b6 82F84130 		strb	r3, [r2, #65]
2517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 4849              		.loc 4 2517 0
 4850 01ba BB68     		ldr	r3, [r7, #8]
 4851 01bc 1B68     		ldr	r3, [r3]
 4852 01be F868     		ldr	r0, [r7, #12]
 4853 01c0 1946     		mov	r1, r3
 4854 01c2 FFF7FEFF 		bl	prvTCPHandleFin
 4855 01c6 F863     		str	r0, [r7, #60]
 4856              	.L226:
2518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xMayClose == pdFALSE )
 4857              		.loc 4 2521 0
 4858 01c8 BB6B     		ldr	r3, [r7, #56]
 4859 01ca 002B     		cmp	r3, #0
 4860 01cc 2AD1     		bne	.L230
2522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 4861              		.loc 4 2523 0
 4862 01ce 3B6B     		ldr	r3, [r7, #48]
 4863 01d0 1022     		movs	r2, #16
 4864 01d2 5A73     		strb	r2, [r3, #13]
2524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ulReceiveLength != 0u )
 4865              		.loc 4 2525 0
 4866 01d4 7B68     		ldr	r3, [r7, #4]
 4867 01d6 002B     		cmp	r3, #0
 4868 01d8 16D0     		beq	.L231
2526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 4869              		.loc 4 2527 0
 4870 01da 3B68     		ldr	r3, [r7]
 4871 01dc 2833     		adds	r3, r3, #40
 4872 01de FB63     		str	r3, [r7, #60]
2528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
2529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 4873              		.loc 4 2529 0
 4874 01e0 3B68     		ldr	r3, [r7]
 4875 01e2 DBB2     		uxtb	r3, r3
 4876 01e4 1433     		adds	r3, r3, #20
 4877 01e6 DBB2     		uxtb	r3, r3
 4878 01e8 9B00     		lsls	r3, r3, #2
 4879 01ea DAB2     		uxtb	r2, r3
 4880 01ec 3B6B     		ldr	r3, [r7, #48]
 4881 01ee 1A73     		strb	r2, [r3, #12]
2530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 4882              		.loc 4 2531 0
 4883 01f0 FB68     		ldr	r3, [r7, #12]
 4884 01f2 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 4885 01f6 03F04003 		and	r3, r3, #64
 4886 01fa DBB2     		uxtb	r3, r3
 4887 01fc 002B     		cmp	r3, #0
 4888 01fe 03D0     		beq	.L231
2532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
ARM GAS  /tmp/ccyb6dex.s 			page 155


2533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 4889              		.loc 4 2533 0
 4890 0200 FB6A     		ldr	r3, [r7, #44]
 4891 0202 5A6A     		ldr	r2, [r3, #36]
 4892 0204 FB6A     		ldr	r3, [r7, #44]
 4893 0206 1A62     		str	r2, [r3, #32]
 4894              	.L231:
2534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Now get data to be transmitted. */
2538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
2539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		can not	send-out both TCP options and also a full packet. Sending
2540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		options (SACK) is always more urgent than sending data, which can be
2541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		sent later. */
2542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( uxOptionsLength == 0u )
 4895              		.loc 4 2542 0
 4896 0208 3B68     		ldr	r3, [r7]
 4897 020a 002B     		cmp	r3, #0
 4898 020c 0AD1     		bne	.L230
2543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* prvTCPPrepareSend might allocate a bigger network buffer, if
2545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			necessary. */
2546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 4899              		.loc 4 2546 0
 4900 020e F868     		ldr	r0, [r7, #12]
 4901 0210 B968     		ldr	r1, [r7, #8]
 4902 0212 3A68     		ldr	r2, [r7]
 4903 0214 FFF7FEFF 		bl	prvTCPPrepareSend
 4904 0218 3861     		str	r0, [r7, #16]
2547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( lSendResult > 0 )
 4905              		.loc 4 2547 0
 4906 021a 3B69     		ldr	r3, [r7, #16]
 4907 021c 002B     		cmp	r3, #0
 4908 021e 01DD     		ble	.L230
2548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xSendLength = ( BaseType_t ) lSendResult;
 4909              		.loc 4 2549 0
 4910 0220 3B69     		ldr	r3, [r7, #16]
 4911 0222 FB63     		str	r3, [r7, #60]
 4912              	.L230:
2550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xSendLength;
 4913              		.loc 4 2554 0
 4914 0224 FB6B     		ldr	r3, [r7, #60]
2555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 4915              		.loc 4 2555 0
 4916 0226 1846     		mov	r0, r3
 4917 0228 4037     		adds	r7, r7, #64
 4918              	.LCFI177:
 4919              		.cfi_def_cfa_offset 8
 4920 022a BD46     		mov	sp, r7
 4921              	.LCFI178:
 4922              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccyb6dex.s 			page 156


 4923              		@ sp needed
 4924 022c 80BD     		pop	{r7, pc}
 4925              		.cfi_endproc
 4926              	.LFE51:
 4928 022e 00BF     		.section	.text.prvSendData,"ax",%progbits
 4929              		.align	2
 4930              		.thumb
 4931              		.thumb_func
 4933              	prvSendData:
 4934              	.LFB52:
2556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
2559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState().  There is data to be sent.  If
2560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
2561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * checked if it would better be postponed for efficiency.
2562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
2563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkB
2564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, BaseType_t xSendLength )
2565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 4935              		.loc 4 2565 0
 4936              		.cfi_startproc
 4937              		@ args = 0, pretend = 0, frame = 40
 4938              		@ frame_needed = 1, uses_anonymous_args = 0
 4939 0000 80B5     		push	{r7, lr}
 4940              	.LCFI179:
 4941              		.cfi_def_cfa_offset 8
 4942              		.cfi_offset 7, -8
 4943              		.cfi_offset 14, -4
 4944 0002 8AB0     		sub	sp, sp, #40
 4945              	.LCFI180:
 4946              		.cfi_def_cfa_offset 48
 4947 0004 00AF     		add	r7, sp, #0
 4948              	.LCFI181:
 4949              		.cfi_def_cfa_register 7
 4950 0006 F860     		str	r0, [r7, #12]
 4951 0008 B960     		str	r1, [r7, #8]
 4952 000a 7A60     		str	r2, [r7, #4]
 4953 000c 3B60     		str	r3, [r7]
2566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 4954              		.loc 4 2566 0
 4955 000e BB68     		ldr	r3, [r7, #8]
 4956 0010 1B68     		ldr	r3, [r3]
 4957 0012 9B69     		ldr	r3, [r3, #24]
 4958 0014 3B62     		str	r3, [r7, #32]
2567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 4959              		.loc 4 2567 0
 4960 0016 3B6A     		ldr	r3, [r7, #32]
 4961 0018 2233     		adds	r3, r3, #34
 4962 001a FB61     		str	r3, [r7, #28]
2568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 4963              		.loc 4 2568 0
 4964 001c FB68     		ldr	r3, [r7, #12]
 4965 001e DC33     		adds	r3, r3, #220
 4966 0020 BB61     		str	r3, [r7, #24]
2569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /* Find out what window size we may advertised. */
2570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulFrontSpace;
ARM GAS  /tmp/ccyb6dex.s 			page 157


2571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** int32_t lRxSpace;
2572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_TCP_WIN == 1 )
2573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigTCP_ACK_EARLIER_PACKET == 0 )
2574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		const int32_t lMinLength = 0;
2575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#else
2576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		int32_t lMinLength;
2577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif
2578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif
2579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 4967              		.loc 4 2579 0
 4968 0022 BB69     		ldr	r3, [r7, #24]
 4969 0024 5A68     		ldr	r2, [r3, #4]
2580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 4970              		.loc 4 2580 0
 4971 0026 BB69     		ldr	r3, [r7, #24]
 4972 0028 1969     		ldr	r1, [r3, #16]
 4973 002a BB69     		ldr	r3, [r7, #24]
 4974 002c 9B69     		ldr	r3, [r3, #24]
 4975 002e CB1A     		subs	r3, r1, r3
2579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 4976              		.loc 4 2579 0
 4977 0030 1A44     		add	r2, r2, r3
 4978 0032 FB68     		ldr	r3, [r7, #12]
 4979 0034 C3F8D020 		str	r2, [r3, #208]
2581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Free space in rxStream. */
2583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.rxStream != NULL )
 4980              		.loc 4 2583 0
 4981 0038 FB68     		ldr	r3, [r7, #12]
 4982 003a 5B6F     		ldr	r3, [r3, #116]
 4983 003c 002B     		cmp	r3, #0
 4984 003e 06D0     		beq	.L234
2584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 4985              		.loc 4 2585 0
 4986 0040 FB68     		ldr	r3, [r7, #12]
 4987 0042 5B6F     		ldr	r3, [r3, #116]
 4988 0044 1846     		mov	r0, r3
 4989 0046 FFF7FEFF 		bl	uxStreamBufferFrontSpace
 4990 004a 7862     		str	r0, [r7, #36]
 4991 004c 02E0     		b	.L235
 4992              	.L234:
2586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
2588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 4993              		.loc 4 2589 0
 4994 004e FB68     		ldr	r3, [r7, #12]
 4995 0050 DB6E     		ldr	r3, [r3, #108]
 4996 0052 7B62     		str	r3, [r7, #36]
 4997              	.L235:
2590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSi
 4998              		.loc 4 2592 0
 4999 0054 FB68     		ldr	r3, [r7, #12]
 5000 0056 D3F8D030 		ldr	r3, [r3, #208]
ARM GAS  /tmp/ccyb6dex.s 			page 158


 5001 005a 786A     		ldr	r0, [r7, #36]
 5002 005c 1946     		mov	r1, r3
 5003 005e FFF7FEFF 		bl	FreeRTOS_min_uint32
 5004 0062 0246     		mov	r2, r0
 5005 0064 FB68     		ldr	r3, [r7, #12]
 5006 0066 C3F8D020 		str	r2, [r3, #208]
2593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Set the time-out field, so that we'll be called by the IP-task in case no
2595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	next message will be received. */
2596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumbe
 5007              		.loc 4 2596 0
 5008 006a FB68     		ldr	r3, [r7, #12]
 5009 006c 5A6C     		ldr	r2, [r3, #68]
 5010 006e BB69     		ldr	r3, [r7, #24]
 5011 0070 1B69     		ldr	r3, [r3, #16]
 5012 0072 D31A     		subs	r3, r2, r3
 5013 0074 7B61     		str	r3, [r7, #20]
2597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if ipconfigUSE_TCP_WIN == 1
2598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
2601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 5014              		.loc 4 2602 0
 5015 0076 FB68     		ldr	r3, [r7, #12]
 5016 0078 B3F84A30 		ldrh	r3, [r3, #74]
 5017 007c 5B00     		lsls	r3, r3, #1
 5018 007e 3B61     		str	r3, [r7, #16]
2603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */
2605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* In case we're receiving data continuously, we might postpone sending
2607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		an ACK to gain performance. */
2608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 5019              		.loc 4 2608 0
 5020 0080 7B68     		ldr	r3, [r7, #4]
 5021 0082 002B     		cmp	r3, #0
 5022 0084 4FD0     		beq	.L236
 5023              		.loc 4 2608 0 is_stmt 0 discriminator 1
 5024 0086 7A69     		ldr	r2, [r7, #20]
 5025 0088 3B69     		ldr	r3, [r7, #16]
 5026 008a 9A42     		cmp	r2, r3
 5027 008c 4BDB     		blt	.L236
2609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
2610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 5028              		.loc 4 2610 0 is_stmt 1
 5029 008e FB68     		ldr	r3, [r7, #12]
 5030 0090 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 5031 0094 03F04003 		and	r3, r3, #64
 5032 0098 DBB2     		uxtb	r3, r3
2609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 5033              		.loc 4 2609 0
 5034 009a 002B     		cmp	r3, #0
 5035 009c 43D1     		bne	.L236
 5036              		.loc 4 2610 0
 5037 009e 3B68     		ldr	r3, [r7]
 5038 00a0 282B     		cmp	r3, #40
ARM GAS  /tmp/ccyb6dex.s 			page 159


 5039 00a2 40D1     		bne	.L236
2611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options 
2612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 5040              		.loc 4 2612 0
 5041 00a4 FB68     		ldr	r3, [r7, #12]
 5042 00a6 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
2611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options 
 5043              		.loc 4 2611 0
 5044 00aa 052B     		cmp	r3, #5
 5045 00ac 3BD1     		bne	.L236
2613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 5046              		.loc 4 2613 0
 5047 00ae FB69     		ldr	r3, [r7, #28]
 5048 00b0 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
2612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 5049              		.loc 4 2612 0
 5050 00b2 102B     		cmp	r3, #16
 5051 00b4 37D1     		bne	.L236
2614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 5052              		.loc 4 2615 0
 5053 00b6 FB68     		ldr	r3, [r7, #12]
 5054 00b8 DA6F     		ldr	r2, [r3, #124]
 5055 00ba BB68     		ldr	r3, [r7, #8]
 5056 00bc 1B68     		ldr	r3, [r3]
 5057 00be 9A42     		cmp	r2, r3
 5058 00c0 0CD0     		beq	.L237
2616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* There was still a delayed in queue, delete it. */
2618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 5059              		.loc 4 2618 0
 5060 00c2 FB68     		ldr	r3, [r7, #12]
 5061 00c4 DB6F     		ldr	r3, [r3, #124]
 5062 00c6 002B     		cmp	r3, #0
 5063 00c8 04D0     		beq	.L238
2619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
2620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 5064              		.loc 4 2620 0
 5065 00ca FB68     		ldr	r3, [r7, #12]
 5066 00cc DB6F     		ldr	r3, [r3, #124]
 5067 00ce 1846     		mov	r0, r3
 5068 00d0 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 5069              	.L238:
2621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
2622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 5070              		.loc 4 2623 0
 5071 00d4 BB68     		ldr	r3, [r7, #8]
 5072 00d6 1A68     		ldr	r2, [r3]
 5073 00d8 FB68     		ldr	r3, [r7, #12]
 5074 00da DA67     		str	r2, [r3, #124]
 5075              	.L237:
2624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message.
 5076              		.loc 4 2625 0
 5077 00dc FB68     		ldr	r3, [r7, #12]
 5078 00de B3F84A30 		ldrh	r3, [r3, #74]
ARM GAS  /tmp/ccyb6dex.s 			page 160


 5079 00e2 1A46     		mov	r2, r3
 5080 00e4 7B68     		ldr	r3, [r7, #4]
 5081 00e6 9A42     		cmp	r2, r3
 5082 00e8 07D8     		bhi	.L239
2626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS 
 5083              		.loc 4 2626 0 discriminator 1
 5084 00ea FB68     		ldr	r3, [r7, #12]
 5085 00ec B3F84A30 		ldrh	r3, [r3, #74]
 5086 00f0 5B00     		lsls	r3, r3, #1
 5087 00f2 1A46     		mov	r2, r3
2625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS 
 5088              		.loc 4 2625 0 discriminator 1
 5089 00f4 7B69     		ldr	r3, [r7, #20]
 5090 00f6 9A42     		cmp	r2, r3
 5091 00f8 04DD     		ble	.L240
 5092              	.L239:
2627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 5093              		.loc 4 2628 0
 5094 00fa FB68     		ldr	r3, [r7, #12]
 5095 00fc 0222     		movs	r2, #2
 5096 00fe A3F84820 		strh	r2, [r3, #72]	@ movhi
 5097 0102 03E0     		b	.L241
 5098              	.L240:
2629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
2631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Normally a delayed ACK should wait 200 ms for a next incoming
2633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				packet.  Only wait 20 ms here to gain performance.  A slow ACK
2634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				for full-size message. */
2635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 5099              		.loc 4 2635 0
 5100 0104 FB68     		ldr	r3, [r7, #12]
 5101 0106 1422     		movs	r2, #20
 5102 0108 A3F84820 		strh	r2, [r3, #72]	@ movhi
 5103              	.L241:
2636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdF
 5104              		.loc 4 2638 0
 5105 010c 1C4B     		ldr	r3, .L252
 5106 010e 1B68     		ldr	r3, [r3]
 5107 0110 012B     		cmp	r3, #1
 5108 0112 02DD     		ble	.L242
 5109              		.loc 4 2638 0 is_stmt 0 discriminator 1
 5110 0114 FB68     		ldr	r3, [r7, #12]
 5111 0116 9B8C     		ldrh	r3, [r3, #36]
 5112 0118 172B     		cmp	r3, #23
 5113              	.L242:
2639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %lu) tmout %u d %lu\n",
2641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->usLocalPort,
2642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usRemotePort,
2643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
2644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xSendLength,
2646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
ARM GAS  /tmp/ccyb6dex.s 			page 161


2647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			*ppxNetworkBuffer = NULL;
 5114              		.loc 4 2649 0 is_stmt 1
 5115 011a BB68     		ldr	r3, [r7, #8]
 5116 011c 0022     		movs	r2, #0
 5117 011e 1A60     		str	r2, [r3]
2650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xSendLength = 0;
 5118              		.loc 4 2650 0
 5119 0120 0023     		movs	r3, #0
 5120 0122 3B60     		str	r3, [r7]
 5121 0124 11E0     		b	.L245
 5122              	.L236:
2651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 5123              		.loc 4 2652 0
 5124 0126 FB68     		ldr	r3, [r7, #12]
 5125 0128 DB6F     		ldr	r3, [r3, #124]
 5126 012a 002B     		cmp	r3, #0
 5127 012c 0DD0     		beq	.L245
2653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* As an ACK is not being delayed, remove any earlier delayed ACK
2655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			message. */
2656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 5128              		.loc 4 2656 0
 5129 012e FB68     		ldr	r3, [r7, #12]
 5130 0130 DA6F     		ldr	r2, [r3, #124]
 5131 0132 BB68     		ldr	r3, [r7, #8]
 5132 0134 1B68     		ldr	r3, [r3]
 5133 0136 9A42     		cmp	r2, r3
 5134 0138 04D0     		beq	.L246
2657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 5135              		.loc 4 2658 0
 5136 013a FB68     		ldr	r3, [r7, #12]
 5137 013c DB6F     		ldr	r3, [r3, #124]
 5138 013e 1846     		mov	r0, r3
 5139 0140 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 5140              	.L246:
2659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.pxAckMessage = NULL;
 5141              		.loc 4 2661 0
 5142 0144 FB68     		ldr	r3, [r7, #12]
 5143 0146 0022     		movs	r2, #0
 5144 0148 DA67     		str	r2, [r3, #124]
 5145              	.L245:
2662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#else
2665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Remove compiler warnings. */
2667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( void ) ulReceiveLength;
2668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( void ) pxTCPHeader;
2669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		( void ) lRxSpace;
2670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigUSE_TCP_WIN */
ARM GAS  /tmp/ccyb6dex.s 			page 162


2672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xSendLength != 0 )
 5146              		.loc 4 2673 0
 5147 014a 3B68     		ldr	r3, [r7]
 5148 014c 002B     		cmp	r3, #0
 5149 014e 12D0     		beq	.L247
2674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFA
 5150              		.loc 4 2675 0
 5151 0150 0B4B     		ldr	r3, .L252
 5152 0152 1B68     		ldr	r3, [r3]
 5153 0154 012B     		cmp	r3, #1
 5154 0156 02DD     		ble	.L248
 5155              		.loc 4 2675 0 is_stmt 0 discriminator 1
 5156 0158 FB68     		ldr	r3, [r7, #12]
 5157 015a 9B8C     		ldrh	r3, [r3, #36]
 5158 015c 172B     		cmp	r3, #23
 5159              	.L248:
2676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %lu SEQ %lu (len %lu)\n",
2678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->usLocalPort,
2679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usRemotePort,
2680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
2681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xSendLength ) );
2683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Set the parameter 'xReleaseAfterSend' to the value of
2686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ipconfigZERO_COPY_TX_DRIVER. */
2687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_D
 5160              		.loc 4 2687 0 is_stmt 1
 5161 015e BB68     		ldr	r3, [r7, #8]
 5162 0160 1A68     		ldr	r2, [r3]
 5163 0162 3B68     		ldr	r3, [r7]
 5164 0164 F868     		ldr	r0, [r7, #12]
 5165 0166 1146     		mov	r1, r2
 5166 0168 1A46     		mov	r2, r3
 5167 016a 0123     		movs	r3, #1
 5168 016c FFF7FEFF 		bl	prvTCPReturnPacket
2688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
2689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The driver has taken ownership of the Network Buffer. */
2691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			*ppxNetworkBuffer = NULL;
 5169              		.loc 4 2691 0
 5170 0170 BB68     		ldr	r3, [r7, #8]
 5171 0172 0022     		movs	r2, #0
 5172 0174 1A60     		str	r2, [r3]
 5173              	.L247:
2692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif
2694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xSendLength;
 5174              		.loc 4 2696 0
 5175 0176 3B68     		ldr	r3, [r7]
2697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 5176              		.loc 4 2697 0
ARM GAS  /tmp/ccyb6dex.s 			page 163


 5177 0178 1846     		mov	r0, r3
 5178 017a 2837     		adds	r7, r7, #40
 5179              	.LCFI182:
 5180              		.cfi_def_cfa_offset 8
 5181 017c BD46     		mov	sp, r7
 5182              	.LCFI183:
 5183              		.cfi_def_cfa_register 13
 5184              		@ sp needed
 5185 017e 80BD     		pop	{r7, pc}
 5186              	.L253:
 5187              		.align	2
 5188              	.L252:
 5189 0180 00000000 		.word	xTCPWindowLoggingLevel
 5190              		.cfi_endproc
 5191              	.LFE52:
 5193              		.section	.text.prvTCPHandleState,"ax",%progbits
 5194              		.align	2
 5195              		.thumb
 5196              		.thumb_func
 5198              	prvTCPHandleState:
 5199              	.LFB53:
2698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
2701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * prvTCPHandleState()
2702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * is the most important function of this TCP stack
2703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * We've tried to keep it (relatively short) by putting a lot of code in
2704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * the static functions above:
2705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
2706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvCheckRxData()
2707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvStoreRxData()
2708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvSetOptions()
2709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvHandleSynReceived()
2710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvHandleEstablished()
2711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvSendData()
2712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *
2713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * As these functions are declared static, and they're called from one location
2714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * only, most compilers will inline them, thus avoiding a call and return.
2715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
2716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNe
2717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 5200              		.loc 4 2717 0
 5201              		.cfi_startproc
 5202              		@ args = 0, pretend = 0, frame = 48
 5203              		@ frame_needed = 1, uses_anonymous_args = 0
 5204 0000 80B5     		push	{r7, lr}
 5205              	.LCFI184:
 5206              		.cfi_def_cfa_offset 8
 5207              		.cfi_offset 7, -8
 5208              		.cfi_offset 14, -4
 5209 0002 8CB0     		sub	sp, sp, #48
 5210              	.LCFI185:
 5211              		.cfi_def_cfa_offset 56
 5212 0004 00AF     		add	r7, sp, #0
 5213              	.LCFI186:
 5214              		.cfi_def_cfa_register 7
 5215 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccyb6dex.s 			page 164


 5216 0008 3960     		str	r1, [r7]
2718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 5217              		.loc 4 2718 0
 5218 000a 3B68     		ldr	r3, [r7]
 5219 000c 1B68     		ldr	r3, [r3]
 5220 000e 9B69     		ldr	r3, [r3, #24]
 5221 0010 BB62     		str	r3, [r7, #40]
2719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 5222              		.loc 4 2719 0
 5223 0012 BB6A     		ldr	r3, [r7, #40]
 5224 0014 2233     		adds	r3, r3, #34
 5225 0016 7B62     		str	r3, [r7, #36]
2720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0;
 5226              		.loc 4 2720 0
 5227 0018 0023     		movs	r3, #0
 5228 001a FB62     		str	r3, [r7, #44]
2721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
2722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint8_t *pucRecvData;
2723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 5229              		.loc 4 2723 0
 5230 001c 7B6A     		ldr	r3, [r7, #36]
 5231 001e 5B68     		ldr	r3, [r3, #4]	@ unaligned
 5232 0020 1A06     		lsls	r2, r3, #24
 5233 0022 7B6A     		ldr	r3, [r7, #36]
 5234 0024 5B68     		ldr	r3, [r3, #4]	@ unaligned
 5235 0026 03F47F43 		and	r3, r3, #65280
 5236 002a 1B02     		lsls	r3, r3, #8
 5237 002c 1A43     		orrs	r2, r2, r3
 5238 002e 7B6A     		ldr	r3, [r7, #36]
 5239 0030 5B68     		ldr	r3, [r3, #4]	@ unaligned
 5240 0032 03F47F03 		and	r3, r3, #16711680
 5241 0036 1B0A     		lsrs	r3, r3, #8
 5242 0038 1A43     		orrs	r2, r2, r3
 5243 003a 7B6A     		ldr	r3, [r7, #36]
 5244 003c 5B68     		ldr	r3, [r3, #4]	@ unaligned
 5245 003e 1B0E     		lsrs	r3, r3, #24
 5246 0040 1343     		orrs	r3, r3, r2
 5247 0042 3B62     		str	r3, [r7, #32]
2724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* xOptionsLength: the size of the options to be sent (always a multiple of
2726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	4 bytes)
2727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	1. in the SYN phase, we shall communicate the MSS
2728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	2. in case of a SACK, Selective ACK, ack a segment which comes in
2729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	out-of-order. */
2730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength = 0u;
 5248              		.loc 4 2730 0
 5249 0044 0023     		movs	r3, #0
 5250 0046 FB61     		str	r3, [r7, #28]
2731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 5251              		.loc 4 2731 0
 5252 0048 7B6A     		ldr	r3, [r7, #36]
 5253 004a 5B7B     		ldrb	r3, [r3, #13]
 5254 004c FB76     		strb	r3, [r7, #27]
2732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 5255              		.loc 4 2732 0
 5256 004e 7B68     		ldr	r3, [r7, #4]
 5257 0050 DC33     		adds	r3, r3, #220
ARM GAS  /tmp/ccyb6dex.s 			page 165


 5258 0052 7B61     		str	r3, [r7, #20]
2733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* First get the length and the position of the received data, if any.
2735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pucRecvData will point to the first byte of the TCP payload. */
2736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 5259              		.loc 4 2736 0
 5260 0054 3B68     		ldr	r3, [r7]
 5261 0056 1A68     		ldr	r2, [r3]
 5262 0058 07F10C03 		add	r3, r7, #12
 5263 005c 1046     		mov	r0, r2
 5264 005e 1946     		mov	r1, r3
 5265 0060 FFF7FEFF 		bl	prvCheckRxData
 5266 0064 0346     		mov	r3, r0
 5267 0066 3B61     		str	r3, [r7, #16]
2737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 5268              		.loc 4 2738 0
 5269 0068 7B68     		ldr	r3, [r7, #4]
 5270 006a 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 5271 006e 042B     		cmp	r3, #4
 5272 0070 0CD9     		bls	.L255
2739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 5273              		.loc 4 2740 0
 5274 0072 7B69     		ldr	r3, [r7, #20]
 5275 0074 1A69     		ldr	r2, [r3, #16]
 5276 0076 3B6A     		ldr	r3, [r7, #32]
 5277 0078 0133     		adds	r3, r3, #1
 5278 007a 9A42     		cmp	r2, r3
 5279 007c 06D1     		bne	.L255
2741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* This is most probably a keep-alive message from peer.  Setting
2743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			'bWinChange' doesn't cause a window-size-change, the flag is used
2744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			here to force sending an immediate ACK. */
2745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 5280              		.loc 4 2745 0
 5281 007e 7A68     		ldr	r2, [r7, #4]
 5282 0080 92F84130 		ldrb	r3, [r2, #65]
 5283 0084 43F00103 		orr	r3, r3, #1
 5284 0088 82F84130 		strb	r3, [r2, #65]
 5285              	.L255:
2746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Keep track of the highest sequence number that might be expected within
2750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	this connection. */
2751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber )
 5286              		.loc 4 2751 0
 5287 008c 3A6A     		ldr	r2, [r7, #32]
 5288 008e 3B69     		ldr	r3, [r7, #16]
 5289 0090 1A44     		add	r2, r2, r3
 5290 0092 7B69     		ldr	r3, [r7, #20]
 5291 0094 9B69     		ldr	r3, [r3, #24]
 5292 0096 D31A     		subs	r3, r2, r3
 5293 0098 002B     		cmp	r3, #0
 5294 009a 04DD     		ble	.L256
2752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
ARM GAS  /tmp/ccyb6dex.s 			page 166


2753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 5295              		.loc 4 2753 0
 5296 009c 3A6A     		ldr	r2, [r7, #32]
 5297 009e 3B69     		ldr	r3, [r7, #16]
 5298 00a0 1A44     		add	r2, r2, r3
 5299 00a2 7B69     		ldr	r3, [r7, #20]
 5300 00a4 9A61     		str	r2, [r3, #24]
 5301              	.L256:
2754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Storing data may result in a fatal error if malloc() fails. */
2757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 5302              		.loc 4 2757 0
 5303 00a6 FA68     		ldr	r2, [r7, #12]
 5304 00a8 3B68     		ldr	r3, [r7]
 5305 00aa 1B68     		ldr	r3, [r3]
 5306 00ac 7868     		ldr	r0, [r7, #4]
 5307 00ae 1146     		mov	r1, r2
 5308 00b0 1A46     		mov	r2, r3
 5309 00b2 3B69     		ldr	r3, [r7, #16]
 5310 00b4 FFF7FEFF 		bl	prvStoreRxData
 5311 00b8 0346     		mov	r3, r0
 5312 00ba 002B     		cmp	r3, #0
 5313 00bc 03DA     		bge	.L257
2758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xSendLength = -1;
 5314              		.loc 4 2759 0
 5315 00be 4FF0FF33 		mov	r3, #-1
 5316 00c2 FB62     		str	r3, [r7, #44]
 5317 00c4 9EE0     		b	.L258
 5318              	.L257:
2760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
2762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 5319              		.loc 4 2763 0
 5320 00c6 3B68     		ldr	r3, [r7]
 5321 00c8 1B68     		ldr	r3, [r3]
 5322 00ca 7868     		ldr	r0, [r7, #4]
 5323 00cc 1946     		mov	r1, r3
 5324 00ce FFF7FEFF 		bl	prvSetOptions
 5325 00d2 F861     		str	r0, [r7, #28]
2764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipT
 5326              		.loc 4 2765 0
 5327 00d4 7B68     		ldr	r3, [r7, #4]
 5328 00d6 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 5329 00da 042B     		cmp	r3, #4
 5330 00dc 08D1     		bne	.L259
 5331              		.loc 4 2765 0 is_stmt 0 discriminator 1
 5332 00de FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 5333 00e0 03F01F03 		and	r3, r3, #31
 5334 00e4 022B     		cmp	r3, #2
 5335 00e6 03D1     		bne	.L259
2766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
2768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
ARM GAS  /tmp/ccyb6dex.s 			page 167


2769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
2770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			'SYN+ACK' didn't arrive.  Step back to the previous state in which
2771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			a first incoming SYN is handled.  The SYN was counted already so
2772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			decrease it first. */
2773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eSYN_FIRST );
 5336              		.loc 4 2773 0 is_stmt 1
 5337 00e8 7868     		ldr	r0, [r7, #4]
 5338 00ea 0321     		movs	r1, #3
 5339 00ec FFF7FEFF 		bl	vTCPStateChange
 5340              	.L259:
2774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSI
 5341              		.loc 4 2776 0
 5342 00f0 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 5343 00f2 03F00103 		and	r3, r3, #1
 5344 00f6 002B     		cmp	r3, #0
 5345 00f8 22D0     		beq	.L260
 5346              		.loc 4 2776 0 is_stmt 0 discriminator 1
 5347 00fa 7B68     		ldr	r3, [r7, #4]
 5348 00fc 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 5349 0100 23F07F03 		bic	r3, r3, #127
 5350 0104 DBB2     		uxtb	r3, r3
 5351 0106 002B     		cmp	r3, #0
 5352 0108 1AD1     		bne	.L260
2777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* It's the first time a FIN has been received, remember its
2779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			sequence number. */
2780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 5353              		.loc 4 2780 0 is_stmt 1
 5354 010a 3A6A     		ldr	r2, [r7, #32]
 5355 010c 3B69     		ldr	r3, [r7, #16]
 5356 010e 1A44     		add	r2, r2, r3
 5357 0110 7B69     		ldr	r3, [r7, #20]
 5358 0112 5A61     		str	r2, [r3, #20]
2781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 5359              		.loc 4 2781 0
 5360 0114 7A68     		ldr	r2, [r7, #4]
 5361 0116 92F84130 		ldrb	r3, [r2, #65]
 5362 011a 43F08003 		orr	r3, r3, #128
 5363 011e 82F84130 		strb	r3, [r2, #65]
2782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Was peer the first one to send a FIN? */
2784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 5364              		.loc 4 2784 0
 5365 0122 7B68     		ldr	r3, [r7, #4]
 5366 0124 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 5367 0128 03F04003 		and	r3, r3, #64
 5368 012c DBB2     		uxtb	r3, r3
 5369 012e 002B     		cmp	r3, #0
 5370 0130 06D1     		bne	.L260
2785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* If so, don't send the-last-ACK. */
2787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 5371              		.loc 4 2787 0
 5372 0132 7A68     		ldr	r2, [r7, #4]
 5373 0134 92F84230 		ldrb	r3, [r2, #66]
ARM GAS  /tmp/ccyb6dex.s 			page 168


 5374 0138 43F00203 		orr	r3, r3, #2
 5375 013c 82F84230 		strb	r3, [r2, #66]
 5376              	.L260:
2788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		switch (pxSocket->u.xTCP.ucTCPState)
 5377              		.loc 4 2791 0
 5378 0140 7B68     		ldr	r3, [r7, #4]
 5379 0142 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 5380 0146 0B2B     		cmp	r3, #11
 5381 0148 5BD8     		bhi	.L274
 5382 014a 01A2     		adr	r2, .L263
 5383 014c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5384              		.p2align 2
 5385              	.L263:
 5386 0150 03020000 		.word	.L274+1
 5387 0154 03020000 		.word	.L274+1
 5388 0158 D3010000 		.word	.L265+1
 5389 015c 81010000 		.word	.L266+1
 5390 0160 D3010000 		.word	.L265+1
 5391 0164 E3010000 		.word	.L267+1
 5392 0168 F3010000 		.word	.L268+1
 5393 016c F3010000 		.word	.L268+1
 5394 0170 03020000 		.word	.L274+1
 5395 0174 03020000 		.word	.L274+1
 5396 0178 F3010000 		.word	.L268+1
 5397 017c 03020000 		.word	.L274+1
 5398              		.p2align 1
 5399              	.L266:
2792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eCLOSED:		/* (server + client) no connection state at all. */
2794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Nothing to do for a closed socket, except waiting for the
2795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			owner. */
2796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
2797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eTCP_LISTEN:	/* (server) waiting for a connection request from
2799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							any remote TCP and port. */
2800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The listen state was handled in xProcessReceivedTCPPacket().
2801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			Should not come here. */
2802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
2803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eSYN_FIRST:	/* (server) Just received a SYN request for a server
2805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							socket. */
2806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* A new socket has been created, reply with a SYN+ACK.
2808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				Acknowledge with seq+1 because the SYN is seen as pseudo data
2809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				with len = 1. */
2810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 5400              		.loc 4 2810 0
 5401 0180 7868     		ldr	r0, [r7, #4]
 5402 0182 B96A     		ldr	r1, [r7, #40]
 5403 0184 FFF7FEFF 		bl	prvSetSynAckOptions
 5404 0188 F861     		str	r0, [r7, #28]
2811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 5405              		.loc 4 2811 0
 5406 018a 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccyb6dex.s 			page 169


 5407 018c 1222     		movs	r2, #18
 5408 018e 5A73     		strb	r2, [r3, #13]
2812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength )
 5409              		.loc 4 2813 0
 5410 0190 FB69     		ldr	r3, [r7, #28]
 5411 0192 2833     		adds	r3, r3, #40
 5412 0194 FB62     		str	r3, [r7, #44]
2814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
2816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xOptionsLength is a multiple of 4.  The complete expression is:
2817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + xOptionsLength ) / 4 ) << 4 */
2818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 5413              		.loc 4 2818 0
 5414 0196 FB69     		ldr	r3, [r7, #28]
 5415 0198 DBB2     		uxtb	r3, r3
 5416 019a 1433     		adds	r3, r3, #20
 5417 019c DBB2     		uxtb	r3, r3
 5418 019e 9B00     		lsls	r3, r3, #2
 5419 01a0 DAB2     		uxtb	r2, r3
 5420 01a2 7B6A     		ldr	r3, [r7, #36]
 5421 01a4 1A73     		strb	r2, [r3, #12]
2819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 5422              		.loc 4 2819 0
 5423 01a6 7868     		ldr	r0, [r7, #4]
 5424 01a8 0421     		movs	r1, #4
 5425 01aa FFF7FEFF 		bl	vTCPStateChange
2820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceN
 5426              		.loc 4 2821 0
 5427 01ae 3B6A     		ldr	r3, [r7, #32]
 5428 01b0 5A1C     		adds	r2, r3, #1
 5429 01b2 7B69     		ldr	r3, [r7, #20]
 5430 01b4 9A61     		str	r2, [r3, #24]
 5431 01b6 7B69     		ldr	r3, [r7, #20]
 5432 01b8 9A69     		ldr	r2, [r3, #24]
 5433 01ba 7B69     		ldr	r3, [r7, #20]
 5434 01bc 1A61     		str	r2, [r3, #16]
2822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx
 5435              		.loc 4 2822 0
 5436 01be 7B69     		ldr	r3, [r7, #20]
 5437 01c0 DB69     		ldr	r3, [r3, #28]
 5438 01c2 5A1C     		adds	r2, r3, #1
 5439 01c4 7B69     		ldr	r3, [r7, #20]
 5440 01c6 5A63     		str	r2, [r3, #52]
 5441 01c8 7B69     		ldr	r3, [r7, #20]
 5442 01ca 5A6B     		ldr	r2, [r3, #52]
 5443 01cc 7B69     		ldr	r3, [r7, #20]
 5444 01ce 1A62     		str	r2, [r3, #32]
2823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
2824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 5445              		.loc 4 2824 0
 5446 01d0 18E0     		b	.L258
 5447              	.L265:
2825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
2827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							SYN, expect	a SYN+ACK and send a ACK now. */
ARM GAS  /tmp/ccyb6dex.s 			page 170


2828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Fall through */
2829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
2830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							expect a ACK and do nothing. */
2831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xSendLength = prvHandleSynReceived( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength
 5448              		.loc 4 2831 0
 5449 01d2 7868     		ldr	r0, [r7, #4]
 5450 01d4 3968     		ldr	r1, [r7]
 5451 01d6 3A69     		ldr	r2, [r7, #16]
 5452 01d8 FB69     		ldr	r3, [r7, #28]
 5453 01da FFF7FEFF 		bl	prvHandleSynReceived
 5454 01de F862     		str	r0, [r7, #44]
2832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 5455              		.loc 4 2832 0
 5456 01e0 10E0     		b	.L258
 5457              	.L267:
2833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eESTABLISHED:	/* (server + client) an open connection, data
2835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							received can be	delivered to the user. The normal
2836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							state for the data transfer phase of the connection
2837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							The closing states are also handled here with the
2838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							use of some flags. */
2839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength
 5458              		.loc 4 2839 0
 5459 01e2 7868     		ldr	r0, [r7, #4]
 5460 01e4 3968     		ldr	r1, [r7]
 5461 01e6 3A69     		ldr	r2, [r7, #16]
 5462 01e8 FB69     		ldr	r3, [r7, #28]
 5463 01ea FFF7FEFF 		bl	prvHandleEstablished
 5464 01ee F862     		str	r0, [r7, #44]
2840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 5465              		.loc 4 2840 0
 5466 01f0 08E0     		b	.L258
 5467              	.L268:
2841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eLAST_ACK:		/* (server + client) waiting for an acknowledgement
2843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							of the connection termination request previously
2844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							sent to the remote TCP (which includes an
2845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							acknowledgement of its connection termination
2846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							request). */
2847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Fall through */
2848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remo
2849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							 * or an acknowledgement of the connection termination request previously sent. */
2850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* Fall through */
2851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remo
2852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 5468              		.loc 4 2852 0
 5469 01f2 3B68     		ldr	r3, [r7]
 5470 01f4 1B68     		ldr	r3, [r3]
 5471 01f6 7868     		ldr	r0, [r7, #4]
 5472 01f8 1946     		mov	r1, r3
 5473 01fa FFF7FEFF 		bl	prvTCPHandleFin
 5474 01fe F862     		str	r0, [r7, #44]
2853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 5475              		.loc 4 2853 0
 5476 0200 00E0     		b	.L258
 5477              	.L274:
2854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
ARM GAS  /tmp/ccyb6dex.s 			page 171


2855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eCLOSE_WAIT:	/* (server + client) waiting for a connection
2856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							termination request from the local user.  Nothing to
2857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							do, connection is closed, wait for owner to close
2858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							this socket. */
2859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
2860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eCLOSING:		/* (server + client) waiting for a connection
2862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							termination request acknowledgement from the remote
2863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							TCP. */
2864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
2865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		case eTIME_WAIT:	/* (either server or client) waiting for enough time
2867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							to pass to be sure the remote TCP received the
2868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							acknowledgement of its connection termination
2869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							request. [According to RFC 793 a connection can stay
2870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							in TIME-WAIT for a maximum of four minutes known as
2871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							a MSL (maximum segment lifetime).]  These states are
2872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							implemented implicitly by settings flags like
2873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
2874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
2875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		default:
2876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			break;
 5478              		.loc 4 2876 0
 5479 0202 00BF     		nop
 5480              	.L258:
2877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xSendLength > 0 )
 5481              		.loc 4 2880 0
 5482 0204 FB6A     		ldr	r3, [r7, #44]
 5483 0206 002B     		cmp	r3, #0
 5484 0208 06DD     		ble	.L272
2881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 5485              		.loc 4 2882 0
 5486 020a 7868     		ldr	r0, [r7, #4]
 5487 020c 3968     		ldr	r1, [r7]
 5488 020e 3A69     		ldr	r2, [r7, #16]
 5489 0210 FB6A     		ldr	r3, [r7, #44]
 5490 0212 FFF7FEFF 		bl	prvSendData
 5491 0216 F862     		str	r0, [r7, #44]
 5492              	.L272:
2883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xSendLength;
 5493              		.loc 4 2885 0
 5494 0218 FB6A     		ldr	r3, [r7, #44]
2886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 5495              		.loc 4 2886 0
 5496 021a 1846     		mov	r0, r3
 5497 021c 3037     		adds	r7, r7, #48
 5498              	.LCFI187:
 5499              		.cfi_def_cfa_offset 8
 5500 021e BD46     		mov	sp, r7
 5501              	.LCFI188:
 5502              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccyb6dex.s 			page 172


 5503              		@ sp needed
 5504 0220 80BD     		pop	{r7, pc}
 5505              		.cfi_endproc
 5506              	.LFE53:
 5508 0222 00BF     		.section	.text.prvTCPSendReset,"ax",%progbits
 5509              		.align	2
 5510              		.thumb
 5511              		.thumb_func
 5513              	prvTCPSendReset:
 5514              	.LFB54:
2887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
2890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 5515              		.loc 4 2890 0
 5516              		.cfi_startproc
 5517              		@ args = 0, pretend = 0, frame = 16
 5518              		@ frame_needed = 1, uses_anonymous_args = 0
 5519 0000 80B5     		push	{r7, lr}
 5520              	.LCFI189:
 5521              		.cfi_def_cfa_offset 8
 5522              		.cfi_offset 7, -8
 5523              		.cfi_offset 14, -4
 5524 0002 84B0     		sub	sp, sp, #16
 5525              	.LCFI190:
 5526              		.cfi_def_cfa_offset 24
 5527 0004 00AF     		add	r7, sp, #0
 5528              	.LCFI191:
 5529              		.cfi_def_cfa_register 7
 5530 0006 7860     		str	r0, [r7, #4]
 5531              	.LBB16:
2891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
2892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 5532              		.loc 4 2893 0
 5533 0008 7B68     		ldr	r3, [r7, #4]
 5534 000a 9B69     		ldr	r3, [r3, #24]
 5535 000c FB60     		str	r3, [r7, #12]
2894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u 
 5536              		.loc 4 2894 0
 5537 000e 2823     		movs	r3, #40
 5538 0010 BB60     		str	r3, [r7, #8]
2895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 5539              		.loc 4 2896 0
 5540 0012 FB68     		ldr	r3, [r7, #12]
 5541 0014 1422     		movs	r2, #20
 5542 0016 83F82F20 		strb	r2, [r3, #47]
2897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 5543              		.loc 4 2897 0
 5544 001a FB68     		ldr	r3, [r7, #12]
 5545 001c 5022     		movs	r2, #80
 5546 001e 83F82E20 		strb	r2, [r3, #46]
2898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 5547              		.loc 4 2899 0
 5548 0022 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccyb6dex.s 			page 173


 5549 0024 0020     		movs	r0, #0
 5550 0026 7968     		ldr	r1, [r7, #4]
 5551 0028 1A46     		mov	r2, r3
 5552 002a 0023     		movs	r3, #0
 5553 002c FFF7FEFF 		bl	prvTCPReturnPacket
 5554              	.LBE16:
2900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */
2902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
2904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	( void ) pxNetworkBuffer;
2905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* The packet was not consumed. */
2907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return pdFAIL;
 5555              		.loc 4 2907 0
 5556 0030 0023     		movs	r3, #0
2908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 5557              		.loc 4 2908 0
 5558 0032 1846     		mov	r0, r3
 5559 0034 1037     		adds	r7, r7, #16
 5560              	.LCFI192:
 5561              		.cfi_def_cfa_offset 8
 5562 0036 BD46     		mov	sp, r7
 5563              	.LCFI193:
 5564              		.cfi_def_cfa_register 13
 5565              		@ sp needed
 5566 0038 80BD     		pop	{r7, pc}
 5567              		.cfi_endproc
 5568              	.LFE54:
 5570 003a 00BF     		.section	.text.prvSocketSetMSS,"ax",%progbits
 5571              		.align	2
 5572              		.thumb
 5573              		.thumb_func
 5575              	prvSocketSetMSS:
 5576              	.LFB55:
2909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
2912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 5577              		.loc 4 2912 0
 5578              		.cfi_startproc
 5579              		@ args = 0, pretend = 0, frame = 16
 5580              		@ frame_needed = 1, uses_anonymous_args = 0
 5581 0000 80B5     		push	{r7, lr}
 5582              	.LCFI194:
 5583              		.cfi_def_cfa_offset 8
 5584              		.cfi_offset 7, -8
 5585              		.cfi_offset 14, -4
 5586 0002 84B0     		sub	sp, sp, #16
 5587              	.LCFI195:
 5588              		.cfi_def_cfa_offset 24
 5589 0004 00AF     		add	r7, sp, #0
 5590              	.LCFI196:
 5591              		.cfi_def_cfa_register 7
 5592 0006 7860     		str	r0, [r7, #4]
2913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulMSS = ipconfigTCP_MSS;
 5593              		.loc 4 2913 0
ARM GAS  /tmp/ccyb6dex.s 			page 174


 5594 0008 40F2B453 		movw	r3, #1460
 5595 000c FB60     		str	r3, [r7, #12]
2914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAd
 5596              		.loc 4 2915 0
 5597 000e 7B68     		ldr	r3, [r7, #4]
 5598 0010 9B6B     		ldr	r3, [r3, #56]
 5599 0012 1A06     		lsls	r2, r3, #24
 5600 0014 7B68     		ldr	r3, [r7, #4]
 5601 0016 9B6B     		ldr	r3, [r3, #56]
 5602 0018 03F47F43 		and	r3, r3, #65280
 5603 001c 1B02     		lsls	r3, r3, #8
 5604 001e 1A43     		orrs	r2, r2, r3
 5605 0020 7B68     		ldr	r3, [r7, #4]
 5606 0022 9B6B     		ldr	r3, [r3, #56]
 5607 0024 03F47F03 		and	r3, r3, #16711680
 5608 0028 1B0A     		lsrs	r3, r3, #8
 5609 002a 1A43     		orrs	r2, r2, r3
 5610 002c 7B68     		ldr	r3, [r7, #4]
 5611 002e 9B6B     		ldr	r3, [r3, #56]
 5612 0030 1B0E     		lsrs	r3, r3, #24
 5613 0032 1A43     		orrs	r2, r2, r3
 5614 0034 0D4B     		ldr	r3, .L279
 5615 0036 5B69     		ldr	r3, [r3, #20]
 5616 0038 5A40     		eors	r2, r2, r3
 5617 003a 0D4B     		ldr	r3, .L279+4
 5618 003c 5B68     		ldr	r3, [r3, #4]
 5619 003e 1340     		ands	r3, r3, r2
 5620 0040 002B     		cmp	r3, #0
 5621 0042 05D0     		beq	.L278
2916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Data for this peer will pass through a router, and maybe through
2918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		the internet.  Limit the MSS to 1400 bytes or less. */
2919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
 5622              		.loc 4 2919 0
 5623 0044 4FF4AF60 		mov	r0, #1400
 5624 0048 F968     		ldr	r1, [r7, #12]
 5625 004a FFF7FEFF 		bl	FreeRTOS_min_uint32
 5626 004e F860     		str	r0, [r7, #12]
 5627              	.L278:
2920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRe
2923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 5628              		.loc 4 2924 0
 5629 0050 FB68     		ldr	r3, [r7, #12]
 5630 0052 9AB2     		uxth	r2, r3
 5631 0054 7B68     		ldr	r3, [r7, #4]
 5632 0056 A3F84A20 		strh	r2, [r3, #74]	@ movhi
 5633 005a 7B68     		ldr	r3, [r7, #4]
 5634 005c B3F84A20 		ldrh	r2, [r3, #74]
 5635 0060 7B68     		ldr	r3, [r7, #4]
 5636 0062 A3F84C20 		strh	r2, [r3, #76]	@ movhi
2925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 5637              		.loc 4 2925 0
 5638 0066 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccyb6dex.s 			page 175


 5639              	.LCFI197:
 5640              		.cfi_def_cfa_offset 8
 5641 0068 BD46     		mov	sp, r7
 5642              	.LCFI198:
 5643              		.cfi_def_cfa_register 13
 5644              		@ sp needed
 5645 006a 80BD     		pop	{r7, pc}
 5646              	.L280:
 5647              		.align	2
 5648              	.L279:
 5649 006c 00000000 		.word	xDefaultPartUDPPacketHeader
 5650 0070 00000000 		.word	xNetworkAddressing
 5651              		.cfi_endproc
 5652              	.LFE55:
 5654              		.section	.text.xProcessReceivedTCPPacket,"ax",%progbits
 5655              		.align	2
 5656              		.global	xProcessReceivedTCPPacket
 5657              		.thumb
 5658              		.thumb_func
 5660              	xProcessReceivedTCPPacket:
 5661              	.LFB56:
2926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
2929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *	FreeRTOS_TCP_IP has only 2 public functions, this is the second one:
2930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *	xProcessReceivedTCPPacket()
2931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvTCPHandleState()
2932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *			prvTCPPrepareSend()
2933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *				prvTCPReturnPacket()
2934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *				xNetworkInterfaceOutput()	// Sends data to the NIC
2935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *		prvTCPSendRepeated()
2936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *			prvTCPReturnPacket()		// Prepare for returning
2937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  *			xNetworkInterfaceOutput()	// Sends data to the NIC
2938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** */
2939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
2940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 5662              		.loc 4 2940 0
 5663              		.cfi_startproc
 5664              		@ args = 0, pretend = 0, frame = 48
 5665              		@ frame_needed = 1, uses_anonymous_args = 0
 5666 0000 80B5     		push	{r7, lr}
 5667              	.LCFI199:
 5668              		.cfi_def_cfa_offset 8
 5669              		.cfi_offset 7, -8
 5670              		.cfi_offset 14, -4
 5671 0002 8CB0     		sub	sp, sp, #48
 5672              	.LCFI200:
 5673              		.cfi_def_cfa_offset 56
 5674 0004 00AF     		add	r7, sp, #0
 5675              	.LCFI201:
 5676              		.cfi_def_cfa_register 7
 5677 0006 7860     		str	r0, [r7, #4]
2941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxSocket;
2942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 5678              		.loc 4 2942 0
 5679 0008 7B68     		ldr	r3, [r7, #4]
 5680 000a 9B69     		ldr	r3, [r3, #24]
ARM GAS  /tmp/ccyb6dex.s 			page 176


 5681 000c 7B62     		str	r3, [r7, #36]
2943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint16_t ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 5682              		.loc 4 2943 0
 5683 000e 7B6A     		ldr	r3, [r7, #36]
 5684 0010 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 5685 0014 7B84     		strh	r3, [r7, #34]	@ movhi
2944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 5686              		.loc 4 2944 0
 5687 0016 7B6A     		ldr	r3, [r7, #36]
 5688 0018 D3F81E30 		ldr	r3, [r3, #30]	@ unaligned
 5689 001c 1A06     		lsls	r2, r3, #24
 5690 001e 7B6A     		ldr	r3, [r7, #36]
 5691 0020 D3F81E30 		ldr	r3, [r3, #30]	@ unaligned
 5692 0024 03F47F43 		and	r3, r3, #65280
 5693 0028 1B02     		lsls	r3, r3, #8
 5694 002a 1A43     		orrs	r2, r2, r3
 5695 002c 7B6A     		ldr	r3, [r7, #36]
 5696 002e D3F81E30 		ldr	r3, [r3, #30]	@ unaligned
 5697 0032 03F47F03 		and	r3, r3, #16711680
 5698 0036 1B0A     		lsrs	r3, r3, #8
 5699 0038 1A43     		orrs	r2, r2, r3
 5700 003a 7B6A     		ldr	r3, [r7, #36]
 5701 003c D3F81E30 		ldr	r3, [r3, #30]	@ unaligned
 5702 0040 1B0E     		lsrs	r3, r3, #24
 5703 0042 1343     		orrs	r3, r3, r2
 5704 0044 FB61     		str	r3, [r7, #28]
2945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 5705              		.loc 4 2945 0
 5706 0046 7B6A     		ldr	r3, [r7, #36]
 5707 0048 9B8C     		ldrh	r3, [r3, #36]	@ unaligned
 5708 004a 9BB2     		uxth	r3, r3
 5709 004c 1B02     		lsls	r3, r3, #8
 5710 004e 9AB2     		uxth	r2, r3
 5711 0050 7B6A     		ldr	r3, [r7, #36]
 5712 0052 9B8C     		ldrh	r3, [r3, #36]	@ unaligned
 5713 0054 9BB2     		uxth	r3, r3
 5714 0056 1B0A     		lsrs	r3, r3, #8
 5715 0058 9BB2     		uxth	r3, r3
 5716 005a 9BB2     		uxth	r3, r3
 5717 005c 1343     		orrs	r3, r3, r2
 5718 005e 9BB2     		uxth	r3, r3
 5719 0060 7B83     		strh	r3, [r7, #26]	@ movhi
2946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 5720              		.loc 4 2946 0
 5721 0062 7B6A     		ldr	r3, [r7, #36]
 5722 0064 D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 5723 0068 1A06     		lsls	r2, r3, #24
 5724 006a 7B6A     		ldr	r3, [r7, #36]
 5725 006c D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 5726 0070 03F47F43 		and	r3, r3, #65280
 5727 0074 1B02     		lsls	r3, r3, #8
 5728 0076 1A43     		orrs	r2, r2, r3
 5729 0078 7B6A     		ldr	r3, [r7, #36]
 5730 007a D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 5731 007e 03F47F03 		and	r3, r3, #16711680
 5732 0082 1B0A     		lsrs	r3, r3, #8
 5733 0084 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/ccyb6dex.s 			page 177


 5734 0086 7B6A     		ldr	r3, [r7, #36]
 5735 0088 D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 5736 008c 1B0E     		lsrs	r3, r3, #24
 5737 008e 1343     		orrs	r3, r3, r2
 5738 0090 7B61     		str	r3, [r7, #20]
2947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** uint16_t xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 5739              		.loc 4 2947 0
 5740 0092 7B6A     		ldr	r3, [r7, #36]
 5741 0094 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 5742 0096 9BB2     		uxth	r3, r3
 5743 0098 1B02     		lsls	r3, r3, #8
 5744 009a 9AB2     		uxth	r2, r3
 5745 009c 7B6A     		ldr	r3, [r7, #36]
 5746 009e 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 5747 00a0 9BB2     		uxth	r3, r3
 5748 00a2 1B0A     		lsrs	r3, r3, #8
 5749 00a4 9BB2     		uxth	r3, r3
 5750 00a6 9BB2     		uxth	r3, r3
 5751 00a8 1343     		orrs	r3, r3, r2
 5752 00aa 9BB2     		uxth	r3, r3
 5753 00ac 7B82     		strh	r3, [r7, #18]	@ movhi
2948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xResult = pdPASS;
 5754              		.loc 4 2948 0
 5755 00ae 0123     		movs	r3, #1
 5756 00b0 BB62     		str	r3, [r7, #40]
2949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Find the destination socket, and if not found: return a socket listing to
2951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	the destination PORT. */
2952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePo
 5757              		.loc 4 2952 0
 5758 00b2 7A8B     		ldrh	r2, [r7, #26]
 5759 00b4 7B8A     		ldrh	r3, [r7, #18]
 5760 00b6 F869     		ldr	r0, [r7, #28]
 5761 00b8 1146     		mov	r1, r2
 5762 00ba 7A69     		ldr	r2, [r7, #20]
 5763 00bc FFF7FEFF 		bl	pxTCPSocketLookup
 5764 00c0 F862     		str	r0, [r7, #44]
2953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) 
 5765              		.loc 4 2954 0
 5766 00c2 FB6A     		ldr	r3, [r7, #44]
 5767 00c4 002B     		cmp	r3, #0
 5768 00c6 08D0     		beq	.L282
 5769              		.loc 4 2954 0 is_stmt 0 discriminator 1
 5770 00c8 FB6A     		ldr	r3, [r7, #44]
 5771 00ca 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 5772 00ce 1846     		mov	r0, r3
 5773 00d0 FFF7FEFF 		bl	prvTCPSocketIsActive
 5774 00d4 0346     		mov	r3, r0
 5775 00d6 002B     		cmp	r3, #0
 5776 00d8 10D1     		bne	.L283
 5777              	.L282:
2955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* A TCP messages is received but either there is no socket with the
2957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		given port number or the there is a socket, but it is in one of these
2958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
2959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		eTIME_WAIT. */
ARM GAS  /tmp/ccyb6dex.s 			page 178


2960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%lxip:%d)\n", xLocalPort, ulRemoteIP,
2962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Send a RST to all packets that can not be handled.  As a result
2964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		the other party will get a ECONN error.  There are two exceptions:
2965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		1) A packet that already has the RST flag set.
2966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		2) A packet that only has the ACK flag set.
2967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		A packet with only the ACK flag set might be the last ACK in
2968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	 	a three-way hand-shake that closes a connection. */
2969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 5778              		.loc 4 2969 0 is_stmt 1
 5779 00da 7B8C     		ldrh	r3, [r7, #34]
 5780 00dc 03F01F03 		and	r3, r3, #31
 5781 00e0 102B     		cmp	r3, #16
 5782 00e2 08D0     		beq	.L284
2970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 5783              		.loc 4 2970 0 discriminator 1
 5784 00e4 7B8C     		ldrh	r3, [r7, #34]
 5785 00e6 03F00403 		and	r3, r3, #4
2969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 5786              		.loc 4 2969 0 discriminator 1
 5787 00ea 002B     		cmp	r3, #0
 5788 00ec 03D1     		bne	.L284
2971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			prvTCPSendReset( pxNetworkBuffer );
 5789              		.loc 4 2972 0
 5790 00ee 7B68     		ldr	r3, [r7, #4]
 5791 00f0 1846     		mov	r0, r3
 5792 00f2 FFF7FEFF 		bl	prvTCPSendReset
 5793              	.L284:
2973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
2974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The packet can't be handled. */
2976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xResult = pdFAIL;
 5794              		.loc 4 2976 0
 5795 00f6 0023     		movs	r3, #0
 5796 00f8 BB62     		str	r3, [r7, #40]
 5797 00fa 4EE0     		b	.L285
 5798              	.L283:
2977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
2978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
2979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
2980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucRepCount = 0u;
 5799              		.loc 4 2980 0
 5800 00fc FB6A     		ldr	r3, [r7, #44]
 5801 00fe 0022     		movs	r2, #0
 5802 0100 83F85220 		strb	r2, [r3, #82]
2981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 5803              		.loc 4 2982 0
 5804 0104 FB6A     		ldr	r3, [r7, #44]
 5805 0106 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 5806 010a 012B     		cmp	r3, #1
 5807 010c 1CD1     		bne	.L286
2983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
2984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* The matching socket is in a listening state.  Test if the peer
2985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			has set the SYN flag. */
ARM GAS  /tmp/ccyb6dex.s 			page 179


2986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 5808              		.loc 4 2986 0
 5809 010e 7B8C     		ldrh	r3, [r7, #34]
 5810 0110 03F01F03 		and	r3, r3, #31
 5811 0114 022B     		cmp	r3, #2
 5812 0116 0BD0     		beq	.L287
2987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
2988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* What happens: maybe after a reboot, a client doesn't know the
2989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				connection had gone.  Send a RST in order to get a new connect
2990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				request. */
2991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#if( ipconfigHAS_DEBUG_PRINTF == 1 )
2992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
2993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
2994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
2995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
2996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				#endif /* ipconfigHAS_DEBUG_PRINTF */
2997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
2998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 5813              		.loc 4 2998 0
 5814 0118 7B8C     		ldrh	r3, [r7, #34]
 5815 011a 03F00403 		and	r3, r3, #4
 5816 011e 002B     		cmp	r3, #0
 5817 0120 03D1     		bne	.L288
2999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
3000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					prvTCPSendReset( pxNetworkBuffer );
 5818              		.loc 4 3000 0
 5819 0122 7B68     		ldr	r3, [r7, #4]
 5820 0124 1846     		mov	r0, r3
 5821 0126 FFF7FEFF 		bl	prvTCPSendReset
 5822              	.L288:
3001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
3002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xResult = pdFAIL;
 5823              		.loc 4 3002 0
 5824 012a 0023     		movs	r3, #0
 5825 012c BB62     		str	r3, [r7, #40]
 5826 012e 34E0     		b	.L285
 5827              	.L287:
3003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
3005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
3006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* prvHandleListen() will either return a newly created socket
3007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				(if bReuseSocket is false), otherwise it returns the current
3008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				socket which will later get connected. */
3009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 5828              		.loc 4 3009 0
 5829 0130 7B68     		ldr	r3, [r7, #4]
 5830 0132 F86A     		ldr	r0, [r7, #44]
 5831 0134 1946     		mov	r1, r3
 5832 0136 FFF7FEFF 		bl	prvHandleListen
 5833 013a F862     		str	r0, [r7, #44]
3010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				if( pxSocket == NULL )
 5834              		.loc 4 3011 0
 5835 013c FB6A     		ldr	r3, [r7, #44]
 5836 013e 002B     		cmp	r3, #0
 5837 0140 2BD1     		bne	.L285
3012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				{
ARM GAS  /tmp/ccyb6dex.s 			page 180


3013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 					xResult = pdFAIL;
 5838              		.loc 4 3013 0
 5839 0142 0023     		movs	r3, #0
 5840 0144 BB62     		str	r3, [r7, #40]
 5841 0146 28E0     		b	.L285
 5842              	.L286:
3014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				}
3015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
3017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
3018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* This is not a socket in listening mode. Check for the RST
3020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			flag. */
3021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 5843              		.loc 4 3021 0
 5844 0148 7B8C     		ldrh	r3, [r7, #34]
 5845 014a 03F00403 		and	r3, r3, #4
 5846 014e 002B     		cmp	r3, #0
 5847 0150 06D0     		beq	.L290
3022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
3023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* The target socket is not in a listening state, any RST packet
3024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				will cause the socket to be closed. */
3025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, x
3026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eCLOSED );
 5848              		.loc 4 3026 0
 5849 0152 F86A     		ldr	r0, [r7, #44]
 5850 0154 0021     		movs	r1, #0
 5851 0156 FFF7FEFF 		bl	vTCPStateChange
3027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* The packet cannot be handled. */
3029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xResult = pdFAIL;
 5852              		.loc 4 3029 0
 5853 015a 0023     		movs	r3, #0
 5854 015c BB62     		str	r3, [r7, #40]
 5855 015e 1CE0     		b	.L285
 5856              	.L290:
3030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState
 5857              		.loc 4 3031 0
 5858 0160 7B8C     		ldrh	r3, [r7, #34]
 5859 0162 03F01F03 		and	r3, r3, #31
 5860 0166 022B     		cmp	r3, #2
 5861 0168 07D1     		bne	.L291
 5862              		.loc 4 3031 0 is_stmt 0 discriminator 1
 5863 016a FB6A     		ldr	r3, [r7, #44]
 5864 016c 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 5865 0170 042B     		cmp	r3, #4
 5866 0172 02D9     		bls	.L291
3032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
3033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* SYN flag while this socket is already connected. */
3034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );
3035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* The packet cannot be handled. */
3037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xResult = pdFAIL;
 5867              		.loc 4 3037 0 is_stmt 1
 5868 0174 0023     		movs	r3, #0
 5869 0176 BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/ccyb6dex.s 			page 181


 5870 0178 0FE0     		b	.L285
 5871              	.L291:
 5872              	.LBB17:
3038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else
3040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
3041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* Update the copy of the TCP header only (skipping eth and IP
3042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				headers).  It might be used later on, whenever data must be sent
3043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				to the peer. */
3044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				const BaseType_t lOffset = ( BaseType_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER );
 5873              		.loc 4 3044 0
 5874 017a 2223     		movs	r3, #34
 5875 017c FB60     		str	r3, [r7, #12]
3045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer +
 5876              		.loc 4 3045 0
 5877 017e FB68     		ldr	r3, [r7, #12]
 5878 0180 8033     		adds	r3, r3, #128
 5879 0182 FA6A     		ldr	r2, [r7, #44]
 5880 0184 1344     		add	r3, r3, r2
 5881 0186 991C     		adds	r1, r3, #2
 5882 0188 7B68     		ldr	r3, [r7, #4]
 5883 018a 9A69     		ldr	r2, [r3, #24]
 5884 018c FB68     		ldr	r3, [r7, #12]
 5885 018e 1344     		add	r3, r3, r2
 5886 0190 0846     		mov	r0, r1
 5887 0192 1946     		mov	r1, r3
 5888 0194 1422     		movs	r2, #20
 5889 0196 FFF7FEFF 		bl	memcpy
 5890              	.L285:
 5891              	.LBE17:
3046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( xResult != pdFAIL )
 5892              		.loc 4 3050 0
 5893 019a BB6A     		ldr	r3, [r7, #40]
 5894 019c 002B     		cmp	r3, #0
 5895 019e 46D0     		beq	.L292
3051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Touch the alive timers because we received a message	for this
3053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		socket. */
3054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPTouchSocket( pxSocket );
 5896              		.loc 4 3054 0
 5897 01a0 F86A     		ldr	r0, [r7, #44]
 5898 01a2 FFF7FEFF 		bl	prvTCPTouchSocket
3055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Parse the TCP option(s), if present. */
3057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
3058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		then we MUST assume an MSS size of 536 bytes for backward compatibility. */
3059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
3061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		the number 5 (words) in the higher niblle of the TCP-offset byte. */
3062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH
 5899              		.loc 4 3062 0
 5900 01a6 7B6A     		ldr	r3, [r7, #36]
 5901 01a8 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
ARM GAS  /tmp/ccyb6dex.s 			page 182


 5902 01ac 03F0F003 		and	r3, r3, #240
 5903 01b0 502B     		cmp	r3, #80
 5904 01b2 04D9     		bls	.L293
3063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			prvCheckOptions( pxSocket, pxNetworkBuffer );
 5905              		.loc 4 3064 0
 5906 01b4 7B68     		ldr	r3, [r7, #4]
 5907 01b6 F86A     		ldr	r0, [r7, #44]
 5908 01b8 1946     		mov	r1, r3
 5909 01ba FFF7FEFF 		bl	prvCheckOptions
 5910              	.L293:
3065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_TCP_WIN == 1 )
3069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 5911              		.loc 4 3070 0
 5912 01be 7B6A     		ldr	r3, [r7, #36]
 5913 01c0 1B8E     		ldrh	r3, [r3, #48]	@ unaligned
 5914 01c2 9BB2     		uxth	r3, r3
 5915 01c4 1B02     		lsls	r3, r3, #8
 5916 01c6 9AB2     		uxth	r2, r3
 5917 01c8 7B6A     		ldr	r3, [r7, #36]
 5918 01ca 1B8E     		ldrh	r3, [r3, #48]	@ unaligned
 5919 01cc 9BB2     		uxth	r3, r3
 5920 01ce 1B0A     		lsrs	r3, r3, #8
 5921 01d0 9BB2     		uxth	r3, r3
 5922 01d2 9BB2     		uxth	r3, r3
 5923 01d4 1343     		orrs	r3, r3, r2
 5924 01d6 9BB2     		uxth	r3, r3
 5925 01d8 9BB2     		uxth	r3, r3
 5926 01da 1A46     		mov	r2, r3
 5927 01dc FB6A     		ldr	r3, [r7, #44]
 5928 01de C3F8CC20 		str	r2, [r3, #204]
3071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulWindowSize =
3072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 5929              		.loc 4 3072 0
 5930 01e2 FB6A     		ldr	r3, [r7, #44]
 5931 01e4 D3F8CC30 		ldr	r3, [r3, #204]
 5932 01e8 FA6A     		ldr	r2, [r7, #44]
 5933 01ea 92F8CA20 		ldrb	r2, [r2, #202]	@ zero_extendqisi2
 5934 01ee 03FA02F2 		lsl	r2, r3, r2
3071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulWindowSize =
 5935              		.loc 4 3071 0
 5936 01f2 FB6A     		ldr	r3, [r7, #44]
 5937 01f4 C3F8CC20 		str	r2, [r3, #204]
3073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		#endif
3075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* In prvTCPHandleState() the incoming messages will be handled
3077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		depending on the current state of the connection. */
3078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 5938              		.loc 4 3078 0
 5939 01f8 3B1D     		adds	r3, r7, #4
 5940 01fa F86A     		ldr	r0, [r7, #44]
 5941 01fc 1946     		mov	r1, r3
ARM GAS  /tmp/ccyb6dex.s 			page 183


 5942 01fe FFF7FEFF 		bl	prvTCPHandleState
 5943 0202 0346     		mov	r3, r0
 5944 0204 002B     		cmp	r3, #0
 5945 0206 04DD     		ble	.L294
3079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* prvTCPHandleState() has sent a message, see if there are more to
3081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			be transmitted. */
3082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#if( ipconfigUSE_TCP_WIN == 1 )
3083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
3084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 5946              		.loc 4 3084 0
 5947 0208 3B1D     		adds	r3, r7, #4
 5948 020a F86A     		ldr	r0, [r7, #44]
 5949 020c 1946     		mov	r1, r3
 5950 020e FFF7FEFF 		bl	prvTCPSendRepeated
 5951              	.L294:
3085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			#endif /* ipconfigUSE_TCP_WIN */
3087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxNetworkBuffer != NULL )
 5952              		.loc 4 3089 0
 5953 0212 7B68     		ldr	r3, [r7, #4]
 5954 0214 002B     		cmp	r3, #0
 5955 0216 05D0     		beq	.L295
3090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			/* We must check if the buffer is unequal to NULL, because the
3092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			socket might keep a reference to it in case a delayed ACK must be
3093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			sent. */
3094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 5956              		.loc 4 3094 0
 5957 0218 7B68     		ldr	r3, [r7, #4]
 5958 021a 1846     		mov	r0, r3
 5959 021c FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
3095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxNetworkBuffer = NULL;
 5960              		.loc 4 3095 0
 5961 0220 0023     		movs	r3, #0
 5962 0222 7B60     		str	r3, [r7, #4]
 5963              	.L295:
3096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* And finally, calculate when this socket wants to be woken up. */
3099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPNextTimeout ( pxSocket );
 5964              		.loc 4 3099 0
 5965 0224 F86A     		ldr	r0, [r7, #44]
 5966 0226 FFF7FEFF 		bl	prvTCPNextTimeout
3100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Return pdPASS to tell that the network buffer is 'consumed'. */
3101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		xResult = pdPASS;
 5967              		.loc 4 3101 0
 5968 022a 0123     		movs	r3, #1
 5969 022c BB62     		str	r3, [r7, #40]
 5970              	.L292:
3102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* pdPASS being returned means the buffer has been consumed. */
3105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xResult;
 5971              		.loc 4 3105 0
ARM GAS  /tmp/ccyb6dex.s 			page 184


 5972 022e BB6A     		ldr	r3, [r7, #40]
3106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 5973              		.loc 4 3106 0
 5974 0230 1846     		mov	r0, r3
 5975 0232 3037     		adds	r7, r7, #48
 5976              	.LCFI202:
 5977              		.cfi_def_cfa_offset 8
 5978 0234 BD46     		mov	sp, r7
 5979              	.LCFI203:
 5980              		.cfi_def_cfa_register 13
 5981              		@ sp needed
 5982 0236 80BD     		pop	{r7, pc}
 5983              		.cfi_endproc
 5984              	.LFE56:
 5986              		.section	.rodata
 5987 00a1 000000   		.align	2
 5988              	.LC13:
 5989 00a4 00       		.ascii	"\000"
 5990 00a5 000000   		.align	2
 5991              	.LC14:
 5992 00a8 72656E00 		.ascii	"ren\000"
 5993              		.align	2
 5994              	.LC15:
 5995 00ac 43686563 		.ascii	"Check: Socket %u already has %u / %u child%s\012\000"
 5995      6B3A2053 
 5995      6F636B65 
 5995      74202575 
 5995      20616C72 
 5996              		.section	.text.prvHandleListen,"ax",%progbits
 5997              		.align	2
 5998              		.thumb
 5999              		.thumb_func
 6001              	prvHandleListen:
 6002              	.LFB57:
3107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
3108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *
3110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 6003              		.loc 4 3110 0
 6004              		.cfi_startproc
 6005              		@ args = 0, pretend = 0, frame = 24
 6006              		@ frame_needed = 1, uses_anonymous_args = 0
 6007 0000 90B5     		push	{r4, r7, lr}
 6008              	.LCFI204:
 6009              		.cfi_def_cfa_offset 12
 6010              		.cfi_offset 4, -12
 6011              		.cfi_offset 7, -8
 6012              		.cfi_offset 14, -4
 6013 0002 89B0     		sub	sp, sp, #36
 6014              	.LCFI205:
 6015              		.cfi_def_cfa_offset 48
 6016 0004 02AF     		add	r7, sp, #8
 6017              	.LCFI206:
 6018              		.cfi_def_cfa 7, 40
 6019 0006 7860     		str	r0, [r7, #4]
 6020 0008 3960     		str	r1, [r7]
3111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
ARM GAS  /tmp/ccyb6dex.s 			page 185


 6021              		.loc 4 3111 0
 6022 000a 3B68     		ldr	r3, [r7]
 6023 000c 9B69     		ldr	r3, [r3, #24]
 6024 000e 3B61     		str	r3, [r7, #16]
3112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxReturn;
3113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* A pure SYN (without ACK) has come in, create a new socket to answer
3115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	it. */
3116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 6025              		.loc 4 3116 0
 6026 0010 7B68     		ldr	r3, [r7, #4]
 6027 0012 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6028 0016 03F00803 		and	r3, r3, #8
 6029 001a DBB2     		uxtb	r3, r3
 6030 001c 002B     		cmp	r3, #0
 6031 001e 0CD0     		beq	.L298
3117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The flag bReuseSocket indicates that the same instance of the
3119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		listening socket should be used for the connection. */
3120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxReturn = pxSocket;
 6032              		.loc 4 3120 0
 6033 0020 7B68     		ldr	r3, [r7, #4]
 6034 0022 7B61     		str	r3, [r7, #20]
3121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 6035              		.loc 4 3121 0
 6036 0024 7A68     		ldr	r2, [r7, #4]
 6037 0026 92F84030 		ldrb	r3, [r2, #64]
 6038 002a 43F00403 		orr	r3, r3, #4
 6039 002e 82F84030 		strb	r3, [r2, #64]
3122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 6040              		.loc 4 3122 0
 6041 0032 7B68     		ldr	r3, [r7, #4]
 6042 0034 7A68     		ldr	r2, [r7, #4]
 6043 0036 5A65     		str	r2, [r3, #84]
 6044 0038 3FE0     		b	.L299
 6045              	.L298:
3123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	else
3125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* The socket does not have the bReuseSocket flag set meaning create a
3127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		new socket when a connection comes in. */
3128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxReturn = NULL;
 6046              		.loc 4 3128 0
 6047 003a 0023     		movs	r3, #0
 6048 003c 7B61     		str	r3, [r7, #20]
3129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 6049              		.loc 4 3130 0
 6050 003e 7B68     		ldr	r3, [r7, #4]
 6051 0040 B3F84E20 		ldrh	r2, [r3, #78]
 6052 0044 7B68     		ldr	r3, [r7, #4]
 6053 0046 B3F85030 		ldrh	r3, [r3, #80]
 6054 004a 9A42     		cmp	r2, r3
 6055 004c 1BD3     		bcc	.L300
3131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 6056              		.loc 4 3132 0
ARM GAS  /tmp/ccyb6dex.s 			page 186


 6057 004e 7B68     		ldr	r3, [r7, #4]
 6058 0050 9B8C     		ldrh	r3, [r3, #36]
 6059 0052 1946     		mov	r1, r3
 6060 0054 7B68     		ldr	r3, [r7, #4]
 6061 0056 B3F84E30 		ldrh	r3, [r3, #78]
 6062 005a 1A46     		mov	r2, r3
 6063 005c 7B68     		ldr	r3, [r7, #4]
 6064 005e B3F85030 		ldrh	r3, [r3, #80]
 6065 0062 1C46     		mov	r4, r3
 6066 0064 7B68     		ldr	r3, [r7, #4]
 6067 0066 B3F84E30 		ldrh	r3, [r3, #78]
 6068 006a 012B     		cmp	r3, #1
 6069 006c 01D1     		bne	.L301
 6070              		.loc 4 3132 0 is_stmt 0 discriminator 1
 6071 006e 484B     		ldr	r3, .L307
 6072 0070 00E0     		b	.L302
 6073              	.L301:
 6074              		.loc 4 3132 0 discriminator 2
 6075 0072 484B     		ldr	r3, .L307+4
 6076              	.L302:
 6077              		.loc 4 3132 0 discriminator 4
 6078 0074 0093     		str	r3, [sp]
 6079 0076 4848     		ldr	r0, .L307+8
 6080 0078 2346     		mov	r3, r4
 6081 007a FFF7FEFF 		bl	lUDPLoggingPrintf
3133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->usLocalPort,
3134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usChildCount,
3135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usBacklog,
3136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usChildCount == 1 ? "" : "ren" ) );
3137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			prvTCPSendReset( pxNetworkBuffer );
 6082              		.loc 4 3137 0 is_stmt 1 discriminator 4
 6083 007e 3868     		ldr	r0, [r7]
 6084 0080 FFF7FEFF 		bl	prvTCPSendReset
 6085 0084 19E0     		b	.L299
 6086              	.L300:
 6087              	.LBB18:
3138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		else
3140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			FreeRTOS_Socket_t *pxNewSocket = (FreeRTOS_Socket_t *)
 6088              		.loc 4 3141 0
 6089 0086 0220     		movs	r0, #2
 6090 0088 0121     		movs	r1, #1
 6091 008a 0622     		movs	r2, #6
 6092 008c FFF7FEFF 		bl	FreeRTOS_socket
 6093 0090 F860     		str	r0, [r7, #12]
3142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
3143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 6094              		.loc 4 3144 0
 6095 0092 FB68     		ldr	r3, [r7, #12]
 6096 0094 002B     		cmp	r3, #0
 6097 0096 03D0     		beq	.L303
 6098              		.loc 4 3144 0 is_stmt 0 discriminator 1
 6099 0098 FB68     		ldr	r3, [r7, #12]
 6100 009a B3F1FF3F 		cmp	r3, #-1
 6101 009e 03D1     		bne	.L304
ARM GAS  /tmp/ccyb6dex.s 			page 187


 6102              	.L303:
3145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
3146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
3147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				prvTCPSendReset( pxNetworkBuffer );
 6103              		.loc 4 3147 0 is_stmt 1
 6104 00a0 3868     		ldr	r0, [r7]
 6105 00a2 FFF7FEFF 		bl	prvTCPSendReset
 6106 00a6 08E0     		b	.L299
 6107              	.L304:
3148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 6108              		.loc 4 3149 0
 6109 00a8 F868     		ldr	r0, [r7, #12]
 6110 00aa 7968     		ldr	r1, [r7, #4]
 6111 00ac FFF7FEFF 		bl	prvTCPSocketCopy
 6112 00b0 0346     		mov	r3, r0
 6113 00b2 002B     		cmp	r3, #0
 6114 00b4 01D0     		beq	.L299
3150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
3151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				/* The socket will be connected immediately, no time for the
3152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				owner to setsockopt's, therefore copy properties of the server
3153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				socket to the new socket.  Only the binding might fail (due to
3154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				lack of resources). */
3155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxReturn = pxNewSocket;
 6115              		.loc 4 3155 0
 6116 00b6 FB68     		ldr	r3, [r7, #12]
 6117 00b8 7B61     		str	r3, [r7, #20]
 6118              	.L299:
 6119              	.LBE18:
3156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( pxReturn != NULL )
 6120              		.loc 4 3160 0
 6121 00ba 7B69     		ldr	r3, [r7, #20]
 6122 00bc 002B     		cmp	r3, #0
 6123 00be 61D0     		beq	.L305
3161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 6124              		.loc 4 3162 0
 6125 00c0 3B69     		ldr	r3, [r7, #16]
 6126 00c2 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 6127 00c4 9BB2     		uxth	r3, r3
 6128 00c6 1B02     		lsls	r3, r3, #8
 6129 00c8 9AB2     		uxth	r2, r3
 6130 00ca 3B69     		ldr	r3, [r7, #16]
 6131 00cc 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 6132 00ce 9BB2     		uxth	r3, r3
 6133 00d0 1B0A     		lsrs	r3, r3, #8
 6134 00d2 9BB2     		uxth	r3, r3
 6135 00d4 9BB2     		uxth	r3, r3
 6136 00d6 1343     		orrs	r3, r3, r2
 6137 00d8 9BB2     		uxth	r3, r3
 6138 00da 9AB2     		uxth	r2, r3
 6139 00dc 7B69     		ldr	r3, [r7, #20]
 6140 00de 9A87     		strh	r2, [r3, #60]	@ movhi
ARM GAS  /tmp/ccyb6dex.s 			page 188


3163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 6141              		.loc 4 3163 0
 6142 00e0 3B69     		ldr	r3, [r7, #16]
 6143 00e2 D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 6144 00e6 1A06     		lsls	r2, r3, #24
 6145 00e8 3B69     		ldr	r3, [r7, #16]
 6146 00ea D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 6147 00ee 03F47F43 		and	r3, r3, #65280
 6148 00f2 1B02     		lsls	r3, r3, #8
 6149 00f4 1A43     		orrs	r2, r2, r3
 6150 00f6 3B69     		ldr	r3, [r7, #16]
 6151 00f8 D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 6152 00fc 03F47F03 		and	r3, r3, #16711680
 6153 0100 1B0A     		lsrs	r3, r3, #8
 6154 0102 1A43     		orrs	r2, r2, r3
 6155 0104 3B69     		ldr	r3, [r7, #16]
 6156 0106 D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 6157 010a 1B0E     		lsrs	r3, r3, #24
 6158 010c 1A43     		orrs	r2, r2, r3
 6159 010e 7B69     		ldr	r3, [r7, #20]
 6160 0110 9A63     		str	r2, [r3, #56]
3164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 6161              		.loc 4 3164 0
 6162 0112 224B     		ldr	r3, .L307+12
 6163 0114 1A68     		ldr	r2, [r3]
 6164 0116 7B69     		ldr	r3, [r7, #20]
 6165 0118 C3F80821 		str	r2, [r3, #264]
3165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Here is the SYN action. */
3167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.
 6166              		.loc 4 3167 0
 6167 011c 3B69     		ldr	r3, [r7, #16]
 6168 011e D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 6169 0122 1A06     		lsls	r2, r3, #24
 6170 0124 3B69     		ldr	r3, [r7, #16]
 6171 0126 D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 6172 012a 03F47F43 		and	r3, r3, #65280
 6173 012e 1B02     		lsls	r3, r3, #8
 6174 0130 1A43     		orrs	r2, r2, r3
 6175 0132 3B69     		ldr	r3, [r7, #16]
 6176 0134 D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 6177 0138 03F47F03 		and	r3, r3, #16711680
 6178 013c 1B0A     		lsrs	r3, r3, #8
 6179 013e 1A43     		orrs	r2, r2, r3
 6180 0140 3B69     		ldr	r3, [r7, #16]
 6181 0142 D3F82630 		ldr	r3, [r3, #38]	@ unaligned
 6182 0146 1B0E     		lsrs	r3, r3, #24
 6183 0148 1A43     		orrs	r2, r2, r3
 6184 014a 7B69     		ldr	r3, [r7, #20]
 6185 014c C3F8EC20 		str	r2, [r3, #236]
3168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvSocketSetMSS( pxReturn );
 6186              		.loc 4 3168 0
 6187 0150 7869     		ldr	r0, [r7, #20]
 6188 0152 FFF7FEFF 		bl	prvSocketSetMSS
3169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		prvTCPCreateWindow( pxReturn );
 6189              		.loc 4 3170 0
ARM GAS  /tmp/ccyb6dex.s 			page 189


 6190 0156 7869     		ldr	r0, [r7, #20]
 6191 0158 FFF7FEFF 		bl	prvTCPCreateWindow
3171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* It is recommended to increase the ISS for each new connection with a value of 0x102. */
3173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 6192              		.loc 4 3173 0
 6193 015c 0F4B     		ldr	r3, .L307+12
 6194 015e 1B68     		ldr	r3, [r3]
 6195 0160 03F58173 		add	r3, r3, #258
 6196 0164 0D4A     		ldr	r2, .L307+12
 6197 0166 1360     		str	r3, [r2]
3174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		vTCPStateChange( pxReturn, eSYN_FIRST );
 6198              		.loc 4 3175 0
 6199 0168 7869     		ldr	r0, [r7, #20]
 6200 016a 0321     		movs	r1, #3
 6201 016c FFF7FEFF 		bl	vTCPStateChange
3176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Make a copy of the header up to the TCP header.  It is needed later
3178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		on, whenever data must be sent to the peer. */
3179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxRe
 6202              		.loc 4 3179 0
 6203 0170 7B69     		ldr	r3, [r7, #20]
 6204 0172 03F18202 		add	r2, r3, #130
 6205 0176 3B68     		ldr	r3, [r7]
 6206 0178 9B69     		ldr	r3, [r3, #24]
 6207 017a 1046     		mov	r0, r2
 6208 017c 1946     		mov	r1, r3
 6209 017e 4622     		movs	r2, #70
 6210 0180 FFF7FEFF 		bl	memcpy
 6211              	.L305:
3180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return pxReturn;
 6212              		.loc 4 3181 0
 6213 0184 7B69     		ldr	r3, [r7, #20]
3182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 6214              		.loc 4 3182 0
 6215 0186 1846     		mov	r0, r3
 6216 0188 1C37     		adds	r7, r7, #28
 6217              	.LCFI207:
 6218              		.cfi_def_cfa_offset 12
 6219 018a BD46     		mov	sp, r7
 6220              	.LCFI208:
 6221              		.cfi_def_cfa_register 13
 6222              		@ sp needed
 6223 018c 90BD     		pop	{r4, r7, pc}
 6224              	.L308:
 6225 018e 00BF     		.align	2
 6226              	.L307:
 6227 0190 A4000000 		.word	.LC13
 6228 0194 A8000000 		.word	.LC14
 6229 0198 AC000000 		.word	.LC15
 6230 019c 00000000 		.word	ulNextInitialSequenceNumber
 6231              		.cfi_endproc
 6232              	.LFE57:
 6234              		.section	.text.prvTCPSocketCopy,"ax",%progbits
 6235              		.align	2
ARM GAS  /tmp/ccyb6dex.s 			page 190


 6236              		.thumb
 6237              		.thumb_func
 6239              	prvTCPSocketCopy:
 6240              	.LFB58:
3183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
3184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
3186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * Duplicates a socket after a listening socket receives a connection.
3187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
3188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
3189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 6241              		.loc 4 3189 0
 6242              		.cfi_startproc
 6243              		@ args = 0, pretend = 0, frame = 16
 6244              		@ frame_needed = 1, uses_anonymous_args = 0
 6245 0000 80B5     		push	{r7, lr}
 6246              	.LCFI209:
 6247              		.cfi_def_cfa_offset 8
 6248              		.cfi_offset 7, -8
 6249              		.cfi_offset 14, -4
 6250 0002 84B0     		sub	sp, sp, #16
 6251              	.LCFI210:
 6252              		.cfi_def_cfa_offset 24
 6253 0004 00AF     		add	r7, sp, #0
 6254              	.LCFI211:
 6255              		.cfi_def_cfa_register 7
 6256 0006 7860     		str	r0, [r7, #4]
 6257 0008 3960     		str	r1, [r7]
3190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** struct freertos_sockaddr xAddress;
3191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 6258              		.loc 4 3192 0
 6259 000a 3B68     		ldr	r3, [r7]
 6260 000c DA69     		ldr	r2, [r3, #28]
 6261 000e 7B68     		ldr	r3, [r7, #4]
 6262 0010 DA61     		str	r2, [r3, #28]
3193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 6263              		.loc 4 3193 0
 6264 0012 3B68     		ldr	r3, [r7]
 6265 0014 1A6A     		ldr	r2, [r3, #32]
 6266 0016 7B68     		ldr	r3, [r7, #4]
 6267 0018 1A62     		str	r2, [r3, #32]
3194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 6268              		.loc 4 3194 0
 6269 001a 3B68     		ldr	r3, [r7]
 6270 001c 93F82620 		ldrb	r2, [r3, #38]	@ zero_extendqisi2
 6271 0020 7B68     		ldr	r3, [r7, #4]
 6272 0022 83F82620 		strb	r2, [r3, #38]
3195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 6273              		.loc 4 3195 0
 6274 0026 3B68     		ldr	r3, [r7]
 6275 0028 DA6E     		ldr	r2, [r3, #108]
 6276 002a 7B68     		ldr	r3, [r7, #4]
 6277 002c DA66     		str	r2, [r3, #108]
3196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 6278              		.loc 4 3196 0
 6279 002e 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccyb6dex.s 			page 191


 6280 0030 1A6F     		ldr	r2, [r3, #112]
 6281 0032 7B68     		ldr	r3, [r7, #4]
 6282 0034 1A67     		str	r2, [r3, #112]
3197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 6283              		.loc 4 3197 0
 6284 0036 3B68     		ldr	r3, [r7]
 6285 0038 5A6E     		ldr	r2, [r3, #100]
 6286 003a 7B68     		ldr	r3, [r7, #4]
 6287 003c 5A66     		str	r2, [r3, #100]
3198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 6288              		.loc 4 3198 0
 6289 003e 3B68     		ldr	r3, [r7]
 6290 0040 9A6E     		ldr	r2, [r3, #104]
 6291 0042 7B68     		ldr	r3, [r7, #4]
 6292 0044 9A66     		str	r2, [r3, #104]
3199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 6293              		.loc 4 3199 0
 6294 0046 3B68     		ldr	r3, [r7]
 6295 0048 D3F8D420 		ldr	r2, [r3, #212]
 6296 004c 7B68     		ldr	r3, [r7, #4]
 6297 004e C3F8D420 		str	r2, [r3, #212]
3200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 6298              		.loc 4 3200 0
 6299 0052 3B68     		ldr	r3, [r7]
 6300 0054 D3F8D820 		ldr	r2, [r3, #216]
 6301 0058 7B68     		ldr	r3, [r7, #4]
 6302 005a C3F8D820 		str	r2, [r3, #216]
3201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
3203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
3205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
3207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_CALLBACKS == 1 )
3209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* In case call-backs are used, copy them from parent to child. */
3211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
3212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
3213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
3214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigUSE_CALLBACKS */
3216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
3218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Child socket of listening sockets will inherit the Socket Set
3220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		Otherwise the owner has no chance of including it into the set. */
3221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( pxSocket->pxSocketSet )
 6303              		.loc 4 3221 0
 6304 005e 3B68     		ldr	r3, [r7]
 6305 0060 9B6A     		ldr	r3, [r3, #40]
 6306 0062 002B     		cmp	r3, #0
 6307 0064 09D0     		beq	.L310
3222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 6308              		.loc 4 3223 0
 6309 0066 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccyb6dex.s 			page 192


 6310 0068 9A6A     		ldr	r2, [r3, #40]
 6311 006a 7B68     		ldr	r3, [r7, #4]
 6312 006c 9A62     		str	r2, [r3, #40]
3224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 6313              		.loc 4 3224 0
 6314 006e 3B68     		ldr	r3, [r7]
 6315 0070 DB6A     		ldr	r3, [r3, #44]
 6316 0072 43F00502 		orr	r2, r3, #5
 6317 0076 7B68     		ldr	r3, [r7, #4]
 6318 0078 DA62     		str	r2, [r3, #44]
 6319              	.L310:
3225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
3228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* And bind it to the same local port as its parent. */
3230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 6320              		.loc 4 3230 0
 6321 007a 1B4B     		ldr	r3, .L314
 6322 007c 5B69     		ldr	r3, [r3, #20]
 6323 007e FB60     		str	r3, [r7, #12]
3231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 6324              		.loc 4 3231 0
 6325 0080 3B68     		ldr	r3, [r7]
 6326 0082 9B8C     		ldrh	r3, [r3, #36]
 6327 0084 1B02     		lsls	r3, r3, #8
 6328 0086 9AB2     		uxth	r2, r3
 6329 0088 3B68     		ldr	r3, [r7]
 6330 008a 9B8C     		ldrh	r3, [r3, #36]
 6331 008c 1B0A     		lsrs	r3, r3, #8
 6332 008e 9BB2     		uxth	r3, r3
 6333 0090 9BB2     		uxth	r3, r3
 6334 0092 1343     		orrs	r3, r3, r2
 6335 0094 9BB2     		uxth	r3, r3
 6336 0096 9BB2     		uxth	r3, r3
 6337 0098 7B81     		strh	r3, [r7, #10]	@ movhi
3232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#if( ipconfigTCP_HANG_PROTECTION == 1 )
3234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* Only when there is anti-hanging protection, a socket may become an
3236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		orphan temporarily.  Once this socket is really connected, the owner of
3237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		the server socket will be notified. */
3238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* When bPassQueued is true, the socket is an orphan until it gets
3240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		connected. */
3241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 6338              		.loc 4 3241 0
 6339 009a 7A68     		ldr	r2, [r7, #4]
 6340 009c 92F84030 		ldrb	r3, [r2, #64]
 6341 00a0 43F00403 		orr	r3, r3, #4
 6342 00a4 82F84030 		strb	r3, [r2, #64]
3242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 6343              		.loc 4 3242 0
 6344 00a8 7B68     		ldr	r3, [r7, #4]
 6345 00aa 3A68     		ldr	r2, [r7]
 6346 00ac 5A65     		str	r2, [r3, #84]
3243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
ARM GAS  /tmp/ccyb6dex.s 			page 193


3244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#else
3245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* A reference to the new socket may be stored and the socket is marked
3247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		as 'passable'. */
3248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		/* When bPassAccept is pdTRUE_UNSIGNED this socket may be returned in a call to
3250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		accept(). */
3251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
3252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if(pxSocket->u.xTCP.pxPeerSocket == NULL )
3253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
3255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	#endif
3258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.usChildCount++;
 6347              		.loc 4 3259 0
 6348 00ae 3B68     		ldr	r3, [r7]
 6349 00b0 B3F84E30 		ldrh	r3, [r3, #78]
 6350 00b4 0133     		adds	r3, r3, #1
 6351 00b6 9AB2     		uxth	r2, r3
 6352 00b8 3B68     		ldr	r3, [r7]
 6353 00ba A3F84E20 		strh	r2, [r3, #78]	@ movhi
3260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
3262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->usLocalPort,
3263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usChildCount,
3264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usBacklog,
3265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
3266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Now bind the child socket to the same port as the listening socket. */
3268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 6354              		.loc 4 3268 0
 6355 00be 07F10803 		add	r3, r7, #8
 6356 00c2 7868     		ldr	r0, [r7, #4]
 6357 00c4 1946     		mov	r1, r3
 6358 00c6 0822     		movs	r2, #8
 6359 00c8 0123     		movs	r3, #1
 6360 00ca FFF7FEFF 		bl	vSocketBind
 6361 00ce 0346     		mov	r3, r0
 6362 00d0 002B     		cmp	r3, #0
 6363 00d2 04D0     		beq	.L311
3269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
3271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		vSocketClose( pxNewSocket );
 6364              		.loc 4 3271 0
 6365 00d4 7868     		ldr	r0, [r7, #4]
 6366 00d6 FFF7FEFF 		bl	vSocketClose
3272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return pdFALSE;
 6367              		.loc 4 3272 0
 6368 00da 0023     		movs	r3, #0
 6369 00dc 00E0     		b	.L313
 6370              	.L311:
3273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return pdTRUE;
 6371              		.loc 4 3275 0
ARM GAS  /tmp/ccyb6dex.s 			page 194


 6372 00de 0123     		movs	r3, #1
 6373              	.L313:
3276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 6374              		.loc 4 3276 0 discriminator 1
 6375 00e0 1846     		mov	r0, r3
 6376 00e2 1037     		adds	r7, r7, #16
 6377              	.LCFI212:
 6378              		.cfi_def_cfa_offset 8
 6379 00e4 BD46     		mov	sp, r7
 6380              	.LCFI213:
 6381              		.cfi_def_cfa_register 13
 6382              		@ sp needed
 6383 00e6 80BD     		pop	{r7, pc}
 6384              	.L315:
 6385              		.align	2
 6386              	.L314:
 6387 00e8 00000000 		.word	xDefaultPartUDPPacketHeader
 6388              		.cfi_endproc
 6389              	.LFE58:
 6391              		.section	.text.FreeRTOS_GetTCPStateName,"ax",%progbits
 6392              		.align	2
 6393              		.global	FreeRTOS_GetTCPStateName
 6394              		.thumb
 6395              		.thumb_func
 6397              	FreeRTOS_GetTCPStateName:
 6398              	.LFB59:
3277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
3278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #if( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
3280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	const char *FreeRTOS_GetTCPStateName( UBaseType_t ulState )
3282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 6399              		.loc 4 3282 0
 6400              		.cfi_startproc
 6401              		@ args = 0, pretend = 0, frame = 8
 6402              		@ frame_needed = 1, uses_anonymous_args = 0
 6403              		@ link register save eliminated.
 6404 0000 80B4     		push	{r7}
 6405              	.LCFI214:
 6406              		.cfi_def_cfa_offset 4
 6407              		.cfi_offset 7, -4
 6408 0002 83B0     		sub	sp, sp, #12
 6409              	.LCFI215:
 6410              		.cfi_def_cfa_offset 16
 6411 0004 00AF     		add	r7, sp, #0
 6412              	.LCFI216:
 6413              		.cfi_def_cfa_register 7
 6414 0006 7860     		str	r0, [r7, #4]
3283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( ulState >= ( UBaseType_t ) ARRAY_SIZE( pcStateNames ) )
 6415              		.loc 4 3283 0
 6416 0008 7B68     		ldr	r3, [r7, #4]
 6417 000a 0C2B     		cmp	r3, #12
 6418 000c 01D9     		bls	.L317
3284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			ulState = ( UBaseType_t ) ARRAY_SIZE( pcStateNames ) - 1u;
 6419              		.loc 4 3285 0
 6420 000e 0C23     		movs	r3, #12
ARM GAS  /tmp/ccyb6dex.s 			page 195


 6421 0010 7B60     		str	r3, [r7, #4]
 6422              	.L317:
3286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		return pcStateNames[ ulState ];
 6423              		.loc 4 3287 0
 6424 0012 054A     		ldr	r2, .L319
 6425 0014 7B68     		ldr	r3, [r7, #4]
 6426 0016 52F82330 		ldr	r3, [r2, r3, lsl #2]
3288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
 6427              		.loc 4 3288 0
 6428 001a 1846     		mov	r0, r3
 6429 001c 0C37     		adds	r7, r7, #12
 6430              	.LCFI217:
 6431              		.cfi_def_cfa_offset 4
 6432 001e BD46     		mov	sp, r7
 6433              	.LCFI218:
 6434              		.cfi_def_cfa_register 13
 6435              		@ sp needed
 6436 0020 5DF8047B 		ldr	r7, [sp], #4
 6437              	.LCFI219:
 6438              		.cfi_restore 7
 6439              		.cfi_def_cfa_offset 0
 6440 0024 7047     		bx	lr
 6441              	.L320:
 6442 0026 00BF     		.align	2
 6443              	.L319:
 6444 0028 00000000 		.word	pcStateNames
 6445              		.cfi_endproc
 6446              	.LFE59:
 6448              		.section	.text.xTCPCheckNewClient,"ax",%progbits
 6449              		.align	2
 6450              		.global	xTCPCheckNewClient
 6451              		.thumb
 6452              		.thumb_func
 6454              	xTCPCheckNewClient:
 6455              	.LFB60:
3289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** #endif /* ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) ) */
3291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
3292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** /*
3294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * In the API accept(), the user asks is there is a new client?  As API's can
3295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  * not walk through the xBoundTCPSocketsList the IP-task will do this.
3296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c ****  */
3297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
3298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** {
 6456              		.loc 4 3298 0
 6457              		.cfi_startproc
 6458              		@ args = 0, pretend = 0, frame = 24
 6459              		@ frame_needed = 1, uses_anonymous_args = 0
 6460              		@ link register save eliminated.
 6461 0000 80B4     		push	{r7}
 6462              	.LCFI220:
 6463              		.cfi_def_cfa_offset 4
 6464              		.cfi_offset 7, -4
 6465 0002 87B0     		sub	sp, sp, #28
 6466              	.LCFI221:
ARM GAS  /tmp/ccyb6dex.s 			page 196


 6467              		.cfi_def_cfa_offset 32
 6468 0004 00AF     		add	r7, sp, #0
 6469              	.LCFI222:
 6470              		.cfi_def_cfa_register 7
 6471 0006 7860     		str	r0, [r7, #4]
3299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 6472              		.loc 4 3299 0
 6473 0008 7B68     		ldr	r3, [r7, #4]
 6474 000a 9B8C     		ldrh	r3, [r3, #36]
 6475 000c 1B02     		lsls	r3, r3, #8
 6476 000e 9AB2     		uxth	r2, r3
 6477 0010 7B68     		ldr	r3, [r7, #4]
 6478 0012 9B8C     		ldrh	r3, [r3, #36]
 6479 0014 1B0A     		lsrs	r3, r3, #8
 6480 0016 9BB2     		uxth	r3, r3
 6481 0018 9BB2     		uxth	r3, r3
 6482 001a 1343     		orrs	r3, r3, r2
 6483 001c 9BB2     		uxth	r3, r3
 6484 001e 9BB2     		uxth	r3, r3
 6485 0020 FB60     		str	r3, [r7, #12]
3300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** ListItem_t *pxIterator;
3301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxFound;
3302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** BaseType_t xResult = pdFALSE;
 6486              		.loc 4 3302 0
 6487 0022 0023     		movs	r3, #0
 6488 0024 3B61     		str	r3, [r7, #16]
3303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 
3304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
3305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	who has access. */
3306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 6489              		.loc 4 3306 0
 6490 0026 164B     		ldr	r3, .L327
 6491 0028 DB68     		ldr	r3, [r3, #12]
 6492 002a 7B61     		str	r3, [r7, #20]
 6493 002c 1DE0     		b	.L322
 6494              	.L325:
3307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
3308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
3309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
3310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 6495              		.loc 4 3310 0
 6496 002e 7B69     		ldr	r3, [r7, #20]
 6497 0030 1A68     		ldr	r2, [r3]
 6498 0032 FB68     		ldr	r3, [r7, #12]
 6499 0034 9A42     		cmp	r2, r3
 6500 0036 15D1     		bne	.L323
3311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		{
3312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 6501              		.loc 4 3312 0
 6502 0038 7B69     		ldr	r3, [r7, #20]
 6503 003a DB68     		ldr	r3, [r3, #12]
 6504 003c BB60     		str	r3, [r7, #8]
3313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdF
 6505              		.loc 4 3313 0
 6506 003e BB68     		ldr	r3, [r7, #8]
 6507 0040 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 6508 0044 062B     		cmp	r3, #6
ARM GAS  /tmp/ccyb6dex.s 			page 197


 6509 0046 0DD1     		bne	.L323
 6510              		.loc 4 3313 0 is_stmt 0 discriminator 1
 6511 0048 BB68     		ldr	r3, [r7, #8]
 6512 004a 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6513 004e 03F00203 		and	r3, r3, #2
 6514 0052 DBB2     		uxtb	r3, r3
 6515 0054 002B     		cmp	r3, #0
 6516 0056 05D0     		beq	.L323
3314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			{
3315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 6517              		.loc 4 3315 0 is_stmt 1
 6518 0058 7B68     		ldr	r3, [r7, #4]
 6519 005a BA68     		ldr	r2, [r7, #8]
 6520 005c 5A65     		str	r2, [r3, #84]
3316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) 
3317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				xResult = pdTRUE;
 6521              		.loc 4 3317 0
 6522 005e 0123     		movs	r3, #1
 6523 0060 3B61     		str	r3, [r7, #16]
3318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 				break;
 6524              		.loc 4 3318 0
 6525 0062 06E0     		b	.L324
 6526              	.L323:
3308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	{
 6527              		.loc 4 3308 0
 6528 0064 7B69     		ldr	r3, [r7, #20]
 6529 0066 5B68     		ldr	r3, [r3, #4]
 6530 0068 7B61     		str	r3, [r7, #20]
 6531              	.L322:
3306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 6532              		.loc 4 3306 0 discriminator 1
 6533 006a 7B69     		ldr	r3, [r7, #20]
 6534 006c 054A     		ldr	r2, .L327+4
 6535 006e 9342     		cmp	r3, r2
 6536 0070 DDD1     		bne	.L325
 6537              	.L324:
3319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 			}
3320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 		}
3321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	}
3322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** 	return xResult;
 6538              		.loc 4 3322 0
 6539 0072 3B69     		ldr	r3, [r7, #16]
3323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_IP.c **** }
 6540              		.loc 4 3323 0
 6541 0074 1846     		mov	r0, r3
 6542 0076 1C37     		adds	r7, r7, #28
 6543              	.LCFI223:
 6544              		.cfi_def_cfa_offset 4
 6545 0078 BD46     		mov	sp, r7
 6546              	.LCFI224:
 6547              		.cfi_def_cfa_register 13
 6548              		@ sp needed
 6549 007a 5DF8047B 		ldr	r7, [sp], #4
 6550              	.LCFI225:
 6551              		.cfi_restore 7
 6552              		.cfi_def_cfa_offset 0
 6553 007e 7047     		bx	lr
ARM GAS  /tmp/ccyb6dex.s 			page 198


 6554              	.L328:
 6555              		.align	2
 6556              	.L327:
 6557 0080 00000000 		.word	xBoundTCPSocketsList
 6558 0084 08000000 		.word	xBoundTCPSocketsList+8
 6559              		.cfi_endproc
 6560              	.LFE60:
 6562              		.text
 6563              	.Letext0:
 6564              		.file 6 "/usr/arm-none-eabi/include/machine/_default_types.h"
 6565              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 6566              		.file 8 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 6567              		.file 9 "../../../FreeRTOS_9_0/Source/include/list.h"
 6568              		.file 10 "../../../FreeRTOS_9_0/Source/include/event_groups.h"
 6569              		.file 11 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Sockets.h"
 6570              		.file 12 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_TCP_WIN.h"
 6571              		.file 13 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_TCP_IP.h"
 6572              		.file 14 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_ARP.h"
ARM GAS  /tmp/ccyb6dex.s 			page 199


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FreeRTOS_TCP_IP.c
     /tmp/ccyb6dex.s:21     .text.FreeRTOS_max_int32:0000000000000000 $t
     /tmp/ccyb6dex.s:25     .text.FreeRTOS_max_int32:0000000000000000 FreeRTOS_max_int32
     /tmp/ccyb6dex.s:68     .text.FreeRTOS_min_int32:0000000000000000 $t
     /tmp/ccyb6dex.s:72     .text.FreeRTOS_min_int32:0000000000000000 FreeRTOS_min_int32
     /tmp/ccyb6dex.s:114    .text.FreeRTOS_min_uint32:0000000000000000 $t
     /tmp/ccyb6dex.s:118    .text.FreeRTOS_min_uint32:0000000000000000 FreeRTOS_min_uint32
     /tmp/ccyb6dex.s:160    .text.uxStreamBufferSpace:0000000000000000 $t
     /tmp/ccyb6dex.s:164    .text.uxStreamBufferSpace:0000000000000000 uxStreamBufferSpace
     /tmp/ccyb6dex.s:227    .text.uxStreamBufferDistance:0000000000000000 $t
     /tmp/ccyb6dex.s:231    .text.uxStreamBufferDistance:0000000000000000 uxStreamBufferDistance
     /tmp/ccyb6dex.s:292    .text.uxStreamBufferGetSpace:0000000000000000 $t
     /tmp/ccyb6dex.s:296    .text.uxStreamBufferGetSpace:0000000000000000 uxStreamBufferGetSpace
     /tmp/ccyb6dex.s:342    .text.uxStreamBufferFrontSpace:0000000000000000 $t
     /tmp/ccyb6dex.s:346    .text.uxStreamBufferFrontSpace:0000000000000000 uxStreamBufferFrontSpace
     /tmp/ccyb6dex.s:392    .text.uxStreamBufferMidSpace:0000000000000000 $t
     /tmp/ccyb6dex.s:396    .text.uxStreamBufferMidSpace:0000000000000000 uxStreamBufferMidSpace
     /tmp/ccyb6dex.s:442    .text.vStreamBufferMoveMid:0000000000000000 $t
     /tmp/ccyb6dex.s:446    .text.vStreamBufferMoveMid:0000000000000000 vStreamBufferMoveMid
     /tmp/ccyb6dex.s:514    .text.ulChar2u32:0000000000000000 $t
     /tmp/ccyb6dex.s:518    .text.ulChar2u32:0000000000000000 ulChar2u32
     /tmp/ccyb6dex.s:579    .text.usChar2u16:0000000000000000 $t
     /tmp/ccyb6dex.s:583    .text.usChar2u16:0000000000000000 usChar2u16
     /tmp/ccyb6dex.s:634    .rodata:0000000000000000 $d
     /tmp/ccyb6dex.s:674    .data.pcStateNames:0000000000000000 $d
     /tmp/ccyb6dex.s:677    .data.pcStateNames:0000000000000000 pcStateNames
     /tmp/ccyb6dex.s:696    .bss.ulNextInitialSequenceNumber:0000000000000000 ulNextInitialSequenceNumber
     /tmp/ccyb6dex.s:693    .bss.ulNextInitialSequenceNumber:0000000000000000 $d
     /tmp/ccyb6dex.s:699    .text.prvTCPSocketIsActive:0000000000000000 $t
     /tmp/ccyb6dex.s:703    .text.prvTCPSocketIsActive:0000000000000000 prvTCPSocketIsActive
     /tmp/ccyb6dex.s:730    .text.prvTCPSocketIsActive:0000000000000014 $d
     /tmp/ccyb6dex.s:742    .text.prvTCPSocketIsActive:0000000000000044 $t
     /tmp/ccyb6dex.s:769    .text.prvTCPStatusAgeCheck:0000000000000000 $t
     /tmp/ccyb6dex.s:773    .text.prvTCPStatusAgeCheck:0000000000000000 prvTCPStatusAgeCheck
     /tmp/ccyb6dex.s:800    .text.prvTCPStatusAgeCheck:0000000000000018 $d
     /tmp/ccyb6dex.s:809    .text.prvTCPStatusAgeCheck:000000000000003c $t
     /tmp/ccyb6dex.s:2630   .text.vTCPStateChange:0000000000000000 vTCPStateChange
     /tmp/ccyb6dex.s:889    .text.xTCPSocketCheck:0000000000000000 $t
     /tmp/ccyb6dex.s:894    .text.xTCPSocketCheck:0000000000000000 xTCPSocketCheck
     /tmp/ccyb6dex.s:3628   .text.prvTCPAddTxData:0000000000000000 prvTCPAddTxData
     /tmp/ccyb6dex.s:1261   .text.prvTCPReturnPacket:0000000000000000 prvTCPReturnPacket
     /tmp/ccyb6dex.s:3463   .text.prvTCPNextTimeout:0000000000000000 prvTCPNextTimeout
     /tmp/ccyb6dex.s:1043   .text.prvTCPSendPacket:0000000000000000 prvTCPSendPacket
     /tmp/ccyb6dex.s:1034   .text.xTCPSocketCheck:00000000000000c8 $d
     /tmp/ccyb6dex.s:1039   .text.prvTCPSendPacket:0000000000000000 $t
     /tmp/ccyb6dex.s:1170   .text.prvTCPSendRepeated:0000000000000000 prvTCPSendRepeated
     /tmp/ccyb6dex.s:1812   .text.prvTCPPrepareConnect:0000000000000000 prvTCPPrepareConnect
     /tmp/ccyb6dex.s:2444   .text.prvSetSynAckOptions:0000000000000000 prvSetSynAckOptions
     /tmp/ccyb6dex.s:1166   .text.prvTCPSendRepeated:0000000000000000 $t
     /tmp/ccyb6dex.s:3059   .text.prvTCPPrepareSend:0000000000000000 prvTCPPrepareSend
     /tmp/ccyb6dex.s:1257   .text.prvTCPReturnPacket:0000000000000000 $t
     /tmp/ccyb6dex.s:1738   .text.prvTCPReturnPacket:0000000000000368 $d
     /tmp/ccyb6dex.s:1744   .text.prvTCPCreateWindow:0000000000000000 $t
     /tmp/ccyb6dex.s:1748   .text.prvTCPCreateWindow:0000000000000000 prvTCPCreateWindow
     /tmp/ccyb6dex.s:1808   .text.prvTCPPrepareConnect:0000000000000000 $t
     /tmp/ccyb6dex.s:5575   .text.prvSocketSetMSS:0000000000000000 prvSocketSetMSS
ARM GAS  /tmp/ccyb6dex.s 			page 200


     /tmp/ccyb6dex.s:2057   .text.prvTCPPrepareConnect:00000000000001b4 $d
     /tmp/ccyb6dex.s:2063   .text.prvCheckOptions:0000000000000000 $t
     /tmp/ccyb6dex.s:2067   .text.prvCheckOptions:0000000000000000 prvCheckOptions
     /tmp/ccyb6dex.s:2372   .text.prvWinScaleFactor:0000000000000000 $t
     /tmp/ccyb6dex.s:2376   .text.prvWinScaleFactor:0000000000000000 prvWinScaleFactor
     /tmp/ccyb6dex.s:2440   .text.prvSetSynAckOptions:0000000000000000 $t
     /tmp/ccyb6dex.s:2566   .text.prvTCPTouchSocket:0000000000000000 $t
     /tmp/ccyb6dex.s:2570   .text.prvTCPTouchSocket:0000000000000000 prvTCPTouchSocket
     /tmp/ccyb6dex.s:2625   .text.vTCPStateChange:0000000000000000 $t
     /tmp/ccyb6dex.s:2905   .text.prvTCPBufferResize:0000000000000000 $t
     /tmp/ccyb6dex.s:2909   .text.prvTCPBufferResize:0000000000000000 prvTCPBufferResize
     /tmp/ccyb6dex.s:3050   .text.prvTCPBufferResize:00000000000000c4 $d
     /tmp/ccyb6dex.s:3055   .text.prvTCPPrepareSend:0000000000000000 $t
     /tmp/ccyb6dex.s:3459   .text.prvTCPNextTimeout:0000000000000000 $t
     /tmp/ccyb6dex.s:3619   .text.prvTCPNextTimeout:00000000000000fc $d
     /tmp/ccyb6dex.s:3624   .text.prvTCPAddTxData:0000000000000000 $t
     /tmp/ccyb6dex.s:3703   .text.prvTCPHandleFin:0000000000000000 $t
     /tmp/ccyb6dex.s:3707   .text.prvTCPHandleFin:0000000000000000 prvTCPHandleFin
     /tmp/ccyb6dex.s:3913   .text.prvCheckRxData:0000000000000000 $t
     /tmp/ccyb6dex.s:3917   .text.prvCheckRxData:0000000000000000 prvCheckRxData
     /tmp/ccyb6dex.s:4061   .text.prvStoreRxData:0000000000000000 $t
     /tmp/ccyb6dex.s:4065   .text.prvStoreRxData:0000000000000000 prvStoreRxData
     /tmp/ccyb6dex.s:5513   .text.prvTCPSendReset:0000000000000000 prvTCPSendReset
     /tmp/ccyb6dex.s:4224   .text.prvSetOptions:0000000000000000 $t
     /tmp/ccyb6dex.s:4228   .text.prvSetOptions:0000000000000000 prvSetOptions
     /tmp/ccyb6dex.s:4355   .text.prvHandleSynReceived:0000000000000000 $t
     /tmp/ccyb6dex.s:4359   .text.prvHandleSynReceived:0000000000000000 prvHandleSynReceived
     /tmp/ccyb6dex.s:4604   .text.prvHandleEstablished:0000000000000000 $t
     /tmp/ccyb6dex.s:4608   .text.prvHandleEstablished:0000000000000000 prvHandleEstablished
     /tmp/ccyb6dex.s:4929   .text.prvSendData:0000000000000000 $t
     /tmp/ccyb6dex.s:4933   .text.prvSendData:0000000000000000 prvSendData
     /tmp/ccyb6dex.s:5189   .text.prvSendData:0000000000000180 $d
     /tmp/ccyb6dex.s:5194   .text.prvTCPHandleState:0000000000000000 $t
     /tmp/ccyb6dex.s:5198   .text.prvTCPHandleState:0000000000000000 prvTCPHandleState
     /tmp/ccyb6dex.s:5386   .text.prvTCPHandleState:0000000000000150 $d
     /tmp/ccyb6dex.s:5398   .text.prvTCPHandleState:0000000000000180 $t
     /tmp/ccyb6dex.s:5509   .text.prvTCPSendReset:0000000000000000 $t
     /tmp/ccyb6dex.s:5571   .text.prvSocketSetMSS:0000000000000000 $t
     /tmp/ccyb6dex.s:5649   .text.prvSocketSetMSS:000000000000006c $d
     /tmp/ccyb6dex.s:5655   .text.xProcessReceivedTCPPacket:0000000000000000 $t
     /tmp/ccyb6dex.s:5660   .text.xProcessReceivedTCPPacket:0000000000000000 xProcessReceivedTCPPacket
     /tmp/ccyb6dex.s:6001   .text.prvHandleListen:0000000000000000 prvHandleListen
     /tmp/ccyb6dex.s:5997   .text.prvHandleListen:0000000000000000 $t
     /tmp/ccyb6dex.s:6239   .text.prvTCPSocketCopy:0000000000000000 prvTCPSocketCopy
     /tmp/ccyb6dex.s:6227   .text.prvHandleListen:0000000000000190 $d
     /tmp/ccyb6dex.s:6235   .text.prvTCPSocketCopy:0000000000000000 $t
     /tmp/ccyb6dex.s:6387   .text.prvTCPSocketCopy:00000000000000e8 $d
     /tmp/ccyb6dex.s:6392   .text.FreeRTOS_GetTCPStateName:0000000000000000 $t
     /tmp/ccyb6dex.s:6397   .text.FreeRTOS_GetTCPStateName:0000000000000000 FreeRTOS_GetTCPStateName
     /tmp/ccyb6dex.s:6444   .text.FreeRTOS_GetTCPStateName:0000000000000028 $d
     /tmp/ccyb6dex.s:6449   .text.xTCPCheckNewClient:0000000000000000 $t
     /tmp/ccyb6dex.s:6454   .text.xTCPCheckNewClient:0000000000000000 xTCPCheckNewClient
     /tmp/ccyb6dex.s:6557   .text.xTCPCheckNewClient:0000000000000080 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xTaskGetTickCount
ARM GAS  /tmp/ccyb6dex.s 			page 201


vSocketClose
vReleaseNetworkBufferAndDescriptor
xTCPWindowLoggingLevel
pxDuplicateNetworkBufferWithDescriptor
memcpy
xNetworkInterfaceOutput
xDefaultPartUDPPacketHeader
usPacketIdentifier
vTCPWindowCreate
memset
eARPGetCacheEntry
FreeRTOS_OutputARPRequest
ulTCPWindowTxSack
uxStreamBufferGet
FreeRTOS_closesocket
vSocketWakeUpUser
pxGetNetworkBufferWithDescriptor
xBufferAllocFixedSize
ulTCPWindowTxGet
xTCPWindowTxDone
xTCPWindowTxHasData
lTCPWindowTxAdd
lTCPWindowRxCheck
lTCPAddRxdata
vTCPWindowInit
ulTCPWindowTxAck
xTCPWindowRxEmpty
xNetworkAddressing
pxTCPSocketLookup
lUDPLoggingPrintf
FreeRTOS_socket
vSocketBind
xBoundTCPSocketsList

ARM GAS  /tmp/cc623FKg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	pxCurrentTCB
  21              		.section	.bss.pxCurrentTCB,"aw",%nobits
  22              		.align	2
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  28              		.align	2
  31              	pxReadyTasksLists:
  32 0000 00000000 		.space	140
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  34              		.align	2
  37              	xDelayedTaskList1:
  38 0000 00000000 		.space	20
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  40              		.align	2
  43              	xDelayedTaskList2:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  46              		.align	2
  49              	pxDelayedTaskList:
  50 0000 00000000 		.space	4
  51              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  52              		.align	2
  55              	pxOverflowDelayedTaskList:
  56 0000 00000000 		.space	4
  57              		.section	.bss.xPendingReadyList,"aw",%nobits
ARM GAS  /tmp/cc623FKg.s 			page 2


  58              		.align	2
  61              	xPendingReadyList:
  62 0000 00000000 		.space	20
  62      00000000 
  62      00000000 
  62      00000000 
  62      00000000 
  63              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  64              		.align	2
  67              	xTasksWaitingTermination:
  68 0000 00000000 		.space	20
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  70              		.align	2
  73              	uxDeletedTasksWaitingCleanUp:
  74 0000 00000000 		.space	4
  75              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  76              		.align	2
  79              	xSuspendedTaskList:
  80 0000 00000000 		.space	20
  80      00000000 
  80      00000000 
  80      00000000 
  80      00000000 
  81              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  82              		.align	2
  85              	uxCurrentNumberOfTasks:
  86 0000 00000000 		.space	4
  87              		.section	.bss.xTickCount,"aw",%nobits
  88              		.align	2
  91              	xTickCount:
  92 0000 00000000 		.space	4
  93              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  94              		.align	2
  97              	uxTopReadyPriority:
  98 0000 00000000 		.space	4
  99              		.section	.bss.xSchedulerRunning,"aw",%nobits
 100              		.align	2
 103              	xSchedulerRunning:
 104 0000 00000000 		.space	4
 105              		.section	.bss.uxPendedTicks,"aw",%nobits
 106              		.align	2
 109              	uxPendedTicks:
 110 0000 00000000 		.space	4
 111              		.section	.bss.xYieldPending,"aw",%nobits
 112              		.align	2
 115              	xYieldPending:
 116 0000 00000000 		.space	4
 117              		.section	.bss.xNumOfOverflows,"aw",%nobits
 118              		.align	2
 121              	xNumOfOverflows:
 122 0000 00000000 		.space	4
 123              		.section	.bss.uxTaskNumber,"aw",%nobits
 124              		.align	2
ARM GAS  /tmp/cc623FKg.s 			page 3


 127              	uxTaskNumber:
 128 0000 00000000 		.space	4
 129              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 130              		.align	2
 133              	xNextTaskUnblockTime:
 134 0000 00000000 		.space	4
 135              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 136              		.align	2
 139              	xIdleTaskHandle:
 140 0000 00000000 		.space	4
 141              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 142              		.align	2
 145              	uxSchedulerSuspended:
 146 0000 00000000 		.space	4
 147              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 148              		.align	2
 151              	ulTaskSwitchedInTime:
 152 0000 00000000 		.space	4
 153              		.section	.bss.ulTotalRunTime,"aw",%nobits
 154              		.align	2
 157              	ulTotalRunTime:
 158 0000 00000000 		.space	4
 159              		.section	.text.xTaskCreate,"ax",%progbits
 160              		.align	2
 161              		.global	xTaskCreate
 162              		.thumb
 163              		.thumb_func
 165              	xTaskCreate:
 166              	.LFB5:
 167              		.file 1 "../../../FreeRTOS_9_0/Source/tasks.c"
   1:../../../FreeRTOS_9_0/Source/tasks.c **** /*
   2:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/tasks.c ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/tasks.c **** 
   5:../../../FreeRTOS_9_0/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/tasks.c **** 
   7:../../../FreeRTOS_9_0/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/tasks.c **** 
   9:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/tasks.c **** 
  13:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/tasks.c **** 
  20:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/tasks.c **** 
  25:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
ARM GAS  /tmp/cc623FKg.s 			page 4


  28:../../../FreeRTOS_9_0/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/tasks.c **** 
  39:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/tasks.c ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/tasks.c **** 
  43:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/tasks.c ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/tasks.c **** 
  47:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/tasks.c **** 
  52:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/tasks.c **** 
  56:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/tasks.c **** 
  59:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/tasks.c **** 
  63:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/tasks.c **** 
  67:../../../FreeRTOS_9_0/Source/tasks.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/tasks.c **** */
  69:../../../FreeRTOS_9_0/Source/tasks.c **** 
  70:../../../FreeRTOS_9_0/Source/tasks.c **** /* Standard includes. */
  71:../../../FreeRTOS_9_0/Source/tasks.c **** #include <stdlib.h>
  72:../../../FreeRTOS_9_0/Source/tasks.c **** #include <string.h>
  73:../../../FreeRTOS_9_0/Source/tasks.c **** 
  74:../../../FreeRTOS_9_0/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:../../../FreeRTOS_9_0/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:../../../FreeRTOS_9_0/Source/tasks.c **** task.h is included from an application file. */
  77:../../../FreeRTOS_9_0/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:../../../FreeRTOS_9_0/Source/tasks.c **** 
  79:../../../FreeRTOS_9_0/Source/tasks.c **** /* FreeRTOS includes. */
  80:../../../FreeRTOS_9_0/Source/tasks.c **** #include "FreeRTOS.h"
  81:../../../FreeRTOS_9_0/Source/tasks.c **** #include "task.h"
  82:../../../FreeRTOS_9_0/Source/tasks.c **** #include "timers.h"
  83:../../../FreeRTOS_9_0/Source/tasks.c **** #include "StackMacros.h"
  84:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 5


  85:../../../FreeRTOS_9_0/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:../../../FreeRTOS_9_0/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:../../../FreeRTOS_9_0/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:../../../FreeRTOS_9_0/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:../../../FreeRTOS_9_0/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:../../../FreeRTOS_9_0/Source/tasks.c **** 
  91:../../../FreeRTOS_9_0/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:../../../FreeRTOS_9_0/Source/tasks.c **** functions but without including stdio.h here. */
  93:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:../../../FreeRTOS_9_0/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:../../../FreeRTOS_9_0/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:../../../FreeRTOS_9_0/Source/tasks.c **** 	#include <stdio.h>
  99:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:../../../FreeRTOS_9_0/Source/tasks.c **** 
 101:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:../../../FreeRTOS_9_0/Source/tasks.c **** #else
 106:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 108:../../../FreeRTOS_9_0/Source/tasks.c **** 
 109:../../../FreeRTOS_9_0/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:../../../FreeRTOS_9_0/Source/tasks.c **** 
 114:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 115:../../../FreeRTOS_9_0/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:../../../FreeRTOS_9_0/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 118:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:../../../FreeRTOS_9_0/Source/tasks.c **** 
 120:../../../FreeRTOS_9_0/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:../../../FreeRTOS_9_0/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:../../../FreeRTOS_9_0/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:../../../FreeRTOS_9_0/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:../../../FreeRTOS_9_0/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:../../../FreeRTOS_9_0/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:../../../FreeRTOS_9_0/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:../../../FreeRTOS_9_0/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:../../../FreeRTOS_9_0/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:../../../FreeRTOS_9_0/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:../../../FreeRTOS_9_0/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:../../../FreeRTOS_9_0/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:../../../FreeRTOS_9_0/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:../../../FreeRTOS_9_0/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:../../../FreeRTOS_9_0/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:../../../FreeRTOS_9_0/Source/tasks.c **** 
 140:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 141:../../../FreeRTOS_9_0/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
ARM GAS  /tmp/cc623FKg.s 			page 6


 142:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 143:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:../../../FreeRTOS_9_0/Source/tasks.c **** 
 148:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 149:../../../FreeRTOS_9_0/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:../../../FreeRTOS_9_0/Source/tasks.c ****  * global, rather than file scope.
 151:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 152:../../../FreeRTOS_9_0/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define static
 154:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 155:../../../FreeRTOS_9_0/Source/tasks.c **** 
 156:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:../../../FreeRTOS_9_0/Source/tasks.c **** 
 158:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:../../../FreeRTOS_9_0/Source/tasks.c **** 	microcontroller architecture. */
 161:../../../FreeRTOS_9_0/Source/tasks.c **** 
 162:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:../../../FreeRTOS_9_0/Source/tasks.c **** 	state task. */
 164:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 166:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 168:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 170:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:../../../FreeRTOS_9_0/Source/tasks.c **** 
 172:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:../../../FreeRTOS_9_0/Source/tasks.c **** 
 174:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 176:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:../../../FreeRTOS_9_0/Source/tasks.c **** 																										\
 178:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 181:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:../../../FreeRTOS_9_0/Source/tasks.c **** 			--uxTopPriority;																			\
 183:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 184:../../../FreeRTOS_9_0/Source/tasks.c **** 																										\
 185:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:../../../FreeRTOS_9_0/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:../../../FreeRTOS_9_0/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:../../../FreeRTOS_9_0/Source/tasks.c **** 
 191:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:../../../FreeRTOS_9_0/Source/tasks.c **** 
 193:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:../../../FreeRTOS_9_0/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:../../../FreeRTOS_9_0/Source/tasks.c **** 	being used. */
 196:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 7


 199:../../../FreeRTOS_9_0/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:../../../FreeRTOS_9_0/Source/tasks.c **** 
 201:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:../../../FreeRTOS_9_0/Source/tasks.c **** 	architecture being used. */
 204:../../../FreeRTOS_9_0/Source/tasks.c **** 
 205:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:../../../FreeRTOS_9_0/Source/tasks.c **** 
 208:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:../../../FreeRTOS_9_0/Source/tasks.c **** 
 210:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																								\
 212:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 214:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:../../../FreeRTOS_9_0/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:../../../FreeRTOS_9_0/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:../../../FreeRTOS_9_0/Source/tasks.c **** 
 220:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:../../../FreeRTOS_9_0/Source/tasks.c **** 
 222:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:../../../FreeRTOS_9_0/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:../../../FreeRTOS_9_0/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 227:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 229:../../../FreeRTOS_9_0/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 231:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 232:../../../FreeRTOS_9_0/Source/tasks.c **** 
 233:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:../../../FreeRTOS_9_0/Source/tasks.c **** 
 235:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:../../../FreeRTOS_9_0/Source/tasks.c **** 
 237:../../../FreeRTOS_9_0/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:../../../FreeRTOS_9_0/Source/tasks.c **** count overflows. */
 239:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:../../../FreeRTOS_9_0/Source/tasks.c **** {																									\
 241:../../../FreeRTOS_9_0/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 243:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 246:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:../../../FreeRTOS_9_0/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:../../../FreeRTOS_9_0/Source/tasks.c **** }
 252:../../../FreeRTOS_9_0/Source/tasks.c **** 
 253:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:../../../FreeRTOS_9_0/Source/tasks.c **** 
 255:../../../FreeRTOS_9_0/Source/tasks.c **** /*
ARM GAS  /tmp/cc623FKg.s 			page 8


 256:../../../FreeRTOS_9_0/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:../../../FreeRTOS_9_0/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 259:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:../../../FreeRTOS_9_0/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:../../../FreeRTOS_9_0/Source/tasks.c **** 
 265:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 266:../../../FreeRTOS_9_0/Source/tasks.c ****  * Place the task represented by pxTCB which has been in a ready list before
 267:../../../FreeRTOS_9_0/Source/tasks.c ****  * into the appropriate ready list for the task.
 268:../../../FreeRTOS_9_0/Source/tasks.c ****  * It is inserted at the end of the list.
 269:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 270:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvReaddTaskToReadyList( pxTCB )															\
 271:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceREADDED_TASK_TO_READY_STATE( pxTCB );														\
 272:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 273:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 274:../../../FreeRTOS_9_0/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 275:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 276:../../../FreeRTOS_9_0/Source/tasks.c **** 
 277:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 278:../../../FreeRTOS_9_0/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 279:../../../FreeRTOS_9_0/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 280:../../../FreeRTOS_9_0/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 281:../../../FreeRTOS_9_0/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 282:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 283:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 284:../../../FreeRTOS_9_0/Source/tasks.c **** 
 285:../../../FreeRTOS_9_0/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 286:../../../FreeRTOS_9_0/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 287:../../../FreeRTOS_9_0/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 288:../../../FreeRTOS_9_0/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 289:../../../FreeRTOS_9_0/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 290:../../../FreeRTOS_9_0/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 291:../../../FreeRTOS_9_0/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 292:../../../FreeRTOS_9_0/Source/tasks.c **** to its original value when it is released. */
 293:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 294:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 295:../../../FreeRTOS_9_0/Source/tasks.c **** #else
 296:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 297:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 298:../../../FreeRTOS_9_0/Source/tasks.c **** 
 299:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 300:../../../FreeRTOS_9_0/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 301:../../../FreeRTOS_9_0/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 302:../../../FreeRTOS_9_0/Source/tasks.c ****  * (the task's run time environment, including register values)
 303:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 304:../../../FreeRTOS_9_0/Source/tasks.c **** typedef struct tskTaskControlBlock
 305:../../../FreeRTOS_9_0/Source/tasks.c **** {
 306:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 307:../../../FreeRTOS_9_0/Source/tasks.c **** 
 308:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 309:../../../FreeRTOS_9_0/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 310:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 311:../../../FreeRTOS_9_0/Source/tasks.c **** 
 312:../../../FreeRTOS_9_0/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  /tmp/cc623FKg.s 			page 9


 313:../../../FreeRTOS_9_0/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 314:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 315:../../../FreeRTOS_9_0/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 316:../../../FreeRTOS_9_0/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 317:../../../FreeRTOS_9_0/Source/tasks.c **** 
 318:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 319:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 320:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 321:../../../FreeRTOS_9_0/Source/tasks.c **** 
 322:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 323:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 324:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 325:../../../FreeRTOS_9_0/Source/tasks.c **** 
 326:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 327:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 328:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 329:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 330:../../../FreeRTOS_9_0/Source/tasks.c **** 
 331:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 332:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 333:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 334:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 335:../../../FreeRTOS_9_0/Source/tasks.c **** 
 336:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 337:../../../FreeRTOS_9_0/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 338:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 339:../../../FreeRTOS_9_0/Source/tasks.c **** 
 340:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 341:../../../FreeRTOS_9_0/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 342:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 343:../../../FreeRTOS_9_0/Source/tasks.c **** 
 344:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 345:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 346:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 347:../../../FreeRTOS_9_0/Source/tasks.c **** 
 348:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 349:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 350:../../../FreeRTOS_9_0/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 351:../../../FreeRTOS_9_0/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 352:../../../FreeRTOS_9_0/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 353:../../../FreeRTOS_9_0/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 354:../../../FreeRTOS_9_0/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 355:../../../FreeRTOS_9_0/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 356:../../../FreeRTOS_9_0/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 357:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 358:../../../FreeRTOS_9_0/Source/tasks.c **** 
 359:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 360:../../../FreeRTOS_9_0/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 361:../../../FreeRTOS_9_0/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 362:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 363:../../../FreeRTOS_9_0/Source/tasks.c **** 
 364:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* See the comments above the definition of
 365:../../../FreeRTOS_9_0/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 366:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 367:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 368:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 369:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 10


 370:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 371:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint8_t ucDelayAborted;
 372:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 373:../../../FreeRTOS_9_0/Source/tasks.c **** 
 374:../../../FreeRTOS_9_0/Source/tasks.c **** } tskTCB;
 375:../../../FreeRTOS_9_0/Source/tasks.c **** 
 376:../../../FreeRTOS_9_0/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 377:../../../FreeRTOS_9_0/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 378:../../../FreeRTOS_9_0/Source/tasks.c **** typedef tskTCB TCB_t;
 379:../../../FreeRTOS_9_0/Source/tasks.c **** 
 380:../../../FreeRTOS_9_0/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 381:../../../FreeRTOS_9_0/Source/tasks.c **** static variables must be declared volatile. */
 382:../../../FreeRTOS_9_0/Source/tasks.c **** 
 383:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 384:../../../FreeRTOS_9_0/Source/tasks.c **** 
 385:../../../FreeRTOS_9_0/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 386:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 387:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 388:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 389:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 390:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 391:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 392:../../../FreeRTOS_9_0/Source/tasks.c **** 
 393:../../../FreeRTOS_9_0/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 394:../../../FreeRTOS_9_0/Source/tasks.c **** 
 395:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 396:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 397:../../../FreeRTOS_9_0/Source/tasks.c **** 
 398:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 399:../../../FreeRTOS_9_0/Source/tasks.c **** 
 400:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 401:../../../FreeRTOS_9_0/Source/tasks.c **** 
 402:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 403:../../../FreeRTOS_9_0/Source/tasks.c **** 
 404:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 405:../../../FreeRTOS_9_0/Source/tasks.c **** 
 406:../../../FreeRTOS_9_0/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 407:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 408:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 409:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 410:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 411:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 412:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 413:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 414:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 415:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 416:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 417:../../../FreeRTOS_9_0/Source/tasks.c **** 
 418:../../../FreeRTOS_9_0/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 419:../../../FreeRTOS_9_0/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 420:../../../FreeRTOS_9_0/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 421:../../../FreeRTOS_9_0/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 422:../../../FreeRTOS_9_0/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 423:../../../FreeRTOS_9_0/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 424:../../../FreeRTOS_9_0/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 425:../../../FreeRTOS_9_0/Source/tasks.c **** accessed from a critical section. */
 426:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
ARM GAS  /tmp/cc623FKg.s 			page 11


 427:../../../FreeRTOS_9_0/Source/tasks.c **** 
 428:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 429:../../../FreeRTOS_9_0/Source/tasks.c **** 
 430:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 431:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 432:../../../FreeRTOS_9_0/Source/tasks.c **** 
 433:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 434:../../../FreeRTOS_9_0/Source/tasks.c **** 
 435:../../../FreeRTOS_9_0/Source/tasks.c **** /*lint +e956 */
 436:../../../FreeRTOS_9_0/Source/tasks.c **** 
 437:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 438:../../../FreeRTOS_9_0/Source/tasks.c **** 
 439:../../../FreeRTOS_9_0/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 440:../../../FreeRTOS_9_0/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 441:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 442:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 443:../../../FreeRTOS_9_0/Source/tasks.c **** 
 444:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 445:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 446:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 447:../../../FreeRTOS_9_0/Source/tasks.c **** 
 448:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 449:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 450:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 451:../../../FreeRTOS_9_0/Source/tasks.c **** 
 452:../../../FreeRTOS_9_0/Source/tasks.c **** /* File private functions. --------------------------------*/
 453:../../../FreeRTOS_9_0/Source/tasks.c **** 
 454:../../../FreeRTOS_9_0/Source/tasks.c **** /**
 455:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 456:../../../FreeRTOS_9_0/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 457:../../../FreeRTOS_9_0/Source/tasks.c ****  * is in any other state.
 458:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 459:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 460:../../../FreeRTOS_9_0/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 461:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 462:../../../FreeRTOS_9_0/Source/tasks.c **** 
 463:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 464:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 465:../../../FreeRTOS_9_0/Source/tasks.c ****  * automatically upon the creation of the first task.
 466:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 467:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 468:../../../FreeRTOS_9_0/Source/tasks.c **** 
 469:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 470:../../../FreeRTOS_9_0/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 471:../../../FreeRTOS_9_0/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 472:../../../FreeRTOS_9_0/Source/tasks.c ****  * creation of the first user task.
 473:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 474:../../../FreeRTOS_9_0/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 475:../../../FreeRTOS_9_0/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 476:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 477:../../../FreeRTOS_9_0/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 478:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 479:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 480:../../../FreeRTOS_9_0/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 481:../../../FreeRTOS_9_0/Source/tasks.c **** 
 482:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 483:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
ARM GAS  /tmp/cc623FKg.s 			page 12


 484:../../../FreeRTOS_9_0/Source/tasks.c ****  * including the stack pointed to by the TCB.
 485:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 486:../../../FreeRTOS_9_0/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 487:../../../FreeRTOS_9_0/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 488:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 489:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 490:../../../FreeRTOS_9_0/Source/tasks.c **** 
 491:../../../FreeRTOS_9_0/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 492:../../../FreeRTOS_9_0/Source/tasks.c **** 
 493:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 494:../../../FreeRTOS_9_0/Source/tasks.c **** 
 495:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 496:../../../FreeRTOS_9_0/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 497:../../../FreeRTOS_9_0/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 498:../../../FreeRTOS_9_0/Source/tasks.c ****  * and its TCB deleted.
 499:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 500:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 501:../../../FreeRTOS_9_0/Source/tasks.c **** 
 502:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 503:../../../FreeRTOS_9_0/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 504:../../../FreeRTOS_9_0/Source/tasks.c ****  * either the current or the overflow delayed task list.
 505:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 506:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 507:../../../FreeRTOS_9_0/Source/tasks.c **** 
 508:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 509:../../../FreeRTOS_9_0/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 510:../../../FreeRTOS_9_0/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 511:../../../FreeRTOS_9_0/Source/tasks.c ****  * a suspended list, etc.).
 512:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 513:../../../FreeRTOS_9_0/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 514:../../../FreeRTOS_9_0/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 515:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 516:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 517:../../../FreeRTOS_9_0/Source/tasks.c **** 
 518:../../../FreeRTOS_9_0/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 519:../../../FreeRTOS_9_0/Source/tasks.c **** 
 520:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 521:../../../FreeRTOS_9_0/Source/tasks.c **** 
 522:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 523:../../../FreeRTOS_9_0/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 524:../../../FreeRTOS_9_0/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 525:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 526:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 527:../../../FreeRTOS_9_0/Source/tasks.c **** 
 528:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 529:../../../FreeRTOS_9_0/Source/tasks.c **** 
 530:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 531:../../../FreeRTOS_9_0/Source/tasks.c **** 
 532:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 533:../../../FreeRTOS_9_0/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 534:../../../FreeRTOS_9_0/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 535:../../../FreeRTOS_9_0/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 536:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 537:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 538:../../../FreeRTOS_9_0/Source/tasks.c **** 
 539:../../../FreeRTOS_9_0/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 540:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 13


 541:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 542:../../../FreeRTOS_9_0/Source/tasks.c **** 
 543:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 544:../../../FreeRTOS_9_0/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 545:../../../FreeRTOS_9_0/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 546:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 547:../../../FreeRTOS_9_0/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 548:../../../FreeRTOS_9_0/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 549:../../../FreeRTOS_9_0/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 550:../../../FreeRTOS_9_0/Source/tasks.c ****  * set to a value other than 1.
 551:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 552:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 553:../../../FreeRTOS_9_0/Source/tasks.c **** 
 554:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 555:../../../FreeRTOS_9_0/Source/tasks.c **** 
 556:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 557:../../../FreeRTOS_9_0/Source/tasks.c **** 
 558:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 559:../../../FreeRTOS_9_0/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 560:../../../FreeRTOS_9_0/Source/tasks.c ****  * will exit the Blocked state.
 561:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 562:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 563:../../../FreeRTOS_9_0/Source/tasks.c **** 
 564:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 565:../../../FreeRTOS_9_0/Source/tasks.c **** 
 566:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*
 567:../../../FreeRTOS_9_0/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 568:../../../FreeRTOS_9_0/Source/tasks.c **** 	 * human readable tables of task information.
 569:../../../FreeRTOS_9_0/Source/tasks.c **** 	 */
 570:../../../FreeRTOS_9_0/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 571:../../../FreeRTOS_9_0/Source/tasks.c **** 
 572:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 573:../../../FreeRTOS_9_0/Source/tasks.c **** 
 574:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 575:../../../FreeRTOS_9_0/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 576:../../../FreeRTOS_9_0/Source/tasks.c ****  * dynamically to fill in the structure's members.
 577:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 578:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 579:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 580:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 582:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:../../../FreeRTOS_9_0/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 584:../../../FreeRTOS_9_0/Source/tasks.c **** 									TCB_t *pxNewTCB,
 585:../../../FreeRTOS_9_0/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 586:../../../FreeRTOS_9_0/Source/tasks.c **** 
 587:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 588:../../../FreeRTOS_9_0/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 589:../../../FreeRTOS_9_0/Source/tasks.c ****  * under the control of the scheduler.
 590:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 591:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 592:../../../FreeRTOS_9_0/Source/tasks.c **** 
 593:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 594:../../../FreeRTOS_9_0/Source/tasks.c **** 
 595:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 596:../../../FreeRTOS_9_0/Source/tasks.c **** 
 597:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
ARM GAS  /tmp/cc623FKg.s 			page 14


 598:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 599:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 600:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 601:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 602:../../../FreeRTOS_9_0/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 603:../../../FreeRTOS_9_0/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 604:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 605:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
 606:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xReturn;
 607:../../../FreeRTOS_9_0/Source/tasks.c **** 
 608:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 609:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 610:../../../FreeRTOS_9_0/Source/tasks.c **** 
 611:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 612:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 613:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 614:../../../FreeRTOS_9_0/Source/tasks.c **** 			function - use them. */
 615:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 616:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 617:../../../FreeRTOS_9_0/Source/tasks.c **** 
 618:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 619:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 620:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 621:../../../FreeRTOS_9_0/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 622:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 623:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 624:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 625:../../../FreeRTOS_9_0/Source/tasks.c **** 
 626:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 627:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 629:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 630:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 631:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = NULL;
 632:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 633:../../../FreeRTOS_9_0/Source/tasks.c **** 
 634:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 635:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 636:../../../FreeRTOS_9_0/Source/tasks.c **** 
 637:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 638:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 639:../../../FreeRTOS_9_0/Source/tasks.c **** 
 640:../../../FreeRTOS_9_0/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 641:../../../FreeRTOS_9_0/Source/tasks.c **** 
 642:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 643:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 644:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
 645:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 646:../../../FreeRTOS_9_0/Source/tasks.c **** 
 647:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 648:../../../FreeRTOS_9_0/Source/tasks.c **** 
 649:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 650:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 651:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 652:../../../FreeRTOS_9_0/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 653:../../../FreeRTOS_9_0/Source/tasks.c **** 			not static allocation is being used. */
 654:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
ARM GAS  /tmp/cc623FKg.s 			page 15


 655:../../../FreeRTOS_9_0/Source/tasks.c **** 
 656:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxNewTCB != NULL )
 657:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 658:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 659:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 660:../../../FreeRTOS_9_0/Source/tasks.c **** 
 661:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 662:../../../FreeRTOS_9_0/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 663:../../../FreeRTOS_9_0/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 664:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 665:../../../FreeRTOS_9_0/Source/tasks.c **** 
 666:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 667:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->pcName,
 668:../../../FreeRTOS_9_0/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 669:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 670:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 671:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 672:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 673:../../../FreeRTOS_9_0/Source/tasks.c **** 
 674:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 675:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdPASS;
 676:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 677:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 678:../../../FreeRTOS_9_0/Source/tasks.c **** 
 679:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 680:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 681:../../../FreeRTOS_9_0/Source/tasks.c **** 
 682:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 683:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 684:../../../FreeRTOS_9_0/Source/tasks.c **** 
 685:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 686:../../../FreeRTOS_9_0/Source/tasks.c **** 
 687:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 688:../../../FreeRTOS_9_0/Source/tasks.c **** 							const char * const pcName,
 689:../../../FreeRTOS_9_0/Source/tasks.c **** 							const uint16_t usStackDepth,
 690:../../../FreeRTOS_9_0/Source/tasks.c **** 							void * const pvParameters,
 691:../../../FreeRTOS_9_0/Source/tasks.c **** 							UBaseType_t uxPriority,
 692:../../../FreeRTOS_9_0/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 693:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 168              		.loc 1 693 0
 169              		.cfi_startproc
 170              		@ args = 8, pretend = 0, frame = 32
 171              		@ frame_needed = 1, uses_anonymous_args = 0
 172 0000 80B5     		push	{r7, lr}
 173              	.LCFI0:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
 177 0002 8CB0     		sub	sp, sp, #48
 178              	.LCFI1:
 179              		.cfi_def_cfa_offset 56
 180 0004 04AF     		add	r7, sp, #16
 181              	.LCFI2:
 182              		.cfi_def_cfa 7, 40
 183 0006 F860     		str	r0, [r7, #12]
 184 0008 B960     		str	r1, [r7, #8]
 185 000a 3B60     		str	r3, [r7]
ARM GAS  /tmp/cc623FKg.s 			page 16


 186 000c 1346     		mov	r3, r2	@ movhi
 187 000e FB80     		strh	r3, [r7, #6]	@ movhi
 188              	.LBB93:
 694:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
 695:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
 696:../../../FreeRTOS_9_0/Source/tasks.c **** 
 697:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 698:../../../FreeRTOS_9_0/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 699:../../../FreeRTOS_9_0/Source/tasks.c **** 		the TCB then the stack. */
 700:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 701:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 702:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 703:../../../FreeRTOS_9_0/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 704:../../../FreeRTOS_9_0/Source/tasks.c **** 			allocation is being used. */
 705:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 706:../../../FreeRTOS_9_0/Source/tasks.c **** 
 707:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxNewTCB != NULL )
 708:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 709:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 710:../../../FreeRTOS_9_0/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 711:../../../FreeRTOS_9_0/Source/tasks.c **** 				be deleted later if required. */
 712:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 713:../../../FreeRTOS_9_0/Source/tasks.c **** 
 714:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 715:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 716:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 717:../../../FreeRTOS_9_0/Source/tasks.c **** 					vPortFree( pxNewTCB );
 718:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxNewTCB = NULL;
 719:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 720:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 721:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 722:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 723:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 724:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t *pxStack;
 725:../../../FreeRTOS_9_0/Source/tasks.c **** 
 726:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 727:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 189              		.loc 1 727 0
 190 0010 FB88     		ldrh	r3, [r7, #6]
 191 0012 9B00     		lsls	r3, r3, #2
 192 0014 1846     		mov	r0, r3
 193 0016 FFF7FEFF 		bl	pvPortMalloc
 194 001a 7861     		str	r0, [r7, #20]
 728:../../../FreeRTOS_9_0/Source/tasks.c **** 
 729:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxStack != NULL )
 195              		.loc 1 729 0
 196 001c 7B69     		ldr	r3, [r7, #20]
 197 001e 002B     		cmp	r3, #0
 198 0020 0ED0     		beq	.L2
 730:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 731:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Allocate space for the TCB. */
 732:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 199              		.loc 1 732 0
 200 0022 6C20     		movs	r0, #108
 201 0024 FFF7FEFF 		bl	pvPortMalloc
 202 0028 F861     		str	r0, [r7, #28]
 733:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 17


 734:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxNewTCB != NULL )
 203              		.loc 1 734 0
 204 002a FB69     		ldr	r3, [r7, #28]
 205 002c 002B     		cmp	r3, #0
 206 002e 03D0     		beq	.L3
 735:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 736:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 737:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 207              		.loc 1 737 0
 208 0030 FB69     		ldr	r3, [r7, #28]
 209 0032 7A69     		ldr	r2, [r7, #20]
 210 0034 1A63     		str	r2, [r3, #48]
 211 0036 05E0     		b	.L5
 212              	.L3:
 738:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 739:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
 740:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 741:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 742:../../../FreeRTOS_9_0/Source/tasks.c **** 					it again. */
 743:../../../FreeRTOS_9_0/Source/tasks.c **** 					vPortFree( pxStack );
 213              		.loc 1 743 0
 214 0038 7869     		ldr	r0, [r7, #20]
 215 003a FFF7FEFF 		bl	vPortFree
 216 003e 01E0     		b	.L5
 217              	.L2:
 744:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 745:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 746:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
 747:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 748:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB = NULL;
 218              		.loc 1 748 0
 219 0040 0023     		movs	r3, #0
 220 0042 FB61     		str	r3, [r7, #28]
 221              	.L5:
 222              	.LBE93:
 749:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 750:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 751:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 752:../../../FreeRTOS_9_0/Source/tasks.c **** 
 753:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxNewTCB != NULL )
 223              		.loc 1 753 0
 224 0044 FB69     		ldr	r3, [r7, #28]
 225 0046 002B     		cmp	r3, #0
 226 0048 13D0     		beq	.L6
 754:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 755:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 756:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 757:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 758:../../../FreeRTOS_9_0/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 759:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 760:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 761:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 762:../../../FreeRTOS_9_0/Source/tasks.c **** 
 763:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 227              		.loc 1 763 0
 228 004a FA88     		ldrh	r2, [r7, #6]
 229 004c BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/cc623FKg.s 			page 18


 230 004e 0093     		str	r3, [sp]
 231 0050 FB6A     		ldr	r3, [r7, #44]
 232 0052 0193     		str	r3, [sp, #4]
 233 0054 FB69     		ldr	r3, [r7, #28]
 234 0056 0293     		str	r3, [sp, #8]
 235 0058 0023     		movs	r3, #0
 236 005a 0393     		str	r3, [sp, #12]
 237 005c F868     		ldr	r0, [r7, #12]
 238 005e B968     		ldr	r1, [r7, #8]
 239 0060 3B68     		ldr	r3, [r7]
 240 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 764:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 241              		.loc 1 764 0
 242 0066 F869     		ldr	r0, [r7, #28]
 243 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 765:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdPASS;
 244              		.loc 1 765 0
 245 006c 0123     		movs	r3, #1
 246 006e BB61     		str	r3, [r7, #24]
 247 0070 02E0     		b	.L7
 248              	.L6:
 766:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 767:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 768:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 769:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 249              		.loc 1 769 0
 250 0072 4FF0FF33 		mov	r3, #-1
 251 0076 BB61     		str	r3, [r7, #24]
 252              	.L7:
 770:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 771:../../../FreeRTOS_9_0/Source/tasks.c **** 
 772:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 253              		.loc 1 772 0
 254 0078 BB69     		ldr	r3, [r7, #24]
 773:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 255              		.loc 1 773 0
 256 007a 1846     		mov	r0, r3
 257 007c 2037     		adds	r7, r7, #32
 258              	.LCFI3:
 259              		.cfi_def_cfa_offset 8
 260 007e BD46     		mov	sp, r7
 261              	.LCFI4:
 262              		.cfi_def_cfa_register 13
 263              		@ sp needed
 264 0080 80BD     		pop	{r7, pc}
 265              		.cfi_endproc
 266              	.LFE5:
 268 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 269              		.align	2
 270              		.thumb
 271              		.thumb_func
 273              	prvInitialiseNewTask:
 274              	.LFB6:
 774:../../../FreeRTOS_9_0/Source/tasks.c **** 
 775:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 776:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 777:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 19


 778:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 779:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 780:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 781:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 782:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 783:../../../FreeRTOS_9_0/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 784:../../../FreeRTOS_9_0/Source/tasks.c **** 									TCB_t *pxNewTCB,
 785:../../../FreeRTOS_9_0/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 786:../../../FreeRTOS_9_0/Source/tasks.c **** {
 275              		.loc 1 786 0
 276              		.cfi_startproc
 277              		@ args = 16, pretend = 0, frame = 32
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279 0000 80B5     		push	{r7, lr}
 280              	.LCFI5:
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 284 0002 88B0     		sub	sp, sp, #32
 285              	.LCFI6:
 286              		.cfi_def_cfa_offset 40
 287 0004 00AF     		add	r7, sp, #0
 288              	.LCFI7:
 289              		.cfi_def_cfa_register 7
 290 0006 F860     		str	r0, [r7, #12]
 291 0008 B960     		str	r1, [r7, #8]
 292 000a 7A60     		str	r2, [r7, #4]
 293 000c 3B60     		str	r3, [r7]
 787:../../../FreeRTOS_9_0/Source/tasks.c **** StackType_t *pxTopOfStack;
 788:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t x;
 789:../../../FreeRTOS_9_0/Source/tasks.c **** 
 790:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 791:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 792:../../../FreeRTOS_9_0/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 793:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 794:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 795:../../../FreeRTOS_9_0/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 796:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 797:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 798:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 799:../../../FreeRTOS_9_0/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 800:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 801:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 802:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 803:../../../FreeRTOS_9_0/Source/tasks.c **** 
 804:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 805:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 806:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 807:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 808:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 294              		.loc 1 808 0
 295 000e 3B6B     		ldr	r3, [r7, #48]
 296 0010 1A6B     		ldr	r2, [r3, #48]
 297 0012 7B68     		ldr	r3, [r7, #4]
 298 0014 9B00     		lsls	r3, r3, #2
 299 0016 1046     		mov	r0, r2
 300 0018 A521     		movs	r1, #165
ARM GAS  /tmp/cc623FKg.s 			page 20


 301 001a 1A46     		mov	r2, r3
 302 001c FFF7FEFF 		bl	memset
 809:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 810:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 811:../../../FreeRTOS_9_0/Source/tasks.c **** 
 812:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 813:../../../FreeRTOS_9_0/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 814:../../../FreeRTOS_9_0/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 815:../../../FreeRTOS_9_0/Source/tasks.c **** 	by the port. */
 816:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 817:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 818:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 303              		.loc 1 818 0
 304 0020 3B6B     		ldr	r3, [r7, #48]
 305 0022 1A6B     		ldr	r2, [r3, #48]
 306 0024 7968     		ldr	r1, [r7, #4]
 307 0026 6FF04043 		mvn	r3, #-1073741824
 308 002a 0B44     		add	r3, r3, r1
 309 002c 9B00     		lsls	r3, r3, #2
 310 002e 1344     		add	r3, r3, r2
 311 0030 BB61     		str	r3, [r7, #24]
 819:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 312              		.loc 1 819 0
 313 0032 BB69     		ldr	r3, [r7, #24]
 314 0034 23F00703 		bic	r3, r3, #7
 315 0038 BB61     		str	r3, [r7, #24]
 820:../../../FreeRTOS_9_0/Source/tasks.c **** 
 821:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 822:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 316              		.loc 1 822 0
 317 003a BB69     		ldr	r3, [r7, #24]
 318 003c 03F00703 		and	r3, r3, #7
 319 0040 002B     		cmp	r3, #0
 320 0042 09D0     		beq	.L10
 321              	.LBB94:
 322              	.LBB95:
 323              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
ARM GAS  /tmp/cc623FKg.s 			page 21


  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc623FKg.s 			page 22


  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
ARM GAS  /tmp/cc623FKg.s 			page 23


 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
ARM GAS  /tmp/cc623FKg.s 			page 24


 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 324              		.loc 2 237 0 discriminator 1
 325              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 326 0044 4FF05003 			mov r3, #80												
 327 0048 83F31188 		msr basepri, r3											
 328 004c BFF36F8F 		isb														
 329 0050 BFF34F8F 		dsb														
 330              	
 331              	@ 0 "" 2
 332              		.thumb
 333 0054 7B61     		str	r3, [r7, #20]
 334              	.L11:
ARM GAS  /tmp/cc623FKg.s 			page 25


 335              	.LBE95:
 336              	.LBE94:
 337              		.loc 1 822 0 discriminator 1
 338 0056 FEE7     		b	.L11
 339              	.L10:
 823:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 824:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 825:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 826:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 827:../../../FreeRTOS_9_0/Source/tasks.c **** 
 828:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 829:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 830:../../../FreeRTOS_9_0/Source/tasks.c **** 
 831:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 832:../../../FreeRTOS_9_0/Source/tasks.c **** 		performed. */
 833:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 834:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 835:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 836:../../../FreeRTOS_9_0/Source/tasks.c **** 
 837:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the task name in the TCB. */
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 340              		.loc 1 838 0
 341 0058 0023     		movs	r3, #0
 342 005a FB61     		str	r3, [r7, #28]
 343 005c 13E0     		b	.L12
 344              	.L15:
 839:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 840:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 345              		.loc 1 840 0
 346 005e BA68     		ldr	r2, [r7, #8]
 347 0060 FB69     		ldr	r3, [r7, #28]
 348 0062 1344     		add	r3, r3, r2
 349 0064 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 350 0066 3A6B     		ldr	r2, [r7, #48]
 351 0068 FB69     		ldr	r3, [r7, #28]
 352 006a 1344     		add	r3, r3, r2
 353 006c 3033     		adds	r3, r3, #48
 354 006e 0A46     		mov	r2, r1
 355 0070 1A71     		strb	r2, [r3, #4]
 841:../../../FreeRTOS_9_0/Source/tasks.c **** 
 842:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 843:../../../FreeRTOS_9_0/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 844:../../../FreeRTOS_9_0/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 845:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 356              		.loc 1 845 0
 357 0072 BA68     		ldr	r2, [r7, #8]
 358 0074 FB69     		ldr	r3, [r7, #28]
 359 0076 1344     		add	r3, r3, r2
 360 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 361 007a 002B     		cmp	r3, #0
 362 007c 00D1     		bne	.L13
 846:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 847:../../../FreeRTOS_9_0/Source/tasks.c **** 			break;
 363              		.loc 1 847 0
 364 007e 05E0     		b	.L14
 365              	.L13:
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
ARM GAS  /tmp/cc623FKg.s 			page 26


 366              		.loc 1 838 0 discriminator 2
 367 0080 FB69     		ldr	r3, [r7, #28]
 368 0082 0133     		adds	r3, r3, #1
 369 0084 FB61     		str	r3, [r7, #28]
 370              	.L12:
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 371              		.loc 1 838 0 is_stmt 0 discriminator 1
 372 0086 FB69     		ldr	r3, [r7, #28]
 373 0088 0F2B     		cmp	r3, #15
 374 008a E8D9     		bls	.L15
 375              	.L14:
 848:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 849:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 850:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 851:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 852:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 853:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 854:../../../FreeRTOS_9_0/Source/tasks.c **** 
 855:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 856:../../../FreeRTOS_9_0/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 857:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 376              		.loc 1 857 0 is_stmt 1
 377 008c 3B6B     		ldr	r3, [r7, #48]
 378 008e 0022     		movs	r2, #0
 379 0090 83F84320 		strb	r2, [r3, #67]
 858:../../../FreeRTOS_9_0/Source/tasks.c **** 
 859:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 860:../../../FreeRTOS_9_0/Source/tasks.c **** 	remove the privilege bit if one is present. */
 861:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 380              		.loc 1 861 0
 381 0094 BB6A     		ldr	r3, [r7, #40]
 382 0096 062B     		cmp	r3, #6
 383 0098 01D9     		bls	.L16
 862:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 863:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 384              		.loc 1 863 0
 385 009a 0623     		movs	r3, #6
 386 009c BB62     		str	r3, [r7, #40]
 387              	.L16:
 864:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 865:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
 866:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 867:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 868:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 869:../../../FreeRTOS_9_0/Source/tasks.c **** 
 870:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 388              		.loc 1 870 0
 389 009e 3B6B     		ldr	r3, [r7, #48]
 390 00a0 BA6A     		ldr	r2, [r7, #40]
 391 00a2 DA62     		str	r2, [r3, #44]
 871:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 872:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 873:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 392              		.loc 1 873 0
 393 00a4 3B6B     		ldr	r3, [r7, #48]
 394 00a6 BA6A     		ldr	r2, [r7, #40]
 395 00a8 DA64     		str	r2, [r3, #76]
ARM GAS  /tmp/cc623FKg.s 			page 27


 874:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 396              		.loc 1 874 0
 397 00aa 3B6B     		ldr	r3, [r7, #48]
 398 00ac 0022     		movs	r2, #0
 399 00ae 1A65     		str	r2, [r3, #80]
 875:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 876:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 877:../../../FreeRTOS_9_0/Source/tasks.c **** 
 878:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 400              		.loc 1 878 0
 401 00b0 3B6B     		ldr	r3, [r7, #48]
 402 00b2 0433     		adds	r3, r3, #4
 403 00b4 1846     		mov	r0, r3
 404 00b6 FFF7FEFF 		bl	vListInitialiseItem
 879:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 405              		.loc 1 879 0
 406 00ba 3B6B     		ldr	r3, [r7, #48]
 407 00bc 1833     		adds	r3, r3, #24
 408 00be 1846     		mov	r0, r3
 409 00c0 FFF7FEFF 		bl	vListInitialiseItem
 880:../../../FreeRTOS_9_0/Source/tasks.c **** 
 881:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 882:../../../FreeRTOS_9_0/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 883:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 410              		.loc 1 883 0
 411 00c4 3B6B     		ldr	r3, [r7, #48]
 412 00c6 3A6B     		ldr	r2, [r7, #48]
 413 00c8 1A61     		str	r2, [r3, #16]
 884:../../../FreeRTOS_9_0/Source/tasks.c **** 
 885:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Event lists are always in priority order. */
 886:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 414              		.loc 1 886 0
 415 00ca BB6A     		ldr	r3, [r7, #40]
 416 00cc C3F10702 		rsb	r2, r3, #7
 417 00d0 3B6B     		ldr	r3, [r7, #48]
 418 00d2 9A61     		str	r2, [r3, #24]
 887:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 419              		.loc 1 887 0
 420 00d4 3B6B     		ldr	r3, [r7, #48]
 421 00d6 3A6B     		ldr	r2, [r7, #48]
 422 00d8 5A62     		str	r2, [r3, #36]
 888:../../../FreeRTOS_9_0/Source/tasks.c **** 
 889:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 890:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 891:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 892:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 893:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 894:../../../FreeRTOS_9_0/Source/tasks.c **** 
 895:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 896:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 897:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 898:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 899:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 900:../../../FreeRTOS_9_0/Source/tasks.c **** 
 901:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 902:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 903:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
ARM GAS  /tmp/cc623FKg.s 			page 28


 423              		.loc 1 903 0
 424 00da 3B6B     		ldr	r3, [r7, #48]
 425 00dc 0022     		movs	r2, #0
 426 00de 1A66     		str	r2, [r3, #96]
 904:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 905:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 906:../../../FreeRTOS_9_0/Source/tasks.c **** 
 907:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 908:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 909:../../../FreeRTOS_9_0/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 910:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 911:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else
 912:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 913:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 914:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xRegions;
 915:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 916:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 917:../../../FreeRTOS_9_0/Source/tasks.c **** 
 918:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 919:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 920:../../../FreeRTOS_9_0/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 427              		.loc 1 920 0
 428 00e0 0023     		movs	r3, #0
 429 00e2 FB61     		str	r3, [r7, #28]
 430 00e4 09E0     		b	.L17
 431              	.L18:
 921:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 922:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 432              		.loc 1 922 0 discriminator 3
 433 00e6 3A6B     		ldr	r2, [r7, #48]
 434 00e8 FB69     		ldr	r3, [r7, #28]
 435 00ea 1433     		adds	r3, r3, #20
 436 00ec 9B00     		lsls	r3, r3, #2
 437 00ee 1344     		add	r3, r3, r2
 438 00f0 0022     		movs	r2, #0
 439 00f2 5A60     		str	r2, [r3, #4]
 920:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 440              		.loc 1 920 0 discriminator 3
 441 00f4 FB69     		ldr	r3, [r7, #28]
 442 00f6 0133     		adds	r3, r3, #1
 443 00f8 FB61     		str	r3, [r7, #28]
 444              	.L17:
 920:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 445              		.loc 1 920 0 is_stmt 0 discriminator 1
 446 00fa FB69     		ldr	r3, [r7, #28]
 447 00fc 022B     		cmp	r3, #2
 448 00fe F2D9     		bls	.L18
 923:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 924:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 925:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 926:../../../FreeRTOS_9_0/Source/tasks.c **** 
 927:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 928:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 929:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 449              		.loc 1 929 0 is_stmt 1
 450 0100 3B6B     		ldr	r3, [r7, #48]
 451 0102 0022     		movs	r2, #0
ARM GAS  /tmp/cc623FKg.s 			page 29


 452 0104 5A66     		str	r2, [r3, #100]
 930:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 453              		.loc 1 930 0
 454 0106 3B6B     		ldr	r3, [r7, #48]
 455 0108 0022     		movs	r2, #0
 456 010a 83F86820 		strb	r2, [r3, #104]
 931:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 932:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 933:../../../FreeRTOS_9_0/Source/tasks.c **** 
 934:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 935:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 936:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 937:../../../FreeRTOS_9_0/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 938:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 939:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 940:../../../FreeRTOS_9_0/Source/tasks.c **** 
 941:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 942:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 943:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 944:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 945:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 946:../../../FreeRTOS_9_0/Source/tasks.c **** 
 947:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 948:../../../FreeRTOS_9_0/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 949:../../../FreeRTOS_9_0/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 950:../../../FreeRTOS_9_0/Source/tasks.c **** 	the	top of stack variable is updated. */
 951:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 952:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 953:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 954:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 955:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 956:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 957:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 457              		.loc 1 957 0
 458 010e B869     		ldr	r0, [r7, #24]
 459 0110 F968     		ldr	r1, [r7, #12]
 460 0112 3A68     		ldr	r2, [r7]
 461 0114 FFF7FEFF 		bl	pxPortInitialiseStack
 462 0118 0246     		mov	r2, r0
 463 011a 3B6B     		ldr	r3, [r7, #48]
 464 011c 1A60     		str	r2, [r3]
 958:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 959:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 960:../../../FreeRTOS_9_0/Source/tasks.c **** 
 961:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 465              		.loc 1 961 0
 466 011e FB6A     		ldr	r3, [r7, #44]
 467 0120 002B     		cmp	r3, #0
 468 0122 02D0     		beq	.L9
 962:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 963:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 964:../../../FreeRTOS_9_0/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 965:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 469              		.loc 1 965 0
 470 0124 FB6A     		ldr	r3, [r7, #44]
 471 0126 3A6B     		ldr	r2, [r7, #48]
 472 0128 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc623FKg.s 			page 30


 473              	.L9:
 966:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 967:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
 968:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 969:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 970:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 971:../../../FreeRTOS_9_0/Source/tasks.c **** }
 474              		.loc 1 971 0
 475 012a 2037     		adds	r7, r7, #32
 476              	.LCFI8:
 477              		.cfi_def_cfa_offset 8
 478 012c BD46     		mov	sp, r7
 479              	.LCFI9:
 480              		.cfi_def_cfa_register 13
 481              		@ sp needed
 482 012e 80BD     		pop	{r7, pc}
 483              		.cfi_endproc
 484              	.LFE6:
 486              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 487              		.align	2
 488              		.thumb
 489              		.thumb_func
 491              	prvAddNewTaskToReadyList:
 492              	.LFB7:
 972:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 973:../../../FreeRTOS_9_0/Source/tasks.c **** 
 974:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 975:../../../FreeRTOS_9_0/Source/tasks.c **** {
 493              		.loc 1 975 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 8
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497 0000 B0B5     		push	{r4, r5, r7, lr}
 498              	.LCFI10:
 499              		.cfi_def_cfa_offset 16
 500              		.cfi_offset 4, -16
 501              		.cfi_offset 5, -12
 502              		.cfi_offset 7, -8
 503              		.cfi_offset 14, -4
 504 0002 84B0     		sub	sp, sp, #16
 505              	.LCFI11:
 506              		.cfi_def_cfa_offset 32
 507 0004 02AF     		add	r7, sp, #8
 508              	.LCFI12:
 509              		.cfi_def_cfa 7, 24
 510 0006 7860     		str	r0, [r7, #4]
 976:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 977:../../../FreeRTOS_9_0/Source/tasks.c **** 	updated. */
 978:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 511              		.loc 1 978 0
 512 0008 FFF7FEFF 		bl	vPortEnterCritical
 979:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 980:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 513              		.loc 1 980 0
 514 000c 3C4B     		ldr	r3, .L25
 515 000e 1B68     		ldr	r3, [r3]
 516 0010 0133     		adds	r3, r3, #1
ARM GAS  /tmp/cc623FKg.s 			page 31


 517 0012 3B4A     		ldr	r2, .L25
 518 0014 1360     		str	r3, [r2]
 981:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 519              		.loc 1 981 0
 520 0016 3B4B     		ldr	r3, .L25+4
 521 0018 1B68     		ldr	r3, [r3]
 522 001a 002B     		cmp	r3, #0
 523 001c 09D1     		bne	.L21
 982:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 983:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 984:../../../FreeRTOS_9_0/Source/tasks.c **** 			the suspended state - make this the current task. */
 985:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 524              		.loc 1 985 0
 525 001e 394A     		ldr	r2, .L25+4
 526 0020 7B68     		ldr	r3, [r7, #4]
 527 0022 1360     		str	r3, [r2]
 986:../../../FreeRTOS_9_0/Source/tasks.c **** 
 987:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 528              		.loc 1 987 0
 529 0024 364B     		ldr	r3, .L25
 530 0026 1B68     		ldr	r3, [r3]
 531 0028 012B     		cmp	r3, #1
 532 002a 10D1     		bne	.L22
 988:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 989:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 990:../../../FreeRTOS_9_0/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 991:../../../FreeRTOS_9_0/Source/tasks.c **** 				fails, but we will report the failure. */
 992:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvInitialiseTaskLists();
 533              		.loc 1 992 0
 534 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 535 0030 0DE0     		b	.L22
 536              	.L21:
 993:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 994:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
 995:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 996:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 997:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 998:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 999:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1000:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1001:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1002:../../../FreeRTOS_9_0/Source/tasks.c **** 			current task if it is the highest priority task to be created
1003:../../../FreeRTOS_9_0/Source/tasks.c **** 			so far. */
1004:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 537              		.loc 1 1004 0
 538 0032 354B     		ldr	r3, .L25+8
 539 0034 1B68     		ldr	r3, [r3]
 540 0036 002B     		cmp	r3, #0
 541 0038 09D1     		bne	.L22
1005:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1006:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 542              		.loc 1 1006 0
 543 003a 324B     		ldr	r3, .L25+4
 544 003c 1B68     		ldr	r3, [r3]
 545 003e DA6A     		ldr	r2, [r3, #44]
 546 0040 7B68     		ldr	r3, [r7, #4]
 547 0042 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/cc623FKg.s 			page 32


 548 0044 9A42     		cmp	r2, r3
 549 0046 02D8     		bhi	.L22
1007:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1008:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 550              		.loc 1 1008 0
 551 0048 2E4A     		ldr	r2, .L25+4
 552 004a 7B68     		ldr	r3, [r7, #4]
 553 004c 1360     		str	r3, [r2]
 554              	.L22:
1009:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1010:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1011:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1012:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1013:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1014:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1015:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1016:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1017:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1018:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1019:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1020:../../../FreeRTOS_9_0/Source/tasks.c **** 
1021:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxTaskNumber++;
 555              		.loc 1 1021 0
 556 004e 2F4B     		ldr	r3, .L25+12
 557 0050 1B68     		ldr	r3, [r3]
 558 0052 0133     		adds	r3, r3, #1
 559 0054 2D4A     		ldr	r2, .L25+12
 560 0056 1360     		str	r3, [r2]
1022:../../../FreeRTOS_9_0/Source/tasks.c **** 
1023:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1024:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1025:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1026:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 561              		.loc 1 1026 0
 562 0058 2C4B     		ldr	r3, .L25+12
 563 005a 1A68     		ldr	r2, [r3]
 564 005c 7B68     		ldr	r3, [r7, #4]
 565 005e 5A64     		str	r2, [r3, #68]
1027:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1028:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1029:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
 566              		.loc 1 1029 0
 567 0060 7B68     		ldr	r3, [r7, #4]
 568 0062 002B     		cmp	r3, #0
 569 0064 16D0     		beq	.L23
 570              		.loc 1 1029 0 is_stmt 0 discriminator 1
 571 0066 7B68     		ldr	r3, [r7, #4]
 572 0068 1846     		mov	r0, r3
 573 006a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskCreate
 574 006e 7868     		ldr	r0, [r7, #4]
 575 0070 7B68     		ldr	r3, [r7, #4]
 576 0072 03F13401 		add	r1, r3, #52
 577 0076 7B68     		ldr	r3, [r7, #4]
 578 0078 DA6A     		ldr	r2, [r3, #44]
 579 007a 7B68     		ldr	r3, [r7, #4]
 580 007c 1B6B     		ldr	r3, [r3, #48]
 581 007e 1D46     		mov	r5, r3
ARM GAS  /tmp/cc623FKg.s 			page 33


 582 0080 7B68     		ldr	r3, [r7, #4]
 583 0082 1B68     		ldr	r3, [r3]
 584 0084 1C46     		mov	r4, r3
 585 0086 7B68     		ldr	r3, [r7, #4]
 586 0088 1B6B     		ldr	r3, [r3, #48]
 587 008a E31A     		subs	r3, r4, r3
 588 008c 0093     		str	r3, [sp]
 589 008e 2B46     		mov	r3, r5
 590 0090 FFF7FEFF 		bl	SYSVIEW_AddTask
 591              	.L23:
1030:../../../FreeRTOS_9_0/Source/tasks.c **** 
1031:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 592              		.loc 1 1031 0 is_stmt 1
 593 0094 7B68     		ldr	r3, [r7, #4]
 594 0096 1846     		mov	r0, r3
 595 0098 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 596 009c 7B68     		ldr	r3, [r7, #4]
 597 009e DB6A     		ldr	r3, [r3, #44]
 598 00a0 1A46     		mov	r2, r3
 599 00a2 0123     		movs	r3, #1
 600 00a4 03FA02F2 		lsl	r2, r3, r2
 601 00a8 194B     		ldr	r3, .L25+16
 602 00aa 1B68     		ldr	r3, [r3]
 603 00ac 1343     		orrs	r3, r3, r2
 604 00ae 184A     		ldr	r2, .L25+16
 605 00b0 1360     		str	r3, [r2]
 606 00b2 7B68     		ldr	r3, [r7, #4]
 607 00b4 DA6A     		ldr	r2, [r3, #44]
 608 00b6 1346     		mov	r3, r2
 609 00b8 9B00     		lsls	r3, r3, #2
 610 00ba 1344     		add	r3, r3, r2
 611 00bc 9B00     		lsls	r3, r3, #2
 612 00be 154A     		ldr	r2, .L25+20
 613 00c0 1A44     		add	r2, r2, r3
 614 00c2 7B68     		ldr	r3, [r7, #4]
 615 00c4 0433     		adds	r3, r3, #4
 616 00c6 1046     		mov	r0, r2
 617 00c8 1946     		mov	r1, r3
 618 00ca FFF7FEFF 		bl	vListInsertEnd
1032:../../../FreeRTOS_9_0/Source/tasks.c **** 
1033:../../../FreeRTOS_9_0/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1034:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1035:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 619              		.loc 1 1035 0
 620 00ce FFF7FEFF 		bl	vPortExitCritical
1036:../../../FreeRTOS_9_0/Source/tasks.c **** 
1037:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 621              		.loc 1 1037 0
 622 00d2 0D4B     		ldr	r3, .L25+8
 623 00d4 1B68     		ldr	r3, [r3]
 624 00d6 002B     		cmp	r3, #0
 625 00d8 0ED0     		beq	.L20
1038:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1039:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1040:../../../FreeRTOS_9_0/Source/tasks.c **** 		then it should run now. */
1041:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 626              		.loc 1 1041 0
ARM GAS  /tmp/cc623FKg.s 			page 34


 627 00da 0A4B     		ldr	r3, .L25+4
 628 00dc 1B68     		ldr	r3, [r3]
 629 00de DA6A     		ldr	r2, [r3, #44]
 630 00e0 7B68     		ldr	r3, [r7, #4]
 631 00e2 DB6A     		ldr	r3, [r3, #44]
 632 00e4 9A42     		cmp	r2, r3
 633 00e6 07D2     		bcs	.L20
1042:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1043:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 634              		.loc 1 1043 0
 635 00e8 0B4B     		ldr	r3, .L25+24
 636 00ea 4FF08052 		mov	r2, #268435456
 637 00ee 1A60     		str	r2, [r3]
 638              	@ 1043 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 639 00f0 BFF34F8F 		dsb
 640              	@ 0 "" 2
 641              	@ 1043 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 642 00f4 BFF36F8F 		isb
 643              	@ 0 "" 2
 644              		.thumb
 645              	.L20:
1044:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1045:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1046:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1047:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1048:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1049:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1050:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
1051:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1052:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1053:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1054:../../../FreeRTOS_9_0/Source/tasks.c **** }
 646              		.loc 1 1054 0
 647 00f8 0837     		adds	r7, r7, #8
 648              	.LCFI13:
 649              		.cfi_def_cfa_offset 16
 650 00fa BD46     		mov	sp, r7
 651              	.LCFI14:
 652              		.cfi_def_cfa_register 13
 653              		@ sp needed
 654 00fc B0BD     		pop	{r4, r5, r7, pc}
 655              	.L26:
 656 00fe 00BF     		.align	2
 657              	.L25:
 658 0100 00000000 		.word	uxCurrentNumberOfTasks
 659 0104 00000000 		.word	pxCurrentTCB
 660 0108 00000000 		.word	xSchedulerRunning
 661 010c 00000000 		.word	uxTaskNumber
 662 0110 00000000 		.word	uxTopReadyPriority
 663 0114 00000000 		.word	pxReadyTasksLists
 664 0118 04ED00E0 		.word	-536810236
 665              		.cfi_endproc
 666              	.LFE7:
 668              		.section	.text.vTaskDelete,"ax",%progbits
 669              		.align	2
 670              		.global	vTaskDelete
 671              		.thumb
ARM GAS  /tmp/cc623FKg.s 			page 35


 672              		.thumb_func
 674              	vTaskDelete:
 675              	.LFB8:
1055:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1056:../../../FreeRTOS_9_0/Source/tasks.c **** 
1057:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1058:../../../FreeRTOS_9_0/Source/tasks.c **** 
1059:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1060:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 676              		.loc 1 1060 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 16
 679              		@ frame_needed = 1, uses_anonymous_args = 0
 680 0000 80B5     		push	{r7, lr}
 681              	.LCFI15:
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 14, -4
 685 0002 84B0     		sub	sp, sp, #16
 686              	.LCFI16:
 687              		.cfi_def_cfa_offset 24
 688 0004 00AF     		add	r7, sp, #0
 689              	.LCFI17:
 690              		.cfi_def_cfa_register 7
 691 0006 7860     		str	r0, [r7, #4]
1061:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1062:../../../FreeRTOS_9_0/Source/tasks.c **** 
1063:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 692              		.loc 1 1063 0
 693 0008 FFF7FEFF 		bl	vPortEnterCritical
1064:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1065:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1066:../../../FreeRTOS_9_0/Source/tasks.c **** 			being deleted. */
1067:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 694              		.loc 1 1067 0
 695 000c 7B68     		ldr	r3, [r7, #4]
 696 000e 002B     		cmp	r3, #0
 697 0010 02D1     		bne	.L28
 698              		.loc 1 1067 0 is_stmt 0 discriminator 1
 699 0012 3C4B     		ldr	r3, .L38
 700 0014 1B68     		ldr	r3, [r3]
 701 0016 00E0     		b	.L29
 702              	.L28:
 703              		.loc 1 1067 0 discriminator 2
 704 0018 7B68     		ldr	r3, [r7, #4]
 705              	.L29:
 706              		.loc 1 1067 0 discriminator 4
 707 001a FB60     		str	r3, [r7, #12]
1068:../../../FreeRTOS_9_0/Source/tasks.c **** 
1069:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Remove task from the ready list. */
1070:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 708              		.loc 1 1070 0 is_stmt 1 discriminator 4
 709 001c FB68     		ldr	r3, [r7, #12]
 710 001e 0433     		adds	r3, r3, #4
 711 0020 1846     		mov	r0, r3
 712 0022 FFF7FEFF 		bl	uxListRemove
 713 0026 0346     		mov	r3, r0
ARM GAS  /tmp/cc623FKg.s 			page 36


 714 0028 002B     		cmp	r3, #0
 715 002a 15D1     		bne	.L30
1071:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1072:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 716              		.loc 1 1072 0
 717 002c FB68     		ldr	r3, [r7, #12]
 718 002e DA6A     		ldr	r2, [r3, #44]
 719 0030 3549     		ldr	r1, .L38+4
 720 0032 1346     		mov	r3, r2
 721 0034 9B00     		lsls	r3, r3, #2
 722 0036 1344     		add	r3, r3, r2
 723 0038 9B00     		lsls	r3, r3, #2
 724 003a 0B44     		add	r3, r3, r1
 725 003c 1B68     		ldr	r3, [r3]
 726 003e 002B     		cmp	r3, #0
 727 0040 0AD1     		bne	.L30
 728              		.loc 1 1072 0 is_stmt 0 discriminator 1
 729 0042 FB68     		ldr	r3, [r7, #12]
 730 0044 DB6A     		ldr	r3, [r3, #44]
 731 0046 1A46     		mov	r2, r3
 732 0048 0123     		movs	r3, #1
 733 004a 9340     		lsls	r3, r3, r2
 734 004c DA43     		mvns	r2, r3
 735 004e 2F4B     		ldr	r3, .L38+8
 736 0050 1B68     		ldr	r3, [r3]
 737 0052 1340     		ands	r3, r3, r2
 738 0054 2D4A     		ldr	r2, .L38+8
 739 0056 1360     		str	r3, [r2]
 740              	.L30:
1073:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1074:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1075:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1076:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1077:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1078:../../../FreeRTOS_9_0/Source/tasks.c **** 
1079:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1080:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 741              		.loc 1 1080 0 is_stmt 1
 742 0058 FB68     		ldr	r3, [r7, #12]
 743 005a 9B6A     		ldr	r3, [r3, #40]
 744 005c 002B     		cmp	r3, #0
 745 005e 04D0     		beq	.L32
1081:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1082:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 746              		.loc 1 1082 0
 747 0060 FB68     		ldr	r3, [r7, #12]
 748 0062 1833     		adds	r3, r3, #24
 749 0064 1846     		mov	r0, r3
 750 0066 FFF7FEFF 		bl	uxListRemove
 751              	.L32:
1083:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1084:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1085:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1086:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1087:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1088:../../../FreeRTOS_9_0/Source/tasks.c **** 
1089:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
ARM GAS  /tmp/cc623FKg.s 			page 37


1090:../../../FreeRTOS_9_0/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1091:../../../FreeRTOS_9_0/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1092:../../../FreeRTOS_9_0/Source/tasks.c **** 			not return. */
1093:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxTaskNumber++;
 752              		.loc 1 1093 0
 753 006a 294B     		ldr	r3, .L38+12
 754 006c 1B68     		ldr	r3, [r3]
 755 006e 0133     		adds	r3, r3, #1
 756 0070 274A     		ldr	r2, .L38+12
 757 0072 1360     		str	r3, [r2]
1094:../../../FreeRTOS_9_0/Source/tasks.c **** 
1095:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 758              		.loc 1 1095 0
 759 0074 234B     		ldr	r3, .L38
 760 0076 1B68     		ldr	r3, [r3]
 761 0078 FA68     		ldr	r2, [r7, #12]
 762 007a 9A42     		cmp	r2, r3
 763 007c 0BD1     		bne	.L33
1096:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1097:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1098:../../../FreeRTOS_9_0/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1099:../../../FreeRTOS_9_0/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1100:../../../FreeRTOS_9_0/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1101:../../../FreeRTOS_9_0/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1102:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 764              		.loc 1 1102 0
 765 007e FB68     		ldr	r3, [r7, #12]
 766 0080 0433     		adds	r3, r3, #4
 767 0082 2448     		ldr	r0, .L38+16
 768 0084 1946     		mov	r1, r3
 769 0086 FFF7FEFF 		bl	vListInsertEnd
1103:../../../FreeRTOS_9_0/Source/tasks.c **** 
1104:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1105:../../../FreeRTOS_9_0/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1106:../../../FreeRTOS_9_0/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1107:../../../FreeRTOS_9_0/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 770              		.loc 1 1107 0
 771 008a 234B     		ldr	r3, .L38+20
 772 008c 1B68     		ldr	r3, [r3]
 773 008e 0133     		adds	r3, r3, #1
 774 0090 214A     		ldr	r2, .L38+20
 775 0092 1360     		str	r3, [r2]
 776 0094 09E0     		b	.L34
 777              	.L33:
1108:../../../FreeRTOS_9_0/Source/tasks.c **** 
1109:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1110:../../../FreeRTOS_9_0/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1111:../../../FreeRTOS_9_0/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1112:../../../FreeRTOS_9_0/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1113:../../../FreeRTOS_9_0/Source/tasks.c **** 				required. */
1114:../../../FreeRTOS_9_0/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1115:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1116:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1117:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1118:../../../FreeRTOS_9_0/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 778              		.loc 1 1118 0
 779 0096 214B     		ldr	r3, .L38+24
ARM GAS  /tmp/cc623FKg.s 			page 38


 780 0098 1B68     		ldr	r3, [r3]
 781 009a 013B     		subs	r3, r3, #1
 782 009c 1F4A     		ldr	r2, .L38+24
 783 009e 1360     		str	r3, [r2]
1119:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 784              		.loc 1 1119 0
 785 00a0 F868     		ldr	r0, [r7, #12]
 786 00a2 FFF7FEFF 		bl	prvDeleteTCB
1120:../../../FreeRTOS_9_0/Source/tasks.c **** 
1121:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1122:../../../FreeRTOS_9_0/Source/tasks.c **** 				the task that has just been deleted. */
1123:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 787              		.loc 1 1123 0
 788 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 789              	.L34:
1124:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1125:../../../FreeRTOS_9_0/Source/tasks.c **** 
1126:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 790              		.loc 1 1126 0
 791 00aa FB68     		ldr	r3, [r7, #12]
 792 00ac 1846     		mov	r0, r3
 793 00ae FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 794 00b2 0346     		mov	r3, r0
 795 00b4 2220     		movs	r0, #34
 796 00b6 1946     		mov	r1, r3
 797 00b8 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1128:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 798              		.loc 1 1128 0
 799 00bc FFF7FEFF 		bl	vPortExitCritical
1129:../../../FreeRTOS_9_0/Source/tasks.c **** 
1130:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1131:../../../FreeRTOS_9_0/Source/tasks.c **** 		been deleted. */
1132:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 800              		.loc 1 1132 0
 801 00c0 174B     		ldr	r3, .L38+28
 802 00c2 1B68     		ldr	r3, [r3]
 803 00c4 002B     		cmp	r3, #0
 804 00c6 1AD0     		beq	.L27
1133:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1134:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 805              		.loc 1 1134 0
 806 00c8 0E4B     		ldr	r3, .L38
 807 00ca 1B68     		ldr	r3, [r3]
 808 00cc FA68     		ldr	r2, [r7, #12]
 809 00ce 9A42     		cmp	r2, r3
 810 00d0 15D1     		bne	.L27
1135:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1136:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 811              		.loc 1 1136 0
 812 00d2 144B     		ldr	r3, .L38+32
 813 00d4 1B68     		ldr	r3, [r3]
 814 00d6 002B     		cmp	r3, #0
 815 00d8 09D0     		beq	.L36
 816              	.LBB96:
 817              	.LBB97:
 818              		.loc 2 237 0 discriminator 1
ARM GAS  /tmp/cc623FKg.s 			page 39


 819              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 820 00da 4FF05003 			mov r3, #80												
 821 00de 83F31188 		msr basepri, r3											
 822 00e2 BFF36F8F 		isb														
 823 00e6 BFF34F8F 		dsb														
 824              	
 825              	@ 0 "" 2
 826              		.thumb
 827 00ea BB60     		str	r3, [r7, #8]
 828              	.L37:
 829              	.LBE97:
 830              	.LBE96:
 831              		.loc 1 1136 0 discriminator 1
 832 00ec FEE7     		b	.L37
 833              	.L36:
1137:../../../FreeRTOS_9_0/Source/tasks.c **** 				portYIELD_WITHIN_API();
 834              		.loc 1 1137 0
 835 00ee 0E4B     		ldr	r3, .L38+36
 836 00f0 4FF08052 		mov	r2, #268435456
 837 00f4 1A60     		str	r2, [r3]
 838              	@ 1137 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 839 00f6 BFF34F8F 		dsb
 840              	@ 0 "" 2
 841              	@ 1137 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 842 00fa BFF36F8F 		isb
 843              	@ 0 "" 2
 844              		.thumb
 845              	.L27:
1138:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1139:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1140:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1141:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1142:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1143:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1144:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 846              		.loc 1 1144 0
 847 00fe 1037     		adds	r7, r7, #16
 848              	.LCFI18:
 849              		.cfi_def_cfa_offset 8
 850 0100 BD46     		mov	sp, r7
 851              	.LCFI19:
 852              		.cfi_def_cfa_register 13
 853              		@ sp needed
 854 0102 80BD     		pop	{r7, pc}
 855              	.L39:
 856              		.align	2
 857              	.L38:
 858 0104 00000000 		.word	pxCurrentTCB
 859 0108 00000000 		.word	pxReadyTasksLists
 860 010c 00000000 		.word	uxTopReadyPriority
 861 0110 00000000 		.word	uxTaskNumber
 862 0114 00000000 		.word	xTasksWaitingTermination
 863 0118 00000000 		.word	uxDeletedTasksWaitingCleanUp
 864 011c 00000000 		.word	uxCurrentNumberOfTasks
 865 0120 00000000 		.word	xSchedulerRunning
 866 0124 00000000 		.word	uxSchedulerSuspended
 867 0128 04ED00E0 		.word	-536810236
ARM GAS  /tmp/cc623FKg.s 			page 40


 868              		.cfi_endproc
 869              	.LFE8:
 871              		.section	.text.vTaskDelay,"ax",%progbits
 872              		.align	2
 873              		.global	vTaskDelay
 874              		.thumb
 875              		.thumb_func
 877              	vTaskDelay:
 878              	.LFB9:
1145:../../../FreeRTOS_9_0/Source/tasks.c **** 
1146:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1147:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1148:../../../FreeRTOS_9_0/Source/tasks.c **** 
1149:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1150:../../../FreeRTOS_9_0/Source/tasks.c **** 
1151:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1152:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1153:../../../FreeRTOS_9_0/Source/tasks.c **** 	TickType_t xTimeToWake;
1154:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1155:../../../FreeRTOS_9_0/Source/tasks.c **** 
1156:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1157:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1158:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1159:../../../FreeRTOS_9_0/Source/tasks.c **** 
1160:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
1161:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1162:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1163:../../../FreeRTOS_9_0/Source/tasks.c **** 			block. */
1164:../../../FreeRTOS_9_0/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1165:../../../FreeRTOS_9_0/Source/tasks.c **** 
1166:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1167:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1168:../../../FreeRTOS_9_0/Source/tasks.c **** 
1169:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1170:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1171:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1172:../../../FreeRTOS_9_0/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1173:../../../FreeRTOS_9_0/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1174:../../../FreeRTOS_9_0/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1175:../../../FreeRTOS_9_0/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1176:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1177:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1178:../../../FreeRTOS_9_0/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1179:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1180:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1181:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1182:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1183:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1184:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1185:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1186:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1187:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1188:../../../FreeRTOS_9_0/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1189:../../../FreeRTOS_9_0/Source/tasks.c **** 				tick time is less than the wake time. */
1190:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1191:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1192:../../../FreeRTOS_9_0/Source/tasks.c **** 					xShouldDelay = pdTRUE;
ARM GAS  /tmp/cc623FKg.s 			page 41


1193:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1194:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1195:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1196:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1197:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1198:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1199:../../../FreeRTOS_9_0/Source/tasks.c **** 
1200:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1201:../../../FreeRTOS_9_0/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1202:../../../FreeRTOS_9_0/Source/tasks.c **** 
1203:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1204:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1205:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1206:../../../FreeRTOS_9_0/Source/tasks.c **** 
1207:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1208:../../../FreeRTOS_9_0/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1209:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1210:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1211:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1212:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1213:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1214:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1215:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1216:../../../FreeRTOS_9_0/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1217:../../../FreeRTOS_9_0/Source/tasks.c **** 
1218:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1219:../../../FreeRTOS_9_0/Source/tasks.c **** 		have put ourselves to sleep. */
1220:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1221:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1222:../../../FreeRTOS_9_0/Source/tasks.c **** 			portYIELD_WITHIN_API();
1223:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1224:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1225:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1226:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1227:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1228:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1229:../../../FreeRTOS_9_0/Source/tasks.c **** 
1230:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1231:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1232:../../../FreeRTOS_9_0/Source/tasks.c **** 
1233:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1234:../../../FreeRTOS_9_0/Source/tasks.c **** 
1235:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1236:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 879              		.loc 1 1236 0
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 16
 882              		@ frame_needed = 1, uses_anonymous_args = 0
 883 0000 80B5     		push	{r7, lr}
 884              	.LCFI20:
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 7, -8
 887              		.cfi_offset 14, -4
 888 0002 84B0     		sub	sp, sp, #16
 889              	.LCFI21:
 890              		.cfi_def_cfa_offset 24
 891 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc623FKg.s 			page 42


 892              	.LCFI22:
 893              		.cfi_def_cfa_register 7
 894 0006 7860     		str	r0, [r7, #4]
1237:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 895              		.loc 1 1237 0
 896 0008 0023     		movs	r3, #0
 897 000a FB60     		str	r3, [r7, #12]
1238:../../../FreeRTOS_9_0/Source/tasks.c **** 
1239:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1240:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 898              		.loc 1 1240 0
 899 000c 7B68     		ldr	r3, [r7, #4]
 900 000e 002B     		cmp	r3, #0
 901 0010 1AD0     		beq	.L41
1241:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1242:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 902              		.loc 1 1242 0
 903 0012 144B     		ldr	r3, .L45
 904 0014 1B68     		ldr	r3, [r3]
 905 0016 002B     		cmp	r3, #0
 906 0018 09D0     		beq	.L42
 907              	.LBB98:
 908              	.LBB99:
 909              		.loc 2 237 0 discriminator 1
 910              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 911 001a 4FF05003 			mov r3, #80												
 912 001e 83F31188 		msr basepri, r3											
 913 0022 BFF36F8F 		isb														
 914 0026 BFF34F8F 		dsb														
 915              	
 916              	@ 0 "" 2
 917              		.thumb
 918 002a BB60     		str	r3, [r7, #8]
 919              	.L43:
 920              	.LBE99:
 921              	.LBE98:
 922              		.loc 1 1242 0 discriminator 1
 923 002c FEE7     		b	.L43
 924              	.L42:
1243:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSuspendAll();
 925              		.loc 1 1243 0
 926 002e FFF7FEFF 		bl	vTaskSuspendAll
1244:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1245:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_DELAY();
 927              		.loc 1 1245 0
 928 0032 2320     		movs	r0, #35
 929 0034 7968     		ldr	r1, [r7, #4]
 930 0036 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1246:../../../FreeRTOS_9_0/Source/tasks.c **** 
1247:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task that is removed from the event list while the
1248:../../../FreeRTOS_9_0/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1249:../../../FreeRTOS_9_0/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1250:../../../FreeRTOS_9_0/Source/tasks.c **** 				is resumed.
1251:../../../FreeRTOS_9_0/Source/tasks.c **** 
1252:../../../FreeRTOS_9_0/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1253:../../../FreeRTOS_9_0/Source/tasks.c **** 				executing task. */
1254:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
ARM GAS  /tmp/cc623FKg.s 			page 43


 931              		.loc 1 1254 0
 932 003a 7868     		ldr	r0, [r7, #4]
 933 003c 0021     		movs	r1, #0
 934 003e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1255:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1256:../../../FreeRTOS_9_0/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 935              		.loc 1 1256 0
 936 0042 FFF7FEFF 		bl	xTaskResumeAll
 937 0046 F860     		str	r0, [r7, #12]
 938              	.L41:
1257:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1258:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1259:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1260:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1262:../../../FreeRTOS_9_0/Source/tasks.c **** 
1263:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1264:../../../FreeRTOS_9_0/Source/tasks.c **** 		have put ourselves to sleep. */
1265:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 939              		.loc 1 1265 0
 940 0048 FB68     		ldr	r3, [r7, #12]
 941 004a 002B     		cmp	r3, #0
 942 004c 07D1     		bne	.L40
1266:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1267:../../../FreeRTOS_9_0/Source/tasks.c **** 			portYIELD_WITHIN_API();
 943              		.loc 1 1267 0
 944 004e 064B     		ldr	r3, .L45+4
 945 0050 4FF08052 		mov	r2, #268435456
 946 0054 1A60     		str	r2, [r3]
 947              	@ 1267 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 948 0056 BFF34F8F 		dsb
 949              	@ 0 "" 2
 950              	@ 1267 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 951 005a BFF36F8F 		isb
 952              	@ 0 "" 2
 953              		.thumb
 954              	.L40:
1268:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1269:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1270:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1271:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1272:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1273:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 955              		.loc 1 1273 0
 956 005e 1037     		adds	r7, r7, #16
 957              	.LCFI23:
 958              		.cfi_def_cfa_offset 8
 959 0060 BD46     		mov	sp, r7
 960              	.LCFI24:
 961              		.cfi_def_cfa_register 13
 962              		@ sp needed
 963 0062 80BD     		pop	{r7, pc}
 964              	.L46:
 965              		.align	2
 966              	.L45:
 967 0064 00000000 		.word	uxSchedulerSuspended
 968 0068 04ED00E0 		.word	-536810236
ARM GAS  /tmp/cc623FKg.s 			page 44


 969              		.cfi_endproc
 970              	.LFE9:
 972              		.section	.text.eTaskGetState,"ax",%progbits
 973              		.align	2
 974              		.global	eTaskGetState
 975              		.thumb
 976              		.thumb_func
 978              	eTaskGetState:
 979              	.LFB10:
1274:../../../FreeRTOS_9_0/Source/tasks.c **** 
1275:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1276:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1277:../../../FreeRTOS_9_0/Source/tasks.c **** 
1278:../../../FreeRTOS_9_0/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1279:../../../FreeRTOS_9_0/Source/tasks.c **** 
1280:../../../FreeRTOS_9_0/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1281:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 980              		.loc 1 1281 0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 24
 983              		@ frame_needed = 1, uses_anonymous_args = 0
 984 0000 80B5     		push	{r7, lr}
 985              	.LCFI25:
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 7, -8
 988              		.cfi_offset 14, -4
 989 0002 86B0     		sub	sp, sp, #24
 990              	.LCFI26:
 991              		.cfi_def_cfa_offset 32
 992 0004 00AF     		add	r7, sp, #0
 993              	.LCFI27:
 994              		.cfi_def_cfa_register 7
 995 0006 7860     		str	r0, [r7, #4]
1282:../../../FreeRTOS_9_0/Source/tasks.c **** 	eTaskState eReturn;
1283:../../../FreeRTOS_9_0/Source/tasks.c **** 	List_t *pxStateList;
1284:../../../FreeRTOS_9_0/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 996              		.loc 1 1284 0
 997 0008 7B68     		ldr	r3, [r7, #4]
 998 000a 3B61     		str	r3, [r7, #16]
1285:../../../FreeRTOS_9_0/Source/tasks.c **** 
1286:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTCB );
 999              		.loc 1 1286 0
 1000 000c 3B69     		ldr	r3, [r7, #16]
 1001 000e 002B     		cmp	r3, #0
 1002 0010 09D1     		bne	.L48
 1003              	.LBB100:
 1004              	.LBB101:
 1005              		.loc 2 237 0 discriminator 1
 1006              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1007 0012 4FF05003 			mov r3, #80												
 1008 0016 83F31188 		msr basepri, r3											
 1009 001a BFF36F8F 		isb														
 1010 001e BFF34F8F 		dsb														
 1011              	
 1012              	@ 0 "" 2
 1013              		.thumb
 1014 0022 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/cc623FKg.s 			page 45


 1015              	.L49:
 1016              	.LBE101:
 1017              	.LBE100:
 1018              		.loc 1 1286 0 discriminator 1
 1019 0024 FEE7     		b	.L49
 1020              	.L48:
1287:../../../FreeRTOS_9_0/Source/tasks.c **** 
1288:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1021              		.loc 1 1288 0
 1022 0026 1D4B     		ldr	r3, .L60
 1023 0028 1B68     		ldr	r3, [r3]
 1024 002a 3A69     		ldr	r2, [r7, #16]
 1025 002c 9A42     		cmp	r2, r3
 1026 002e 02D1     		bne	.L50
1289:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1290:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1291:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eRunning;
 1027              		.loc 1 1291 0
 1028 0030 0023     		movs	r3, #0
 1029 0032 FB75     		strb	r3, [r7, #23]
 1030 0034 2DE0     		b	.L51
 1031              	.L50:
1292:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1293:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1294:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1295:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 1032              		.loc 1 1295 0
 1033 0036 FFF7FEFF 		bl	vPortEnterCritical
1296:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1297:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1034              		.loc 1 1297 0
 1035 003a 3B69     		ldr	r3, [r7, #16]
 1036 003c 5B69     		ldr	r3, [r3, #20]
 1037 003e FB60     		str	r3, [r7, #12]
1298:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1299:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1038              		.loc 1 1299 0
 1039 0040 FFF7FEFF 		bl	vPortExitCritical
1300:../../../FreeRTOS_9_0/Source/tasks.c **** 
1301:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 1040              		.loc 1 1301 0
 1041 0044 164B     		ldr	r3, .L60+4
 1042 0046 1B68     		ldr	r3, [r3]
 1043 0048 FA68     		ldr	r2, [r7, #12]
 1044 004a 9A42     		cmp	r2, r3
 1045 004c 04D0     		beq	.L52
 1046              		.loc 1 1301 0 is_stmt 0 discriminator 1
 1047 004e 154B     		ldr	r3, .L60+8
 1048 0050 1B68     		ldr	r3, [r3]
 1049 0052 FA68     		ldr	r2, [r7, #12]
 1050 0054 9A42     		cmp	r2, r3
 1051 0056 02D1     		bne	.L53
 1052              	.L52:
1302:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1303:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1304:../../../FreeRTOS_9_0/Source/tasks.c **** 				lists. */
1305:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eBlocked;
ARM GAS  /tmp/cc623FKg.s 			page 46


 1053              		.loc 1 1305 0 is_stmt 1
 1054 0058 0223     		movs	r3, #2
 1055 005a FB75     		strb	r3, [r7, #23]
 1056 005c 19E0     		b	.L51
 1057              	.L53:
1306:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1307:../../../FreeRTOS_9_0/Source/tasks.c **** 
1308:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1309:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1058              		.loc 1 1309 0
 1059 005e FB68     		ldr	r3, [r7, #12]
 1060 0060 114A     		ldr	r2, .L60+12
 1061 0062 9342     		cmp	r3, r2
 1062 0064 09D1     		bne	.L54
1310:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1311:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1312:../../../FreeRTOS_9_0/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1313:../../../FreeRTOS_9_0/Source/tasks.c **** 					indefinitely? */
1314:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1063              		.loc 1 1314 0
 1064 0066 3B69     		ldr	r3, [r7, #16]
 1065 0068 9B6A     		ldr	r3, [r3, #40]
 1066 006a 002B     		cmp	r3, #0
 1067 006c 02D1     		bne	.L55
1315:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1316:../../../FreeRTOS_9_0/Source/tasks.c **** 						eReturn = eSuspended;
 1068              		.loc 1 1316 0
 1069 006e 0323     		movs	r3, #3
 1070 0070 FB75     		strb	r3, [r7, #23]
 1071 0072 0EE0     		b	.L51
 1072              	.L55:
1317:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1318:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1319:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1320:../../../FreeRTOS_9_0/Source/tasks.c **** 						eReturn = eBlocked;
 1073              		.loc 1 1320 0
 1074 0074 0223     		movs	r3, #2
 1075 0076 FB75     		strb	r3, [r7, #23]
 1076 0078 0BE0     		b	.L51
 1077              	.L54:
1321:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1322:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1323:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1324:../../../FreeRTOS_9_0/Source/tasks.c **** 
1325:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1326:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1078              		.loc 1 1326 0
 1079 007a FB68     		ldr	r3, [r7, #12]
 1080 007c 0B4A     		ldr	r2, .L60+16
 1081 007e 9342     		cmp	r3, r2
 1082 0080 02D0     		beq	.L57
 1083              		.loc 1 1326 0 is_stmt 0 discriminator 1
 1084 0082 FB68     		ldr	r3, [r7, #12]
 1085 0084 002B     		cmp	r3, #0
 1086 0086 02D1     		bne	.L58
 1087              	.L57:
1327:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
ARM GAS  /tmp/cc623FKg.s 			page 47


1328:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1329:../../../FreeRTOS_9_0/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1330:../../../FreeRTOS_9_0/Source/tasks.c **** 					all. */
1331:../../../FreeRTOS_9_0/Source/tasks.c **** 					eReturn = eDeleted;
 1088              		.loc 1 1331 0 is_stmt 1
 1089 0088 0423     		movs	r3, #4
 1090 008a FB75     		strb	r3, [r7, #23]
 1091 008c 01E0     		b	.L51
 1092              	.L58:
1332:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1333:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1334:../../../FreeRTOS_9_0/Source/tasks.c **** 
1335:../../../FreeRTOS_9_0/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1336:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1337:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1338:../../../FreeRTOS_9_0/Source/tasks.c **** 				Ready (including pending ready) state. */
1339:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eReady;
 1093              		.loc 1 1339 0
 1094 008e 0123     		movs	r3, #1
 1095 0090 FB75     		strb	r3, [r7, #23]
 1096              	.L51:
1340:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1341:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1342:../../../FreeRTOS_9_0/Source/tasks.c **** 
1343:../../../FreeRTOS_9_0/Source/tasks.c **** 		return eReturn;
 1097              		.loc 1 1343 0
 1098 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1344:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1099              		.loc 1 1344 0
 1100 0094 1846     		mov	r0, r3
 1101 0096 1837     		adds	r7, r7, #24
 1102              	.LCFI28:
 1103              		.cfi_def_cfa_offset 8
 1104 0098 BD46     		mov	sp, r7
 1105              	.LCFI29:
 1106              		.cfi_def_cfa_register 13
 1107              		@ sp needed
 1108 009a 80BD     		pop	{r7, pc}
 1109              	.L61:
 1110              		.align	2
 1111              	.L60:
 1112 009c 00000000 		.word	pxCurrentTCB
 1113 00a0 00000000 		.word	pxDelayedTaskList
 1114 00a4 00000000 		.word	pxOverflowDelayedTaskList
 1115 00a8 00000000 		.word	xSuspendedTaskList
 1116 00ac 00000000 		.word	xTasksWaitingTermination
 1117              		.cfi_endproc
 1118              	.LFE10:
 1120              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1121              		.align	2
 1122              		.global	uxTaskPriorityGet
 1123              		.thumb
 1124              		.thumb_func
 1126              	uxTaskPriorityGet:
 1127              	.LFB11:
1345:../../../FreeRTOS_9_0/Source/tasks.c **** 
1346:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
ARM GAS  /tmp/cc623FKg.s 			page 48


1347:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1348:../../../FreeRTOS_9_0/Source/tasks.c **** 
1349:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1350:../../../FreeRTOS_9_0/Source/tasks.c **** 
1351:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1352:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1128              		.loc 1 1352 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 16
 1131              		@ frame_needed = 1, uses_anonymous_args = 0
 1132 0000 80B5     		push	{r7, lr}
 1133              	.LCFI30:
 1134              		.cfi_def_cfa_offset 8
 1135              		.cfi_offset 7, -8
 1136              		.cfi_offset 14, -4
 1137 0002 84B0     		sub	sp, sp, #16
 1138              	.LCFI31:
 1139              		.cfi_def_cfa_offset 24
 1140 0004 00AF     		add	r7, sp, #0
 1141              	.LCFI32:
 1142              		.cfi_def_cfa_register 7
 1143 0006 7860     		str	r0, [r7, #4]
1353:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1354:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
1355:../../../FreeRTOS_9_0/Source/tasks.c **** 
1356:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1144              		.loc 1 1356 0
 1145 0008 FFF7FEFF 		bl	vPortEnterCritical
1357:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1358:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1359:../../../FreeRTOS_9_0/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1360:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1146              		.loc 1 1360 0
 1147 000c 7B68     		ldr	r3, [r7, #4]
 1148 000e 002B     		cmp	r3, #0
 1149 0010 02D1     		bne	.L63
 1150              		.loc 1 1360 0 is_stmt 0 discriminator 1
 1151 0012 074B     		ldr	r3, .L66
 1152 0014 1B68     		ldr	r3, [r3]
 1153 0016 00E0     		b	.L64
 1154              	.L63:
 1155              		.loc 1 1360 0 discriminator 2
 1156 0018 7B68     		ldr	r3, [r7, #4]
 1157              	.L64:
 1158              		.loc 1 1360 0 discriminator 4
 1159 001a FB60     		str	r3, [r7, #12]
1361:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1160              		.loc 1 1361 0 is_stmt 1 discriminator 4
 1161 001c FB68     		ldr	r3, [r7, #12]
 1162 001e DB6A     		ldr	r3, [r3, #44]
 1163 0020 BB60     		str	r3, [r7, #8]
1362:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1363:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1164              		.loc 1 1363 0 discriminator 4
 1165 0022 FFF7FEFF 		bl	vPortExitCritical
1364:../../../FreeRTOS_9_0/Source/tasks.c **** 
1365:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
ARM GAS  /tmp/cc623FKg.s 			page 49


 1166              		.loc 1 1365 0 discriminator 4
 1167 0026 BB68     		ldr	r3, [r7, #8]
1366:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1168              		.loc 1 1366 0 discriminator 4
 1169 0028 1846     		mov	r0, r3
 1170 002a 1037     		adds	r7, r7, #16
 1171              	.LCFI33:
 1172              		.cfi_def_cfa_offset 8
 1173 002c BD46     		mov	sp, r7
 1174              	.LCFI34:
 1175              		.cfi_def_cfa_register 13
 1176              		@ sp needed
 1177 002e 80BD     		pop	{r7, pc}
 1178              	.L67:
 1179              		.align	2
 1180              	.L66:
 1181 0030 00000000 		.word	pxCurrentTCB
 1182              		.cfi_endproc
 1183              	.LFE11:
 1185              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1186              		.align	2
 1187              		.global	uxTaskPriorityGetFromISR
 1188              		.thumb
 1189              		.thumb_func
 1191              	uxTaskPriorityGetFromISR:
 1192              	.LFB12:
1367:../../../FreeRTOS_9_0/Source/tasks.c **** 
1368:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1369:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1370:../../../FreeRTOS_9_0/Source/tasks.c **** 
1371:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1372:../../../FreeRTOS_9_0/Source/tasks.c **** 
1373:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1374:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1193              		.loc 1 1374 0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 32
 1196              		@ frame_needed = 1, uses_anonymous_args = 0
 1197 0000 80B5     		push	{r7, lr}
 1198              	.LCFI35:
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 7, -8
 1201              		.cfi_offset 14, -4
 1202 0002 88B0     		sub	sp, sp, #32
 1203              	.LCFI36:
 1204              		.cfi_def_cfa_offset 40
 1205 0004 00AF     		add	r7, sp, #0
 1206              	.LCFI37:
 1207              		.cfi_def_cfa_register 7
 1208 0006 7860     		str	r0, [r7, #4]
1375:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1376:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1377:../../../FreeRTOS_9_0/Source/tasks.c **** 
1378:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1379:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1380:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1381:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
ARM GAS  /tmp/cc623FKg.s 			page 50


1382:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1383:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1384:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1385:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1386:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1387:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1388:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1389:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1390:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1391:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1392:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
1393:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1394:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1209              		.loc 1 1394 0
 1210 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1211              	.LBB102:
 1212              	.LBB103:
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1213              		.loc 2 253 0
 1214              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1215 000c EFF31182 			mrs r2, basepri											
 1216 0010 4FF05003 		mov r3, #80												
 1217 0014 83F31188 		msr basepri, r3											
 1218 0018 BFF36F8F 		isb														
 1219 001c BFF34F8F 		dsb														
 1220              	
 1221              	@ 0 "" 2
 1222              		.thumb
 1223 0020 3A61     		str	r2, [r7, #16]
 1224 0022 FB60     		str	r3, [r7, #12]
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
ARM GAS  /tmp/cc623FKg.s 			page 51


 1225              		.loc 2 265 0
 1226 0024 3B69     		ldr	r3, [r7, #16]
 1227              	.LBE103:
 1228              	.LBE102:
1395:../../../FreeRTOS_9_0/Source/tasks.c **** 
1396:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1229              		.loc 1 1396 0
 1230 0026 FB61     		str	r3, [r7, #28]
1397:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1398:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1399:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is being queried. */
1400:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1231              		.loc 1 1400 0
 1232 0028 7B68     		ldr	r3, [r7, #4]
 1233 002a 002B     		cmp	r3, #0
 1234 002c 02D1     		bne	.L70
 1235              		.loc 1 1400 0 is_stmt 0 discriminator 1
 1236 002e 094B     		ldr	r3, .L73
 1237 0030 1B68     		ldr	r3, [r3]
 1238 0032 00E0     		b	.L71
 1239              	.L70:
 1240              		.loc 1 1400 0 discriminator 2
 1241 0034 7B68     		ldr	r3, [r7, #4]
 1242              	.L71:
 1243              		.loc 1 1400 0 discriminator 4
 1244 0036 BB61     		str	r3, [r7, #24]
1401:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1245              		.loc 1 1401 0 is_stmt 1 discriminator 4
 1246 0038 BB69     		ldr	r3, [r7, #24]
 1247 003a DB6A     		ldr	r3, [r3, #44]
 1248 003c 7B61     		str	r3, [r7, #20]
 1249 003e FB69     		ldr	r3, [r7, #28]
 1250 0040 BB60     		str	r3, [r7, #8]
 1251              	.LBB104:
 1252              	.LBB105:
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1253              		.loc 2 271 0 discriminator 4
 1254 0042 BB68     		ldr	r3, [r7, #8]
 1255              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1256 0044 83F31188 			msr basepri, r3	
 1257              	@ 0 "" 2
 1258              		.thumb
 1259              	.LBE105:
 1260              	.LBE104:
1402:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1403:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1404:../../../FreeRTOS_9_0/Source/tasks.c **** 
1405:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
 1261              		.loc 1 1405 0 discriminator 4
 1262 0048 7B69     		ldr	r3, [r7, #20]
1406:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1263              		.loc 1 1406 0 discriminator 4
ARM GAS  /tmp/cc623FKg.s 			page 52


 1264 004a 1846     		mov	r0, r3
 1265 004c 2037     		adds	r7, r7, #32
 1266              	.LCFI38:
 1267              		.cfi_def_cfa_offset 8
 1268 004e BD46     		mov	sp, r7
 1269              	.LCFI39:
 1270              		.cfi_def_cfa_register 13
 1271              		@ sp needed
 1272 0050 80BD     		pop	{r7, pc}
 1273              	.L74:
 1274 0052 00BF     		.align	2
 1275              	.L73:
 1276 0054 00000000 		.word	pxCurrentTCB
 1277              		.cfi_endproc
 1278              	.LFE12:
 1280              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1281              		.align	2
 1282              		.global	vTaskPrioritySet
 1283              		.thumb
 1284              		.thumb_func
 1286              	vTaskPrioritySet:
 1287              	.LFB13:
1407:../../../FreeRTOS_9_0/Source/tasks.c **** 
1408:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1409:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1410:../../../FreeRTOS_9_0/Source/tasks.c **** 
1411:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1412:../../../FreeRTOS_9_0/Source/tasks.c **** 
1413:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1414:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1288              		.loc 1 1414 0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 32
 1291              		@ frame_needed = 1, uses_anonymous_args = 0
 1292 0000 90B5     		push	{r4, r7, lr}
 1293              	.LCFI40:
 1294              		.cfi_def_cfa_offset 12
 1295              		.cfi_offset 4, -12
 1296              		.cfi_offset 7, -8
 1297              		.cfi_offset 14, -4
 1298 0002 8BB0     		sub	sp, sp, #44
 1299              	.LCFI41:
 1300              		.cfi_def_cfa_offset 56
 1301 0004 02AF     		add	r7, sp, #8
 1302              	.LCFI42:
 1303              		.cfi_def_cfa 7, 48
 1304 0006 7860     		str	r0, [r7, #4]
 1305 0008 3960     		str	r1, [r7]
1415:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1416:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1417:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1306              		.loc 1 1417 0
 1307 000a 0023     		movs	r3, #0
 1308 000c FB61     		str	r3, [r7, #28]
1418:../../../FreeRTOS_9_0/Source/tasks.c **** 
1419:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1309              		.loc 1 1419 0
ARM GAS  /tmp/cc623FKg.s 			page 53


 1310 000e 3B68     		ldr	r3, [r7]
 1311 0010 062B     		cmp	r3, #6
 1312 0012 09D9     		bls	.L76
 1313              	.LBB106:
 1314              	.LBB107:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1315              		.loc 2 237 0 discriminator 1
 1316              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1317 0014 4FF05003 			mov r3, #80												
 1318 0018 83F31188 		msr basepri, r3											
 1319 001c BFF36F8F 		isb														
 1320 0020 BFF34F8F 		dsb														
 1321              	
 1322              	@ 0 "" 2
 1323              		.thumb
 1324 0024 FB60     		str	r3, [r7, #12]
 1325              	.L77:
 1326              	.LBE107:
 1327              	.LBE106:
 1328              		.loc 1 1419 0 discriminator 1
 1329 0026 FEE7     		b	.L77
 1330              	.L76:
1420:../../../FreeRTOS_9_0/Source/tasks.c **** 
1421:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1422:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1331              		.loc 1 1422 0
 1332 0028 3B68     		ldr	r3, [r7]
 1333 002a 062B     		cmp	r3, #6
 1334 002c 01D9     		bls	.L78
1423:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1424:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1335              		.loc 1 1424 0
 1336 002e 0623     		movs	r3, #6
 1337 0030 3B60     		str	r3, [r7]
 1338              	.L78:
1425:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1426:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1427:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1428:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1429:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1430:../../../FreeRTOS_9_0/Source/tasks.c **** 
1431:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1339              		.loc 1 1431 0
 1340 0032 FFF7FEFF 		bl	vPortEnterCritical
1432:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1433:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1434:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is being changed. */
1435:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1341              		.loc 1 1435 0
 1342 0036 7B68     		ldr	r3, [r7, #4]
 1343 0038 002B     		cmp	r3, #0
 1344 003a 02D1     		bne	.L79
 1345              		.loc 1 1435 0 is_stmt 0 discriminator 1
 1346 003c 504B     		ldr	r3, .L90
 1347 003e 1B68     		ldr	r3, [r3]
 1348 0040 00E0     		b	.L80
 1349              	.L79:
ARM GAS  /tmp/cc623FKg.s 			page 54


 1350              		.loc 1 1435 0 discriminator 2
 1351 0042 7B68     		ldr	r3, [r7, #4]
 1352              	.L80:
 1353              		.loc 1 1435 0 discriminator 4
 1354 0044 BB61     		str	r3, [r7, #24]
1436:../../../FreeRTOS_9_0/Source/tasks.c **** 
1437:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 1355              		.loc 1 1437 0 is_stmt 1 discriminator 4
 1356 0046 BB69     		ldr	r3, [r7, #24]
 1357 0048 1846     		mov	r0, r3
 1358 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1359 004e 0346     		mov	r3, r0
 1360 0050 2820     		movs	r0, #40
 1361 0052 1946     		mov	r1, r3
 1362 0054 3A68     		ldr	r2, [r7]
 1363 0056 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 1364 005a B969     		ldr	r1, [r7, #24]
 1365 005c BB69     		ldr	r3, [r7, #24]
 1366 005e 03F13402 		add	r2, r3, #52
 1367 0062 BB69     		ldr	r3, [r7, #24]
 1368 0064 1B6B     		ldr	r3, [r3, #48]
 1369 0066 1C46     		mov	r4, r3
 1370 0068 0023     		movs	r3, #0
 1371 006a 0093     		str	r3, [sp]
 1372 006c 0846     		mov	r0, r1
 1373 006e 1146     		mov	r1, r2
 1374 0070 3A68     		ldr	r2, [r7]
 1375 0072 2346     		mov	r3, r4
 1376 0074 FFF7FEFF 		bl	SYSVIEW_UpdateTask
1438:../../../FreeRTOS_9_0/Source/tasks.c **** 
1439:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1440:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1441:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1377              		.loc 1 1441 0 discriminator 4
 1378 0078 BB69     		ldr	r3, [r7, #24]
 1379 007a DB6C     		ldr	r3, [r3, #76]
 1380 007c 7B61     		str	r3, [r7, #20]
1442:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1443:../../../FreeRTOS_9_0/Source/tasks.c **** 			#else
1444:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1445:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1446:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1447:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1448:../../../FreeRTOS_9_0/Source/tasks.c **** 
1449:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1381              		.loc 1 1449 0 discriminator 4
 1382 007e 7A69     		ldr	r2, [r7, #20]
 1383 0080 3B68     		ldr	r3, [r7]
 1384 0082 9A42     		cmp	r2, r3
 1385 0084 76D0     		beq	.L81
1450:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1451:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1452:../../../FreeRTOS_9_0/Source/tasks.c **** 				priority than the calling task. */
1453:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1386              		.loc 1 1453 0
 1387 0086 3A68     		ldr	r2, [r7]
 1388 0088 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc623FKg.s 			page 55


 1389 008a 9A42     		cmp	r2, r3
 1390 008c 0DD9     		bls	.L82
1454:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1455:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1391              		.loc 1 1455 0
 1392 008e 3C4B     		ldr	r3, .L90
 1393 0090 1B68     		ldr	r3, [r3]
 1394 0092 BA69     		ldr	r2, [r7, #24]
 1395 0094 9A42     		cmp	r2, r3
 1396 0096 0FD0     		beq	.L83
1456:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1457:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The priority of a task other than the currently
1458:../../../FreeRTOS_9_0/Source/tasks.c **** 						running task is being raised.  Is the priority being
1459:../../../FreeRTOS_9_0/Source/tasks.c **** 						raised above that of the running task? */
1460:../../../FreeRTOS_9_0/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1397              		.loc 1 1460 0
 1398 0098 394B     		ldr	r3, .L90
 1399 009a 1B68     		ldr	r3, [r3]
 1400 009c DA6A     		ldr	r2, [r3, #44]
 1401 009e 3B68     		ldr	r3, [r7]
 1402 00a0 9A42     		cmp	r2, r3
 1403 00a2 09D8     		bhi	.L83
1461:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
1462:../../../FreeRTOS_9_0/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1404              		.loc 1 1462 0
 1405 00a4 0123     		movs	r3, #1
 1406 00a6 FB61     		str	r3, [r7, #28]
 1407 00a8 06E0     		b	.L83
 1408              	.L82:
1463:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
1464:../../../FreeRTOS_9_0/Source/tasks.c **** 						else
1465:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
1466:../../../FreeRTOS_9_0/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1467:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
1468:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1469:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1470:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1471:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The priority of the running task is being raised,
1472:../../../FreeRTOS_9_0/Source/tasks.c **** 						but the running task must already be the highest
1473:../../../FreeRTOS_9_0/Source/tasks.c **** 						priority task able to run so no yield is required. */
1474:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1475:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1476:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1409              		.loc 1 1476 0
 1410 00aa 354B     		ldr	r3, .L90
 1411 00ac 1B68     		ldr	r3, [r3]
 1412 00ae BA69     		ldr	r2, [r7, #24]
 1413 00b0 9A42     		cmp	r2, r3
 1414 00b2 01D1     		bne	.L83
1477:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1478:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Setting the priority of the running task down means
1479:../../../FreeRTOS_9_0/Source/tasks.c **** 					there may now be another task of higher priority that
1480:../../../FreeRTOS_9_0/Source/tasks.c **** 					is ready to execute. */
1481:../../../FreeRTOS_9_0/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1415              		.loc 1 1481 0
 1416 00b4 0123     		movs	r3, #1
 1417 00b6 FB61     		str	r3, [r7, #28]
ARM GAS  /tmp/cc623FKg.s 			page 56


 1418              	.L83:
1482:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1483:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1484:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1485:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1486:../../../FreeRTOS_9_0/Source/tasks.c **** 					require a yield as the running task must be above the
1487:../../../FreeRTOS_9_0/Source/tasks.c **** 					new priority of the task being modified. */
1488:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1489:../../../FreeRTOS_9_0/Source/tasks.c **** 
1490:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1491:../../../FreeRTOS_9_0/Source/tasks.c **** 				before its uxPriority member is changed so the
1492:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1493:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1419              		.loc 1 1493 0
 1420 00b8 BB69     		ldr	r3, [r7, #24]
 1421 00ba DB6A     		ldr	r3, [r3, #44]
 1422 00bc 3B61     		str	r3, [r7, #16]
1494:../../../FreeRTOS_9_0/Source/tasks.c **** 
1495:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1496:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1497:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1498:../../../FreeRTOS_9_0/Source/tasks.c **** 					currently using an inherited priority. */
1499:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1423              		.loc 1 1499 0
 1424 00be BB69     		ldr	r3, [r7, #24]
 1425 00c0 DA6C     		ldr	r2, [r3, #76]
 1426 00c2 BB69     		ldr	r3, [r7, #24]
 1427 00c4 DB6A     		ldr	r3, [r3, #44]
 1428 00c6 9A42     		cmp	r2, r3
 1429 00c8 02D1     		bne	.L84
1500:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1501:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1430              		.loc 1 1501 0
 1431 00ca BB69     		ldr	r3, [r7, #24]
 1432 00cc 3A68     		ldr	r2, [r7]
 1433 00ce DA62     		str	r2, [r3, #44]
 1434              	.L84:
1502:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1503:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1504:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1505:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1506:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1507:../../../FreeRTOS_9_0/Source/tasks.c **** 
1508:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The base priority gets set whatever. */
1509:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1435              		.loc 1 1509 0
 1436 00d0 BB69     		ldr	r3, [r7, #24]
 1437 00d2 3A68     		ldr	r2, [r7]
 1438 00d4 DA64     		str	r2, [r3, #76]
1510:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1511:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
1512:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1513:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1514:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1515:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
1516:../../../FreeRTOS_9_0/Source/tasks.c **** 
1517:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
ARM GAS  /tmp/cc623FKg.s 			page 57


1518:../../../FreeRTOS_9_0/Source/tasks.c **** 				being used for anything else. */
1519:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1439              		.loc 1 1519 0
 1440 00d6 BB69     		ldr	r3, [r7, #24]
 1441 00d8 9B69     		ldr	r3, [r3, #24]
 1442 00da 002B     		cmp	r3, #0
 1443 00dc 04DB     		blt	.L85
1520:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1521:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1444              		.loc 1 1521 0
 1445 00de 3B68     		ldr	r3, [r7]
 1446 00e0 C3F10702 		rsb	r2, r3, #7
 1447 00e4 BB69     		ldr	r3, [r7, #24]
 1448 00e6 9A61     		str	r2, [r3, #24]
 1449              	.L85:
1522:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1523:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1524:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1525:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1526:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1527:../../../FreeRTOS_9_0/Source/tasks.c **** 
1528:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1529:../../../FreeRTOS_9_0/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1530:../../../FreeRTOS_9_0/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1531:../../../FreeRTOS_9_0/Source/tasks.c **** 				in the list appropriate to its new priority. */
1532:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1450              		.loc 1 1532 0
 1451 00e8 BB69     		ldr	r3, [r7, #24]
 1452 00ea 5969     		ldr	r1, [r3, #20]
 1453 00ec 3A69     		ldr	r2, [r7, #16]
 1454 00ee 1346     		mov	r3, r2
 1455 00f0 9B00     		lsls	r3, r3, #2
 1456 00f2 1344     		add	r3, r3, r2
 1457 00f4 9B00     		lsls	r3, r3, #2
 1458 00f6 234A     		ldr	r2, .L90+4
 1459 00f8 1344     		add	r3, r3, r2
 1460 00fa 9942     		cmp	r1, r3
 1461 00fc 01D1     		bne	.L86
 1462              		.loc 1 1532 0 is_stmt 0 discriminator 1
 1463 00fe 0123     		movs	r3, #1
 1464 0100 00E0     		b	.L87
 1465              	.L86:
 1466              		.loc 1 1532 0 discriminator 2
 1467 0102 0023     		movs	r3, #0
 1468              	.L87:
 1469              		.loc 1 1532 0 discriminator 4
 1470 0104 002B     		cmp	r3, #0
 1471 0106 2AD0     		beq	.L88
1533:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1534:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1535:../../../FreeRTOS_9_0/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1536:../../../FreeRTOS_9_0/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1537:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1472              		.loc 1 1537 0 is_stmt 1
 1473 0108 BB69     		ldr	r3, [r7, #24]
 1474 010a 0433     		adds	r3, r3, #4
 1475 010c 1846     		mov	r0, r3
ARM GAS  /tmp/cc623FKg.s 			page 58


 1476 010e FFF7FEFF 		bl	uxListRemove
 1477 0112 0346     		mov	r3, r0
 1478 0114 002B     		cmp	r3, #0
 1479 0116 09D1     		bne	.L89
1538:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1539:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1540:../../../FreeRTOS_9_0/Source/tasks.c **** 						there is no need to check again and the port level
1541:../../../FreeRTOS_9_0/Source/tasks.c **** 						reset macro can be called directly. */
1542:../../../FreeRTOS_9_0/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1480              		.loc 1 1542 0
 1481 0118 3B69     		ldr	r3, [r7, #16]
 1482 011a 0122     		movs	r2, #1
 1483 011c 02FA03F3 		lsl	r3, r2, r3
 1484 0120 DA43     		mvns	r2, r3
 1485 0122 194B     		ldr	r3, .L90+8
 1486 0124 1B68     		ldr	r3, [r3]
 1487 0126 1340     		ands	r3, r3, r2
 1488 0128 174A     		ldr	r2, .L90+8
 1489 012a 1360     		str	r3, [r2]
 1490              	.L89:
1543:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1544:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1545:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1546:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1547:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1548:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 1491              		.loc 1 1548 0
 1492 012c BB69     		ldr	r3, [r7, #24]
 1493 012e DB6A     		ldr	r3, [r3, #44]
 1494 0130 1A46     		mov	r2, r3
 1495 0132 0123     		movs	r3, #1
 1496 0134 03FA02F2 		lsl	r2, r3, r2
 1497 0138 134B     		ldr	r3, .L90+8
 1498 013a 1B68     		ldr	r3, [r3]
 1499 013c 1343     		orrs	r3, r3, r2
 1500 013e 124A     		ldr	r2, .L90+8
 1501 0140 1360     		str	r3, [r2]
 1502 0142 BB69     		ldr	r3, [r7, #24]
 1503 0144 DA6A     		ldr	r2, [r3, #44]
 1504 0146 1346     		mov	r3, r2
 1505 0148 9B00     		lsls	r3, r3, #2
 1506 014a 1344     		add	r3, r3, r2
 1507 014c 9B00     		lsls	r3, r3, #2
 1508 014e 0D4A     		ldr	r2, .L90+4
 1509 0150 1A44     		add	r2, r2, r3
 1510 0152 BB69     		ldr	r3, [r7, #24]
 1511 0154 0433     		adds	r3, r3, #4
 1512 0156 1046     		mov	r0, r2
 1513 0158 1946     		mov	r1, r3
 1514 015a FFF7FEFF 		bl	vListInsertEnd
 1515              	.L88:
1549:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1550:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1551:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1552:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1553:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1554:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 59


1555:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1516              		.loc 1 1555 0
 1517 015e FB69     		ldr	r3, [r7, #28]
 1518 0160 002B     		cmp	r3, #0
 1519 0162 07D0     		beq	.L81
1556:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1557:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1520              		.loc 1 1557 0
 1521 0164 094B     		ldr	r3, .L90+12
 1522 0166 4FF08052 		mov	r2, #268435456
 1523 016a 1A60     		str	r2, [r3]
 1524              	@ 1557 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1525 016c BFF34F8F 		dsb
 1526              	@ 0 "" 2
 1527              	@ 1557 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1528 0170 BFF36F8F 		isb
 1529              	@ 0 "" 2
 1530              		.thumb
 1531              	.L81:
1558:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1559:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1560:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1561:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1562:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1563:../../../FreeRTOS_9_0/Source/tasks.c **** 
1564:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1565:../../../FreeRTOS_9_0/Source/tasks.c **** 				optimised task selection is not being used. */
1566:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1567:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1568:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1569:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1532              		.loc 1 1569 0
 1533 0174 FFF7FEFF 		bl	vPortExitCritical
1570:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1534              		.loc 1 1570 0
 1535 0178 2437     		adds	r7, r7, #36
 1536              	.LCFI43:
 1537              		.cfi_def_cfa_offset 12
 1538 017a BD46     		mov	sp, r7
 1539              	.LCFI44:
 1540              		.cfi_def_cfa_register 13
 1541              		@ sp needed
 1542 017c 90BD     		pop	{r4, r7, pc}
 1543              	.L91:
 1544 017e 00BF     		.align	2
 1545              	.L90:
 1546 0180 00000000 		.word	pxCurrentTCB
 1547 0184 00000000 		.word	pxReadyTasksLists
 1548 0188 00000000 		.word	uxTopReadyPriority
 1549 018c 04ED00E0 		.word	-536810236
 1550              		.cfi_endproc
 1551              	.LFE13:
 1553              		.section	.text.vTaskSuspend,"ax",%progbits
 1554              		.align	2
 1555              		.global	vTaskSuspend
 1556              		.thumb
 1557              		.thumb_func
ARM GAS  /tmp/cc623FKg.s 			page 60


 1559              	vTaskSuspend:
 1560              	.LFB14:
1571:../../../FreeRTOS_9_0/Source/tasks.c **** 
1572:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1573:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1574:../../../FreeRTOS_9_0/Source/tasks.c **** 
1575:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1576:../../../FreeRTOS_9_0/Source/tasks.c **** 
1577:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1578:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1561              		.loc 1 1578 0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 16
 1564              		@ frame_needed = 1, uses_anonymous_args = 0
 1565 0000 80B5     		push	{r7, lr}
 1566              	.LCFI45:
 1567              		.cfi_def_cfa_offset 8
 1568              		.cfi_offset 7, -8
 1569              		.cfi_offset 14, -4
 1570 0002 84B0     		sub	sp, sp, #16
 1571              	.LCFI46:
 1572              		.cfi_def_cfa_offset 24
 1573 0004 00AF     		add	r7, sp, #0
 1574              	.LCFI47:
 1575              		.cfi_def_cfa_register 7
 1576 0006 7860     		str	r0, [r7, #4]
1579:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1580:../../../FreeRTOS_9_0/Source/tasks.c **** 
1581:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1577              		.loc 1 1581 0
 1578 0008 FFF7FEFF 		bl	vPortEnterCritical
1582:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1583:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1584:../../../FreeRTOS_9_0/Source/tasks.c **** 			being suspended. */
1585:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1579              		.loc 1 1585 0
 1580 000c 7B68     		ldr	r3, [r7, #4]
 1581 000e 002B     		cmp	r3, #0
 1582 0010 02D1     		bne	.L93
 1583              		.loc 1 1585 0 is_stmt 0 discriminator 1
 1584 0012 3D4B     		ldr	r3, .L105
 1585 0014 1B68     		ldr	r3, [r3]
 1586 0016 00E0     		b	.L94
 1587              	.L93:
 1588              		.loc 1 1585 0 discriminator 2
 1589 0018 7B68     		ldr	r3, [r7, #4]
 1590              	.L94:
 1591              		.loc 1 1585 0 discriminator 4
 1592 001a FB60     		str	r3, [r7, #12]
1586:../../../FreeRTOS_9_0/Source/tasks.c **** 
1587:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 1593              		.loc 1 1587 0 is_stmt 1 discriminator 4
 1594 001c FB68     		ldr	r3, [r7, #12]
 1595 001e 1846     		mov	r0, r3
 1596 0020 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1597 0024 0346     		mov	r3, r0
 1598 0026 2920     		movs	r0, #41
ARM GAS  /tmp/cc623FKg.s 			page 61


 1599 0028 1946     		mov	r1, r3
 1600 002a FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1588:../../../FreeRTOS_9_0/Source/tasks.c **** 
1589:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1590:../../../FreeRTOS_9_0/Source/tasks.c **** 			suspended list. */
1591:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1601              		.loc 1 1591 0 discriminator 4
 1602 002e FB68     		ldr	r3, [r7, #12]
 1603 0030 0433     		adds	r3, r3, #4
 1604 0032 1846     		mov	r0, r3
 1605 0034 FFF7FEFF 		bl	uxListRemove
 1606 0038 0346     		mov	r3, r0
 1607 003a 002B     		cmp	r3, #0
 1608 003c 15D1     		bne	.L95
1592:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1593:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1609              		.loc 1 1593 0
 1610 003e FB68     		ldr	r3, [r7, #12]
 1611 0040 DA6A     		ldr	r2, [r3, #44]
 1612 0042 3249     		ldr	r1, .L105+4
 1613 0044 1346     		mov	r3, r2
 1614 0046 9B00     		lsls	r3, r3, #2
 1615 0048 1344     		add	r3, r3, r2
 1616 004a 9B00     		lsls	r3, r3, #2
 1617 004c 0B44     		add	r3, r3, r1
 1618 004e 1B68     		ldr	r3, [r3]
 1619 0050 002B     		cmp	r3, #0
 1620 0052 0AD1     		bne	.L95
 1621              		.loc 1 1593 0 is_stmt 0 discriminator 1
 1622 0054 FB68     		ldr	r3, [r7, #12]
 1623 0056 DB6A     		ldr	r3, [r3, #44]
 1624 0058 1A46     		mov	r2, r3
 1625 005a 0123     		movs	r3, #1
 1626 005c 9340     		lsls	r3, r3, r2
 1627 005e DA43     		mvns	r2, r3
 1628 0060 2B4B     		ldr	r3, .L105+8
 1629 0062 1B68     		ldr	r3, [r3]
 1630 0064 1340     		ands	r3, r3, r2
 1631 0066 2A4A     		ldr	r2, .L105+8
 1632 0068 1360     		str	r3, [r2]
 1633              	.L95:
1594:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1595:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1596:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1597:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1598:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1599:../../../FreeRTOS_9_0/Source/tasks.c **** 
1600:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1601:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1634              		.loc 1 1601 0 is_stmt 1
 1635 006a FB68     		ldr	r3, [r7, #12]
 1636 006c 9B6A     		ldr	r3, [r3, #40]
 1637 006e 002B     		cmp	r3, #0
 1638 0070 04D0     		beq	.L97
1602:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1603:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1639              		.loc 1 1603 0
ARM GAS  /tmp/cc623FKg.s 			page 62


 1640 0072 FB68     		ldr	r3, [r7, #12]
 1641 0074 1833     		adds	r3, r3, #24
 1642 0076 1846     		mov	r0, r3
 1643 0078 FFF7FEFF 		bl	uxListRemove
 1644              	.L97:
1604:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1605:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1606:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1607:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1608:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1609:../../../FreeRTOS_9_0/Source/tasks.c **** 
1610:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 1645              		.loc 1 1610 0
 1646 007c FB68     		ldr	r3, [r7, #12]
 1647 007e 1846     		mov	r0, r3
 1648 0080 1B21     		movs	r1, #27
 1649 0082 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
1611:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1650              		.loc 1 1611 0
 1651 0086 FB68     		ldr	r3, [r7, #12]
 1652 0088 0433     		adds	r3, r3, #4
 1653 008a 2248     		ldr	r0, .L105+12
 1654 008c 1946     		mov	r1, r3
 1655 008e FFF7FEFF 		bl	vListInsertEnd
1612:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1613:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1656              		.loc 1 1613 0
 1657 0092 FFF7FEFF 		bl	vPortExitCritical
1614:../../../FreeRTOS_9_0/Source/tasks.c **** 
1615:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1658              		.loc 1 1615 0
 1659 0096 204B     		ldr	r3, .L105+16
 1660 0098 1B68     		ldr	r3, [r3]
 1661 009a 002B     		cmp	r3, #0
 1662 009c 05D0     		beq	.L98
1616:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1617:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1618:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is now in the Suspended state. */
1619:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 1663              		.loc 1 1619 0
 1664 009e FFF7FEFF 		bl	vPortEnterCritical
1620:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1621:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1665              		.loc 1 1621 0
 1666 00a2 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1622:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1623:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1667              		.loc 1 1623 0
 1668 00a6 FFF7FEFF 		bl	vPortExitCritical
 1669              	.L98:
1624:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1625:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1626:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1627:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1629:../../../FreeRTOS_9_0/Source/tasks.c **** 
1630:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
ARM GAS  /tmp/cc623FKg.s 			page 63


 1670              		.loc 1 1630 0
 1671 00aa 174B     		ldr	r3, .L105
 1672 00ac 1B68     		ldr	r3, [r3]
 1673 00ae FA68     		ldr	r2, [r7, #12]
 1674 00b0 9A42     		cmp	r2, r3
 1675 00b2 26D1     		bne	.L92
1631:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1632:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1676              		.loc 1 1632 0
 1677 00b4 184B     		ldr	r3, .L105+16
 1678 00b6 1B68     		ldr	r3, [r3]
 1679 00b8 002B     		cmp	r3, #0
 1680 00ba 16D0     		beq	.L100
1633:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1634:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The current task has just been suspended. */
1635:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1681              		.loc 1 1635 0
 1682 00bc 174B     		ldr	r3, .L105+20
 1683 00be 1B68     		ldr	r3, [r3]
 1684 00c0 002B     		cmp	r3, #0
 1685 00c2 09D0     		beq	.L101
 1686              	.LBB108:
 1687              	.LBB109:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1688              		.loc 2 237 0 discriminator 1
 1689              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1690 00c4 4FF05003 			mov r3, #80												
 1691 00c8 83F31188 		msr basepri, r3											
 1692 00cc BFF36F8F 		isb														
 1693 00d0 BFF34F8F 		dsb														
 1694              	
 1695              	@ 0 "" 2
 1696              		.thumb
 1697 00d4 BB60     		str	r3, [r7, #8]
 1698              	.L102:
 1699              	.LBE109:
 1700              	.LBE108:
 1701              		.loc 1 1635 0 discriminator 1
 1702 00d6 FEE7     		b	.L102
 1703              	.L101:
1636:../../../FreeRTOS_9_0/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1704              		.loc 1 1636 0
 1705 00d8 114B     		ldr	r3, .L105+24
 1706 00da 4FF08052 		mov	r2, #268435456
 1707 00de 1A60     		str	r2, [r3]
 1708              	@ 1636 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1709 00e0 BFF34F8F 		dsb
 1710              	@ 0 "" 2
 1711              	@ 1636 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1712 00e4 BFF36F8F 		isb
 1713              	@ 0 "" 2
 1714              		.thumb
 1715 00e8 0BE0     		b	.L92
 1716              	.L100:
1637:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1638:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1639:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
ARM GAS  /tmp/cc623FKg.s 			page 64


1640:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1641:../../../FreeRTOS_9_0/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1642:../../../FreeRTOS_9_0/Source/tasks.c **** 				must be adjusted to point to a different task. */
1643:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1717              		.loc 1 1643 0
 1718 00ea 0A4B     		ldr	r3, .L105+12
 1719 00ec 1A68     		ldr	r2, [r3]
 1720 00ee 0D4B     		ldr	r3, .L105+28
 1721 00f0 1B68     		ldr	r3, [r3]
 1722 00f2 9A42     		cmp	r2, r3
 1723 00f4 03D1     		bne	.L104
1644:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1645:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1646:../../../FreeRTOS_9_0/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1647:../../../FreeRTOS_9_0/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1648:../../../FreeRTOS_9_0/Source/tasks.c **** 					is. */
1649:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1724              		.loc 1 1649 0
 1725 00f6 044B     		ldr	r3, .L105
 1726 00f8 0022     		movs	r2, #0
 1727 00fa 1A60     		str	r2, [r3]
 1728 00fc 01E0     		b	.L92
 1729              	.L104:
1650:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1651:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1652:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1653:../../../FreeRTOS_9_0/Source/tasks.c **** 					vTaskSwitchContext();
 1730              		.loc 1 1653 0
 1731 00fe FFF7FEFF 		bl	vTaskSwitchContext
 1732              	.L92:
1654:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1655:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1656:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1657:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1658:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1659:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1660:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1661:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1733              		.loc 1 1661 0
 1734 0102 1037     		adds	r7, r7, #16
 1735              	.LCFI48:
 1736              		.cfi_def_cfa_offset 8
 1737 0104 BD46     		mov	sp, r7
 1738              	.LCFI49:
 1739              		.cfi_def_cfa_register 13
 1740              		@ sp needed
 1741 0106 80BD     		pop	{r7, pc}
 1742              	.L106:
 1743              		.align	2
 1744              	.L105:
 1745 0108 00000000 		.word	pxCurrentTCB
 1746 010c 00000000 		.word	pxReadyTasksLists
 1747 0110 00000000 		.word	uxTopReadyPriority
 1748 0114 00000000 		.word	xSuspendedTaskList
 1749 0118 00000000 		.word	xSchedulerRunning
 1750 011c 00000000 		.word	uxSchedulerSuspended
 1751 0120 04ED00E0 		.word	-536810236
ARM GAS  /tmp/cc623FKg.s 			page 65


 1752 0124 00000000 		.word	uxCurrentNumberOfTasks
 1753              		.cfi_endproc
 1754              	.LFE14:
 1756              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1757              		.align	2
 1758              		.thumb
 1759              		.thumb_func
 1761              	prvTaskIsTaskSuspended:
 1762              	.LFB15:
1662:../../../FreeRTOS_9_0/Source/tasks.c **** 
1663:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1664:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1665:../../../FreeRTOS_9_0/Source/tasks.c **** 
1666:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1667:../../../FreeRTOS_9_0/Source/tasks.c **** 
1668:../../../FreeRTOS_9_0/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1669:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1763              		.loc 1 1669 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 24
 1766              		@ frame_needed = 1, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 1768 0000 80B4     		push	{r7}
 1769              	.LCFI50:
 1770              		.cfi_def_cfa_offset 4
 1771              		.cfi_offset 7, -4
 1772 0002 87B0     		sub	sp, sp, #28
 1773              	.LCFI51:
 1774              		.cfi_def_cfa_offset 32
 1775 0004 00AF     		add	r7, sp, #0
 1776              	.LCFI52:
 1777              		.cfi_def_cfa_register 7
 1778 0006 7860     		str	r0, [r7, #4]
1670:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1779              		.loc 1 1670 0
 1780 0008 0023     		movs	r3, #0
 1781 000a 7B61     		str	r3, [r7, #20]
1671:../../../FreeRTOS_9_0/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1782              		.loc 1 1671 0
 1783 000c 7B68     		ldr	r3, [r7, #4]
 1784 000e 3B61     		str	r3, [r7, #16]
1672:../../../FreeRTOS_9_0/Source/tasks.c **** 
1673:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1674:../../../FreeRTOS_9_0/Source/tasks.c **** 		section. */
1675:../../../FreeRTOS_9_0/Source/tasks.c **** 
1676:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1677:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTask );
 1785              		.loc 1 1677 0
 1786 0010 7B68     		ldr	r3, [r7, #4]
 1787 0012 002B     		cmp	r3, #0
 1788 0014 09D1     		bne	.L108
 1789              	.LBB110:
 1790              	.LBB111:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1791              		.loc 2 237 0 discriminator 1
 1792              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1793 0016 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc623FKg.s 			page 66


 1794 001a 83F31188 		msr basepri, r3											
 1795 001e BFF36F8F 		isb														
 1796 0022 BFF34F8F 		dsb														
 1797              	
 1798              	@ 0 "" 2
 1799              		.thumb
 1800 0026 FB60     		str	r3, [r7, #12]
 1801              	.L109:
 1802              	.LBE111:
 1803              	.LBE110:
 1804              		.loc 1 1677 0 discriminator 1
 1805 0028 FEE7     		b	.L109
 1806              	.L108:
1678:../../../FreeRTOS_9_0/Source/tasks.c **** 
1679:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1680:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1807              		.loc 1 1680 0
 1808 002a 3B69     		ldr	r3, [r7, #16]
 1809 002c 5B69     		ldr	r3, [r3, #20]
 1810 002e 0F4A     		ldr	r2, .L116
 1811 0030 9342     		cmp	r3, r2
 1812 0032 01D1     		bne	.L110
 1813              		.loc 1 1680 0 is_stmt 0 discriminator 1
 1814 0034 0123     		movs	r3, #1
 1815 0036 00E0     		b	.L111
 1816              	.L110:
 1817              		.loc 1 1680 0 discriminator 2
 1818 0038 0023     		movs	r3, #0
 1819              	.L111:
 1820              		.loc 1 1680 0 discriminator 4
 1821 003a 002B     		cmp	r3, #0
 1822 003c 0FD0     		beq	.L112
1681:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1682:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1683:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1823              		.loc 1 1683 0 is_stmt 1
 1824 003e 3B69     		ldr	r3, [r7, #16]
 1825 0040 9B6A     		ldr	r3, [r3, #40]
 1826 0042 0B4A     		ldr	r2, .L116+4
 1827 0044 9342     		cmp	r3, r2
 1828 0046 0AD0     		beq	.L112
1684:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1685:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1686:../../../FreeRTOS_9_0/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1687:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1829              		.loc 1 1687 0
 1830 0048 3B69     		ldr	r3, [r7, #16]
 1831 004a 9B6A     		ldr	r3, [r3, #40]
 1832 004c 002B     		cmp	r3, #0
 1833 004e 01D1     		bne	.L113
 1834              		.loc 1 1687 0 is_stmt 0 discriminator 1
 1835 0050 0123     		movs	r3, #1
 1836 0052 00E0     		b	.L114
 1837              	.L113:
 1838              		.loc 1 1687 0 discriminator 2
 1839 0054 0023     		movs	r3, #0
 1840              	.L114:
ARM GAS  /tmp/cc623FKg.s 			page 67


 1841              		.loc 1 1687 0 discriminator 4
 1842 0056 002B     		cmp	r3, #0
 1843 0058 01D0     		beq	.L112
1688:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1689:../../../FreeRTOS_9_0/Source/tasks.c **** 					xReturn = pdTRUE;
 1844              		.loc 1 1689 0 is_stmt 1
 1845 005a 0123     		movs	r3, #1
 1846 005c 7B61     		str	r3, [r7, #20]
 1847              	.L112:
1690:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1691:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1692:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1693:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1694:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1695:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1696:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1697:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1698:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1699:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1700:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1701:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1702:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1703:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1704:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1705:../../../FreeRTOS_9_0/Source/tasks.c **** 
1706:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 1848              		.loc 1 1706 0
 1849 005e 7B69     		ldr	r3, [r7, #20]
1707:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1850              		.loc 1 1707 0
 1851 0060 1846     		mov	r0, r3
 1852 0062 1C37     		adds	r7, r7, #28
 1853              	.LCFI53:
 1854              		.cfi_def_cfa_offset 4
 1855 0064 BD46     		mov	sp, r7
 1856              	.LCFI54:
 1857              		.cfi_def_cfa_register 13
 1858              		@ sp needed
 1859 0066 5DF8047B 		ldr	r7, [sp], #4
 1860              	.LCFI55:
 1861              		.cfi_restore 7
 1862              		.cfi_def_cfa_offset 0
 1863 006a 7047     		bx	lr
 1864              	.L117:
 1865              		.align	2
 1866              	.L116:
 1867 006c 00000000 		.word	xSuspendedTaskList
 1868 0070 00000000 		.word	xPendingReadyList
 1869              		.cfi_endproc
 1870              	.LFE15:
 1872              		.section	.text.vTaskResume,"ax",%progbits
 1873              		.align	2
 1874              		.global	vTaskResume
 1875              		.thumb
 1876              		.thumb_func
 1878              	vTaskResume:
 1879              	.LFB16:
ARM GAS  /tmp/cc623FKg.s 			page 68


1708:../../../FreeRTOS_9_0/Source/tasks.c **** 
1709:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1710:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1711:../../../FreeRTOS_9_0/Source/tasks.c **** 
1712:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1713:../../../FreeRTOS_9_0/Source/tasks.c **** 
1714:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1715:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1880              		.loc 1 1715 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 16
 1883              		@ frame_needed = 1, uses_anonymous_args = 0
 1884 0000 80B5     		push	{r7, lr}
 1885              	.LCFI56:
 1886              		.cfi_def_cfa_offset 8
 1887              		.cfi_offset 7, -8
 1888              		.cfi_offset 14, -4
 1889 0002 84B0     		sub	sp, sp, #16
 1890              	.LCFI57:
 1891              		.cfi_def_cfa_offset 24
 1892 0004 00AF     		add	r7, sp, #0
 1893              	.LCFI58:
 1894              		.cfi_def_cfa_register 7
 1895 0006 7860     		str	r0, [r7, #4]
1716:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1896              		.loc 1 1716 0
 1897 0008 7B68     		ldr	r3, [r7, #4]
 1898 000a FB60     		str	r3, [r7, #12]
1717:../../../FreeRTOS_9_0/Source/tasks.c **** 
1718:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1719:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1899              		.loc 1 1719 0
 1900 000c 7B68     		ldr	r3, [r7, #4]
 1901 000e 002B     		cmp	r3, #0
 1902 0010 09D1     		bne	.L119
 1903              	.LBB112:
 1904              	.LBB113:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1905              		.loc 2 237 0 discriminator 1
 1906              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1907 0012 4FF05003 			mov r3, #80												
 1908 0016 83F31188 		msr basepri, r3											
 1909 001a BFF36F8F 		isb														
 1910 001e BFF34F8F 		dsb														
 1911              	
 1912              	@ 0 "" 2
 1913              		.thumb
 1914 0022 BB60     		str	r3, [r7, #8]
 1915              	.L120:
 1916              	.LBE113:
 1917              	.LBE112:
 1918              		.loc 1 1719 0 discriminator 1
 1919 0024 FEE7     		b	.L120
 1920              	.L119:
1720:../../../FreeRTOS_9_0/Source/tasks.c **** 
1721:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1722:../../../FreeRTOS_9_0/Source/tasks.c **** 		currently executing task. */
ARM GAS  /tmp/cc623FKg.s 			page 69


1723:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1921              		.loc 1 1723 0
 1922 0026 FB68     		ldr	r3, [r7, #12]
 1923 0028 002B     		cmp	r3, #0
 1924 002a 48D0     		beq	.L118
 1925              		.loc 1 1723 0 is_stmt 0 discriminator 1
 1926 002c 254B     		ldr	r3, .L123
 1927 002e 1B68     		ldr	r3, [r3]
 1928 0030 FA68     		ldr	r2, [r7, #12]
 1929 0032 9A42     		cmp	r2, r3
 1930 0034 43D0     		beq	.L118
1724:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1725:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 1931              		.loc 1 1725 0 is_stmt 1
 1932 0036 FFF7FEFF 		bl	vPortEnterCritical
1726:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1727:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1933              		.loc 1 1727 0
 1934 003a F868     		ldr	r0, [r7, #12]
 1935 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1936 0040 0346     		mov	r3, r0
 1937 0042 002B     		cmp	r3, #0
 1938 0044 39D0     		beq	.L122
1728:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1729:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
 1939              		.loc 1 1729 0
 1940 0046 FB68     		ldr	r3, [r7, #12]
 1941 0048 1846     		mov	r0, r3
 1942 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1943 004e 0346     		mov	r3, r0
 1944 0050 2A20     		movs	r0, #42
 1945 0052 1946     		mov	r1, r3
 1946 0054 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1730:../../../FreeRTOS_9_0/Source/tasks.c **** 
1731:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1732:../../../FreeRTOS_9_0/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1733:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1947              		.loc 1 1733 0
 1948 0058 FB68     		ldr	r3, [r7, #12]
 1949 005a 0433     		adds	r3, r3, #4
 1950 005c 1846     		mov	r0, r3
 1951 005e FFF7FEFF 		bl	uxListRemove
1734:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1952              		.loc 1 1734 0
 1953 0062 FB68     		ldr	r3, [r7, #12]
 1954 0064 1846     		mov	r0, r3
 1955 0066 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 1956 006a FB68     		ldr	r3, [r7, #12]
 1957 006c DB6A     		ldr	r3, [r3, #44]
 1958 006e 1A46     		mov	r2, r3
 1959 0070 0123     		movs	r3, #1
 1960 0072 03FA02F2 		lsl	r2, r3, r2
 1961 0076 144B     		ldr	r3, .L123+4
 1962 0078 1B68     		ldr	r3, [r3]
 1963 007a 1343     		orrs	r3, r3, r2
 1964 007c 124A     		ldr	r2, .L123+4
 1965 007e 1360     		str	r3, [r2]
ARM GAS  /tmp/cc623FKg.s 			page 70


 1966 0080 FB68     		ldr	r3, [r7, #12]
 1967 0082 DA6A     		ldr	r2, [r3, #44]
 1968 0084 1346     		mov	r3, r2
 1969 0086 9B00     		lsls	r3, r3, #2
 1970 0088 1344     		add	r3, r3, r2
 1971 008a 9B00     		lsls	r3, r3, #2
 1972 008c 0F4A     		ldr	r2, .L123+8
 1973 008e 1A44     		add	r2, r2, r3
 1974 0090 FB68     		ldr	r3, [r7, #12]
 1975 0092 0433     		adds	r3, r3, #4
 1976 0094 1046     		mov	r0, r2
 1977 0096 1946     		mov	r1, r3
 1978 0098 FFF7FEFF 		bl	vListInsertEnd
1735:../../../FreeRTOS_9_0/Source/tasks.c **** 
1736:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1737:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1979              		.loc 1 1737 0
 1980 009c FB68     		ldr	r3, [r7, #12]
 1981 009e DA6A     		ldr	r2, [r3, #44]
 1982 00a0 084B     		ldr	r3, .L123
 1983 00a2 1B68     		ldr	r3, [r3]
 1984 00a4 DB6A     		ldr	r3, [r3, #44]
 1985 00a6 9A42     		cmp	r2, r3
 1986 00a8 07D3     		bcc	.L122
1738:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1739:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1740:../../../FreeRTOS_9_0/Source/tasks.c **** 						but will leave the lists in the correct state for the
1741:../../../FreeRTOS_9_0/Source/tasks.c **** 						next yield. */
1742:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1987              		.loc 1 1742 0
 1988 00aa 094B     		ldr	r3, .L123+12
 1989 00ac 4FF08052 		mov	r2, #268435456
 1990 00b0 1A60     		str	r2, [r3]
 1991              	@ 1742 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1992 00b2 BFF34F8F 		dsb
 1993              	@ 0 "" 2
 1994              	@ 1742 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1995 00b6 BFF36F8F 		isb
 1996              	@ 0 "" 2
 1997              		.thumb
 1998              	.L122:
1743:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1744:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1745:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1746:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1747:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1748:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1749:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1750:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1751:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1752:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1753:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1754:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1999              		.loc 1 1754 0
 2000 00ba FFF7FEFF 		bl	vPortExitCritical
 2001              	.L118:
1755:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
ARM GAS  /tmp/cc623FKg.s 			page 71


1756:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1757:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1758:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1759:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1760:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 2002              		.loc 1 1760 0
 2003 00be 1037     		adds	r7, r7, #16
 2004              	.LCFI59:
 2005              		.cfi_def_cfa_offset 8
 2006 00c0 BD46     		mov	sp, r7
 2007              	.LCFI60:
 2008              		.cfi_def_cfa_register 13
 2009              		@ sp needed
 2010 00c2 80BD     		pop	{r7, pc}
 2011              	.L124:
 2012              		.align	2
 2013              	.L123:
 2014 00c4 00000000 		.word	pxCurrentTCB
 2015 00c8 00000000 		.word	uxTopReadyPriority
 2016 00cc 00000000 		.word	pxReadyTasksLists
 2017 00d0 04ED00E0 		.word	-536810236
 2018              		.cfi_endproc
 2019              	.LFE16:
 2021              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2022              		.align	2
 2023              		.global	xTaskResumeFromISR
 2024              		.thumb
 2025              		.thumb_func
 2027              	xTaskResumeFromISR:
 2028              	.LFB17:
1761:../../../FreeRTOS_9_0/Source/tasks.c **** 
1762:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1763:../../../FreeRTOS_9_0/Source/tasks.c **** 
1764:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1765:../../../FreeRTOS_9_0/Source/tasks.c **** 
1766:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1767:../../../FreeRTOS_9_0/Source/tasks.c **** 
1768:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1769:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 2029              		.loc 1 1769 0
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 40
 2032              		@ frame_needed = 1, uses_anonymous_args = 0
 2033 0000 80B5     		push	{r7, lr}
 2034              	.LCFI61:
 2035              		.cfi_def_cfa_offset 8
 2036              		.cfi_offset 7, -8
 2037              		.cfi_offset 14, -4
 2038 0002 8AB0     		sub	sp, sp, #40
 2039              	.LCFI62:
 2040              		.cfi_def_cfa_offset 48
 2041 0004 00AF     		add	r7, sp, #0
 2042              	.LCFI63:
 2043              		.cfi_def_cfa_register 7
 2044 0006 7860     		str	r0, [r7, #4]
1770:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2045              		.loc 1 1770 0
ARM GAS  /tmp/cc623FKg.s 			page 72


 2046 0008 0023     		movs	r3, #0
 2047 000a 7B62     		str	r3, [r7, #36]
1771:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2048              		.loc 1 1771 0
 2049 000c 7B68     		ldr	r3, [r7, #4]
 2050 000e 3B62     		str	r3, [r7, #32]
1772:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1773:../../../FreeRTOS_9_0/Source/tasks.c **** 
1774:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2051              		.loc 1 1774 0
 2052 0010 7B68     		ldr	r3, [r7, #4]
 2053 0012 002B     		cmp	r3, #0
 2054 0014 09D1     		bne	.L126
 2055              	.LBB114:
 2056              	.LBB115:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2057              		.loc 2 237 0 discriminator 1
 2058              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2059 0016 4FF05003 			mov r3, #80												
 2060 001a 83F31188 		msr basepri, r3											
 2061 001e BFF36F8F 		isb														
 2062 0022 BFF34F8F 		dsb														
 2063              	
 2064              	@ 0 "" 2
 2065              		.thumb
 2066 0026 BB61     		str	r3, [r7, #24]
 2067              	.L127:
 2068              	.LBE115:
 2069              	.LBE114:
 2070              		.loc 1 1774 0 discriminator 1
 2071 0028 FEE7     		b	.L127
 2072              	.L126:
1775:../../../FreeRTOS_9_0/Source/tasks.c **** 
1776:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1777:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1778:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1779:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1780:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1781:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1782:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1783:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1784:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1785:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1786:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1787:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1788:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1789:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1790:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
1791:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1792:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2073              		.loc 1 1792 0
 2074 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2075              	.LBB116:
 2076              	.LBB117:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2077              		.loc 2 253 0
 2078              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cc623FKg.s 			page 73


 2079 002e EFF31182 			mrs r2, basepri											
 2080 0032 4FF05003 		mov r3, #80												
 2081 0036 83F31188 		msr basepri, r3											
 2082 003a BFF36F8F 		isb														
 2083 003e BFF34F8F 		dsb														
 2084              	
 2085              	@ 0 "" 2
 2086              		.thumb
 2087 0042 7A61     		str	r2, [r7, #20]
 2088 0044 3B61     		str	r3, [r7, #16]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2089              		.loc 2 265 0
 2090 0046 7B69     		ldr	r3, [r7, #20]
 2091              	.LBE117:
 2092              	.LBE116:
1793:../../../FreeRTOS_9_0/Source/tasks.c **** 
1794:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2093              		.loc 1 1794 0
 2094 0048 FB61     		str	r3, [r7, #28]
1795:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1796:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2095              		.loc 1 1796 0
 2096 004a 386A     		ldr	r0, [r7, #32]
 2097 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2098 0050 0346     		mov	r3, r0
 2099 0052 002B     		cmp	r3, #0
 2100 0054 3ED0     		beq	.L129
1797:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1798:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
 2101              		.loc 1 1798 0
 2102 0056 3B6A     		ldr	r3, [r7, #32]
 2103 0058 1846     		mov	r0, r3
 2104 005a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2105 005e 0346     		mov	r3, r0
 2106 0060 2B20     		movs	r0, #43
 2107 0062 1946     		mov	r1, r3
 2108 0064 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1799:../../../FreeRTOS_9_0/Source/tasks.c **** 
1800:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1801:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2109              		.loc 1 1801 0
 2110 0068 1F4B     		ldr	r3, .L134
 2111 006a 1B68     		ldr	r3, [r3]
 2112 006c 002B     		cmp	r3, #0
 2113 006e 2BD1     		bne	.L130
1802:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1803:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1804:../../../FreeRTOS_9_0/Source/tasks.c **** 					suspended list to the ready list directly. */
1805:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2114              		.loc 1 1805 0
 2115 0070 3B6A     		ldr	r3, [r7, #32]
 2116 0072 DA6A     		ldr	r2, [r3, #44]
 2117 0074 1D4B     		ldr	r3, .L134+4
 2118 0076 1B68     		ldr	r3, [r3]
 2119 0078 DB6A     		ldr	r3, [r3, #44]
 2120 007a 9A42     		cmp	r2, r3
 2121 007c 01D3     		bcc	.L131
ARM GAS  /tmp/cc623FKg.s 			page 74


1806:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1807:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2122              		.loc 1 1807 0
 2123 007e 0123     		movs	r3, #1
 2124 0080 7B62     		str	r3, [r7, #36]
 2125              	.L131:
1808:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1809:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1810:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1811:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1812:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1813:../../../FreeRTOS_9_0/Source/tasks.c **** 
1814:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2126              		.loc 1 1814 0
 2127 0082 3B6A     		ldr	r3, [r7, #32]
 2128 0084 0433     		adds	r3, r3, #4
 2129 0086 1846     		mov	r0, r3
 2130 0088 FFF7FEFF 		bl	uxListRemove
1815:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2131              		.loc 1 1815 0
 2132 008c 3B6A     		ldr	r3, [r7, #32]
 2133 008e 1846     		mov	r0, r3
 2134 0090 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 2135 0094 3B6A     		ldr	r3, [r7, #32]
 2136 0096 DB6A     		ldr	r3, [r3, #44]
 2137 0098 1A46     		mov	r2, r3
 2138 009a 0123     		movs	r3, #1
 2139 009c 03FA02F2 		lsl	r2, r3, r2
 2140 00a0 134B     		ldr	r3, .L134+8
 2141 00a2 1B68     		ldr	r3, [r3]
 2142 00a4 1343     		orrs	r3, r3, r2
 2143 00a6 124A     		ldr	r2, .L134+8
 2144 00a8 1360     		str	r3, [r2]
 2145 00aa 3B6A     		ldr	r3, [r7, #32]
 2146 00ac DA6A     		ldr	r2, [r3, #44]
 2147 00ae 1346     		mov	r3, r2
 2148 00b0 9B00     		lsls	r3, r3, #2
 2149 00b2 1344     		add	r3, r3, r2
 2150 00b4 9B00     		lsls	r3, r3, #2
 2151 00b6 0F4A     		ldr	r2, .L134+12
 2152 00b8 1A44     		add	r2, r2, r3
 2153 00ba 3B6A     		ldr	r3, [r7, #32]
 2154 00bc 0433     		adds	r3, r3, #4
 2155 00be 1046     		mov	r0, r2
 2156 00c0 1946     		mov	r1, r3
 2157 00c2 FFF7FEFF 		bl	vListInsertEnd
 2158 00c6 05E0     		b	.L129
 2159              	.L130:
1816:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1817:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1818:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1819:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1820:../../../FreeRTOS_9_0/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1821:../../../FreeRTOS_9_0/Source/tasks.c **** 					unsuspended. */
1822:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2160              		.loc 1 1822 0
 2161 00c8 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/cc623FKg.s 			page 75


 2162 00ca 1833     		adds	r3, r3, #24
 2163 00cc 0A48     		ldr	r0, .L134+16
 2164 00ce 1946     		mov	r1, r3
 2165 00d0 FFF7FEFF 		bl	vListInsertEnd
 2166              	.L129:
 2167 00d4 FB69     		ldr	r3, [r7, #28]
 2168 00d6 FB60     		str	r3, [r7, #12]
 2169              	.LBB118:
 2170              	.LBB119:
 2171              		.loc 2 271 0
 2172 00d8 FB68     		ldr	r3, [r7, #12]
 2173              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2174 00da 83F31188 			msr basepri, r3	
 2175              	@ 0 "" 2
 2176              		.thumb
 2177              	.LBE119:
 2178              	.LBE118:
1823:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1824:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1825:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1826:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1827:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1829:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1830:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1831:../../../FreeRTOS_9_0/Source/tasks.c **** 
1832:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xYieldRequired;
 2179              		.loc 1 1832 0
 2180 00de 7B6A     		ldr	r3, [r7, #36]
1833:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 2181              		.loc 1 1833 0
 2182 00e0 1846     		mov	r0, r3
 2183 00e2 2837     		adds	r7, r7, #40
 2184              	.LCFI64:
 2185              		.cfi_def_cfa_offset 8
 2186 00e4 BD46     		mov	sp, r7
 2187              	.LCFI65:
 2188              		.cfi_def_cfa_register 13
 2189              		@ sp needed
 2190 00e6 80BD     		pop	{r7, pc}
 2191              	.L135:
 2192              		.align	2
 2193              	.L134:
 2194 00e8 00000000 		.word	uxSchedulerSuspended
 2195 00ec 00000000 		.word	pxCurrentTCB
 2196 00f0 00000000 		.word	uxTopReadyPriority
 2197 00f4 00000000 		.word	pxReadyTasksLists
 2198 00f8 00000000 		.word	xPendingReadyList
 2199              		.cfi_endproc
 2200              	.LFE17:
 2202              		.section	.rodata
 2203              		.align	2
 2204              	.LC0:
 2205 0000 49444C45 		.ascii	"IDLE\000"
 2205      00
 2206              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2207              		.align	2
ARM GAS  /tmp/cc623FKg.s 			page 76


 2208              		.global	vTaskStartScheduler
 2209              		.thumb
 2210              		.thumb_func
 2212              	vTaskStartScheduler:
 2213              	.LFB18:
1834:../../../FreeRTOS_9_0/Source/tasks.c **** 
1835:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1836:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1837:../../../FreeRTOS_9_0/Source/tasks.c **** 
1838:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskStartScheduler( void )
1839:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2214              		.loc 1 1839 0
 2215              		.cfi_startproc
 2216              		@ args = 0, pretend = 0, frame = 16
 2217              		@ frame_needed = 1, uses_anonymous_args = 0
 2218 0000 80B5     		push	{r7, lr}
 2219              	.LCFI66:
 2220              		.cfi_def_cfa_offset 8
 2221              		.cfi_offset 7, -8
 2222              		.cfi_offset 14, -4
 2223 0002 86B0     		sub	sp, sp, #24
 2224              	.LCFI67:
 2225              		.cfi_def_cfa_offset 32
 2226 0004 02AF     		add	r7, sp, #8
 2227              	.LCFI68:
 2228              		.cfi_def_cfa 7, 24
1840:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
1841:../../../FreeRTOS_9_0/Source/tasks.c **** 
1842:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1843:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1844:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1845:../../../FreeRTOS_9_0/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1846:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1847:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1848:../../../FreeRTOS_9_0/Source/tasks.c **** 
1849:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1850:../../../FreeRTOS_9_0/Source/tasks.c **** 		address of the RAM then create the idle task. */
1851:../../../FreeRTOS_9_0/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1852:../../../FreeRTOS_9_0/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1853:../../../FreeRTOS_9_0/Source/tasks.c **** 												"IDLE",
1854:../../../FreeRTOS_9_0/Source/tasks.c **** 												ulIdleTaskStackSize,
1855:../../../FreeRTOS_9_0/Source/tasks.c **** 												( void * ) NULL,
1856:../../../FreeRTOS_9_0/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1857:../../../FreeRTOS_9_0/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1858:../../../FreeRTOS_9_0/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1859:../../../FreeRTOS_9_0/Source/tasks.c **** 
1860:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1861:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1862:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdPASS;
1863:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1864:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1865:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1866:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFAIL;
1867:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1868:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1869:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else
1870:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
ARM GAS  /tmp/cc623FKg.s 			page 77


1871:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1872:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2229              		.loc 1 1872 0
 2230 0006 0023     		movs	r3, #0
 2231 0008 0093     		str	r3, [sp]
 2232 000a 194B     		ldr	r3, .L140
 2233 000c 0193     		str	r3, [sp, #4]
 2234 000e 1948     		ldr	r0, .L140+4
 2235 0010 1949     		ldr	r1, .L140+8
 2236 0012 8022     		movs	r2, #128
 2237 0014 0023     		movs	r3, #0
 2238 0016 FFF7FEFF 		bl	xTaskCreate
 2239 001a F860     		str	r0, [r7, #12]
1873:../../../FreeRTOS_9_0/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1874:../../../FreeRTOS_9_0/Source/tasks.c **** 								( void * ) NULL,
1875:../../../FreeRTOS_9_0/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1876:../../../FreeRTOS_9_0/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1877:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1878:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1879:../../../FreeRTOS_9_0/Source/tasks.c **** 
1880:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1881:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1882:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xReturn == pdPASS )
1883:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1884:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1885:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1886:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1887:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1888:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1889:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1890:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1891:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1892:../../../FreeRTOS_9_0/Source/tasks.c **** 
1893:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( xReturn == pdPASS )
 2240              		.loc 1 1893 0
 2241 001c FB68     		ldr	r3, [r7, #12]
 2242 001e 012B     		cmp	r3, #1
 2243 0020 15D1     		bne	.L137
 2244              	.LBB120:
 2245              	.LBB121:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2246              		.loc 2 237 0
 2247              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2248 0022 4FF05003 			mov r3, #80												
 2249 0026 83F31188 		msr basepri, r3											
 2250 002a BFF36F8F 		isb														
 2251 002e BFF34F8F 		dsb														
 2252              	
 2253              	@ 0 "" 2
 2254              		.thumb
 2255 0032 BB60     		str	r3, [r7, #8]
 2256              	.LBE121:
 2257              	.LBE120:
1894:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1895:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1896:../../../FreeRTOS_9_0/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1897:../../../FreeRTOS_9_0/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
ARM GAS  /tmp/cc623FKg.s 			page 78


1898:../../../FreeRTOS_9_0/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1899:../../../FreeRTOS_9_0/Source/tasks.c **** 		starts to run. */
1900:../../../FreeRTOS_9_0/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1901:../../../FreeRTOS_9_0/Source/tasks.c **** 
1902:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1903:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1904:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1905:../../../FreeRTOS_9_0/Source/tasks.c **** 			structure specific to the task that will run first. */
1906:../../../FreeRTOS_9_0/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1907:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1908:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1909:../../../FreeRTOS_9_0/Source/tasks.c **** 
1910:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2258              		.loc 1 1910 0
 2259 0034 114B     		ldr	r3, .L140+12
 2260 0036 4FF0FF32 		mov	r2, #-1
 2261 003a 1A60     		str	r2, [r3]
1911:../../../FreeRTOS_9_0/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2262              		.loc 1 1911 0
 2263 003c 104B     		ldr	r3, .L140+16
 2264 003e 0122     		movs	r2, #1
 2265 0040 1A60     		str	r2, [r3]
1912:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2266              		.loc 1 1912 0
 2267 0042 104B     		ldr	r3, .L140+20
 2268 0044 0022     		movs	r2, #0
 2269 0046 1A60     		str	r2, [r3]
1913:../../../FreeRTOS_9_0/Source/tasks.c **** 
1914:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1915:../../../FreeRTOS_9_0/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1916:../../../FreeRTOS_9_0/Source/tasks.c **** 		the run time counter time base. */
1917:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1918:../../../FreeRTOS_9_0/Source/tasks.c **** 
1919:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1920:../../../FreeRTOS_9_0/Source/tasks.c **** 		portable interface. */
1921:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2270              		.loc 1 1921 0
 2271 0048 FFF7FEFF 		bl	xPortStartScheduler
 2272 004c 0DE0     		b	.L136
 2273              	.L137:
1922:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1923:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1924:../../../FreeRTOS_9_0/Source/tasks.c **** 			function will not return. */
1925:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1926:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1927:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1928:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1929:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1930:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1931:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
1932:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1933:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1934:../../../FreeRTOS_9_0/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1935:../../../FreeRTOS_9_0/Source/tasks.c **** 		or the timer task. */
1936:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2274              		.loc 1 1936 0
 2275 004e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc623FKg.s 			page 79


 2276 0050 B3F1FF3F 		cmp	r3, #-1
 2277 0054 09D1     		bne	.L136
 2278              	.LBB122:
 2279              	.LBB123:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2280              		.loc 2 237 0 discriminator 1
 2281              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2282 0056 4FF05003 			mov r3, #80												
 2283 005a 83F31188 		msr basepri, r3											
 2284 005e BFF36F8F 		isb														
 2285 0062 BFF34F8F 		dsb														
 2286              	
 2287              	@ 0 "" 2
 2288              		.thumb
 2289 0066 7B60     		str	r3, [r7, #4]
 2290              	.L139:
 2291              	.LBE123:
 2292              	.LBE122:
 2293              		.loc 1 1936 0 discriminator 2
 2294 0068 FEE7     		b	.L139
 2295              	.L136:
1937:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1938:../../../FreeRTOS_9_0/Source/tasks.c **** 
1939:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1940:../../../FreeRTOS_9_0/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1941:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1942:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2296              		.loc 1 1942 0
 2297 006a 1037     		adds	r7, r7, #16
 2298              	.LCFI69:
 2299              		.cfi_def_cfa_offset 8
 2300 006c BD46     		mov	sp, r7
 2301              	.LCFI70:
 2302              		.cfi_def_cfa_register 13
 2303              		@ sp needed
 2304 006e 80BD     		pop	{r7, pc}
 2305              	.L141:
 2306              		.align	2
 2307              	.L140:
 2308 0070 00000000 		.word	xIdleTaskHandle
 2309 0074 00000000 		.word	prvIdleTask
 2310 0078 00000000 		.word	.LC0
 2311 007c 00000000 		.word	xNextTaskUnblockTime
 2312 0080 00000000 		.word	xSchedulerRunning
 2313 0084 00000000 		.word	xTickCount
 2314              		.cfi_endproc
 2315              	.LFE18:
 2317              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2318              		.align	2
 2319              		.global	vTaskEndScheduler
 2320              		.thumb
 2321              		.thumb_func
 2323              	vTaskEndScheduler:
 2324              	.LFB19:
1943:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1944:../../../FreeRTOS_9_0/Source/tasks.c **** 
1945:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskEndScheduler( void )
ARM GAS  /tmp/cc623FKg.s 			page 80


1946:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2325              		.loc 1 1946 0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 8
 2328              		@ frame_needed = 1, uses_anonymous_args = 0
 2329 0000 80B5     		push	{r7, lr}
 2330              	.LCFI71:
 2331              		.cfi_def_cfa_offset 8
 2332              		.cfi_offset 7, -8
 2333              		.cfi_offset 14, -4
 2334 0002 82B0     		sub	sp, sp, #8
 2335              	.LCFI72:
 2336              		.cfi_def_cfa_offset 16
 2337 0004 00AF     		add	r7, sp, #0
 2338              	.LCFI73:
 2339              		.cfi_def_cfa_register 7
 2340              	.LBB124:
 2341              	.LBB125:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2342              		.loc 2 237 0
 2343              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2344 0006 4FF05003 			mov r3, #80												
 2345 000a 83F31188 		msr basepri, r3											
 2346 000e BFF36F8F 		isb														
 2347 0012 BFF34F8F 		dsb														
 2348              	
 2349              	@ 0 "" 2
 2350              		.thumb
 2351 0016 7B60     		str	r3, [r7, #4]
 2352              	.LBE125:
 2353              	.LBE124:
1947:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1948:../../../FreeRTOS_9_0/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1949:../../../FreeRTOS_9_0/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1950:../../../FreeRTOS_9_0/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1951:../../../FreeRTOS_9_0/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2354              		.loc 1 1951 0
 2355 0018 034B     		ldr	r3, .L143
 2356 001a 0022     		movs	r2, #0
 2357 001c 1A60     		str	r2, [r3]
1952:../../../FreeRTOS_9_0/Source/tasks.c **** 	vPortEndScheduler();
 2358              		.loc 1 1952 0
 2359 001e FFF7FEFF 		bl	vPortEndScheduler
1953:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2360              		.loc 1 1953 0
 2361 0022 0837     		adds	r7, r7, #8
 2362              	.LCFI74:
 2363              		.cfi_def_cfa_offset 8
 2364 0024 BD46     		mov	sp, r7
 2365              	.LCFI75:
 2366              		.cfi_def_cfa_register 13
 2367              		@ sp needed
 2368 0026 80BD     		pop	{r7, pc}
 2369              	.L144:
 2370              		.align	2
 2371              	.L143:
 2372 0028 00000000 		.word	xSchedulerRunning
ARM GAS  /tmp/cc623FKg.s 			page 81


 2373              		.cfi_endproc
 2374              	.LFE19:
 2376              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2377              		.align	2
 2378              		.global	vTaskSuspendAll
 2379              		.thumb
 2380              		.thumb_func
 2382              	vTaskSuspendAll:
 2383              	.LFB20:
1954:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
1955:../../../FreeRTOS_9_0/Source/tasks.c **** 
1956:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSuspendAll( void )
1957:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2384              		.loc 1 1957 0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 0
 2387              		@ frame_needed = 1, uses_anonymous_args = 0
 2388              		@ link register save eliminated.
 2389 0000 80B4     		push	{r7}
 2390              	.LCFI76:
 2391              		.cfi_def_cfa_offset 4
 2392              		.cfi_offset 7, -4
 2393 0002 00AF     		add	r7, sp, #0
 2394              	.LCFI77:
 2395              		.cfi_def_cfa_register 7
1958:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1959:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1960:../../../FreeRTOS_9_0/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1961:../../../FreeRTOS_9_0/Source/tasks.c **** 	http://goo.gl/wu4acr */
1962:../../../FreeRTOS_9_0/Source/tasks.c **** 	++uxSchedulerSuspended;
 2396              		.loc 1 1962 0
 2397 0004 044B     		ldr	r3, .L146
 2398 0006 1B68     		ldr	r3, [r3]
 2399 0008 0133     		adds	r3, r3, #1
 2400 000a 034A     		ldr	r2, .L146
 2401 000c 1360     		str	r3, [r2]
1963:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2402              		.loc 1 1963 0
 2403 000e BD46     		mov	sp, r7
 2404              	.LCFI78:
 2405              		.cfi_def_cfa_register 13
 2406              		@ sp needed
 2407 0010 5DF8047B 		ldr	r7, [sp], #4
 2408              	.LCFI79:
 2409              		.cfi_restore 7
 2410              		.cfi_def_cfa_offset 0
 2411 0014 7047     		bx	lr
 2412              	.L147:
 2413 0016 00BF     		.align	2
 2414              	.L146:
 2415 0018 00000000 		.word	uxSchedulerSuspended
 2416              		.cfi_endproc
 2417              	.LFE20:
 2419              		.section	.text.xTaskResumeAll,"ax",%progbits
 2420              		.align	2
 2421              		.global	xTaskResumeAll
 2422              		.thumb
ARM GAS  /tmp/cc623FKg.s 			page 82


 2423              		.thumb_func
 2425              	xTaskResumeAll:
 2426              	.LFB21:
1964:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
1965:../../../FreeRTOS_9_0/Source/tasks.c **** 
1966:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1967:../../../FreeRTOS_9_0/Source/tasks.c **** 
1968:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1969:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1970:../../../FreeRTOS_9_0/Source/tasks.c **** 	TickType_t xReturn;
1971:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1972:../../../FreeRTOS_9_0/Source/tasks.c **** 
1973:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1974:../../../FreeRTOS_9_0/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1975:../../../FreeRTOS_9_0/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1976:../../../FreeRTOS_9_0/Source/tasks.c **** 		running. */
1977:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1978:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1979:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1980:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1981:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1982:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1983:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1984:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
1985:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1986:../../../FreeRTOS_9_0/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1987:../../../FreeRTOS_9_0/Source/tasks.c **** 
1988:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1989:../../../FreeRTOS_9_0/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1990:../../../FreeRTOS_9_0/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1991:../../../FreeRTOS_9_0/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1992:../../../FreeRTOS_9_0/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1993:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1994:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1995:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1996:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1997:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1998:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
1999:../../../FreeRTOS_9_0/Source/tasks.c **** 
2000:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2001:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2002:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2003:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2004:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2005:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2006:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2007:../../../FreeRTOS_9_0/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2008:../../../FreeRTOS_9_0/Source/tasks.c **** 			processed. */
2009:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2010:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2011:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2012:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2013:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2014:../../../FreeRTOS_9_0/Source/tasks.c **** 			idle priority.  This path can only be reached if
2015:../../../FreeRTOS_9_0/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2016:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2017:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
ARM GAS  /tmp/cc623FKg.s 			page 83


2018:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2019:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2020:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2021:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2022:../../../FreeRTOS_9_0/Source/tasks.c **** 
2023:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2024:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2025:../../../FreeRTOS_9_0/Source/tasks.c **** 
2026:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2027:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2028:../../../FreeRTOS_9_0/Source/tasks.c **** 
2029:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2030:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2427              		.loc 1 2030 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 16
 2430              		@ frame_needed = 1, uses_anonymous_args = 0
 2431 0000 80B5     		push	{r7, lr}
 2432              	.LCFI80:
 2433              		.cfi_def_cfa_offset 8
 2434              		.cfi_offset 7, -8
 2435              		.cfi_offset 14, -4
 2436 0002 84B0     		sub	sp, sp, #16
 2437              	.LCFI81:
 2438              		.cfi_def_cfa_offset 24
 2439 0004 00AF     		add	r7, sp, #0
 2440              	.LCFI82:
 2441              		.cfi_def_cfa_register 7
2031:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2442              		.loc 1 2031 0
 2443 0006 0023     		movs	r3, #0
 2444 0008 FB60     		str	r3, [r7, #12]
2032:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2445              		.loc 1 2032 0
 2446 000a 0023     		movs	r3, #0
 2447 000c BB60     		str	r3, [r7, #8]
2033:../../../FreeRTOS_9_0/Source/tasks.c **** 
2034:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2035:../../../FreeRTOS_9_0/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2036:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2448              		.loc 1 2036 0
 2449 000e 444B     		ldr	r3, .L159
 2450 0010 1B68     		ldr	r3, [r3]
 2451 0012 002B     		cmp	r3, #0
 2452 0014 09D1     		bne	.L149
 2453              	.LBB126:
 2454              	.LBB127:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2455              		.loc 2 237 0 discriminator 1
 2456              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2457 0016 4FF05003 			mov r3, #80												
 2458 001a 83F31188 		msr basepri, r3											
 2459 001e BFF36F8F 		isb														
 2460 0022 BFF34F8F 		dsb														
 2461              	
 2462              	@ 0 "" 2
 2463              		.thumb
ARM GAS  /tmp/cc623FKg.s 			page 84


 2464 0026 3B60     		str	r3, [r7]
 2465              	.L150:
 2466              	.LBE127:
 2467              	.LBE126:
 2468              		.loc 1 2036 0 discriminator 1
 2469 0028 FEE7     		b	.L150
 2470              	.L149:
2037:../../../FreeRTOS_9_0/Source/tasks.c **** 
2038:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2039:../../../FreeRTOS_9_0/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2040:../../../FreeRTOS_9_0/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2041:../../../FreeRTOS_9_0/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2042:../../../FreeRTOS_9_0/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2043:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 2471              		.loc 1 2043 0
 2472 002a FFF7FEFF 		bl	vPortEnterCritical
2044:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2045:../../../FreeRTOS_9_0/Source/tasks.c **** 		--uxSchedulerSuspended;
 2473              		.loc 1 2045 0
 2474 002e 3C4B     		ldr	r3, .L159
 2475 0030 1B68     		ldr	r3, [r3]
 2476 0032 013B     		subs	r3, r3, #1
 2477 0034 3A4A     		ldr	r2, .L159
 2478 0036 1360     		str	r3, [r2]
2046:../../../FreeRTOS_9_0/Source/tasks.c **** 
2047:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2479              		.loc 1 2047 0
 2480 0038 394B     		ldr	r3, .L159
 2481 003a 1B68     		ldr	r3, [r3]
 2482 003c 002B     		cmp	r3, #0
 2483 003e 67D1     		bne	.L151
2048:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2049:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2484              		.loc 1 2049 0
 2485 0040 384B     		ldr	r3, .L159+4
 2486 0042 1B68     		ldr	r3, [r3]
 2487 0044 002B     		cmp	r3, #0
 2488 0046 63D0     		beq	.L151
2050:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2051:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2052:../../../FreeRTOS_9_0/Source/tasks.c **** 				appropriate ready list. */
2053:../../../FreeRTOS_9_0/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2489              		.loc 1 2053 0
 2490 0048 34E0     		b	.L152
 2491              	.L153:
2054:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2055:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2492              		.loc 1 2055 0
 2493 004a 374B     		ldr	r3, .L159+8
 2494 004c DB68     		ldr	r3, [r3, #12]
 2495 004e DB68     		ldr	r3, [r3, #12]
 2496 0050 FB60     		str	r3, [r7, #12]
2056:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2497              		.loc 1 2056 0
 2498 0052 FB68     		ldr	r3, [r7, #12]
 2499 0054 1833     		adds	r3, r3, #24
 2500 0056 1846     		mov	r0, r3
ARM GAS  /tmp/cc623FKg.s 			page 85


 2501 0058 FFF7FEFF 		bl	uxListRemove
2057:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2502              		.loc 1 2057 0
 2503 005c FB68     		ldr	r3, [r7, #12]
 2504 005e 0433     		adds	r3, r3, #4
 2505 0060 1846     		mov	r0, r3
 2506 0062 FFF7FEFF 		bl	uxListRemove
2058:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2507              		.loc 1 2058 0
 2508 0066 FB68     		ldr	r3, [r7, #12]
 2509 0068 1846     		mov	r0, r3
 2510 006a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 2511 006e FB68     		ldr	r3, [r7, #12]
 2512 0070 DB6A     		ldr	r3, [r3, #44]
 2513 0072 1A46     		mov	r2, r3
 2514 0074 0123     		movs	r3, #1
 2515 0076 03FA02F2 		lsl	r2, r3, r2
 2516 007a 2C4B     		ldr	r3, .L159+12
 2517 007c 1B68     		ldr	r3, [r3]
 2518 007e 1343     		orrs	r3, r3, r2
 2519 0080 2A4A     		ldr	r2, .L159+12
 2520 0082 1360     		str	r3, [r2]
 2521 0084 FB68     		ldr	r3, [r7, #12]
 2522 0086 DA6A     		ldr	r2, [r3, #44]
 2523 0088 1346     		mov	r3, r2
 2524 008a 9B00     		lsls	r3, r3, #2
 2525 008c 1344     		add	r3, r3, r2
 2526 008e 9B00     		lsls	r3, r3, #2
 2527 0090 274A     		ldr	r2, .L159+16
 2528 0092 1A44     		add	r2, r2, r3
 2529 0094 FB68     		ldr	r3, [r7, #12]
 2530 0096 0433     		adds	r3, r3, #4
 2531 0098 1046     		mov	r0, r2
 2532 009a 1946     		mov	r1, r3
 2533 009c FFF7FEFF 		bl	vListInsertEnd
2059:../../../FreeRTOS_9_0/Source/tasks.c **** 
2060:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2061:../../../FreeRTOS_9_0/Source/tasks.c **** 					task then a yield must be performed. */
2062:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2534              		.loc 1 2062 0
 2535 00a0 FB68     		ldr	r3, [r7, #12]
 2536 00a2 DA6A     		ldr	r2, [r3, #44]
 2537 00a4 234B     		ldr	r3, .L159+20
 2538 00a6 1B68     		ldr	r3, [r3]
 2539 00a8 DB6A     		ldr	r3, [r3, #44]
 2540 00aa 9A42     		cmp	r2, r3
 2541 00ac 02D3     		bcc	.L152
2063:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2064:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2542              		.loc 1 2064 0
 2543 00ae 224B     		ldr	r3, .L159+24
 2544 00b0 0122     		movs	r2, #1
 2545 00b2 1A60     		str	r2, [r3]
 2546              	.L152:
2053:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 2547              		.loc 1 2053 0
 2548 00b4 1C4B     		ldr	r3, .L159+8
ARM GAS  /tmp/cc623FKg.s 			page 86


 2549 00b6 1B68     		ldr	r3, [r3]
 2550 00b8 002B     		cmp	r3, #0
 2551 00ba C6D1     		bne	.L153
2065:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2066:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2067:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2068:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2069:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2070:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2071:../../../FreeRTOS_9_0/Source/tasks.c **** 
2072:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB != NULL )
 2552              		.loc 1 2072 0
 2553 00bc FB68     		ldr	r3, [r7, #12]
 2554 00be 002B     		cmp	r3, #0
 2555 00c0 01D0     		beq	.L154
2073:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2074:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2075:../../../FreeRTOS_9_0/Source/tasks.c **** 					which may have prevented the next unblock time from being
2076:../../../FreeRTOS_9_0/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2077:../../../FreeRTOS_9_0/Source/tasks.c **** 					important for low power tickless implementations, where
2078:../../../FreeRTOS_9_0/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2079:../../../FreeRTOS_9_0/Source/tasks.c **** 					state. */
2080:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2556              		.loc 1 2080 0
 2557 00c2 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2558              	.L154:
 2559              	.LBB128:
2081:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2082:../../../FreeRTOS_9_0/Source/tasks.c **** 
2083:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2084:../../../FreeRTOS_9_0/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2085:../../../FreeRTOS_9_0/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2086:../../../FreeRTOS_9_0/Source/tasks.c **** 				time. */
2087:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2088:../../../FreeRTOS_9_0/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2560              		.loc 1 2088 0
 2561 00c6 1D4B     		ldr	r3, .L159+28
 2562 00c8 1B68     		ldr	r3, [r3]
 2563 00ca 7B60     		str	r3, [r7, #4]
2089:../../../FreeRTOS_9_0/Source/tasks.c **** 
2090:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2564              		.loc 1 2090 0
 2565 00cc 7B68     		ldr	r3, [r7, #4]
 2566 00ce 002B     		cmp	r3, #0
 2567 00d0 10D0     		beq	.L155
 2568              	.L157:
2091:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2092:../../../FreeRTOS_9_0/Source/tasks.c **** 						do
2093:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
2094:../../../FreeRTOS_9_0/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2569              		.loc 1 2094 0
 2570 00d2 FFF7FEFF 		bl	xTaskIncrementTick
 2571 00d6 0346     		mov	r3, r0
 2572 00d8 002B     		cmp	r3, #0
 2573 00da 02D0     		beq	.L156
2095:../../../FreeRTOS_9_0/Source/tasks.c **** 							{
2096:../../../FreeRTOS_9_0/Source/tasks.c **** 								xYieldPending = pdTRUE;
ARM GAS  /tmp/cc623FKg.s 			page 87


 2574              		.loc 1 2096 0
 2575 00dc 164B     		ldr	r3, .L159+24
 2576 00de 0122     		movs	r2, #1
 2577 00e0 1A60     		str	r2, [r3]
 2578              	.L156:
2097:../../../FreeRTOS_9_0/Source/tasks.c **** 							}
2098:../../../FreeRTOS_9_0/Source/tasks.c **** 							else
2099:../../../FreeRTOS_9_0/Source/tasks.c **** 							{
2100:../../../FreeRTOS_9_0/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2101:../../../FreeRTOS_9_0/Source/tasks.c **** 							}
2102:../../../FreeRTOS_9_0/Source/tasks.c **** 							--uxPendedCounts;
 2579              		.loc 1 2102 0
 2580 00e2 7B68     		ldr	r3, [r7, #4]
 2581 00e4 013B     		subs	r3, r3, #1
 2582 00e6 7B60     		str	r3, [r7, #4]
2103:../../../FreeRTOS_9_0/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2583              		.loc 1 2103 0
 2584 00e8 7B68     		ldr	r3, [r7, #4]
 2585 00ea 002B     		cmp	r3, #0
 2586 00ec F1D1     		bne	.L157
2104:../../../FreeRTOS_9_0/Source/tasks.c **** 
2105:../../../FreeRTOS_9_0/Source/tasks.c **** 						uxPendedTicks = 0;
 2587              		.loc 1 2105 0
 2588 00ee 134B     		ldr	r3, .L159+28
 2589 00f0 0022     		movs	r2, #0
 2590 00f2 1A60     		str	r2, [r3]
 2591              	.L155:
 2592              	.LBE128:
2106:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2107:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2108:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2109:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2110:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2111:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2112:../../../FreeRTOS_9_0/Source/tasks.c **** 
2113:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2593              		.loc 1 2113 0
 2594 00f4 104B     		ldr	r3, .L159+24
 2595 00f6 1B68     		ldr	r3, [r3]
 2596 00f8 002B     		cmp	r3, #0
 2597 00fa 09D0     		beq	.L151
2114:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2115:../../../FreeRTOS_9_0/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2116:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2117:../../../FreeRTOS_9_0/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2598              		.loc 1 2117 0
 2599 00fc 0123     		movs	r3, #1
 2600 00fe BB60     		str	r3, [r7, #8]
2118:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2119:../../../FreeRTOS_9_0/Source/tasks.c **** 					#endif
2120:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2601              		.loc 1 2120 0
 2602 0100 0F4B     		ldr	r3, .L159+32
 2603 0102 4FF08052 		mov	r2, #268435456
 2604 0106 1A60     		str	r2, [r3]
 2605              	@ 2120 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 2606 0108 BFF34F8F 		dsb
ARM GAS  /tmp/cc623FKg.s 			page 88


 2607              	@ 0 "" 2
 2608              	@ 2120 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 2609 010c BFF36F8F 		isb
 2610              	@ 0 "" 2
 2611              		.thumb
 2612              	.L151:
2121:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2122:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2123:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2124:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2125:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2126:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2128:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2129:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2130:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2131:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2132:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2133:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2613              		.loc 1 2133 0
 2614 0110 FFF7FEFF 		bl	vPortExitCritical
2134:../../../FreeRTOS_9_0/Source/tasks.c **** 
2135:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xAlreadyYielded;
 2615              		.loc 1 2135 0
 2616 0114 BB68     		ldr	r3, [r7, #8]
2136:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2617              		.loc 1 2136 0
 2618 0116 1846     		mov	r0, r3
 2619 0118 1037     		adds	r7, r7, #16
 2620              	.LCFI83:
 2621              		.cfi_def_cfa_offset 8
 2622 011a BD46     		mov	sp, r7
 2623              	.LCFI84:
 2624              		.cfi_def_cfa_register 13
 2625              		@ sp needed
 2626 011c 80BD     		pop	{r7, pc}
 2627              	.L160:
 2628 011e 00BF     		.align	2
 2629              	.L159:
 2630 0120 00000000 		.word	uxSchedulerSuspended
 2631 0124 00000000 		.word	uxCurrentNumberOfTasks
 2632 0128 00000000 		.word	xPendingReadyList
 2633 012c 00000000 		.word	uxTopReadyPriority
 2634 0130 00000000 		.word	pxReadyTasksLists
 2635 0134 00000000 		.word	pxCurrentTCB
 2636 0138 00000000 		.word	xYieldPending
 2637 013c 00000000 		.word	uxPendedTicks
 2638 0140 04ED00E0 		.word	-536810236
 2639              		.cfi_endproc
 2640              	.LFE21:
 2642              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2643              		.align	2
 2644              		.global	xTaskGetTickCount
 2645              		.thumb
 2646              		.thumb_func
 2648              	xTaskGetTickCount:
 2649              	.LFB22:
ARM GAS  /tmp/cc623FKg.s 			page 89


2137:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2138:../../../FreeRTOS_9_0/Source/tasks.c **** 
2139:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2140:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2650              		.loc 1 2140 0
 2651              		.cfi_startproc
 2652              		@ args = 0, pretend = 0, frame = 8
 2653              		@ frame_needed = 1, uses_anonymous_args = 0
 2654              		@ link register save eliminated.
 2655 0000 80B4     		push	{r7}
 2656              	.LCFI85:
 2657              		.cfi_def_cfa_offset 4
 2658              		.cfi_offset 7, -4
 2659 0002 83B0     		sub	sp, sp, #12
 2660              	.LCFI86:
 2661              		.cfi_def_cfa_offset 16
 2662 0004 00AF     		add	r7, sp, #0
 2663              	.LCFI87:
 2664              		.cfi_def_cfa_register 7
2141:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTicks;
2142:../../../FreeRTOS_9_0/Source/tasks.c **** 
2143:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2144:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2145:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2146:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTicks = xTickCount;
 2665              		.loc 1 2146 0
 2666 0006 054B     		ldr	r3, .L163
 2667 0008 1B68     		ldr	r3, [r3]
 2668 000a 7B60     		str	r3, [r7, #4]
2147:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2148:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2149:../../../FreeRTOS_9_0/Source/tasks.c **** 
2150:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xTicks;
 2669              		.loc 1 2150 0
 2670 000c 7B68     		ldr	r3, [r7, #4]
2151:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2671              		.loc 1 2151 0
 2672 000e 1846     		mov	r0, r3
 2673 0010 0C37     		adds	r7, r7, #12
 2674              	.LCFI88:
 2675              		.cfi_def_cfa_offset 4
 2676 0012 BD46     		mov	sp, r7
 2677              	.LCFI89:
 2678              		.cfi_def_cfa_register 13
 2679              		@ sp needed
 2680 0014 5DF8047B 		ldr	r7, [sp], #4
 2681              	.LCFI90:
 2682              		.cfi_restore 7
 2683              		.cfi_def_cfa_offset 0
 2684 0018 7047     		bx	lr
 2685              	.L164:
 2686 001a 00BF     		.align	2
 2687              	.L163:
 2688 001c 00000000 		.word	xTickCount
 2689              		.cfi_endproc
 2690              	.LFE22:
 2692              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
ARM GAS  /tmp/cc623FKg.s 			page 90


 2693              		.align	2
 2694              		.global	xTaskGetTickCountFromISR
 2695              		.thumb
 2696              		.thumb_func
 2698              	xTaskGetTickCountFromISR:
 2699              	.LFB23:
2152:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2153:../../../FreeRTOS_9_0/Source/tasks.c **** 
2154:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2155:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2700              		.loc 1 2155 0
 2701              		.cfi_startproc
 2702              		@ args = 0, pretend = 0, frame = 8
 2703              		@ frame_needed = 1, uses_anonymous_args = 0
 2704 0000 80B5     		push	{r7, lr}
 2705              	.LCFI91:
 2706              		.cfi_def_cfa_offset 8
 2707              		.cfi_offset 7, -8
 2708              		.cfi_offset 14, -4
 2709 0002 82B0     		sub	sp, sp, #8
 2710              	.LCFI92:
 2711              		.cfi_def_cfa_offset 16
 2712 0004 00AF     		add	r7, sp, #0
 2713              	.LCFI93:
 2714              		.cfi_def_cfa_register 7
2156:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xReturn;
2157:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2158:../../../FreeRTOS_9_0/Source/tasks.c **** 
2159:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2160:../../../FreeRTOS_9_0/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2161:../../../FreeRTOS_9_0/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2162:../../../FreeRTOS_9_0/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2163:../../../FreeRTOS_9_0/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2164:../../../FreeRTOS_9_0/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2165:../../../FreeRTOS_9_0/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2166:../../../FreeRTOS_9_0/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2167:../../../FreeRTOS_9_0/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2168:../../../FreeRTOS_9_0/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2169:../../../FreeRTOS_9_0/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2170:../../../FreeRTOS_9_0/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2171:../../../FreeRTOS_9_0/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2172:../../../FreeRTOS_9_0/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2173:../../../FreeRTOS_9_0/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2715              		.loc 1 2173 0
 2716 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2174:../../../FreeRTOS_9_0/Source/tasks.c **** 
2175:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2717              		.loc 1 2175 0
 2718 000a 0023     		movs	r3, #0
 2719 000c 7B60     		str	r3, [r7, #4]
2176:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2177:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = xTickCount;
 2720              		.loc 1 2177 0
 2721 000e 044B     		ldr	r3, .L167
 2722 0010 1B68     		ldr	r3, [r3]
 2723 0012 3B60     		str	r3, [r7]
2178:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
ARM GAS  /tmp/cc623FKg.s 			page 91


2179:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2180:../../../FreeRTOS_9_0/Source/tasks.c **** 
2181:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 2724              		.loc 1 2181 0
 2725 0014 3B68     		ldr	r3, [r7]
2182:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2726              		.loc 1 2182 0
 2727 0016 1846     		mov	r0, r3
 2728 0018 0837     		adds	r7, r7, #8
 2729              	.LCFI94:
 2730              		.cfi_def_cfa_offset 8
 2731 001a BD46     		mov	sp, r7
 2732              	.LCFI95:
 2733              		.cfi_def_cfa_register 13
 2734              		@ sp needed
 2735 001c 80BD     		pop	{r7, pc}
 2736              	.L168:
 2737 001e 00BF     		.align	2
 2738              	.L167:
 2739 0020 00000000 		.word	xTickCount
 2740              		.cfi_endproc
 2741              	.LFE23:
 2743              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2744              		.align	2
 2745              		.global	uxTaskGetNumberOfTasks
 2746              		.thumb
 2747              		.thumb_func
 2749              	uxTaskGetNumberOfTasks:
 2750              	.LFB24:
2183:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2184:../../../FreeRTOS_9_0/Source/tasks.c **** 
2185:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2186:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2751              		.loc 1 2186 0
 2752              		.cfi_startproc
 2753              		@ args = 0, pretend = 0, frame = 0
 2754              		@ frame_needed = 1, uses_anonymous_args = 0
 2755              		@ link register save eliminated.
 2756 0000 80B4     		push	{r7}
 2757              	.LCFI96:
 2758              		.cfi_def_cfa_offset 4
 2759              		.cfi_offset 7, -4
 2760 0002 00AF     		add	r7, sp, #0
 2761              	.LCFI97:
 2762              		.cfi_def_cfa_register 7
2187:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2188:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t. */
2189:../../../FreeRTOS_9_0/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2763              		.loc 1 2189 0
 2764 0004 034B     		ldr	r3, .L171
 2765 0006 1B68     		ldr	r3, [r3]
2190:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2766              		.loc 1 2190 0
 2767 0008 1846     		mov	r0, r3
 2768 000a BD46     		mov	sp, r7
 2769              	.LCFI98:
 2770              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc623FKg.s 			page 92


 2771              		@ sp needed
 2772 000c 5DF8047B 		ldr	r7, [sp], #4
 2773              	.LCFI99:
 2774              		.cfi_restore 7
 2775              		.cfi_def_cfa_offset 0
 2776 0010 7047     		bx	lr
 2777              	.L172:
 2778 0012 00BF     		.align	2
 2779              	.L171:
 2780 0014 00000000 		.word	uxCurrentNumberOfTasks
 2781              		.cfi_endproc
 2782              	.LFE24:
 2784              		.section	.text.pcTaskGetName,"ax",%progbits
 2785              		.align	2
 2786              		.global	pcTaskGetName
 2787              		.thumb
 2788              		.thumb_func
 2790              	pcTaskGetName:
 2791              	.LFB25:
2191:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:../../../FreeRTOS_9_0/Source/tasks.c **** 
2193:../../../FreeRTOS_9_0/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2194:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2792              		.loc 1 2194 0
 2793              		.cfi_startproc
 2794              		@ args = 0, pretend = 0, frame = 16
 2795              		@ frame_needed = 1, uses_anonymous_args = 0
 2796              		@ link register save eliminated.
 2797 0000 80B4     		push	{r7}
 2798              	.LCFI100:
 2799              		.cfi_def_cfa_offset 4
 2800              		.cfi_offset 7, -4
 2801 0002 85B0     		sub	sp, sp, #20
 2802              	.LCFI101:
 2803              		.cfi_def_cfa_offset 24
 2804 0004 00AF     		add	r7, sp, #0
 2805              	.LCFI102:
 2806              		.cfi_def_cfa_register 7
 2807 0006 7860     		str	r0, [r7, #4]
2195:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB;
2196:../../../FreeRTOS_9_0/Source/tasks.c **** 
2197:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2198:../../../FreeRTOS_9_0/Source/tasks.c **** 	queried. */
2199:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2808              		.loc 1 2199 0
 2809 0008 7B68     		ldr	r3, [r7, #4]
 2810 000a 002B     		cmp	r3, #0
 2811 000c 02D1     		bne	.L174
 2812              		.loc 1 2199 0 is_stmt 0 discriminator 1
 2813 000e 0D4B     		ldr	r3, .L179
 2814 0010 1B68     		ldr	r3, [r3]
 2815 0012 00E0     		b	.L175
 2816              	.L174:
 2817              		.loc 1 2199 0 discriminator 2
 2818 0014 7B68     		ldr	r3, [r7, #4]
 2819              	.L175:
 2820              		.loc 1 2199 0 discriminator 4
ARM GAS  /tmp/cc623FKg.s 			page 93


 2821 0016 FB60     		str	r3, [r7, #12]
2200:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTCB );
 2822              		.loc 1 2200 0 is_stmt 1 discriminator 4
 2823 0018 FB68     		ldr	r3, [r7, #12]
 2824 001a 002B     		cmp	r3, #0
 2825 001c 09D1     		bne	.L176
 2826              	.LBB129:
 2827              	.LBB130:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2828              		.loc 2 237 0 discriminator 1
 2829              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2830 001e 4FF05003 			mov r3, #80												
 2831 0022 83F31188 		msr basepri, r3											
 2832 0026 BFF36F8F 		isb														
 2833 002a BFF34F8F 		dsb														
 2834              	
 2835              	@ 0 "" 2
 2836              		.thumb
 2837 002e BB60     		str	r3, [r7, #8]
 2838              	.L177:
 2839              	.LBE130:
 2840              	.LBE129:
 2841              		.loc 1 2200 0 discriminator 1
 2842 0030 FEE7     		b	.L177
 2843              	.L176:
2201:../../../FreeRTOS_9_0/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2844              		.loc 1 2201 0
 2845 0032 FB68     		ldr	r3, [r7, #12]
 2846 0034 3433     		adds	r3, r3, #52
2202:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2847              		.loc 1 2202 0
 2848 0036 1846     		mov	r0, r3
 2849 0038 1437     		adds	r7, r7, #20
 2850              	.LCFI103:
 2851              		.cfi_def_cfa_offset 4
 2852 003a BD46     		mov	sp, r7
 2853              	.LCFI104:
 2854              		.cfi_def_cfa_register 13
 2855              		@ sp needed
 2856 003c 5DF8047B 		ldr	r7, [sp], #4
 2857              	.LCFI105:
 2858              		.cfi_restore 7
 2859              		.cfi_def_cfa_offset 0
 2860 0040 7047     		bx	lr
 2861              	.L180:
 2862 0042 00BF     		.align	2
 2863              	.L179:
 2864 0044 00000000 		.word	pxCurrentTCB
 2865              		.cfi_endproc
 2866              	.LFE25:
 2868              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2869              		.align	2
 2870              		.global	uxTaskGetSystemState
 2871              		.thumb
 2872              		.thumb_func
 2874              	uxTaskGetSystemState:
 2875              	.LFB26:
ARM GAS  /tmp/cc623FKg.s 			page 94


2203:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2204:../../../FreeRTOS_9_0/Source/tasks.c **** 
2205:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2206:../../../FreeRTOS_9_0/Source/tasks.c **** 
2207:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2208:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2209:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2210:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t x;
2211:../../../FreeRTOS_9_0/Source/tasks.c **** 	char cNextChar;
2212:../../../FreeRTOS_9_0/Source/tasks.c **** 
2213:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2214:../../../FreeRTOS_9_0/Source/tasks.c **** 
2215:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2216:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2217:../../../FreeRTOS_9_0/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2218:../../../FreeRTOS_9_0/Source/tasks.c **** 
2219:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
2220:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2221:../../../FreeRTOS_9_0/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2222:../../../FreeRTOS_9_0/Source/tasks.c **** 
2223:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2224:../../../FreeRTOS_9_0/Source/tasks.c **** 				mismatch. */
2225:../../../FreeRTOS_9_0/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2226:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2227:../../../FreeRTOS_9_0/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2228:../../../FreeRTOS_9_0/Source/tasks.c **** 
2229:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2230:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2231:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Characters didn't match. */
2232:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
2233:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2234:../../../FreeRTOS_9_0/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2235:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2236:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2237:../../../FreeRTOS_9_0/Source/tasks.c **** 						found. */
2238:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxReturn = pxNextTCB;
2239:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
2240:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2241:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2242:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2243:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2244:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2245:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2246:../../../FreeRTOS_9_0/Source/tasks.c **** 
2247:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxReturn != NULL )
2248:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2249:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The handle has been found. */
2250:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
2251:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2252:../../../FreeRTOS_9_0/Source/tasks.c **** 
2253:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2254:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2255:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2256:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2257:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2258:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2259:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 95


2260:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pxReturn;
2261:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2262:../../../FreeRTOS_9_0/Source/tasks.c **** 
2263:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2264:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2265:../../../FreeRTOS_9_0/Source/tasks.c **** 
2266:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2267:../../../FreeRTOS_9_0/Source/tasks.c **** 
2268:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2269:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2270:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2271:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t* pxTCB;
2272:../../../FreeRTOS_9_0/Source/tasks.c **** 
2273:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2274:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2275:../../../FreeRTOS_9_0/Source/tasks.c **** 
2276:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
2277:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2278:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Search the ready lists. */
2279:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
2280:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2281:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxQueue--;
2282:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2283:../../../FreeRTOS_9_0/Source/tasks.c **** 
2284:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB != NULL )
2285:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2286:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Found the handle. */
2287:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
2288:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2289:../../../FreeRTOS_9_0/Source/tasks.c **** 
2290:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2291:../../../FreeRTOS_9_0/Source/tasks.c **** 
2292:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Search the delayed lists. */
2293:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == NULL )
2294:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2295:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2296:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2297:../../../FreeRTOS_9_0/Source/tasks.c **** 
2298:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == NULL )
2299:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2300:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2301:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2302:../../../FreeRTOS_9_0/Source/tasks.c **** 
2303:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2304:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2305:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB == NULL )
2306:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2307:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Search the suspended list. */
2308:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2309:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2310:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2311:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
2312:../../../FreeRTOS_9_0/Source/tasks.c **** 
2313:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2314:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2315:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB == NULL )
2316:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
ARM GAS  /tmp/cc623FKg.s 			page 96


2317:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Search the deleted list. */
2318:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2319:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2320:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2321:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
2322:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2323:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xTaskResumeAll();
2324:../../../FreeRTOS_9_0/Source/tasks.c **** 
2325:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2326:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2327:../../../FreeRTOS_9_0/Source/tasks.c **** 
2328:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2329:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2330:../../../FreeRTOS_9_0/Source/tasks.c **** 
2331:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2332:../../../FreeRTOS_9_0/Source/tasks.c **** 
2333:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2334:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 2876              		.loc 1 2334 0
 2877              		.cfi_startproc
 2878              		@ args = 0, pretend = 0, frame = 24
 2879              		@ frame_needed = 1, uses_anonymous_args = 0
 2880 0000 80B5     		push	{r7, lr}
 2881              	.LCFI106:
 2882              		.cfi_def_cfa_offset 8
 2883              		.cfi_offset 7, -8
 2884              		.cfi_offset 14, -4
 2885 0002 86B0     		sub	sp, sp, #24
 2886              	.LCFI107:
 2887              		.cfi_def_cfa_offset 32
 2888 0004 00AF     		add	r7, sp, #0
 2889              	.LCFI108:
 2890              		.cfi_def_cfa_register 7
 2891 0006 F860     		str	r0, [r7, #12]
 2892 0008 B960     		str	r1, [r7, #8]
 2893 000a 7A60     		str	r2, [r7, #4]
2335:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2894              		.loc 1 2335 0
 2895 000c 0023     		movs	r3, #0
 2896 000e 7B61     		str	r3, [r7, #20]
 2897 0010 0723     		movs	r3, #7
 2898 0012 3B61     		str	r3, [r7, #16]
2336:../../../FreeRTOS_9_0/Source/tasks.c **** 
2337:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
 2899              		.loc 1 2337 0
 2900 0014 FFF7FEFF 		bl	vTaskSuspendAll
2338:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2339:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2340:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2901              		.loc 1 2340 0
 2902 0018 3C4B     		ldr	r3, .L186
 2903 001a 1B68     		ldr	r3, [r3]
 2904 001c BA68     		ldr	r2, [r7, #8]
 2905 001e 9A42     		cmp	r2, r3
 2906 0020 6DD3     		bcc	.L182
 2907              	.L183:
2341:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
ARM GAS  /tmp/cc623FKg.s 			page 97


2342:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2343:../../../FreeRTOS_9_0/Source/tasks.c **** 				task in the Ready state. */
2344:../../../FreeRTOS_9_0/Source/tasks.c **** 				do
2345:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2346:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxQueue--;
 2908              		.loc 1 2346 0 discriminator 1
 2909 0022 3B69     		ldr	r3, [r7, #16]
 2910 0024 013B     		subs	r3, r3, #1
 2911 0026 3B61     		str	r3, [r7, #16]
2347:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 2912              		.loc 1 2347 0 discriminator 1
 2913 0028 7A69     		ldr	r2, [r7, #20]
 2914 002a 1346     		mov	r3, r2
 2915 002c DB00     		lsls	r3, r3, #3
 2916 002e 1344     		add	r3, r3, r2
 2917 0030 9B00     		lsls	r3, r3, #2
 2918 0032 1A46     		mov	r2, r3
 2919 0034 FB68     		ldr	r3, [r7, #12]
 2920 0036 9918     		adds	r1, r3, r2
 2921 0038 3A69     		ldr	r2, [r7, #16]
 2922 003a 1346     		mov	r3, r2
 2923 003c 9B00     		lsls	r3, r3, #2
 2924 003e 1344     		add	r3, r3, r2
 2925 0040 9B00     		lsls	r3, r3, #2
 2926 0042 334A     		ldr	r2, .L186+4
 2927 0044 1344     		add	r3, r3, r2
 2928 0046 0846     		mov	r0, r1
 2929 0048 1946     		mov	r1, r3
 2930 004a 0122     		movs	r2, #1
 2931 004c FFF7FEFF 		bl	prvListTasksWithinSingleList
 2932 0050 0246     		mov	r2, r0
 2933 0052 7B69     		ldr	r3, [r7, #20]
 2934 0054 1344     		add	r3, r3, r2
 2935 0056 7B61     		str	r3, [r7, #20]
2348:../../../FreeRTOS_9_0/Source/tasks.c **** 
2349:../../../FreeRTOS_9_0/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 2936              		.loc 1 2349 0 discriminator 1
 2937 0058 3B69     		ldr	r3, [r7, #16]
 2938 005a 002B     		cmp	r3, #0
 2939 005c E1D1     		bne	.L183
2350:../../../FreeRTOS_9_0/Source/tasks.c **** 
2351:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2352:../../../FreeRTOS_9_0/Source/tasks.c **** 				task in the Blocked state. */
2353:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 2940              		.loc 1 2353 0
 2941 005e 7A69     		ldr	r2, [r7, #20]
 2942 0060 1346     		mov	r3, r2
 2943 0062 DB00     		lsls	r3, r3, #3
 2944 0064 1344     		add	r3, r3, r2
 2945 0066 9B00     		lsls	r3, r3, #2
 2946 0068 1A46     		mov	r2, r3
 2947 006a FB68     		ldr	r3, [r7, #12]
 2948 006c 1A44     		add	r2, r2, r3
 2949 006e 294B     		ldr	r3, .L186+8
 2950 0070 1B68     		ldr	r3, [r3]
 2951 0072 1046     		mov	r0, r2
 2952 0074 1946     		mov	r1, r3
ARM GAS  /tmp/cc623FKg.s 			page 98


 2953 0076 0222     		movs	r2, #2
 2954 0078 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2955 007c 0246     		mov	r2, r0
 2956 007e 7B69     		ldr	r3, [r7, #20]
 2957 0080 1344     		add	r3, r3, r2
 2958 0082 7B61     		str	r3, [r7, #20]
2354:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 2959              		.loc 1 2354 0
 2960 0084 7A69     		ldr	r2, [r7, #20]
 2961 0086 1346     		mov	r3, r2
 2962 0088 DB00     		lsls	r3, r3, #3
 2963 008a 1344     		add	r3, r3, r2
 2964 008c 9B00     		lsls	r3, r3, #2
 2965 008e 1A46     		mov	r2, r3
 2966 0090 FB68     		ldr	r3, [r7, #12]
 2967 0092 1A44     		add	r2, r2, r3
 2968 0094 204B     		ldr	r3, .L186+12
 2969 0096 1B68     		ldr	r3, [r3]
 2970 0098 1046     		mov	r0, r2
 2971 009a 1946     		mov	r1, r3
 2972 009c 0222     		movs	r2, #2
 2973 009e FFF7FEFF 		bl	prvListTasksWithinSingleList
 2974 00a2 0246     		mov	r2, r0
 2975 00a4 7B69     		ldr	r3, [r7, #20]
 2976 00a6 1344     		add	r3, r3, r2
 2977 00a8 7B61     		str	r3, [r7, #20]
2355:../../../FreeRTOS_9_0/Source/tasks.c **** 
2356:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2357:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2358:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2359:../../../FreeRTOS_9_0/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2360:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 2978              		.loc 1 2360 0
 2979 00aa 7A69     		ldr	r2, [r7, #20]
 2980 00ac 1346     		mov	r3, r2
 2981 00ae DB00     		lsls	r3, r3, #3
 2982 00b0 1344     		add	r3, r3, r2
 2983 00b2 9B00     		lsls	r3, r3, #2
 2984 00b4 1A46     		mov	r2, r3
 2985 00b6 FB68     		ldr	r3, [r7, #12]
 2986 00b8 1344     		add	r3, r3, r2
 2987 00ba 1846     		mov	r0, r3
 2988 00bc 1749     		ldr	r1, .L186+16
 2989 00be 0422     		movs	r2, #4
 2990 00c0 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2991 00c4 0246     		mov	r2, r0
 2992 00c6 7B69     		ldr	r3, [r7, #20]
 2993 00c8 1344     		add	r3, r3, r2
 2994 00ca 7B61     		str	r3, [r7, #20]
2361:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2362:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2363:../../../FreeRTOS_9_0/Source/tasks.c **** 
2364:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2365:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2366:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2367:../../../FreeRTOS_9_0/Source/tasks.c **** 					each task in the Suspended state. */
2368:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
ARM GAS  /tmp/cc623FKg.s 			page 99


 2995              		.loc 1 2368 0
 2996 00cc 7A69     		ldr	r2, [r7, #20]
 2997 00ce 1346     		mov	r3, r2
 2998 00d0 DB00     		lsls	r3, r3, #3
 2999 00d2 1344     		add	r3, r3, r2
 3000 00d4 9B00     		lsls	r3, r3, #2
 3001 00d6 1A46     		mov	r2, r3
 3002 00d8 FB68     		ldr	r3, [r7, #12]
 3003 00da 1344     		add	r3, r3, r2
 3004 00dc 1846     		mov	r0, r3
 3005 00de 1049     		ldr	r1, .L186+20
 3006 00e0 0322     		movs	r2, #3
 3007 00e2 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3008 00e6 0246     		mov	r2, r0
 3009 00e8 7B69     		ldr	r3, [r7, #20]
 3010 00ea 1344     		add	r3, r3, r2
 3011 00ec 7B61     		str	r3, [r7, #20]
2369:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2370:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2371:../../../FreeRTOS_9_0/Source/tasks.c **** 
2372:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2373:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2374:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3012              		.loc 1 2374 0
 3013 00ee 7B68     		ldr	r3, [r7, #4]
 3014 00f0 002B     		cmp	r3, #0
 3015 00f2 04D0     		beq	.L182
2375:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2376:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2377:../../../FreeRTOS_9_0/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2378:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
2379:../../../FreeRTOS_9_0/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 3016              		.loc 1 2379 0
 3017 00f4 FFF7FEFF 		bl	xGetRunTimeCounterValue
 3018 00f8 0246     		mov	r2, r0
 3019 00fa 7B68     		ldr	r3, [r7, #4]
 3020 00fc 1A60     		str	r2, [r3]
 3021              	.L182:
2380:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
2381:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2382:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2383:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
2384:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2385:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2386:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2387:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pulTotalRunTime = 0;
2388:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2389:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2390:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2391:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2392:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2393:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2394:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2395:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2396:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2397:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3022              		.loc 1 2397 0
ARM GAS  /tmp/cc623FKg.s 			page 100


 3023 00fe FFF7FEFF 		bl	xTaskResumeAll
2398:../../../FreeRTOS_9_0/Source/tasks.c **** 
2399:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxTask;
 3024              		.loc 1 2399 0
 3025 0102 7B69     		ldr	r3, [r7, #20]
2400:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 3026              		.loc 1 2400 0
 3027 0104 1846     		mov	r0, r3
 3028 0106 1837     		adds	r7, r7, #24
 3029              	.LCFI109:
 3030              		.cfi_def_cfa_offset 8
 3031 0108 BD46     		mov	sp, r7
 3032              	.LCFI110:
 3033              		.cfi_def_cfa_register 13
 3034              		@ sp needed
 3035 010a 80BD     		pop	{r7, pc}
 3036              	.L187:
 3037              		.align	2
 3038              	.L186:
 3039 010c 00000000 		.word	uxCurrentNumberOfTasks
 3040 0110 00000000 		.word	pxReadyTasksLists
 3041 0114 00000000 		.word	pxDelayedTaskList
 3042 0118 00000000 		.word	pxOverflowDelayedTaskList
 3043 011c 00000000 		.word	xTasksWaitingTermination
 3044 0120 00000000 		.word	xSuspendedTaskList
 3045              		.cfi_endproc
 3046              	.LFE26:
 3048              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3049              		.align	2
 3050              		.global	xTaskIncrementTick
 3051              		.thumb
 3052              		.thumb_func
 3054              	xTaskIncrementTick:
 3055              	.LFB27:
2401:../../../FreeRTOS_9_0/Source/tasks.c **** 
2402:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2403:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2404:../../../FreeRTOS_9_0/Source/tasks.c **** 
2405:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2406:../../../FreeRTOS_9_0/Source/tasks.c **** 
2407:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2408:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2409:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2410:../../../FreeRTOS_9_0/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2411:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2412:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xIdleTaskHandle;
2413:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2414:../../../FreeRTOS_9_0/Source/tasks.c **** 
2415:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2416:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2417:../../../FreeRTOS_9_0/Source/tasks.c **** 
2418:../../../FreeRTOS_9_0/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2419:../../../FreeRTOS_9_0/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2420:../../../FreeRTOS_9_0/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2421:../../../FreeRTOS_9_0/Source/tasks.c **** 1. */
2422:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2423:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 101


2424:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2425:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2426:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2427:../../../FreeRTOS_9_0/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2428:../../../FreeRTOS_9_0/Source/tasks.c **** 		each stepped tick. */
2429:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2430:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount += xTicksToJump;
2431:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2432:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2433:../../../FreeRTOS_9_0/Source/tasks.c **** 
2434:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2435:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2436:../../../FreeRTOS_9_0/Source/tasks.c **** 
2437:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2438:../../../FreeRTOS_9_0/Source/tasks.c **** 
2439:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2440:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2441:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2442:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2443:../../../FreeRTOS_9_0/Source/tasks.c **** 
2444:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTCB );
2445:../../../FreeRTOS_9_0/Source/tasks.c **** 
2446:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
2447:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2448:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2449:../../../FreeRTOS_9_0/Source/tasks.c **** 			it is actually in the Blocked state. */
2450:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2451:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2452:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2453:../../../FreeRTOS_9_0/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2454:../../../FreeRTOS_9_0/Source/tasks.c **** 				scheduler is suspended. */
2455:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2456:../../../FreeRTOS_9_0/Source/tasks.c **** 
2457:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2458:../../../FreeRTOS_9_0/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2459:../../../FreeRTOS_9_0/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2460:../../../FreeRTOS_9_0/Source/tasks.c **** 				is used. */
2461:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskENTER_CRITICAL();
2462:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2463:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2464:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2465:../../../FreeRTOS_9_0/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2466:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2467:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2468:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2469:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2470:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2471:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2472:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2473:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskEXIT_CRITICAL();
2474:../../../FreeRTOS_9_0/Source/tasks.c **** 
2475:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2476:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2477:../../../FreeRTOS_9_0/Source/tasks.c **** 
2478:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2479:../../../FreeRTOS_9_0/Source/tasks.c **** 				switch if preemption is turned off. */
2480:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
ARM GAS  /tmp/cc623FKg.s 			page 102


2481:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2482:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2483:../../../FreeRTOS_9_0/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2484:../../../FreeRTOS_9_0/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2485:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2486:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2487:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2488:../../../FreeRTOS_9_0/Source/tasks.c **** 						is unsuspended. */
2489:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
2490:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2491:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2492:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2493:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2494:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2495:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2496:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2497:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2498:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2499:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2500:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2501:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2502:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2503:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTaskResumeAll();
2504:../../../FreeRTOS_9_0/Source/tasks.c **** 
2505:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2506:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2507:../../../FreeRTOS_9_0/Source/tasks.c **** 
2508:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2509:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2510:../../../FreeRTOS_9_0/Source/tasks.c **** 
2511:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2512:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3056              		.loc 1 2512 0
 3057              		.cfi_startproc
 3058              		@ args = 0, pretend = 0, frame = 24
 3059              		@ frame_needed = 1, uses_anonymous_args = 0
 3060 0000 80B5     		push	{r7, lr}
 3061              	.LCFI111:
 3062              		.cfi_def_cfa_offset 8
 3063              		.cfi_offset 7, -8
 3064              		.cfi_offset 14, -4
 3065 0002 86B0     		sub	sp, sp, #24
 3066              	.LCFI112:
 3067              		.cfi_def_cfa_offset 32
 3068 0004 00AF     		add	r7, sp, #0
 3069              	.LCFI113:
 3070              		.cfi_def_cfa_register 7
2513:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t * pxTCB;
2514:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xItemValue;
2515:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3071              		.loc 1 2515 0
 3072 0006 0023     		movs	r3, #0
 3073 0008 7B61     		str	r3, [r7, #20]
2516:../../../FreeRTOS_9_0/Source/tasks.c **** 
2517:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2518:../../../FreeRTOS_9_0/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2519:../../../FreeRTOS_9_0/Source/tasks.c **** 	tasks to be unblocked. */
ARM GAS  /tmp/cc623FKg.s 			page 103


2520:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2521:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3074              		.loc 1 2521 0
 3075 000a 574B     		ldr	r3, .L206
 3076 000c 1B68     		ldr	r3, [r3]
 3077 000e 002B     		cmp	r3, #0
 3078 0010 40F09880 		bne	.L189
 3079              	.LBB131:
2522:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2523:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2524:../../../FreeRTOS_9_0/Source/tasks.c **** 		block. */
2525:../../../FreeRTOS_9_0/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 3080              		.loc 1 2525 0
 3081 0014 554B     		ldr	r3, .L206+4
 3082 0016 1B68     		ldr	r3, [r3]
 3083 0018 0133     		adds	r3, r3, #1
 3084 001a 3B61     		str	r3, [r7, #16]
2526:../../../FreeRTOS_9_0/Source/tasks.c **** 
2527:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2528:../../../FreeRTOS_9_0/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2529:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3085              		.loc 1 2529 0
 3086 001c 534A     		ldr	r2, .L206+4
 3087 001e 3B69     		ldr	r3, [r7, #16]
 3088 0020 1360     		str	r3, [r2]
2530:../../../FreeRTOS_9_0/Source/tasks.c **** 
2531:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 3089              		.loc 1 2531 0
 3090 0022 3B69     		ldr	r3, [r7, #16]
 3091 0024 002B     		cmp	r3, #0
 3092 0026 1FD1     		bne	.L190
 3093              	.LBB132:
2532:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2533:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3094              		.loc 1 2533 0
 3095 0028 514B     		ldr	r3, .L206+8
 3096 002a 1B68     		ldr	r3, [r3]
 3097 002c 1B68     		ldr	r3, [r3]
 3098 002e 002B     		cmp	r3, #0
 3099 0030 09D0     		beq	.L191
 3100              	.LBB133:
 3101              	.LBB134:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3102              		.loc 2 237 0 discriminator 1
 3103              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3104 0032 4FF05003 			mov r3, #80												
 3105 0036 83F31188 		msr basepri, r3											
 3106 003a BFF36F8F 		isb														
 3107 003e BFF34F8F 		dsb														
 3108              	
 3109              	@ 0 "" 2
 3110              		.thumb
 3111 0042 3B60     		str	r3, [r7]
 3112              	.L192:
 3113              	.LBE134:
 3114              	.LBE133:
 3115              		.loc 1 2533 0 discriminator 1
ARM GAS  /tmp/cc623FKg.s 			page 104


 3116 0044 FEE7     		b	.L192
 3117              	.L191:
 3118              		.loc 1 2533 0 is_stmt 0 discriminator 2
 3119 0046 4A4B     		ldr	r3, .L206+8
 3120 0048 1B68     		ldr	r3, [r3]
 3121 004a FB60     		str	r3, [r7, #12]
 3122 004c 494B     		ldr	r3, .L206+12
 3123 004e 1B68     		ldr	r3, [r3]
 3124 0050 474A     		ldr	r2, .L206+8
 3125 0052 1360     		str	r3, [r2]
 3126 0054 474A     		ldr	r2, .L206+12
 3127 0056 FB68     		ldr	r3, [r7, #12]
 3128 0058 1360     		str	r3, [r2]
 3129 005a 474B     		ldr	r3, .L206+16
 3130 005c 1B68     		ldr	r3, [r3]
 3131 005e 0133     		adds	r3, r3, #1
 3132 0060 454A     		ldr	r2, .L206+16
 3133 0062 1360     		str	r3, [r2]
 3134 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3135              	.L190:
 3136              	.LBE132:
2534:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2535:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2536:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2537:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2538:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2539:../../../FreeRTOS_9_0/Source/tasks.c **** 
2540:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2541:../../../FreeRTOS_9_0/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2542:../../../FreeRTOS_9_0/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2543:../../../FreeRTOS_9_0/Source/tasks.c **** 		look any further down the list. */
2544:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3137              		.loc 1 2544 0 is_stmt 1
 3138 0068 444B     		ldr	r3, .L206+20
 3139 006a 1B68     		ldr	r3, [r3]
 3140 006c 3A69     		ldr	r2, [r7, #16]
 3141 006e 9A42     		cmp	r2, r3
 3142 0070 53D3     		bcc	.L193
 3143              	.L200:
2545:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2546:../../../FreeRTOS_9_0/Source/tasks.c **** 			for( ;; )
2547:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2548:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3144              		.loc 1 2548 0
 3145 0072 3F4B     		ldr	r3, .L206+8
 3146 0074 1B68     		ldr	r3, [r3]
 3147 0076 1B68     		ldr	r3, [r3]
 3148 0078 002B     		cmp	r3, #0
 3149 007a 01D1     		bne	.L194
 3150              		.loc 1 2548 0 is_stmt 0 discriminator 1
 3151 007c 0123     		movs	r3, #1
 3152 007e 00E0     		b	.L195
 3153              	.L194:
 3154              		.loc 1 2548 0 discriminator 2
 3155 0080 0023     		movs	r3, #0
 3156              	.L195:
 3157              		.loc 1 2548 0 discriminator 4
ARM GAS  /tmp/cc623FKg.s 			page 105


 3158 0082 002B     		cmp	r3, #0
 3159 0084 04D0     		beq	.L196
2549:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2550:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2551:../../../FreeRTOS_9_0/Source/tasks.c **** 					to the maximum possible value so it is extremely
2552:../../../FreeRTOS_9_0/Source/tasks.c **** 					unlikely that the
2553:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2554:../../../FreeRTOS_9_0/Source/tasks.c **** 					next time through. */
2555:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3160              		.loc 1 2555 0 is_stmt 1
 3161 0086 3D4B     		ldr	r3, .L206+20
 3162 0088 4FF0FF32 		mov	r2, #-1
 3163 008c 1A60     		str	r2, [r3]
2556:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 3164              		.loc 1 2556 0
 3165 008e 44E0     		b	.L193
 3166              	.L196:
2557:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2558:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2559:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2560:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2561:../../../FreeRTOS_9_0/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2562:../../../FreeRTOS_9_0/Source/tasks.c **** 					at which the task at the head of the delayed list must
2563:../../../FreeRTOS_9_0/Source/tasks.c **** 					be removed from the Blocked state. */
2564:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 3167              		.loc 1 2564 0
 3168 0090 374B     		ldr	r3, .L206+8
 3169 0092 1B68     		ldr	r3, [r3]
 3170 0094 DB68     		ldr	r3, [r3, #12]
 3171 0096 DB68     		ldr	r3, [r3, #12]
 3172 0098 BB60     		str	r3, [r7, #8]
2565:../../../FreeRTOS_9_0/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3173              		.loc 1 2565 0
 3174 009a BB68     		ldr	r3, [r7, #8]
 3175 009c 5B68     		ldr	r3, [r3, #4]
 3176 009e 7B60     		str	r3, [r7, #4]
2566:../../../FreeRTOS_9_0/Source/tasks.c **** 
2567:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3177              		.loc 1 2567 0
 3178 00a0 3A69     		ldr	r2, [r7, #16]
 3179 00a2 7B68     		ldr	r3, [r7, #4]
 3180 00a4 9A42     		cmp	r2, r3
 3181 00a6 03D2     		bcs	.L197
2568:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2569:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2570:../../../FreeRTOS_9_0/Source/tasks.c **** 						item value is the time at which the task at the head
2571:../../../FreeRTOS_9_0/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2572:../../../FreeRTOS_9_0/Source/tasks.c **** 						state -	so record the item value in
2573:../../../FreeRTOS_9_0/Source/tasks.c **** 						xNextTaskUnblockTime. */
2574:../../../FreeRTOS_9_0/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3182              		.loc 1 2574 0
 3183 00a8 344A     		ldr	r2, .L206+20
 3184 00aa 7B68     		ldr	r3, [r7, #4]
 3185 00ac 1360     		str	r3, [r2]
2575:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
 3186              		.loc 1 2575 0
 3187 00ae 34E0     		b	.L193
ARM GAS  /tmp/cc623FKg.s 			page 106


 3188              	.L197:
2576:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2577:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2578:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2579:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2580:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2581:../../../FreeRTOS_9_0/Source/tasks.c **** 
2582:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2583:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3189              		.loc 1 2583 0
 3190 00b0 BB68     		ldr	r3, [r7, #8]
 3191 00b2 0433     		adds	r3, r3, #4
 3192 00b4 1846     		mov	r0, r3
 3193 00b6 FFF7FEFF 		bl	uxListRemove
2584:../../../FreeRTOS_9_0/Source/tasks.c **** 
2585:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2586:../../../FreeRTOS_9_0/Source/tasks.c **** 					it from the event list. */
2587:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3194              		.loc 1 2587 0
 3195 00ba BB68     		ldr	r3, [r7, #8]
 3196 00bc 9B6A     		ldr	r3, [r3, #40]
 3197 00be 002B     		cmp	r3, #0
 3198 00c0 04D0     		beq	.L198
2588:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2589:../../../FreeRTOS_9_0/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3199              		.loc 1 2589 0
 3200 00c2 BB68     		ldr	r3, [r7, #8]
 3201 00c4 1833     		adds	r3, r3, #24
 3202 00c6 1846     		mov	r0, r3
 3203 00c8 FFF7FEFF 		bl	uxListRemove
 3204              	.L198:
2590:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2591:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2592:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2593:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2594:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2595:../../../FreeRTOS_9_0/Source/tasks.c **** 
2596:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2597:../../../FreeRTOS_9_0/Source/tasks.c **** 					list. */
2598:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3205              		.loc 1 2598 0
 3206 00cc BB68     		ldr	r3, [r7, #8]
 3207 00ce 1846     		mov	r0, r3
 3208 00d0 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 3209 00d4 BB68     		ldr	r3, [r7, #8]
 3210 00d6 DB6A     		ldr	r3, [r3, #44]
 3211 00d8 1A46     		mov	r2, r3
 3212 00da 0123     		movs	r3, #1
 3213 00dc 03FA02F2 		lsl	r2, r3, r2
 3214 00e0 274B     		ldr	r3, .L206+24
 3215 00e2 1B68     		ldr	r3, [r3]
 3216 00e4 1343     		orrs	r3, r3, r2
 3217 00e6 264A     		ldr	r2, .L206+24
 3218 00e8 1360     		str	r3, [r2]
 3219 00ea BB68     		ldr	r3, [r7, #8]
 3220 00ec DA6A     		ldr	r2, [r3, #44]
 3221 00ee 1346     		mov	r3, r2
ARM GAS  /tmp/cc623FKg.s 			page 107


 3222 00f0 9B00     		lsls	r3, r3, #2
 3223 00f2 1344     		add	r3, r3, r2
 3224 00f4 9B00     		lsls	r3, r3, #2
 3225 00f6 234A     		ldr	r2, .L206+28
 3226 00f8 1A44     		add	r2, r2, r3
 3227 00fa BB68     		ldr	r3, [r7, #8]
 3228 00fc 0433     		adds	r3, r3, #4
 3229 00fe 1046     		mov	r0, r2
 3230 0100 1946     		mov	r1, r3
 3231 0102 FFF7FEFF 		bl	vListInsertEnd
2599:../../../FreeRTOS_9_0/Source/tasks.c **** 
2600:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2601:../../../FreeRTOS_9_0/Source/tasks.c **** 					context switch if preemption is turned off. */
2602:../../../FreeRTOS_9_0/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2603:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2604:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2605:../../../FreeRTOS_9_0/Source/tasks.c **** 						only be performed if the unblocked task has a
2606:../../../FreeRTOS_9_0/Source/tasks.c **** 						priority that is equal to or higher than the
2607:../../../FreeRTOS_9_0/Source/tasks.c **** 						currently executing task. */
2608:../../../FreeRTOS_9_0/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3232              		.loc 1 2608 0
 3233 0106 BB68     		ldr	r3, [r7, #8]
 3234 0108 DA6A     		ldr	r2, [r3, #44]
 3235 010a 1F4B     		ldr	r3, .L206+32
 3236 010c 1B68     		ldr	r3, [r3]
 3237 010e DB6A     		ldr	r3, [r3, #44]
 3238 0110 9A42     		cmp	r2, r3
 3239 0112 01D3     		bcc	.L199
2609:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
2610:../../../FreeRTOS_9_0/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3240              		.loc 1 2610 0
 3241 0114 0123     		movs	r3, #1
 3242 0116 7B61     		str	r3, [r7, #20]
 3243              	.L199:
2611:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
2612:../../../FreeRTOS_9_0/Source/tasks.c **** 						else
2613:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
2614:../../../FreeRTOS_9_0/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2615:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
2616:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2617:../../../FreeRTOS_9_0/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2618:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2619:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 3244              		.loc 1 2619 0
 3245 0118 ABE7     		b	.L200
 3246              	.L193:
2620:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2621:../../../FreeRTOS_9_0/Source/tasks.c **** 
2622:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2623:../../../FreeRTOS_9_0/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2624:../../../FreeRTOS_9_0/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2625:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2626:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2627:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3247              		.loc 1 2627 0
 3248 011a 1B4B     		ldr	r3, .L206+32
 3249 011c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc623FKg.s 			page 108


 3250 011e DA6A     		ldr	r2, [r3, #44]
 3251 0120 1849     		ldr	r1, .L206+28
 3252 0122 1346     		mov	r3, r2
 3253 0124 9B00     		lsls	r3, r3, #2
 3254 0126 1344     		add	r3, r3, r2
 3255 0128 9B00     		lsls	r3, r3, #2
 3256 012a 0B44     		add	r3, r3, r1
 3257 012c 1B68     		ldr	r3, [r3]
 3258 012e 012B     		cmp	r3, #1
 3259 0130 01D9     		bls	.L201
2628:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2629:../../../FreeRTOS_9_0/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3260              		.loc 1 2629 0
 3261 0132 0123     		movs	r3, #1
 3262 0134 7B61     		str	r3, [r7, #20]
 3263              	.L201:
2630:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2631:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2632:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2633:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2634:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2635:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2636:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2637:../../../FreeRTOS_9_0/Source/tasks.c **** 
2638:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2639:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2640:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2641:../../../FreeRTOS_9_0/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2642:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
 3264              		.loc 1 2642 0
 3265 0136 154B     		ldr	r3, .L206+36
 3266 0138 1B68     		ldr	r3, [r3]
 3267 013a 002B     		cmp	r3, #0
 3268 013c 01D1     		bne	.L202
2643:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2644:../../../FreeRTOS_9_0/Source/tasks.c **** 				vApplicationTickHook();
 3269              		.loc 1 2644 0
 3270 013e FFF7FEFF 		bl	vApplicationTickHook
 3271              	.L202:
 3272              	.LBE131:
 3273 0142 06E0     		b	.L203
 3274              	.L189:
2645:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2646:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2647:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2648:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2649:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2650:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2651:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2652:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2653:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2654:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2655:../../../FreeRTOS_9_0/Source/tasks.c **** 		++uxPendedTicks;
 3275              		.loc 1 2655 0
 3276 0144 114B     		ldr	r3, .L206+36
 3277 0146 1B68     		ldr	r3, [r3]
 3278 0148 0133     		adds	r3, r3, #1
ARM GAS  /tmp/cc623FKg.s 			page 109


 3279 014a 104A     		ldr	r2, .L206+36
 3280 014c 1360     		str	r3, [r2]
2656:../../../FreeRTOS_9_0/Source/tasks.c **** 
2657:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2658:../../../FreeRTOS_9_0/Source/tasks.c **** 		scheduler is locked. */
2659:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2660:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2661:../../../FreeRTOS_9_0/Source/tasks.c **** 			vApplicationTickHook();
 3281              		.loc 1 2661 0
 3282 014e FFF7FEFF 		bl	vApplicationTickHook
 3283              	.L203:
2662:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2663:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
2664:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2665:../../../FreeRTOS_9_0/Source/tasks.c **** 
2666:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2667:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2668:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 3284              		.loc 1 2668 0
 3285 0152 0F4B     		ldr	r3, .L206+40
 3286 0154 1B68     		ldr	r3, [r3]
 3287 0156 002B     		cmp	r3, #0
 3288 0158 01D0     		beq	.L204
2669:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2670:../../../FreeRTOS_9_0/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 3289              		.loc 1 2670 0
 3290 015a 0123     		movs	r3, #1
 3291 015c 7B61     		str	r3, [r7, #20]
 3292              	.L204:
2671:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2672:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2673:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2674:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2675:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2676:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2677:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2678:../../../FreeRTOS_9_0/Source/tasks.c **** 
2679:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xSwitchRequired;
 3293              		.loc 1 2679 0
 3294 015e 7B69     		ldr	r3, [r7, #20]
2680:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3295              		.loc 1 2680 0
 3296 0160 1846     		mov	r0, r3
 3297 0162 1837     		adds	r7, r7, #24
 3298              	.LCFI114:
 3299              		.cfi_def_cfa_offset 8
 3300 0164 BD46     		mov	sp, r7
 3301              	.LCFI115:
 3302              		.cfi_def_cfa_register 13
 3303              		@ sp needed
 3304 0166 80BD     		pop	{r7, pc}
 3305              	.L207:
 3306              		.align	2
 3307              	.L206:
 3308 0168 00000000 		.word	uxSchedulerSuspended
 3309 016c 00000000 		.word	xTickCount
 3310 0170 00000000 		.word	pxDelayedTaskList
ARM GAS  /tmp/cc623FKg.s 			page 110


 3311 0174 00000000 		.word	pxOverflowDelayedTaskList
 3312 0178 00000000 		.word	xNumOfOverflows
 3313 017c 00000000 		.word	xNextTaskUnblockTime
 3314 0180 00000000 		.word	uxTopReadyPriority
 3315 0184 00000000 		.word	pxReadyTasksLists
 3316 0188 00000000 		.word	pxCurrentTCB
 3317 018c 00000000 		.word	uxPendedTicks
 3318 0190 00000000 		.word	xYieldPending
 3319              		.cfi_endproc
 3320              	.LFE27:
 3322              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3323              		.align	2
 3324              		.global	vTaskSwitchContext
 3325              		.thumb
 3326              		.thumb_func
 3328              	vTaskSwitchContext:
 3329              	.LFB28:
2681:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2682:../../../FreeRTOS_9_0/Source/tasks.c **** 
2683:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2684:../../../FreeRTOS_9_0/Source/tasks.c **** 
2685:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2686:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2687:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2688:../../../FreeRTOS_9_0/Source/tasks.c **** 
2689:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2690:../../../FreeRTOS_9_0/Source/tasks.c **** 		getting set. */
2691:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2692:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2693:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2694:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2695:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2696:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2697:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2698:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2699:../../../FreeRTOS_9_0/Source/tasks.c **** 
2700:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2701:../../../FreeRTOS_9_0/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2702:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
2703:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2704:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
2705:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2706:../../../FreeRTOS_9_0/Source/tasks.c **** 
2707:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2708:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2709:../../../FreeRTOS_9_0/Source/tasks.c **** 
2710:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2711:../../../FreeRTOS_9_0/Source/tasks.c **** 
2712:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2713:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2714:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2715:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2716:../../../FreeRTOS_9_0/Source/tasks.c **** 
2717:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2718:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2719:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2720:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
ARM GAS  /tmp/cc623FKg.s 			page 111


2721:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2722:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2723:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2724:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2725:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2726:../../../FreeRTOS_9_0/Source/tasks.c **** 
2727:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2728:../../../FreeRTOS_9_0/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2729:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
2730:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2731:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2732:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2733:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
2734:../../../FreeRTOS_9_0/Source/tasks.c **** 
2735:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2736:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2737:../../../FreeRTOS_9_0/Source/tasks.c **** 
2738:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2739:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2740:../../../FreeRTOS_9_0/Source/tasks.c **** 
2741:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2742:../../../FreeRTOS_9_0/Source/tasks.c **** 
2743:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2744:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2745:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2746:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
2747:../../../FreeRTOS_9_0/Source/tasks.c **** 
2748:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2749:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2750:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2751:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2752:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2753:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2754:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2755:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2756:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2757:../../../FreeRTOS_9_0/Source/tasks.c **** 
2758:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2759:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2760:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2761:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2762:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2763:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2764:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFAIL;
2765:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2766:../../../FreeRTOS_9_0/Source/tasks.c **** 
2767:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2768:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2769:../../../FreeRTOS_9_0/Source/tasks.c **** 
2770:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2771:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2772:../../../FreeRTOS_9_0/Source/tasks.c **** 
2773:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSwitchContext( void )
2774:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3330              		.loc 1 2774 0
 3331              		.cfi_startproc
 3332              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/cc623FKg.s 			page 112


 3333              		@ frame_needed = 1, uses_anonymous_args = 0
 3334 0000 80B5     		push	{r7, lr}
 3335              	.LCFI116:
 3336              		.cfi_def_cfa_offset 8
 3337              		.cfi_offset 7, -8
 3338              		.cfi_offset 14, -4
 3339 0002 88B0     		sub	sp, sp, #32
 3340              	.LCFI117:
 3341              		.cfi_def_cfa_offset 40
 3342 0004 00AF     		add	r7, sp, #0
 3343              	.LCFI118:
 3344              		.cfi_def_cfa_register 7
2775:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3345              		.loc 1 2775 0
 3346 0006 4E4B     		ldr	r3, .L219
 3347 0008 1B68     		ldr	r3, [r3]
 3348 000a 002B     		cmp	r3, #0
 3349 000c 03D0     		beq	.L209
2776:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2777:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2778:../../../FreeRTOS_9_0/Source/tasks.c **** 		switch. */
2779:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3350              		.loc 1 2779 0
 3351 000e 4D4B     		ldr	r3, .L219+4
 3352 0010 0122     		movs	r2, #1
 3353 0012 1A60     		str	r2, [r3]
 3354 0014 91E0     		b	.L208
 3355              	.L209:
2780:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2781:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2782:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2783:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdFALSE;
 3356              		.loc 1 2783 0
 3357 0016 4B4B     		ldr	r3, .L219+4
 3358 0018 0022     		movs	r2, #0
 3359 001a 1A60     		str	r2, [r3]
2784:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2785:../../../FreeRTOS_9_0/Source/tasks.c **** 
2786:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2787:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2788:../../../FreeRTOS_9_0/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2789:../../../FreeRTOS_9_0/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2790:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
2791:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 3360              		.loc 1 2791 0
 3361 001c FFF7FEFF 		bl	xGetRunTimeCounterValue
 3362 0020 0246     		mov	r2, r0
 3363 0022 494B     		ldr	r3, .L219+8
 3364 0024 1A60     		str	r2, [r3]
2792:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2793:../../../FreeRTOS_9_0/Source/tasks.c **** 
2794:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2795:../../../FreeRTOS_9_0/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2796:../../../FreeRTOS_9_0/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2797:../../../FreeRTOS_9_0/Source/tasks.c **** 				protection here so count values are only valid until the timer
2798:../../../FreeRTOS_9_0/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2799:../../../FreeRTOS_9_0/Source/tasks.c **** 				against suspect run time stat counter implementations - which
ARM GAS  /tmp/cc623FKg.s 			page 113


2800:../../../FreeRTOS_9_0/Source/tasks.c **** 				are provided by the application, not the kernel. */
2801:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
 3365              		.loc 1 2801 0
 3366 0026 484B     		ldr	r3, .L219+8
 3367 0028 1A68     		ldr	r2, [r3]
 3368 002a 484B     		ldr	r3, .L219+12
 3369 002c 1B68     		ldr	r3, [r3]
 3370 002e 9A42     		cmp	r2, r3
 3371 0030 09D9     		bls	.L211
2802:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2803:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 3372              		.loc 1 2803 0
 3373 0032 474B     		ldr	r3, .L219+16
 3374 0034 1B68     		ldr	r3, [r3]
 3375 0036 196E     		ldr	r1, [r3, #96]
 3376 0038 434A     		ldr	r2, .L219+8
 3377 003a 1068     		ldr	r0, [r2]
 3378 003c 434A     		ldr	r2, .L219+12
 3379 003e 1268     		ldr	r2, [r2]
 3380 0040 821A     		subs	r2, r0, r2
 3381 0042 0A44     		add	r2, r2, r1
 3382 0044 1A66     		str	r2, [r3, #96]
 3383              	.L211:
2804:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2805:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2806:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2807:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2808:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2809:../../../FreeRTOS_9_0/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
 3384              		.loc 1 2809 0
 3385 0046 404B     		ldr	r3, .L219+8
 3386 0048 1B68     		ldr	r3, [r3]
 3387 004a 404A     		ldr	r2, .L219+12
 3388 004c 1360     		str	r3, [r2]
 3389              	.LBB135:
2810:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2811:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2812:../../../FreeRTOS_9_0/Source/tasks.c **** 
2813:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2814:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
 3390              		.loc 1 2814 0
 3391 004e 404B     		ldr	r3, .L219+16
 3392 0050 1B68     		ldr	r3, [r3]
 3393 0052 1B6B     		ldr	r3, [r3, #48]
 3394 0054 FB61     		str	r3, [r7, #28]
 3395 0056 4FF0A533 		mov	r3, #-1515870811
 3396 005a BB61     		str	r3, [r7, #24]
 3397 005c FB69     		ldr	r3, [r7, #28]
 3398 005e 1A68     		ldr	r2, [r3]
 3399 0060 BB69     		ldr	r3, [r7, #24]
 3400 0062 9A42     		cmp	r2, r3
 3401 0064 11D1     		bne	.L212
 3402              		.loc 1 2814 0 is_stmt 0 discriminator 2
 3403 0066 FB69     		ldr	r3, [r7, #28]
 3404 0068 0433     		adds	r3, r3, #4
 3405 006a 1A68     		ldr	r2, [r3]
 3406 006c BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cc623FKg.s 			page 114


 3407 006e 9A42     		cmp	r2, r3
 3408 0070 0BD1     		bne	.L212
 3409              		.loc 1 2814 0 discriminator 4
 3410 0072 FB69     		ldr	r3, [r7, #28]
 3411 0074 0833     		adds	r3, r3, #8
 3412 0076 1A68     		ldr	r2, [r3]
 3413 0078 BB69     		ldr	r3, [r7, #24]
 3414 007a 9A42     		cmp	r2, r3
 3415 007c 05D1     		bne	.L212
 3416              		.loc 1 2814 0 discriminator 6
 3417 007e FB69     		ldr	r3, [r7, #28]
 3418 0080 0C33     		adds	r3, r3, #12
 3419 0082 1A68     		ldr	r2, [r3]
 3420 0084 BB69     		ldr	r3, [r7, #24]
 3421 0086 9A42     		cmp	r2, r3
 3422 0088 08D0     		beq	.L213
 3423              	.L212:
 3424              		.loc 1 2814 0 discriminator 7
 3425 008a 314B     		ldr	r3, .L219+16
 3426 008c 1A68     		ldr	r2, [r3]
 3427 008e 304B     		ldr	r3, .L219+16
 3428 0090 1B68     		ldr	r3, [r3]
 3429 0092 3433     		adds	r3, r3, #52
 3430 0094 1046     		mov	r0, r2
 3431 0096 1946     		mov	r1, r3
 3432 0098 FFF7FEFF 		bl	vApplicationStackOverflowHook
 3433              	.L213:
 3434              	.LBE135:
 3435              	.LBB136:
2815:../../../FreeRTOS_9_0/Source/tasks.c **** 
2816:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2817:../../../FreeRTOS_9_0/Source/tasks.c **** 		optimised asm code. */
2818:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 3436              		.loc 1 2818 0 is_stmt 1
 3437 009c 2D4B     		ldr	r3, .L219+20
 3438 009e 1B68     		ldr	r3, [r3]
 3439 00a0 FB60     		str	r3, [r7, #12]
 3440              	.LBB137:
 3441              	.LBB138:
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3442              		.loc 2 176 0
 3443 00a2 FB68     		ldr	r3, [r7, #12]
 3444              	@ 176 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3445 00a4 B3FA83F3 		clz r3, r3
 3446              	@ 0 "" 2
 3447              		.thumb
 3448 00a8 FB72     		strb	r3, [r7, #11]
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3449              		.loc 2 177 0
 3450 00aa FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3451              	.LBE138:
 3452              	.LBE137:
 3453              		.loc 1 2818 0
 3454 00ac C3F11F03 		rsb	r3, r3, #31
 3455 00b0 7B61     		str	r3, [r7, #20]
 3456 00b2 2949     		ldr	r1, .L219+24
 3457 00b4 7A69     		ldr	r2, [r7, #20]
ARM GAS  /tmp/cc623FKg.s 			page 115


 3458 00b6 1346     		mov	r3, r2
 3459 00b8 9B00     		lsls	r3, r3, #2
 3460 00ba 1344     		add	r3, r3, r2
 3461 00bc 9B00     		lsls	r3, r3, #2
 3462 00be 0B44     		add	r3, r3, r1
 3463 00c0 1B68     		ldr	r3, [r3]
 3464 00c2 002B     		cmp	r3, #0
 3465 00c4 09D1     		bne	.L215
 3466              	.LBB139:
 3467              	.LBB140:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3468              		.loc 2 237 0 discriminator 1
 3469              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3470 00c6 4FF05003 			mov r3, #80												
 3471 00ca 83F31188 		msr basepri, r3											
 3472 00ce BFF36F8F 		isb														
 3473 00d2 BFF34F8F 		dsb														
 3474              	
 3475              	@ 0 "" 2
 3476              		.thumb
 3477 00d6 7B60     		str	r3, [r7, #4]
 3478              	.L216:
 3479              	.LBE140:
 3480              	.LBE139:
 3481              		.loc 1 2818 0 discriminator 1
 3482 00d8 FEE7     		b	.L216
 3483              	.L215:
 3484              	.LBB141:
 3485              		.loc 1 2818 0 is_stmt 0 discriminator 2
 3486 00da 7A69     		ldr	r2, [r7, #20]
 3487 00dc 1346     		mov	r3, r2
 3488 00de 9B00     		lsls	r3, r3, #2
 3489 00e0 1344     		add	r3, r3, r2
 3490 00e2 9B00     		lsls	r3, r3, #2
 3491 00e4 1C4A     		ldr	r2, .L219+24
 3492 00e6 1344     		add	r3, r3, r2
 3493 00e8 3B61     		str	r3, [r7, #16]
 3494 00ea 3B69     		ldr	r3, [r7, #16]
 3495 00ec 5B68     		ldr	r3, [r3, #4]
 3496 00ee 5A68     		ldr	r2, [r3, #4]
 3497 00f0 3B69     		ldr	r3, [r7, #16]
 3498 00f2 5A60     		str	r2, [r3, #4]
 3499 00f4 3B69     		ldr	r3, [r7, #16]
 3500 00f6 5A68     		ldr	r2, [r3, #4]
 3501 00f8 3B69     		ldr	r3, [r7, #16]
 3502 00fa 0833     		adds	r3, r3, #8
 3503 00fc 9A42     		cmp	r2, r3
 3504 00fe 04D1     		bne	.L217
 3505              		.loc 1 2818 0 discriminator 3
 3506 0100 3B69     		ldr	r3, [r7, #16]
 3507 0102 5B68     		ldr	r3, [r3, #4]
 3508 0104 5A68     		ldr	r2, [r3, #4]
 3509 0106 3B69     		ldr	r3, [r7, #16]
 3510 0108 5A60     		str	r2, [r3, #4]
 3511              	.L217:
 3512              		.loc 1 2818 0 discriminator 5
 3513 010a 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/cc623FKg.s 			page 116


 3514 010c 5B68     		ldr	r3, [r3, #4]
 3515 010e DB68     		ldr	r3, [r3, #12]
 3516 0110 0F4A     		ldr	r2, .L219+16
 3517 0112 1360     		str	r3, [r2]
 3518              	.LBE141:
 3519              	.LBE136:
2819:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3520              		.loc 1 2819 0 is_stmt 1 discriminator 5
 3521 0114 0E4B     		ldr	r3, .L219+16
 3522 0116 1B68     		ldr	r3, [r3]
 3523 0118 3433     		adds	r3, r3, #52
 3524 011a 1846     		mov	r0, r3
 3525 011c 0F49     		ldr	r1, .L219+28
 3526 011e 0522     		movs	r2, #5
 3527 0120 FFF7FEFF 		bl	memcmp
 3528 0124 0346     		mov	r3, r0
 3529 0126 002B     		cmp	r3, #0
 3530 0128 05D0     		beq	.L218
 3531              		.loc 1 2819 0 is_stmt 0 discriminator 1
 3532 012a 094B     		ldr	r3, .L219+16
 3533 012c 1B68     		ldr	r3, [r3]
 3534 012e 1846     		mov	r0, r3
 3535 0130 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartExec
 3536 0134 01E0     		b	.L208
 3537              	.L218:
 3538              		.loc 1 2819 0 discriminator 2
 3539 0136 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnIdle
 3540              	.L208:
2820:../../../FreeRTOS_9_0/Source/tasks.c **** 
2821:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2822:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2823:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2824:../../../FreeRTOS_9_0/Source/tasks.c **** 			structure specific to this task. */
2825:../../../FreeRTOS_9_0/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2826:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2827:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2828:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2829:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3541              		.loc 1 2829 0 is_stmt 1
 3542 013a 2037     		adds	r7, r7, #32
 3543              	.LCFI119:
 3544              		.cfi_def_cfa_offset 8
 3545 013c BD46     		mov	sp, r7
 3546              	.LCFI120:
 3547              		.cfi_def_cfa_register 13
 3548              		@ sp needed
 3549 013e 80BD     		pop	{r7, pc}
 3550              	.L220:
 3551              		.align	2
 3552              	.L219:
 3553 0140 00000000 		.word	uxSchedulerSuspended
 3554 0144 00000000 		.word	xYieldPending
 3555 0148 00000000 		.word	ulTotalRunTime
 3556 014c 00000000 		.word	ulTaskSwitchedInTime
 3557 0150 00000000 		.word	pxCurrentTCB
 3558 0154 00000000 		.word	uxTopReadyPriority
 3559 0158 00000000 		.word	pxReadyTasksLists
ARM GAS  /tmp/cc623FKg.s 			page 117


 3560 015c 00000000 		.word	.LC0
 3561              		.cfi_endproc
 3562              	.LFE28:
 3564              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3565              		.align	2
 3566              		.global	vTaskPlaceOnEventList
 3567              		.thumb
 3568              		.thumb_func
 3570              	vTaskPlaceOnEventList:
 3571              	.LFB29:
2830:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2831:../../../FreeRTOS_9_0/Source/tasks.c **** 
2832:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2833:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3572              		.loc 1 2833 0
 3573              		.cfi_startproc
 3574              		@ args = 0, pretend = 0, frame = 16
 3575              		@ frame_needed = 1, uses_anonymous_args = 0
 3576 0000 80B5     		push	{r7, lr}
 3577              	.LCFI121:
 3578              		.cfi_def_cfa_offset 8
 3579              		.cfi_offset 7, -8
 3580              		.cfi_offset 14, -4
 3581 0002 84B0     		sub	sp, sp, #16
 3582              	.LCFI122:
 3583              		.cfi_def_cfa_offset 24
 3584 0004 00AF     		add	r7, sp, #0
 3585              	.LCFI123:
 3586              		.cfi_def_cfa_register 7
 3587 0006 7860     		str	r0, [r7, #4]
 3588 0008 3960     		str	r1, [r7]
2834:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxEventList );
 3589              		.loc 1 2834 0
 3590 000a 7B68     		ldr	r3, [r7, #4]
 3591 000c 002B     		cmp	r3, #0
 3592 000e 09D1     		bne	.L222
 3593              	.LBB142:
 3594              	.LBB143:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3595              		.loc 2 237 0 discriminator 1
 3596              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3597 0010 4FF05003 			mov r3, #80												
 3598 0014 83F31188 		msr basepri, r3											
 3599 0018 BFF36F8F 		isb														
 3600 001c BFF34F8F 		dsb														
 3601              	
 3602              	@ 0 "" 2
 3603              		.thumb
 3604 0020 FB60     		str	r3, [r7, #12]
 3605              	.L223:
 3606              	.LBE143:
 3607              	.LBE142:
 3608              		.loc 1 2834 0 discriminator 1
 3609 0022 FEE7     		b	.L223
 3610              	.L222:
2835:../../../FreeRTOS_9_0/Source/tasks.c **** 
2836:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
ARM GAS  /tmp/cc623FKg.s 			page 118


2837:../../../FreeRTOS_9_0/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2838:../../../FreeRTOS_9_0/Source/tasks.c **** 
2839:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2840:../../../FreeRTOS_9_0/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2841:../../../FreeRTOS_9_0/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2842:../../../FreeRTOS_9_0/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2843:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3611              		.loc 1 2843 0
 3612 0024 064B     		ldr	r3, .L224
 3613 0026 1B68     		ldr	r3, [r3]
 3614 0028 1833     		adds	r3, r3, #24
 3615 002a 7868     		ldr	r0, [r7, #4]
 3616 002c 1946     		mov	r1, r3
 3617 002e FFF7FEFF 		bl	vListInsert
2844:../../../FreeRTOS_9_0/Source/tasks.c **** 
2845:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3618              		.loc 1 2845 0
 3619 0032 3868     		ldr	r0, [r7]
 3620 0034 0121     		movs	r1, #1
 3621 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2846:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3622              		.loc 1 2846 0
 3623 003a 1037     		adds	r7, r7, #16
 3624              	.LCFI124:
 3625              		.cfi_def_cfa_offset 8
 3626 003c BD46     		mov	sp, r7
 3627              	.LCFI125:
 3628              		.cfi_def_cfa_register 13
 3629              		@ sp needed
 3630 003e 80BD     		pop	{r7, pc}
 3631              	.L225:
 3632              		.align	2
 3633              	.L224:
 3634 0040 00000000 		.word	pxCurrentTCB
 3635              		.cfi_endproc
 3636              	.LFE29:
 3638              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3639              		.align	2
 3640              		.global	vTaskPlaceOnUnorderedEventList
 3641              		.thumb
 3642              		.thumb_func
 3644              	vTaskPlaceOnUnorderedEventList:
 3645              	.LFB30:
2847:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2848:../../../FreeRTOS_9_0/Source/tasks.c **** 
2849:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2850:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3646              		.loc 1 2850 0
 3647              		.cfi_startproc
 3648              		@ args = 0, pretend = 0, frame = 24
 3649              		@ frame_needed = 1, uses_anonymous_args = 0
 3650 0000 80B5     		push	{r7, lr}
 3651              	.LCFI126:
 3652              		.cfi_def_cfa_offset 8
 3653              		.cfi_offset 7, -8
 3654              		.cfi_offset 14, -4
 3655 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/cc623FKg.s 			page 119


 3656              	.LCFI127:
 3657              		.cfi_def_cfa_offset 32
 3658 0004 00AF     		add	r7, sp, #0
 3659              	.LCFI128:
 3660              		.cfi_def_cfa_register 7
 3661 0006 F860     		str	r0, [r7, #12]
 3662 0008 B960     		str	r1, [r7, #8]
 3663 000a 7A60     		str	r2, [r7, #4]
2851:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxEventList );
 3664              		.loc 1 2851 0
 3665 000c FB68     		ldr	r3, [r7, #12]
 3666 000e 002B     		cmp	r3, #0
 3667 0010 09D1     		bne	.L227
 3668              	.LBB144:
 3669              	.LBB145:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3670              		.loc 2 237 0 discriminator 1
 3671              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3672 0012 4FF05003 			mov r3, #80												
 3673 0016 83F31188 		msr basepri, r3											
 3674 001a BFF36F8F 		isb														
 3675 001e BFF34F8F 		dsb														
 3676              	
 3677              	@ 0 "" 2
 3678              		.thumb
 3679 0022 7B61     		str	r3, [r7, #20]
 3680              	.L228:
 3681              	.LBE145:
 3682              	.LBE144:
 3683              		.loc 1 2851 0 discriminator 1
 3684 0024 FEE7     		b	.L228
 3685              	.L227:
2852:../../../FreeRTOS_9_0/Source/tasks.c **** 
2853:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2854:../../../FreeRTOS_9_0/Source/tasks.c **** 	the event groups implementation. */
2855:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3686              		.loc 1 2855 0
 3687 0026 114B     		ldr	r3, .L231
 3688 0028 1B68     		ldr	r3, [r3]
 3689 002a 002B     		cmp	r3, #0
 3690 002c 09D1     		bne	.L229
 3691              	.LBB146:
 3692              	.LBB147:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3693              		.loc 2 237 0 discriminator 1
 3694              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3695 002e 4FF05003 			mov r3, #80												
 3696 0032 83F31188 		msr basepri, r3											
 3697 0036 BFF36F8F 		isb														
 3698 003a BFF34F8F 		dsb														
 3699              	
 3700              	@ 0 "" 2
 3701              		.thumb
 3702 003e 3B61     		str	r3, [r7, #16]
 3703              	.L230:
 3704              	.LBE147:
 3705              	.LBE146:
ARM GAS  /tmp/cc623FKg.s 			page 120


 3706              		.loc 1 2855 0 discriminator 2
 3707 0040 FEE7     		b	.L230
 3708              	.L229:
2856:../../../FreeRTOS_9_0/Source/tasks.c **** 
2857:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2858:../../../FreeRTOS_9_0/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2859:../../../FreeRTOS_9_0/Source/tasks.c **** 	task that is not in the Blocked state. */
2860:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3709              		.loc 1 2860 0
 3710 0042 0B4B     		ldr	r3, .L231+4
 3711 0044 1B68     		ldr	r3, [r3]
 3712 0046 BA68     		ldr	r2, [r7, #8]
 3713 0048 42F00042 		orr	r2, r2, #-2147483648
 3714 004c 9A61     		str	r2, [r3, #24]
2861:../../../FreeRTOS_9_0/Source/tasks.c **** 
2862:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2863:../../../FreeRTOS_9_0/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2864:../../../FreeRTOS_9_0/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2865:../../../FreeRTOS_9_0/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2866:../../../FreeRTOS_9_0/Source/tasks.c **** 	the task level). */
2867:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3715              		.loc 1 2867 0
 3716 004e 084B     		ldr	r3, .L231+4
 3717 0050 1B68     		ldr	r3, [r3]
 3718 0052 1833     		adds	r3, r3, #24
 3719 0054 F868     		ldr	r0, [r7, #12]
 3720 0056 1946     		mov	r1, r3
 3721 0058 FFF7FEFF 		bl	vListInsertEnd
2868:../../../FreeRTOS_9_0/Source/tasks.c **** 
2869:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3722              		.loc 1 2869 0
 3723 005c 7868     		ldr	r0, [r7, #4]
 3724 005e 0121     		movs	r1, #1
 3725 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2870:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3726              		.loc 1 2870 0
 3727 0064 1837     		adds	r7, r7, #24
 3728              	.LCFI129:
 3729              		.cfi_def_cfa_offset 8
 3730 0066 BD46     		mov	sp, r7
 3731              	.LCFI130:
 3732              		.cfi_def_cfa_register 13
 3733              		@ sp needed
 3734 0068 80BD     		pop	{r7, pc}
 3735              	.L232:
 3736 006a 00BF     		.align	2
 3737              	.L231:
 3738 006c 00000000 		.word	uxSchedulerSuspended
 3739 0070 00000000 		.word	pxCurrentTCB
 3740              		.cfi_endproc
 3741              	.LFE30:
 3743              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3744              		.align	2
 3745              		.global	xTaskRemoveFromEventList
 3746              		.thumb
 3747              		.thumb_func
 3749              	xTaskRemoveFromEventList:
ARM GAS  /tmp/cc623FKg.s 			page 121


 3750              	.LFB31:
2871:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2872:../../../FreeRTOS_9_0/Source/tasks.c **** 
2873:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2874:../../../FreeRTOS_9_0/Source/tasks.c **** 
2875:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2876:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2877:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxEventList );
2878:../../../FreeRTOS_9_0/Source/tasks.c **** 
2879:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This function should not be called by application code hence the
2880:../../../FreeRTOS_9_0/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2881:../../../FreeRTOS_9_0/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2882:../../../FreeRTOS_9_0/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2883:../../../FreeRTOS_9_0/Source/tasks.c **** 
2884:../../../FreeRTOS_9_0/Source/tasks.c **** 
2885:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2886:../../../FreeRTOS_9_0/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2887:../../../FreeRTOS_9_0/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2888:../../../FreeRTOS_9_0/Source/tasks.c **** 		can be used in place of vListInsert. */
2889:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2890:../../../FreeRTOS_9_0/Source/tasks.c **** 
2891:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2892:../../../FreeRTOS_9_0/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2893:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2894:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2895:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2896:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2897:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2898:../../../FreeRTOS_9_0/Source/tasks.c **** 
2899:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2900:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2901:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2902:../../../FreeRTOS_9_0/Source/tasks.c **** 
2903:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TIMERS */
2904:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2905:../../../FreeRTOS_9_0/Source/tasks.c **** 
2906:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2907:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3751              		.loc 1 2907 0
 3752              		.cfi_startproc
 3753              		@ args = 0, pretend = 0, frame = 24
 3754              		@ frame_needed = 1, uses_anonymous_args = 0
 3755 0000 80B5     		push	{r7, lr}
 3756              	.LCFI131:
 3757              		.cfi_def_cfa_offset 8
 3758              		.cfi_offset 7, -8
 3759              		.cfi_offset 14, -4
 3760 0002 86B0     		sub	sp, sp, #24
 3761              	.LCFI132:
 3762              		.cfi_def_cfa_offset 32
 3763 0004 00AF     		add	r7, sp, #0
 3764              	.LCFI133:
 3765              		.cfi_def_cfa_register 7
 3766 0006 7860     		str	r0, [r7, #4]
2908:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2909:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
2910:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 122


2911:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2912:../../../FreeRTOS_9_0/Source/tasks.c **** 	called from a critical section within an ISR. */
2913:../../../FreeRTOS_9_0/Source/tasks.c **** 
2914:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2915:../../../FreeRTOS_9_0/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2916:../../../FreeRTOS_9_0/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2917:../../../FreeRTOS_9_0/Source/tasks.c **** 
2918:../../../FreeRTOS_9_0/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2919:../../../FreeRTOS_9_0/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2920:../../../FreeRTOS_9_0/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2921:../../../FreeRTOS_9_0/Source/tasks.c **** 
2922:../../../FreeRTOS_9_0/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2923:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxEventList is not empty. */
2924:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3767              		.loc 1 2924 0
 3768 0008 7B68     		ldr	r3, [r7, #4]
 3769 000a DB68     		ldr	r3, [r3, #12]
 3770 000c DB68     		ldr	r3, [r3, #12]
 3771 000e 3B61     		str	r3, [r7, #16]
2925:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3772              		.loc 1 2925 0
 3773 0010 3B69     		ldr	r3, [r7, #16]
 3774 0012 002B     		cmp	r3, #0
 3775 0014 09D1     		bne	.L234
 3776              	.LBB148:
 3777              	.LBB149:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3778              		.loc 2 237 0 discriminator 1
 3779              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3780 0016 4FF05003 			mov r3, #80												
 3781 001a 83F31188 		msr basepri, r3											
 3782 001e BFF36F8F 		isb														
 3783 0022 BFF34F8F 		dsb														
 3784              	
 3785              	@ 0 "" 2
 3786              		.thumb
 3787 0026 FB60     		str	r3, [r7, #12]
 3788              	.L235:
 3789              	.LBE149:
 3790              	.LBE148:
 3791              		.loc 1 2925 0 discriminator 1
 3792 0028 FEE7     		b	.L235
 3793              	.L234:
2926:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3794              		.loc 1 2926 0
 3795 002a 3B69     		ldr	r3, [r7, #16]
 3796 002c 1833     		adds	r3, r3, #24
 3797 002e 1846     		mov	r0, r3
 3798 0030 FFF7FEFF 		bl	uxListRemove
2927:../../../FreeRTOS_9_0/Source/tasks.c **** 
2928:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3799              		.loc 1 2928 0
 3800 0034 204B     		ldr	r3, .L241
 3801 0036 1B68     		ldr	r3, [r3]
 3802 0038 002B     		cmp	r3, #0
 3803 003a 22D1     		bne	.L236
2929:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
ARM GAS  /tmp/cc623FKg.s 			page 123


2930:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3804              		.loc 1 2930 0
 3805 003c 3B69     		ldr	r3, [r7, #16]
 3806 003e 0433     		adds	r3, r3, #4
 3807 0040 1846     		mov	r0, r3
 3808 0042 FFF7FEFF 		bl	uxListRemove
2931:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3809              		.loc 1 2931 0
 3810 0046 3B69     		ldr	r3, [r7, #16]
 3811 0048 1846     		mov	r0, r3
 3812 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 3813 004e 3B69     		ldr	r3, [r7, #16]
 3814 0050 DB6A     		ldr	r3, [r3, #44]
 3815 0052 1A46     		mov	r2, r3
 3816 0054 0123     		movs	r3, #1
 3817 0056 03FA02F2 		lsl	r2, r3, r2
 3818 005a 184B     		ldr	r3, .L241+4
 3819 005c 1B68     		ldr	r3, [r3]
 3820 005e 1343     		orrs	r3, r3, r2
 3821 0060 164A     		ldr	r2, .L241+4
 3822 0062 1360     		str	r3, [r2]
 3823 0064 3B69     		ldr	r3, [r7, #16]
 3824 0066 DA6A     		ldr	r2, [r3, #44]
 3825 0068 1346     		mov	r3, r2
 3826 006a 9B00     		lsls	r3, r3, #2
 3827 006c 1344     		add	r3, r3, r2
 3828 006e 9B00     		lsls	r3, r3, #2
 3829 0070 134A     		ldr	r2, .L241+8
 3830 0072 1A44     		add	r2, r2, r3
 3831 0074 3B69     		ldr	r3, [r7, #16]
 3832 0076 0433     		adds	r3, r3, #4
 3833 0078 1046     		mov	r0, r2
 3834 007a 1946     		mov	r1, r3
 3835 007c FFF7FEFF 		bl	vListInsertEnd
 3836 0080 05E0     		b	.L237
 3837              	.L236:
2932:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2933:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2934:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2935:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2936:../../../FreeRTOS_9_0/Source/tasks.c **** 		pending until the scheduler is resumed. */
2937:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3838              		.loc 1 2937 0
 3839 0082 3B69     		ldr	r3, [r7, #16]
 3840 0084 1833     		adds	r3, r3, #24
 3841 0086 0F48     		ldr	r0, .L241+12
 3842 0088 1946     		mov	r1, r3
 3843 008a FFF7FEFF 		bl	vListInsertEnd
 3844              	.L237:
2938:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2939:../../../FreeRTOS_9_0/Source/tasks.c **** 
2940:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3845              		.loc 1 2940 0
 3846 008e 3B69     		ldr	r3, [r7, #16]
 3847 0090 DA6A     		ldr	r2, [r3, #44]
 3848 0092 0D4B     		ldr	r3, .L241+16
 3849 0094 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc623FKg.s 			page 124


 3850 0096 DB6A     		ldr	r3, [r3, #44]
 3851 0098 9A42     		cmp	r2, r3
 3852 009a 05D9     		bls	.L238
2941:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2942:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2943:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2944:../../../FreeRTOS_9_0/Source/tasks.c **** 		it should force a context switch now. */
2945:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdTRUE;
 3853              		.loc 1 2945 0
 3854 009c 0123     		movs	r3, #1
 3855 009e 7B61     		str	r3, [r7, #20]
2946:../../../FreeRTOS_9_0/Source/tasks.c **** 
2947:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2948:../../../FreeRTOS_9_0/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2949:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3856              		.loc 1 2949 0
 3857 00a0 0A4B     		ldr	r3, .L241+20
 3858 00a2 0122     		movs	r2, #1
 3859 00a4 1A60     		str	r2, [r3]
 3860 00a6 01E0     		b	.L239
 3861              	.L238:
2950:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2951:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2952:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2953:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdFALSE;
 3862              		.loc 1 2953 0
 3863 00a8 0023     		movs	r3, #0
 3864 00aa 7B61     		str	r3, [r7, #20]
 3865              	.L239:
2954:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2955:../../../FreeRTOS_9_0/Source/tasks.c **** 
2956:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2957:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2958:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2959:../../../FreeRTOS_9_0/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2960:../../../FreeRTOS_9_0/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2961:../../../FreeRTOS_9_0/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2962:../../../FreeRTOS_9_0/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2963:../../../FreeRTOS_9_0/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2964:../../../FreeRTOS_9_0/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2965:../../../FreeRTOS_9_0/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2966:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2967:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2968:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
2969:../../../FreeRTOS_9_0/Source/tasks.c **** 
2970:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 3866              		.loc 1 2970 0
 3867 00ac 7B69     		ldr	r3, [r7, #20]
2971:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3868              		.loc 1 2971 0
 3869 00ae 1846     		mov	r0, r3
 3870 00b0 1837     		adds	r7, r7, #24
 3871              	.LCFI134:
 3872              		.cfi_def_cfa_offset 8
 3873 00b2 BD46     		mov	sp, r7
 3874              	.LCFI135:
 3875              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc623FKg.s 			page 125


 3876              		@ sp needed
 3877 00b4 80BD     		pop	{r7, pc}
 3878              	.L242:
 3879 00b6 00BF     		.align	2
 3880              	.L241:
 3881 00b8 00000000 		.word	uxSchedulerSuspended
 3882 00bc 00000000 		.word	uxTopReadyPriority
 3883 00c0 00000000 		.word	pxReadyTasksLists
 3884 00c4 00000000 		.word	xPendingReadyList
 3885 00c8 00000000 		.word	pxCurrentTCB
 3886 00cc 00000000 		.word	xYieldPending
 3887              		.cfi_endproc
 3888              	.LFE31:
 3890              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3891              		.align	2
 3892              		.global	xTaskRemoveFromUnorderedEventList
 3893              		.thumb
 3894              		.thumb_func
 3896              	xTaskRemoveFromUnorderedEventList:
 3897              	.LFB32:
2972:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2973:../../../FreeRTOS_9_0/Source/tasks.c **** 
2974:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2975:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3898              		.loc 1 2975 0
 3899              		.cfi_startproc
 3900              		@ args = 0, pretend = 0, frame = 24
 3901              		@ frame_needed = 1, uses_anonymous_args = 0
 3902 0000 80B5     		push	{r7, lr}
 3903              	.LCFI136:
 3904              		.cfi_def_cfa_offset 8
 3905              		.cfi_offset 7, -8
 3906              		.cfi_offset 14, -4
 3907 0002 86B0     		sub	sp, sp, #24
 3908              	.LCFI137:
 3909              		.cfi_def_cfa_offset 32
 3910 0004 00AF     		add	r7, sp, #0
 3911              	.LCFI138:
 3912              		.cfi_def_cfa_register 7
 3913 0006 7860     		str	r0, [r7, #4]
 3914 0008 3960     		str	r1, [r7]
2976:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2977:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
2978:../../../FreeRTOS_9_0/Source/tasks.c **** 
2979:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2980:../../../FreeRTOS_9_0/Source/tasks.c **** 	the event flags implementation. */
2981:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3915              		.loc 1 2981 0
 3916 000a 2E4B     		ldr	r3, .L251
 3917 000c 1B68     		ldr	r3, [r3]
 3918 000e 002B     		cmp	r3, #0
 3919 0010 09D1     		bne	.L244
 3920              	.LBB150:
 3921              	.LBB151:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3922              		.loc 2 237 0 discriminator 1
 3923              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cc623FKg.s 			page 126


 3924 0012 4FF05003 			mov r3, #80												
 3925 0016 83F31188 		msr basepri, r3											
 3926 001a BFF36F8F 		isb														
 3927 001e BFF34F8F 		dsb														
 3928              	
 3929              	@ 0 "" 2
 3930              		.thumb
 3931 0022 FB60     		str	r3, [r7, #12]
 3932              	.L245:
 3933              	.LBE151:
 3934              	.LBE150:
 3935              		.loc 1 2981 0 discriminator 1
 3936 0024 FEE7     		b	.L245
 3937              	.L244:
2982:../../../FreeRTOS_9_0/Source/tasks.c **** 
2983:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the new item value in the event list. */
2984:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3938              		.loc 1 2984 0
 3939 0026 3B68     		ldr	r3, [r7]
 3940 0028 43F00042 		orr	r2, r3, #-2147483648
 3941 002c 7B68     		ldr	r3, [r7, #4]
 3942 002e 1A60     		str	r2, [r3]
2985:../../../FreeRTOS_9_0/Source/tasks.c **** 
2986:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2987:../../../FreeRTOS_9_0/Source/tasks.c **** 	event flags. */
2988:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3943              		.loc 1 2988 0
 3944 0030 7B68     		ldr	r3, [r7, #4]
 3945 0032 DB68     		ldr	r3, [r3, #12]
 3946 0034 3B61     		str	r3, [r7, #16]
2989:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3947              		.loc 1 2989 0
 3948 0036 3B69     		ldr	r3, [r7, #16]
 3949 0038 002B     		cmp	r3, #0
 3950 003a 09D1     		bne	.L246
 3951              	.LBB152:
 3952              	.LBB153:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3953              		.loc 2 237 0 discriminator 1
 3954              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3955 003c 4FF05003 			mov r3, #80												
 3956 0040 83F31188 		msr basepri, r3											
 3957 0044 BFF36F8F 		isb														
 3958 0048 BFF34F8F 		dsb														
 3959              	
 3960              	@ 0 "" 2
 3961              		.thumb
 3962 004c BB60     		str	r3, [r7, #8]
 3963              	.L247:
 3964              	.LBE153:
 3965              	.LBE152:
 3966              		.loc 1 2989 0 discriminator 2
 3967 004e FEE7     		b	.L247
 3968              	.L246:
2990:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3969              		.loc 1 2990 0
 3970 0050 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/cc623FKg.s 			page 127


 3971 0052 FFF7FEFF 		bl	uxListRemove
2991:../../../FreeRTOS_9_0/Source/tasks.c **** 
2992:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2993:../../../FreeRTOS_9_0/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2994:../../../FreeRTOS_9_0/Source/tasks.c **** 	lists. */
2995:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3972              		.loc 1 2995 0
 3973 0056 3B69     		ldr	r3, [r7, #16]
 3974 0058 0433     		adds	r3, r3, #4
 3975 005a 1846     		mov	r0, r3
 3976 005c FFF7FEFF 		bl	uxListRemove
2996:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3977              		.loc 1 2996 0
 3978 0060 3B69     		ldr	r3, [r7, #16]
 3979 0062 1846     		mov	r0, r3
 3980 0064 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 3981 0068 3B69     		ldr	r3, [r7, #16]
 3982 006a DB6A     		ldr	r3, [r3, #44]
 3983 006c 1A46     		mov	r2, r3
 3984 006e 0123     		movs	r3, #1
 3985 0070 03FA02F2 		lsl	r2, r3, r2
 3986 0074 144B     		ldr	r3, .L251+4
 3987 0076 1B68     		ldr	r3, [r3]
 3988 0078 1343     		orrs	r3, r3, r2
 3989 007a 134A     		ldr	r2, .L251+4
 3990 007c 1360     		str	r3, [r2]
 3991 007e 3B69     		ldr	r3, [r7, #16]
 3992 0080 DA6A     		ldr	r2, [r3, #44]
 3993 0082 1346     		mov	r3, r2
 3994 0084 9B00     		lsls	r3, r3, #2
 3995 0086 1344     		add	r3, r3, r2
 3996 0088 9B00     		lsls	r3, r3, #2
 3997 008a 104A     		ldr	r2, .L251+8
 3998 008c 1A44     		add	r2, r2, r3
 3999 008e 3B69     		ldr	r3, [r7, #16]
 4000 0090 0433     		adds	r3, r3, #4
 4001 0092 1046     		mov	r0, r2
 4002 0094 1946     		mov	r1, r3
 4003 0096 FFF7FEFF 		bl	vListInsertEnd
2997:../../../FreeRTOS_9_0/Source/tasks.c **** 
2998:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4004              		.loc 1 2998 0
 4005 009a 3B69     		ldr	r3, [r7, #16]
 4006 009c DA6A     		ldr	r2, [r3, #44]
 4007 009e 0C4B     		ldr	r3, .L251+12
 4008 00a0 1B68     		ldr	r3, [r3]
 4009 00a2 DB6A     		ldr	r3, [r3, #44]
 4010 00a4 9A42     		cmp	r2, r3
 4011 00a6 05D9     		bls	.L248
2999:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3000:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return true if the task removed from the event list has
3001:../../../FreeRTOS_9_0/Source/tasks.c **** 		a higher priority than the calling task.  This allows
3002:../../../FreeRTOS_9_0/Source/tasks.c **** 		the calling task to know if it should force a context
3003:../../../FreeRTOS_9_0/Source/tasks.c **** 		switch now. */
3004:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdTRUE;
 4012              		.loc 1 3004 0
 4013 00a8 0123     		movs	r3, #1
ARM GAS  /tmp/cc623FKg.s 			page 128


 4014 00aa 7B61     		str	r3, [r7, #20]
3005:../../../FreeRTOS_9_0/Source/tasks.c **** 
3006:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3007:../../../FreeRTOS_9_0/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3008:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4015              		.loc 1 3008 0
 4016 00ac 094B     		ldr	r3, .L251+16
 4017 00ae 0122     		movs	r2, #1
 4018 00b0 1A60     		str	r2, [r3]
 4019 00b2 01E0     		b	.L249
 4020              	.L248:
3009:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3010:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
3011:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3012:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdFALSE;
 4021              		.loc 1 3012 0
 4022 00b4 0023     		movs	r3, #0
 4023 00b6 7B61     		str	r3, [r7, #20]
 4024              	.L249:
3013:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3014:../../../FreeRTOS_9_0/Source/tasks.c **** 
3015:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 4025              		.loc 1 3015 0
 4026 00b8 7B69     		ldr	r3, [r7, #20]
3016:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4027              		.loc 1 3016 0
 4028 00ba 1846     		mov	r0, r3
 4029 00bc 1837     		adds	r7, r7, #24
 4030              	.LCFI139:
 4031              		.cfi_def_cfa_offset 8
 4032 00be BD46     		mov	sp, r7
 4033              	.LCFI140:
 4034              		.cfi_def_cfa_register 13
 4035              		@ sp needed
 4036 00c0 80BD     		pop	{r7, pc}
 4037              	.L252:
 4038 00c2 00BF     		.align	2
 4039              	.L251:
 4040 00c4 00000000 		.word	uxSchedulerSuspended
 4041 00c8 00000000 		.word	uxTopReadyPriority
 4042 00cc 00000000 		.word	pxReadyTasksLists
 4043 00d0 00000000 		.word	pxCurrentTCB
 4044 00d4 00000000 		.word	xYieldPending
 4045              		.cfi_endproc
 4046              	.LFE32:
 4048              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4049              		.align	2
 4050              		.global	vTaskSetTimeOutState
 4051              		.thumb
 4052              		.thumb_func
 4054              	vTaskSetTimeOutState:
 4055              	.LFB33:
3017:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3018:../../../FreeRTOS_9_0/Source/tasks.c **** 
3019:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3020:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4056              		.loc 1 3020 0
ARM GAS  /tmp/cc623FKg.s 			page 129


 4057              		.cfi_startproc
 4058              		@ args = 0, pretend = 0, frame = 16
 4059              		@ frame_needed = 1, uses_anonymous_args = 0
 4060              		@ link register save eliminated.
 4061 0000 80B4     		push	{r7}
 4062              	.LCFI141:
 4063              		.cfi_def_cfa_offset 4
 4064              		.cfi_offset 7, -4
 4065 0002 85B0     		sub	sp, sp, #20
 4066              	.LCFI142:
 4067              		.cfi_def_cfa_offset 24
 4068 0004 00AF     		add	r7, sp, #0
 4069              	.LCFI143:
 4070              		.cfi_def_cfa_register 7
 4071 0006 7860     		str	r0, [r7, #4]
3021:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4072              		.loc 1 3021 0
 4073 0008 7B68     		ldr	r3, [r7, #4]
 4074 000a 002B     		cmp	r3, #0
 4075 000c 09D1     		bne	.L254
 4076              	.LBB154:
 4077              	.LBB155:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4078              		.loc 2 237 0 discriminator 1
 4079              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4080 000e 4FF05003 			mov r3, #80												
 4081 0012 83F31188 		msr basepri, r3											
 4082 0016 BFF36F8F 		isb														
 4083 001a BFF34F8F 		dsb														
 4084              	
 4085              	@ 0 "" 2
 4086              		.thumb
 4087 001e FB60     		str	r3, [r7, #12]
 4088              	.L255:
 4089              	.LBE155:
 4090              	.LBE154:
 4091              		.loc 1 3021 0 discriminator 1
 4092 0020 FEE7     		b	.L255
 4093              	.L254:
3022:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4094              		.loc 1 3022 0
 4095 0022 064B     		ldr	r3, .L256
 4096 0024 1A68     		ldr	r2, [r3]
 4097 0026 7B68     		ldr	r3, [r7, #4]
 4098 0028 1A60     		str	r2, [r3]
3023:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4099              		.loc 1 3023 0
 4100 002a 054B     		ldr	r3, .L256+4
 4101 002c 1A68     		ldr	r2, [r3]
 4102 002e 7B68     		ldr	r3, [r7, #4]
 4103 0030 5A60     		str	r2, [r3, #4]
3024:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4104              		.loc 1 3024 0
 4105 0032 1437     		adds	r7, r7, #20
 4106              	.LCFI144:
 4107              		.cfi_def_cfa_offset 4
 4108 0034 BD46     		mov	sp, r7
ARM GAS  /tmp/cc623FKg.s 			page 130


 4109              	.LCFI145:
 4110              		.cfi_def_cfa_register 13
 4111              		@ sp needed
 4112 0036 5DF8047B 		ldr	r7, [sp], #4
 4113              	.LCFI146:
 4114              		.cfi_restore 7
 4115              		.cfi_def_cfa_offset 0
 4116 003a 7047     		bx	lr
 4117              	.L257:
 4118              		.align	2
 4119              	.L256:
 4120 003c 00000000 		.word	xNumOfOverflows
 4121 0040 00000000 		.word	xTickCount
 4122              		.cfi_endproc
 4123              	.LFE33:
 4125              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4126              		.align	2
 4127              		.global	xTaskCheckForTimeOut
 4128              		.thumb
 4129              		.thumb_func
 4131              	xTaskCheckForTimeOut:
 4132              	.LFB34:
3025:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3026:../../../FreeRTOS_9_0/Source/tasks.c **** 
3027:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3028:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4133              		.loc 1 3028 0
 4134              		.cfi_startproc
 4135              		@ args = 0, pretend = 0, frame = 24
 4136              		@ frame_needed = 1, uses_anonymous_args = 0
 4137 0000 80B5     		push	{r7, lr}
 4138              	.LCFI147:
 4139              		.cfi_def_cfa_offset 8
 4140              		.cfi_offset 7, -8
 4141              		.cfi_offset 14, -4
 4142 0002 86B0     		sub	sp, sp, #24
 4143              	.LCFI148:
 4144              		.cfi_def_cfa_offset 32
 4145 0004 00AF     		add	r7, sp, #0
 4146              	.LCFI149:
 4147              		.cfi_def_cfa_register 7
 4148 0006 7860     		str	r0, [r7, #4]
 4149 0008 3960     		str	r1, [r7]
3029:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
3030:../../../FreeRTOS_9_0/Source/tasks.c **** 
3031:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4150              		.loc 1 3031 0
 4151 000a 7B68     		ldr	r3, [r7, #4]
 4152 000c 002B     		cmp	r3, #0
 4153 000e 09D1     		bne	.L259
 4154              	.LBB156:
 4155              	.LBB157:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4156              		.loc 2 237 0 discriminator 1
 4157              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4158 0010 4FF05003 			mov r3, #80												
 4159 0014 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cc623FKg.s 			page 131


 4160 0018 BFF36F8F 		isb														
 4161 001c BFF34F8F 		dsb														
 4162              	
 4163              	@ 0 "" 2
 4164              		.thumb
 4165 0020 FB60     		str	r3, [r7, #12]
 4166              	.L260:
 4167              	.LBE157:
 4168              	.LBE156:
 4169              		.loc 1 3031 0 discriminator 1
 4170 0022 FEE7     		b	.L260
 4171              	.L259:
3032:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4172              		.loc 1 3032 0
 4173 0024 3B68     		ldr	r3, [r7]
 4174 0026 002B     		cmp	r3, #0
 4175 0028 09D1     		bne	.L261
 4176              	.LBB158:
 4177              	.LBB159:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4178              		.loc 2 237 0 discriminator 1
 4179              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4180 002a 4FF05003 			mov r3, #80												
 4181 002e 83F31188 		msr basepri, r3											
 4182 0032 BFF36F8F 		isb														
 4183 0036 BFF34F8F 		dsb														
 4184              	
 4185              	@ 0 "" 2
 4186              		.thumb
 4187 003a BB60     		str	r3, [r7, #8]
 4188              	.L262:
 4189              	.LBE159:
 4190              	.LBE158:
 4191              		.loc 1 3032 0 discriminator 2
 4192 003c FEE7     		b	.L262
 4193              	.L261:
3033:../../../FreeRTOS_9_0/Source/tasks.c **** 
3034:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 4194              		.loc 1 3034 0
 4195 003e FFF7FEFF 		bl	vPortEnterCritical
 4196              	.LBB160:
3035:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3036:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3037:../../../FreeRTOS_9_0/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4197              		.loc 1 3037 0
 4198 0042 1C4B     		ldr	r3, .L268
 4199 0044 1B68     		ldr	r3, [r3]
 4200 0046 3B61     		str	r3, [r7, #16]
3038:../../../FreeRTOS_9_0/Source/tasks.c **** 
3039:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3040:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3041:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3042:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3043:../../../FreeRTOS_9_0/Source/tasks.c **** 				but has the same result. */
3044:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3045:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdTRUE;
3046:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/cc623FKg.s 			page 132


3047:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3048:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3049:../../../FreeRTOS_9_0/Source/tasks.c **** 
3050:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3051:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4201              		.loc 1 3051 0
 4202 0048 3B68     		ldr	r3, [r7]
 4203 004a 1B68     		ldr	r3, [r3]
 4204 004c B3F1FF3F 		cmp	r3, #-1
 4205 0050 02D1     		bne	.L263
3052:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3053:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3054:../../../FreeRTOS_9_0/Source/tasks.c **** 				specified is the maximum block time then the task should block
3055:../../../FreeRTOS_9_0/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3056:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFALSE;
 4206              		.loc 1 3056 0
 4207 0052 0023     		movs	r3, #0
 4208 0054 7B61     		str	r3, [r7, #20]
 4209 0056 26E0     		b	.L264
 4210              	.L263:
3057:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3058:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3059:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3060:../../../FreeRTOS_9_0/Source/tasks.c **** 
3061:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4211              		.loc 1 3061 0
 4212 0058 7B68     		ldr	r3, [r7, #4]
 4213 005a 1A68     		ldr	r2, [r3]
 4214 005c 164B     		ldr	r3, .L268+4
 4215 005e 1B68     		ldr	r3, [r3]
 4216 0060 9A42     		cmp	r2, r3
 4217 0062 07D0     		beq	.L265
 4218              		.loc 1 3061 0 is_stmt 0 discriminator 1
 4219 0064 7B68     		ldr	r3, [r7, #4]
 4220 0066 5A68     		ldr	r2, [r3, #4]
 4221 0068 3B69     		ldr	r3, [r7, #16]
 4222 006a 9A42     		cmp	r2, r3
 4223 006c 02D8     		bhi	.L265
3062:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3063:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The tick count is greater than the time at which
3064:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3065:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3066:../../../FreeRTOS_9_0/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3067:../../../FreeRTOS_9_0/Source/tasks.c **** 			was called. */
3068:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdTRUE;
 4224              		.loc 1 3068 0 is_stmt 1
 4225 006e 0123     		movs	r3, #1
 4226 0070 7B61     		str	r3, [r7, #20]
 4227 0072 18E0     		b	.L264
 4228              	.L265:
3069:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3070:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 4229              		.loc 1 3070 0
 4230 0074 7B68     		ldr	r3, [r7, #4]
 4231 0076 5B68     		ldr	r3, [r3, #4]
 4232 0078 3A69     		ldr	r2, [r7, #16]
 4233 007a D21A     		subs	r2, r2, r3
ARM GAS  /tmp/cc623FKg.s 			page 133


 4234 007c 3B68     		ldr	r3, [r7]
 4235 007e 1B68     		ldr	r3, [r3]
 4236 0080 9A42     		cmp	r2, r3
 4237 0082 0ED2     		bcs	.L266
3071:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3072:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3073:../../../FreeRTOS_9_0/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 4238              		.loc 1 3073 0
 4239 0084 3B68     		ldr	r3, [r7]
 4240 0086 1A68     		ldr	r2, [r3]
 4241 0088 7B68     		ldr	r3, [r7, #4]
 4242 008a 5968     		ldr	r1, [r3, #4]
 4243 008c 3B69     		ldr	r3, [r7, #16]
 4244 008e CB1A     		subs	r3, r1, r3
 4245 0090 1A44     		add	r2, r2, r3
 4246 0092 3B68     		ldr	r3, [r7]
 4247 0094 1A60     		str	r2, [r3]
3074:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 4248              		.loc 1 3074 0
 4249 0096 7868     		ldr	r0, [r7, #4]
 4250 0098 FFF7FEFF 		bl	vTaskSetTimeOutState
3075:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFALSE;
 4251              		.loc 1 3075 0
 4252 009c 0023     		movs	r3, #0
 4253 009e 7B61     		str	r3, [r7, #20]
 4254 00a0 01E0     		b	.L264
 4255              	.L266:
3076:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3077:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3078:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3079:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdTRUE;
 4256              		.loc 1 3079 0
 4257 00a2 0123     		movs	r3, #1
 4258 00a4 7B61     		str	r3, [r7, #20]
 4259              	.L264:
 4260              	.LBE160:
3080:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3081:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3082:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4261              		.loc 1 3082 0
 4262 00a6 FFF7FEFF 		bl	vPortExitCritical
3083:../../../FreeRTOS_9_0/Source/tasks.c **** 
3084:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 4263              		.loc 1 3084 0
 4264 00aa 7B69     		ldr	r3, [r7, #20]
3085:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4265              		.loc 1 3085 0
 4266 00ac 1846     		mov	r0, r3
 4267 00ae 1837     		adds	r7, r7, #24
 4268              	.LCFI150:
 4269              		.cfi_def_cfa_offset 8
 4270 00b0 BD46     		mov	sp, r7
 4271              	.LCFI151:
 4272              		.cfi_def_cfa_register 13
 4273              		@ sp needed
 4274 00b2 80BD     		pop	{r7, pc}
 4275              	.L269:
ARM GAS  /tmp/cc623FKg.s 			page 134


 4276              		.align	2
 4277              	.L268:
 4278 00b4 00000000 		.word	xTickCount
 4279 00b8 00000000 		.word	xNumOfOverflows
 4280              		.cfi_endproc
 4281              	.LFE34:
 4283              		.section	.text.vTaskMissedYield,"ax",%progbits
 4284              		.align	2
 4285              		.global	vTaskMissedYield
 4286              		.thumb
 4287              		.thumb_func
 4289              	vTaskMissedYield:
 4290              	.LFB35:
3086:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3087:../../../FreeRTOS_9_0/Source/tasks.c **** 
3088:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskMissedYield( void )
3089:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4291              		.loc 1 3089 0
 4292              		.cfi_startproc
 4293              		@ args = 0, pretend = 0, frame = 0
 4294              		@ frame_needed = 1, uses_anonymous_args = 0
 4295              		@ link register save eliminated.
 4296 0000 80B4     		push	{r7}
 4297              	.LCFI152:
 4298              		.cfi_def_cfa_offset 4
 4299              		.cfi_offset 7, -4
 4300 0002 00AF     		add	r7, sp, #0
 4301              	.LCFI153:
 4302              		.cfi_def_cfa_register 7
3090:../../../FreeRTOS_9_0/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4303              		.loc 1 3090 0
 4304 0004 034B     		ldr	r3, .L271
 4305 0006 0122     		movs	r2, #1
 4306 0008 1A60     		str	r2, [r3]
3091:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4307              		.loc 1 3091 0
 4308 000a BD46     		mov	sp, r7
 4309              	.LCFI154:
 4310              		.cfi_def_cfa_register 13
 4311              		@ sp needed
 4312 000c 5DF8047B 		ldr	r7, [sp], #4
 4313              	.LCFI155:
 4314              		.cfi_restore 7
 4315              		.cfi_def_cfa_offset 0
 4316 0010 7047     		bx	lr
 4317              	.L272:
 4318 0012 00BF     		.align	2
 4319              	.L271:
 4320 0014 00000000 		.word	xYieldPending
 4321              		.cfi_endproc
 4322              	.LFE35:
 4324              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4325              		.align	2
 4326              		.global	uxTaskGetTaskNumber
 4327              		.thumb
 4328              		.thumb_func
 4330              	uxTaskGetTaskNumber:
ARM GAS  /tmp/cc623FKg.s 			page 135


 4331              	.LFB36:
3092:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:../../../FreeRTOS_9_0/Source/tasks.c **** 
3094:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3095:../../../FreeRTOS_9_0/Source/tasks.c **** 
3096:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3097:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4332              		.loc 1 3097 0
 4333              		.cfi_startproc
 4334              		@ args = 0, pretend = 0, frame = 16
 4335              		@ frame_needed = 1, uses_anonymous_args = 0
 4336              		@ link register save eliminated.
 4337 0000 80B4     		push	{r7}
 4338              	.LCFI156:
 4339              		.cfi_def_cfa_offset 4
 4340              		.cfi_offset 7, -4
 4341 0002 85B0     		sub	sp, sp, #20
 4342              	.LCFI157:
 4343              		.cfi_def_cfa_offset 24
 4344 0004 00AF     		add	r7, sp, #0
 4345              	.LCFI158:
 4346              		.cfi_def_cfa_register 7
 4347 0006 7860     		str	r0, [r7, #4]
3098:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
3099:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3100:../../../FreeRTOS_9_0/Source/tasks.c **** 
3101:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask != NULL )
 4348              		.loc 1 3101 0
 4349 0008 7B68     		ldr	r3, [r7, #4]
 4350 000a 002B     		cmp	r3, #0
 4351 000c 05D0     		beq	.L274
3102:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3103:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4352              		.loc 1 3103 0
 4353 000e 7B68     		ldr	r3, [r7, #4]
 4354 0010 BB60     		str	r3, [r7, #8]
3104:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4355              		.loc 1 3104 0
 4356 0012 BB68     		ldr	r3, [r7, #8]
 4357 0014 9B6C     		ldr	r3, [r3, #72]
 4358 0016 FB60     		str	r3, [r7, #12]
 4359 0018 01E0     		b	.L275
 4360              	.L274:
3105:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3106:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3107:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3108:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = 0U;
 4361              		.loc 1 3108 0
 4362 001a 0023     		movs	r3, #0
 4363 001c FB60     		str	r3, [r7, #12]
 4364              	.L275:
3109:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3110:../../../FreeRTOS_9_0/Source/tasks.c **** 
3111:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
 4365              		.loc 1 3111 0
 4366 001e FB68     		ldr	r3, [r7, #12]
3112:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
ARM GAS  /tmp/cc623FKg.s 			page 136


 4367              		.loc 1 3112 0
 4368 0020 1846     		mov	r0, r3
 4369 0022 1437     		adds	r7, r7, #20
 4370              	.LCFI159:
 4371              		.cfi_def_cfa_offset 4
 4372 0024 BD46     		mov	sp, r7
 4373              	.LCFI160:
 4374              		.cfi_def_cfa_register 13
 4375              		@ sp needed
 4376 0026 5DF8047B 		ldr	r7, [sp], #4
 4377              	.LCFI161:
 4378              		.cfi_restore 7
 4379              		.cfi_def_cfa_offset 0
 4380 002a 7047     		bx	lr
 4381              		.cfi_endproc
 4382              	.LFE36:
 4384              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4385              		.align	2
 4386              		.global	vTaskSetTaskNumber
 4387              		.thumb
 4388              		.thumb_func
 4390              	vTaskSetTaskNumber:
 4391              	.LFB37:
3113:../../../FreeRTOS_9_0/Source/tasks.c **** 
3114:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3115:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3116:../../../FreeRTOS_9_0/Source/tasks.c **** 
3117:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3118:../../../FreeRTOS_9_0/Source/tasks.c **** 
3119:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3120:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4392              		.loc 1 3120 0
 4393              		.cfi_startproc
 4394              		@ args = 0, pretend = 0, frame = 16
 4395              		@ frame_needed = 1, uses_anonymous_args = 0
 4396              		@ link register save eliminated.
 4397 0000 80B4     		push	{r7}
 4398              	.LCFI162:
 4399              		.cfi_def_cfa_offset 4
 4400              		.cfi_offset 7, -4
 4401 0002 85B0     		sub	sp, sp, #20
 4402              	.LCFI163:
 4403              		.cfi_def_cfa_offset 24
 4404 0004 00AF     		add	r7, sp, #0
 4405              	.LCFI164:
 4406              		.cfi_def_cfa_register 7
 4407 0006 7860     		str	r0, [r7, #4]
 4408 0008 3960     		str	r1, [r7]
3121:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3122:../../../FreeRTOS_9_0/Source/tasks.c **** 
3123:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask != NULL )
 4409              		.loc 1 3123 0
 4410 000a 7B68     		ldr	r3, [r7, #4]
 4411 000c 002B     		cmp	r3, #0
 4412 000e 04D0     		beq	.L277
3124:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3125:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
ARM GAS  /tmp/cc623FKg.s 			page 137


 4413              		.loc 1 3125 0
 4414 0010 7B68     		ldr	r3, [r7, #4]
 4415 0012 FB60     		str	r3, [r7, #12]
3126:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4416              		.loc 1 3126 0
 4417 0014 FB68     		ldr	r3, [r7, #12]
 4418 0016 3A68     		ldr	r2, [r7]
 4419 0018 9A64     		str	r2, [r3, #72]
 4420              	.L277:
3127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3128:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4421              		.loc 1 3128 0
 4422 001a 1437     		adds	r7, r7, #20
 4423              	.LCFI165:
 4424              		.cfi_def_cfa_offset 4
 4425 001c BD46     		mov	sp, r7
 4426              	.LCFI166:
 4427              		.cfi_def_cfa_register 13
 4428              		@ sp needed
 4429 001e 5DF8047B 		ldr	r7, [sp], #4
 4430              	.LCFI167:
 4431              		.cfi_restore 7
 4432              		.cfi_def_cfa_offset 0
 4433 0022 7047     		bx	lr
 4434              		.cfi_endproc
 4435              	.LFE37:
 4437              		.section	.text.prvIdleTask,"ax",%progbits
 4438              		.align	2
 4439              		.thumb
 4440              		.thumb_func
 4442              	prvIdleTask:
 4443              	.LFB38:
3129:../../../FreeRTOS_9_0/Source/tasks.c **** 
3130:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3131:../../../FreeRTOS_9_0/Source/tasks.c **** 
3132:../../../FreeRTOS_9_0/Source/tasks.c **** /*
3133:../../../FreeRTOS_9_0/Source/tasks.c ****  * -----------------------------------------------------------
3134:../../../FreeRTOS_9_0/Source/tasks.c ****  * The Idle task.
3135:../../../FreeRTOS_9_0/Source/tasks.c ****  * ----------------------------------------------------------
3136:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3137:../../../FreeRTOS_9_0/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3138:../../../FreeRTOS_9_0/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3139:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3140:../../../FreeRTOS_9_0/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3141:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3142:../../../FreeRTOS_9_0/Source/tasks.c ****  */
3143:../../../FreeRTOS_9_0/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3144:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4444              		.loc 1 3144 0
 4445              		.cfi_startproc
 4446              		@ args = 0, pretend = 0, frame = 8
 4447              		@ frame_needed = 1, uses_anonymous_args = 0
 4448 0000 80B5     		push	{r7, lr}
 4449              	.LCFI168:
 4450              		.cfi_def_cfa_offset 8
 4451              		.cfi_offset 7, -8
 4452              		.cfi_offset 14, -4
ARM GAS  /tmp/cc623FKg.s 			page 138


 4453 0002 82B0     		sub	sp, sp, #8
 4454              	.LCFI169:
 4455              		.cfi_def_cfa_offset 16
 4456 0004 00AF     		add	r7, sp, #0
 4457              	.LCFI170:
 4458              		.cfi_def_cfa_register 7
 4459 0006 7860     		str	r0, [r7, #4]
 4460              	.L281:
3145:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Stop warnings. */
3146:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) pvParameters;
3147:../../../FreeRTOS_9_0/Source/tasks.c **** 
3148:../../../FreeRTOS_9_0/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3149:../../../FreeRTOS_9_0/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3150:../../../FreeRTOS_9_0/Source/tasks.c **** 
3151:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( ;; )
3152:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3153:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3154:../../../FreeRTOS_9_0/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3155:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4461              		.loc 1 3155 0
 4462 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3156:../../../FreeRTOS_9_0/Source/tasks.c **** 
3157:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3158:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3159:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3160:../../../FreeRTOS_9_0/Source/tasks.c **** 			see if any other task has become available.  If we are using
3161:../../../FreeRTOS_9_0/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3162:../../../FreeRTOS_9_0/Source/tasks.c **** 			will automatically get the processor anyway. */
3163:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskYIELD();
3164:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3165:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3166:../../../FreeRTOS_9_0/Source/tasks.c **** 
3167:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3168:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3169:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3170:../../../FreeRTOS_9_0/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3171:../../../FreeRTOS_9_0/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3172:../../../FreeRTOS_9_0/Source/tasks.c **** 			timeslice.
3173:../../../FreeRTOS_9_0/Source/tasks.c **** 
3174:../../../FreeRTOS_9_0/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3175:../../../FreeRTOS_9_0/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3176:../../../FreeRTOS_9_0/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3177:../../../FreeRTOS_9_0/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3178:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4463              		.loc 1 3178 0
 4464 000c 074B     		ldr	r3, .L282
 4465 000e 1B68     		ldr	r3, [r3]
 4466 0010 012B     		cmp	r3, #1
 4467 0012 07D9     		bls	.L280
3179:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3180:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskYIELD();
 4468              		.loc 1 3180 0
 4469 0014 064B     		ldr	r3, .L282+4
 4470 0016 4FF08052 		mov	r2, #268435456
 4471 001a 1A60     		str	r2, [r3]
 4472              	@ 3180 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 4473 001c BFF34F8F 		dsb
ARM GAS  /tmp/cc623FKg.s 			page 139


 4474              	@ 0 "" 2
 4475              	@ 3180 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 4476 0020 BFF36F8F 		isb
 4477              	@ 0 "" 2
 4478              		.thumb
 4479              	.L280:
 4480              	.LBB161:
3181:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3182:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3183:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3184:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3185:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3186:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3187:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3188:../../../FreeRTOS_9_0/Source/tasks.c **** 
3189:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3190:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3191:../../../FreeRTOS_9_0/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3192:../../../FreeRTOS_9_0/Source/tasks.c **** 
3193:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3194:../../../FreeRTOS_9_0/Source/tasks.c **** 			allows the application designer to add background functionality
3195:../../../FreeRTOS_9_0/Source/tasks.c **** 			without the overhead of a separate task.
3196:../../../FreeRTOS_9_0/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3197:../../../FreeRTOS_9_0/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3198:../../../FreeRTOS_9_0/Source/tasks.c **** 			vApplicationIdleHook();
 4481              		.loc 1 3198 0
 4482 0024 FFF7FEFF 		bl	vApplicationIdleHook
 4483              	.LBE161:
3199:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3200:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3201:../../../FreeRTOS_9_0/Source/tasks.c **** 
3202:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3203:../../../FreeRTOS_9_0/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3204:../../../FreeRTOS_9_0/Source/tasks.c **** 		user defined low power mode	implementations require
3205:../../../FreeRTOS_9_0/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3206:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3207:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3208:../../../FreeRTOS_9_0/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3209:../../../FreeRTOS_9_0/Source/tasks.c **** 
3210:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3211:../../../FreeRTOS_9_0/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3212:../../../FreeRTOS_9_0/Source/tasks.c **** 			test of the expected idle time is performed without the
3213:../../../FreeRTOS_9_0/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3214:../../../FreeRTOS_9_0/Source/tasks.c **** 			valid. */
3215:../../../FreeRTOS_9_0/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3216:../../../FreeRTOS_9_0/Source/tasks.c **** 
3217:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3218:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3219:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskSuspendAll();
3220:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3221:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3222:../../../FreeRTOS_9_0/Source/tasks.c **** 					time can be sampled again, and this time its value can
3223:../../../FreeRTOS_9_0/Source/tasks.c **** 					be used. */
3224:../../../FreeRTOS_9_0/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3225:../../../FreeRTOS_9_0/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3226:../../../FreeRTOS_9_0/Source/tasks.c **** 
3227:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
ARM GAS  /tmp/cc623FKg.s 			page 140


3228:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3229:../../../FreeRTOS_9_0/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3230:../../../FreeRTOS_9_0/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3231:../../../FreeRTOS_9_0/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3232:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3233:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3234:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3235:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3236:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3237:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3238:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) xTaskResumeAll();
3239:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3240:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3241:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3242:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3243:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3244:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3245:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3246:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4484              		.loc 1 3246 0
 4485 0028 EEE7     		b	.L281
 4486              	.L283:
 4487 002a 00BF     		.align	2
 4488              	.L282:
 4489 002c 00000000 		.word	pxReadyTasksLists
 4490 0030 04ED00E0 		.word	-536810236
 4491              		.cfi_endproc
 4492              	.LFE38:
 4494              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 4495              		.align	2
 4496              		.global	vTaskSetThreadLocalStoragePointer
 4497              		.thumb
 4498              		.thumb_func
 4500              	vTaskSetThreadLocalStoragePointer:
 4501              	.LFB39:
3247:../../../FreeRTOS_9_0/Source/tasks.c **** }
3248:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3249:../../../FreeRTOS_9_0/Source/tasks.c **** 
3250:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3251:../../../FreeRTOS_9_0/Source/tasks.c **** 
3252:../../../FreeRTOS_9_0/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3253:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3254:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3255:../../../FreeRTOS_9_0/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3256:../../../FreeRTOS_9_0/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3257:../../../FreeRTOS_9_0/Source/tasks.c **** 
3258:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3259:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3260:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3261:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eAbortSleep;
3262:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3263:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3264:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3265:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3266:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eAbortSleep;
3267:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3268:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
ARM GAS  /tmp/cc623FKg.s 			page 141


3269:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3270:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3271:../../../FreeRTOS_9_0/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3272:../../../FreeRTOS_9_0/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3273:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupts. */
3274:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3275:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3276:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3277:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3278:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3279:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3280:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3281:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3282:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3283:../../../FreeRTOS_9_0/Source/tasks.c **** 
3284:../../../FreeRTOS_9_0/Source/tasks.c **** 		return eReturn;
3285:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3286:../../../FreeRTOS_9_0/Source/tasks.c **** 
3287:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3288:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3289:../../../FreeRTOS_9_0/Source/tasks.c **** 
3290:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3291:../../../FreeRTOS_9_0/Source/tasks.c **** 
3292:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3293:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4502              		.loc 1 3293 0
 4503              		.cfi_startproc
 4504              		@ args = 0, pretend = 0, frame = 24
 4505              		@ frame_needed = 1, uses_anonymous_args = 0
 4506              		@ link register save eliminated.
 4507 0000 80B4     		push	{r7}
 4508              	.LCFI171:
 4509              		.cfi_def_cfa_offset 4
 4510              		.cfi_offset 7, -4
 4511 0002 87B0     		sub	sp, sp, #28
 4512              	.LCFI172:
 4513              		.cfi_def_cfa_offset 32
 4514 0004 00AF     		add	r7, sp, #0
 4515              	.LCFI173:
 4516              		.cfi_def_cfa_register 7
 4517 0006 F860     		str	r0, [r7, #12]
 4518 0008 B960     		str	r1, [r7, #8]
 4519 000a 7A60     		str	r2, [r7, #4]
3294:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3295:../../../FreeRTOS_9_0/Source/tasks.c **** 
3296:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 4520              		.loc 1 3296 0
 4521 000c BB68     		ldr	r3, [r7, #8]
 4522 000e 022B     		cmp	r3, #2
 4523 0010 0EDC     		bgt	.L284
3297:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3298:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 4524              		.loc 1 3298 0
 4525 0012 FB68     		ldr	r3, [r7, #12]
 4526 0014 002B     		cmp	r3, #0
 4527 0016 02D1     		bne	.L286
 4528              		.loc 1 3298 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc623FKg.s 			page 142


 4529 0018 084B     		ldr	r3, .L288
 4530 001a 1B68     		ldr	r3, [r3]
 4531 001c 00E0     		b	.L287
 4532              	.L286:
 4533              		.loc 1 3298 0 discriminator 2
 4534 001e FB68     		ldr	r3, [r7, #12]
 4535              	.L287:
 4536              		.loc 1 3298 0 discriminator 4
 4537 0020 7B61     		str	r3, [r7, #20]
3299:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4538              		.loc 1 3299 0 is_stmt 1 discriminator 4
 4539 0022 7A69     		ldr	r2, [r7, #20]
 4540 0024 BB68     		ldr	r3, [r7, #8]
 4541 0026 1433     		adds	r3, r3, #20
 4542 0028 9B00     		lsls	r3, r3, #2
 4543 002a 1344     		add	r3, r3, r2
 4544 002c 7A68     		ldr	r2, [r7, #4]
 4545 002e 5A60     		str	r2, [r3, #4]
 4546              	.L284:
3300:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3301:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4547              		.loc 1 3301 0
 4548 0030 1C37     		adds	r7, r7, #28
 4549              	.LCFI174:
 4550              		.cfi_def_cfa_offset 4
 4551 0032 BD46     		mov	sp, r7
 4552              	.LCFI175:
 4553              		.cfi_def_cfa_register 13
 4554              		@ sp needed
 4555 0034 5DF8047B 		ldr	r7, [sp], #4
 4556              	.LCFI176:
 4557              		.cfi_restore 7
 4558              		.cfi_def_cfa_offset 0
 4559 0038 7047     		bx	lr
 4560              	.L289:
 4561 003a 00BF     		.align	2
 4562              	.L288:
 4563 003c 00000000 		.word	pxCurrentTCB
 4564              		.cfi_endproc
 4565              	.LFE39:
 4567              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 4568              		.align	2
 4569              		.global	pvTaskGetThreadLocalStoragePointer
 4570              		.thumb
 4571              		.thumb_func
 4573              	pvTaskGetThreadLocalStoragePointer:
 4574              	.LFB40:
3302:../../../FreeRTOS_9_0/Source/tasks.c **** 
3303:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3304:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3305:../../../FreeRTOS_9_0/Source/tasks.c **** 
3306:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3307:../../../FreeRTOS_9_0/Source/tasks.c **** 
3308:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3309:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4575              		.loc 1 3309 0
 4576              		.cfi_startproc
ARM GAS  /tmp/cc623FKg.s 			page 143


 4577              		@ args = 0, pretend = 0, frame = 16
 4578              		@ frame_needed = 1, uses_anonymous_args = 0
 4579              		@ link register save eliminated.
 4580 0000 80B4     		push	{r7}
 4581              	.LCFI177:
 4582              		.cfi_def_cfa_offset 4
 4583              		.cfi_offset 7, -4
 4584 0002 85B0     		sub	sp, sp, #20
 4585              	.LCFI178:
 4586              		.cfi_def_cfa_offset 24
 4587 0004 00AF     		add	r7, sp, #0
 4588              	.LCFI179:
 4589              		.cfi_def_cfa_register 7
 4590 0006 7860     		str	r0, [r7, #4]
 4591 0008 3960     		str	r1, [r7]
3310:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvReturn = NULL;
 4592              		.loc 1 3310 0
 4593 000a 0023     		movs	r3, #0
 4594 000c FB60     		str	r3, [r7, #12]
3311:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3312:../../../FreeRTOS_9_0/Source/tasks.c **** 
3313:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 4595              		.loc 1 3313 0
 4596 000e 3B68     		ldr	r3, [r7]
 4597 0010 022B     		cmp	r3, #2
 4598 0012 0FDC     		bgt	.L291
3314:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3315:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 4599              		.loc 1 3315 0
 4600 0014 7B68     		ldr	r3, [r7, #4]
 4601 0016 002B     		cmp	r3, #0
 4602 0018 02D1     		bne	.L292
 4603              		.loc 1 3315 0 is_stmt 0 discriminator 1
 4604 001a 0B4B     		ldr	r3, .L296
 4605 001c 1B68     		ldr	r3, [r3]
 4606 001e 00E0     		b	.L293
 4607              	.L292:
 4608              		.loc 1 3315 0 discriminator 2
 4609 0020 7B68     		ldr	r3, [r7, #4]
 4610              	.L293:
 4611              		.loc 1 3315 0 discriminator 4
 4612 0022 BB60     		str	r3, [r7, #8]
3316:../../../FreeRTOS_9_0/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 4613              		.loc 1 3316 0 is_stmt 1 discriminator 4
 4614 0024 BA68     		ldr	r2, [r7, #8]
 4615 0026 3B68     		ldr	r3, [r7]
 4616 0028 1433     		adds	r3, r3, #20
 4617 002a 9B00     		lsls	r3, r3, #2
 4618 002c 1344     		add	r3, r3, r2
 4619 002e 5B68     		ldr	r3, [r3, #4]
 4620 0030 FB60     		str	r3, [r7, #12]
 4621 0032 01E0     		b	.L294
 4622              	.L291:
3317:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3318:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3319:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3320:../../../FreeRTOS_9_0/Source/tasks.c **** 			pvReturn = NULL;
ARM GAS  /tmp/cc623FKg.s 			page 144


 4623              		.loc 1 3320 0
 4624 0034 0023     		movs	r3, #0
 4625 0036 FB60     		str	r3, [r7, #12]
 4626              	.L294:
3321:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3322:../../../FreeRTOS_9_0/Source/tasks.c **** 
3323:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pvReturn;
 4627              		.loc 1 3323 0
 4628 0038 FB68     		ldr	r3, [r7, #12]
3324:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4629              		.loc 1 3324 0
 4630 003a 1846     		mov	r0, r3
 4631 003c 1437     		adds	r7, r7, #20
 4632              	.LCFI180:
 4633              		.cfi_def_cfa_offset 4
 4634 003e BD46     		mov	sp, r7
 4635              	.LCFI181:
 4636              		.cfi_def_cfa_register 13
 4637              		@ sp needed
 4638 0040 5DF8047B 		ldr	r7, [sp], #4
 4639              	.LCFI182:
 4640              		.cfi_restore 7
 4641              		.cfi_def_cfa_offset 0
 4642 0044 7047     		bx	lr
 4643              	.L297:
 4644 0046 00BF     		.align	2
 4645              	.L296:
 4646 0048 00000000 		.word	pxCurrentTCB
 4647              		.cfi_endproc
 4648              	.LFE40:
 4650              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4651              		.align	2
 4652              		.thumb
 4653              		.thumb_func
 4655              	prvInitialiseTaskLists:
 4656              	.LFB41:
3325:../../../FreeRTOS_9_0/Source/tasks.c **** 
3326:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3327:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3328:../../../FreeRTOS_9_0/Source/tasks.c **** 
3329:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3330:../../../FreeRTOS_9_0/Source/tasks.c **** 
3331:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3332:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3333:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3334:../../../FreeRTOS_9_0/Source/tasks.c **** 
3335:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3336:../../../FreeRTOS_9_0/Source/tasks.c **** 		the calling task. */
3337:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3338:../../../FreeRTOS_9_0/Source/tasks.c **** 
3339:../../../FreeRTOS_9_0/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3340:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3341:../../../FreeRTOS_9_0/Source/tasks.c **** 
3342:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3343:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3344:../../../FreeRTOS_9_0/Source/tasks.c **** 
3345:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseTaskLists( void )
ARM GAS  /tmp/cc623FKg.s 			page 145


3346:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4657              		.loc 1 3346 0
 4658              		.cfi_startproc
 4659              		@ args = 0, pretend = 0, frame = 8
 4660              		@ frame_needed = 1, uses_anonymous_args = 0
 4661 0000 80B5     		push	{r7, lr}
 4662              	.LCFI183:
 4663              		.cfi_def_cfa_offset 8
 4664              		.cfi_offset 7, -8
 4665              		.cfi_offset 14, -4
 4666 0002 82B0     		sub	sp, sp, #8
 4667              	.LCFI184:
 4668              		.cfi_def_cfa_offset 16
 4669 0004 00AF     		add	r7, sp, #0
 4670              	.LCFI185:
 4671              		.cfi_def_cfa_register 7
3347:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxPriority;
3348:../../../FreeRTOS_9_0/Source/tasks.c **** 
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4672              		.loc 1 3349 0
 4673 0006 0023     		movs	r3, #0
 4674 0008 7B60     		str	r3, [r7, #4]
 4675 000a 0CE0     		b	.L299
 4676              	.L300:
3350:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3351:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4677              		.loc 1 3351 0 discriminator 3
 4678 000c 7A68     		ldr	r2, [r7, #4]
 4679 000e 1346     		mov	r3, r2
 4680 0010 9B00     		lsls	r3, r3, #2
 4681 0012 1344     		add	r3, r3, r2
 4682 0014 9B00     		lsls	r3, r3, #2
 4683 0016 114A     		ldr	r2, .L301
 4684 0018 1344     		add	r3, r3, r2
 4685 001a 1846     		mov	r0, r3
 4686 001c FFF7FEFF 		bl	vListInitialise
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4687              		.loc 1 3349 0 discriminator 3
 4688 0020 7B68     		ldr	r3, [r7, #4]
 4689 0022 0133     		adds	r3, r3, #1
 4690 0024 7B60     		str	r3, [r7, #4]
 4691              	.L299:
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4692              		.loc 1 3349 0 is_stmt 0 discriminator 1
 4693 0026 7B68     		ldr	r3, [r7, #4]
 4694 0028 062B     		cmp	r3, #6
 4695 002a EFD9     		bls	.L300
3352:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3353:../../../FreeRTOS_9_0/Source/tasks.c **** 
3354:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4696              		.loc 1 3354 0 is_stmt 1
 4697 002c 0C48     		ldr	r0, .L301+4
 4698 002e FFF7FEFF 		bl	vListInitialise
3355:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4699              		.loc 1 3355 0
 4700 0032 0C48     		ldr	r0, .L301+8
 4701 0034 FFF7FEFF 		bl	vListInitialise
ARM GAS  /tmp/cc623FKg.s 			page 146


3356:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4702              		.loc 1 3356 0
 4703 0038 0B48     		ldr	r0, .L301+12
 4704 003a FFF7FEFF 		bl	vListInitialise
3357:../../../FreeRTOS_9_0/Source/tasks.c **** 
3358:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3359:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3360:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4705              		.loc 1 3360 0
 4706 003e 0B48     		ldr	r0, .L301+16
 4707 0040 FFF7FEFF 		bl	vListInitialise
3361:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3362:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3363:../../../FreeRTOS_9_0/Source/tasks.c **** 
3364:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3365:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3366:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4708              		.loc 1 3366 0
 4709 0044 0A48     		ldr	r0, .L301+20
 4710 0046 FFF7FEFF 		bl	vListInitialise
3367:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3368:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3369:../../../FreeRTOS_9_0/Source/tasks.c **** 
3370:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3371:../../../FreeRTOS_9_0/Source/tasks.c **** 	using list2. */
3372:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4711              		.loc 1 3372 0
 4712 004a 0A4B     		ldr	r3, .L301+24
 4713 004c 044A     		ldr	r2, .L301+4
 4714 004e 1A60     		str	r2, [r3]
3373:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4715              		.loc 1 3373 0
 4716 0050 094B     		ldr	r3, .L301+28
 4717 0052 044A     		ldr	r2, .L301+8
 4718 0054 1A60     		str	r2, [r3]
3374:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4719              		.loc 1 3374 0
 4720 0056 0837     		adds	r7, r7, #8
 4721              	.LCFI186:
 4722              		.cfi_def_cfa_offset 8
 4723 0058 BD46     		mov	sp, r7
 4724              	.LCFI187:
 4725              		.cfi_def_cfa_register 13
 4726              		@ sp needed
 4727 005a 80BD     		pop	{r7, pc}
 4728              	.L302:
 4729              		.align	2
 4730              	.L301:
 4731 005c 00000000 		.word	pxReadyTasksLists
 4732 0060 00000000 		.word	xDelayedTaskList1
 4733 0064 00000000 		.word	xDelayedTaskList2
 4734 0068 00000000 		.word	xPendingReadyList
 4735 006c 00000000 		.word	xTasksWaitingTermination
 4736 0070 00000000 		.word	xSuspendedTaskList
 4737 0074 00000000 		.word	pxDelayedTaskList
 4738 0078 00000000 		.word	pxOverflowDelayedTaskList
 4739              		.cfi_endproc
ARM GAS  /tmp/cc623FKg.s 			page 147


 4740              	.LFE41:
 4742              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4743              		.align	2
 4744              		.thumb
 4745              		.thumb_func
 4747              	prvCheckTasksWaitingTermination:
 4748              	.LFB42:
3375:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3376:../../../FreeRTOS_9_0/Source/tasks.c **** 
3377:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3378:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4749              		.loc 1 3378 0
 4750              		.cfi_startproc
 4751              		@ args = 0, pretend = 0, frame = 8
 4752              		@ frame_needed = 1, uses_anonymous_args = 0
 4753 0000 80B5     		push	{r7, lr}
 4754              	.LCFI188:
 4755              		.cfi_def_cfa_offset 8
 4756              		.cfi_offset 7, -8
 4757              		.cfi_offset 14, -4
 4758 0002 82B0     		sub	sp, sp, #8
 4759              	.LCFI189:
 4760              		.cfi_def_cfa_offset 16
 4761 0004 00AF     		add	r7, sp, #0
 4762              	.LCFI190:
 4763              		.cfi_def_cfa_register 7
 4764              	.LBB162:
3379:../../../FreeRTOS_9_0/Source/tasks.c **** 
3380:../../../FreeRTOS_9_0/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3381:../../../FreeRTOS_9_0/Source/tasks.c **** 
3382:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3383:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3384:../../../FreeRTOS_9_0/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3385:../../../FreeRTOS_9_0/Source/tasks.c **** 
3386:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3387:../../../FreeRTOS_9_0/Source/tasks.c **** 		too often in the idle task. */
3388:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4765              		.loc 1 3388 0
 4766 0006 28E0     		b	.L304
 4767              	.L305:
3389:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3390:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSuspendAll();
 4768              		.loc 1 3390 0
 4769 0008 FFF7FEFF 		bl	vTaskSuspendAll
3391:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3392:../../../FreeRTOS_9_0/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4770              		.loc 1 3392 0
 4771 000c 164B     		ldr	r3, .L306
 4772 000e 1B68     		ldr	r3, [r3]
 4773 0010 002B     		cmp	r3, #0
 4774 0012 0CBF     		ite	eq
 4775 0014 0123     		moveq	r3, #1
 4776 0016 0023     		movne	r3, #0
 4777 0018 DBB2     		uxtb	r3, r3
 4778 001a 7B60     		str	r3, [r7, #4]
3393:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3394:../../../FreeRTOS_9_0/Source/tasks.c **** 			( void ) xTaskResumeAll();
ARM GAS  /tmp/cc623FKg.s 			page 148


 4779              		.loc 1 3394 0
 4780 001c FFF7FEFF 		bl	xTaskResumeAll
3395:../../../FreeRTOS_9_0/Source/tasks.c **** 
3396:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4781              		.loc 1 3396 0
 4782 0020 7B68     		ldr	r3, [r7, #4]
 4783 0022 002B     		cmp	r3, #0
 4784 0024 19D1     		bne	.L304
 4785              	.LBB163:
3397:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3398:../../../FreeRTOS_9_0/Source/tasks.c **** 				TCB_t *pxTCB;
3399:../../../FreeRTOS_9_0/Source/tasks.c **** 
3400:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskENTER_CRITICAL();
 4786              		.loc 1 3400 0
 4787 0026 FFF7FEFF 		bl	vPortEnterCritical
3401:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3402:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4788              		.loc 1 3402 0
 4789 002a 0F4B     		ldr	r3, .L306
 4790 002c DB68     		ldr	r3, [r3, #12]
 4791 002e DB68     		ldr	r3, [r3, #12]
 4792 0030 3B60     		str	r3, [r7]
3403:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4793              		.loc 1 3403 0
 4794 0032 3B68     		ldr	r3, [r7]
 4795 0034 0433     		adds	r3, r3, #4
 4796 0036 1846     		mov	r0, r3
 4797 0038 FFF7FEFF 		bl	uxListRemove
3404:../../../FreeRTOS_9_0/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4798              		.loc 1 3404 0
 4799 003c 0B4B     		ldr	r3, .L306+4
 4800 003e 1B68     		ldr	r3, [r3]
 4801 0040 013B     		subs	r3, r3, #1
 4802 0042 0A4A     		ldr	r2, .L306+4
 4803 0044 1360     		str	r3, [r2]
3405:../../../FreeRTOS_9_0/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4804              		.loc 1 3405 0
 4805 0046 0A4B     		ldr	r3, .L306+8
 4806 0048 1B68     		ldr	r3, [r3]
 4807 004a 013B     		subs	r3, r3, #1
 4808 004c 084A     		ldr	r2, .L306+8
 4809 004e 1360     		str	r3, [r2]
3406:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3407:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4810              		.loc 1 3407 0
 4811 0050 FFF7FEFF 		bl	vPortExitCritical
3408:../../../FreeRTOS_9_0/Source/tasks.c **** 
3409:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4812              		.loc 1 3409 0
 4813 0054 3868     		ldr	r0, [r7]
 4814 0056 FFF7FEFF 		bl	prvDeleteTCB
 4815              	.L304:
 4816              	.LBE163:
3388:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 4817              		.loc 1 3388 0
 4818 005a 054B     		ldr	r3, .L306+8
 4819 005c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc623FKg.s 			page 149


 4820 005e 002B     		cmp	r3, #0
 4821 0060 D2D1     		bne	.L305
 4822              	.LBE162:
3410:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3411:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3412:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3413:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3414:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3415:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3416:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3417:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3418:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4823              		.loc 1 3418 0
 4824 0062 0837     		adds	r7, r7, #8
 4825              	.LCFI191:
 4826              		.cfi_def_cfa_offset 8
 4827 0064 BD46     		mov	sp, r7
 4828              	.LCFI192:
 4829              		.cfi_def_cfa_register 13
 4830              		@ sp needed
 4831 0066 80BD     		pop	{r7, pc}
 4832              	.L307:
 4833              		.align	2
 4834              	.L306:
 4835 0068 00000000 		.word	xTasksWaitingTermination
 4836 006c 00000000 		.word	uxCurrentNumberOfTasks
 4837 0070 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4838              		.cfi_endproc
 4839              	.LFE42:
 4841              		.section	.text.vTaskGetInfo,"ax",%progbits
 4842              		.align	2
 4843              		.global	vTaskGetInfo
 4844              		.thumb
 4845              		.thumb_func
 4847              	vTaskGetInfo:
 4848              	.LFB43:
3419:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3420:../../../FreeRTOS_9_0/Source/tasks.c **** 
3421:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3422:../../../FreeRTOS_9_0/Source/tasks.c **** 
3423:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3424:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4849              		.loc 1 3424 0
 4850              		.cfi_startproc
 4851              		@ args = 0, pretend = 0, frame = 24
 4852              		@ frame_needed = 1, uses_anonymous_args = 0
 4853 0000 80B5     		push	{r7, lr}
 4854              	.LCFI193:
 4855              		.cfi_def_cfa_offset 8
 4856              		.cfi_offset 7, -8
 4857              		.cfi_offset 14, -4
 4858 0002 86B0     		sub	sp, sp, #24
 4859              	.LCFI194:
 4860              		.cfi_def_cfa_offset 32
 4861 0004 00AF     		add	r7, sp, #0
 4862              	.LCFI195:
 4863              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc623FKg.s 			page 150


 4864 0006 F860     		str	r0, [r7, #12]
 4865 0008 B960     		str	r1, [r7, #8]
 4866 000a 7A60     		str	r2, [r7, #4]
 4867 000c FB70     		strb	r3, [r7, #3]
3425:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3426:../../../FreeRTOS_9_0/Source/tasks.c **** 
3427:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3428:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4868              		.loc 1 3428 0
 4869 000e FB68     		ldr	r3, [r7, #12]
 4870 0010 002B     		cmp	r3, #0
 4871 0012 02D1     		bne	.L309
 4872              		.loc 1 3428 0 is_stmt 0 discriminator 1
 4873 0014 284B     		ldr	r3, .L317
 4874 0016 1B68     		ldr	r3, [r3]
 4875 0018 00E0     		b	.L310
 4876              	.L309:
 4877              		.loc 1 3428 0 discriminator 2
 4878 001a FB68     		ldr	r3, [r7, #12]
 4879              	.L310:
 4880              		.loc 1 3428 0 discriminator 4
 4881 001c 7B61     		str	r3, [r7, #20]
3429:../../../FreeRTOS_9_0/Source/tasks.c **** 
3430:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 4882              		.loc 1 3430 0 is_stmt 1 discriminator 4
 4883 001e BB68     		ldr	r3, [r7, #8]
 4884 0020 7A69     		ldr	r2, [r7, #20]
 4885 0022 1A60     		str	r2, [r3]
3431:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4886              		.loc 1 3431 0 discriminator 4
 4887 0024 7B69     		ldr	r3, [r7, #20]
 4888 0026 03F13402 		add	r2, r3, #52
 4889 002a BB68     		ldr	r3, [r7, #8]
 4890 002c 5A60     		str	r2, [r3, #4]
3432:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4891              		.loc 1 3432 0 discriminator 4
 4892 002e 7B69     		ldr	r3, [r7, #20]
 4893 0030 DA6A     		ldr	r2, [r3, #44]
 4894 0032 BB68     		ldr	r3, [r7, #8]
 4895 0034 1A61     		str	r2, [r3, #16]
3433:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4896              		.loc 1 3433 0 discriminator 4
 4897 0036 7B69     		ldr	r3, [r7, #20]
 4898 0038 1A6B     		ldr	r2, [r3, #48]
 4899 003a BB68     		ldr	r3, [r7, #8]
 4900 003c DA61     		str	r2, [r3, #28]
3434:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4901              		.loc 1 3434 0 discriminator 4
 4902 003e 7B69     		ldr	r3, [r7, #20]
 4903 0040 5A6C     		ldr	r2, [r3, #68]
 4904 0042 BB68     		ldr	r3, [r7, #8]
 4905 0044 9A60     		str	r2, [r3, #8]
3435:../../../FreeRTOS_9_0/Source/tasks.c **** 
3436:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3437:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3438:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3439:../../../FreeRTOS_9_0/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
ARM GAS  /tmp/cc623FKg.s 			page 151


3440:../../../FreeRTOS_9_0/Source/tasks.c **** 			being in the Blocked state. */
3441:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
 4906              		.loc 1 3441 0 discriminator 4
 4907 0046 BB68     		ldr	r3, [r7, #8]
 4908 0048 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4909 004a 032B     		cmp	r3, #3
 4910 004c 0AD1     		bne	.L311
3442:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3443:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskSuspendAll();
 4911              		.loc 1 3443 0
 4912 004e FFF7FEFF 		bl	vTaskSuspendAll
3444:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3445:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 4913              		.loc 1 3445 0
 4914 0052 7B69     		ldr	r3, [r7, #20]
 4915 0054 9B6A     		ldr	r3, [r3, #40]
 4916 0056 002B     		cmp	r3, #0
 4917 0058 02D0     		beq	.L312
3446:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3447:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
 4918              		.loc 1 3447 0
 4919 005a BB68     		ldr	r3, [r7, #8]
 4920 005c 0222     		movs	r2, #2
 4921 005e 1A73     		strb	r2, [r3, #12]
 4922              	.L312:
3448:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3449:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3450:../../../FreeRTOS_9_0/Source/tasks.c **** 				xTaskResumeAll();
 4923              		.loc 1 3450 0
 4924 0060 FFF7FEFF 		bl	xTaskResumeAll
 4925              	.L311:
3451:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3452:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3453:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3454:../../../FreeRTOS_9_0/Source/tasks.c **** 
3455:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3456:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3457:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 4926              		.loc 1 3457 0
 4927 0064 7B69     		ldr	r3, [r7, #20]
 4928 0066 DA6C     		ldr	r2, [r3, #76]
 4929 0068 BB68     		ldr	r3, [r7, #8]
 4930 006a 5A61     		str	r2, [r3, #20]
3458:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3459:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3460:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3461:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3462:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3463:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3464:../../../FreeRTOS_9_0/Source/tasks.c **** 
3465:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3466:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3467:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 4931              		.loc 1 3467 0
 4932 006c 7B69     		ldr	r3, [r7, #20]
 4933 006e 1A6E     		ldr	r2, [r3, #96]
 4934 0070 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cc623FKg.s 			page 152


 4935 0072 9A61     		str	r2, [r3, #24]
3468:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3469:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3470:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3471:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3472:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3473:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3474:../../../FreeRTOS_9_0/Source/tasks.c **** 
3475:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3476:../../../FreeRTOS_9_0/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3477:../../../FreeRTOS_9_0/Source/tasks.c **** 		just set to whatever is passed in. */
3478:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( eState != eInvalid )
 4936              		.loc 1 3478 0
 4937 0074 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4938 0076 052B     		cmp	r3, #5
 4939 0078 03D0     		beq	.L313
3479:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3480:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
 4940              		.loc 1 3480 0
 4941 007a BB68     		ldr	r3, [r7, #8]
 4942 007c FA78     		ldrb	r2, [r7, #3]
 4943 007e 1A73     		strb	r2, [r3, #12]
 4944 0080 06E0     		b	.L314
 4945              	.L313:
3481:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3482:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3483:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3484:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 4946              		.loc 1 3484 0
 4947 0082 F868     		ldr	r0, [r7, #12]
 4948 0084 FFF7FEFF 		bl	eTaskGetState
 4949 0088 0346     		mov	r3, r0
 4950 008a 1A46     		mov	r2, r3
 4951 008c BB68     		ldr	r3, [r7, #8]
 4952 008e 1A73     		strb	r2, [r3, #12]
 4953              	.L314:
3485:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3486:../../../FreeRTOS_9_0/Source/tasks.c **** 
3487:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3488:../../../FreeRTOS_9_0/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3489:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 4954              		.loc 1 3489 0
 4955 0090 7B68     		ldr	r3, [r7, #4]
 4956 0092 002B     		cmp	r3, #0
 4957 0094 09D0     		beq	.L315
3490:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3491:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3492:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3493:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3494:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3495:../../../FreeRTOS_9_0/Source/tasks.c **** 			#else
3496:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3497:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 4958              		.loc 1 3497 0
 4959 0096 7B69     		ldr	r3, [r7, #20]
 4960 0098 1B6B     		ldr	r3, [r3, #48]
 4961 009a 1846     		mov	r0, r3
ARM GAS  /tmp/cc623FKg.s 			page 153


 4962 009c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4963 00a0 0346     		mov	r3, r0
 4964 00a2 1A46     		mov	r2, r3
 4965 00a4 BB68     		ldr	r3, [r7, #8]
 4966 00a6 1A84     		strh	r2, [r3, #32]	@ movhi
 4967 00a8 02E0     		b	.L308
 4968              	.L315:
3498:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3499:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
3500:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3501:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3502:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3503:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
 4969              		.loc 1 3503 0
 4970 00aa BB68     		ldr	r3, [r7, #8]
 4971 00ac 0022     		movs	r2, #0
 4972 00ae 1A84     		strh	r2, [r3, #32]	@ movhi
 4973              	.L308:
3504:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3505:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4974              		.loc 1 3505 0
 4975 00b0 1837     		adds	r7, r7, #24
 4976              	.LCFI196:
 4977              		.cfi_def_cfa_offset 8
 4978 00b2 BD46     		mov	sp, r7
 4979              	.LCFI197:
 4980              		.cfi_def_cfa_register 13
 4981              		@ sp needed
 4982 00b4 80BD     		pop	{r7, pc}
 4983              	.L318:
 4984 00b6 00BF     		.align	2
 4985              	.L317:
 4986 00b8 00000000 		.word	pxCurrentTCB
 4987              		.cfi_endproc
 4988              	.LFE43:
 4990              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4991              		.align	2
 4992              		.thumb
 4993              		.thumb_func
 4995              	prvListTasksWithinSingleList:
 4996              	.LFB44:
3506:../../../FreeRTOS_9_0/Source/tasks.c **** 
3507:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3508:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3509:../../../FreeRTOS_9_0/Source/tasks.c **** 
3510:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3511:../../../FreeRTOS_9_0/Source/tasks.c **** 
3512:../../../FreeRTOS_9_0/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3513:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4997              		.loc 1 3513 0
 4998              		.cfi_startproc
 4999              		@ args = 0, pretend = 0, frame = 40
 5000              		@ frame_needed = 1, uses_anonymous_args = 0
 5001 0000 80B5     		push	{r7, lr}
 5002              	.LCFI198:
 5003              		.cfi_def_cfa_offset 8
 5004              		.cfi_offset 7, -8
ARM GAS  /tmp/cc623FKg.s 			page 154


 5005              		.cfi_offset 14, -4
 5006 0002 8AB0     		sub	sp, sp, #40
 5007              	.LCFI199:
 5008              		.cfi_def_cfa_offset 48
 5009 0004 00AF     		add	r7, sp, #0
 5010              	.LCFI200:
 5011              		.cfi_def_cfa_register 7
 5012 0006 F860     		str	r0, [r7, #12]
 5013 0008 B960     		str	r1, [r7, #8]
 5014 000a 1346     		mov	r3, r2
 5015 000c FB71     		strb	r3, [r7, #7]
3514:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3515:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5016              		.loc 1 3515 0
 5017 000e 0023     		movs	r3, #0
 5018 0010 7B62     		str	r3, [r7, #36]
3516:../../../FreeRTOS_9_0/Source/tasks.c **** 
3517:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5019              		.loc 1 3517 0
 5020 0012 BB68     		ldr	r3, [r7, #8]
 5021 0014 1B68     		ldr	r3, [r3]
 5022 0016 002B     		cmp	r3, #0
 5023 0018 40D0     		beq	.L320
 5024              	.LBB164:
3518:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3519:../../../FreeRTOS_9_0/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 5025              		.loc 1 3519 0
 5026 001a BB68     		ldr	r3, [r7, #8]
 5027 001c 3B62     		str	r3, [r7, #32]
 5028 001e 3B6A     		ldr	r3, [r7, #32]
 5029 0020 5B68     		ldr	r3, [r3, #4]
 5030 0022 5A68     		ldr	r2, [r3, #4]
 5031 0024 3B6A     		ldr	r3, [r7, #32]
 5032 0026 5A60     		str	r2, [r3, #4]
 5033 0028 3B6A     		ldr	r3, [r7, #32]
 5034 002a 5A68     		ldr	r2, [r3, #4]
 5035 002c 3B6A     		ldr	r3, [r7, #32]
 5036 002e 0833     		adds	r3, r3, #8
 5037 0030 9A42     		cmp	r2, r3
 5038 0032 04D1     		bne	.L321
 5039              		.loc 1 3519 0 is_stmt 0 discriminator 1
 5040 0034 3B6A     		ldr	r3, [r7, #32]
 5041 0036 5B68     		ldr	r3, [r3, #4]
 5042 0038 5A68     		ldr	r2, [r3, #4]
 5043 003a 3B6A     		ldr	r3, [r7, #32]
 5044 003c 5A60     		str	r2, [r3, #4]
 5045              	.L321:
 5046              		.loc 1 3519 0 discriminator 3
 5047 003e 3B6A     		ldr	r3, [r7, #32]
 5048 0040 5B68     		ldr	r3, [r3, #4]
 5049 0042 DB68     		ldr	r3, [r3, #12]
 5050 0044 FB61     		str	r3, [r7, #28]
 5051              	.L323:
 5052              	.LBE164:
 5053              	.LBB165:
3520:../../../FreeRTOS_9_0/Source/tasks.c **** 
3521:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
ARM GAS  /tmp/cc623FKg.s 			page 155


3522:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3523:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3524:../../../FreeRTOS_9_0/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3525:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
3526:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3527:../../../FreeRTOS_9_0/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 5054              		.loc 1 3527 0 is_stmt 1
 5055 0046 BB68     		ldr	r3, [r7, #8]
 5056 0048 BB61     		str	r3, [r7, #24]
 5057 004a BB69     		ldr	r3, [r7, #24]
 5058 004c 5B68     		ldr	r3, [r3, #4]
 5059 004e 5A68     		ldr	r2, [r3, #4]
 5060 0050 BB69     		ldr	r3, [r7, #24]
 5061 0052 5A60     		str	r2, [r3, #4]
 5062 0054 BB69     		ldr	r3, [r7, #24]
 5063 0056 5A68     		ldr	r2, [r3, #4]
 5064 0058 BB69     		ldr	r3, [r7, #24]
 5065 005a 0833     		adds	r3, r3, #8
 5066 005c 9A42     		cmp	r2, r3
 5067 005e 04D1     		bne	.L322
 5068              		.loc 1 3527 0 is_stmt 0 discriminator 1
 5069 0060 BB69     		ldr	r3, [r7, #24]
 5070 0062 5B68     		ldr	r3, [r3, #4]
 5071 0064 5A68     		ldr	r2, [r3, #4]
 5072 0066 BB69     		ldr	r3, [r7, #24]
 5073 0068 5A60     		str	r2, [r3, #4]
 5074              	.L322:
 5075              		.loc 1 3527 0 discriminator 3
 5076 006a BB69     		ldr	r3, [r7, #24]
 5077 006c 5B68     		ldr	r3, [r3, #4]
 5078 006e DB68     		ldr	r3, [r3, #12]
 5079 0070 7B61     		str	r3, [r7, #20]
 5080              	.LBE165:
3528:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5081              		.loc 1 3528 0 is_stmt 1 discriminator 3
 5082 0072 7A6A     		ldr	r2, [r7, #36]
 5083 0074 1346     		mov	r3, r2
 5084 0076 DB00     		lsls	r3, r3, #3
 5085 0078 1344     		add	r3, r3, r2
 5086 007a 9B00     		lsls	r3, r3, #2
 5087 007c 1A46     		mov	r2, r3
 5088 007e FB68     		ldr	r3, [r7, #12]
 5089 0080 1A44     		add	r2, r2, r3
 5090 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5091 0084 7869     		ldr	r0, [r7, #20]
 5092 0086 1146     		mov	r1, r2
 5093 0088 0122     		movs	r2, #1
 5094 008a FFF7FEFF 		bl	vTaskGetInfo
3529:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask++;
 5095              		.loc 1 3529 0 discriminator 3
 5096 008e 7B6A     		ldr	r3, [r7, #36]
 5097 0090 0133     		adds	r3, r3, #1
 5098 0092 7B62     		str	r3, [r7, #36]
3530:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5099              		.loc 1 3530 0 discriminator 3
 5100 0094 7A69     		ldr	r2, [r7, #20]
 5101 0096 FB69     		ldr	r3, [r7, #28]
ARM GAS  /tmp/cc623FKg.s 			page 156


 5102 0098 9A42     		cmp	r2, r3
 5103 009a D4D1     		bne	.L323
 5104              	.L320:
3531:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3532:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3533:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3534:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3535:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3536:../../../FreeRTOS_9_0/Source/tasks.c **** 
3537:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxTask;
 5105              		.loc 1 3537 0
 5106 009c 7B6A     		ldr	r3, [r7, #36]
3538:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5107              		.loc 1 3538 0
 5108 009e 1846     		mov	r0, r3
 5109 00a0 2837     		adds	r7, r7, #40
 5110              	.LCFI201:
 5111              		.cfi_def_cfa_offset 8
 5112 00a2 BD46     		mov	sp, r7
 5113              	.LCFI202:
 5114              		.cfi_def_cfa_register 13
 5115              		@ sp needed
 5116 00a4 80BD     		pop	{r7, pc}
 5117              		.cfi_endproc
 5118              	.LFE44:
 5120 00a6 00BF     		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5121              		.align	2
 5122              		.thumb
 5123              		.thumb_func
 5125              	prvTaskCheckFreeStackSpace:
 5126              	.LFB45:
3539:../../../FreeRTOS_9_0/Source/tasks.c **** 
3540:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3541:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3542:../../../FreeRTOS_9_0/Source/tasks.c **** 
3543:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3544:../../../FreeRTOS_9_0/Source/tasks.c **** 
3545:../../../FreeRTOS_9_0/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3546:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5127              		.loc 1 3546 0
 5128              		.cfi_startproc
 5129              		@ args = 0, pretend = 0, frame = 16
 5130              		@ frame_needed = 1, uses_anonymous_args = 0
 5131              		@ link register save eliminated.
 5132 0000 80B4     		push	{r7}
 5133              	.LCFI203:
 5134              		.cfi_def_cfa_offset 4
 5135              		.cfi_offset 7, -4
 5136 0002 85B0     		sub	sp, sp, #20
 5137              	.LCFI204:
 5138              		.cfi_def_cfa_offset 24
 5139 0004 00AF     		add	r7, sp, #0
 5140              	.LCFI205:
 5141              		.cfi_def_cfa_register 7
 5142 0006 7860     		str	r0, [r7, #4]
3547:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5143              		.loc 1 3547 0
ARM GAS  /tmp/cc623FKg.s 			page 157


 5144 0008 0023     		movs	r3, #0
 5145 000a FB60     		str	r3, [r7, #12]
3548:../../../FreeRTOS_9_0/Source/tasks.c **** 
3549:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5146              		.loc 1 3549 0
 5147 000c 05E0     		b	.L326
 5148              	.L327:
3550:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3551:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5149              		.loc 1 3551 0
 5150 000e 7B68     		ldr	r3, [r7, #4]
 5151 0010 0133     		adds	r3, r3, #1
 5152 0012 7B60     		str	r3, [r7, #4]
3552:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulCount++;
 5153              		.loc 1 3552 0
 5154 0014 FB68     		ldr	r3, [r7, #12]
 5155 0016 0133     		adds	r3, r3, #1
 5156 0018 FB60     		str	r3, [r7, #12]
 5157              	.L326:
3549:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 5158              		.loc 1 3549 0
 5159 001a 7B68     		ldr	r3, [r7, #4]
 5160 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5161 001e A52B     		cmp	r3, #165
 5162 0020 F5D0     		beq	.L327
3553:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3554:../../../FreeRTOS_9_0/Source/tasks.c **** 
3555:../../../FreeRTOS_9_0/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5163              		.loc 1 3555 0
 5164 0022 FB68     		ldr	r3, [r7, #12]
 5165 0024 9B08     		lsrs	r3, r3, #2
 5166 0026 FB60     		str	r3, [r7, #12]
3556:../../../FreeRTOS_9_0/Source/tasks.c **** 
3557:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( uint16_t ) ulCount;
 5167              		.loc 1 3557 0
 5168 0028 FB68     		ldr	r3, [r7, #12]
 5169 002a 9BB2     		uxth	r3, r3
3558:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5170              		.loc 1 3558 0
 5171 002c 1846     		mov	r0, r3
 5172 002e 1437     		adds	r7, r7, #20
 5173              	.LCFI206:
 5174              		.cfi_def_cfa_offset 4
 5175 0030 BD46     		mov	sp, r7
 5176              	.LCFI207:
 5177              		.cfi_def_cfa_register 13
 5178              		@ sp needed
 5179 0032 5DF8047B 		ldr	r7, [sp], #4
 5180              	.LCFI208:
 5181              		.cfi_restore 7
 5182              		.cfi_def_cfa_offset 0
 5183 0036 7047     		bx	lr
 5184              		.cfi_endproc
 5185              	.LFE45:
 5187              		.section	.text.prvDeleteTCB,"ax",%progbits
 5188              		.align	2
 5189              		.thumb
ARM GAS  /tmp/cc623FKg.s 			page 158


 5190              		.thumb_func
 5192              	prvDeleteTCB:
 5193              	.LFB46:
3559:../../../FreeRTOS_9_0/Source/tasks.c **** 
3560:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3561:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3562:../../../FreeRTOS_9_0/Source/tasks.c **** 
3563:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3564:../../../FreeRTOS_9_0/Source/tasks.c **** 
3565:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3566:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3567:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3568:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3569:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
3570:../../../FreeRTOS_9_0/Source/tasks.c **** 
3571:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3572:../../../FreeRTOS_9_0/Source/tasks.c **** 
3573:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3574:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3575:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3576:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3577:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3578:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3579:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3580:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3581:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3582:../../../FreeRTOS_9_0/Source/tasks.c **** 
3583:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3584:../../../FreeRTOS_9_0/Source/tasks.c **** 
3585:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
3586:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3587:../../../FreeRTOS_9_0/Source/tasks.c **** 
3588:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3589:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:../../../FreeRTOS_9_0/Source/tasks.c **** 
3591:../../../FreeRTOS_9_0/Source/tasks.c **** #if (INCLUDE_pxTaskGetStackStart == 1)
3592:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t* pxTaskGetStackStart( TaskHandle_t xTask)
3593:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3594:../../../FreeRTOS_9_0/Source/tasks.c **** 	    TCB_t *pxTCB;
3595:../../../FreeRTOS_9_0/Source/tasks.c **** 	    UBaseType_t uxReturn;
3596:../../../FreeRTOS_9_0/Source/tasks.c ****         (void)uxReturn;
3597:../../../FreeRTOS_9_0/Source/tasks.c **** 
3598:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3599:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
3600:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3601:../../../FreeRTOS_9_0/Source/tasks.c **** 
3602:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_pxTaskGetStackStart */
3603:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3604:../../../FreeRTOS_9_0/Source/tasks.c **** 
3605:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3606:../../../FreeRTOS_9_0/Source/tasks.c **** 
3607:../../../FreeRTOS_9_0/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3608:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5194              		.loc 1 3608 0
 5195              		.cfi_startproc
 5196              		@ args = 0, pretend = 0, frame = 8
 5197              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc623FKg.s 			page 159


 5198 0000 80B5     		push	{r7, lr}
 5199              	.LCFI209:
 5200              		.cfi_def_cfa_offset 8
 5201              		.cfi_offset 7, -8
 5202              		.cfi_offset 14, -4
 5203 0002 82B0     		sub	sp, sp, #8
 5204              	.LCFI210:
 5205              		.cfi_def_cfa_offset 16
 5206 0004 00AF     		add	r7, sp, #0
 5207              	.LCFI211:
 5208              		.cfi_def_cfa_register 7
 5209 0006 7860     		str	r0, [r7, #4]
3609:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3610:../../../FreeRTOS_9_0/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3611:../../../FreeRTOS_9_0/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3612:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3613:../../../FreeRTOS_9_0/Source/tasks.c **** 
3614:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3615:../../../FreeRTOS_9_0/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3616:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3617:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3618:../../../FreeRTOS_9_0/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3619:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3620:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3621:../../../FreeRTOS_9_0/Source/tasks.c **** 
3622:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3623:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3624:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3625:../../../FreeRTOS_9_0/Source/tasks.c **** 			the stack and TCB. */
3626:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 5210              		.loc 1 3626 0
 5211 0008 7B68     		ldr	r3, [r7, #4]
 5212 000a 1B6B     		ldr	r3, [r3, #48]
 5213 000c 1846     		mov	r0, r3
 5214 000e FFF7FEFF 		bl	vPortFree
3627:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTCB );
 5215              		.loc 1 3627 0
 5216 0012 7868     		ldr	r0, [r7, #4]
 5217 0014 FFF7FEFF 		bl	vPortFree
3628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3629:../../../FreeRTOS_9_0/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3630:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3631:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3632:../../../FreeRTOS_9_0/Source/tasks.c **** 			check what was statically allocated before trying to free the
3633:../../../FreeRTOS_9_0/Source/tasks.c **** 			memory. */
3634:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3635:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3636:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3637:../../../FreeRTOS_9_0/Source/tasks.c **** 				must be freed. */
3638:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3639:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB );
3640:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3641:../../../FreeRTOS_9_0/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3642:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3643:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3644:../../../FreeRTOS_9_0/Source/tasks.c **** 				only memory that must be freed. */
3645:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB );
ARM GAS  /tmp/cc623FKg.s 			page 160


3646:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3647:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3648:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3649:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3650:../../../FreeRTOS_9_0/Source/tasks.c **** 				nothing needs to be freed. */
3651:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3652:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3653:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3654:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3655:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3656:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5218              		.loc 1 3656 0
 5219 0018 0837     		adds	r7, r7, #8
 5220              	.LCFI212:
 5221              		.cfi_def_cfa_offset 8
 5222 001a BD46     		mov	sp, r7
 5223              	.LCFI213:
 5224              		.cfi_def_cfa_register 13
 5225              		@ sp needed
 5226 001c 80BD     		pop	{r7, pc}
 5227              		.cfi_endproc
 5228              	.LFE46:
 5230 001e 00BF     		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5231              		.align	2
 5232              		.thumb
 5233              		.thumb_func
 5235              	prvResetNextTaskUnblockTime:
 5236              	.LFB47:
3657:../../../FreeRTOS_9_0/Source/tasks.c **** 
3658:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3659:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3660:../../../FreeRTOS_9_0/Source/tasks.c **** 
3661:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3662:../../../FreeRTOS_9_0/Source/tasks.c **** {
 5237              		.loc 1 3662 0
 5238              		.cfi_startproc
 5239              		@ args = 0, pretend = 0, frame = 8
 5240              		@ frame_needed = 1, uses_anonymous_args = 0
 5241              		@ link register save eliminated.
 5242 0000 80B4     		push	{r7}
 5243              	.LCFI214:
 5244              		.cfi_def_cfa_offset 4
 5245              		.cfi_offset 7, -4
 5246 0002 83B0     		sub	sp, sp, #12
 5247              	.LCFI215:
 5248              		.cfi_def_cfa_offset 16
 5249 0004 00AF     		add	r7, sp, #0
 5250              	.LCFI216:
 5251              		.cfi_def_cfa_register 7
3663:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB;
3664:../../../FreeRTOS_9_0/Source/tasks.c **** 
3665:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5252              		.loc 1 3665 0
 5253 0006 0E4B     		ldr	r3, .L335
 5254 0008 1B68     		ldr	r3, [r3]
 5255 000a 1B68     		ldr	r3, [r3]
 5256 000c 002B     		cmp	r3, #0
ARM GAS  /tmp/cc623FKg.s 			page 161


 5257 000e 01D1     		bne	.L331
 5258              		.loc 1 3665 0 is_stmt 0 discriminator 1
 5259 0010 0123     		movs	r3, #1
 5260 0012 00E0     		b	.L332
 5261              	.L331:
 5262              		.loc 1 3665 0 discriminator 2
 5263 0014 0023     		movs	r3, #0
 5264              	.L332:
 5265              		.loc 1 3665 0 discriminator 4
 5266 0016 002B     		cmp	r3, #0
 5267 0018 04D0     		beq	.L333
3666:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3667:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3668:../../../FreeRTOS_9_0/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3669:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3670:../../../FreeRTOS_9_0/Source/tasks.c **** 		there is an item in the delayed list. */
3671:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5268              		.loc 1 3671 0 is_stmt 1
 5269 001a 0A4B     		ldr	r3, .L335+4
 5270 001c 4FF0FF32 		mov	r2, #-1
 5271 0020 1A60     		str	r2, [r3]
 5272 0022 08E0     		b	.L330
 5273              	.L333:
3672:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3673:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
3674:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3675:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3676:../../../FreeRTOS_9_0/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3677:../../../FreeRTOS_9_0/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3678:../../../FreeRTOS_9_0/Source/tasks.c **** 		from the Blocked state. */
3679:../../../FreeRTOS_9_0/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 5274              		.loc 1 3679 0
 5275 0024 064B     		ldr	r3, .L335
 5276 0026 1B68     		ldr	r3, [r3]
 5277 0028 DB68     		ldr	r3, [r3, #12]
 5278 002a DB68     		ldr	r3, [r3, #12]
 5279 002c 7B60     		str	r3, [r7, #4]
3680:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5280              		.loc 1 3680 0
 5281 002e 7B68     		ldr	r3, [r7, #4]
 5282 0030 5B68     		ldr	r3, [r3, #4]
 5283 0032 044A     		ldr	r2, .L335+4
 5284 0034 1360     		str	r3, [r2]
 5285              	.L330:
3681:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3682:../../../FreeRTOS_9_0/Source/tasks.c **** }
 5286              		.loc 1 3682 0
 5287 0036 0C37     		adds	r7, r7, #12
 5288              	.LCFI217:
 5289              		.cfi_def_cfa_offset 4
 5290 0038 BD46     		mov	sp, r7
 5291              	.LCFI218:
 5292              		.cfi_def_cfa_register 13
 5293              		@ sp needed
 5294 003a 5DF8047B 		ldr	r7, [sp], #4
 5295              	.LCFI219:
 5296              		.cfi_restore 7
ARM GAS  /tmp/cc623FKg.s 			page 162


 5297              		.cfi_def_cfa_offset 0
 5298 003e 7047     		bx	lr
 5299              	.L336:
 5300              		.align	2
 5301              	.L335:
 5302 0040 00000000 		.word	pxDelayedTaskList
 5303 0044 00000000 		.word	xNextTaskUnblockTime
 5304              		.cfi_endproc
 5305              	.LFE47:
 5307              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5308              		.align	2
 5309              		.global	xTaskGetCurrentTaskHandle
 5310              		.thumb
 5311              		.thumb_func
 5313              	xTaskGetCurrentTaskHandle:
 5314              	.LFB48:
3683:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3684:../../../FreeRTOS_9_0/Source/tasks.c **** 
3685:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3686:../../../FreeRTOS_9_0/Source/tasks.c **** 
3687:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3688:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5315              		.loc 1 3688 0
 5316              		.cfi_startproc
 5317              		@ args = 0, pretend = 0, frame = 8
 5318              		@ frame_needed = 1, uses_anonymous_args = 0
 5319              		@ link register save eliminated.
 5320 0000 80B4     		push	{r7}
 5321              	.LCFI220:
 5322              		.cfi_def_cfa_offset 4
 5323              		.cfi_offset 7, -4
 5324 0002 83B0     		sub	sp, sp, #12
 5325              	.LCFI221:
 5326              		.cfi_def_cfa_offset 16
 5327 0004 00AF     		add	r7, sp, #0
 5328              	.LCFI222:
 5329              		.cfi_def_cfa_register 7
3689:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xReturn;
3690:../../../FreeRTOS_9_0/Source/tasks.c **** 
3691:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3692:../../../FreeRTOS_9_0/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3693:../../../FreeRTOS_9_0/Source/tasks.c **** 		individual execution thread. */
3694:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5330              		.loc 1 3694 0
 5331 0006 054B     		ldr	r3, .L339
 5332 0008 1B68     		ldr	r3, [r3]
 5333 000a 7B60     		str	r3, [r7, #4]
3695:../../../FreeRTOS_9_0/Source/tasks.c **** 
3696:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 5334              		.loc 1 3696 0
 5335 000c 7B68     		ldr	r3, [r7, #4]
3697:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5336              		.loc 1 3697 0
 5337 000e 1846     		mov	r0, r3
 5338 0010 0C37     		adds	r7, r7, #12
 5339              	.LCFI223:
 5340              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc623FKg.s 			page 163


 5341 0012 BD46     		mov	sp, r7
 5342              	.LCFI224:
 5343              		.cfi_def_cfa_register 13
 5344              		@ sp needed
 5345 0014 5DF8047B 		ldr	r7, [sp], #4
 5346              	.LCFI225:
 5347              		.cfi_restore 7
 5348              		.cfi_def_cfa_offset 0
 5349 0018 7047     		bx	lr
 5350              	.L340:
 5351 001a 00BF     		.align	2
 5352              	.L339:
 5353 001c 00000000 		.word	pxCurrentTCB
 5354              		.cfi_endproc
 5355              	.LFE48:
 5357              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5358              		.align	2
 5359              		.global	xTaskGetSchedulerState
 5360              		.thumb
 5361              		.thumb_func
 5363              	xTaskGetSchedulerState:
 5364              	.LFB49:
3698:../../../FreeRTOS_9_0/Source/tasks.c **** 
3699:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3700:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3701:../../../FreeRTOS_9_0/Source/tasks.c **** 
3702:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3703:../../../FreeRTOS_9_0/Source/tasks.c **** 
3704:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3705:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5365              		.loc 1 3705 0
 5366              		.cfi_startproc
 5367              		@ args = 0, pretend = 0, frame = 8
 5368              		@ frame_needed = 1, uses_anonymous_args = 0
 5369              		@ link register save eliminated.
 5370 0000 80B4     		push	{r7}
 5371              	.LCFI226:
 5372              		.cfi_def_cfa_offset 4
 5373              		.cfi_offset 7, -4
 5374 0002 83B0     		sub	sp, sp, #12
 5375              	.LCFI227:
 5376              		.cfi_def_cfa_offset 16
 5377 0004 00AF     		add	r7, sp, #0
 5378              	.LCFI228:
 5379              		.cfi_def_cfa_register 7
3706:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
3707:../../../FreeRTOS_9_0/Source/tasks.c **** 
3708:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5380              		.loc 1 3708 0
 5381 0006 0B4B     		ldr	r3, .L346
 5382 0008 1B68     		ldr	r3, [r3]
 5383 000a 002B     		cmp	r3, #0
 5384 000c 02D1     		bne	.L342
3709:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3710:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5385              		.loc 1 3710 0
 5386 000e 0123     		movs	r3, #1
ARM GAS  /tmp/cc623FKg.s 			page 164


 5387 0010 7B60     		str	r3, [r7, #4]
 5388 0012 08E0     		b	.L343
 5389              	.L342:
3711:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3712:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3713:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3714:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5390              		.loc 1 3714 0
 5391 0014 084B     		ldr	r3, .L346+4
 5392 0016 1B68     		ldr	r3, [r3]
 5393 0018 002B     		cmp	r3, #0
 5394 001a 02D1     		bne	.L344
3715:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3716:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5395              		.loc 1 3716 0
 5396 001c 0223     		movs	r3, #2
 5397 001e 7B60     		str	r3, [r7, #4]
 5398 0020 01E0     		b	.L343
 5399              	.L344:
3717:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3718:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3719:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3720:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5400              		.loc 1 3720 0
 5401 0022 0023     		movs	r3, #0
 5402 0024 7B60     		str	r3, [r7, #4]
 5403              	.L343:
3721:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3722:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3723:../../../FreeRTOS_9_0/Source/tasks.c **** 
3724:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 5404              		.loc 1 3724 0
 5405 0026 7B68     		ldr	r3, [r7, #4]
3725:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5406              		.loc 1 3725 0
 5407 0028 1846     		mov	r0, r3
 5408 002a 0C37     		adds	r7, r7, #12
 5409              	.LCFI229:
 5410              		.cfi_def_cfa_offset 4
 5411 002c BD46     		mov	sp, r7
 5412              	.LCFI230:
 5413              		.cfi_def_cfa_register 13
 5414              		@ sp needed
 5415 002e 5DF8047B 		ldr	r7, [sp], #4
 5416              	.LCFI231:
 5417              		.cfi_restore 7
 5418              		.cfi_def_cfa_offset 0
 5419 0032 7047     		bx	lr
 5420              	.L347:
 5421              		.align	2
 5422              	.L346:
 5423 0034 00000000 		.word	xSchedulerRunning
 5424 0038 00000000 		.word	uxSchedulerSuspended
 5425              		.cfi_endproc
 5426              	.LFE49:
 5428              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 5429              		.align	2
ARM GAS  /tmp/cc623FKg.s 			page 165


 5430              		.global	vTaskPriorityInherit
 5431              		.thumb
 5432              		.thumb_func
 5434              	vTaskPriorityInherit:
 5435              	.LFB50:
3726:../../../FreeRTOS_9_0/Source/tasks.c **** 
3727:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3728:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3729:../../../FreeRTOS_9_0/Source/tasks.c **** 
3730:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3731:../../../FreeRTOS_9_0/Source/tasks.c **** 
3732:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3733:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5436              		.loc 1 3733 0
 5437              		.cfi_startproc
 5438              		@ args = 0, pretend = 0, frame = 16
 5439              		@ frame_needed = 1, uses_anonymous_args = 0
 5440 0000 80B5     		push	{r7, lr}
 5441              	.LCFI232:
 5442              		.cfi_def_cfa_offset 8
 5443              		.cfi_offset 7, -8
 5444              		.cfi_offset 14, -4
 5445 0002 84B0     		sub	sp, sp, #16
 5446              	.LCFI233:
 5447              		.cfi_def_cfa_offset 24
 5448 0004 00AF     		add	r7, sp, #0
 5449              	.LCFI234:
 5450              		.cfi_def_cfa_register 7
 5451 0006 7860     		str	r0, [r7, #4]
3734:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5452              		.loc 1 3734 0
 5453 0008 7B68     		ldr	r3, [r7, #4]
 5454 000a FB60     		str	r3, [r7, #12]
3735:../../../FreeRTOS_9_0/Source/tasks.c **** 
3736:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3737:../../../FreeRTOS_9_0/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3738:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5455              		.loc 1 3738 0
 5456 000c 7B68     		ldr	r3, [r7, #4]
 5457 000e 002B     		cmp	r3, #0
 5458 0010 69D0     		beq	.L348
3739:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3740:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3741:../../../FreeRTOS_9_0/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3742:../../../FreeRTOS_9_0/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3743:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 5459              		.loc 1 3743 0
 5460 0012 FB68     		ldr	r3, [r7, #12]
 5461 0014 DA6A     		ldr	r2, [r3, #44]
 5462 0016 354B     		ldr	r3, .L357
 5463 0018 1B68     		ldr	r3, [r3]
 5464 001a DB6A     		ldr	r3, [r3, #44]
 5465 001c 9A42     		cmp	r2, r3
 5466 001e 62D2     		bcs	.L348
3744:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3745:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3746:../../../FreeRTOS_9_0/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
ARM GAS  /tmp/cc623FKg.s 			page 166


3747:../../../FreeRTOS_9_0/Source/tasks.c **** 				not	being used for anything else. */
3748:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 5467              		.loc 1 3748 0
 5468 0020 FB68     		ldr	r3, [r7, #12]
 5469 0022 9B69     		ldr	r3, [r3, #24]
 5470 0024 002B     		cmp	r3, #0
 5471 0026 06DB     		blt	.L350
3749:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3750:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5472              		.loc 1 3750 0
 5473 0028 304B     		ldr	r3, .L357
 5474 002a 1B68     		ldr	r3, [r3]
 5475 002c DB6A     		ldr	r3, [r3, #44]
 5476 002e C3F10702 		rsb	r2, r3, #7
 5477 0032 FB68     		ldr	r3, [r7, #12]
 5478 0034 9A61     		str	r2, [r3, #24]
 5479              	.L350:
3751:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3752:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3753:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3754:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3755:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3756:../../../FreeRTOS_9_0/Source/tasks.c **** 
3757:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3758:../../../FreeRTOS_9_0/Source/tasks.c **** 				to be moved into a new list. */
3759:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
 5480              		.loc 1 3759 0
 5481 0036 FB68     		ldr	r3, [r7, #12]
 5482 0038 5969     		ldr	r1, [r3, #20]
 5483 003a FB68     		ldr	r3, [r7, #12]
 5484 003c DA6A     		ldr	r2, [r3, #44]
 5485 003e 1346     		mov	r3, r2
 5486 0040 9B00     		lsls	r3, r3, #2
 5487 0042 1344     		add	r3, r3, r2
 5488 0044 9B00     		lsls	r3, r3, #2
 5489 0046 2A4A     		ldr	r2, .L357+4
 5490 0048 1344     		add	r3, r3, r2
 5491 004a 9942     		cmp	r1, r3
 5492 004c 01D1     		bne	.L351
 5493              		.loc 1 3759 0 is_stmt 0 discriminator 1
 5494 004e 0123     		movs	r3, #1
 5495 0050 00E0     		b	.L352
 5496              	.L351:
 5497              		.loc 1 3759 0 discriminator 2
 5498 0052 0023     		movs	r3, #0
 5499              	.L352:
 5500              		.loc 1 3759 0 discriminator 4
 5501 0054 002B     		cmp	r3, #0
 5502 0056 3CD0     		beq	.L353
3760:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3761:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5503              		.loc 1 3761 0 is_stmt 1
 5504 0058 FB68     		ldr	r3, [r7, #12]
 5505 005a 0433     		adds	r3, r3, #4
 5506 005c 1846     		mov	r0, r3
 5507 005e FFF7FEFF 		bl	uxListRemove
 5508 0062 0346     		mov	r3, r0
ARM GAS  /tmp/cc623FKg.s 			page 167


 5509 0064 002B     		cmp	r3, #0
 5510 0066 15D1     		bne	.L354
3762:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3763:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5511              		.loc 1 3763 0
 5512 0068 FB68     		ldr	r3, [r7, #12]
 5513 006a DA6A     		ldr	r2, [r3, #44]
 5514 006c 2049     		ldr	r1, .L357+4
 5515 006e 1346     		mov	r3, r2
 5516 0070 9B00     		lsls	r3, r3, #2
 5517 0072 1344     		add	r3, r3, r2
 5518 0074 9B00     		lsls	r3, r3, #2
 5519 0076 0B44     		add	r3, r3, r1
 5520 0078 1B68     		ldr	r3, [r3]
 5521 007a 002B     		cmp	r3, #0
 5522 007c 0AD1     		bne	.L354
 5523              		.loc 1 3763 0 is_stmt 0 discriminator 1
 5524 007e FB68     		ldr	r3, [r7, #12]
 5525 0080 DB6A     		ldr	r3, [r3, #44]
 5526 0082 1A46     		mov	r2, r3
 5527 0084 0123     		movs	r3, #1
 5528 0086 9340     		lsls	r3, r3, r2
 5529 0088 DA43     		mvns	r2, r3
 5530 008a 1A4B     		ldr	r3, .L357+8
 5531 008c 1B68     		ldr	r3, [r3]
 5532 008e 1340     		ands	r3, r3, r2
 5533 0090 184A     		ldr	r2, .L357+8
 5534 0092 1360     		str	r3, [r2]
 5535              	.L354:
3764:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3765:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3766:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3767:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3768:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3769:../../../FreeRTOS_9_0/Source/tasks.c **** 
3770:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3771:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5536              		.loc 1 3771 0 is_stmt 1
 5537 0094 154B     		ldr	r3, .L357
 5538 0096 1B68     		ldr	r3, [r3]
 5539 0098 DA6A     		ldr	r2, [r3, #44]
 5540 009a FB68     		ldr	r3, [r7, #12]
 5541 009c DA62     		str	r2, [r3, #44]
3772:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 5542              		.loc 1 3772 0
 5543 009e FB68     		ldr	r3, [r7, #12]
 5544 00a0 DB6A     		ldr	r3, [r3, #44]
 5545 00a2 1A46     		mov	r2, r3
 5546 00a4 0123     		movs	r3, #1
 5547 00a6 03FA02F2 		lsl	r2, r3, r2
 5548 00aa 124B     		ldr	r3, .L357+8
 5549 00ac 1B68     		ldr	r3, [r3]
 5550 00ae 1343     		orrs	r3, r3, r2
 5551 00b0 104A     		ldr	r2, .L357+8
 5552 00b2 1360     		str	r3, [r2]
 5553 00b4 FB68     		ldr	r3, [r7, #12]
 5554 00b6 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/cc623FKg.s 			page 168


 5555 00b8 1346     		mov	r3, r2
 5556 00ba 9B00     		lsls	r3, r3, #2
 5557 00bc 1344     		add	r3, r3, r2
 5558 00be 9B00     		lsls	r3, r3, #2
 5559 00c0 0B4A     		ldr	r2, .L357+4
 5560 00c2 1A44     		add	r2, r2, r3
 5561 00c4 FB68     		ldr	r3, [r7, #12]
 5562 00c6 0433     		adds	r3, r3, #4
 5563 00c8 1046     		mov	r0, r2
 5564 00ca 1946     		mov	r1, r3
 5565 00cc FFF7FEFF 		bl	vListInsertEnd
 5566 00d0 04E0     		b	.L356
 5567              	.L353:
3773:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3774:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3775:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3776:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Just inherit the priority. */
3777:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5568              		.loc 1 3777 0
 5569 00d2 064B     		ldr	r3, .L357
 5570 00d4 1B68     		ldr	r3, [r3]
 5571 00d6 DA6A     		ldr	r2, [r3, #44]
 5572 00d8 FB68     		ldr	r3, [r7, #12]
 5573 00da DA62     		str	r2, [r3, #44]
 5574              	.L356:
3778:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3779:../../../FreeRTOS_9_0/Source/tasks.c **** 
3780:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
 5575              		.loc 1 3780 0
 5576 00dc 7B68     		ldr	r3, [r7, #4]
 5577 00de 4920     		movs	r0, #73
 5578 00e0 1946     		mov	r1, r3
 5579 00e2 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 5580              	.L348:
3781:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3782:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3783:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3784:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3785:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3786:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3787:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3788:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3789:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3790:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3791:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5581              		.loc 1 3791 0
 5582 00e6 1037     		adds	r7, r7, #16
 5583              	.LCFI235:
 5584              		.cfi_def_cfa_offset 8
 5585 00e8 BD46     		mov	sp, r7
 5586              	.LCFI236:
 5587              		.cfi_def_cfa_register 13
 5588              		@ sp needed
 5589 00ea 80BD     		pop	{r7, pc}
 5590              	.L358:
 5591              		.align	2
 5592              	.L357:
ARM GAS  /tmp/cc623FKg.s 			page 169


 5593 00ec 00000000 		.word	pxCurrentTCB
 5594 00f0 00000000 		.word	pxReadyTasksLists
 5595 00f4 00000000 		.word	uxTopReadyPriority
 5596              		.cfi_endproc
 5597              	.LFE50:
 5599              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5600              		.align	2
 5601              		.global	xTaskPriorityDisinherit
 5602              		.thumb
 5603              		.thumb_func
 5605              	xTaskPriorityDisinherit:
 5606              	.LFB51:
3792:../../../FreeRTOS_9_0/Source/tasks.c **** 
3793:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3794:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:../../../FreeRTOS_9_0/Source/tasks.c **** 
3796:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3797:../../../FreeRTOS_9_0/Source/tasks.c **** 
3798:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3799:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5607              		.loc 1 3799 0
 5608              		.cfi_startproc
 5609              		@ args = 0, pretend = 0, frame = 24
 5610              		@ frame_needed = 1, uses_anonymous_args = 0
 5611 0000 80B5     		push	{r7, lr}
 5612              	.LCFI237:
 5613              		.cfi_def_cfa_offset 8
 5614              		.cfi_offset 7, -8
 5615              		.cfi_offset 14, -4
 5616 0002 86B0     		sub	sp, sp, #24
 5617              	.LCFI238:
 5618              		.cfi_def_cfa_offset 32
 5619 0004 00AF     		add	r7, sp, #0
 5620              	.LCFI239:
 5621              		.cfi_def_cfa_register 7
 5622 0006 7860     		str	r0, [r7, #4]
3800:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5623              		.loc 1 3800 0
 5624 0008 7B68     		ldr	r3, [r7, #4]
 5625 000a 3B61     		str	r3, [r7, #16]
3801:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5626              		.loc 1 3801 0
 5627 000c 0023     		movs	r3, #0
 5628 000e 7B61     		str	r3, [r7, #20]
3802:../../../FreeRTOS_9_0/Source/tasks.c **** 
3803:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5629              		.loc 1 3803 0
 5630 0010 7B68     		ldr	r3, [r7, #4]
 5631 0012 002B     		cmp	r3, #0
 5632 0014 73D0     		beq	.L360
3804:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3805:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3806:../../../FreeRTOS_9_0/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3807:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3808:../../../FreeRTOS_9_0/Source/tasks.c **** 			be the running state task. */
3809:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5633              		.loc 1 3809 0
ARM GAS  /tmp/cc623FKg.s 			page 170


 5634 0016 3C4B     		ldr	r3, .L368
 5635 0018 1B68     		ldr	r3, [r3]
 5636 001a 3A69     		ldr	r2, [r7, #16]
 5637 001c 9A42     		cmp	r2, r3
 5638 001e 09D0     		beq	.L361
 5639              	.LBB166:
 5640              	.LBB167:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5641              		.loc 2 237 0 discriminator 1
 5642              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5643 0020 4FF05003 			mov r3, #80												
 5644 0024 83F31188 		msr basepri, r3											
 5645 0028 BFF36F8F 		isb														
 5646 002c BFF34F8F 		dsb														
 5647              	
 5648              	@ 0 "" 2
 5649              		.thumb
 5650 0030 FB60     		str	r3, [r7, #12]
 5651              	.L362:
 5652              	.LBE167:
 5653              	.LBE166:
 5654              		.loc 1 3809 0 discriminator 1
 5655 0032 FEE7     		b	.L362
 5656              	.L361:
3810:../../../FreeRTOS_9_0/Source/tasks.c **** 
3811:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5657              		.loc 1 3811 0
 5658 0034 3B69     		ldr	r3, [r7, #16]
 5659 0036 1B6D     		ldr	r3, [r3, #80]
 5660 0038 002B     		cmp	r3, #0
 5661 003a 09D1     		bne	.L363
 5662              	.LBB168:
 5663              	.LBB169:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5664              		.loc 2 237 0 discriminator 1
 5665              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5666 003c 4FF05003 			mov r3, #80												
 5667 0040 83F31188 		msr basepri, r3											
 5668 0044 BFF36F8F 		isb														
 5669 0048 BFF34F8F 		dsb														
 5670              	
 5671              	@ 0 "" 2
 5672              		.thumb
 5673 004c BB60     		str	r3, [r7, #8]
 5674              	.L364:
 5675              	.LBE169:
 5676              	.LBE168:
 5677              		.loc 1 3811 0 discriminator 2
 5678 004e FEE7     		b	.L364
 5679              	.L363:
3812:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5680              		.loc 1 3812 0
 5681 0050 3B69     		ldr	r3, [r7, #16]
 5682 0052 1B6D     		ldr	r3, [r3, #80]
 5683 0054 5A1E     		subs	r2, r3, #1
 5684 0056 3B69     		ldr	r3, [r7, #16]
 5685 0058 1A65     		str	r2, [r3, #80]
ARM GAS  /tmp/cc623FKg.s 			page 171


3813:../../../FreeRTOS_9_0/Source/tasks.c **** 
3814:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3815:../../../FreeRTOS_9_0/Source/tasks.c **** 			task? */
3816:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5686              		.loc 1 3816 0
 5687 005a 3B69     		ldr	r3, [r7, #16]
 5688 005c DA6A     		ldr	r2, [r3, #44]
 5689 005e 3B69     		ldr	r3, [r7, #16]
 5690 0060 DB6C     		ldr	r3, [r3, #76]
 5691 0062 9A42     		cmp	r2, r3
 5692 0064 4BD0     		beq	.L360
3817:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3818:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3819:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5693              		.loc 1 3819 0
 5694 0066 3B69     		ldr	r3, [r7, #16]
 5695 0068 1B6D     		ldr	r3, [r3, #80]
 5696 006a 002B     		cmp	r3, #0
 5697 006c 47D1     		bne	.L360
3820:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3821:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3822:../../../FreeRTOS_9_0/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3823:../../../FreeRTOS_9_0/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3824:../../../FreeRTOS_9_0/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3825:../../../FreeRTOS_9_0/Source/tasks.c **** 					the	holding task from the ready	list. */
3826:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5698              		.loc 1 3826 0
 5699 006e 3B69     		ldr	r3, [r7, #16]
 5700 0070 0433     		adds	r3, r3, #4
 5701 0072 1846     		mov	r0, r3
 5702 0074 FFF7FEFF 		bl	uxListRemove
 5703 0078 0346     		mov	r3, r0
 5704 007a 002B     		cmp	r3, #0
 5705 007c 15D1     		bne	.L365
3827:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3828:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5706              		.loc 1 3828 0
 5707 007e 3B69     		ldr	r3, [r7, #16]
 5708 0080 DA6A     		ldr	r2, [r3, #44]
 5709 0082 2249     		ldr	r1, .L368+4
 5710 0084 1346     		mov	r3, r2
 5711 0086 9B00     		lsls	r3, r3, #2
 5712 0088 1344     		add	r3, r3, r2
 5713 008a 9B00     		lsls	r3, r3, #2
 5714 008c 0B44     		add	r3, r3, r1
 5715 008e 1B68     		ldr	r3, [r3]
 5716 0090 002B     		cmp	r3, #0
 5717 0092 0AD1     		bne	.L365
 5718              		.loc 1 3828 0 is_stmt 0 discriminator 1
 5719 0094 3B69     		ldr	r3, [r7, #16]
 5720 0096 DB6A     		ldr	r3, [r3, #44]
 5721 0098 1A46     		mov	r2, r3
 5722 009a 0123     		movs	r3, #1
 5723 009c 9340     		lsls	r3, r3, r2
 5724 009e DA43     		mvns	r2, r3
 5725 00a0 1B4B     		ldr	r3, .L368+8
 5726 00a2 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc623FKg.s 			page 172


 5727 00a4 1340     		ands	r3, r3, r2
 5728 00a6 1A4A     		ldr	r2, .L368+8
 5729 00a8 1360     		str	r3, [r2]
 5730              	.L365:
3829:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3830:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3831:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3832:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3834:../../../FreeRTOS_9_0/Source/tasks.c **** 
3835:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3836:../../../FreeRTOS_9_0/Source/tasks.c **** 					new	ready list. */
3837:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 5731              		.loc 1 3837 0 is_stmt 1
 5732 00aa 7B68     		ldr	r3, [r7, #4]
 5733 00ac 4A20     		movs	r0, #74
 5734 00ae 1946     		mov	r1, r3
 5735 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
3838:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5736              		.loc 1 3838 0
 5737 00b4 3B69     		ldr	r3, [r7, #16]
 5738 00b6 DA6C     		ldr	r2, [r3, #76]
 5739 00b8 3B69     		ldr	r3, [r7, #16]
 5740 00ba DA62     		str	r2, [r3, #44]
3839:../../../FreeRTOS_9_0/Source/tasks.c **** 
3840:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3841:../../../FreeRTOS_9_0/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3842:../../../FreeRTOS_9_0/Source/tasks.c **** 					running to give back the mutex. */
3843:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5741              		.loc 1 3843 0
 5742 00bc 3B69     		ldr	r3, [r7, #16]
 5743 00be DB6A     		ldr	r3, [r3, #44]
 5744 00c0 C3F10702 		rsb	r2, r3, #7
 5745 00c4 3B69     		ldr	r3, [r7, #16]
 5746 00c6 9A61     		str	r2, [r3, #24]
3844:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 5747              		.loc 1 3844 0
 5748 00c8 3B69     		ldr	r3, [r7, #16]
 5749 00ca DB6A     		ldr	r3, [r3, #44]
 5750 00cc 1A46     		mov	r2, r3
 5751 00ce 0123     		movs	r3, #1
 5752 00d0 03FA02F2 		lsl	r2, r3, r2
 5753 00d4 0E4B     		ldr	r3, .L368+8
 5754 00d6 1B68     		ldr	r3, [r3]
 5755 00d8 1343     		orrs	r3, r3, r2
 5756 00da 0D4A     		ldr	r2, .L368+8
 5757 00dc 1360     		str	r3, [r2]
 5758 00de 3B69     		ldr	r3, [r7, #16]
 5759 00e0 DA6A     		ldr	r2, [r3, #44]
 5760 00e2 1346     		mov	r3, r2
 5761 00e4 9B00     		lsls	r3, r3, #2
 5762 00e6 1344     		add	r3, r3, r2
 5763 00e8 9B00     		lsls	r3, r3, #2
 5764 00ea 084A     		ldr	r2, .L368+4
 5765 00ec 1A44     		add	r2, r2, r3
 5766 00ee 3B69     		ldr	r3, [r7, #16]
 5767 00f0 0433     		adds	r3, r3, #4
ARM GAS  /tmp/cc623FKg.s 			page 173


 5768 00f2 1046     		mov	r0, r2
 5769 00f4 1946     		mov	r1, r3
 5770 00f6 FFF7FEFF 		bl	vListInsertEnd
3845:../../../FreeRTOS_9_0/Source/tasks.c **** 
3846:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3847:../../../FreeRTOS_9_0/Source/tasks.c **** 					This is only actually required in the corner case whereby
3848:../../../FreeRTOS_9_0/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3849:../../../FreeRTOS_9_0/Source/tasks.c **** 					in an order different to that in which they were taken.
3850:../../../FreeRTOS_9_0/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3851:../../../FreeRTOS_9_0/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3852:../../../FreeRTOS_9_0/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3853:../../../FreeRTOS_9_0/Source/tasks.c **** 					a task is waiting on it or not. */
3854:../../../FreeRTOS_9_0/Source/tasks.c **** 					xReturn = pdTRUE;
 5771              		.loc 1 3854 0
 5772 00fa 0123     		movs	r3, #1
 5773 00fc 7B61     		str	r3, [r7, #20]
 5774              	.L360:
3855:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3856:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3857:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3858:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3859:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3860:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3861:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3862:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3863:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3864:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3865:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3866:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3867:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3868:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3869:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3870:../../../FreeRTOS_9_0/Source/tasks.c **** 
3871:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 5775              		.loc 1 3871 0
 5776 00fe 7B69     		ldr	r3, [r7, #20]
3872:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5777              		.loc 1 3872 0
 5778 0100 1846     		mov	r0, r3
 5779 0102 1837     		adds	r7, r7, #24
 5780              	.LCFI240:
 5781              		.cfi_def_cfa_offset 8
 5782 0104 BD46     		mov	sp, r7
 5783              	.LCFI241:
 5784              		.cfi_def_cfa_register 13
 5785              		@ sp needed
 5786 0106 80BD     		pop	{r7, pc}
 5787              	.L369:
 5788              		.align	2
 5789              	.L368:
 5790 0108 00000000 		.word	pxCurrentTCB
 5791 010c 00000000 		.word	pxReadyTasksLists
 5792 0110 00000000 		.word	uxTopReadyPriority
 5793              		.cfi_endproc
 5794              	.LFE51:
 5796              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 5797              		.align	2
ARM GAS  /tmp/cc623FKg.s 			page 174


 5798              		.thumb
 5799              		.thumb_func
 5801              	prvWriteNameToBuffer:
 5802              	.LFB52:
3873:../../../FreeRTOS_9_0/Source/tasks.c **** 
3874:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3875:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3876:../../../FreeRTOS_9_0/Source/tasks.c **** 
3877:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3878:../../../FreeRTOS_9_0/Source/tasks.c **** 
3879:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskEnterCritical( void )
3880:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3881:../../../FreeRTOS_9_0/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3882:../../../FreeRTOS_9_0/Source/tasks.c **** 
3883:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3884:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3885:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3886:../../../FreeRTOS_9_0/Source/tasks.c **** 
3887:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3888:../../../FreeRTOS_9_0/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3889:../../../FreeRTOS_9_0/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3890:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3891:../../../FreeRTOS_9_0/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3892:../../../FreeRTOS_9_0/Source/tasks.c **** 			critical section. */
3893:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3894:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3895:../../../FreeRTOS_9_0/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3896:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3897:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3898:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3899:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3900:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3901:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3902:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3903:../../../FreeRTOS_9_0/Source/tasks.c **** 
3904:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3905:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3906:../../../FreeRTOS_9_0/Source/tasks.c **** 
3907:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3908:../../../FreeRTOS_9_0/Source/tasks.c **** 
3909:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskExitCritical( void )
3910:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3911:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3912:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3913:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3914:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3915:../../../FreeRTOS_9_0/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3916:../../../FreeRTOS_9_0/Source/tasks.c **** 
3917:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3918:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3919:../../../FreeRTOS_9_0/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3920:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3921:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3922:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3923:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3924:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3925:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/cc623FKg.s 			page 175


3926:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3927:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3928:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3929:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3930:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3931:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3932:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3933:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3934:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3935:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3936:../../../FreeRTOS_9_0/Source/tasks.c **** 
3937:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3938:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:../../../FreeRTOS_9_0/Source/tasks.c **** 
3940:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:../../../FreeRTOS_9_0/Source/tasks.c **** 
3942:../../../FreeRTOS_9_0/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3943:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5803              		.loc 1 3943 0
 5804              		.cfi_startproc
 5805              		@ args = 0, pretend = 0, frame = 16
 5806              		@ frame_needed = 1, uses_anonymous_args = 0
 5807 0000 80B5     		push	{r7, lr}
 5808              	.LCFI242:
 5809              		.cfi_def_cfa_offset 8
 5810              		.cfi_offset 7, -8
 5811              		.cfi_offset 14, -4
 5812 0002 84B0     		sub	sp, sp, #16
 5813              	.LCFI243:
 5814              		.cfi_def_cfa_offset 24
 5815 0004 00AF     		add	r7, sp, #0
 5816              	.LCFI244:
 5817              		.cfi_def_cfa_register 7
 5818 0006 7860     		str	r0, [r7, #4]
 5819 0008 3960     		str	r1, [r7]
3944:../../../FreeRTOS_9_0/Source/tasks.c **** 	size_t x;
3945:../../../FreeRTOS_9_0/Source/tasks.c **** 
3946:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Start by copying the entire string. */
3947:../../../FreeRTOS_9_0/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 5820              		.loc 1 3947 0
 5821 000a 7868     		ldr	r0, [r7, #4]
 5822 000c 3968     		ldr	r1, [r7]
 5823 000e FFF7FEFF 		bl	strcpy
3948:../../../FreeRTOS_9_0/Source/tasks.c **** 
3949:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3950:../../../FreeRTOS_9_0/Source/tasks.c **** 		printed out. */
3951:../../../FreeRTOS_9_0/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 5824              		.loc 1 3951 0
 5825 0012 7868     		ldr	r0, [r7, #4]
 5826 0014 FFF7FEFF 		bl	strlen
 5827 0018 F860     		str	r0, [r7, #12]
 5828 001a 07E0     		b	.L371
 5829              	.L372:
3952:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3953:../../../FreeRTOS_9_0/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
 5830              		.loc 1 3953 0 discriminator 3
 5831 001c 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/cc623FKg.s 			page 176


 5832 001e FB68     		ldr	r3, [r7, #12]
 5833 0020 1344     		add	r3, r3, r2
 5834 0022 2022     		movs	r2, #32
 5835 0024 1A70     		strb	r2, [r3]
3951:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 5836              		.loc 1 3951 0 discriminator 3
 5837 0026 FB68     		ldr	r3, [r7, #12]
 5838 0028 0133     		adds	r3, r3, #1
 5839 002a FB60     		str	r3, [r7, #12]
 5840              	.L371:
3951:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 5841              		.loc 1 3951 0 is_stmt 0 discriminator 1
 5842 002c FB68     		ldr	r3, [r7, #12]
 5843 002e 0E2B     		cmp	r3, #14
 5844 0030 F4D9     		bls	.L372
3954:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3955:../../../FreeRTOS_9_0/Source/tasks.c **** 
3956:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Terminate. */
3957:../../../FreeRTOS_9_0/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
 5845              		.loc 1 3957 0 is_stmt 1
 5846 0032 7A68     		ldr	r2, [r7, #4]
 5847 0034 FB68     		ldr	r3, [r7, #12]
 5848 0036 1344     		add	r3, r3, r2
 5849 0038 0022     		movs	r2, #0
 5850 003a 1A70     		strb	r2, [r3]
3958:../../../FreeRTOS_9_0/Source/tasks.c **** 
3959:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return the new end of string. */
3960:../../../FreeRTOS_9_0/Source/tasks.c **** 		return &( pcBuffer[ x ] );
 5851              		.loc 1 3960 0
 5852 003c 7A68     		ldr	r2, [r7, #4]
 5853 003e FB68     		ldr	r3, [r7, #12]
 5854 0040 1344     		add	r3, r3, r2
3961:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5855              		.loc 1 3961 0
 5856 0042 1846     		mov	r0, r3
 5857 0044 1037     		adds	r7, r7, #16
 5858              	.LCFI245:
 5859              		.cfi_def_cfa_offset 8
 5860 0046 BD46     		mov	sp, r7
 5861              	.LCFI246:
 5862              		.cfi_def_cfa_register 13
 5863              		@ sp needed
 5864 0048 80BD     		pop	{r7, pc}
 5865              		.cfi_endproc
 5866              	.LFE52:
 5868 004a 00BF     		.section	.rodata
 5869 0005 000000   		.align	2
 5870              	.LC1:
 5871 0008 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 5871      25750925 
 5871      75092575 
 5871      0D0A00
 5872              		.section	.text.vTaskList,"ax",%progbits
 5873              		.align	2
 5874              		.global	vTaskList
 5875              		.thumb
 5876              		.thumb_func
ARM GAS  /tmp/cc623FKg.s 			page 177


 5878              	vTaskList:
 5879              	.LFB53:
3962:../../../FreeRTOS_9_0/Source/tasks.c **** 
3963:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3964:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3965:../../../FreeRTOS_9_0/Source/tasks.c **** 
3966:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3967:../../../FreeRTOS_9_0/Source/tasks.c **** 
3968:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3969:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5880              		.loc 1 3969 0
 5881              		.cfi_startproc
 5882              		@ args = 0, pretend = 0, frame = 24
 5883              		@ frame_needed = 1, uses_anonymous_args = 0
 5884 0000 B0B5     		push	{r4, r5, r7, lr}
 5885              	.LCFI247:
 5886              		.cfi_def_cfa_offset 16
 5887              		.cfi_offset 4, -16
 5888              		.cfi_offset 5, -12
 5889              		.cfi_offset 7, -8
 5890              		.cfi_offset 14, -4
 5891 0002 88B0     		sub	sp, sp, #32
 5892              	.LCFI248:
 5893              		.cfi_def_cfa_offset 48
 5894 0004 02AF     		add	r7, sp, #8
 5895              	.LCFI249:
 5896              		.cfi_def_cfa 7, 40
 5897 0006 7860     		str	r0, [r7, #4]
3970:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3971:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3972:../../../FreeRTOS_9_0/Source/tasks.c **** 	char cStatus;
3973:../../../FreeRTOS_9_0/Source/tasks.c **** 
3974:../../../FreeRTOS_9_0/Source/tasks.c **** 		/*
3975:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * PLEASE NOTE:
3976:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3977:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3978:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3979:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * scheduler.
3980:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3981:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3982:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3983:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * displays task names, states and stack usage.
3984:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3985:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3986:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3987:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3988:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3989:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3990:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3991:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * snprintf() implementation!).
3992:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3993:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3994:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3995:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * through a call to vTaskList().
3996:../../../FreeRTOS_9_0/Source/tasks.c **** 		 */
3997:../../../FreeRTOS_9_0/Source/tasks.c **** 
3998:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 178


3999:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4000:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
 5898              		.loc 1 4000 0
 5899 0008 7B68     		ldr	r3, [r7, #4]
 5900 000a 0022     		movs	r2, #0
 5901 000c 1A70     		strb	r2, [r3]
4001:../../../FreeRTOS_9_0/Source/tasks.c **** 
4002:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4003:../../../FreeRTOS_9_0/Source/tasks.c **** 		function is executing. */
4004:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 5902              		.loc 1 4004 0
 5903 000e 444B     		ldr	r3, .L385
 5904 0010 1B68     		ldr	r3, [r3]
 5905 0012 FB60     		str	r3, [r7, #12]
4005:../../../FreeRTOS_9_0/Source/tasks.c **** 
4006:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4007:../../../FreeRTOS_9_0/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4008:../../../FreeRTOS_9_0/Source/tasks.c **** 		equate to NULL. */
4009:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 5906              		.loc 1 4009 0
 5907 0014 424B     		ldr	r3, .L385
 5908 0016 1A68     		ldr	r2, [r3]
 5909 0018 1346     		mov	r3, r2
 5910 001a DB00     		lsls	r3, r3, #3
 5911 001c 1344     		add	r3, r3, r2
 5912 001e 9B00     		lsls	r3, r3, #2
 5913 0020 1846     		mov	r0, r3
 5914 0022 FFF7FEFF 		bl	pvPortMalloc
 5915 0026 3861     		str	r0, [r7, #16]
4010:../../../FreeRTOS_9_0/Source/tasks.c **** 
4011:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
 5916              		.loc 1 4011 0
 5917 0028 3B69     		ldr	r3, [r7, #16]
 5918 002a 002B     		cmp	r3, #0
 5919 002c 75D0     		beq	.L374
4012:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4013:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the (binary) data. */
4014:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 5920              		.loc 1 4014 0
 5921 002e FB68     		ldr	r3, [r7, #12]
 5922 0030 3869     		ldr	r0, [r7, #16]
 5923 0032 1946     		mov	r1, r3
 5924 0034 0022     		movs	r2, #0
 5925 0036 FFF7FEFF 		bl	uxTaskGetSystemState
 5926 003a 0346     		mov	r3, r0
 5927 003c FB60     		str	r3, [r7, #12]
4015:../../../FreeRTOS_9_0/Source/tasks.c **** 
4016:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4017:../../../FreeRTOS_9_0/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 5928              		.loc 1 4017 0
 5929 003e 0023     		movs	r3, #0
 5930 0040 BB60     		str	r3, [r7, #8]
 5931 0042 63E0     		b	.L376
 5932              	.L384:
4018:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4019:../../../FreeRTOS_9_0/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 5933              		.loc 1 4019 0
ARM GAS  /tmp/cc623FKg.s 			page 179


 5934 0044 BA68     		ldr	r2, [r7, #8]
 5935 0046 1346     		mov	r3, r2
 5936 0048 DB00     		lsls	r3, r3, #3
 5937 004a 1344     		add	r3, r3, r2
 5938 004c 9B00     		lsls	r3, r3, #2
 5939 004e 1A46     		mov	r2, r3
 5940 0050 3B69     		ldr	r3, [r7, #16]
 5941 0052 1344     		add	r3, r3, r2
 5942 0054 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 5943 0056 013B     		subs	r3, r3, #1
 5944 0058 032B     		cmp	r3, #3
 5945 005a 17D8     		bhi	.L377
 5946 005c 01A2     		adr	r2, .L379
 5947 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5948 0062 00BF     		.p2align 2
 5949              	.L379:
 5950 0064 75000000 		.word	.L378+1
 5951 0068 7B000000 		.word	.L380+1
 5952 006c 81000000 		.word	.L381+1
 5953 0070 87000000 		.word	.L382+1
 5954              		.p2align 1
 5955              	.L378:
4020:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4021:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
 5956              		.loc 1 4021 0
 5957 0074 5223     		movs	r3, #82
 5958 0076 FB75     		strb	r3, [r7, #23]
4022:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5959              		.loc 1 4022 0
 5960 0078 0BE0     		b	.L383
 5961              	.L380:
4023:../../../FreeRTOS_9_0/Source/tasks.c **** 
4024:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 5962              		.loc 1 4024 0
 5963 007a 4223     		movs	r3, #66
 5964 007c FB75     		strb	r3, [r7, #23]
4025:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5965              		.loc 1 4025 0
 5966 007e 08E0     		b	.L383
 5967              	.L381:
4026:../../../FreeRTOS_9_0/Source/tasks.c **** 
4027:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 5968              		.loc 1 4027 0
 5969 0080 5323     		movs	r3, #83
 5970 0082 FB75     		strb	r3, [r7, #23]
4028:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5971              		.loc 1 4028 0
 5972 0084 05E0     		b	.L383
 5973              	.L382:
4029:../../../FreeRTOS_9_0/Source/tasks.c **** 
4030:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
 5974              		.loc 1 4030 0
 5975 0086 4423     		movs	r3, #68
 5976 0088 FB75     		strb	r3, [r7, #23]
4031:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5977              		.loc 1 4031 0
 5978 008a 02E0     		b	.L383
ARM GAS  /tmp/cc623FKg.s 			page 180


 5979              	.L377:
4032:../../../FreeRTOS_9_0/Source/tasks.c **** 
4033:../../../FreeRTOS_9_0/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4034:../../../FreeRTOS_9_0/Source/tasks.c **** 										to prevent static checking errors. */
4035:../../../FreeRTOS_9_0/Source/tasks.c **** 										cStatus = 0x00;
 5980              		.loc 1 4035 0
 5981 008c 0023     		movs	r3, #0
 5982 008e FB75     		strb	r3, [r7, #23]
4036:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
 5983              		.loc 1 4036 0
 5984 0090 00BF     		nop
 5985              	.L383:
4037:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4038:../../../FreeRTOS_9_0/Source/tasks.c **** 
4039:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4040:../../../FreeRTOS_9_0/Source/tasks.c **** 				can be printed in tabular form more easily. */
4041:../../../FreeRTOS_9_0/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 5986              		.loc 1 4041 0 discriminator 2
 5987 0092 BA68     		ldr	r2, [r7, #8]
 5988 0094 1346     		mov	r3, r2
 5989 0096 DB00     		lsls	r3, r3, #3
 5990 0098 1344     		add	r3, r3, r2
 5991 009a 9B00     		lsls	r3, r3, #2
 5992 009c 1A46     		mov	r2, r3
 5993 009e 3B69     		ldr	r3, [r7, #16]
 5994 00a0 1344     		add	r3, r3, r2
 5995 00a2 5B68     		ldr	r3, [r3, #4]
 5996 00a4 7868     		ldr	r0, [r7, #4]
 5997 00a6 1946     		mov	r1, r3
 5998 00a8 FFF7FEFF 		bl	prvWriteNameToBuffer
 5999 00ac 7860     		str	r0, [r7, #4]
4042:../../../FreeRTOS_9_0/Source/tasks.c **** 
4043:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Write the rest of the string. */
4044:../../../FreeRTOS_9_0/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 6000              		.loc 1 4044 0 discriminator 2
 6001 00ae FD7D     		ldrb	r5, [r7, #23]	@ zero_extendqisi2
 6002 00b0 BA68     		ldr	r2, [r7, #8]
 6003 00b2 1346     		mov	r3, r2
 6004 00b4 DB00     		lsls	r3, r3, #3
 6005 00b6 1344     		add	r3, r3, r2
 6006 00b8 9B00     		lsls	r3, r3, #2
 6007 00ba 1A46     		mov	r2, r3
 6008 00bc 3B69     		ldr	r3, [r7, #16]
 6009 00be 1344     		add	r3, r3, r2
 6010 00c0 1C69     		ldr	r4, [r3, #16]
 6011 00c2 BA68     		ldr	r2, [r7, #8]
 6012 00c4 1346     		mov	r3, r2
 6013 00c6 DB00     		lsls	r3, r3, #3
 6014 00c8 1344     		add	r3, r3, r2
 6015 00ca 9B00     		lsls	r3, r3, #2
 6016 00cc 1A46     		mov	r2, r3
 6017 00ce 3B69     		ldr	r3, [r7, #16]
 6018 00d0 1344     		add	r3, r3, r2
 6019 00d2 1B8C     		ldrh	r3, [r3, #32]
 6020 00d4 1946     		mov	r1, r3
 6021 00d6 BA68     		ldr	r2, [r7, #8]
 6022 00d8 1346     		mov	r3, r2
ARM GAS  /tmp/cc623FKg.s 			page 181


 6023 00da DB00     		lsls	r3, r3, #3
 6024 00dc 1344     		add	r3, r3, r2
 6025 00de 9B00     		lsls	r3, r3, #2
 6026 00e0 1A46     		mov	r2, r3
 6027 00e2 3B69     		ldr	r3, [r7, #16]
 6028 00e4 1344     		add	r3, r3, r2
 6029 00e6 9B68     		ldr	r3, [r3, #8]
 6030 00e8 0091     		str	r1, [sp]
 6031 00ea 0193     		str	r3, [sp, #4]
 6032 00ec 7868     		ldr	r0, [r7, #4]
 6033 00ee 0D49     		ldr	r1, .L385+4
 6034 00f0 2A46     		mov	r2, r5
 6035 00f2 2346     		mov	r3, r4
 6036 00f4 FFF7FEFF 		bl	sprintf
4045:../../../FreeRTOS_9_0/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 6037              		.loc 1 4045 0 discriminator 2
 6038 00f8 7868     		ldr	r0, [r7, #4]
 6039 00fa FFF7FEFF 		bl	strlen
 6040 00fe 0246     		mov	r2, r0
 6041 0100 7B68     		ldr	r3, [r7, #4]
 6042 0102 1344     		add	r3, r3, r2
 6043 0104 7B60     		str	r3, [r7, #4]
4017:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 6044              		.loc 1 4017 0 discriminator 2
 6045 0106 BB68     		ldr	r3, [r7, #8]
 6046 0108 0133     		adds	r3, r3, #1
 6047 010a BB60     		str	r3, [r7, #8]
 6048              	.L376:
4017:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 6049              		.loc 1 4017 0 is_stmt 0 discriminator 1
 6050 010c BA68     		ldr	r2, [r7, #8]
 6051 010e FB68     		ldr	r3, [r7, #12]
 6052 0110 9A42     		cmp	r2, r3
 6053 0112 97D3     		bcc	.L384
4046:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4047:../../../FreeRTOS_9_0/Source/tasks.c **** 
4048:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4049:../../../FreeRTOS_9_0/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4050:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
 6054              		.loc 1 4050 0 is_stmt 1
 6055 0114 3869     		ldr	r0, [r7, #16]
 6056 0116 FFF7FEFF 		bl	vPortFree
 6057              	.L374:
4051:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4052:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4053:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4054:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4055:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4056:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6058              		.loc 1 4056 0
 6059 011a 1837     		adds	r7, r7, #24
 6060              	.LCFI250:
 6061              		.cfi_def_cfa_offset 16
 6062 011c BD46     		mov	sp, r7
 6063              	.LCFI251:
 6064              		.cfi_def_cfa_register 13
 6065              		@ sp needed
ARM GAS  /tmp/cc623FKg.s 			page 182


 6066 011e B0BD     		pop	{r4, r5, r7, pc}
 6067              	.L386:
 6068              		.align	2
 6069              	.L385:
 6070 0120 00000000 		.word	uxCurrentNumberOfTasks
 6071 0124 08000000 		.word	.LC1
 6072              		.cfi_endproc
 6073              	.LFE53:
 6075              		.section	.rodata
 6076 0017 00       		.align	2
 6077              	.LC2:
 6078 0018 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 6078      09257525 
 6078      250D0A00 
 6079              		.align	2
 6080              	.LC3:
 6081 0024 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 6081      093C3125 
 6081      250D0A00 
 6082              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 6083              		.align	2
 6084              		.global	vTaskGetRunTimeStats
 6085              		.thumb
 6086              		.thumb_func
 6088              	vTaskGetRunTimeStats:
 6089              	.LFB54:
4057:../../../FreeRTOS_9_0/Source/tasks.c **** 
4058:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4059:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
4060:../../../FreeRTOS_9_0/Source/tasks.c **** 
4061:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4062:../../../FreeRTOS_9_0/Source/tasks.c **** 
4063:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4064:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6090              		.loc 1 4064 0
 6091              		.cfi_startproc
 6092              		@ args = 0, pretend = 0, frame = 32
 6093              		@ frame_needed = 1, uses_anonymous_args = 0
 6094 0000 80B5     		push	{r7, lr}
 6095              	.LCFI252:
 6096              		.cfi_def_cfa_offset 8
 6097              		.cfi_offset 7, -8
 6098              		.cfi_offset 14, -4
 6099 0002 88B0     		sub	sp, sp, #32
 6100              	.LCFI253:
 6101              		.cfi_def_cfa_offset 40
 6102 0004 00AF     		add	r7, sp, #0
 6103              	.LCFI254:
 6104              		.cfi_def_cfa_register 7
 6105 0006 7860     		str	r0, [r7, #4]
4065:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4066:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4067:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4068:../../../FreeRTOS_9_0/Source/tasks.c **** 
4069:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4070:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4071:../../../FreeRTOS_9_0/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
ARM GAS  /tmp/cc623FKg.s 			page 183


4072:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4073:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
4074:../../../FreeRTOS_9_0/Source/tasks.c **** 
4075:../../../FreeRTOS_9_0/Source/tasks.c **** 		/*
4076:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * PLEASE NOTE:
4077:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4078:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4079:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4080:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * scheduler.
4081:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4082:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4083:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4084:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4085:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * in both absolute and percentage terms.
4086:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4087:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4088:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4089:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4090:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4091:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4092:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4093:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * a full snprintf() implementation!).
4094:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4095:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4096:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4097:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4098:../../../FreeRTOS_9_0/Source/tasks.c **** 		 */
4099:../../../FreeRTOS_9_0/Source/tasks.c **** 
4100:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4101:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
 6106              		.loc 1 4101 0
 6107 0008 7B68     		ldr	r3, [r7, #4]
 6108 000a 0022     		movs	r2, #0
 6109 000c 1A70     		strb	r2, [r3]
4102:../../../FreeRTOS_9_0/Source/tasks.c **** 
4103:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4104:../../../FreeRTOS_9_0/Source/tasks.c **** 		function is executing. */
4105:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 6110              		.loc 1 4105 0
 6111 000e 3B4B     		ldr	r3, .L394
 6112 0010 1B68     		ldr	r3, [r3]
 6113 0012 7B61     		str	r3, [r7, #20]
4106:../../../FreeRTOS_9_0/Source/tasks.c **** 
4107:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4108:../../../FreeRTOS_9_0/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4109:../../../FreeRTOS_9_0/Source/tasks.c **** 		equate to NULL. */
4110:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 6114              		.loc 1 4110 0
 6115 0014 394B     		ldr	r3, .L394
 6116 0016 1A68     		ldr	r2, [r3]
 6117 0018 1346     		mov	r3, r2
 6118 001a DB00     		lsls	r3, r3, #3
 6119 001c 1344     		add	r3, r3, r2
 6120 001e 9B00     		lsls	r3, r3, #2
 6121 0020 1846     		mov	r0, r3
 6122 0022 FFF7FEFF 		bl	pvPortMalloc
 6123 0026 F861     		str	r0, [r7, #28]
ARM GAS  /tmp/cc623FKg.s 			page 184


4111:../../../FreeRTOS_9_0/Source/tasks.c **** 
4112:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
 6124              		.loc 1 4112 0
 6125 0028 FB69     		ldr	r3, [r7, #28]
 6126 002a 002B     		cmp	r3, #0
 6127 002c 62D0     		beq	.L387
4113:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4114:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the (binary) data. */
4115:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 6128              		.loc 1 4115 0
 6129 002e 7A69     		ldr	r2, [r7, #20]
 6130 0030 07F10C03 		add	r3, r7, #12
 6131 0034 F869     		ldr	r0, [r7, #28]
 6132 0036 1146     		mov	r1, r2
 6133 0038 1A46     		mov	r2, r3
 6134 003a FFF7FEFF 		bl	uxTaskGetSystemState
 6135 003e 0346     		mov	r3, r0
 6136 0040 7B61     		str	r3, [r7, #20]
4116:../../../FreeRTOS_9_0/Source/tasks.c **** 
4117:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* For percentage calculations. */
4118:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulTotalTime /= 100UL;
 6137              		.loc 1 4118 0
 6138 0042 FB68     		ldr	r3, [r7, #12]
 6139 0044 2E4A     		ldr	r2, .L394+4
 6140 0046 A2FB0323 		umull	r2, r3, r2, r3
 6141 004a 5B09     		lsrs	r3, r3, #5
 6142 004c FB60     		str	r3, [r7, #12]
4119:../../../FreeRTOS_9_0/Source/tasks.c **** 
4120:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4121:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ulTotalTime > 0 )
 6143              		.loc 1 4121 0
 6144 004e FB68     		ldr	r3, [r7, #12]
 6145 0050 002B     		cmp	r3, #0
 6146 0052 4CD0     		beq	.L389
4122:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4123:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4124:../../../FreeRTOS_9_0/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
 6147              		.loc 1 4124 0
 6148 0054 0023     		movs	r3, #0
 6149 0056 3B61     		str	r3, [r7, #16]
 6150 0058 45E0     		b	.L390
 6151              	.L393:
4125:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4126:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4127:../../../FreeRTOS_9_0/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4128:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4129:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 6152              		.loc 1 4129 0
 6153 005a 3A69     		ldr	r2, [r7, #16]
 6154 005c 1346     		mov	r3, r2
 6155 005e DB00     		lsls	r3, r3, #3
 6156 0060 1344     		add	r3, r3, r2
 6157 0062 9B00     		lsls	r3, r3, #2
 6158 0064 1A46     		mov	r2, r3
 6159 0066 FB69     		ldr	r3, [r7, #28]
 6160 0068 1344     		add	r3, r3, r2
 6161 006a 9A69     		ldr	r2, [r3, #24]
ARM GAS  /tmp/cc623FKg.s 			page 185


 6162 006c FB68     		ldr	r3, [r7, #12]
 6163 006e B2FBF3F3 		udiv	r3, r2, r3
 6164 0072 BB61     		str	r3, [r7, #24]
4130:../../../FreeRTOS_9_0/Source/tasks.c **** 
4131:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Write the task name to the string, padding with
4132:../../../FreeRTOS_9_0/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4133:../../../FreeRTOS_9_0/Source/tasks.c **** 					easily. */
4134:../../../FreeRTOS_9_0/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 6165              		.loc 1 4134 0
 6166 0074 3A69     		ldr	r2, [r7, #16]
 6167 0076 1346     		mov	r3, r2
 6168 0078 DB00     		lsls	r3, r3, #3
 6169 007a 1344     		add	r3, r3, r2
 6170 007c 9B00     		lsls	r3, r3, #2
 6171 007e 1A46     		mov	r2, r3
 6172 0080 FB69     		ldr	r3, [r7, #28]
 6173 0082 1344     		add	r3, r3, r2
 6174 0084 5B68     		ldr	r3, [r3, #4]
 6175 0086 7868     		ldr	r0, [r7, #4]
 6176 0088 1946     		mov	r1, r3
 6177 008a FFF7FEFF 		bl	prvWriteNameToBuffer
 6178 008e 7860     		str	r0, [r7, #4]
4135:../../../FreeRTOS_9_0/Source/tasks.c **** 
4136:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
 6179              		.loc 1 4136 0
 6180 0090 BB69     		ldr	r3, [r7, #24]
 6181 0092 002B     		cmp	r3, #0
 6182 0094 0FD0     		beq	.L391
4137:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4138:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4139:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4140:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4141:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4142:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
4143:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4144:../../../FreeRTOS_9_0/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4145:../../../FreeRTOS_9_0/Source/tasks.c **** 							printf() library can be used. */
4146:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
 6183              		.loc 1 4146 0
 6184 0096 3A69     		ldr	r2, [r7, #16]
 6185 0098 1346     		mov	r3, r2
 6186 009a DB00     		lsls	r3, r3, #3
 6187 009c 1344     		add	r3, r3, r2
 6188 009e 9B00     		lsls	r3, r3, #2
 6189 00a0 1A46     		mov	r2, r3
 6190 00a2 FB69     		ldr	r3, [r7, #28]
 6191 00a4 1344     		add	r3, r3, r2
 6192 00a6 9B69     		ldr	r3, [r3, #24]
 6193 00a8 7868     		ldr	r0, [r7, #4]
 6194 00aa 1649     		ldr	r1, .L394+8
 6195 00ac 1A46     		mov	r2, r3
 6196 00ae BB69     		ldr	r3, [r7, #24]
 6197 00b0 FFF7FEFF 		bl	sprintf
 6198 00b4 0DE0     		b	.L392
 6199              	.L391:
4147:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4148:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
ARM GAS  /tmp/cc623FKg.s 			page 186


4149:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4150:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4151:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4152:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4153:../../../FreeRTOS_9_0/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4154:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4155:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4156:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4157:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4158:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
4159:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4160:../../../FreeRTOS_9_0/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4161:../../../FreeRTOS_9_0/Source/tasks.c **** 							printf() library can be used. */
4162:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
 6200              		.loc 1 4162 0
 6201 00b6 3A69     		ldr	r2, [r7, #16]
 6202 00b8 1346     		mov	r3, r2
 6203 00ba DB00     		lsls	r3, r3, #3
 6204 00bc 1344     		add	r3, r3, r2
 6205 00be 9B00     		lsls	r3, r3, #2
 6206 00c0 1A46     		mov	r2, r3
 6207 00c2 FB69     		ldr	r3, [r7, #28]
 6208 00c4 1344     		add	r3, r3, r2
 6209 00c6 9B69     		ldr	r3, [r3, #24]
 6210 00c8 7868     		ldr	r0, [r7, #4]
 6211 00ca 0F49     		ldr	r1, .L394+12
 6212 00cc 1A46     		mov	r2, r3
 6213 00ce FFF7FEFF 		bl	sprintf
 6214              	.L392:
4163:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4164:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
4165:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4166:../../../FreeRTOS_9_0/Source/tasks.c **** 
4167:../../../FreeRTOS_9_0/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
 6215              		.loc 1 4167 0 discriminator 2
 6216 00d2 7868     		ldr	r0, [r7, #4]
 6217 00d4 FFF7FEFF 		bl	strlen
 6218 00d8 0246     		mov	r2, r0
 6219 00da 7B68     		ldr	r3, [r7, #4]
 6220 00dc 1344     		add	r3, r3, r2
 6221 00de 7B60     		str	r3, [r7, #4]
4124:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 6222              		.loc 1 4124 0 discriminator 2
 6223 00e0 3B69     		ldr	r3, [r7, #16]
 6224 00e2 0133     		adds	r3, r3, #1
 6225 00e4 3B61     		str	r3, [r7, #16]
 6226              	.L390:
4124:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 6227              		.loc 1 4124 0 is_stmt 0 discriminator 1
 6228 00e6 3A69     		ldr	r2, [r7, #16]
 6229 00e8 7B69     		ldr	r3, [r7, #20]
 6230 00ea 9A42     		cmp	r2, r3
 6231 00ec B5D3     		bcc	.L393
 6232              	.L389:
4168:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4169:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4170:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
ARM GAS  /tmp/cc623FKg.s 			page 187


4171:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4172:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4173:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4174:../../../FreeRTOS_9_0/Source/tasks.c **** 
4175:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4176:../../../FreeRTOS_9_0/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4177:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
 6233              		.loc 1 4177 0 is_stmt 1
 6234 00ee F869     		ldr	r0, [r7, #28]
 6235 00f0 FFF7FEFF 		bl	vPortFree
 6236              	.L387:
4178:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4179:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4180:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4181:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4182:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4183:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6237              		.loc 1 4183 0
 6238 00f4 2037     		adds	r7, r7, #32
 6239              	.LCFI255:
 6240              		.cfi_def_cfa_offset 8
 6241 00f6 BD46     		mov	sp, r7
 6242              	.LCFI256:
 6243              		.cfi_def_cfa_register 13
 6244              		@ sp needed
 6245 00f8 80BD     		pop	{r7, pc}
 6246              	.L395:
 6247 00fa 00BF     		.align	2
 6248              	.L394:
 6249 00fc 00000000 		.word	uxCurrentNumberOfTasks
 6250 0100 1F85EB51 		.word	1374389535
 6251 0104 18000000 		.word	.LC2
 6252 0108 24000000 		.word	.LC3
 6253              		.cfi_endproc
 6254              	.LFE54:
 6256              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6257              		.align	2
 6258              		.global	uxTaskResetEventItemValue
 6259              		.thumb
 6260              		.thumb_func
 6262              	uxTaskResetEventItemValue:
 6263              	.LFB55:
4184:../../../FreeRTOS_9_0/Source/tasks.c **** 
4185:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4186:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4187:../../../FreeRTOS_9_0/Source/tasks.c **** 
4188:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4189:../../../FreeRTOS_9_0/Source/tasks.c **** {
 6264              		.loc 1 4189 0
 6265              		.cfi_startproc
 6266              		@ args = 0, pretend = 0, frame = 8
 6267              		@ frame_needed = 1, uses_anonymous_args = 0
 6268              		@ link register save eliminated.
 6269 0000 80B4     		push	{r7}
 6270              	.LCFI257:
 6271              		.cfi_def_cfa_offset 4
 6272              		.cfi_offset 7, -4
ARM GAS  /tmp/cc623FKg.s 			page 188


 6273 0002 83B0     		sub	sp, sp, #12
 6274              	.LCFI258:
 6275              		.cfi_def_cfa_offset 16
 6276 0004 00AF     		add	r7, sp, #0
 6277              	.LCFI259:
 6278              		.cfi_def_cfa_register 7
4190:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t uxReturn;
4191:../../../FreeRTOS_9_0/Source/tasks.c **** 
4192:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6279              		.loc 1 4192 0
 6280 0006 094B     		ldr	r3, .L398
 6281 0008 1B68     		ldr	r3, [r3]
 6282 000a 9B69     		ldr	r3, [r3, #24]
 6283 000c 7B60     		str	r3, [r7, #4]
4193:../../../FreeRTOS_9_0/Source/tasks.c **** 
4194:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4195:../../../FreeRTOS_9_0/Source/tasks.c **** 	queues and semaphores. */
4196:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6284              		.loc 1 4196 0
 6285 000e 074B     		ldr	r3, .L398
 6286 0010 1B68     		ldr	r3, [r3]
 6287 0012 064A     		ldr	r2, .L398
 6288 0014 1268     		ldr	r2, [r2]
 6289 0016 D26A     		ldr	r2, [r2, #44]
 6290 0018 C2F10702 		rsb	r2, r2, #7
 6291 001c 9A61     		str	r2, [r3, #24]
4197:../../../FreeRTOS_9_0/Source/tasks.c **** 
4198:../../../FreeRTOS_9_0/Source/tasks.c **** 	return uxReturn;
 6292              		.loc 1 4198 0
 6293 001e 7B68     		ldr	r3, [r7, #4]
4199:../../../FreeRTOS_9_0/Source/tasks.c **** }
 6294              		.loc 1 4199 0
 6295 0020 1846     		mov	r0, r3
 6296 0022 0C37     		adds	r7, r7, #12
 6297              	.LCFI260:
 6298              		.cfi_def_cfa_offset 4
 6299 0024 BD46     		mov	sp, r7
 6300              	.LCFI261:
 6301              		.cfi_def_cfa_register 13
 6302              		@ sp needed
 6303 0026 5DF8047B 		ldr	r7, [sp], #4
 6304              	.LCFI262:
 6305              		.cfi_restore 7
 6306              		.cfi_def_cfa_offset 0
 6307 002a 7047     		bx	lr
 6308              	.L399:
 6309              		.align	2
 6310              	.L398:
 6311 002c 00000000 		.word	pxCurrentTCB
 6312              		.cfi_endproc
 6313              	.LFE55:
 6315              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6316              		.align	2
 6317              		.global	pvTaskIncrementMutexHeldCount
 6318              		.thumb
 6319              		.thumb_func
 6321              	pvTaskIncrementMutexHeldCount:
ARM GAS  /tmp/cc623FKg.s 			page 189


 6322              	.LFB56:
4200:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4201:../../../FreeRTOS_9_0/Source/tasks.c **** 
4202:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4203:../../../FreeRTOS_9_0/Source/tasks.c **** 
4204:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4205:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6323              		.loc 1 4205 0
 6324              		.cfi_startproc
 6325              		@ args = 0, pretend = 0, frame = 0
 6326              		@ frame_needed = 1, uses_anonymous_args = 0
 6327              		@ link register save eliminated.
 6328 0000 80B4     		push	{r7}
 6329              	.LCFI263:
 6330              		.cfi_def_cfa_offset 4
 6331              		.cfi_offset 7, -4
 6332 0002 00AF     		add	r7, sp, #0
 6333              	.LCFI264:
 6334              		.cfi_def_cfa_register 7
4206:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4207:../../../FreeRTOS_9_0/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4208:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6335              		.loc 1 4208 0
 6336 0004 074B     		ldr	r3, .L403
 6337 0006 1B68     		ldr	r3, [r3]
 6338 0008 002B     		cmp	r3, #0
 6339 000a 04D0     		beq	.L401
4209:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4210:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6340              		.loc 1 4210 0
 6341 000c 054B     		ldr	r3, .L403
 6342 000e 1B68     		ldr	r3, [r3]
 6343 0010 1A6D     		ldr	r2, [r3, #80]
 6344 0012 0132     		adds	r2, r2, #1
 6345 0014 1A65     		str	r2, [r3, #80]
 6346              	.L401:
4211:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4212:../../../FreeRTOS_9_0/Source/tasks.c **** 
4213:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pxCurrentTCB;
 6347              		.loc 1 4213 0
 6348 0016 034B     		ldr	r3, .L403
 6349 0018 1B68     		ldr	r3, [r3]
4214:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6350              		.loc 1 4214 0
 6351 001a 1846     		mov	r0, r3
 6352 001c BD46     		mov	sp, r7
 6353              	.LCFI265:
 6354              		.cfi_def_cfa_register 13
 6355              		@ sp needed
 6356 001e 5DF8047B 		ldr	r7, [sp], #4
 6357              	.LCFI266:
 6358              		.cfi_restore 7
 6359              		.cfi_def_cfa_offset 0
 6360 0022 7047     		bx	lr
 6361              	.L404:
 6362              		.align	2
 6363              	.L403:
ARM GAS  /tmp/cc623FKg.s 			page 190


 6364 0024 00000000 		.word	pxCurrentTCB
 6365              		.cfi_endproc
 6366              	.LFE56:
 6368              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6369              		.align	2
 6370              		.global	ulTaskNotifyTake
 6371              		.thumb
 6372              		.thumb_func
 6374              	ulTaskNotifyTake:
 6375              	.LFB57:
4215:../../../FreeRTOS_9_0/Source/tasks.c **** 
4216:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4217:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4218:../../../FreeRTOS_9_0/Source/tasks.c **** 
4219:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4220:../../../FreeRTOS_9_0/Source/tasks.c **** 
4221:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4222:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6376              		.loc 1 4222 0
 6377              		.cfi_startproc
 6378              		@ args = 0, pretend = 0, frame = 16
 6379              		@ frame_needed = 1, uses_anonymous_args = 0
 6380 0000 80B5     		push	{r7, lr}
 6381              	.LCFI267:
 6382              		.cfi_def_cfa_offset 8
 6383              		.cfi_offset 7, -8
 6384              		.cfi_offset 14, -4
 6385 0002 84B0     		sub	sp, sp, #16
 6386              	.LCFI268:
 6387              		.cfi_def_cfa_offset 24
 6388 0004 00AF     		add	r7, sp, #0
 6389              	.LCFI269:
 6390              		.cfi_def_cfa_register 7
 6391 0006 7860     		str	r0, [r7, #4]
 6392 0008 3960     		str	r1, [r7]
4223:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulReturn;
4224:../../../FreeRTOS_9_0/Source/tasks.c **** 
4225:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6393              		.loc 1 4225 0
 6394 000a FFF7FEFF 		bl	vPortEnterCritical
4226:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4227:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4228:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6395              		.loc 1 4228 0
 6396 000e 214B     		ldr	r3, .L411
 6397 0010 1B68     		ldr	r3, [r3]
 6398 0012 5B6E     		ldr	r3, [r3, #100]
 6399 0014 002B     		cmp	r3, #0
 6400 0016 13D1     		bne	.L406
4229:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4230:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4231:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6401              		.loc 1 4231 0
 6402 0018 1E4B     		ldr	r3, .L411
 6403 001a 1B68     		ldr	r3, [r3]
 6404 001c 0122     		movs	r2, #1
 6405 001e 83F86820 		strb	r2, [r3, #104]
ARM GAS  /tmp/cc623FKg.s 			page 191


4232:../../../FreeRTOS_9_0/Source/tasks.c **** 
4233:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6406              		.loc 1 4233 0
 6407 0022 3B68     		ldr	r3, [r7]
 6408 0024 002B     		cmp	r3, #0
 6409 0026 0BD0     		beq	.L406
4234:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4235:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6410              		.loc 1 4235 0
 6411 0028 3868     		ldr	r0, [r7]
 6412 002a 0121     		movs	r1, #1
 6413 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4236:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4237:../../../FreeRTOS_9_0/Source/tasks.c **** 
4238:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4239:../../../FreeRTOS_9_0/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4240:../../../FreeRTOS_9_0/Source/tasks.c **** 					critical section exits) - but it is not something that
4241:../../../FreeRTOS_9_0/Source/tasks.c **** 					application code should ever do. */
4242:../../../FreeRTOS_9_0/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6414              		.loc 1 4242 0
 6415 0030 194B     		ldr	r3, .L411+4
 6416 0032 4FF08052 		mov	r2, #268435456
 6417 0036 1A60     		str	r2, [r3]
 6418              	@ 4242 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6419 0038 BFF34F8F 		dsb
 6420              	@ 0 "" 2
 6421              	@ 4242 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6422 003c BFF36F8F 		isb
 6423              	@ 0 "" 2
 6424              		.thumb
 6425              	.L406:
4243:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4244:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4245:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4246:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4247:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4248:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4249:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4250:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4251:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4252:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4253:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4254:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6426              		.loc 1 4254 0
 6427 0040 FFF7FEFF 		bl	vPortExitCritical
4255:../../../FreeRTOS_9_0/Source/tasks.c **** 
4256:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6428              		.loc 1 4256 0
 6429 0044 FFF7FEFF 		bl	vPortEnterCritical
4257:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4258:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
 6430              		.loc 1 4258 0
 6431 0048 7B68     		ldr	r3, [r7, #4]
 6432 004a 4220     		movs	r0, #66
 6433 004c 1946     		mov	r1, r3
 6434 004e 3A68     		ldr	r2, [r7]
 6435 0050 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
ARM GAS  /tmp/cc623FKg.s 			page 192


4259:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6436              		.loc 1 4259 0
 6437 0054 0F4B     		ldr	r3, .L411
 6438 0056 1B68     		ldr	r3, [r3]
 6439 0058 5B6E     		ldr	r3, [r3, #100]
 6440 005a FB60     		str	r3, [r7, #12]
4260:../../../FreeRTOS_9_0/Source/tasks.c **** 
4261:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ulReturn != 0UL )
 6441              		.loc 1 4261 0
 6442 005c FB68     		ldr	r3, [r7, #12]
 6443 005e 002B     		cmp	r3, #0
 6444 0060 0CD0     		beq	.L407
4262:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4263:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6445              		.loc 1 4263 0
 6446 0062 7B68     		ldr	r3, [r7, #4]
 6447 0064 002B     		cmp	r3, #0
 6448 0066 04D0     		beq	.L408
4264:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4265:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6449              		.loc 1 4265 0
 6450 0068 0A4B     		ldr	r3, .L411
 6451 006a 1B68     		ldr	r3, [r3]
 6452 006c 0022     		movs	r2, #0
 6453 006e 5A66     		str	r2, [r3, #100]
 6454 0070 04E0     		b	.L407
 6455              	.L408:
4266:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4267:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4268:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4269:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 6456              		.loc 1 4269 0
 6457 0072 084B     		ldr	r3, .L411
 6458 0074 1B68     		ldr	r3, [r3]
 6459 0076 FA68     		ldr	r2, [r7, #12]
 6460 0078 013A     		subs	r2, r2, #1
 6461 007a 5A66     		str	r2, [r3, #100]
 6462              	.L407:
4270:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4271:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4272:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4273:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4274:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4275:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4276:../../../FreeRTOS_9_0/Source/tasks.c **** 
4277:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6463              		.loc 1 4277 0
 6464 007c 054B     		ldr	r3, .L411
 6465 007e 1B68     		ldr	r3, [r3]
 6466 0080 0022     		movs	r2, #0
 6467 0082 83F86820 		strb	r2, [r3, #104]
4278:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4279:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6468              		.loc 1 4279 0
 6469 0086 FFF7FEFF 		bl	vPortExitCritical
4280:../../../FreeRTOS_9_0/Source/tasks.c **** 
4281:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ulReturn;
ARM GAS  /tmp/cc623FKg.s 			page 193


 6470              		.loc 1 4281 0
 6471 008a FB68     		ldr	r3, [r7, #12]
4282:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6472              		.loc 1 4282 0
 6473 008c 1846     		mov	r0, r3
 6474 008e 1037     		adds	r7, r7, #16
 6475              	.LCFI270:
 6476              		.cfi_def_cfa_offset 8
 6477 0090 BD46     		mov	sp, r7
 6478              	.LCFI271:
 6479              		.cfi_def_cfa_register 13
 6480              		@ sp needed
 6481 0092 80BD     		pop	{r7, pc}
 6482              	.L412:
 6483              		.align	2
 6484              	.L411:
 6485 0094 00000000 		.word	pxCurrentTCB
 6486 0098 04ED00E0 		.word	-536810236
 6487              		.cfi_endproc
 6488              	.LFE57:
 6490              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6491              		.align	2
 6492              		.global	xTaskNotifyWait
 6493              		.thumb
 6494              		.thumb_func
 6496              	xTaskNotifyWait:
 6497              	.LFB58:
4283:../../../FreeRTOS_9_0/Source/tasks.c **** 
4284:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4285:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:../../../FreeRTOS_9_0/Source/tasks.c **** 
4287:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4288:../../../FreeRTOS_9_0/Source/tasks.c **** 
4289:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4290:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6498              		.loc 1 4290 0
 6499              		.cfi_startproc
 6500              		@ args = 0, pretend = 0, frame = 24
 6501              		@ frame_needed = 1, uses_anonymous_args = 0
 6502 0000 90B5     		push	{r4, r7, lr}
 6503              	.LCFI272:
 6504              		.cfi_def_cfa_offset 12
 6505              		.cfi_offset 4, -12
 6506              		.cfi_offset 7, -8
 6507              		.cfi_offset 14, -4
 6508 0002 89B0     		sub	sp, sp, #36
 6509              	.LCFI273:
 6510              		.cfi_def_cfa_offset 48
 6511 0004 02AF     		add	r7, sp, #8
 6512              	.LCFI274:
 6513              		.cfi_def_cfa 7, 40
 6514 0006 F860     		str	r0, [r7, #12]
 6515 0008 B960     		str	r1, [r7, #8]
 6516 000a 7A60     		str	r2, [r7, #4]
 6517 000c 3B60     		str	r3, [r7]
4291:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
4292:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/cc623FKg.s 			page 194


4293:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6518              		.loc 1 4293 0
 6519 000e FFF7FEFF 		bl	vPortEnterCritical
4294:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4295:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4296:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6520              		.loc 1 4296 0
 6521 0012 2B4B     		ldr	r3, .L419
 6522 0014 1B68     		ldr	r3, [r3]
 6523 0016 93F86830 		ldrb	r3, [r3, #104]
 6524 001a DBB2     		uxtb	r3, r3
 6525 001c 022B     		cmp	r3, #2
 6526 001e 1AD0     		beq	.L414
4297:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4298:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4299:../../../FreeRTOS_9_0/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4300:../../../FreeRTOS_9_0/Source/tasks.c **** 				clear the value to zero. */
4301:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6527              		.loc 1 4301 0
 6528 0020 274B     		ldr	r3, .L419
 6529 0022 1B68     		ldr	r3, [r3]
 6530 0024 596E     		ldr	r1, [r3, #100]
 6531 0026 FA68     		ldr	r2, [r7, #12]
 6532 0028 D243     		mvns	r2, r2
 6533 002a 0A40     		ands	r2, r2, r1
 6534 002c 5A66     		str	r2, [r3, #100]
4302:../../../FreeRTOS_9_0/Source/tasks.c **** 
4303:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4304:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6535              		.loc 1 4304 0
 6536 002e 244B     		ldr	r3, .L419
 6537 0030 1B68     		ldr	r3, [r3]
 6538 0032 0122     		movs	r2, #1
 6539 0034 83F86820 		strb	r2, [r3, #104]
4305:../../../FreeRTOS_9_0/Source/tasks.c **** 
4306:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6540              		.loc 1 4306 0
 6541 0038 3B68     		ldr	r3, [r7]
 6542 003a 002B     		cmp	r3, #0
 6543 003c 0BD0     		beq	.L414
4307:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4308:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6544              		.loc 1 4308 0
 6545 003e 3868     		ldr	r0, [r7]
 6546 0040 0121     		movs	r1, #1
 6547 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4309:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4310:../../../FreeRTOS_9_0/Source/tasks.c **** 
4311:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4312:../../../FreeRTOS_9_0/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4313:../../../FreeRTOS_9_0/Source/tasks.c **** 					critical section exits) - but it is not something that
4314:../../../FreeRTOS_9_0/Source/tasks.c **** 					application code should ever do. */
4315:../../../FreeRTOS_9_0/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6548              		.loc 1 4315 0
 6549 0046 1F4B     		ldr	r3, .L419+4
 6550 0048 4FF08052 		mov	r2, #268435456
 6551 004c 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc623FKg.s 			page 195


 6552              	@ 4315 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6553 004e BFF34F8F 		dsb
 6554              	@ 0 "" 2
 6555              	@ 4315 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6556 0052 BFF36F8F 		isb
 6557              	@ 0 "" 2
 6558              		.thumb
 6559              	.L414:
4316:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4317:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4318:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4319:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4320:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4321:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4322:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4323:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4324:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4325:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4326:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4327:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6560              		.loc 1 4327 0
 6561 0056 FFF7FEFF 		bl	vPortExitCritical
4328:../../../FreeRTOS_9_0/Source/tasks.c **** 
4329:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6562              		.loc 1 4329 0
 6563 005a FFF7FEFF 		bl	vPortEnterCritical
4330:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4331:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
 6564              		.loc 1 4331 0
 6565 005e 7C68     		ldr	r4, [r7, #4]
 6566 0060 3B68     		ldr	r3, [r7]
 6567 0062 0093     		str	r3, [sp]
 6568 0064 4020     		movs	r0, #64
 6569 0066 F968     		ldr	r1, [r7, #12]
 6570 0068 BA68     		ldr	r2, [r7, #8]
 6571 006a 2346     		mov	r3, r4
 6572 006c FFF7FEFF 		bl	SYSVIEW_RecordU32x4
4332:../../../FreeRTOS_9_0/Source/tasks.c **** 
4333:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6573              		.loc 1 4333 0
 6574 0070 7B68     		ldr	r3, [r7, #4]
 6575 0072 002B     		cmp	r3, #0
 6576 0074 04D0     		beq	.L415
4334:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4335:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4336:../../../FreeRTOS_9_0/Source/tasks.c **** 				have changed. */
4337:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6577              		.loc 1 4337 0
 6578 0076 124B     		ldr	r3, .L419
 6579 0078 1B68     		ldr	r3, [r3]
 6580 007a 5A6E     		ldr	r2, [r3, #100]
 6581 007c 7B68     		ldr	r3, [r7, #4]
 6582 007e 1A60     		str	r2, [r3]
 6583              	.L415:
4338:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4339:../../../FreeRTOS_9_0/Source/tasks.c **** 
4340:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
ARM GAS  /tmp/cc623FKg.s 			page 196


4341:../../../FreeRTOS_9_0/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4342:../../../FreeRTOS_9_0/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4343:../../../FreeRTOS_9_0/Source/tasks.c **** 			unblocked because of a timeout. */
4344:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 6584              		.loc 1 4344 0
 6585 0080 0F4B     		ldr	r3, .L419
 6586 0082 1B68     		ldr	r3, [r3]
 6587 0084 93F86830 		ldrb	r3, [r3, #104]
 6588 0088 DBB2     		uxtb	r3, r3
 6589 008a 012B     		cmp	r3, #1
 6590 008c 02D1     		bne	.L416
4345:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4346:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A notification was not received. */
4347:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFALSE;
 6591              		.loc 1 4347 0
 6592 008e 0023     		movs	r3, #0
 6593 0090 7B61     		str	r3, [r7, #20]
 6594 0092 08E0     		b	.L417
 6595              	.L416:
4348:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4349:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4350:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4351:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A notification was already pending or a notification was
4352:../../../FreeRTOS_9_0/Source/tasks.c **** 				received while the task was waiting. */
4353:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6596              		.loc 1 4353 0
 6597 0094 0A4B     		ldr	r3, .L419
 6598 0096 1B68     		ldr	r3, [r3]
 6599 0098 596E     		ldr	r1, [r3, #100]
 6600 009a BA68     		ldr	r2, [r7, #8]
 6601 009c D243     		mvns	r2, r2
 6602 009e 0A40     		ands	r2, r2, r1
 6603 00a0 5A66     		str	r2, [r3, #100]
4354:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdTRUE;
 6604              		.loc 1 4354 0
 6605 00a2 0123     		movs	r3, #1
 6606 00a4 7B61     		str	r3, [r7, #20]
 6607              	.L417:
4355:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4356:../../../FreeRTOS_9_0/Source/tasks.c **** 
4357:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6608              		.loc 1 4357 0
 6609 00a6 064B     		ldr	r3, .L419
 6610 00a8 1B68     		ldr	r3, [r3]
 6611 00aa 0022     		movs	r2, #0
 6612 00ac 83F86820 		strb	r2, [r3, #104]
4358:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4359:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6613              		.loc 1 4359 0
 6614 00b0 FFF7FEFF 		bl	vPortExitCritical
4360:../../../FreeRTOS_9_0/Source/tasks.c **** 
4361:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 6615              		.loc 1 4361 0
 6616 00b4 7B69     		ldr	r3, [r7, #20]
4362:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6617              		.loc 1 4362 0
 6618 00b6 1846     		mov	r0, r3
ARM GAS  /tmp/cc623FKg.s 			page 197


 6619 00b8 1C37     		adds	r7, r7, #28
 6620              	.LCFI275:
 6621              		.cfi_def_cfa_offset 12
 6622 00ba BD46     		mov	sp, r7
 6623              	.LCFI276:
 6624              		.cfi_def_cfa_register 13
 6625              		@ sp needed
 6626 00bc 90BD     		pop	{r4, r7, pc}
 6627              	.L420:
 6628 00be 00BF     		.align	2
 6629              	.L419:
 6630 00c0 00000000 		.word	pxCurrentTCB
 6631 00c4 04ED00E0 		.word	-536810236
 6632              		.cfi_endproc
 6633              	.LFE58:
 6635              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6636              		.align	2
 6637              		.global	xTaskGenericNotify
 6638              		.thumb
 6639              		.thumb_func
 6641              	xTaskGenericNotify:
 6642              	.LFB59:
4363:../../../FreeRTOS_9_0/Source/tasks.c **** 
4364:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4365:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4366:../../../FreeRTOS_9_0/Source/tasks.c **** 
4367:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4368:../../../FreeRTOS_9_0/Source/tasks.c **** 
4369:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4370:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6643              		.loc 1 4370 0
 6644              		.cfi_startproc
 6645              		@ args = 0, pretend = 0, frame = 40
 6646              		@ frame_needed = 1, uses_anonymous_args = 0
 6647 0000 90B5     		push	{r4, r7, lr}
 6648              	.LCFI277:
 6649              		.cfi_def_cfa_offset 12
 6650              		.cfi_offset 4, -12
 6651              		.cfi_offset 7, -8
 6652              		.cfi_offset 14, -4
 6653 0002 8DB0     		sub	sp, sp, #52
 6654              	.LCFI278:
 6655              		.cfi_def_cfa_offset 64
 6656 0004 02AF     		add	r7, sp, #8
 6657              	.LCFI279:
 6658              		.cfi_def_cfa 7, 56
 6659 0006 F860     		str	r0, [r7, #12]
 6660 0008 B960     		str	r1, [r7, #8]
 6661 000a 3B60     		str	r3, [r7]
 6662 000c 1346     		mov	r3, r2
 6663 000e FB71     		strb	r3, [r7, #7]
4371:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4372:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6664              		.loc 1 4372 0
 6665 0010 0123     		movs	r3, #1
 6666 0012 7B62     		str	r3, [r7, #36]
4373:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  /tmp/cc623FKg.s 			page 198


4374:../../../FreeRTOS_9_0/Source/tasks.c **** 
4375:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6667              		.loc 1 4375 0
 6668 0014 FB68     		ldr	r3, [r7, #12]
 6669 0016 002B     		cmp	r3, #0
 6670 0018 09D1     		bne	.L422
 6671              	.LBB170:
 6672              	.LBB171:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6673              		.loc 2 237 0 discriminator 1
 6674              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6675 001a 4FF05003 			mov r3, #80												
 6676 001e 83F31188 		msr basepri, r3											
 6677 0022 BFF36F8F 		isb														
 6678 0026 BFF34F8F 		dsb														
 6679              	
 6680              	@ 0 "" 2
 6681              		.thumb
 6682 002a BB61     		str	r3, [r7, #24]
 6683              	.L423:
 6684              	.LBE171:
 6685              	.LBE170:
 6686              		.loc 1 4375 0 discriminator 1
 6687 002c FEE7     		b	.L423
 6688              	.L422:
4376:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6689              		.loc 1 4376 0
 6690 002e FB68     		ldr	r3, [r7, #12]
 6691 0030 3B62     		str	r3, [r7, #32]
4377:../../../FreeRTOS_9_0/Source/tasks.c **** 
4378:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6692              		.loc 1 4378 0
 6693 0032 FFF7FEFF 		bl	vPortEnterCritical
4379:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4380:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6694              		.loc 1 4380 0
 6695 0036 3B68     		ldr	r3, [r7]
 6696 0038 002B     		cmp	r3, #0
 6697 003a 03D0     		beq	.L424
4381:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4382:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6698              		.loc 1 4382 0
 6699 003c 3B6A     		ldr	r3, [r7, #32]
 6700 003e 5A6E     		ldr	r2, [r3, #100]
 6701 0040 3B68     		ldr	r3, [r7]
 6702 0042 1A60     		str	r2, [r3]
 6703              	.L424:
4383:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4384:../../../FreeRTOS_9_0/Source/tasks.c **** 
4385:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6704              		.loc 1 4385 0
 6705 0044 3B6A     		ldr	r3, [r7, #32]
 6706 0046 93F86830 		ldrb	r3, [r3, #104]
 6707 004a FB77     		strb	r3, [r7, #31]
4386:../../../FreeRTOS_9_0/Source/tasks.c **** 
4387:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6708              		.loc 1 4387 0
ARM GAS  /tmp/cc623FKg.s 			page 199


 6709 004c 3B6A     		ldr	r3, [r7, #32]
 6710 004e 0222     		movs	r2, #2
 6711 0050 83F86820 		strb	r2, [r3, #104]
4388:../../../FreeRTOS_9_0/Source/tasks.c **** 
4389:../../../FreeRTOS_9_0/Source/tasks.c **** 			switch( eAction )
 6712              		.loc 1 4389 0
 6713 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6714 0056 042B     		cmp	r3, #4
 6715 0058 27D8     		bhi	.L425
 6716 005a 01A2     		adr	r2, .L427
 6717 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6718              		.p2align 2
 6719              	.L427:
 6720 0060 AB000000 		.word	.L425+1
 6721 0064 75000000 		.word	.L428+1
 6722 0068 83000000 		.word	.L429+1
 6723 006c 8F000000 		.word	.L430+1
 6724 0070 97000000 		.word	.L431+1
 6725              		.p2align 1
 6726              	.L428:
4390:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4391:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetBits	:
4392:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6727              		.loc 1 4392 0
 6728 0074 3B6A     		ldr	r3, [r7, #32]
 6729 0076 5A6E     		ldr	r2, [r3, #100]
 6730 0078 BB68     		ldr	r3, [r7, #8]
 6731 007a 1A43     		orrs	r2, r2, r3
 6732 007c 3B6A     		ldr	r3, [r7, #32]
 6733 007e 5A66     		str	r2, [r3, #100]
4393:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6734              		.loc 1 4393 0
 6735 0080 13E0     		b	.L425
 6736              	.L429:
4394:../../../FreeRTOS_9_0/Source/tasks.c **** 
4395:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eIncrement	:
4396:../../../FreeRTOS_9_0/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6737              		.loc 1 4396 0
 6738 0082 3B6A     		ldr	r3, [r7, #32]
 6739 0084 5B6E     		ldr	r3, [r3, #100]
 6740 0086 5A1C     		adds	r2, r3, #1
 6741 0088 3B6A     		ldr	r3, [r7, #32]
 6742 008a 5A66     		str	r2, [r3, #100]
4397:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6743              		.loc 1 4397 0
 6744 008c 0DE0     		b	.L425
 6745              	.L430:
4398:../../../FreeRTOS_9_0/Source/tasks.c **** 
4399:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4400:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6746              		.loc 1 4400 0
 6747 008e 3B6A     		ldr	r3, [r7, #32]
 6748 0090 BA68     		ldr	r2, [r7, #8]
 6749 0092 5A66     		str	r2, [r3, #100]
4401:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6750              		.loc 1 4401 0
 6751 0094 09E0     		b	.L425
ARM GAS  /tmp/cc623FKg.s 			page 200


 6752              	.L431:
4402:../../../FreeRTOS_9_0/Source/tasks.c **** 
4403:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4404:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6753              		.loc 1 4404 0
 6754 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6755 0098 022B     		cmp	r3, #2
 6756 009a 03D0     		beq	.L432
4405:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4406:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6757              		.loc 1 4406 0
 6758 009c 3B6A     		ldr	r3, [r7, #32]
 6759 009e BA68     		ldr	r2, [r7, #8]
 6760 00a0 5A66     		str	r2, [r3, #100]
4407:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4408:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4409:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4410:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The value could not be written to the task. */
4411:../../../FreeRTOS_9_0/Source/tasks.c **** 						xReturn = pdFAIL;
4412:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4413:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6761              		.loc 1 4413 0
 6762 00a2 01E0     		b	.L438
 6763              	.L432:
4411:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
 6764              		.loc 1 4411 0
 6765 00a4 0023     		movs	r3, #0
 6766 00a6 7B62     		str	r3, [r7, #36]
 6767              	.L438:
 6768              		.loc 1 4413 0
 6769 00a8 00BF     		nop
 6770              	.L425:
4414:../../../FreeRTOS_9_0/Source/tasks.c **** 
4415:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eNoAction:
4416:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is being notified without its notify value being
4417:../../../FreeRTOS_9_0/Source/tasks.c **** 					updated. */
4418:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
4419:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4420:../../../FreeRTOS_9_0/Source/tasks.c **** 
4421:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY();
 6771              		.loc 1 4421 0
 6772 00aa 3B6A     		ldr	r3, [r7, #32]
 6773 00ac 1846     		mov	r0, r3
 6774 00ae FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6775 00b2 0246     		mov	r2, r0
 6776 00b4 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6777 00b6 3B68     		ldr	r3, [r7]
 6778 00b8 0093     		str	r3, [sp]
 6779 00ba 3E20     		movs	r0, #62
 6780 00bc 1146     		mov	r1, r2
 6781 00be BA68     		ldr	r2, [r7, #8]
 6782 00c0 2346     		mov	r3, r4
 6783 00c2 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
4422:../../../FreeRTOS_9_0/Source/tasks.c **** 
4423:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4424:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4425:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
ARM GAS  /tmp/cc623FKg.s 			page 201


 6784              		.loc 1 4425 0
 6785 00c6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6786 00c8 012B     		cmp	r3, #1
 6787 00ca 3ED1     		bne	.L434
4426:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4427:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6788              		.loc 1 4427 0
 6789 00cc 3B6A     		ldr	r3, [r7, #32]
 6790 00ce 0433     		adds	r3, r3, #4
 6791 00d0 1846     		mov	r0, r3
 6792 00d2 FFF7FEFF 		bl	uxListRemove
4428:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6793              		.loc 1 4428 0
 6794 00d6 3B6A     		ldr	r3, [r7, #32]
 6795 00d8 1846     		mov	r0, r3
 6796 00da FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6797 00de 3B6A     		ldr	r3, [r7, #32]
 6798 00e0 DB6A     		ldr	r3, [r3, #44]
 6799 00e2 1A46     		mov	r2, r3
 6800 00e4 0123     		movs	r3, #1
 6801 00e6 03FA02F2 		lsl	r2, r3, r2
 6802 00ea 1B4B     		ldr	r3, .L439
 6803 00ec 1B68     		ldr	r3, [r3]
 6804 00ee 1343     		orrs	r3, r3, r2
 6805 00f0 194A     		ldr	r2, .L439
 6806 00f2 1360     		str	r3, [r2]
 6807 00f4 3B6A     		ldr	r3, [r7, #32]
 6808 00f6 DA6A     		ldr	r2, [r3, #44]
 6809 00f8 1346     		mov	r3, r2
 6810 00fa 9B00     		lsls	r3, r3, #2
 6811 00fc 1344     		add	r3, r3, r2
 6812 00fe 9B00     		lsls	r3, r3, #2
 6813 0100 164A     		ldr	r2, .L439+4
 6814 0102 1A44     		add	r2, r2, r3
 6815 0104 3B6A     		ldr	r3, [r7, #32]
 6816 0106 0433     		adds	r3, r3, #4
 6817 0108 1046     		mov	r0, r2
 6818 010a 1946     		mov	r1, r3
 6819 010c FFF7FEFF 		bl	vListInsertEnd
4429:../../../FreeRTOS_9_0/Source/tasks.c **** 
4430:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4431:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6820              		.loc 1 4431 0
 6821 0110 3B6A     		ldr	r3, [r7, #32]
 6822 0112 9B6A     		ldr	r3, [r3, #40]
 6823 0114 002B     		cmp	r3, #0
 6824 0116 09D0     		beq	.L435
 6825              	.LBB172:
 6826              	.LBB173:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6827              		.loc 2 237 0 discriminator 1
 6828              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6829 0118 4FF05003 			mov r3, #80												
 6830 011c 83F31188 		msr basepri, r3											
 6831 0120 BFF36F8F 		isb														
 6832 0124 BFF34F8F 		dsb														
 6833              	
ARM GAS  /tmp/cc623FKg.s 			page 202


 6834              	@ 0 "" 2
 6835              		.thumb
 6836 0128 7B61     		str	r3, [r7, #20]
 6837              	.L436:
 6838              	.LBE173:
 6839              	.LBE172:
 6840              		.loc 1 4431 0 discriminator 2
 6841 012a FEE7     		b	.L436
 6842              	.L435:
4432:../../../FreeRTOS_9_0/Source/tasks.c **** 
4433:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4434:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4435:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4436:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4437:../../../FreeRTOS_9_0/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4438:../../../FreeRTOS_9_0/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4439:../../../FreeRTOS_9_0/Source/tasks.c **** 					because it will automatically get reset to a new value when
4440:../../../FreeRTOS_9_0/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4441:../../../FreeRTOS_9_0/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4442:../../../FreeRTOS_9_0/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4443:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4444:../../../FreeRTOS_9_0/Source/tasks.c **** 					earliest possible time. */
4445:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4446:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4447:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
4448:../../../FreeRTOS_9_0/Source/tasks.c **** 
4449:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6843              		.loc 1 4449 0
 6844 012c 3B6A     		ldr	r3, [r7, #32]
 6845 012e DA6A     		ldr	r2, [r3, #44]
 6846 0130 0B4B     		ldr	r3, .L439+8
 6847 0132 1B68     		ldr	r3, [r3]
 6848 0134 DB6A     		ldr	r3, [r3, #44]
 6849 0136 9A42     		cmp	r2, r3
 6850 0138 07D9     		bls	.L434
4450:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4451:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4452:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4453:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 6851              		.loc 1 4453 0
 6852 013a 0A4B     		ldr	r3, .L439+12
 6853 013c 4FF08052 		mov	r2, #268435456
 6854 0140 1A60     		str	r2, [r3]
 6855              	@ 4453 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6856 0142 BFF34F8F 		dsb
 6857              	@ 0 "" 2
 6858              	@ 4453 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 6859 0146 BFF36F8F 		isb
 6860              	@ 0 "" 2
 6861              		.thumb
 6862              	.L434:
4454:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4455:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4456:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4457:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4458:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4459:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/cc623FKg.s 			page 203


4460:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4461:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4462:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4464:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4465:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6863              		.loc 1 4465 0
 6864 014a FFF7FEFF 		bl	vPortExitCritical
4466:../../../FreeRTOS_9_0/Source/tasks.c **** 
4467:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 6865              		.loc 1 4467 0
 6866 014e 7B6A     		ldr	r3, [r7, #36]
4468:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6867              		.loc 1 4468 0
 6868 0150 1846     		mov	r0, r3
 6869 0152 2C37     		adds	r7, r7, #44
 6870              	.LCFI280:
 6871              		.cfi_def_cfa_offset 12
 6872 0154 BD46     		mov	sp, r7
 6873              	.LCFI281:
 6874              		.cfi_def_cfa_register 13
 6875              		@ sp needed
 6876 0156 90BD     		pop	{r4, r7, pc}
 6877              	.L440:
 6878              		.align	2
 6879              	.L439:
 6880 0158 00000000 		.word	uxTopReadyPriority
 6881 015c 00000000 		.word	pxReadyTasksLists
 6882 0160 00000000 		.word	pxCurrentTCB
 6883 0164 04ED00E0 		.word	-536810236
 6884              		.cfi_endproc
 6885              	.LFE59:
 6887              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6888              		.align	2
 6889              		.global	xTaskGenericNotifyFromISR
 6890              		.thumb
 6891              		.thumb_func
 6893              	xTaskGenericNotifyFromISR:
 6894              	.LFB60:
4469:../../../FreeRTOS_9_0/Source/tasks.c **** 
4470:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4471:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4472:../../../FreeRTOS_9_0/Source/tasks.c **** 
4473:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4474:../../../FreeRTOS_9_0/Source/tasks.c **** 
4475:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4476:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6895              		.loc 1 4476 0
 6896              		.cfi_startproc
 6897              		@ args = 4, pretend = 0, frame = 56
 6898              		@ frame_needed = 1, uses_anonymous_args = 0
 6899 0000 90B5     		push	{r4, r7, lr}
 6900              	.LCFI282:
 6901              		.cfi_def_cfa_offset 12
 6902              		.cfi_offset 4, -12
 6903              		.cfi_offset 7, -8
 6904              		.cfi_offset 14, -4
ARM GAS  /tmp/cc623FKg.s 			page 204


 6905 0002 91B0     		sub	sp, sp, #68
 6906              	.LCFI283:
 6907              		.cfi_def_cfa_offset 80
 6908 0004 02AF     		add	r7, sp, #8
 6909              	.LCFI284:
 6910              		.cfi_def_cfa 7, 72
 6911 0006 F860     		str	r0, [r7, #12]
 6912 0008 B960     		str	r1, [r7, #8]
 6913 000a 3B60     		str	r3, [r7]
 6914 000c 1346     		mov	r3, r2
 6915 000e FB71     		strb	r3, [r7, #7]
4477:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4478:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4479:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6916              		.loc 1 4479 0
 6917 0010 0123     		movs	r3, #1
 6918 0012 7B63     		str	r3, [r7, #52]
4480:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4481:../../../FreeRTOS_9_0/Source/tasks.c **** 
4482:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6919              		.loc 1 4482 0
 6920 0014 FB68     		ldr	r3, [r7, #12]
 6921 0016 002B     		cmp	r3, #0
 6922 0018 09D1     		bne	.L442
 6923              	.LBB174:
 6924              	.LBB175:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6925              		.loc 2 237 0 discriminator 1
 6926              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6927 001a 4FF05003 			mov r3, #80												
 6928 001e 83F31188 		msr basepri, r3											
 6929 0022 BFF36F8F 		isb														
 6930 0026 BFF34F8F 		dsb														
 6931              	
 6932              	@ 0 "" 2
 6933              		.thumb
 6934 002a 7B62     		str	r3, [r7, #36]
 6935              	.L443:
 6936              	.LBE175:
 6937              	.LBE174:
 6938              		.loc 1 4482 0 discriminator 1
 6939 002c FEE7     		b	.L443
 6940              	.L442:
4483:../../../FreeRTOS_9_0/Source/tasks.c **** 
4484:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4485:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4486:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4487:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4488:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4489:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4490:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4491:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4492:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4493:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4494:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4495:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4496:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  /tmp/cc623FKg.s 			page 205


4497:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4498:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
4499:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4500:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6941              		.loc 1 4500 0
 6942 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4501:../../../FreeRTOS_9_0/Source/tasks.c **** 
4502:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6943              		.loc 1 4502 0
 6944 0032 FB68     		ldr	r3, [r7, #12]
 6945 0034 3B63     		str	r3, [r7, #48]
 6946              	.LBB176:
 6947              	.LBB177:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6948              		.loc 2 253 0
 6949              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6950 0036 EFF31182 			mrs r2, basepri											
 6951 003a 4FF05003 		mov r3, #80												
 6952 003e 83F31188 		msr basepri, r3											
 6953 0042 BFF36F8F 		isb														
 6954 0046 BFF34F8F 		dsb														
 6955              	
 6956              	@ 0 "" 2
 6957              		.thumb
 6958 004a 3A62     		str	r2, [r7, #32]
 6959 004c FB61     		str	r3, [r7, #28]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6960              		.loc 2 265 0
 6961 004e 3B6A     		ldr	r3, [r7, #32]
 6962              	.LBE177:
 6963              	.LBE176:
4503:../../../FreeRTOS_9_0/Source/tasks.c **** 
4504:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6964              		.loc 1 4504 0
 6965 0050 FB62     		str	r3, [r7, #44]
4505:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4506:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6966              		.loc 1 4506 0
 6967 0052 3B68     		ldr	r3, [r7]
 6968 0054 002B     		cmp	r3, #0
 6969 0056 03D0     		beq	.L445
4507:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4508:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6970              		.loc 1 4508 0
 6971 0058 3B6B     		ldr	r3, [r7, #48]
 6972 005a 5A6E     		ldr	r2, [r3, #100]
 6973 005c 3B68     		ldr	r3, [r7]
 6974 005e 1A60     		str	r2, [r3]
 6975              	.L445:
4509:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4510:../../../FreeRTOS_9_0/Source/tasks.c **** 
4511:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6976              		.loc 1 4511 0
 6977 0060 3B6B     		ldr	r3, [r7, #48]
 6978 0062 93F86830 		ldrb	r3, [r3, #104]
 6979 0066 87F82B30 		strb	r3, [r7, #43]
4512:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /tmp/cc623FKg.s 			page 206


 6980              		.loc 1 4512 0
 6981 006a 3B6B     		ldr	r3, [r7, #48]
 6982 006c 0222     		movs	r2, #2
 6983 006e 83F86820 		strb	r2, [r3, #104]
4513:../../../FreeRTOS_9_0/Source/tasks.c **** 
4514:../../../FreeRTOS_9_0/Source/tasks.c **** 			switch( eAction )
 6984              		.loc 1 4514 0
 6985 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6986 0074 042B     		cmp	r3, #4
 6987 0076 29D8     		bhi	.L446
 6988 0078 01A2     		adr	r2, .L448
 6989 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6990 007e 00BF     		.p2align 2
 6991              	.L448:
 6992 0080 CD000000 		.word	.L446+1
 6993 0084 95000000 		.word	.L449+1
 6994 0088 A3000000 		.word	.L450+1
 6995 008c AF000000 		.word	.L451+1
 6996 0090 B7000000 		.word	.L452+1
 6997              		.p2align 1
 6998              	.L449:
4515:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4516:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetBits	:
4517:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6999              		.loc 1 4517 0
 7000 0094 3B6B     		ldr	r3, [r7, #48]
 7001 0096 5A6E     		ldr	r2, [r3, #100]
 7002 0098 BB68     		ldr	r3, [r7, #8]
 7003 009a 1A43     		orrs	r2, r2, r3
 7004 009c 3B6B     		ldr	r3, [r7, #48]
 7005 009e 5A66     		str	r2, [r3, #100]
4518:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 7006              		.loc 1 4518 0
 7007 00a0 14E0     		b	.L446
 7008              	.L450:
4519:../../../FreeRTOS_9_0/Source/tasks.c **** 
4520:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eIncrement	:
4521:../../../FreeRTOS_9_0/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7009              		.loc 1 4521 0
 7010 00a2 3B6B     		ldr	r3, [r7, #48]
 7011 00a4 5B6E     		ldr	r3, [r3, #100]
 7012 00a6 5A1C     		adds	r2, r3, #1
 7013 00a8 3B6B     		ldr	r3, [r7, #48]
 7014 00aa 5A66     		str	r2, [r3, #100]
4522:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 7015              		.loc 1 4522 0
 7016 00ac 0EE0     		b	.L446
 7017              	.L451:
4523:../../../FreeRTOS_9_0/Source/tasks.c **** 
4524:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4525:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7018              		.loc 1 4525 0
 7019 00ae 3B6B     		ldr	r3, [r7, #48]
 7020 00b0 BA68     		ldr	r2, [r7, #8]
 7021 00b2 5A66     		str	r2, [r3, #100]
4526:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 7022              		.loc 1 4526 0
ARM GAS  /tmp/cc623FKg.s 			page 207


 7023 00b4 0AE0     		b	.L446
 7024              	.L452:
4527:../../../FreeRTOS_9_0/Source/tasks.c **** 
4528:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4529:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7025              		.loc 1 4529 0
 7026 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7027 00ba 022B     		cmp	r3, #2
 7028 00bc 03D0     		beq	.L453
4530:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4531:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7029              		.loc 1 4531 0
 7030 00be 3B6B     		ldr	r3, [r7, #48]
 7031 00c0 BA68     		ldr	r2, [r7, #8]
 7032 00c2 5A66     		str	r2, [r3, #100]
4532:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4533:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4534:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4535:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The value could not be written to the task. */
4536:../../../FreeRTOS_9_0/Source/tasks.c **** 						xReturn = pdFAIL;
4537:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4538:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 7033              		.loc 1 4538 0
 7034 00c4 01E0     		b	.L463
 7035              	.L453:
4536:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
 7036              		.loc 1 4536 0
 7037 00c6 0023     		movs	r3, #0
 7038 00c8 7B63     		str	r3, [r7, #52]
 7039              	.L463:
 7040              		.loc 1 4538 0
 7041 00ca 00BF     		nop
 7042              	.L446:
4539:../../../FreeRTOS_9_0/Source/tasks.c **** 
4540:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eNoAction :
4541:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is being notified without its notify value being
4542:../../../FreeRTOS_9_0/Source/tasks.c **** 					updated. */
4543:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
4544:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4545:../../../FreeRTOS_9_0/Source/tasks.c **** 
4546:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
 7043              		.loc 1 4546 0
 7044 00cc 3B6B     		ldr	r3, [r7, #48]
 7045 00ce 1846     		mov	r0, r3
 7046 00d0 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 7047 00d4 0146     		mov	r1, r0
 7048 00d6 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 7049 00d8 3A68     		ldr	r2, [r7]
 7050 00da BB6C     		ldr	r3, [r7, #72]
 7051 00dc 0092     		str	r2, [sp]
 7052 00de 0193     		str	r3, [sp, #4]
 7053 00e0 3F20     		movs	r0, #63
 7054 00e2 BA68     		ldr	r2, [r7, #8]
 7055 00e4 2346     		mov	r3, r4
 7056 00e6 FFF7FEFF 		bl	SYSVIEW_RecordU32x5
4547:../../../FreeRTOS_9_0/Source/tasks.c **** 
4548:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
ARM GAS  /tmp/cc623FKg.s 			page 208


4549:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4550:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7057              		.loc 1 4550 0
 7058 00ea 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7059 00ee 012B     		cmp	r3, #1
 7060 00f0 4BD1     		bne	.L455
4551:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4552:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4553:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7061              		.loc 1 4553 0
 7062 00f2 3B6B     		ldr	r3, [r7, #48]
 7063 00f4 9B6A     		ldr	r3, [r3, #40]
 7064 00f6 002B     		cmp	r3, #0
 7065 00f8 09D0     		beq	.L456
 7066              	.LBB178:
 7067              	.LBB179:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7068              		.loc 2 237 0 discriminator 1
 7069              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7070 00fa 4FF05003 			mov r3, #80												
 7071 00fe 83F31188 		msr basepri, r3											
 7072 0102 BFF36F8F 		isb														
 7073 0106 BFF34F8F 		dsb														
 7074              	
 7075              	@ 0 "" 2
 7076              		.thumb
 7077 010a BB61     		str	r3, [r7, #24]
 7078              	.L457:
 7079              	.LBE179:
 7080              	.LBE178:
 7081              		.loc 1 4553 0 discriminator 2
 7082 010c FEE7     		b	.L457
 7083              	.L456:
4554:../../../FreeRTOS_9_0/Source/tasks.c **** 
4555:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7084              		.loc 1 4555 0
 7085 010e 244B     		ldr	r3, .L464
 7086 0110 1B68     		ldr	r3, [r3]
 7087 0112 002B     		cmp	r3, #0
 7088 0114 22D1     		bne	.L458
4556:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4557:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7089              		.loc 1 4557 0
 7090 0116 3B6B     		ldr	r3, [r7, #48]
 7091 0118 0433     		adds	r3, r3, #4
 7092 011a 1846     		mov	r0, r3
 7093 011c FFF7FEFF 		bl	uxListRemove
4558:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7094              		.loc 1 4558 0
 7095 0120 3B6B     		ldr	r3, [r7, #48]
 7096 0122 1846     		mov	r0, r3
 7097 0124 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 7098 0128 3B6B     		ldr	r3, [r7, #48]
 7099 012a DB6A     		ldr	r3, [r3, #44]
 7100 012c 1A46     		mov	r2, r3
 7101 012e 0123     		movs	r3, #1
 7102 0130 03FA02F2 		lsl	r2, r3, r2
ARM GAS  /tmp/cc623FKg.s 			page 209


 7103 0134 1B4B     		ldr	r3, .L464+4
 7104 0136 1B68     		ldr	r3, [r3]
 7105 0138 1343     		orrs	r3, r3, r2
 7106 013a 1A4A     		ldr	r2, .L464+4
 7107 013c 1360     		str	r3, [r2]
 7108 013e 3B6B     		ldr	r3, [r7, #48]
 7109 0140 DA6A     		ldr	r2, [r3, #44]
 7110 0142 1346     		mov	r3, r2
 7111 0144 9B00     		lsls	r3, r3, #2
 7112 0146 1344     		add	r3, r3, r2
 7113 0148 9B00     		lsls	r3, r3, #2
 7114 014a 174A     		ldr	r2, .L464+8
 7115 014c 1A44     		add	r2, r2, r3
 7116 014e 3B6B     		ldr	r3, [r7, #48]
 7117 0150 0433     		adds	r3, r3, #4
 7118 0152 1046     		mov	r0, r2
 7119 0154 1946     		mov	r1, r3
 7120 0156 FFF7FEFF 		bl	vListInsertEnd
 7121 015a 05E0     		b	.L459
 7122              	.L458:
4559:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4560:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4561:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4562:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4563:../../../FreeRTOS_9_0/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4564:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7123              		.loc 1 4564 0
 7124 015c 3B6B     		ldr	r3, [r7, #48]
 7125 015e 1833     		adds	r3, r3, #24
 7126 0160 1248     		ldr	r0, .L464+12
 7127 0162 1946     		mov	r1, r3
 7128 0164 FFF7FEFF 		bl	vListInsertEnd
 7129              	.L459:
4565:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4566:../../../FreeRTOS_9_0/Source/tasks.c **** 
4567:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7130              		.loc 1 4567 0
 7131 0168 3B6B     		ldr	r3, [r7, #48]
 7132 016a DA6A     		ldr	r2, [r3, #44]
 7133 016c 104B     		ldr	r3, .L464+16
 7134 016e 1B68     		ldr	r3, [r3]
 7135 0170 DB6A     		ldr	r3, [r3, #44]
 7136 0172 9A42     		cmp	r2, r3
 7137 0174 09D9     		bls	.L455
4568:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4569:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4570:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4571:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7138              		.loc 1 4571 0
 7139 0176 BB6C     		ldr	r3, [r7, #72]
 7140 0178 002B     		cmp	r3, #0
 7141 017a 03D0     		beq	.L460
4572:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4573:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7142              		.loc 1 4573 0
 7143 017c BB6C     		ldr	r3, [r7, #72]
 7144 017e 0122     		movs	r2, #1
ARM GAS  /tmp/cc623FKg.s 			page 210


 7145 0180 1A60     		str	r2, [r3]
 7146 0182 02E0     		b	.L455
 7147              	.L460:
4574:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4575:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4576:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4577:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4578:../../../FreeRTOS_9_0/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4579:../../../FreeRTOS_9_0/Source/tasks.c **** 						safe FreeRTOS function. */
4580:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
 7148              		.loc 1 4580 0
 7149 0184 0B4B     		ldr	r3, .L464+20
 7150 0186 0122     		movs	r2, #1
 7151 0188 1A60     		str	r2, [r3]
 7152              	.L455:
 7153 018a FB6A     		ldr	r3, [r7, #44]
 7154 018c 7B61     		str	r3, [r7, #20]
 7155              	.LBB180:
 7156              	.LBB181:
 7157              		.loc 2 271 0
 7158 018e 7B69     		ldr	r3, [r7, #20]
 7159              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7160 0190 83F31188 			msr basepri, r3	
 7161              	@ 0 "" 2
 7162              		.thumb
 7163              	.LBE181:
 7164              	.LBE180:
4581:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4582:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4583:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4584:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4585:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4586:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4587:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4588:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4589:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4590:../../../FreeRTOS_9_0/Source/tasks.c **** 
4591:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 7165              		.loc 1 4591 0
 7166 0194 7B6B     		ldr	r3, [r7, #52]
4592:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 7167              		.loc 1 4592 0
 7168 0196 1846     		mov	r0, r3
 7169 0198 3C37     		adds	r7, r7, #60
 7170              	.LCFI285:
 7171              		.cfi_def_cfa_offset 12
 7172 019a BD46     		mov	sp, r7
 7173              	.LCFI286:
 7174              		.cfi_def_cfa_register 13
 7175              		@ sp needed
 7176 019c 90BD     		pop	{r4, r7, pc}
 7177              	.L465:
 7178 019e 00BF     		.align	2
 7179              	.L464:
 7180 01a0 00000000 		.word	uxSchedulerSuspended
 7181 01a4 00000000 		.word	uxTopReadyPriority
 7182 01a8 00000000 		.word	pxReadyTasksLists
ARM GAS  /tmp/cc623FKg.s 			page 211


 7183 01ac 00000000 		.word	xPendingReadyList
 7184 01b0 00000000 		.word	pxCurrentTCB
 7185 01b4 00000000 		.word	xYieldPending
 7186              		.cfi_endproc
 7187              	.LFE60:
 7189              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7190              		.align	2
 7191              		.global	vTaskNotifyGiveFromISR
 7192              		.thumb
 7193              		.thumb_func
 7195              	vTaskNotifyGiveFromISR:
 7196              	.LFB61:
4593:../../../FreeRTOS_9_0/Source/tasks.c **** 
4594:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4595:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4596:../../../FreeRTOS_9_0/Source/tasks.c **** 
4597:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4598:../../../FreeRTOS_9_0/Source/tasks.c **** 
4599:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4600:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 7197              		.loc 1 4600 0
 7198              		.cfi_startproc
 7199              		@ args = 0, pretend = 0, frame = 40
 7200              		@ frame_needed = 1, uses_anonymous_args = 0
 7201 0000 80B5     		push	{r7, lr}
 7202              	.LCFI287:
 7203              		.cfi_def_cfa_offset 8
 7204              		.cfi_offset 7, -8
 7205              		.cfi_offset 14, -4
 7206 0002 8AB0     		sub	sp, sp, #40
 7207              	.LCFI288:
 7208              		.cfi_def_cfa_offset 48
 7209 0004 00AF     		add	r7, sp, #0
 7210              	.LCFI289:
 7211              		.cfi_def_cfa_register 7
 7212 0006 7860     		str	r0, [r7, #4]
 7213 0008 3960     		str	r1, [r7]
4601:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4602:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4603:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4604:../../../FreeRTOS_9_0/Source/tasks.c **** 
4605:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7214              		.loc 1 4605 0
 7215 000a 7B68     		ldr	r3, [r7, #4]
 7216 000c 002B     		cmp	r3, #0
 7217 000e 09D1     		bne	.L467
 7218              	.LBB182:
 7219              	.LBB183:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7220              		.loc 2 237 0 discriminator 1
 7221              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7222 0010 4FF05003 			mov r3, #80												
 7223 0014 83F31188 		msr basepri, r3											
 7224 0018 BFF36F8F 		isb														
 7225 001c BFF34F8F 		dsb														
 7226              	
 7227              	@ 0 "" 2
ARM GAS  /tmp/cc623FKg.s 			page 212


 7228              		.thumb
 7229 0020 BB61     		str	r3, [r7, #24]
 7230              	.L468:
 7231              	.LBE183:
 7232              	.LBE182:
 7233              		.loc 1 4605 0 discriminator 1
 7234 0022 FEE7     		b	.L468
 7235              	.L467:
4606:../../../FreeRTOS_9_0/Source/tasks.c **** 
4607:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4608:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4609:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4610:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4611:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4612:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4613:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4614:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4615:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4616:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4617:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4618:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4619:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4620:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4621:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
4622:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4623:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7236              		.loc 1 4623 0
 7237 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4624:../../../FreeRTOS_9_0/Source/tasks.c **** 
4625:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7238              		.loc 1 4625 0
 7239 0028 7B68     		ldr	r3, [r7, #4]
 7240 002a 7B62     		str	r3, [r7, #36]
 7241              	.LBB184:
 7242              	.LBB185:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7243              		.loc 2 253 0
 7244              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7245 002c EFF31182 			mrs r2, basepri											
 7246 0030 4FF05003 		mov r3, #80												
 7247 0034 83F31188 		msr basepri, r3											
 7248 0038 BFF36F8F 		isb														
 7249 003c BFF34F8F 		dsb														
 7250              	
 7251              	@ 0 "" 2
 7252              		.thumb
 7253 0040 7A61     		str	r2, [r7, #20]
 7254 0042 3B61     		str	r3, [r7, #16]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7255              		.loc 2 265 0
 7256 0044 7B69     		ldr	r3, [r7, #20]
 7257              	.LBE185:
 7258              	.LBE184:
4626:../../../FreeRTOS_9_0/Source/tasks.c **** 
4627:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7259              		.loc 1 4627 0
 7260 0046 3B62     		str	r3, [r7, #32]
ARM GAS  /tmp/cc623FKg.s 			page 213


4628:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4629:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7261              		.loc 1 4629 0
 7262 0048 7B6A     		ldr	r3, [r7, #36]
 7263 004a 93F86830 		ldrb	r3, [r3, #104]
 7264 004e FB77     		strb	r3, [r7, #31]
4630:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7265              		.loc 1 4630 0
 7266 0050 7B6A     		ldr	r3, [r7, #36]
 7267 0052 0222     		movs	r2, #2
 7268 0054 83F86820 		strb	r2, [r3, #104]
4631:../../../FreeRTOS_9_0/Source/tasks.c **** 
4632:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4633:../../../FreeRTOS_9_0/Source/tasks.c **** 			semaphore. */
4634:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7269              		.loc 1 4634 0
 7270 0058 7B6A     		ldr	r3, [r7, #36]
 7271 005a 5B6E     		ldr	r3, [r3, #100]
 7272 005c 5A1C     		adds	r2, r3, #1
 7273 005e 7B6A     		ldr	r3, [r7, #36]
 7274 0060 5A66     		str	r2, [r3, #100]
4635:../../../FreeRTOS_9_0/Source/tasks.c **** 
4636:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
 7275              		.loc 1 4636 0
 7276 0062 7B6A     		ldr	r3, [r7, #36]
 7277 0064 1846     		mov	r0, r3
 7278 0066 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 7279 006a 0246     		mov	r2, r0
 7280 006c 3B68     		ldr	r3, [r7]
 7281 006e 4120     		movs	r0, #65
 7282 0070 1146     		mov	r1, r2
 7283 0072 1A46     		mov	r2, r3
 7284 0074 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
4637:../../../FreeRTOS_9_0/Source/tasks.c **** 
4638:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4639:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4640:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7285              		.loc 1 4640 0
 7286 0078 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7287 007a 012B     		cmp	r3, #1
 7288 007c 4BD1     		bne	.L470
4641:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4642:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4643:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7289              		.loc 1 4643 0
 7290 007e 7B6A     		ldr	r3, [r7, #36]
 7291 0080 9B6A     		ldr	r3, [r3, #40]
 7292 0082 002B     		cmp	r3, #0
 7293 0084 09D0     		beq	.L471
 7294              	.LBB186:
 7295              	.LBB187:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7296              		.loc 2 237 0 discriminator 1
 7297              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7298 0086 4FF05003 			mov r3, #80												
 7299 008a 83F31188 		msr basepri, r3											
 7300 008e BFF36F8F 		isb														
ARM GAS  /tmp/cc623FKg.s 			page 214


 7301 0092 BFF34F8F 		dsb														
 7302              	
 7303              	@ 0 "" 2
 7304              		.thumb
 7305 0096 FB60     		str	r3, [r7, #12]
 7306              	.L472:
 7307              	.LBE187:
 7308              	.LBE186:
 7309              		.loc 1 4643 0 discriminator 2
 7310 0098 FEE7     		b	.L472
 7311              	.L471:
4644:../../../FreeRTOS_9_0/Source/tasks.c **** 
4645:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7312              		.loc 1 4645 0
 7313 009a 234B     		ldr	r3, .L477
 7314 009c 1B68     		ldr	r3, [r3]
 7315 009e 002B     		cmp	r3, #0
 7316 00a0 22D1     		bne	.L473
4646:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4647:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7317              		.loc 1 4647 0
 7318 00a2 7B6A     		ldr	r3, [r7, #36]
 7319 00a4 0433     		adds	r3, r3, #4
 7320 00a6 1846     		mov	r0, r3
 7321 00a8 FFF7FEFF 		bl	uxListRemove
4648:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7322              		.loc 1 4648 0
 7323 00ac 7B6A     		ldr	r3, [r7, #36]
 7324 00ae 1846     		mov	r0, r3
 7325 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 7326 00b4 7B6A     		ldr	r3, [r7, #36]
 7327 00b6 DB6A     		ldr	r3, [r3, #44]
 7328 00b8 1A46     		mov	r2, r3
 7329 00ba 0123     		movs	r3, #1
 7330 00bc 03FA02F2 		lsl	r2, r3, r2
 7331 00c0 1A4B     		ldr	r3, .L477+4
 7332 00c2 1B68     		ldr	r3, [r3]
 7333 00c4 1343     		orrs	r3, r3, r2
 7334 00c6 194A     		ldr	r2, .L477+4
 7335 00c8 1360     		str	r3, [r2]
 7336 00ca 7B6A     		ldr	r3, [r7, #36]
 7337 00cc DA6A     		ldr	r2, [r3, #44]
 7338 00ce 1346     		mov	r3, r2
 7339 00d0 9B00     		lsls	r3, r3, #2
 7340 00d2 1344     		add	r3, r3, r2
 7341 00d4 9B00     		lsls	r3, r3, #2
 7342 00d6 164A     		ldr	r2, .L477+8
 7343 00d8 1A44     		add	r2, r2, r3
 7344 00da 7B6A     		ldr	r3, [r7, #36]
 7345 00dc 0433     		adds	r3, r3, #4
 7346 00de 1046     		mov	r0, r2
 7347 00e0 1946     		mov	r1, r3
 7348 00e2 FFF7FEFF 		bl	vListInsertEnd
 7349 00e6 05E0     		b	.L474
 7350              	.L473:
4649:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4650:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
ARM GAS  /tmp/cc623FKg.s 			page 215


4651:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4652:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4653:../../../FreeRTOS_9_0/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4654:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7351              		.loc 1 4654 0
 7352 00e8 7B6A     		ldr	r3, [r7, #36]
 7353 00ea 1833     		adds	r3, r3, #24
 7354 00ec 1148     		ldr	r0, .L477+12
 7355 00ee 1946     		mov	r1, r3
 7356 00f0 FFF7FEFF 		bl	vListInsertEnd
 7357              	.L474:
4655:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4656:../../../FreeRTOS_9_0/Source/tasks.c **** 
4657:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7358              		.loc 1 4657 0
 7359 00f4 7B6A     		ldr	r3, [r7, #36]
 7360 00f6 DA6A     		ldr	r2, [r3, #44]
 7361 00f8 0F4B     		ldr	r3, .L477+16
 7362 00fa 1B68     		ldr	r3, [r3]
 7363 00fc DB6A     		ldr	r3, [r3, #44]
 7364 00fe 9A42     		cmp	r2, r3
 7365 0100 09D9     		bls	.L470
4658:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4659:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4660:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4661:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7366              		.loc 1 4661 0
 7367 0102 3B68     		ldr	r3, [r7]
 7368 0104 002B     		cmp	r3, #0
 7369 0106 03D0     		beq	.L475
4662:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4663:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7370              		.loc 1 4663 0
 7371 0108 3B68     		ldr	r3, [r7]
 7372 010a 0122     		movs	r2, #1
 7373 010c 1A60     		str	r2, [r3]
 7374 010e 02E0     		b	.L470
 7375              	.L475:
4664:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4665:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4666:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4667:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4668:../../../FreeRTOS_9_0/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4669:../../../FreeRTOS_9_0/Source/tasks.c **** 						safe FreeRTOS function. */
4670:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
 7376              		.loc 1 4670 0
 7377 0110 0A4B     		ldr	r3, .L477+20
 7378 0112 0122     		movs	r2, #1
 7379 0114 1A60     		str	r2, [r3]
 7380              	.L470:
 7381 0116 3B6A     		ldr	r3, [r7, #32]
 7382 0118 BB60     		str	r3, [r7, #8]
 7383              	.LBB188:
 7384              	.LBB189:
 7385              		.loc 2 271 0
 7386 011a BB68     		ldr	r3, [r7, #8]
 7387              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cc623FKg.s 			page 216


 7388 011c 83F31188 			msr basepri, r3	
 7389              	@ 0 "" 2
 7390              		.thumb
 7391              	.LBE189:
 7392              	.LBE188:
4671:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4672:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4673:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4674:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4675:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4676:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4677:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4678:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4679:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4680:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 7393              		.loc 1 4680 0
 7394 0120 2837     		adds	r7, r7, #40
 7395              	.LCFI290:
 7396              		.cfi_def_cfa_offset 8
 7397 0122 BD46     		mov	sp, r7
 7398              	.LCFI291:
 7399              		.cfi_def_cfa_register 13
 7400              		@ sp needed
 7401 0124 80BD     		pop	{r7, pc}
 7402              	.L478:
 7403 0126 00BF     		.align	2
 7404              	.L477:
 7405 0128 00000000 		.word	uxSchedulerSuspended
 7406 012c 00000000 		.word	uxTopReadyPriority
 7407 0130 00000000 		.word	pxReadyTasksLists
 7408 0134 00000000 		.word	xPendingReadyList
 7409 0138 00000000 		.word	pxCurrentTCB
 7410 013c 00000000 		.word	xYieldPending
 7411              		.cfi_endproc
 7412              	.LFE61:
 7414              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7415              		.align	2
 7416              		.global	xTaskNotifyStateClear
 7417              		.thumb
 7418              		.thumb_func
 7420              	xTaskNotifyStateClear:
 7421              	.LFB62:
4681:../../../FreeRTOS_9_0/Source/tasks.c **** 
4682:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4683:../../../FreeRTOS_9_0/Source/tasks.c **** 
4684:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4685:../../../FreeRTOS_9_0/Source/tasks.c **** 
4686:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4687:../../../FreeRTOS_9_0/Source/tasks.c **** 
4688:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4689:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 7422              		.loc 1 4689 0
 7423              		.cfi_startproc
 7424              		@ args = 0, pretend = 0, frame = 16
 7425              		@ frame_needed = 1, uses_anonymous_args = 0
 7426 0000 80B5     		push	{r7, lr}
 7427              	.LCFI292:
ARM GAS  /tmp/cc623FKg.s 			page 217


 7428              		.cfi_def_cfa_offset 8
 7429              		.cfi_offset 7, -8
 7430              		.cfi_offset 14, -4
 7431 0002 84B0     		sub	sp, sp, #16
 7432              	.LCFI293:
 7433              		.cfi_def_cfa_offset 24
 7434 0004 00AF     		add	r7, sp, #0
 7435              	.LCFI294:
 7436              		.cfi_def_cfa_register 7
 7437 0006 7860     		str	r0, [r7, #4]
4690:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
4691:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
4692:../../../FreeRTOS_9_0/Source/tasks.c **** 
4693:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4694:../../../FreeRTOS_9_0/Source/tasks.c **** 		its notification state cleared. */
4695:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7438              		.loc 1 4695 0
 7439 0008 7B68     		ldr	r3, [r7, #4]
 7440 000a 002B     		cmp	r3, #0
 7441 000c 02D1     		bne	.L480
 7442              		.loc 1 4695 0 is_stmt 0 discriminator 1
 7443 000e 0E4B     		ldr	r3, .L485
 7444 0010 1B68     		ldr	r3, [r3]
 7445 0012 00E0     		b	.L481
 7446              	.L480:
 7447              		.loc 1 4695 0 discriminator 2
 7448 0014 7B68     		ldr	r3, [r7, #4]
 7449              	.L481:
 7450              		.loc 1 4695 0 discriminator 4
 7451 0016 BB60     		str	r3, [r7, #8]
4696:../../../FreeRTOS_9_0/Source/tasks.c **** 
4697:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 7452              		.loc 1 4697 0 is_stmt 1 discriminator 4
 7453 0018 FFF7FEFF 		bl	vPortEnterCritical
4698:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4699:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7454              		.loc 1 4699 0 discriminator 4
 7455 001c BB68     		ldr	r3, [r7, #8]
 7456 001e 93F86830 		ldrb	r3, [r3, #104]
 7457 0022 DBB2     		uxtb	r3, r3
 7458 0024 022B     		cmp	r3, #2
 7459 0026 06D1     		bne	.L482
4700:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4701:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7460              		.loc 1 4701 0
 7461 0028 BB68     		ldr	r3, [r7, #8]
 7462 002a 0022     		movs	r2, #0
 7463 002c 83F86820 		strb	r2, [r3, #104]
4702:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdPASS;
 7464              		.loc 1 4702 0
 7465 0030 0123     		movs	r3, #1
 7466 0032 FB60     		str	r3, [r7, #12]
 7467 0034 01E0     		b	.L483
 7468              	.L482:
4703:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4704:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4705:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
ARM GAS  /tmp/cc623FKg.s 			page 218


4706:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFAIL;
 7469              		.loc 1 4706 0
 7470 0036 0023     		movs	r3, #0
 7471 0038 FB60     		str	r3, [r7, #12]
 7472              	.L483:
4707:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4708:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4709:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7473              		.loc 1 4709 0
 7474 003a FFF7FEFF 		bl	vPortExitCritical
4710:../../../FreeRTOS_9_0/Source/tasks.c **** 
4711:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 7475              		.loc 1 4711 0
 7476 003e FB68     		ldr	r3, [r7, #12]
4712:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 7477              		.loc 1 4712 0
 7478 0040 1846     		mov	r0, r3
 7479 0042 1037     		adds	r7, r7, #16
 7480              	.LCFI295:
 7481              		.cfi_def_cfa_offset 8
 7482 0044 BD46     		mov	sp, r7
 7483              	.LCFI296:
 7484              		.cfi_def_cfa_register 13
 7485              		@ sp needed
 7486 0046 80BD     		pop	{r7, pc}
 7487              	.L486:
 7488              		.align	2
 7489              	.L485:
 7490 0048 00000000 		.word	pxCurrentTCB
 7491              		.cfi_endproc
 7492              	.LFE62:
 7494              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7495              		.align	2
 7496              		.thumb
 7497              		.thumb_func
 7499              	prvAddCurrentTaskToDelayedList:
 7500              	.LFB63:
4713:../../../FreeRTOS_9_0/Source/tasks.c **** 
4714:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4715:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4716:../../../FreeRTOS_9_0/Source/tasks.c **** 
4717:../../../FreeRTOS_9_0/Source/tasks.c **** 
4718:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4719:../../../FreeRTOS_9_0/Source/tasks.c **** {
 7501              		.loc 1 4719 0
 7502              		.cfi_startproc
 7503              		@ args = 0, pretend = 0, frame = 16
 7504              		@ frame_needed = 1, uses_anonymous_args = 0
 7505 0000 80B5     		push	{r7, lr}
 7506              	.LCFI297:
 7507              		.cfi_def_cfa_offset 8
 7508              		.cfi_offset 7, -8
 7509              		.cfi_offset 14, -4
 7510 0002 84B0     		sub	sp, sp, #16
 7511              	.LCFI298:
 7512              		.cfi_def_cfa_offset 24
 7513 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc623FKg.s 			page 219


 7514              	.LCFI299:
 7515              		.cfi_def_cfa_register 7
 7516 0006 7860     		str	r0, [r7, #4]
 7517 0008 3960     		str	r1, [r7]
4720:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTimeToWake;
4721:../../../FreeRTOS_9_0/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 7518              		.loc 1 4721 0
 7519 000a 314B     		ldr	r3, .L492
 7520 000c 1B68     		ldr	r3, [r3]
 7521 000e FB60     		str	r3, [r7, #12]
4722:../../../FreeRTOS_9_0/Source/tasks.c **** 
4723:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4724:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4725:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4726:../../../FreeRTOS_9_0/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4727:../../../FreeRTOS_9_0/Source/tasks.c **** 		when the task leaves the Blocked state. */
4728:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4729:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4730:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
4731:../../../FreeRTOS_9_0/Source/tasks.c **** 
4732:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4733:../../../FreeRTOS_9_0/Source/tasks.c **** 	as the same list item is used for both lists. */
4734:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7522              		.loc 1 4734 0
 7523 0010 304B     		ldr	r3, .L492+4
 7524 0012 1B68     		ldr	r3, [r3]
 7525 0014 0433     		adds	r3, r3, #4
 7526 0016 1846     		mov	r0, r3
 7527 0018 FFF7FEFF 		bl	uxListRemove
 7528 001c 0346     		mov	r3, r0
 7529 001e 002B     		cmp	r3, #0
 7530 0020 0BD1     		bne	.L488
4735:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4736:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4737:../../../FreeRTOS_9_0/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4738:../../../FreeRTOS_9_0/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 7531              		.loc 1 4738 0
 7532 0022 2C4B     		ldr	r3, .L492+4
 7533 0024 1B68     		ldr	r3, [r3]
 7534 0026 DB6A     		ldr	r3, [r3, #44]
 7535 0028 1A46     		mov	r2, r3
 7536 002a 0123     		movs	r3, #1
 7537 002c 9340     		lsls	r3, r3, r2
 7538 002e DA43     		mvns	r2, r3
 7539 0030 294B     		ldr	r3, .L492+8
 7540 0032 1B68     		ldr	r3, [r3]
 7541 0034 1340     		ands	r3, r3, r2
 7542 0036 284A     		ldr	r2, .L492+8
 7543 0038 1360     		str	r3, [r2]
 7544              	.L488:
4739:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4740:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
4741:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4742:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4743:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4744:../../../FreeRTOS_9_0/Source/tasks.c **** 
4745:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  /tmp/cc623FKg.s 			page 220


4746:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4747:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 7545              		.loc 1 4747 0
 7546 003a 7B68     		ldr	r3, [r7, #4]
 7547 003c B3F1FF3F 		cmp	r3, #-1
 7548 0040 10D1     		bne	.L489
 7549              		.loc 1 4747 0 is_stmt 0 discriminator 1
 7550 0042 3B68     		ldr	r3, [r7]
 7551 0044 002B     		cmp	r3, #0
 7552 0046 0DD0     		beq	.L489
4748:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4749:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4750:../../../FreeRTOS_9_0/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4751:../../../FreeRTOS_9_0/Source/tasks.c **** 			indefinitely. */
4752:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 7553              		.loc 1 4752 0 is_stmt 1
 7554 0048 224B     		ldr	r3, .L492+4
 7555 004a 1B68     		ldr	r3, [r3]
 7556 004c 1846     		mov	r0, r3
 7557 004e 1B21     		movs	r1, #27
 7558 0050 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
4753:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7559              		.loc 1 4753 0
 7560 0054 1F4B     		ldr	r3, .L492+4
 7561 0056 1B68     		ldr	r3, [r3]
 7562 0058 0433     		adds	r3, r3, #4
 7563 005a 2048     		ldr	r0, .L492+12
 7564 005c 1946     		mov	r1, r3
 7565 005e FFF7FEFF 		bl	vListInsertEnd
 7566 0062 32E0     		b	.L487
 7567              	.L489:
4754:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4755:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4756:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4757:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4758:../../../FreeRTOS_9_0/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4759:../../../FreeRTOS_9_0/Source/tasks.c **** 			kernel will manage it correctly. */
4760:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 7568              		.loc 1 4760 0
 7569 0064 FA68     		ldr	r2, [r7, #12]
 7570 0066 7B68     		ldr	r3, [r7, #4]
 7571 0068 1344     		add	r3, r3, r2
 7572 006a BB60     		str	r3, [r7, #8]
4761:../../../FreeRTOS_9_0/Source/tasks.c **** 
4762:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4763:../../../FreeRTOS_9_0/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 7573              		.loc 1 4763 0
 7574 006c 194B     		ldr	r3, .L492+4
 7575 006e 1B68     		ldr	r3, [r3]
 7576 0070 BA68     		ldr	r2, [r7, #8]
 7577 0072 5A60     		str	r2, [r3, #4]
4764:../../../FreeRTOS_9_0/Source/tasks.c **** 
4765:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 7578              		.loc 1 4765 0
 7579 0074 BA68     		ldr	r2, [r7, #8]
 7580 0076 FB68     		ldr	r3, [r7, #12]
 7581 0078 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc623FKg.s 			page 221


 7582 007a 0FD2     		bcs	.L491
4766:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4767:../../../FreeRTOS_9_0/Source/tasks.c ****                 traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 7583              		.loc 1 4767 0
 7584 007c 154B     		ldr	r3, .L492+4
 7585 007e 1B68     		ldr	r3, [r3]
 7586 0080 1846     		mov	r0, r3
 7587 0082 0421     		movs	r1, #4
 7588 0084 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
4768:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4769:../../../FreeRTOS_9_0/Source/tasks.c **** 				list. */
4770:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7589              		.loc 1 4770 0
 7590 0088 154B     		ldr	r3, .L492+16
 7591 008a 1A68     		ldr	r2, [r3]
 7592 008c 114B     		ldr	r3, .L492+4
 7593 008e 1B68     		ldr	r3, [r3]
 7594 0090 0433     		adds	r3, r3, #4
 7595 0092 1046     		mov	r0, r2
 7596 0094 1946     		mov	r1, r3
 7597 0096 FFF7FEFF 		bl	vListInsert
 7598 009a 16E0     		b	.L487
 7599              	.L491:
4771:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4772:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4773:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4774:../../../FreeRTOS_9_0/Source/tasks.c ****                 traceMOVED_TASK_TO_DELAYED_LIST();
 7600              		.loc 1 4774 0
 7601 009c 0D4B     		ldr	r3, .L492+4
 7602 009e 1B68     		ldr	r3, [r3]
 7603 00a0 1846     		mov	r0, r3
 7604 00a2 0421     		movs	r1, #4
 7605 00a4 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
4775:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4776:../../../FreeRTOS_9_0/Source/tasks.c **** 				is used. */
4777:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7606              		.loc 1 4777 0
 7607 00a8 0E4B     		ldr	r3, .L492+20
 7608 00aa 1A68     		ldr	r2, [r3]
 7609 00ac 094B     		ldr	r3, .L492+4
 7610 00ae 1B68     		ldr	r3, [r3]
 7611 00b0 0433     		adds	r3, r3, #4
 7612 00b2 1046     		mov	r0, r2
 7613 00b4 1946     		mov	r1, r3
 7614 00b6 FFF7FEFF 		bl	vListInsert
4778:../../../FreeRTOS_9_0/Source/tasks.c **** 
4779:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4780:../../../FreeRTOS_9_0/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4781:../../../FreeRTOS_9_0/Source/tasks.c **** 				needs to be updated too. */
4782:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 7615              		.loc 1 4782 0
 7616 00ba 0B4B     		ldr	r3, .L492+24
 7617 00bc 1B68     		ldr	r3, [r3]
 7618 00be BA68     		ldr	r2, [r7, #8]
 7619 00c0 9A42     		cmp	r2, r3
 7620 00c2 02D2     		bcs	.L487
4783:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
ARM GAS  /tmp/cc623FKg.s 			page 222


4784:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 7621              		.loc 1 4784 0
 7622 00c4 084A     		ldr	r2, .L492+24
 7623 00c6 BB68     		ldr	r3, [r7, #8]
 7624 00c8 1360     		str	r3, [r2]
 7625              	.L487:
4785:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4786:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4787:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4788:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4789:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4790:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4791:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4792:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4793:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4794:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4795:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4796:../../../FreeRTOS_9_0/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4797:../../../FreeRTOS_9_0/Source/tasks.c **** 		will manage it correctly. */
4798:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4799:../../../FreeRTOS_9_0/Source/tasks.c **** 
4800:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4801:../../../FreeRTOS_9_0/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4802:../../../FreeRTOS_9_0/Source/tasks.c **** 
4803:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4804:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4805:../../../FreeRTOS_9_0/Source/tasks.c ****             traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
4806:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4807:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4808:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4809:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4810:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4811:../../../FreeRTOS_9_0/Source/tasks.c ****             traceMOVED_TASK_TO_DELAYED_LIST();
4812:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4813:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4814:../../../FreeRTOS_9_0/Source/tasks.c **** 
4815:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4816:../../../FreeRTOS_9_0/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4817:../../../FreeRTOS_9_0/Source/tasks.c **** 			too. */
4818:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4819:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4820:../../../FreeRTOS_9_0/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4821:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4822:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4823:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4824:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4825:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4826:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4827:../../../FreeRTOS_9_0/Source/tasks.c **** 
4828:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4829:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4830:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4831:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4832:../../../FreeRTOS_9_0/Source/tasks.c **** }
 7626              		.loc 1 4832 0
 7627 00ca 1037     		adds	r7, r7, #16
 7628              	.LCFI300:
ARM GAS  /tmp/cc623FKg.s 			page 223


 7629              		.cfi_def_cfa_offset 8
 7630 00cc BD46     		mov	sp, r7
 7631              	.LCFI301:
 7632              		.cfi_def_cfa_register 13
 7633              		@ sp needed
 7634 00ce 80BD     		pop	{r7, pc}
 7635              	.L493:
 7636              		.align	2
 7637              	.L492:
 7638 00d0 00000000 		.word	xTickCount
 7639 00d4 00000000 		.word	pxCurrentTCB
 7640 00d8 00000000 		.word	uxTopReadyPriority
 7641 00dc 00000000 		.word	xSuspendedTaskList
 7642 00e0 00000000 		.word	pxOverflowDelayedTaskList
 7643 00e4 00000000 		.word	pxDelayedTaskList
 7644 00e8 00000000 		.word	xNextTaskUnblockTime
 7645              		.cfi_endproc
 7646              	.LFE63:
 7648              		.text
 7649              	.Letext0:
 7650              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 7651              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 7652              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 7653              		.file 6 "../../../FreeRTOS_9_0/Source/include/projdefs.h"
 7654              		.file 7 "../../../FreeRTOS_9_0/Source/include/list.h"
 7655              		.file 8 "../../../FreeRTOS_9_0/Source/include/task.h"
ARM GAS  /tmp/cc623FKg.s 			page 224


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cc623FKg.s:25     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cc623FKg.s:22     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cc623FKg.s:28     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cc623FKg.s:31     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cc623FKg.s:34     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cc623FKg.s:37     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cc623FKg.s:40     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cc623FKg.s:43     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cc623FKg.s:46     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cc623FKg.s:49     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cc623FKg.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cc623FKg.s:55     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cc623FKg.s:58     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cc623FKg.s:61     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cc623FKg.s:64     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cc623FKg.s:67     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cc623FKg.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cc623FKg.s:73     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cc623FKg.s:76     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cc623FKg.s:79     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cc623FKg.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cc623FKg.s:85     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cc623FKg.s:88     .bss.xTickCount:0000000000000000 $d
     /tmp/cc623FKg.s:91     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cc623FKg.s:94     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cc623FKg.s:97     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cc623FKg.s:100    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cc623FKg.s:103    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cc623FKg.s:106    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cc623FKg.s:109    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cc623FKg.s:112    .bss.xYieldPending:0000000000000000 $d
     /tmp/cc623FKg.s:115    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cc623FKg.s:118    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cc623FKg.s:121    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cc623FKg.s:124    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cc623FKg.s:127    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cc623FKg.s:130    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cc623FKg.s:133    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cc623FKg.s:136    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cc623FKg.s:139    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cc623FKg.s:142    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cc623FKg.s:145    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cc623FKg.s:148    .bss.ulTaskSwitchedInTime:0000000000000000 $d
     /tmp/cc623FKg.s:151    .bss.ulTaskSwitchedInTime:0000000000000000 ulTaskSwitchedInTime
     /tmp/cc623FKg.s:154    .bss.ulTotalRunTime:0000000000000000 $d
     /tmp/cc623FKg.s:157    .bss.ulTotalRunTime:0000000000000000 ulTotalRunTime
     /tmp/cc623FKg.s:160    .text.xTaskCreate:0000000000000000 $t
     /tmp/cc623FKg.s:165    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cc623FKg.s:273    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cc623FKg.s:491    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cc623FKg.s:269    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cc623FKg.s:487    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cc623FKg.s:4655   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cc623FKg.s:658    .text.prvAddNewTaskToReadyList:0000000000000100 $d
     /tmp/cc623FKg.s:669    .text.vTaskDelete:0000000000000000 $t
ARM GAS  /tmp/cc623FKg.s 			page 225


     /tmp/cc623FKg.s:674    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cc623FKg.s:5192   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cc623FKg.s:5235   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cc623FKg.s:858    .text.vTaskDelete:0000000000000104 $d
     /tmp/cc623FKg.s:872    .text.vTaskDelay:0000000000000000 $t
     /tmp/cc623FKg.s:877    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cc623FKg.s:2382   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cc623FKg.s:7499   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cc623FKg.s:2425   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cc623FKg.s:967    .text.vTaskDelay:0000000000000064 $d
     /tmp/cc623FKg.s:973    .text.eTaskGetState:0000000000000000 $t
     /tmp/cc623FKg.s:978    .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/cc623FKg.s:1112   .text.eTaskGetState:000000000000009c $d
     /tmp/cc623FKg.s:1121   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cc623FKg.s:1126   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cc623FKg.s:1181   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/cc623FKg.s:1186   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cc623FKg.s:1191   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cc623FKg.s:1276   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/cc623FKg.s:1281   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cc623FKg.s:1286   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cc623FKg.s:1546   .text.vTaskPrioritySet:0000000000000180 $d
     /tmp/cc623FKg.s:1554   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cc623FKg.s:1559   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cc623FKg.s:3328   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cc623FKg.s:1745   .text.vTaskSuspend:0000000000000108 $d
     /tmp/cc623FKg.s:1757   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cc623FKg.s:1761   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cc623FKg.s:1867   .text.prvTaskIsTaskSuspended:000000000000006c $d
     /tmp/cc623FKg.s:1873   .text.vTaskResume:0000000000000000 $t
     /tmp/cc623FKg.s:1878   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cc623FKg.s:2014   .text.vTaskResume:00000000000000c4 $d
     /tmp/cc623FKg.s:2022   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cc623FKg.s:2027   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cc623FKg.s:2194   .text.xTaskResumeFromISR:00000000000000e8 $d
     /tmp/cc623FKg.s:2203   .rodata:0000000000000000 $d
     /tmp/cc623FKg.s:2207   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cc623FKg.s:2212   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cc623FKg.s:2308   .text.vTaskStartScheduler:0000000000000070 $d
     /tmp/cc623FKg.s:4442   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cc623FKg.s:2318   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cc623FKg.s:2323   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cc623FKg.s:2372   .text.vTaskEndScheduler:0000000000000028 $d
     /tmp/cc623FKg.s:2377   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cc623FKg.s:2415   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/cc623FKg.s:2420   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cc623FKg.s:3054   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cc623FKg.s:2630   .text.xTaskResumeAll:0000000000000120 $d
     /tmp/cc623FKg.s:2643   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cc623FKg.s:2648   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cc623FKg.s:2688   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/cc623FKg.s:2693   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cc623FKg.s:2698   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cc623FKg.s:2739   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/cc623FKg.s:2744   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cc623FKg.s:2749   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cc623FKg.s:2780   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
ARM GAS  /tmp/cc623FKg.s 			page 226


     /tmp/cc623FKg.s:2785   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cc623FKg.s:2790   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cc623FKg.s:2864   .text.pcTaskGetName:0000000000000044 $d
     /tmp/cc623FKg.s:2869   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/cc623FKg.s:2874   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/cc623FKg.s:4995   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/cc623FKg.s:3039   .text.uxTaskGetSystemState:000000000000010c $d
     /tmp/cc623FKg.s:3049   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cc623FKg.s:3308   .text.xTaskIncrementTick:0000000000000168 $d
     /tmp/cc623FKg.s:3323   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cc623FKg.s:3553   .text.vTaskSwitchContext:0000000000000140 $d
     /tmp/cc623FKg.s:3565   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cc623FKg.s:3570   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cc623FKg.s:3634   .text.vTaskPlaceOnEventList:0000000000000040 $d
     /tmp/cc623FKg.s:3639   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cc623FKg.s:3644   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cc623FKg.s:3738   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/cc623FKg.s:3744   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cc623FKg.s:3749   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cc623FKg.s:3881   .text.xTaskRemoveFromEventList:00000000000000b8 $d
     /tmp/cc623FKg.s:3891   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cc623FKg.s:3896   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/cc623FKg.s:4040   .text.xTaskRemoveFromUnorderedEventList:00000000000000c4 $d
     /tmp/cc623FKg.s:4049   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cc623FKg.s:4054   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cc623FKg.s:4120   .text.vTaskSetTimeOutState:000000000000003c $d
     /tmp/cc623FKg.s:4126   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cc623FKg.s:4131   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cc623FKg.s:4278   .text.xTaskCheckForTimeOut:00000000000000b4 $d
     /tmp/cc623FKg.s:4284   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cc623FKg.s:4289   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cc623FKg.s:4320   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/cc623FKg.s:4325   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/cc623FKg.s:4330   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/cc623FKg.s:4385   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/cc623FKg.s:4390   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/cc623FKg.s:4438   .text.prvIdleTask:0000000000000000 $t
     /tmp/cc623FKg.s:4747   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cc623FKg.s:4489   .text.prvIdleTask:000000000000002c $d
     /tmp/cc623FKg.s:4495   .text.vTaskSetThreadLocalStoragePointer:0000000000000000 $t
     /tmp/cc623FKg.s:4500   .text.vTaskSetThreadLocalStoragePointer:0000000000000000 vTaskSetThreadLocalStoragePointer
     /tmp/cc623FKg.s:4563   .text.vTaskSetThreadLocalStoragePointer:000000000000003c $d
     /tmp/cc623FKg.s:4568   .text.pvTaskGetThreadLocalStoragePointer:0000000000000000 $t
     /tmp/cc623FKg.s:4573   .text.pvTaskGetThreadLocalStoragePointer:0000000000000000 pvTaskGetThreadLocalStoragePointer
     /tmp/cc623FKg.s:4646   .text.pvTaskGetThreadLocalStoragePointer:0000000000000048 $d
     /tmp/cc623FKg.s:4651   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cc623FKg.s:4731   .text.prvInitialiseTaskLists:000000000000005c $d
     /tmp/cc623FKg.s:4743   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cc623FKg.s:4835   .text.prvCheckTasksWaitingTermination:0000000000000068 $d
     /tmp/cc623FKg.s:4842   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/cc623FKg.s:4847   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/cc623FKg.s:5125   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cc623FKg.s:4986   .text.vTaskGetInfo:00000000000000b8 $d
     /tmp/cc623FKg.s:4991   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/cc623FKg.s:5121   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cc623FKg.s:5188   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cc623FKg.s:5231   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
ARM GAS  /tmp/cc623FKg.s 			page 227


     /tmp/cc623FKg.s:5302   .text.prvResetNextTaskUnblockTime:0000000000000040 $d
     /tmp/cc623FKg.s:5308   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cc623FKg.s:5313   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cc623FKg.s:5353   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/cc623FKg.s:5358   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cc623FKg.s:5363   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cc623FKg.s:5423   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/cc623FKg.s:5429   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/cc623FKg.s:5434   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/cc623FKg.s:5593   .text.vTaskPriorityInherit:00000000000000ec $d
     /tmp/cc623FKg.s:5600   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cc623FKg.s:5605   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cc623FKg.s:5790   .text.xTaskPriorityDisinherit:0000000000000108 $d
     /tmp/cc623FKg.s:5797   .text.prvWriteNameToBuffer:0000000000000000 $t
     /tmp/cc623FKg.s:5801   .text.prvWriteNameToBuffer:0000000000000000 prvWriteNameToBuffer
     /tmp/cc623FKg.s:5873   .text.vTaskList:0000000000000000 $t
     /tmp/cc623FKg.s:5878   .text.vTaskList:0000000000000000 vTaskList
     /tmp/cc623FKg.s:5950   .text.vTaskList:0000000000000064 $d
     /tmp/cc623FKg.s:5954   .text.vTaskList:0000000000000074 $t
     /tmp/cc623FKg.s:6070   .text.vTaskList:0000000000000120 $d
     /tmp/cc623FKg.s:6083   .text.vTaskGetRunTimeStats:0000000000000000 $t
     /tmp/cc623FKg.s:6088   .text.vTaskGetRunTimeStats:0000000000000000 vTaskGetRunTimeStats
     /tmp/cc623FKg.s:6249   .text.vTaskGetRunTimeStats:00000000000000fc $d
     /tmp/cc623FKg.s:6257   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cc623FKg.s:6262   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cc623FKg.s:6311   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/cc623FKg.s:6316   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cc623FKg.s:6321   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cc623FKg.s:6364   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/cc623FKg.s:6369   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cc623FKg.s:6374   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cc623FKg.s:6485   .text.ulTaskNotifyTake:0000000000000094 $d
     /tmp/cc623FKg.s:6491   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cc623FKg.s:6496   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cc623FKg.s:6630   .text.xTaskNotifyWait:00000000000000c0 $d
     /tmp/cc623FKg.s:6636   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cc623FKg.s:6641   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cc623FKg.s:6720   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/cc623FKg.s:6725   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/cc623FKg.s:6880   .text.xTaskGenericNotify:0000000000000158 $d
     /tmp/cc623FKg.s:6888   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cc623FKg.s:6893   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cc623FKg.s:6992   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/cc623FKg.s:6997   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/cc623FKg.s:7180   .text.xTaskGenericNotifyFromISR:00000000000001a0 $d
     /tmp/cc623FKg.s:7190   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cc623FKg.s:7195   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cc623FKg.s:7405   .text.vTaskNotifyGiveFromISR:0000000000000128 $d
     /tmp/cc623FKg.s:7415   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cc623FKg.s:7420   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cc623FKg.s:7490   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/cc623FKg.s:7495   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cc623FKg.s:7638   .text.prvAddCurrentTaskToDelayedList:00000000000000d0 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
ARM GAS  /tmp/cc623FKg.s 			page 228


vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
SEGGER_SYSVIEW_OnTaskCreate
SYSVIEW_AddTask
SEGGER_SYSVIEW_OnTaskStartReady
vListInsertEnd
vPortExitCritical
uxListRemove
SEGGER_SYSVIEW_ShrinkId
SEGGER_SYSVIEW_RecordU32
vPortValidateInterruptPriority
SEGGER_SYSVIEW_RecordU32x2
SYSVIEW_UpdateTask
SEGGER_SYSVIEW_OnTaskStopReady
xPortStartScheduler
vPortEndScheduler
xGetRunTimeCounterValue
vApplicationTickHook
vApplicationStackOverflowHook
memcmp
SEGGER_SYSVIEW_OnTaskStartExec
SEGGER_SYSVIEW_OnIdle
vListInsert
vApplicationIdleHook
vListInitialise
strcpy
strlen
sprintf
SYSVIEW_RecordU32x4
SYSVIEW_RecordU32x5

ARM GAS  /tmp/ccqyzqAq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"FreeRTOS_UDP_IP.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	xDefaultPartUDPPacketHeader
  21              		.section	.data.xDefaultPartUDPPacketHeader,"aw",%progbits
  22              		.align	2
  25              	xDefaultPartUDPPacketHeader:
  26 0000 00       		.byte	0
  27 0001 00       		.byte	0
  28 0002 00       		.byte	0
  29 0003 00       		.byte	0
  30 0004 00       		.byte	0
  31 0005 00       		.byte	0
  32 0006 08       		.byte	8
  33 0007 00       		.byte	0
  34 0008 45       		.byte	69
  35 0009 00       		.byte	0
  36 000a 00       		.byte	0
  37 000b 00       		.byte	0
  38 000c 00       		.byte	0
  39 000d 00       		.byte	0
  40 000e 00       		.byte	0
  41 000f 00       		.byte	0
  42 0010 80       		.byte	-128
  43 0011 11       		.byte	17
  44 0012 00       		.byte	0
  45 0013 00       		.byte	0
  46 0014 00       		.byte	0
  47 0015 00       		.byte	0
  48 0016 00       		.byte	0
  49 0017 00       		.byte	0
  50              		.section	.text.vProcessGeneratedUDPPacket,"ax",%progbits
  51              		.align	2
  52              		.global	vProcessGeneratedUDPPacket
  53              		.thumb
  54              		.thumb_func
  56              	vProcessGeneratedUDPPacket:
  57              	.LFB29:
  58              		.file 1 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
ARM GAS  /tmp/ccqyzqAq.s 			page 2


   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** /* Standard includes. */
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include <stdint.h>
ARM GAS  /tmp/ccqyzqAq.s 			page 3


  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include <stdio.h>
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** /* FreeRTOS includes. */
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "FreeRTOS.h"
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "task.h"
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "queue.h"
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "semphr.h"
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** /* FreeRTOS+TCP includes. */
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "FreeRTOS_IP.h"
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "FreeRTOS_Sockets.h"
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "FreeRTOS_IP_Private.h"
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "FreeRTOS_UDP_IP.h"
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "FreeRTOS_ARP.h"
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "FreeRTOS_DHCP.h"
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "NetworkInterface.h"
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #include "NetworkBufferManagement.h"
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #if( ipconfigUSE_DNS == 1 )
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	#include "FreeRTOS_DNS.h"
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #endif
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** /* The expected IP version and header length coded into the IP header itself. */
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** #define ipIP_VERSION_AND_HEADER_LENGTH_BYTE ( ( uint8_t ) 0x45 )
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** /* Part of the Ethernet and IP headers are always constant when sending an IPv4
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** UDP packet.  This array defines the constant parts, allowing this part of the
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** packet to be filled in using a simple memcpy() instead of individual writes. */
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** UDPPacketHeader_t xDefaultPartUDPPacketHeader =
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** {
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	/* .ucBytes : */
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	{
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* Ethernet source MAC address. */
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		0x08, 0x00, 							/* Ethernet frame type. */
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		ipIP_VERSION_AND_HEADER_LENGTH_BYTE, 	/* ucVersionHeaderLength. */
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		0x00, 									/* ucDifferentiatedServicesCode. */
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		0x00, 0x00, 							/* usLength. */
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		0x00, 0x00, 							/* usIdentification. */
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		0x00, 0x00, 							/* usFragmentOffset. */
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		ipconfigUDP_TIME_TO_LIVE, 				/* ucTimeToLive */
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		ipPROTOCOL_UDP, 						/* ucProtocol. */
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		0x00, 0x00, 							/* usHeaderChecksum. */
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		0x00, 0x00, 0x00, 0x00 					/* Source IP address. */
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	}
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** };
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** /*-----------------------------------------------------------*/
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** {
  59              		.loc 1 108 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 32
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 80B5     		push	{r7, lr}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
ARM GAS  /tmp/ccqyzqAq.s 			page 4


  67              		.cfi_offset 14, -4
  68 0002 88B0     		sub	sp, sp, #32
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 40
  71 0004 00AF     		add	r7, sp, #0
  72              	.LCFI2:
  73              		.cfi_def_cfa_register 7
  74 0006 7860     		str	r0, [r7, #4]
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** UDPPacket_t *pxUDPPacket;
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** IPHeader_t *pxIPHeader;
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** eARPLookupResult_t eReturned;
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
  75              		.loc 1 112 0
  76 0008 7B68     		ldr	r3, [r7, #4]
  77 000a 5B69     		ldr	r3, [r3, #20]
  78 000c FB60     		str	r3, [r7, #12]
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	/* Map the UDP packet onto the start of the frame. */
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
  79              		.loc 1 115 0
  80 000e 7B68     		ldr	r3, [r7, #4]
  81 0010 9B69     		ldr	r3, [r3, #24]
  82 0012 BB61     		str	r3, [r7, #24]
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	/* Determine the ARP cache status for the requested IP address. */
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddre
  83              		.loc 1 118 0
  84 0014 BB69     		ldr	r3, [r7, #24]
  85 0016 07F10C02 		add	r2, r7, #12
  86 001a 1046     		mov	r0, r2
  87 001c 1946     		mov	r1, r3
  88 001e FFF7FEFF 		bl	eARPGetCacheEntry
  89 0022 0346     		mov	r3, r0
  90 0024 FB77     		strb	r3, [r7, #31]
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	if( eReturned != eCantSendPacket )
  91              		.loc 1 120 0
  92 0026 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
  93 0028 022B     		cmp	r3, #2
  94 002a 00F08380 		beq	.L2
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	{
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		if( eReturned == eARPCacheHit )
  95              		.loc 1 122 0
  96 002e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
  97 0030 012B     		cmp	r3, #1
  98 0032 6ED1     		bne	.L3
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		{
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				uint8_t ucSocketOptions;
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#endif
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* Create short cuts to the data within the packet. */
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			pxIPHeader = &( pxUDPPacket->xIPHeader );
  99              		.loc 1 130 0
 100 0034 BB69     		ldr	r3, [r7, #24]
 101 0036 0E33     		adds	r3, r3, #14
ARM GAS  /tmp/ccqyzqAq.s 			page 5


 102 0038 7B61     		str	r3, [r7, #20]
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* Is it possible that the packet is not actually a UDP packet
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			after all, but an ICMP packet. */
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
 103              		.loc 1 135 0
 104 003a 7B68     		ldr	r3, [r7, #4]
 105 003c 1B8C     		ldrh	r3, [r3, #32]
 106 003e 002B     		cmp	r3, #0
 107 0040 26D0     		beq	.L4
 108              	.LBB2:
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			UDPHeader_t *pxUDPHeader;
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 109              		.loc 1 140 0
 110 0042 BB69     		ldr	r3, [r7, #24]
 111 0044 2233     		adds	r3, r3, #34
 112 0046 3B61     		str	r3, [r7, #16]
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 113              		.loc 1 142 0
 114 0048 7B68     		ldr	r3, [r7, #4]
 115 004a 1A8C     		ldrh	r2, [r3, #32]
 116 004c 3B69     		ldr	r3, [r7, #16]
 117 004e 5A80     		strh	r2, [r3, #2]	@ unaligned
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 118              		.loc 1 143 0
 119 0050 7B68     		ldr	r3, [r7, #4]
 120 0052 5A8C     		ldrh	r2, [r3, #34]
 121 0054 3B69     		ldr	r3, [r7, #16]
 122 0056 1A80     		strh	r2, [r3]	@ unaligned
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 123              		.loc 1 144 0
 124 0058 7B68     		ldr	r3, [r7, #4]
 125 005a DB69     		ldr	r3, [r3, #28]
 126 005c 9BB2     		uxth	r3, r3
 127 005e 0833     		adds	r3, r3, #8
 128 0060 9AB2     		uxth	r2, r3
 129 0062 3B69     		ldr	r3, [r7, #16]
 130 0064 9A80     		strh	r2, [r3, #4]	@ unaligned
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 131              		.loc 1 145 0
 132 0066 3B69     		ldr	r3, [r7, #16]
 133 0068 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 134 006a 9BB2     		uxth	r3, r3
 135 006c 1B02     		lsls	r3, r3, #8
 136 006e 9AB2     		uxth	r2, r3
 137 0070 3B69     		ldr	r3, [r7, #16]
 138 0072 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 139 0074 9BB2     		uxth	r3, r3
 140 0076 1B0A     		lsrs	r3, r3, #8
 141 0078 9BB2     		uxth	r3, r3
 142 007a 9BB2     		uxth	r3, r3
 143 007c 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccqyzqAq.s 			page 6


 144 007e 9BB2     		uxth	r3, r3
 145 0080 9AB2     		uxth	r2, r3
 146 0082 3B69     		ldr	r3, [r7, #16]
 147 0084 9A80     		strh	r2, [r3, #4]	@ unaligned
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxUDPHeader->usChecksum = 0u;
 148              		.loc 1 146 0
 149 0086 3B69     		ldr	r3, [r7, #16]
 150 0088 0022     		movs	r2, #0
 151 008a 9A71     		strb	r2, [r3, #6]
 152 008c 0022     		movs	r2, #0
 153 008e DA71     		strb	r2, [r3, #7]
 154              	.L4:
 155              	.LBE2:
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* memcpy() the constant parts of the header information into
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			the	correct location within the packet.  This fills in:
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xEthernetHeader.xSourceAddress
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xEthernetHeader.usFrameType
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xIPHeader.ucVersionHeaderLength
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xIPHeader.ucDifferentiatedServicesCode
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xIPHeader.usLength
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xIPHeader.usIdentification
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xIPHeader.usFragmentOffset
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xIPHeader.ucTimeToLive
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xIPHeader.ucProtocol
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			and
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xIPHeader.usHeaderChecksum
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			*/
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* Save options now, as they will be overwritten by memcpy */
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#endif
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			memcpy( ( void *) &( pxUDPPacket->xEthernetHeader.xSourceAddress ), ( void * ) xDefaultPartUDPPa
 156              		.loc 1 167 0
 157 0090 BB69     		ldr	r3, [r7, #24]
 158 0092 0633     		adds	r3, r3, #6
 159 0094 1846     		mov	r0, r3
 160 0096 2E49     		ldr	r1, .L11
 161 0098 1822     		movs	r2, #24
 162 009a FFF7FEFF 		bl	memcpy
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#if ipconfigSUPPORT_OUTGOING_PINGS == 1
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( pxNetworkBuffer->usPort == ipPACKET_CONTAINS_ICMP_DATA )
 163              		.loc 1 170 0
 164 009e 7B68     		ldr	r3, [r7, #4]
 165 00a0 1B8C     		ldrh	r3, [r3, #32]
 166 00a2 002B     		cmp	r3, #0
 167 00a4 0AD1     		bne	.L5
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 168              		.loc 1 172 0
 169 00a6 7B69     		ldr	r3, [r7, #20]
 170 00a8 0122     		movs	r2, #1
 171 00aa 5A72     		strb	r2, [r3, #9]
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
 172              		.loc 1 173 0
ARM GAS  /tmp/ccqyzqAq.s 			page 7


 173 00ac 7B68     		ldr	r3, [r7, #4]
 174 00ae DB69     		ldr	r3, [r3, #28]
 175 00b0 9BB2     		uxth	r3, r3
 176 00b2 1433     		adds	r3, r3, #20
 177 00b4 9AB2     		uxth	r2, r3
 178 00b6 7B69     		ldr	r3, [r7, #20]
 179 00b8 5A80     		strh	r2, [r3, #2]	@ unaligned
 180 00ba 06E0     		b	.L6
 181              	.L5:
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			else
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + siz
 182              		.loc 1 178 0
 183 00bc 7B68     		ldr	r3, [r7, #4]
 184 00be DB69     		ldr	r3, [r3, #28]
 185 00c0 9BB2     		uxth	r3, r3
 186 00c2 1C33     		adds	r3, r3, #28
 187 00c4 9AB2     		uxth	r2, r3
 188 00c6 7B69     		ldr	r3, [r7, #20]
 189 00c8 5A80     		strh	r2, [r3, #2]	@ unaligned
 190              	.L6:
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* The total transmit size adds on the Ethernet header. */
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 191              		.loc 1 182 0
 192 00ca 7B69     		ldr	r3, [r7, #20]
 193 00cc 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 194 00ce 9BB2     		uxth	r3, r3
 195 00d0 03F10E02 		add	r2, r3, #14
 196 00d4 7B68     		ldr	r3, [r7, #4]
 197 00d6 DA61     		str	r2, [r3, #28]
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 198              		.loc 1 183 0
 199 00d8 7B69     		ldr	r3, [r7, #20]
 200 00da 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 201 00dc 9BB2     		uxth	r3, r3
 202 00de 1B02     		lsls	r3, r3, #8
 203 00e0 9AB2     		uxth	r2, r3
 204 00e2 7B69     		ldr	r3, [r7, #20]
 205 00e4 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 206 00e6 9BB2     		uxth	r3, r3
 207 00e8 1B0A     		lsrs	r3, r3, #8
 208 00ea 9BB2     		uxth	r3, r3
 209 00ec 9BB2     		uxth	r3, r3
 210 00ee 1343     		orrs	r3, r3, r2
 211 00f0 9BB2     		uxth	r3, r3
 212 00f2 9AB2     		uxth	r2, r3
 213 00f4 7B69     		ldr	r3, [r7, #20]
 214 00f6 5A80     		strh	r2, [r3, #2]	@ unaligned
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* HT:endian: changed back to network endian */
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 215              		.loc 1 185 0
 216 00f8 7B68     		ldr	r3, [r7, #4]
 217 00fa 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/ccqyzqAq.s 			page 8


 218 00fc 7B69     		ldr	r3, [r7, #20]
 219 00fe 1A61     		str	r2, [r3, #16]	@ unaligned
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#if( ipconfigUSE_LLMNR == 1 )
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				/* LLMNR messages are typically used on a LAN and they're
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				 * not supposed to cross routers */
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 220              		.loc 1 191 0
 221 0100 7B68     		ldr	r3, [r7, #4]
 222 0102 5B69     		ldr	r3, [r3, #20]
 223 0104 134A     		ldr	r2, .L11+4
 224 0106 9342     		cmp	r3, r2
 225 0108 14D1     		bne	.L2
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					pxIPHeader->ucTimeToLive = 0x01;
 226              		.loc 1 193 0
 227 010a 7B69     		ldr	r3, [r7, #20]
 228 010c 0122     		movs	r2, #1
 229 010e 1A72     		strb	r2, [r3, #8]
 230 0110 10E0     		b	.L2
 231              	.L3:
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#endif
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxIPHeader->usHeaderChecksum = 0u;
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionH
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0u )
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					usGenerateProtocolChecksum( (uint8_t*)pxUDPPacket, pdTRUE );
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				else
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					pxUDPPacket->xUDPHeader.usChecksum = 0u;
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#endif
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		}
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		else if( eReturned == eARPCacheMiss )
 232              		.loc 1 215 0
 233 0112 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 234 0114 002B     		cmp	r3, #0
 235 0116 0BD1     		bne	.L8
 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		{
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* Add an entry to the ARP table with a null hardware address.
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			This allows the ARP timer to know that an ARP reply is
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			outstanding, and perform retransmissions if necessary. */
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			vARPRefreshCacheEntry( NULL, ulIPAddress );
 236              		.loc 1 220 0
 237 0118 FB68     		ldr	r3, [r7, #12]
 238 011a 0020     		movs	r0, #0
 239 011c 1946     		mov	r1, r3
ARM GAS  /tmp/ccqyzqAq.s 			page 9


 240 011e FFF7FEFF 		bl	vARPRefreshCacheEntry
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* Generate an ARP for the required IP address. */
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 241              		.loc 1 224 0
 242 0122 FA68     		ldr	r2, [r7, #12]
 243 0124 7B68     		ldr	r3, [r7, #4]
 244 0126 5A61     		str	r2, [r3, #20]
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			vARPGenerateRequestPacket( pxNetworkBuffer );
 245              		.loc 1 225 0
 246 0128 7868     		ldr	r0, [r7, #4]
 247 012a FFF7FEFF 		bl	vARPGenerateRequestPacket
 248 012e 01E0     		b	.L2
 249              	.L8:
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		}
 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		else
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		{
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* The lookup indicated that an ARP request has already been
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			sent out for the queried IP address. */
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			eReturned = eCantSendPacket;
 250              		.loc 1 231 0
 251 0130 0223     		movs	r3, #2
 252 0132 FB77     		strb	r3, [r7, #31]
 253              	.L2:
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		}
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	}
 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	if( eReturned != eCantSendPacket )
 254              		.loc 1 235 0
 255 0134 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 256 0136 022B     		cmp	r3, #2
 257 0138 04D0     		beq	.L9
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	{
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		/* The network driver is responsible for freeing the network buffer
 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		after the packet has been sent. */
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		{
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			BaseType_t xIndex;
 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				FreeRTOS_printf( ( "vProcessGeneratedUDPPacket: length %lu\n", pxNetworkBuffer->xDataLength ) )
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHE
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0u;
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		}
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#endif
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 258              		.loc 1 256 0
 259 013a 7868     		ldr	r0, [r7, #4]
 260 013c 0121     		movs	r1, #1
ARM GAS  /tmp/ccqyzqAq.s 			page 10


 261 013e FFF7FEFF 		bl	xNetworkInterfaceOutput
 262 0142 02E0     		b	.L1
 263              	.L9:
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	}
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	else
 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	{
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		/* The packet can't be sent (DHCP not completed?).  Just drop the
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		packet. */
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 264              		.loc 1 262 0
 265 0144 7868     		ldr	r0, [r7, #4]
 266 0146 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 267              	.L1:
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	}
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** }
 268              		.loc 1 264 0
 269 014a 2037     		adds	r7, r7, #32
 270              	.LCFI3:
 271              		.cfi_def_cfa_offset 8
 272 014c BD46     		mov	sp, r7
 273              	.LCFI4:
 274              		.cfi_def_cfa_register 13
 275              		@ sp needed
 276 014e 80BD     		pop	{r7, pc}
 277              	.L12:
 278              		.align	2
 279              	.L11:
 280 0150 00000000 		.word	xDefaultPartUDPPacketHeader
 281 0154 E00000FC 		.word	-67108640
 282              		.cfi_endproc
 283              	.LFE29:
 285              		.section	.text.xProcessReceivedUDPPacket,"ax",%progbits
 286              		.align	2
 287              		.global	xProcessReceivedUDPPacket
 288              		.thumb
 289              		.thumb_func
 291              	xProcessReceivedUDPPacket:
 292              	.LFB30:
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** /*-----------------------------------------------------------*/
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** {
 293              		.loc 1 268 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 24
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0000 80B5     		push	{r7, lr}
 298              	.LCFI5:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0002 86B0     		sub	sp, sp, #24
 303              	.LCFI6:
 304              		.cfi_def_cfa_offset 32
 305 0004 00AF     		add	r7, sp, #0
 306              	.LCFI7:
 307              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccqyzqAq.s 			page 11


 308 0006 7860     		str	r0, [r7, #4]
 309 0008 0B46     		mov	r3, r1
 310 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** BaseType_t xReturn = pdPASS;
 311              		.loc 1 269 0
 312 000c 0123     		movs	r3, #1
 313 000e 7B61     		str	r3, [r7, #20]
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** FreeRTOS_Socket_t *pxSocket;
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 314              		.loc 1 272 0
 315 0010 7B68     		ldr	r3, [r7, #4]
 316 0012 9B69     		ldr	r3, [r3, #24]
 317 0014 3B61     		str	r3, [r7, #16]
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	pxSocket = pxUDPSocketLookup( usPort );
 318              		.loc 1 274 0
 319 0016 7B88     		ldrh	r3, [r7, #2]
 320 0018 1846     		mov	r0, r3
 321 001a FFF7FEFF 		bl	pxUDPSocketLookup
 322 001e F860     		str	r0, [r7, #12]
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	if( pxSocket )
 323              		.loc 1 276 0
 324 0020 FB68     		ldr	r3, [r7, #12]
 325 0022 002B     		cmp	r3, #0
 326 0024 3AD0     		beq	.L14
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	{
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		/* When refreshing the ARP cache with received UDP packets we must be
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		careful;  hundreds of broadcast messages may pass and if we're not
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		handling them, no use to fill the ARP cache with those IP addresses. */
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.u
 327              		.loc 1 282 0
 328 0026 3B69     		ldr	r3, [r7, #16]
 329 0028 9A1D     		adds	r2, r3, #6
 330 002a 3B69     		ldr	r3, [r7, #16]
 331 002c D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 332 0030 1046     		mov	r0, r2
 333 0032 1946     		mov	r1, r3
 334 0034 FFF7FEFF 		bl	vARPRefreshCacheEntry
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#if( ipconfigUSE_CALLBACKS == 1 )
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		{
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* Did the owner of this socket register a reception handler ? */
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				struct freertos_sockaddr xSourceAddress, destinationAddress;
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				void *pcData = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xSourceAddress.sin_addr = pxNetworkBuffer->ulIPAddress;
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				destinationAddress.sin_port = usPort;
 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				destinationAddress.sin_addr = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				if( xHandler( ( Socket_t * ) pxSocket, ( void* ) pcData, ( size_t ) pxNetworkBuffer->xDataLengt
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					&xSourceAddress, &destinationAddress ) )
ARM GAS  /tmp/ccqyzqAq.s 			page 12


 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					xReturn = pdFAIL; /* FAIL means that we did not consume or release the buffer */
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		}
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#endif /* ipconfigUSE_CALLBACKS */
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#if( ipconfigUDP_MAX_RX_PACKETS > 0 )
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		{
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( xReturn == pdPASS )
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				if ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) >= pxSocket->u.xUDP.u
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket: buffer full %ld >= %ld port %u\n",
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 						listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ),
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 						pxSocket->u.xUDP.uxMaxPackets, pxSocket->usLocalPort ) );
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					xReturn = pdFAIL; /* we did not consume or release the buffer */
 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		}
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#endif
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		if( xReturn == pdPASS )
 335              		.loc 1 321 0
 336 0038 7B69     		ldr	r3, [r7, #20]
 337 003a 012B     		cmp	r3, #1
 338 003c 6AD1     		bne	.L18
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		{
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			vTaskSuspendAll();
 339              		.loc 1 323 0
 340 003e FFF7FEFF 		bl	vTaskSuspendAll
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				if( xReturn == pdPASS )
 341              		.loc 1 325 0
 342 0042 7B69     		ldr	r3, [r7, #20]
 343 0044 012B     		cmp	r3, #1
 344 0046 0BD1     		bne	.L16
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					taskENTER_CRITICAL();
 345              		.loc 1 327 0
 346 0048 FFF7FEFF 		bl	vPortEnterCritical
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					{
 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 						/* Add the network packet to the list of packets to be
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 						processed by the socket. */
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListIte
 347              		.loc 1 331 0
 348 004c FB68     		ldr	r3, [r7, #12]
 349 004e 03F13802 		add	r2, r3, #56
 350 0052 7B68     		ldr	r3, [r7, #4]
 351 0054 1046     		mov	r0, r2
 352 0056 1946     		mov	r1, r3
 353 0058 FFF7FEFF 		bl	vListInsertEnd
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					}
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					taskEXIT_CRITICAL();
 354              		.loc 1 333 0
 355 005c FFF7FEFF 		bl	vPortExitCritical
 356              	.L16:
ARM GAS  /tmp/ccqyzqAq.s 			page 13


 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			xTaskResumeAll();
 357              		.loc 1 336 0
 358 0060 FFF7FEFF 		bl	xTaskResumeAll
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* Set the socket's receive event */
 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( pxSocket->xEventGroup != NULL )
 359              		.loc 1 339 0
 360 0064 FB68     		ldr	r3, [r7, #12]
 361 0066 5B68     		ldr	r3, [r3, #4]
 362 0068 002B     		cmp	r3, #0
 363 006a 05D0     		beq	.L17
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 364              		.loc 1 341 0
 365 006c FB68     		ldr	r3, [r7, #12]
 366 006e 5B68     		ldr	r3, [r3, #4]
 367 0070 1846     		mov	r0, r3
 368 0072 0121     		movs	r1, #1
 369 0074 FFF7FEFF 		bl	xEventGroupSetBits
 370              	.L17:
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 371              		.loc 1 346 0
 372 0078 FB68     		ldr	r3, [r7, #12]
 373 007a 9B6A     		ldr	r3, [r3, #40]
 374 007c 002B     		cmp	r3, #0
 375 007e 49D0     		beq	.L18
 376              		.loc 1 346 0 is_stmt 0 discriminator 1
 377 0080 FB68     		ldr	r3, [r7, #12]
 378 0082 DB6A     		ldr	r3, [r3, #44]
 379 0084 03F00103 		and	r3, r3, #1
 380 0088 002B     		cmp	r3, #0
 381 008a 43D0     		beq	.L18
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 382              		.loc 1 348 0 is_stmt 1
 383 008c FB68     		ldr	r3, [r7, #12]
 384 008e 9B6A     		ldr	r3, [r3, #40]
 385 0090 1B68     		ldr	r3, [r3]
 386 0092 1846     		mov	r0, r3
 387 0094 0121     		movs	r1, #1
 388 0096 FFF7FEFF 		bl	xEventGroupSetBits
 389 009a 3BE0     		b	.L18
 390              	.L14:
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#endif
 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#if( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				if( pxSocket->pxUserSemaphore != NULL )
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
ARM GAS  /tmp/ccqyzqAq.s 			page 14


 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					xSemaphoreGive( pxSocket->pxUserSemaphore );
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#endif
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#if( ipconfigUSE_DHCP == 1 )
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				if( xIsDHCPSocket( pxSocket ) )
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				{
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 					xSendEventToIPTask( eDHCPEvent );
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				}
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			#endif
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		}
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	}
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	else
 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	{
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		/* There is no socket listening to the target port, but still it might
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		be for this node. */
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#if( ipconfigUSE_DNS == 1 )
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* a DNS reply, check for the source port.  Although the DNS client
 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			does open a UDP socket to send a messages, this socket will be
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			closed after a short timeout.  Messages that come late (after the
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			socket is closed) will be treated here. */
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ipDNS_PORT )
 391              		.loc 1 382 0
 392 009c 3B69     		ldr	r3, [r7, #16]
 393 009e 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 394 00a0 9BB2     		uxth	r3, r3
 395 00a2 1B02     		lsls	r3, r3, #8
 396 00a4 9AB2     		uxth	r2, r3
 397 00a6 3B69     		ldr	r3, [r7, #16]
 398 00a8 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 399 00aa 9BB2     		uxth	r3, r3
 400 00ac 1B0A     		lsrs	r3, r3, #8
 401 00ae 9BB2     		uxth	r3, r3
 402 00b0 9BB2     		uxth	r3, r3
 403 00b2 1343     		orrs	r3, r3, r2
 404 00b4 9BB2     		uxth	r3, r3
 405 00b6 1BB2     		sxth	r3, r3
 406 00b8 352B     		cmp	r3, #53
 407 00ba 0ED1     		bne	.L19
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader
 408              		.loc 1 384 0
 409 00bc 3B69     		ldr	r3, [r7, #16]
 410 00be 9A1D     		adds	r2, r3, #6
 411 00c0 3B69     		ldr	r3, [r7, #16]
 412 00c2 D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 413 00c6 1046     		mov	r0, r2
 414 00c8 1946     		mov	r1, r3
 415 00ca FFF7FEFF 		bl	vARPRefreshCacheEntry
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 416              		.loc 1 385 0
 417 00ce 7868     		ldr	r0, [r7, #4]
 418 00d0 FFF7FEFF 		bl	ulDNSHandlePacket
ARM GAS  /tmp/ccqyzqAq.s 			page 15


 419 00d4 0346     		mov	r3, r0
 420 00d6 7B61     		str	r3, [r7, #20]
 421 00d8 1CE0     		b	.L18
 422              	.L19:
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			else
 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#endif
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#if( ipconfigUSE_LLMNR == 1 )
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* a LLMNR request, check for the destination port. */
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 423              		.loc 1 392 0
 424 00da 7B88     		ldrh	r3, [r7, #2]
 425 00dc 4EF61432 		movw	r2, #60180
 426 00e0 9342     		cmp	r3, r2
 427 00e2 06D0     		beq	.L20
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 428              		.loc 1 393 0 discriminator 1
 429 00e4 3B69     		ldr	r3, [r7, #16]
 430 00e6 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 431 00e8 9BB2     		uxth	r3, r3
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 432              		.loc 1 392 0 discriminator 1
 433 00ea 4EF61432 		movw	r2, #60180
 434 00ee 9342     		cmp	r3, r2
 435 00f0 0ED1     		bne	.L21
 436              	.L20:
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader
 437              		.loc 1 395 0
 438 00f2 3B69     		ldr	r3, [r7, #16]
 439 00f4 9A1D     		adds	r2, r3, #6
 440 00f6 3B69     		ldr	r3, [r7, #16]
 441 00f8 D3F81A30 		ldr	r3, [r3, #26]	@ unaligned
 442 00fc 1046     		mov	r0, r2
 443 00fe 1946     		mov	r1, r3
 444 0100 FFF7FEFF 		bl	vARPRefreshCacheEntry
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 445              		.loc 1 396 0
 446 0104 7868     		ldr	r0, [r7, #4]
 447 0106 FFF7FEFF 		bl	ulDNSHandlePacket
 448 010a 0346     		mov	r3, r0
 449 010c 7B61     		str	r3, [r7, #20]
 450 010e 01E0     		b	.L18
 451              	.L21:
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			else
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#endif /* ipconfigUSE_LLMNR */
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#if( ipconfigUSE_NBNS == 1 )
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			/* a NetBIOS request, check for the destination port */
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipNBNS_PORT ) ) )
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			{
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			}
ARM GAS  /tmp/ccqyzqAq.s 			page 16


 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			else
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		#endif /* ipconfigUSE_NBNS */
 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		{
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 			xReturn = pdFAIL;
 452              		.loc 1 412 0
 453 0110 0023     		movs	r3, #0
 454 0112 7B61     		str	r3, [r7, #20]
 455              	.L18:
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 		}
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	}
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 
 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** 	return xReturn;
 456              		.loc 1 416 0
 457 0114 7B69     		ldr	r3, [r7, #20]
 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_UDP_IP.c **** }
 458              		.loc 1 417 0
 459 0116 1846     		mov	r0, r3
 460 0118 1837     		adds	r7, r7, #24
 461              	.LCFI8:
 462              		.cfi_def_cfa_offset 8
 463 011a BD46     		mov	sp, r7
 464              	.LCFI9:
 465              		.cfi_def_cfa_register 13
 466              		@ sp needed
 467 011c 80BD     		pop	{r7, pc}
 468              		.cfi_endproc
 469              	.LFE30:
 471 011e 00BF     		.text
 472              	.Letext0:
 473              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 474              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 475              		.file 4 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 476              		.file 5 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
 477              		.file 6 "../../../FreeRTOS_9_0/Source/include/list.h"
 478              		.file 7 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
 479              		.file 8 "../../../FreeRTOS_9_0/Source/include/event_groups.h"
 480              		.file 9 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h"
 481              		.file 10 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_TCP_WIN.h"
 482              		.file 11 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
 483              		.file 12 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Sockets.h"
 484              		.file 13 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_ARP.h"
ARM GAS  /tmp/ccqyzqAq.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FreeRTOS_UDP_IP.c
     /tmp/ccqyzqAq.s:25     .data.xDefaultPartUDPPacketHeader:0000000000000000 xDefaultPartUDPPacketHeader
     /tmp/ccqyzqAq.s:22     .data.xDefaultPartUDPPacketHeader:0000000000000000 $d
     /tmp/ccqyzqAq.s:51     .text.vProcessGeneratedUDPPacket:0000000000000000 $t
     /tmp/ccqyzqAq.s:56     .text.vProcessGeneratedUDPPacket:0000000000000000 vProcessGeneratedUDPPacket
     /tmp/ccqyzqAq.s:280    .text.vProcessGeneratedUDPPacket:0000000000000150 $d
     /tmp/ccqyzqAq.s:286    .text.xProcessReceivedUDPPacket:0000000000000000 $t
     /tmp/ccqyzqAq.s:291    .text.xProcessReceivedUDPPacket:0000000000000000 xProcessReceivedUDPPacket
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
eARPGetCacheEntry
memcpy
vARPRefreshCacheEntry
vARPGenerateRequestPacket
xNetworkInterfaceOutput
vReleaseNetworkBufferAndDescriptor
pxUDPSocketLookup
vTaskSuspendAll
vPortEnterCritical
vListInsertEnd
vPortExitCritical
xTaskResumeAll
xEventGroupSetBits
ulDNSHandlePacket

ARM GAS  /tmp/ccHadyGH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f7xx_it.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.NMI_Handler,"ax",%progbits
  21              		.align	2
  22              		.global	NMI_Handler
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB140:
  28              		.file 1 "Src/stm32f7xx_it.c"
   1:Src/stm32f7xx_it.c **** /**
   2:Src/stm32f7xx_it.c ****   ******************************************************************************
   3:Src/stm32f7xx_it.c ****   * @file    LwIP/LwIP_HTTP_Server_Socket_RTOS/Src/stm32f7xx_it.c 
   4:Src/stm32f7xx_it.c ****   * @author  MCD Application Team
   5:Src/stm32f7xx_it.c ****   * @version V1.0.1
   6:Src/stm32f7xx_it.c ****   * @date    23-September-2016
   7:Src/stm32f7xx_it.c ****   * @brief   Main Interrupt Service Routines.
   8:Src/stm32f7xx_it.c ****   *          This file provides template for all exceptions handler and 
   9:Src/stm32f7xx_it.c ****   *          peripherals interrupt service routine.   
  10:Src/stm32f7xx_it.c ****   ******************************************************************************
  11:Src/stm32f7xx_it.c ****   * @attention
  12:Src/stm32f7xx_it.c ****   *
  13:Src/stm32f7xx_it.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  14:Src/stm32f7xx_it.c ****   *
  15:Src/stm32f7xx_it.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  16:Src/stm32f7xx_it.c ****   * You may not use this file except in compliance with the License.
  17:Src/stm32f7xx_it.c ****   * You may obtain a copy of the License at:
  18:Src/stm32f7xx_it.c ****   *
  19:Src/stm32f7xx_it.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  20:Src/stm32f7xx_it.c ****   *
  21:Src/stm32f7xx_it.c ****   * Unless required by applicable law or agreed to in writing, software 
  22:Src/stm32f7xx_it.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  23:Src/stm32f7xx_it.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  24:Src/stm32f7xx_it.c ****   * See the License for the specific language governing permissions and
  25:Src/stm32f7xx_it.c ****   * limitations under the License.
  26:Src/stm32f7xx_it.c ****   *
  27:Src/stm32f7xx_it.c ****   ******************************************************************************
  28:Src/stm32f7xx_it.c ****   */
  29:Src/stm32f7xx_it.c **** 
  30:Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccHadyGH.s 			page 2


  31:Src/stm32f7xx_it.c **** #include "stm32f7xx_hal.h"
  32:Src/stm32f7xx_it.c **** #include "stm32f7xx.h"
  33:Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  34:Src/stm32f7xx_it.c **** #include "FreeRTOS.h"
  35:Src/stm32f7xx_it.c **** #include "task.h"
  36:Src/stm32f7xx_it.c **** 
  37:Src/stm32f7xx_it.c **** extern void xPortSysTickHandler(void);
  38:Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim13;
  39:Src/stm32f7xx_it.c **** 
  40:Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  41:Src/stm32f7xx_it.c **** //extern TIM_HandleTypeDef htim1;
  42:Src/stm32f7xx_it.c **** 
  43:Src/stm32f7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  44:Src/stm32f7xx_it.c **** /* Private define ------------------------------------------------------------*/
  45:Src/stm32f7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  46:Src/stm32f7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  47:Src/stm32f7xx_it.c **** /* Private functions ---------------------------------------------------------*/
  48:Src/stm32f7xx_it.c **** 
  49:Src/stm32f7xx_it.c **** /******************************************************************************/
  50:Src/stm32f7xx_it.c **** /*            Cortex-M7 Processor Interruption and Exception Handlers         */ 
  51:Src/stm32f7xx_it.c **** /******************************************************************************/
  52:Src/stm32f7xx_it.c **** /**
  53:Src/stm32f7xx_it.c ****   * @brief  This function handles NMI exception.
  54:Src/stm32f7xx_it.c ****   * @param  None
  55:Src/stm32f7xx_it.c ****   * @retval None
  56:Src/stm32f7xx_it.c ****   */
  57:Src/stm32f7xx_it.c **** void NMI_Handler(void)
  58:Src/stm32f7xx_it.c **** {
  29              		.loc 1 58 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
  59:Src/stm32f7xx_it.c **** }
  41              		.loc 1 59 0
  42 0004 BD46     		mov	sp, r7
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 13
  45              		@ sp needed
  46 0006 5DF8047B 		ldr	r7, [sp], #4
  47              	.LCFI3:
  48              		.cfi_restore 7
  49              		.cfi_def_cfa_offset 0
  50 000a 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE140:
  54              		.section	.text.HardFault_Handler,"ax",%progbits
  55              		.align	2
  56              		.global	HardFault_Handler
  57              		.thumb
ARM GAS  /tmp/ccHadyGH.s 			page 3


  58              		.thumb_func
  60              	HardFault_Handler:
  61              	.LFB141:
  60:Src/stm32f7xx_it.c **** 
  61:Src/stm32f7xx_it.c **** /**
  62:Src/stm32f7xx_it.c ****   * @brief  This function handles Hard Fault exception.
  63:Src/stm32f7xx_it.c ****   * @param  None
  64:Src/stm32f7xx_it.c ****   * @retval None
  65:Src/stm32f7xx_it.c ****   */
  66:Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  67:Src/stm32f7xx_it.c **** {
  62              		.loc 1 67 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              	.LCFI4:
  69              		.cfi_def_cfa_offset 4
  70              		.cfi_offset 7, -4
  71 0002 00AF     		add	r7, sp, #0
  72              	.LCFI5:
  73              		.cfi_def_cfa_register 7
  68:Src/stm32f7xx_it.c ****   /* Go to infinite loop when Hard Fault exception occurs */
  69:Src/stm32f7xx_it.c **** 	/* The fault handler implementation calls a function called
  70:Src/stm32f7xx_it.c **** 	prvGetRegistersFromStack(). */
  71:Src/stm32f7xx_it.c **** 
  72:Src/stm32f7xx_it.c **** 	    __asm volatile
  74              		.loc 1 72 0
  75              	@ 72 "Src/stm32f7xx_it.c" 1
  76 0004 1EF0040F 		 tst lr, #4                                                
  77 0008 0CBF     	 ite eq                                                    
  78 000a EFF30880 	 mrseq r0, msp                                             
  79 000e EFF30980 	 mrsne r0, psp                                             
  80 0012 8169     	 ldr r1, [r0, #24]                                         
  81 0014 004A     	 ldr r2, handler2_address_const                            
  82 0016 1047     	 bx r2                                                     
  83 0018 00000000 	 handler2_address_const: .word prvGetRegistersFromStack    
  84              	
  85              	@ 0 "" 2
  73:Src/stm32f7xx_it.c **** 	    (
  74:Src/stm32f7xx_it.c **** 	        " tst lr, #4                                                \n"
  75:Src/stm32f7xx_it.c **** 	        " ite eq                                                    \n"
  76:Src/stm32f7xx_it.c **** 	        " mrseq r0, msp                                             \n"
  77:Src/stm32f7xx_it.c **** 	        " mrsne r0, psp                                             \n"
  78:Src/stm32f7xx_it.c **** 	        " ldr r1, [r0, #24]                                         \n"
  79:Src/stm32f7xx_it.c **** 	        " ldr r2, handler2_address_const                            \n"
  80:Src/stm32f7xx_it.c **** 	        " bx r2                                                     \n"
  81:Src/stm32f7xx_it.c **** 	        " handler2_address_const: .word prvGetRegistersFromStack    \n"
  82:Src/stm32f7xx_it.c **** 	    );
  83:Src/stm32f7xx_it.c **** 
  84:Src/stm32f7xx_it.c **** 
  85:Src/stm32f7xx_it.c **** }
  86              		.loc 1 85 0
  87              		.thumb
  88 001c BD46     		mov	sp, r7
  89              	.LCFI6:
ARM GAS  /tmp/ccHadyGH.s 			page 4


  90              		.cfi_def_cfa_register 13
  91              		@ sp needed
  92 001e 5DF8047B 		ldr	r7, [sp], #4
  93              	.LCFI7:
  94              		.cfi_restore 7
  95              		.cfi_def_cfa_offset 0
  96 0022 7047     		bx	lr
  97              		.cfi_endproc
  98              	.LFE141:
 100              		.section	.text.prvGetRegistersFromStack,"ax",%progbits
 101              		.align	2
 102              		.global	prvGetRegistersFromStack
 103              		.thumb
 104              		.thumb_func
 106              	prvGetRegistersFromStack:
 107              	.LFB142:
  86:Src/stm32f7xx_it.c **** void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
  87:Src/stm32f7xx_it.c **** {
 108              		.loc 1 87 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 40
 111              		@ frame_needed = 1, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113 0000 80B4     		push	{r7}
 114              	.LCFI8:
 115              		.cfi_def_cfa_offset 4
 116              		.cfi_offset 7, -4
 117 0002 8BB0     		sub	sp, sp, #44
 118              	.LCFI9:
 119              		.cfi_def_cfa_offset 48
 120 0004 00AF     		add	r7, sp, #0
 121              	.LCFI10:
 122              		.cfi_def_cfa_register 7
 123 0006 7860     		str	r0, [r7, #4]
  88:Src/stm32f7xx_it.c **** /* These are volatile to try and prevent the compiler/linker optimising them
  89:Src/stm32f7xx_it.c **** away as the variables never actually get used.  If the debugger won't show the
  90:Src/stm32f7xx_it.c **** values of the variables, make them global my moving their declaration outside
  91:Src/stm32f7xx_it.c **** of this function. */
  92:Src/stm32f7xx_it.c **** volatile uint32_t r0;
  93:Src/stm32f7xx_it.c **** volatile uint32_t r1;
  94:Src/stm32f7xx_it.c **** volatile uint32_t r2;
  95:Src/stm32f7xx_it.c **** volatile uint32_t r3;
  96:Src/stm32f7xx_it.c **** volatile uint32_t r12;
  97:Src/stm32f7xx_it.c **** volatile uint32_t lr; /* Link register. */
  98:Src/stm32f7xx_it.c **** volatile uint32_t pc; /* Program counter. */
  99:Src/stm32f7xx_it.c **** volatile uint32_t psr;/* Program status register. */
 100:Src/stm32f7xx_it.c **** 
 101:Src/stm32f7xx_it.c ****     r0 = pulFaultStackAddress[ 0 ];
 124              		.loc 1 101 0
 125 0008 7B68     		ldr	r3, [r7, #4]
 126 000a 1B68     		ldr	r3, [r3]
 127 000c 7B62     		str	r3, [r7, #36]
 102:Src/stm32f7xx_it.c ****     r1 = pulFaultStackAddress[ 1 ];
 128              		.loc 1 102 0
 129 000e 7B68     		ldr	r3, [r7, #4]
 130 0010 5B68     		ldr	r3, [r3, #4]
 131 0012 3B62     		str	r3, [r7, #32]
ARM GAS  /tmp/ccHadyGH.s 			page 5


 103:Src/stm32f7xx_it.c ****     r2 = pulFaultStackAddress[ 2 ];
 132              		.loc 1 103 0
 133 0014 7B68     		ldr	r3, [r7, #4]
 134 0016 9B68     		ldr	r3, [r3, #8]
 135 0018 FB61     		str	r3, [r7, #28]
 104:Src/stm32f7xx_it.c ****     r3 = pulFaultStackAddress[ 3 ];
 136              		.loc 1 104 0
 137 001a 7B68     		ldr	r3, [r7, #4]
 138 001c DB68     		ldr	r3, [r3, #12]
 139 001e BB61     		str	r3, [r7, #24]
 105:Src/stm32f7xx_it.c **** 
 106:Src/stm32f7xx_it.c ****     r12 = pulFaultStackAddress[ 4 ];
 140              		.loc 1 106 0
 141 0020 7B68     		ldr	r3, [r7, #4]
 142 0022 1B69     		ldr	r3, [r3, #16]
 143 0024 7B61     		str	r3, [r7, #20]
 107:Src/stm32f7xx_it.c ****     lr = pulFaultStackAddress[ 5 ];
 144              		.loc 1 107 0
 145 0026 7B68     		ldr	r3, [r7, #4]
 146 0028 5B69     		ldr	r3, [r3, #20]
 147 002a 3B61     		str	r3, [r7, #16]
 108:Src/stm32f7xx_it.c ****     pc = pulFaultStackAddress[ 6 ];
 148              		.loc 1 108 0
 149 002c 7B68     		ldr	r3, [r7, #4]
 150 002e 9B69     		ldr	r3, [r3, #24]
 151 0030 FB60     		str	r3, [r7, #12]
 109:Src/stm32f7xx_it.c ****     psr = pulFaultStackAddress[ 7 ];
 152              		.loc 1 109 0
 153 0032 7B68     		ldr	r3, [r7, #4]
 154 0034 DB69     		ldr	r3, [r3, #28]
 155 0036 BB60     		str	r3, [r7, #8]
 156              	.L4:
 110:Src/stm32f7xx_it.c **** 
 111:Src/stm32f7xx_it.c ****     /* When the following line is hit, the variables contain the register values. */
 112:Src/stm32f7xx_it.c ****     for( ;; );
 157              		.loc 1 112 0 discriminator 1
 158 0038 FEE7     		b	.L4
 159              		.cfi_endproc
 160              	.LFE142:
 162 003a 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
 163              		.align	2
 164              		.global	MemManage_Handler
 165              		.thumb
 166              		.thumb_func
 168              	MemManage_Handler:
 169              	.LFB143:
 113:Src/stm32f7xx_it.c **** }
 114:Src/stm32f7xx_it.c **** 
 115:Src/stm32f7xx_it.c **** 
 116:Src/stm32f7xx_it.c **** /**
 117:Src/stm32f7xx_it.c ****   * @brief  This function handles Memory Manage exception.
 118:Src/stm32f7xx_it.c ****   * @param  None
 119:Src/stm32f7xx_it.c ****   * @retval None
 120:Src/stm32f7xx_it.c ****   */
 121:Src/stm32f7xx_it.c **** void MemManage_Handler(void)
 122:Src/stm32f7xx_it.c **** {
 170              		.loc 1 122 0
ARM GAS  /tmp/ccHadyGH.s 			page 6


 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175 0000 80B4     		push	{r7}
 176              	.LCFI11:
 177              		.cfi_def_cfa_offset 4
 178              		.cfi_offset 7, -4
 179 0002 00AF     		add	r7, sp, #0
 180              	.LCFI12:
 181              		.cfi_def_cfa_register 7
 182              	.L6:
 123:Src/stm32f7xx_it.c ****   /* Go to infinite loop when Memory Manage exception occurs */
 124:Src/stm32f7xx_it.c ****   while (1)
 125:Src/stm32f7xx_it.c ****   {
 126:Src/stm32f7xx_it.c ****   }
 183              		.loc 1 126 0 discriminator 1
 184 0004 FEE7     		b	.L6
 185              		.cfi_endproc
 186              	.LFE143:
 188 0006 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
 189              		.align	2
 190              		.global	BusFault_Handler
 191              		.thumb
 192              		.thumb_func
 194              	BusFault_Handler:
 195              	.LFB144:
 127:Src/stm32f7xx_it.c **** }
 128:Src/stm32f7xx_it.c **** 
 129:Src/stm32f7xx_it.c **** /**
 130:Src/stm32f7xx_it.c ****   * @brief  This function handles Bus Fault exception.
 131:Src/stm32f7xx_it.c ****   * @param  None
 132:Src/stm32f7xx_it.c ****   * @retval None
 133:Src/stm32f7xx_it.c ****   */
 134:Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 135:Src/stm32f7xx_it.c **** {
 196              		.loc 1 135 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 1, uses_anonymous_args = 0
 200              		@ link register save eliminated.
 201 0000 80B4     		push	{r7}
 202              	.LCFI13:
 203              		.cfi_def_cfa_offset 4
 204              		.cfi_offset 7, -4
 205 0002 00AF     		add	r7, sp, #0
 206              	.LCFI14:
 207              		.cfi_def_cfa_register 7
 208              	.L8:
 136:Src/stm32f7xx_it.c ****   /* Go to infinite loop when Bus Fault exception occurs */
 137:Src/stm32f7xx_it.c ****   while (1)
 138:Src/stm32f7xx_it.c ****   {
 139:Src/stm32f7xx_it.c ****   }
 209              		.loc 1 139 0 discriminator 1
 210 0004 FEE7     		b	.L8
 211              		.cfi_endproc
 212              	.LFE144:
ARM GAS  /tmp/ccHadyGH.s 			page 7


 214 0006 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
 215              		.align	2
 216              		.global	UsageFault_Handler
 217              		.thumb
 218              		.thumb_func
 220              	UsageFault_Handler:
 221              	.LFB145:
 140:Src/stm32f7xx_it.c **** }
 141:Src/stm32f7xx_it.c **** 
 142:Src/stm32f7xx_it.c **** /**
 143:Src/stm32f7xx_it.c ****   * @brief  This function handles Usage Fault exception.
 144:Src/stm32f7xx_it.c ****   * @param  None
 145:Src/stm32f7xx_it.c ****   * @retval None
 146:Src/stm32f7xx_it.c ****   */
 147:Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 148:Src/stm32f7xx_it.c **** {
 222              		.loc 1 148 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 227 0000 80B4     		push	{r7}
 228              	.LCFI15:
 229              		.cfi_def_cfa_offset 4
 230              		.cfi_offset 7, -4
 231 0002 00AF     		add	r7, sp, #0
 232              	.LCFI16:
 233              		.cfi_def_cfa_register 7
 234              	.L10:
 149:Src/stm32f7xx_it.c ****   /* Go to infinite loop when Usage Fault exception occurs */
 150:Src/stm32f7xx_it.c ****   while (1)
 151:Src/stm32f7xx_it.c ****   {
 152:Src/stm32f7xx_it.c ****   }
 235              		.loc 1 152 0 discriminator 1
 236 0004 FEE7     		b	.L10
 237              		.cfi_endproc
 238              	.LFE145:
 240 0006 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 241              		.align	2
 242              		.global	DebugMon_Handler
 243              		.thumb
 244              		.thumb_func
 246              	DebugMon_Handler:
 247              	.LFB146:
 153:Src/stm32f7xx_it.c **** }
 154:Src/stm32f7xx_it.c **** 
 155:Src/stm32f7xx_it.c **** /**
 156:Src/stm32f7xx_it.c ****   * @brief  This function handles Debug Monitor exception.
 157:Src/stm32f7xx_it.c ****   * @param  None
 158:Src/stm32f7xx_it.c ****   * @retval None
 159:Src/stm32f7xx_it.c ****   */
 160:Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 161:Src/stm32f7xx_it.c **** {
 248              		.loc 1 161 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccHadyGH.s 			page 8


 252              		@ link register save eliminated.
 253 0000 80B4     		push	{r7}
 254              	.LCFI17:
 255              		.cfi_def_cfa_offset 4
 256              		.cfi_offset 7, -4
 257 0002 00AF     		add	r7, sp, #0
 258              	.LCFI18:
 259              		.cfi_def_cfa_register 7
 162:Src/stm32f7xx_it.c **** }
 260              		.loc 1 162 0
 261 0004 BD46     		mov	sp, r7
 262              	.LCFI19:
 263              		.cfi_def_cfa_register 13
 264              		@ sp needed
 265 0006 5DF8047B 		ldr	r7, [sp], #4
 266              	.LCFI20:
 267              		.cfi_restore 7
 268              		.cfi_def_cfa_offset 0
 269 000a 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE146:
 273              		.section	.text.SysTick_Handler,"ax",%progbits
 274              		.align	2
 275              		.global	SysTick_Handler
 276              		.thumb
 277              		.thumb_func
 279              	SysTick_Handler:
 280              	.LFB147:
 163:Src/stm32f7xx_it.c **** 
 164:Src/stm32f7xx_it.c **** 
 165:Src/stm32f7xx_it.c **** /**
 166:Src/stm32f7xx_it.c ****   * @brief  This function handles SysTick Handler.
 167:Src/stm32f7xx_it.c ****   * @param  None
 168:Src/stm32f7xx_it.c ****   * @retval None
 169:Src/stm32f7xx_it.c ****   */
 170:Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 171:Src/stm32f7xx_it.c **** {
 281              		.loc 1 171 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285 0000 80B5     		push	{r7, lr}
 286              	.LCFI21:
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 7, -8
 289              		.cfi_offset 14, -4
 290 0002 00AF     		add	r7, sp, #0
 291              	.LCFI22:
 292              		.cfi_def_cfa_register 7
 172:Src/stm32f7xx_it.c **** 	//HAL_IncTick();
 173:Src/stm32f7xx_it.c **** 	 if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 293              		.loc 1 173 0
 294 0004 FFF7FEFF 		bl	xTaskGetSchedulerState
 295 0008 0346     		mov	r3, r0
 296 000a 012B     		cmp	r3, #1
 297 000c 01D0     		beq	.L12
 174:Src/stm32f7xx_it.c **** 	  {
ARM GAS  /tmp/ccHadyGH.s 			page 9


 175:Src/stm32f7xx_it.c **** 	    xPortSysTickHandler();
 298              		.loc 1 175 0
 299 000e FFF7FEFF 		bl	xPortSysTickHandler
 300              	.L12:
 176:Src/stm32f7xx_it.c **** 	  }
 177:Src/stm32f7xx_it.c **** 
 178:Src/stm32f7xx_it.c **** }
 301              		.loc 1 178 0
 302 0012 80BD     		pop	{r7, pc}
 303              		.cfi_endproc
 304              	.LFE147:
 306              		.section	.text.TIM8_UP_TIM13_IRQHandler,"ax",%progbits
 307              		.align	2
 308              		.global	TIM8_UP_TIM13_IRQHandler
 309              		.thumb
 310              		.thumb_func
 312              	TIM8_UP_TIM13_IRQHandler:
 313              	.LFB148:
 179:Src/stm32f7xx_it.c **** 
 180:Src/stm32f7xx_it.c **** /******************************************************************************/
 181:Src/stm32f7xx_it.c **** /*                 STM32F7xx Peripherals Interrupt Handlers                   */
 182:Src/stm32f7xx_it.c **** /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
 183:Src/stm32f7xx_it.c **** /*  available peripheral interrupt handler's name please refer to the startup */
 184:Src/stm32f7xx_it.c **** /*  file (startup_stm32f7xx.s).                                               */
 185:Src/stm32f7xx_it.c **** /******************************************************************************/
 186:Src/stm32f7xx_it.c **** 
 187:Src/stm32f7xx_it.c **** /**
 188:Src/stm32f7xx_it.c **** * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
 189:Src/stm32f7xx_it.c **** */
 190:Src/stm32f7xx_it.c **** void TIM8_UP_TIM13_IRQHandler(void)
 191:Src/stm32f7xx_it.c **** {
 314              		.loc 1 191 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318 0000 80B5     		push	{r7, lr}
 319              	.LCFI23:
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 7, -8
 322              		.cfi_offset 14, -4
 323 0002 00AF     		add	r7, sp, #0
 324              	.LCFI24:
 325              		.cfi_def_cfa_register 7
 192:Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim13);
 326              		.loc 1 192 0
 327 0004 0148     		ldr	r0, .L15
 328 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 193:Src/stm32f7xx_it.c **** }
 329              		.loc 1 193 0
 330 000a 80BD     		pop	{r7, pc}
 331              	.L16:
 332              		.align	2
 333              	.L15:
 334 000c 00000000 		.word	htim13
 335              		.cfi_endproc
 336              	.LFE148:
 338              		.text
ARM GAS  /tmp/ccHadyGH.s 			page 10


 339              	.Letext0:
 340              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 341              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 342              		.file 4 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f769xx.h"
 343              		.file 5 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 344              		.file 6 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 345              		.file 7 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 346              		.file 8 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
 347              		.file 9 "../../Drivers/CMSIS/Include/core_cm7.h"
ARM GAS  /tmp/ccHadyGH.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
     /tmp/ccHadyGH.s:21     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccHadyGH.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccHadyGH.s:55     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccHadyGH.s:60     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccHadyGH.s:83     .text.HardFault_Handler:0000000000000018 handler2_address_const
     /tmp/ccHadyGH.s:83     .text.HardFault_Handler:0000000000000018 $d
     /tmp/ccHadyGH.s:106    .text.prvGetRegistersFromStack:0000000000000000 prvGetRegistersFromStack
     /tmp/ccHadyGH.s:88     .text.HardFault_Handler:000000000000001c $t
     /tmp/ccHadyGH.s:101    .text.prvGetRegistersFromStack:0000000000000000 $t
     /tmp/ccHadyGH.s:163    .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccHadyGH.s:168    .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccHadyGH.s:189    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccHadyGH.s:194    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccHadyGH.s:215    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccHadyGH.s:220    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccHadyGH.s:241    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccHadyGH.s:246    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccHadyGH.s:274    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccHadyGH.s:279    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccHadyGH.s:307    .text.TIM8_UP_TIM13_IRQHandler:0000000000000000 $t
     /tmp/ccHadyGH.s:312    .text.TIM8_UP_TIM13_IRQHandler:0000000000000000 TIM8_UP_TIM13_IRQHandler
     /tmp/ccHadyGH.s:334    .text.TIM8_UP_TIM13_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xTaskGetSchedulerState
xPortSysTickHandler
HAL_TIM_IRQHandler
htim13

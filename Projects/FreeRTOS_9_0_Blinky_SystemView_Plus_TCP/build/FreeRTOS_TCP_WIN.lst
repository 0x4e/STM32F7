ARM GAS  /tmp/ccuG1sHT.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"FreeRTOS_TCP_WIN.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.FreeRTOS_min_int32,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	FreeRTOS_min_int32:
  26              	.LFB7:
  27              		.file 1 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
ARM GAS  /tmp/ccuG1sHT.s 			page 2


  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #ifndef FREERTOS_IP_H
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FREERTOS_IP_H
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #ifdef __cplusplus
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** extern "C" {
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Application level configuration options. */
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "FreeRTOSIPConfig.h"
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "FreeRTOSIPConfigDefaults.h"
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "IPTraceMacroDefaults.h"
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Some constants defining the sizes of several parts of a packet */
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_HEADER			14u
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_IPv4_HEADER			20u
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_IGMP_HEADER			8u
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ICMP_HEADER			8u
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_UDP_HEADER			8u
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_TCP_HEADER			20u
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* The number of octets in the MAC and IP addresses respectively. */
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipMAC_ADDRESS_LENGTH_BYTES ( 6 )
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipIP_ADDRESS_LENGTH_BYTES ( 4 )
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* IP protocol definitions. */
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_ICMP			( 1 )
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_IGMP         ( 2 )
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_TCP			( 6 )
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_UDP			( 17 )
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
ARM GAS  /tmp/ccuG1sHT.s 			page 3


  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Dimensions the buffers that are filled by received Ethernet frames. */
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_CRC_BYTES					( 4UL )
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_OPTIONAL_802_1Q_TAG_BYTES	( 4UL )
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipTOTAL_ETHERNET_FRAME_SIZE				( ( ( uint32_t ) ipconfigNETWORK_MTU ) + ( ( uint32_t ) ipSI
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /*_RB_ Comment may need updating. */
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Space left at the beginning of a network buffer storage area to store a
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** pointer back to the network buffer.  Should be a multiple of 8 to ensure 8 byte
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** alignment is maintained on architectures that require it.
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** In order to get a 32-bit alignment of network packets, an offset of 2 bytes
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** would be desirable, as defined by ipconfigPACKET_FILLER_SIZE.  So the malloc'd
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** buffer will have the following contents:
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint32_t pointer;	// word-aligned
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 filler[6];
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	<< ETH-header >>	// half-word-aligned
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 dest[6];    // start of pucEthernetBuffer
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 dest[6];
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar16_t type;
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	<< IP-header >>		// word-aligned
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t ucVersionHeaderLength;
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	etc
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  */
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigBUFFER_PADDING != 0 )
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ipconfigBUFFER_PADDING
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #else
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ( 8u + ipconfigPACKET_FILLER_SIZE )
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* The structure used to store buffers and pass them around the network stack.
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** Buffers can be in use by the stack, in use by the network interface hardware
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** driver, or free (not in use). */
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef struct xNETWORK_BUFFER
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	ListItem_t xBufferListItem; 	/* Used to reference the buffer form the free buffer list or a socket
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint32_t ulIPAddress;			/* Source or destination IP address, depending on usage scenario. */
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t *pucEthernetBuffer; 	/* Pointer to the start of the Ethernet frame. */
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	size_t xDataLength; 			/* Starts by holding the total Ethernet frame length, then the UDP/TCP payl
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint16_t usPort;				/* Source or destination port, depending on usage scenario. */
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint16_t usBoundPort;			/* The port to which a transmitting socket is bound. */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		struct xNETWORK_BUFFER *pxNextBuffer; /* Possible optimisation for expert users - requires networ
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } NetworkBufferDescriptor_t;
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "pack_struct_start.h"
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** struct xMAC_ADDRESS
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t ucBytes[ ipMAC_ADDRESS_LENGTH_BYTES ];
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** }
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "pack_struct_end.h"
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef struct xMAC_ADDRESS MACAddress_t;
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef enum eNETWORK_EVENTS
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eNetworkUp,		/* The network is configured. */
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eNetworkDown	/* The network connection has been lost. */
ARM GAS  /tmp/ccuG1sHT.s 			page 4


 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } eIPCallbackEvent_t;
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef enum ePING_REPLY_STATUS
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eSuccess = 0,		/* A correct reply has been received for an outgoing ping. */
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eInvalidChecksum,	/* A reply was received for an outgoing ping but the checksum of the reply was i
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eInvalidData		/* A reply was received to an outgoing ping but the payload of the reply was not cor
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } ePingReplyStatus_t;
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Endian related definitions. */
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	/* FreeRTOS_htons / FreeRTOS_htonl: some platforms might have built-in versions
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	using a single instruction so allow these versions to be overridden. */
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#ifndef FreeRTOS_htons
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		#define FreeRTOS_htons( usIn ) ( (uint16_t) ( ( ( usIn ) << 8U ) | ( ( usIn ) >> 8U ) ) )
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#ifndef	FreeRTOS_htonl
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		#define FreeRTOS_htonl( ulIn ) 											\
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 			(																	\
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				( uint32_t ) 													\
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				( 																\
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) << 24  ) | 	\
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x0000ff00UL ) <<  8  ) | 	\
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x00ff0000UL ) >>  8  ) | 	\
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) >> 24  )  	\
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				) 																\
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 			)
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #else /* ipconfigBYTE_ORDER */
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#define FreeRTOS_htons( x ) ( ( uint16_t ) ( x ) )
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#define FreeRTOS_htonl( x ) ( ( uint32_t ) ( x ) )
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FreeRTOS_ntohs( x ) FreeRTOS_htons( x )
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FreeRTOS_ntohl( x ) FreeRTOS_htonl( x )
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigHAS_INLINE_FUNCTIONS == 1 )
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b);
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b);
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b);
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b);
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d);
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_down (uint32_t a, uint32_t d);
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_max_BaseType  (BaseType_t  a, BaseType_t  b);
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE UBaseType_t FreeRTOS_max_UBaseTyp (UBaseType_t a, UBaseType_t b);
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  	FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
ARM GAS  /tmp/ccuG1sHT.s 			page 5


 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
  28              		.loc 1 204 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7]
  45              		.loc 1 204 0
  46 000a 7A68     		ldr	r2, [r7, #4]
  47 000c 3B68     		ldr	r3, [r7]
  48 000e 9342     		cmp	r3, r2
  49 0010 A8BF     		it	ge
  50 0012 1346     		movge	r3, r2
  51 0014 1846     		mov	r0, r3
  52 0016 0C37     		adds	r7, r7, #12
  53              	.LCFI3:
  54              		.cfi_def_cfa_offset 4
  55 0018 BD46     		mov	sp, r7
  56              	.LCFI4:
  57              		.cfi_def_cfa_register 13
  58              		@ sp needed
  59 001a 5DF8047B 		ldr	r7, [sp], #4
  60              	.LCFI5:
  61              		.cfi_restore 7
  62              		.cfi_def_cfa_offset 0
  63 001e 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE7:
  67              		.section	.text.FreeRTOS_min_uint32,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  72              	FreeRTOS_min_uint32:
  73              	.LFB8:
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
  74              		.loc 1 205 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 0000 80B4     		push	{r7}
  80              	.LCFI6:
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 7, -4
  83 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccuG1sHT.s 			page 6


  84              	.LCFI7:
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
  87              	.LCFI8:
  88              		.cfi_def_cfa_register 7
  89 0006 7860     		str	r0, [r7, #4]
  90 0008 3960     		str	r1, [r7]
  91              		.loc 1 205 0
  92 000a 7A68     		ldr	r2, [r7, #4]
  93 000c 3B68     		ldr	r3, [r7]
  94 000e 9342     		cmp	r3, r2
  95 0010 28BF     		it	cs
  96 0012 1346     		movcs	r3, r2
  97 0014 1846     		mov	r0, r3
  98 0016 0C37     		adds	r7, r7, #12
  99              	.LCFI9:
 100              		.cfi_def_cfa_offset 4
 101 0018 BD46     		mov	sp, r7
 102              	.LCFI10:
 103              		.cfi_def_cfa_register 13
 104              		@ sp needed
 105 001a 5DF8047B 		ldr	r7, [sp], #4
 106              	.LCFI11:
 107              		.cfi_restore 7
 108              		.cfi_def_cfa_offset 0
 109 001e 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE8:
 113              		.section	.bss.xTCPSegments,"aw",%nobits
 114              		.align	2
 117              	xTCPSegments:
 118 0000 00000000 		.space	4
 119              		.section	.bss.xSegmentList,"aw",%nobits
 120              		.align	2
 123              	xSegmentList:
 124 0000 00000000 		.space	20
 124      00000000 
 124      00000000 
 124      00000000 
 124      00000000 
 125              		.global	xTCPWindowLoggingLevel
 126              		.section	.bss.xTCPWindowLoggingLevel,"aw",%nobits
 127              		.align	2
 130              	xTCPWindowLoggingLevel:
 131 0000 00000000 		.space	4
 132              		.section	.text.xSequenceLessThanOrEqual,"ax",%progbits
 133              		.align	2
 134              		.thumb
 135              		.thumb_func
 137              	xSequenceLessThanOrEqual:
 138              	.LFB29:
 139              		.file 2 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *******************************************************************************
ARM GAS  /tmp/ccuG1sHT.s 			page 7


   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * FreeRTOS_TCP_WIN.c
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Module which handles the TCP windowing schemes for FreeRTOS+TCP.  Many
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * functions have two versions - one for FreeRTOS+TCP (full) and one for
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * FreeRTOS+TCP (lite).
ARM GAS  /tmp/ccuG1sHT.s 			page 8


  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * In this module all ports and IP addresses and sequence numbers are
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * being stored in host byte-order.
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* Standard includes. */
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include <stdint.h>
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* FreeRTOS includes. */
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "FreeRTOS.h"
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "task.h"
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "queue.h"
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "semphr.h"
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* FreeRTOS+TCP includes. */
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "FreeRTOS_UDP_IP.h"
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "FreeRTOS_IP.h"
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "FreeRTOS_Sockets.h"
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "FreeRTOS_IP_Private.h"
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "NetworkBufferManagement.h"
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #include "FreeRTOS_TCP_WIN.h"
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* Constants used for Smoothed Round Trip Time (SRTT). */
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #define	winSRTT_INCREMENT_NEW 		2
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #define winSRTT_INCREMENT_CURRENT 	6
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #define	winSRTT_DECREMENT_NEW 		1
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #define winSRTT_DECREMENT_CURRENT 	7
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #define winSRTT_CAP_mS				50
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#define xTCPWindowRxNew( pxWindow, ulSequenceNumber, lCount ) xTCPWindowNew( pxWindow, ulSequenceN
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#define xTCPWindowTxNew( pxWindow, ulSequenceNumber, lCount ) xTCPWindowNew( pxWindow, ulSequenceN
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* The code to send a single Selective ACK (SACK):
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * NOP (0x01), NOP (0x01), SACK (0x05), LEN (0x0a),
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * followed by a lower and a higher sequence number,
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * where LEN is 2 + 2*4 = 10 bytes. */
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#if( ipconfigBYTE_ORDER == pdFREERTOS_BIG_ENDIAN )
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		#define OPTION_CODE_SINGLE_SACK		( 0x0101050aUL )
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#else
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		#define OPTION_CODE_SINGLE_SACK		( 0x0a050101UL )
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#endif
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* Normal retransmission:
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * A packet will be retransmitted after a Retransmit Time-Out (RTO).
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * Fast retransmission:
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * When 3 packets with a higher sequence number have been acknowledged
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * by the peer, it is very unlikely a current packet will ever arrive.
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * It will be retransmitted far before the RTO.
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 */
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#define	DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT		( 3u )
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* If there have been several retransmissions (4), decrease the
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 * size of the transmission window to at most 2 times MSS.
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	 */
ARM GAS  /tmp/ccuG1sHT.s 			page 9


 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#define MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW		( 4u )
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* configUSE_TCP_WIN */
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** extern void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListIt
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * All TCP sockets share a pool of segment descriptors (TCPSegment_t)
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Available descriptors are stored in the 'xSegmentList'
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * When a socket owns a descriptor, it will either be stored in
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * 'xTxSegments' or 'xRxSegments'
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * As soon as a package has been confirmed, the descriptor will be returned
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * to the segment pool
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static BaseType_t prvCreateSectors( void );
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Find a segment with a given sequence number in the list of received
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * segments: 'pxWindow->xRxSegments'.
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber );
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Allocate a new segment
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * The socket will borrow all segments from a common pool: 'xSegmentList',
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * which is a list of 'TCPSegment_t'
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCou
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* When the peer has a close request (FIN flag), the driver will check if
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * there are missing packets in the Rx-queue
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * It will accept the closure of the connection if both conditions are true:
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * - the Rx-queue is empty
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * - we've ACK'd the highest Rx sequence number seen
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xTCPWindowRxEmpty( TCPWindow_t *pxWindow );
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Detaches and returns the head of a queue
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowGetHead( List_t *pxList );
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Returns the head of a queue but it won't be detached
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
ARM GAS  /tmp/ccuG1sHT.s 			page 10


 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowPeekHead( List_t *pxList );
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *  Free entry pxSegment because it's not used anymore
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *	The ownership will be passed back to the segment pool
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static void vTCPWindowFree( TCPSegment_t *pxSegment );
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * A segment has been received with sequence number 'ulSequenceNumber', where
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * 'ulCurrentSequenceNumber == ulSequenceNumber', which means that exactly this
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * segment was expected.  xTCPWindowRxConfirm() will check if there is already
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * another segment with a sequence number between (ulSequenceNumber) and
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * (ulSequenceNumber+xLength).  Normally none will be found, because the next Rx
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * segment should have a sequence number equal to '(ulSequenceNumber+xLength)'.
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowRxConfirm( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * FreeRTOS+TCP stores data in circular buffers.  Calculate the next position to
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * store.
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount );
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * This function will look if there is new transmission data.  It will return
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * true if there is data to be sent.
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize );
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * An acknowledge was received.  See if some outstanding data may be removed
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * from the transmission queue(s).
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * A higher Tx block has been acknowledged.  Now iterate through the xWaitQueue
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * to find a possible condition for a FAST retransmission.
 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  */
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst );
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
ARM GAS  /tmp/ccuG1sHT.s 			page 11


 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* TCP segement pool. */
 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPSegments = NULL;
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* List of free TCP segments. */
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static List_t xSegmentList;
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* Logging verbosity level. */
 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** BaseType_t xTCPWindowLoggingLevel = 0;
 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* Some 32-bit arithmetic: comparing sequence numbers */
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b );
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b )
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 140              		.loc 2 251 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 8
 143              		@ frame_needed = 1, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145 0000 80B4     		push	{r7}
 146              	.LCFI12:
 147              		.cfi_def_cfa_offset 4
 148              		.cfi_offset 7, -4
 149 0002 83B0     		sub	sp, sp, #12
 150              	.LCFI13:
 151              		.cfi_def_cfa_offset 16
 152 0004 00AF     		add	r7, sp, #0
 153              	.LCFI14:
 154              		.cfi_def_cfa_register 7
 155 0006 7860     		str	r0, [r7, #4]
 156 0008 3960     		str	r1, [r7]
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Test if a <= b
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		Return true if the unsigned subtraction of (b-a) doesn't generate an
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		arithmetic overflow. */
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 157              		.loc 2 255 0
 158 000a 3A68     		ldr	r2, [r7]
 159 000c 7B68     		ldr	r3, [r7, #4]
 160 000e D31A     		subs	r3, r2, r3
 161 0010 DB43     		mvns	r3, r3
 162 0012 DB0F     		lsrs	r3, r3, #31
 163 0014 DBB2     		uxtb	r3, r3
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 164              		.loc 2 256 0
 165 0016 1846     		mov	r0, r3
 166 0018 0C37     		adds	r7, r7, #12
 167              	.LCFI15:
 168              		.cfi_def_cfa_offset 4
 169 001a BD46     		mov	sp, r7
 170              	.LCFI16:
 171              		.cfi_def_cfa_register 13
 172              		@ sp needed
 173 001c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccuG1sHT.s 			page 12


 174              	.LCFI17:
 175              		.cfi_restore 7
 176              		.cfi_def_cfa_offset 0
 177 0020 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE29:
 181 0022 00BF     		.section	.text.xSequenceLessThan,"ax",%progbits
 182              		.align	2
 183              		.thumb
 184              		.thumb_func
 186              	xSequenceLessThan:
 187              	.LFB30:
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN */
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b );
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b )
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 188              		.loc 2 263 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 8
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193 0000 80B4     		push	{r7}
 194              	.LCFI18:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              	.LCFI19:
 199              		.cfi_def_cfa_offset 16
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI20:
 202              		.cfi_def_cfa_register 7
 203 0006 7860     		str	r0, [r7, #4]
 204 0008 3960     		str	r1, [r7]
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Test if a < b */
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 205              		.loc 2 265 0
 206 000a 3A68     		ldr	r2, [r7]
 207 000c 7B68     		ldr	r3, [r7, #4]
 208 000e D31A     		subs	r3, r2, r3
 209 0010 013B     		subs	r3, r3, #1
 210 0012 DB43     		mvns	r3, r3
 211 0014 DB0F     		lsrs	r3, r3, #31
 212 0016 DBB2     		uxtb	r3, r3
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 213              		.loc 2 266 0
 214 0018 1846     		mov	r0, r3
 215 001a 0C37     		adds	r7, r7, #12
 216              	.LCFI21:
 217              		.cfi_def_cfa_offset 4
 218 001c BD46     		mov	sp, r7
 219              	.LCFI22:
 220              		.cfi_def_cfa_register 13
 221              		@ sp needed
 222 001e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccuG1sHT.s 			page 13


 223              	.LCFI23:
 224              		.cfi_restore 7
 225              		.cfi_def_cfa_offset 0
 226 0022 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE30:
 230              		.section	.text.xSequenceGreaterThan,"ax",%progbits
 231              		.align	2
 232              		.thumb
 233              		.thumb_func
 235              	xSequenceGreaterThan:
 236              	.LFB31:
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN */
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b );
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b )
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 237              		.loc 2 273 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 8
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242 0000 80B4     		push	{r7}
 243              	.LCFI24:
 244              		.cfi_def_cfa_offset 4
 245              		.cfi_offset 7, -4
 246 0002 83B0     		sub	sp, sp, #12
 247              	.LCFI25:
 248              		.cfi_def_cfa_offset 16
 249 0004 00AF     		add	r7, sp, #0
 250              	.LCFI26:
 251              		.cfi_def_cfa_register 7
 252 0006 7860     		str	r0, [r7, #4]
 253 0008 3960     		str	r1, [r7]
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Test if a > b */
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 254              		.loc 2 275 0
 255 000a 7A68     		ldr	r2, [r7, #4]
 256 000c 3B68     		ldr	r3, [r7]
 257 000e D31A     		subs	r3, r2, r3
 258 0010 013B     		subs	r3, r3, #1
 259 0012 DB43     		mvns	r3, r3
 260 0014 DB0F     		lsrs	r3, r3, #31
 261 0016 DBB2     		uxtb	r3, r3
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 262              		.loc 2 276 0
 263 0018 1846     		mov	r0, r3
 264 001a 0C37     		adds	r7, r7, #12
 265              	.LCFI27:
 266              		.cfi_def_cfa_offset 4
 267 001c BD46     		mov	sp, r7
 268              	.LCFI28:
 269              		.cfi_def_cfa_register 13
 270              		@ sp needed
 271 001e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccuG1sHT.s 			page 14


 272              	.LCFI29:
 273              		.cfi_restore 7
 274              		.cfi_def_cfa_offset 0
 275 0022 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE31:
 279              		.section	.text.xSequenceGreaterThanOrEqual,"ax",%progbits
 280              		.align	2
 281              		.thumb
 282              		.thumb_func
 284              	xSequenceGreaterThanOrEqual:
 285              	.LFB32:
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN */
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b );
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b )
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** {
 286              		.loc 2 282 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 8
 289              		@ frame_needed = 1, uses_anonymous_args = 0
 290              		@ link register save eliminated.
 291 0000 80B4     		push	{r7}
 292              	.LCFI30:
 293              		.cfi_def_cfa_offset 4
 294              		.cfi_offset 7, -4
 295 0002 83B0     		sub	sp, sp, #12
 296              	.LCFI31:
 297              		.cfi_def_cfa_offset 16
 298 0004 00AF     		add	r7, sp, #0
 299              	.LCFI32:
 300              		.cfi_def_cfa_register 7
 301 0006 7860     		str	r0, [r7, #4]
 302 0008 3960     		str	r1, [r7]
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* Test if a >= b */
 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 303              		.loc 2 284 0
 304 000a 7A68     		ldr	r2, [r7, #4]
 305 000c 3B68     		ldr	r3, [r7]
 306 000e D31A     		subs	r3, r2, r3
 307 0010 DB43     		mvns	r3, r3
 308 0012 DB0F     		lsrs	r3, r3, #31
 309 0014 DBB2     		uxtb	r3, r3
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** }
 310              		.loc 2 285 0
 311 0016 1846     		mov	r0, r3
 312 0018 0C37     		adds	r7, r7, #12
 313              	.LCFI33:
 314              		.cfi_def_cfa_offset 4
 315 001a BD46     		mov	sp, r7
 316              	.LCFI34:
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 001c 5DF8047B 		ldr	r7, [sp], #4
 320              	.LCFI35:
 321              		.cfi_restore 7
ARM GAS  /tmp/ccuG1sHT.s 			page 15


 322              		.cfi_def_cfa_offset 0
 323 0020 7047     		bx	lr
 324              		.cfi_endproc
 325              	.LFE32:
 327 0022 00BF     		.section	.text.vListInsertFifo,"ax",%progbits
 328              		.align	2
 329              		.thumb
 330              		.thumb_func
 332              	vListInsertFifo:
 333              	.LFB33:
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem );
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem )
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 334              		.loc 2 291 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 8
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338 0000 80B5     		push	{r7, lr}
 339              	.LCFI36:
 340              		.cfi_def_cfa_offset 8
 341              		.cfi_offset 7, -8
 342              		.cfi_offset 14, -4
 343 0002 82B0     		sub	sp, sp, #8
 344              	.LCFI37:
 345              		.cfi_def_cfa_offset 16
 346 0004 00AF     		add	r7, sp, #0
 347              	.LCFI38:
 348              		.cfi_def_cfa_register 7
 349 0006 7860     		str	r0, [r7, #4]
 350 0008 3960     		str	r1, [r7]
 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 351              		.loc 2 292 0
 352 000a 7B68     		ldr	r3, [r7, #4]
 353 000c 0833     		adds	r3, r3, #8
 354 000e 7868     		ldr	r0, [r7, #4]
 355 0010 3968     		ldr	r1, [r7]
 356 0012 1A46     		mov	r2, r3
 357 0014 FFF7FEFF 		bl	vListInsertGeneric
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 358              		.loc 2 293 0
 359 0018 0837     		adds	r7, r7, #8
 360              	.LCFI39:
 361              		.cfi_def_cfa_offset 8
 362 001a BD46     		mov	sp, r7
 363              	.LCFI40:
 364              		.cfi_def_cfa_register 13
 365              		@ sp needed
 366 001c 80BD     		pop	{r7, pc}
 367              		.cfi_endproc
 368              	.LFE33:
 370 001e 00BF     		.section	.text.vTCPTimerSet,"ax",%progbits
 371              		.align	2
 372              		.thumb
 373              		.thumb_func
ARM GAS  /tmp/ccuG1sHT.s 			page 16


 375              	vTCPTimerSet:
 376              	.LFB34:
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif
 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer );
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer )
 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** {
 377              		.loc 2 299 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 8
 380              		@ frame_needed = 1, uses_anonymous_args = 0
 381 0000 80B5     		push	{r7, lr}
 382              	.LCFI41:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 7, -8
 385              		.cfi_offset 14, -4
 386 0002 82B0     		sub	sp, sp, #8
 387              	.LCFI42:
 388              		.cfi_def_cfa_offset 16
 389 0004 00AF     		add	r7, sp, #0
 390              	.LCFI43:
 391              		.cfi_def_cfa_register 7
 392 0006 7860     		str	r0, [r7, #4]
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxTimer->ulBorn = xTaskGetTickCount ( );
 393              		.loc 2 300 0
 394 0008 FFF7FEFF 		bl	xTaskGetTickCount
 395 000c 0246     		mov	r2, r0
 396 000e 7B68     		ldr	r3, [r7, #4]
 397 0010 1A60     		str	r2, [r3]
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** }
 398              		.loc 2 301 0
 399 0012 0837     		adds	r7, r7, #8
 400              	.LCFI44:
 401              		.cfi_def_cfa_offset 8
 402 0014 BD46     		mov	sp, r7
 403              	.LCFI45:
 404              		.cfi_def_cfa_register 13
 405              		@ sp needed
 406 0016 80BD     		pop	{r7, pc}
 407              		.cfi_endproc
 408              	.LFE34:
 410              		.section	.text.ulTimerGetAge,"ax",%progbits
 411              		.align	2
 412              		.thumb
 413              		.thumb_func
 415              	ulTimerGetAge:
 416              	.LFB35:
 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer );
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer )
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** {
 417              		.loc 2 306 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 8
 420              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccuG1sHT.s 			page 17


 421 0000 80B5     		push	{r7, lr}
 422              	.LCFI46:
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 7, -8
 425              		.cfi_offset 14, -4
 426 0002 82B0     		sub	sp, sp, #8
 427              	.LCFI47:
 428              		.cfi_def_cfa_offset 16
 429 0004 00AF     		add	r7, sp, #0
 430              	.LCFI48:
 431              		.cfi_def_cfa_register 7
 432 0006 7860     		str	r0, [r7, #4]
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 433              		.loc 2 307 0
 434 0008 FFF7FEFF 		bl	xTaskGetTickCount
 435 000c 0246     		mov	r2, r0
 436 000e 7B68     		ldr	r3, [r7, #4]
 437 0010 1B68     		ldr	r3, [r3]
 438 0012 D31A     		subs	r3, r2, r3
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** }
 439              		.loc 2 308 0
 440 0014 1846     		mov	r0, r3
 441 0016 0837     		adds	r7, r7, #8
 442              	.LCFI49:
 443              		.cfi_def_cfa_offset 8
 444 0018 BD46     		mov	sp, r7
 445              	.LCFI50:
 446              		.cfi_def_cfa_register 13
 447              		@ sp needed
 448 001a 80BD     		pop	{r7, pc}
 449              		.cfi_endproc
 450              	.LFE35:
 452              		.section	.text.vListInsertGeneric,"ax",%progbits
 453              		.align	2
 454              		.global	vListInsertGeneric
 455              		.thumb
 456              		.thumb_func
 458              	vListInsertGeneric:
 459              	.LFB36:
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /* _HT_ GCC (using the settings that I'm using) checks for every public function if it is
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** preceded by a prototype. Later this prototype will be located in list.h? */
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** extern void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListIt
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * 
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** {
 460              		.loc 2 317 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 16
 463              		@ frame_needed = 1, uses_anonymous_args = 0
 464              		@ link register save eliminated.
 465 0000 80B4     		push	{r7}
 466              	.LCFI51:
 467              		.cfi_def_cfa_offset 4
 468              		.cfi_offset 7, -4
ARM GAS  /tmp/ccuG1sHT.s 			page 18


 469 0002 85B0     		sub	sp, sp, #20
 470              	.LCFI52:
 471              		.cfi_def_cfa_offset 24
 472 0004 00AF     		add	r7, sp, #0
 473              	.LCFI53:
 474              		.cfi_def_cfa_register 7
 475 0006 F860     		str	r0, [r7, #12]
 476 0008 B960     		str	r1, [r7, #8]
 477 000a 7A60     		str	r2, [r7, #4]
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* Insert a new list item into pxList, it does not sort the list,
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	but it puts the item just before xListEnd, so it will be the last item
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	returned by listGET_HEAD_ENTRY() */
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 478              		.loc 2 321 0
 479 000c BB68     		ldr	r3, [r7, #8]
 480 000e 7A68     		ldr	r2, [r7, #4]
 481 0010 5A60     		str	r2, [r3, #4]
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 482              		.loc 2 322 0
 483 0012 7B68     		ldr	r3, [r7, #4]
 484 0014 9A68     		ldr	r2, [r3, #8]
 485 0016 BB68     		ldr	r3, [r7, #8]
 486 0018 9A60     		str	r2, [r3, #8]
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWhere->pxPrevious->pxNext = pxNewListItem;
 487              		.loc 2 323 0
 488 001a 7B68     		ldr	r3, [r7, #4]
 489 001c 9B68     		ldr	r3, [r3, #8]
 490 001e BA68     		ldr	r2, [r7, #8]
 491 0020 5A60     		str	r2, [r3, #4]
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWhere->pxPrevious = pxNewListItem;
 492              		.loc 2 324 0
 493 0022 7B68     		ldr	r3, [r7, #4]
 494 0024 BA68     		ldr	r2, [r7, #8]
 495 0026 9A60     		str	r2, [r3, #8]
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* Remember which list the item is in. */
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 496              		.loc 2 327 0
 497 0028 BB68     		ldr	r3, [r7, #8]
 498 002a FA68     		ldr	r2, [r7, #12]
 499 002c 1A61     		str	r2, [r3, #16]
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	( pxList->uxNumberOfItems )++;
 500              		.loc 2 329 0
 501 002e FB68     		ldr	r3, [r7, #12]
 502 0030 1B68     		ldr	r3, [r3]
 503 0032 5A1C     		adds	r2, r3, #1
 504 0034 FB68     		ldr	r3, [r7, #12]
 505 0036 1A60     		str	r2, [r3]
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** }
 506              		.loc 2 330 0
 507 0038 1437     		adds	r7, r7, #20
 508              	.LCFI54:
 509              		.cfi_def_cfa_offset 4
 510 003a BD46     		mov	sp, r7
 511              	.LCFI55:
 512              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccuG1sHT.s 			page 19


 513              		@ sp needed
 514 003c 5DF8047B 		ldr	r7, [sp], #4
 515              	.LCFI56:
 516              		.cfi_restore 7
 517              		.cfi_def_cfa_offset 0
 518 0040 7047     		bx	lr
 519              		.cfi_endproc
 520              	.LFE36:
 522              		.section	.text.prvCreateSectors,"ax",%progbits
 523              		.align	2
 524              		.thumb
 525              		.thumb_func
 527              	prvCreateSectors:
 528              	.LFB37:
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static BaseType_t prvCreateSectors( void )
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 529              		.loc 2 336 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 8
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533 0000 80B5     		push	{r7, lr}
 534              	.LCFI57:
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 7, -8
 537              		.cfi_offset 14, -4
 538 0002 82B0     		sub	sp, sp, #8
 539              	.LCFI58:
 540              		.cfi_def_cfa_offset 16
 541 0004 00AF     		add	r7, sp, #0
 542              	.LCFI59:
 543              		.cfi_def_cfa_register 7
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xIndex, xReturn;
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		vListInitialise( &xSegmentList );
 544              		.loc 2 341 0
 545 0006 2448     		ldr	r0, .L24
 546 0008 FFF7FEFF 		bl	vListInitialise
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegm
 547              		.loc 2 342 0
 548 000c 4FF48050 		mov	r0, #4096
 549 0010 FFF7FEFF 		bl	pvPortMalloc
 550 0014 0246     		mov	r2, r0
 551 0016 214B     		ldr	r3, .L24+4
 552 0018 1A60     		str	r2, [r3]
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( xTCPSegments == NULL )
 553              		.loc 2 344 0
 554 001a 204B     		ldr	r3, .L24+4
 555 001c 1B68     		ldr	r3, [r3]
 556 001e 002B     		cmp	r3, #0
 557 0020 02D1     		bne	.L19
ARM GAS  /tmp/ccuG1sHT.s 			page 20


 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %lu failed\n",
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			xReturn = pdFAIL;
 558              		.loc 2 349 0
 559 0022 0023     		movs	r3, #0
 560 0024 3B60     		str	r3, [r7]
 561 0026 32E0     		b	.L20
 562              	.L19:
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Clear the allocated space. */
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 563              		.loc 2 354 0
 564 0028 1C4B     		ldr	r3, .L24+4
 565 002a 1B68     		ldr	r3, [r3]
 566 002c 1846     		mov	r0, r3
 567 002e 0021     		movs	r1, #0
 568 0030 4FF48052 		mov	r2, #4096
 569 0034 FFF7FEFF 		bl	memset
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 570              		.loc 2 356 0
 571 0038 0023     		movs	r3, #0
 572 003a 7B60     		str	r3, [r7, #4]
 573 003c 22E0     		b	.L21
 574              	.L22:
 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Could call vListInitialiseItem here but all data has been
 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				nulled already.  Set the owner to a segment descriptor. */
 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xInd
 575              		.loc 2 360 0 discriminator 3
 576 003e 174B     		ldr	r3, .L24+4
 577 0040 1A68     		ldr	r2, [r3]
 578 0042 7B68     		ldr	r3, [r7, #4]
 579 0044 9B01     		lsls	r3, r3, #6
 580 0046 1344     		add	r3, r3, r2
 581 0048 144A     		ldr	r2, .L24+4
 582 004a 1168     		ldr	r1, [r2]
 583 004c 7A68     		ldr	r2, [r7, #4]
 584 004e 9201     		lsls	r2, r2, #6
 585 0050 0A44     		add	r2, r2, r1
 586 0052 9A63     		str	r2, [r3, #56]
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIn
 587              		.loc 2 361 0 discriminator 3
 588 0054 114B     		ldr	r3, .L24+4
 589 0056 1A68     		ldr	r2, [r3]
 590 0058 7B68     		ldr	r3, [r7, #4]
 591 005a 9B01     		lsls	r3, r3, #6
 592 005c 1344     		add	r3, r3, r2
 593 005e 0F4A     		ldr	r2, .L24+4
 594 0060 1168     		ldr	r1, [r2]
 595 0062 7A68     		ldr	r2, [r7, #4]
 596 0064 9201     		lsls	r2, r2, #6
 597 0066 0A44     		add	r2, r2, r1
ARM GAS  /tmp/ccuG1sHT.s 			page 21


 598 0068 5A62     		str	r2, [r3, #36]
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* And add it to the pool of available segments */
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				vListInsertFifo( &xSegmentList, &( xTCPSegments[xIndex].xListItem ) );
 599              		.loc 2 364 0 discriminator 3
 600 006a 0C4B     		ldr	r3, .L24+4
 601 006c 1A68     		ldr	r2, [r3]
 602 006e 7B68     		ldr	r3, [r7, #4]
 603 0070 9B01     		lsls	r3, r3, #6
 604 0072 1344     		add	r3, r3, r2
 605 0074 2C33     		adds	r3, r3, #44
 606 0076 0848     		ldr	r0, .L24
 607 0078 1946     		mov	r1, r3
 608 007a FFF7FEFF 		bl	vListInsertFifo
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 609              		.loc 2 356 0 discriminator 3
 610 007e 7B68     		ldr	r3, [r7, #4]
 611 0080 0133     		adds	r3, r3, #1
 612 0082 7B60     		str	r3, [r7, #4]
 613              	.L21:
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 614              		.loc 2 356 0 is_stmt 0 discriminator 1
 615 0084 7B68     		ldr	r3, [r7, #4]
 616 0086 3F2B     		cmp	r3, #63
 617 0088 D9DD     		ble	.L22
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			xReturn = pdPASS;
 618              		.loc 2 367 0 is_stmt 1
 619 008a 0123     		movs	r3, #1
 620 008c 3B60     		str	r3, [r7]
 621              	.L20:
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return xReturn;
 622              		.loc 2 370 0
 623 008e 3B68     		ldr	r3, [r7]
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 624              		.loc 2 371 0
 625 0090 1846     		mov	r0, r3
 626 0092 0837     		adds	r7, r7, #8
 627              	.LCFI60:
 628              		.cfi_def_cfa_offset 8
 629 0094 BD46     		mov	sp, r7
 630              	.LCFI61:
 631              		.cfi_def_cfa_register 13
 632              		@ sp needed
 633 0096 80BD     		pop	{r7, pc}
 634              	.L25:
 635              		.align	2
 636              	.L24:
 637 0098 00000000 		.word	xSegmentList
 638 009c 00000000 		.word	xTCPSegments
 639              		.cfi_endproc
 640              	.LFE37:
 642              		.section	.text.xTCPWindowRxFind,"ax",%progbits
 643              		.align	2
ARM GAS  /tmp/ccuG1sHT.s 			page 22


 644              		.thumb
 645              		.thumb_func
 647              	xTCPWindowRxFind:
 648              	.LFB38:
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 649              		.loc 2 379 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 24
 652              		@ frame_needed = 1, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 654 0000 80B4     		push	{r7}
 655              	.LCFI62:
 656              		.cfi_def_cfa_offset 4
 657              		.cfi_offset 7, -4
 658 0002 87B0     		sub	sp, sp, #28
 659              	.LCFI63:
 660              		.cfi_def_cfa_offset 32
 661 0004 00AF     		add	r7, sp, #0
 662              	.LCFI64:
 663              		.cfi_def_cfa_register 7
 664 0006 7860     		str	r0, [r7, #4]
 665 0008 3960     		str	r1, [r7]
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	const ListItem_t *pxIterator;
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	const MiniListItem_t* pxEnd;
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment, *pxReturn = NULL;
 666              		.loc 2 382 0
 667 000a 0023     		movs	r3, #0
 668 000c 3B61     		str	r3, [r7, #16]
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Find a segment with a given sequence number in the list of received
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		segments. */
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 669              		.loc 2 387 0
 670 000e 7B68     		ldr	r3, [r7, #4]
 671 0010 AC33     		adds	r3, r3, #172
 672 0012 FB60     		str	r3, [r7, #12]
 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 673              		.loc 2 389 0
 674 0014 FB68     		ldr	r3, [r7, #12]
 675 0016 5B68     		ldr	r3, [r3, #4]
 676 0018 7B61     		str	r3, [r7, #20]
 677 001a 0DE0     		b	.L27
 678              	.L30:
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 679              		.loc 2 393 0
ARM GAS  /tmp/ccuG1sHT.s 			page 23


 680 001c 7B69     		ldr	r3, [r7, #20]
 681 001e DB68     		ldr	r3, [r3, #12]
 682 0020 BB60     		str	r3, [r7, #8]
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 683              		.loc 2 395 0
 684 0022 BB68     		ldr	r3, [r7, #8]
 685 0024 1A68     		ldr	r2, [r3]
 686 0026 3B68     		ldr	r3, [r7]
 687 0028 9A42     		cmp	r2, r3
 688 002a 02D1     		bne	.L28
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxReturn = pxSegment;
 689              		.loc 2 397 0
 690 002c BB68     		ldr	r3, [r7, #8]
 691 002e 3B61     		str	r3, [r7, #16]
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				break;
 692              		.loc 2 398 0
 693 0030 06E0     		b	.L29
 694              	.L28:
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 695              		.loc 2 391 0
 696 0032 7B69     		ldr	r3, [r7, #20]
 697 0034 5B68     		ldr	r3, [r3, #4]
 698 0036 7B61     		str	r3, [r7, #20]
 699              	.L27:
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
 700              		.loc 2 389 0 discriminator 1
 701 0038 7A69     		ldr	r2, [r7, #20]
 702 003a FB68     		ldr	r3, [r7, #12]
 703 003c 9A42     		cmp	r2, r3
 704 003e EDD1     		bne	.L30
 705              	.L29:
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return pxReturn;
 706              		.loc 2 402 0
 707 0040 3B69     		ldr	r3, [r7, #16]
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 708              		.loc 2 403 0
 709 0042 1846     		mov	r0, r3
 710 0044 1C37     		adds	r7, r7, #28
 711              	.LCFI65:
 712              		.cfi_def_cfa_offset 4
 713 0046 BD46     		mov	sp, r7
 714              	.LCFI66:
 715              		.cfi_def_cfa_register 13
 716              		@ sp needed
 717 0048 5DF8047B 		ldr	r7, [sp], #4
 718              	.LCFI67:
 719              		.cfi_restore 7
 720              		.cfi_def_cfa_offset 0
 721 004c 7047     		bx	lr
 722              		.cfi_endproc
 723              	.LFE38:
 725 004e 00BF     		.section	.text.xTCPWindowNew,"ax",%progbits
ARM GAS  /tmp/ccuG1sHT.s 			page 24


 726              		.align	2
 727              		.thumb
 728              		.thumb_func
 730              	xTCPWindowNew:
 731              	.LFB39:
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCou
 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 732              		.loc 2 411 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 32
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 736 0000 80B5     		push	{r7, lr}
 737              	.LCFI68:
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 7, -8
 740              		.cfi_offset 14, -4
 741 0002 88B0     		sub	sp, sp, #32
 742              	.LCFI69:
 743              		.cfi_def_cfa_offset 40
 744 0004 00AF     		add	r7, sp, #0
 745              	.LCFI70:
 746              		.cfi_def_cfa_register 7
 747 0006 F860     		str	r0, [r7, #12]
 748 0008 B960     		str	r1, [r7, #8]
 749 000a 7A60     		str	r2, [r7, #4]
 750 000c 3B60     		str	r3, [r7]
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	ListItem_t * pxItem;
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Allocate a new segment.  The socket will borrow all segments from a
 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 751              		.loc 2 417 0
 752 000e 2E4B     		ldr	r3, .L44
 753 0010 1B68     		ldr	r3, [r3]
 754 0012 002B     		cmp	r3, #0
 755 0014 01D1     		bne	.L33
 756              		.loc 2 417 0 is_stmt 0 discriminator 1
 757 0016 0123     		movs	r3, #1
 758 0018 00E0     		b	.L34
 759              	.L33:
 760              		.loc 2 417 0 discriminator 2
 761 001a 0023     		movs	r3, #0
 762              	.L34:
 763              		.loc 2 417 0 discriminator 4
 764 001c 002B     		cmp	r3, #0
 765 001e 02D0     		beq	.L35
 418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* If the TCP-stack runs out of segments, you might consider
 420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
 421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", xIsForRx ? 'R' : 'T
ARM GAS  /tmp/ccuG1sHT.s 			page 25


 422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = NULL;
 766              		.loc 2 422 0 is_stmt 1
 767 0020 0023     		movs	r3, #0
 768 0022 FB61     		str	r3, [r7, #28]
 769 0024 4AE0     		b	.L36
 770              	.L35:
 423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
 425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Pop the item at the head of the list.  Semaphore protection is
 427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			not required as only the IP task will call these functions.  */
 428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 771              		.loc 2 428 0
 772 0026 284B     		ldr	r3, .L44
 773 0028 DB68     		ldr	r3, [r3, #12]
 774 002a BB61     		str	r3, [r7, #24]
 429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 775              		.loc 2 429 0
 776 002c BB69     		ldr	r3, [r7, #24]
 777 002e DB68     		ldr	r3, [r3, #12]
 778 0030 FB61     		str	r3, [r7, #28]
 430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			configASSERT( pxItem != NULL );
 779              		.loc 2 431 0
 780 0032 BB69     		ldr	r3, [r7, #24]
 781 0034 002B     		cmp	r3, #0
 782 0036 09D1     		bne	.L37
 783              	.LBB8:
 784              	.LBB9:
 785              		.file 3 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
ARM GAS  /tmp/ccuG1sHT.s 			page 26


  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
ARM GAS  /tmp/ccuG1sHT.s 			page 27


  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
ARM GAS  /tmp/ccuG1sHT.s 			page 28


 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
ARM GAS  /tmp/ccuG1sHT.s 			page 29


 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 786              		.loc 3 237 0 discriminator 1
 787              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 788 0038 4FF05003 			mov r3, #80												
 789 003c 83F31188 		msr basepri, r3											
 790 0040 BFF36F8F 		isb														
 791 0044 BFF34F8F 		dsb														
 792              	
 793              	@ 0 "" 2
 794              		.thumb
 795 0048 7B61     		str	r3, [r7, #20]
 796              	.L38:
 797              	.LBE9:
 798              	.LBE8:
 799              		.loc 2 431 0 discriminator 1
 800 004a FEE7     		b	.L38
 801              	.L37:
 432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			configASSERT( pxSegment != NULL );
 802              		.loc 2 432 0
ARM GAS  /tmp/ccuG1sHT.s 			page 30


 803 004c FB69     		ldr	r3, [r7, #28]
 804 004e 002B     		cmp	r3, #0
 805 0050 09D1     		bne	.L39
 806              	.LBB10:
 807              	.LBB11:
 808              		.loc 3 237 0 discriminator 1
 809              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 810 0052 4FF05003 			mov r3, #80												
 811 0056 83F31188 		msr basepri, r3											
 812 005a BFF36F8F 		isb														
 813 005e BFF34F8F 		dsb														
 814              	
 815              	@ 0 "" 2
 816              		.thumb
 817 0062 3B61     		str	r3, [r7, #16]
 818              	.L40:
 819              	.LBE11:
 820              	.LBE10:
 821              		.loc 2 432 0 discriminator 2
 822 0064 FEE7     		b	.L40
 823              	.L39:
 433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Remove the item from xSegmentList. */
 435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			uxListRemove( pxItem );
 824              		.loc 2 435 0
 825 0066 B869     		ldr	r0, [r7, #24]
 826 0068 FFF7FEFF 		bl	uxListRemove
 436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Add it to either the connections' Rx or Tx queue. */
 438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 827              		.loc 2 438 0
 828 006c 3B68     		ldr	r3, [r7]
 829 006e 002B     		cmp	r3, #0
 830 0070 02D0     		beq	.L41
 831              		.loc 2 438 0 is_stmt 0 discriminator 1
 832 0072 FB68     		ldr	r3, [r7, #12]
 833 0074 A433     		adds	r3, r3, #164
 834 0076 01E0     		b	.L42
 835              	.L41:
 836              		.loc 2 438 0 discriminator 2
 837 0078 FB68     		ldr	r3, [r7, #12]
 838 007a 9033     		adds	r3, r3, #144
 839              	.L42:
 840              		.loc 2 438 0 discriminator 4
 841 007c 1846     		mov	r0, r3
 842 007e B969     		ldr	r1, [r7, #24]
 843 0080 FFF7FEFF 		bl	vListInsertFifo
 439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* And set the segment's timer to zero */
 441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			vTCPTimerSet( &pxSegment->xTransmitTimer );
 844              		.loc 2 441 0 is_stmt 1 discriminator 4
 845 0084 FB69     		ldr	r3, [r7, #28]
 846 0086 1033     		adds	r3, r3, #16
 847 0088 1846     		mov	r0, r3
 848 008a FFF7FEFF 		bl	vTCPTimerSet
 442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment->u.ulFlags = 0;
ARM GAS  /tmp/ccuG1sHT.s 			page 31


 849              		.loc 2 443 0 discriminator 4
 850 008e FB69     		ldr	r3, [r7, #28]
 851 0090 0022     		movs	r2, #0
 852 0092 5A61     		str	r2, [r3, #20]
 444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 853              		.loc 2 444 0 discriminator 4
 854 0094 3B68     		ldr	r3, [r7]
 855 0096 002B     		cmp	r3, #0
 856 0098 14BF     		ite	ne
 857 009a 0123     		movne	r3, #1
 858 009c 0023     		moveq	r3, #0
 859 009e D9B2     		uxtb	r1, r3
 860 00a0 FA69     		ldr	r2, [r7, #28]
 861 00a2 937D     		ldrb	r3, [r2, #22]
 862 00a4 61F38203 		bfi	r3, r1, #2, #1
 863 00a8 9375     		strb	r3, [r2, #22]
 445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment->lMaxLength = lCount;
 864              		.loc 2 445 0 discriminator 4
 865 00aa FB69     		ldr	r3, [r7, #28]
 866 00ac 7A68     		ldr	r2, [r7, #4]
 867 00ae 5A60     		str	r2, [r3, #4]
 446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment->lDataLength = lCount;
 868              		.loc 2 446 0 discriminator 4
 869 00b0 FB69     		ldr	r3, [r7, #28]
 870 00b2 7A68     		ldr	r2, [r7, #4]
 871 00b4 9A60     		str	r2, [r3, #8]
 447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment->ulSequenceNumber = ulSequenceNumber;
 872              		.loc 2 447 0 discriminator 4
 873 00b6 FB69     		ldr	r3, [r7, #28]
 874 00b8 BA68     		ldr	r2, [r7, #8]
 875 00ba 1A60     		str	r2, [r3]
 876              	.L36:
 448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
 449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
 451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( xLowestLength > xLength )
 454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					xLowestLength = xLength;
 456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
 457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			#endif /* ipconfigHAS_DEBUG_PRINTF */
 459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return pxSegment;
 877              		.loc 2 461 0
 878 00bc FB69     		ldr	r3, [r7, #28]
 462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 879              		.loc 2 462 0
 880 00be 1846     		mov	r0, r3
 881 00c0 2037     		adds	r7, r7, #32
 882              	.LCFI71:
 883              		.cfi_def_cfa_offset 8
 884 00c2 BD46     		mov	sp, r7
 885              	.LCFI72:
 886              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccuG1sHT.s 			page 32


 887              		@ sp needed
 888 00c4 80BD     		pop	{r7, pc}
 889              	.L45:
 890 00c6 00BF     		.align	2
 891              	.L44:
 892 00c8 00000000 		.word	xSegmentList
 893              		.cfi_endproc
 894              	.LFE39:
 896              		.section	.text.xTCPWindowRxEmpty,"ax",%progbits
 897              		.align	2
 898              		.global	xTCPWindowRxEmpty
 899              		.thumb
 900              		.thumb_func
 902              	xTCPWindowRxEmpty:
 903              	.LFB40:
 463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xTCPWindowRxEmpty( TCPWindow_t *pxWindow )
 470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 904              		.loc 2 470 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 16
 907              		@ frame_needed = 1, uses_anonymous_args = 0
 908 0000 80B5     		push	{r7, lr}
 909              	.LCFI73:
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 7, -8
 912              		.cfi_offset 14, -4
 913 0002 84B0     		sub	sp, sp, #16
 914              	.LCFI74:
 915              		.cfi_def_cfa_offset 24
 916 0004 00AF     		add	r7, sp, #0
 917              	.LCFI75:
 918              		.cfi_def_cfa_register 7
 919 0006 7860     		str	r0, [r7, #4]
 471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xReturn;
 472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* When the peer has a close request (FIN flag), the driver will check
 474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if there are missing packets in the Rx-queue.  It will accept the
 475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		closure of the connection if both conditions are true:
 476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		  - the Rx-queue is empty
 477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		  - the highest Rx sequence number has been ACK'ed */
 478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 920              		.loc 2 478 0
 921 0008 7B68     		ldr	r3, [r7, #4]
 922 000a D3F8A430 		ldr	r3, [r3, #164]
 923 000e 002B     		cmp	r3, #0
 924 0010 02D0     		beq	.L47
 479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Rx data has been stored while earlier packets were missing. */
 481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			xReturn = pdFALSE;
 925              		.loc 2 481 0
 926 0012 0023     		movs	r3, #0
ARM GAS  /tmp/ccuG1sHT.s 			page 33


 927 0014 FB60     		str	r3, [r7, #12]
 928 0016 0FE0     		b	.L48
 929              	.L47:
 482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighes
 930              		.loc 2 483 0
 931 0018 7B68     		ldr	r3, [r7, #4]
 932 001a 1A69     		ldr	r2, [r3, #16]
 933 001c 7B68     		ldr	r3, [r7, #4]
 934 001e 9B69     		ldr	r3, [r3, #24]
 935 0020 1046     		mov	r0, r2
 936 0022 1946     		mov	r1, r3
 937 0024 FFF7FEFF 		bl	xSequenceGreaterThanOrEqual
 938 0028 0346     		mov	r3, r0
 939 002a 002B     		cmp	r3, #0
 940 002c 02D0     		beq	.L49
 484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* No Rx packets are being stored and the highest sequence number
 486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			that has been received has been ACKed. */
 487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			xReturn = pdTRUE;
 941              		.loc 2 487 0
 942 002e 0123     		movs	r3, #1
 943 0030 FB60     		str	r3, [r7, #12]
 944 0032 01E0     		b	.L48
 945              	.L49:
 488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
 490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
 492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
 493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
 494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			xReturn = pdFALSE;
 946              		.loc 2 494 0
 947 0034 0023     		movs	r3, #0
 948 0036 FB60     		str	r3, [r7, #12]
 949              	.L48:
 495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return xReturn;
 950              		.loc 2 497 0
 951 0038 FB68     		ldr	r3, [r7, #12]
 498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 952              		.loc 2 498 0
 953 003a 1846     		mov	r0, r3
 954 003c 1037     		adds	r7, r7, #16
 955              	.LCFI76:
 956              		.cfi_def_cfa_offset 8
 957 003e BD46     		mov	sp, r7
 958              	.LCFI77:
 959              		.cfi_def_cfa_register 13
 960              		@ sp needed
 961 0040 80BD     		pop	{r7, pc}
 962              		.cfi_endproc
 963              	.LFE40:
 965 0042 00BF     		.section	.text.xTCPWindowGetHead,"ax",%progbits
 966              		.align	2
 967              		.thumb
ARM GAS  /tmp/ccuG1sHT.s 			page 34


 968              		.thumb_func
 970              	xTCPWindowGetHead:
 971              	.LFB41:
 499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowGetHead( List_t *pxList )
 506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 972              		.loc 2 506 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 16
 975              		@ frame_needed = 1, uses_anonymous_args = 0
 976 0000 80B5     		push	{r7, lr}
 977              	.LCFI78:
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 0002 84B0     		sub	sp, sp, #16
 982              	.LCFI79:
 983              		.cfi_def_cfa_offset 24
 984 0004 00AF     		add	r7, sp, #0
 985              	.LCFI80:
 986              		.cfi_def_cfa_register 7
 987 0006 7860     		str	r0, [r7, #4]
 507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
 508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	ListItem_t * pxItem;
 509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Detaches and returns the head of a queue. */
 511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 988              		.loc 2 511 0
 989 0008 7B68     		ldr	r3, [r7, #4]
 990 000a 1B68     		ldr	r3, [r3]
 991 000c 002B     		cmp	r3, #0
 992 000e 01D1     		bne	.L52
 993              		.loc 2 511 0 is_stmt 0 discriminator 1
 994 0010 0123     		movs	r3, #1
 995 0012 00E0     		b	.L53
 996              	.L52:
 997              		.loc 2 511 0 discriminator 2
 998 0014 0023     		movs	r3, #0
 999              	.L53:
 1000              		.loc 2 511 0 discriminator 4
 1001 0016 002B     		cmp	r3, #0
 1002 0018 02D0     		beq	.L54
 512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = NULL;
 1003              		.loc 2 513 0 is_stmt 1
 1004 001a 0023     		movs	r3, #0
 1005 001c FB60     		str	r3, [r7, #12]
 1006 001e 08E0     		b	.L55
 1007              	.L54:
 514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
 516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
ARM GAS  /tmp/ccuG1sHT.s 			page 35


 517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 1008              		.loc 2 517 0
 1009 0020 7B68     		ldr	r3, [r7, #4]
 1010 0022 DB68     		ldr	r3, [r3, #12]
 1011 0024 BB60     		str	r3, [r7, #8]
 518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 1012              		.loc 2 518 0
 1013 0026 BB68     		ldr	r3, [r7, #8]
 1014 0028 DB68     		ldr	r3, [r3, #12]
 1015 002a FB60     		str	r3, [r7, #12]
 519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			uxListRemove( pxItem );
 1016              		.loc 2 520 0
 1017 002c B868     		ldr	r0, [r7, #8]
 1018 002e FFF7FEFF 		bl	uxListRemove
 1019              	.L55:
 521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return pxSegment;
 1020              		.loc 2 523 0
 1021 0032 FB68     		ldr	r3, [r7, #12]
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 1022              		.loc 2 524 0
 1023 0034 1846     		mov	r0, r3
 1024 0036 1037     		adds	r7, r7, #16
 1025              	.LCFI81:
 1026              		.cfi_def_cfa_offset 8
 1027 0038 BD46     		mov	sp, r7
 1028              	.LCFI82:
 1029              		.cfi_def_cfa_register 13
 1030              		@ sp needed
 1031 003a 80BD     		pop	{r7, pc}
 1032              		.cfi_endproc
 1033              	.LFE41:
 1035              		.section	.text.xTCPWindowPeekHead,"ax",%progbits
 1036              		.align	2
 1037              		.thumb
 1038              		.thumb_func
 1040              	xTCPWindowPeekHead:
 1041              	.LFB42:
 525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowPeekHead( List_t *pxList )
 532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 1042              		.loc 2 532 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 16
 1045              		@ frame_needed = 1, uses_anonymous_args = 0
 1046              		@ link register save eliminated.
 1047 0000 80B4     		push	{r7}
 1048              	.LCFI83:
 1049              		.cfi_def_cfa_offset 4
 1050              		.cfi_offset 7, -4
ARM GAS  /tmp/ccuG1sHT.s 			page 36


 1051 0002 85B0     		sub	sp, sp, #20
 1052              	.LCFI84:
 1053              		.cfi_def_cfa_offset 24
 1054 0004 00AF     		add	r7, sp, #0
 1055              	.LCFI85:
 1056              		.cfi_def_cfa_register 7
 1057 0006 7860     		str	r0, [r7, #4]
 533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	ListItem_t *pxItem;
 534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxReturn;
 535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Returns the head of a queue but it won't be detached. */
 537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 1058              		.loc 2 537 0
 1059 0008 7B68     		ldr	r3, [r7, #4]
 1060 000a 1B68     		ldr	r3, [r3]
 1061 000c 002B     		cmp	r3, #0
 1062 000e 01D1     		bne	.L58
 1063              		.loc 2 537 0 is_stmt 0 discriminator 1
 1064 0010 0123     		movs	r3, #1
 1065 0012 00E0     		b	.L59
 1066              	.L58:
 1067              		.loc 2 537 0 discriminator 2
 1068 0014 0023     		movs	r3, #0
 1069              	.L59:
 1070              		.loc 2 537 0 discriminator 4
 1071 0016 002B     		cmp	r3, #0
 1072 0018 02D0     		beq	.L60
 538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxReturn = NULL;
 1073              		.loc 2 539 0 is_stmt 1
 1074 001a 0023     		movs	r3, #0
 1075 001c FB60     		str	r3, [r7, #12]
 1076 001e 05E0     		b	.L61
 1077              	.L60:
 540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
 542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 1078              		.loc 2 543 0
 1079 0020 7B68     		ldr	r3, [r7, #4]
 1080 0022 DB68     		ldr	r3, [r3, #12]
 1081 0024 BB60     		str	r3, [r7, #8]
 544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 1082              		.loc 2 544 0
 1083 0026 BB68     		ldr	r3, [r7, #8]
 1084 0028 DB68     		ldr	r3, [r3, #12]
 1085 002a FB60     		str	r3, [r7, #12]
 1086              	.L61:
 545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return pxReturn;
 1087              		.loc 2 547 0
 1088 002c FB68     		ldr	r3, [r7, #12]
 548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 1089              		.loc 2 548 0
 1090 002e 1846     		mov	r0, r3
 1091 0030 1437     		adds	r7, r7, #20
ARM GAS  /tmp/ccuG1sHT.s 			page 37


 1092              	.LCFI86:
 1093              		.cfi_def_cfa_offset 4
 1094 0032 BD46     		mov	sp, r7
 1095              	.LCFI87:
 1096              		.cfi_def_cfa_register 13
 1097              		@ sp needed
 1098 0034 5DF8047B 		ldr	r7, [sp], #4
 1099              	.LCFI88:
 1100              		.cfi_restore 7
 1101              		.cfi_def_cfa_offset 0
 1102 0038 7047     		bx	lr
 1103              		.cfi_endproc
 1104              	.LFE42:
 1106 003a 00BF     		.section	.text.vTCPWindowFree,"ax",%progbits
 1107              		.align	2
 1108              		.thumb
 1109              		.thumb_func
 1111              	vTCPWindowFree:
 1112              	.LFB43:
 549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static void vTCPWindowFree( TCPSegment_t *pxSegment )
 556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 1113              		.loc 2 556 0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 8
 1116              		@ frame_needed = 1, uses_anonymous_args = 0
 1117 0000 80B5     		push	{r7, lr}
 1118              	.LCFI89:
 1119              		.cfi_def_cfa_offset 8
 1120              		.cfi_offset 7, -8
 1121              		.cfi_offset 14, -4
 1122 0002 82B0     		sub	sp, sp, #8
 1123              	.LCFI90:
 1124              		.cfi_def_cfa_offset 16
 1125 0004 00AF     		add	r7, sp, #0
 1126              	.LCFI91:
 1127              		.cfi_def_cfa_register 7
 1128 0006 7860     		str	r0, [r7, #4]
 557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/*  Free entry pxSegment because it's not used any more.  The ownership
 558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		will be passed back to the segment pool.
 559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		Unlink it from one of the queues, if any. */
 561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 1129              		.loc 2 561 0
 1130 0008 7B68     		ldr	r3, [r7, #4]
 1131 000a 9B6A     		ldr	r3, [r3, #40]
 1132 000c 002B     		cmp	r3, #0
 1133 000e 04D0     		beq	.L64
 562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			uxListRemove( &( pxSegment->xQueueItem ) );
 1134              		.loc 2 563 0
 1135 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccuG1sHT.s 			page 38


 1136 0012 1833     		adds	r3, r3, #24
 1137 0014 1846     		mov	r0, r3
 1138 0016 FFF7FEFF 		bl	uxListRemove
 1139              	.L64:
 564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxSegment->ulSequenceNumber = 0u;
 1140              		.loc 2 566 0
 1141 001a 7B68     		ldr	r3, [r7, #4]
 1142 001c 0022     		movs	r2, #0
 1143 001e 1A60     		str	r2, [r3]
 567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxSegment->lDataLength = 0l;
 1144              		.loc 2 567 0
 1145 0020 7B68     		ldr	r3, [r7, #4]
 1146 0022 0022     		movs	r2, #0
 1147 0024 9A60     		str	r2, [r3, #8]
 568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxSegment->u.ulFlags = 0u;
 1148              		.loc 2 568 0
 1149 0026 7B68     		ldr	r3, [r7, #4]
 1150 0028 0022     		movs	r2, #0
 1151 002a 5A61     		str	r2, [r3, #20]
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Take it out of xRxSegments/xTxSegments */
 571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 1152              		.loc 2 571 0
 1153 002c 7B68     		ldr	r3, [r7, #4]
 1154 002e DB6B     		ldr	r3, [r3, #60]
 1155 0030 002B     		cmp	r3, #0
 1156 0032 04D0     		beq	.L65
 572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			uxListRemove( &( pxSegment->xListItem ) );
 1157              		.loc 2 573 0
 1158 0034 7B68     		ldr	r3, [r7, #4]
 1159 0036 2C33     		adds	r3, r3, #44
 1160 0038 1846     		mov	r0, r3
 1161 003a FFF7FEFF 		bl	uxListRemove
 1162              	.L65:
 574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Return it to xSegmentList */
 577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		vListInsertFifo( &xSegmentList, &( pxSegment->xListItem ) );
 1163              		.loc 2 577 0
 1164 003e 7B68     		ldr	r3, [r7, #4]
 1165 0040 2C33     		adds	r3, r3, #44
 1166 0042 0348     		ldr	r0, .L66
 1167 0044 1946     		mov	r1, r3
 1168 0046 FFF7FEFF 		bl	vListInsertFifo
 578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 1169              		.loc 2 578 0
 1170 004a 0837     		adds	r7, r7, #8
 1171              	.LCFI92:
 1172              		.cfi_def_cfa_offset 8
 1173 004c BD46     		mov	sp, r7
 1174              	.LCFI93:
 1175              		.cfi_def_cfa_register 13
 1176              		@ sp needed
 1177 004e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccuG1sHT.s 			page 39


 1178              	.L67:
 1179              		.align	2
 1180              	.L66:
 1181 0050 00000000 		.word	xSegmentList
 1182              		.cfi_endproc
 1183              	.LFE43:
 1185              		.section	.text.vTCPWindowDestroy,"ax",%progbits
 1186              		.align	2
 1187              		.global	vTCPWindowDestroy
 1188              		.thumb
 1189              		.thumb_func
 1191              	vTCPWindowDestroy:
 1192              	.LFB44:
 579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	void vTCPWindowDestroy( TCPWindow_t *pxWindow )
 586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 1193              		.loc 2 586 0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 24
 1196              		@ frame_needed = 1, uses_anonymous_args = 0
 1197 0000 80B5     		push	{r7, lr}
 1198              	.LCFI94:
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 7, -8
 1201              		.cfi_offset 14, -4
 1202 0002 86B0     		sub	sp, sp, #24
 1203              	.LCFI95:
 1204              		.cfi_def_cfa_offset 32
 1205 0004 00AF     		add	r7, sp, #0
 1206              	.LCFI96:
 1207              		.cfi_def_cfa_register 7
 1208 0006 7860     		str	r0, [r7, #4]
 587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	List_t * pxSegments;
 588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xRound;
 589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
 590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/*  Destroy a window.  A TCP window doesn't serve any more.  Return all
 592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		owned segments to the pool.  In order to save code, it will make 2 rounds,
 593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		one to remove the segments from xRxSegments, and a second round to clear
 594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		xTxSegments*/
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		for( xRound = 0; xRound < 2; xRound++ )
 1209              		.loc 2 595 0
 1210 0008 0023     		movs	r3, #0
 1211 000a 3B61     		str	r3, [r7, #16]
 1212 000c 22E0     		b	.L69
 1213              	.L77:
 596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( xRound != 0 )
 1214              		.loc 2 597 0
 1215 000e 3B69     		ldr	r3, [r7, #16]
 1216 0010 002B     		cmp	r3, #0
 1217 0012 03D0     		beq	.L70
ARM GAS  /tmp/ccuG1sHT.s 			page 40


 598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxSegments = &( pxWindow->xRxSegments );
 1218              		.loc 2 599 0
 1219 0014 7B68     		ldr	r3, [r7, #4]
 1220 0016 A433     		adds	r3, r3, #164
 1221 0018 7B61     		str	r3, [r7, #20]
 1222 001a 02E0     		b	.L71
 1223              	.L70:
 600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			else
 602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxSegments = &( pxWindow->xTxSegments );
 1224              		.loc 2 603 0
 1225 001c 7B68     		ldr	r3, [r7, #4]
 1226 001e 9033     		adds	r3, r3, #144
 1227 0020 7B61     		str	r3, [r7, #20]
 1228              	.L71:
 604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 1229              		.loc 2 606 0
 1230 0022 7B69     		ldr	r3, [r7, #20]
 1231 0024 9B68     		ldr	r3, [r3, #8]
 1232 0026 B3F1FF3F 		cmp	r3, #-1
 1233 002a 01D1     		bne	.L72
 1234              		.loc 2 606 0 is_stmt 0 discriminator 1
 1235 002c 0123     		movs	r3, #1
 1236 002e 00E0     		b	.L73
 1237              	.L72:
 1238              		.loc 2 606 0 discriminator 2
 1239 0030 0023     		movs	r3, #0
 1240              	.L73:
 1241              		.loc 2 606 0 discriminator 4
 1242 0032 002B     		cmp	r3, #0
 1243 0034 0BD0     		beq	.L74
 607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 1244              		.loc 2 608 0 is_stmt 1
 1245 0036 06E0     		b	.L75
 1246              	.L76:
 609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 1247              		.loc 2 610 0
 1248 0038 7B69     		ldr	r3, [r7, #20]
 1249 003a DB68     		ldr	r3, [r3, #12]
 1250 003c DB68     		ldr	r3, [r3, #12]
 1251 003e FB60     		str	r3, [r7, #12]
 611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					vTCPWindowFree( pxSegment );
 1252              		.loc 2 611 0
 1253 0040 F868     		ldr	r0, [r7, #12]
 1254 0042 FFF7FEFF 		bl	vTCPWindowFree
 1255              	.L75:
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 1256              		.loc 2 608 0
 1257 0046 7B69     		ldr	r3, [r7, #20]
 1258 0048 1B68     		ldr	r3, [r3]
 1259 004a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccuG1sHT.s 			page 41


 1260 004c F4D1     		bne	.L76
 1261              	.L74:
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 1262              		.loc 2 595 0 discriminator 2
 1263 004e 3B69     		ldr	r3, [r7, #16]
 1264 0050 0133     		adds	r3, r3, #1
 1265 0052 3B61     		str	r3, [r7, #16]
 1266              	.L69:
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 1267              		.loc 2 595 0 is_stmt 0 discriminator 1
 1268 0054 3B69     		ldr	r3, [r7, #16]
 1269 0056 012B     		cmp	r3, #1
 1270 0058 D9DD     		ble	.L77
 612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
 613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 1271              		.loc 2 615 0 is_stmt 1
 1272 005a 1837     		adds	r7, r7, #24
 1273              	.LCFI97:
 1274              		.cfi_def_cfa_offset 8
 1275 005c BD46     		mov	sp, r7
 1276              	.LCFI98:
 1277              		.cfi_def_cfa_register 13
 1278              		@ sp needed
 1279 005e 80BD     		pop	{r7, pc}
 1280              		.cfi_endproc
 1281              	.LFE44:
 1283              		.section	.text.vTCPWindowCreate,"ax",%progbits
 1284              		.align	2
 1285              		.global	vTCPWindowCreate
 1286              		.thumb
 1287              		.thumb_func
 1289              	vTCPWindowCreate:
 1290              	.LFB45:
 616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
 618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** void vTCPWindowCreate( TCPWindow_t *pxWindow, uint32_t ulRxWindowLength,
 621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
 622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** {
 1291              		.loc 2 622 0
 1292              		.cfi_startproc
 1293              		@ args = 8, pretend = 0, frame = 16
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0000 80B5     		push	{r7, lr}
 1296              	.LCFI99:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 84B0     		sub	sp, sp, #16
 1301              	.LCFI100:
 1302              		.cfi_def_cfa_offset 24
 1303 0004 00AF     		add	r7, sp, #0
 1304              	.LCFI101:
 1305              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccuG1sHT.s 			page 42


 1306 0006 F860     		str	r0, [r7, #12]
 1307 0008 B960     		str	r1, [r7, #8]
 1308 000a 7A60     		str	r2, [r7, #4]
 1309 000c 3B60     		str	r3, [r7]
 623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* Create and initialize a window. */
 624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#if( ipconfigUSE_TCP_WIN == 1 )
 626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( xTCPSegments == NULL )
 1310              		.loc 2 627 0
 1311 000e 174B     		ldr	r3, .L80
 1312 0010 1B68     		ldr	r3, [r3]
 1313 0012 002B     		cmp	r3, #0
 1314 0014 01D1     		bne	.L79
 628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			prvCreateSectors();
 1315              		.loc 2 629 0
 1316 0016 FFF7FEFF 		bl	prvCreateSectors
 1317              	.L79:
 630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		vListInitialise( &pxWindow->xTxSegments );
 1318              		.loc 2 632 0
 1319 001a FB68     		ldr	r3, [r7, #12]
 1320 001c 9033     		adds	r3, r3, #144
 1321 001e 1846     		mov	r0, r3
 1322 0020 FFF7FEFF 		bl	vListInitialise
 633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		vListInitialise( &pxWindow->xRxSegments );
 1323              		.loc 2 633 0
 1324 0024 FB68     		ldr	r3, [r7, #12]
 1325 0026 A433     		adds	r3, r3, #164
 1326 0028 1846     		mov	r0, r3
 1327 002a FFF7FEFF 		bl	vListInitialise
 634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent im
 1328              		.loc 2 635 0
 1329 002e FB68     		ldr	r3, [r7, #12]
 1330 0030 4033     		adds	r3, r3, #64
 1331 0032 1846     		mov	r0, r3
 1332 0034 FFF7FEFF 		bl	vListInitialise
 636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission *
 1333              		.loc 2 636 0
 1334 0038 FB68     		ldr	r3, [r7, #12]
 1335 003a 5433     		adds	r3, r3, #84
 1336 003c 1846     		mov	r0, r3
 1337 003e FFF7FEFF 		bl	vListInitialise
 637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 1338              		.loc 2 637 0
 1339 0042 FB68     		ldr	r3, [r7, #12]
 1340 0044 6833     		adds	r3, r3, #104
 1341 0046 1846     		mov	r0, r3
 1342 0048 FFF7FEFF 		bl	vListInitialise
 638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#endif /* ipconfigUSE_TCP_WIN == 1 */
 640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	if( xTCPWindowLoggingLevel != 0 )
 642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
ARM GAS  /tmp/ccuG1sHT.s 			page 43


 643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulRxWindowLength, ulTxWindowLength ) );
 645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 1343              		.loc 2 647 0
 1344 004c FB68     		ldr	r3, [r7, #12]
 1345 004e BA68     		ldr	r2, [r7, #8]
 1346 0050 5A60     		str	r2, [r3, #4]
 648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 1347              		.loc 2 648 0
 1348 0052 FB68     		ldr	r3, [r7, #12]
 1349 0054 7A68     		ldr	r2, [r7, #4]
 1350 0056 9A60     		str	r2, [r3, #8]
 649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 1351              		.loc 2 650 0
 1352 0058 F868     		ldr	r0, [r7, #12]
 1353 005a 3968     		ldr	r1, [r7]
 1354 005c BA69     		ldr	r2, [r7, #24]
 1355 005e FB69     		ldr	r3, [r7, #28]
 1356 0060 FFF7FEFF 		bl	vTCPWindowInit
 651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** }
 1357              		.loc 2 651 0
 1358 0064 1037     		adds	r7, r7, #16
 1359              	.LCFI102:
 1360              		.cfi_def_cfa_offset 8
 1361 0066 BD46     		mov	sp, r7
 1362              	.LCFI103:
 1363              		.cfi_def_cfa_register 13
 1364              		@ sp needed
 1365 0068 80BD     		pop	{r7, pc}
 1366              	.L81:
 1367 006a 00BF     		.align	2
 1368              	.L80:
 1369 006c 00000000 		.word	xTCPSegments
 1370              		.cfi_endproc
 1371              	.LFE45:
 1373              		.section	.text.vTCPWindowInit,"ax",%progbits
 1374              		.align	2
 1375              		.global	vTCPWindowInit
 1376              		.thumb
 1377              		.thumb_func
 1379              	vTCPWindowInit:
 1380              	.LFB46:
 652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** void vTCPWindowInit( TCPWindow_t *pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32
 655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** {
 1381              		.loc 2 655 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 24
 1384              		@ frame_needed = 1, uses_anonymous_args = 0
 1385              		@ link register save eliminated.
 1386 0000 80B4     		push	{r7}
 1387              	.LCFI104:
 1388              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccuG1sHT.s 			page 44


 1389              		.cfi_offset 7, -4
 1390 0002 87B0     		sub	sp, sp, #28
 1391              	.LCFI105:
 1392              		.cfi_def_cfa_offset 32
 1393 0004 00AF     		add	r7, sp, #0
 1394              	.LCFI106:
 1395              		.cfi_def_cfa_register 7
 1396 0006 F860     		str	r0, [r7, #12]
 1397 0008 B960     		str	r1, [r7, #8]
 1398 000a 7A60     		str	r2, [r7, #4]
 1399 000c 3B60     		str	r3, [r7]
 656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** const int32_t l500ms = 500;
 1400              		.loc 2 656 0
 1401 000e 4FF4FA73 		mov	r3, #500
 1402 0012 7B61     		str	r3, [r7, #20]
 657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->u.ulFlags = 0ul;
 1403              		.loc 2 658 0
 1404 0014 FB68     		ldr	r3, [r7, #12]
 1405 0016 0022     		movs	r2, #0
 1406 0018 1A60     		str	r2, [r3]
 659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 1407              		.loc 2 659 0
 1408 001a FA68     		ldr	r2, [r7, #12]
 1409 001c 1378     		ldrb	r3, [r2]
 1410 001e 43F00103 		orr	r3, r3, #1
 1411 0022 1370     		strb	r3, [r2]
 660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	if( ulMSS != 0ul )
 1412              		.loc 2 661 0
 1413 0024 3B68     		ldr	r3, [r7]
 1414 0026 002B     		cmp	r3, #0
 1415 0028 24D0     		beq	.L83
 662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( pxWindow->usMSSInit != 0u )
 1416              		.loc 2 663 0
 1417 002a FB68     		ldr	r3, [r7, #12]
 1418 002c B3F8BE30 		ldrh	r3, [r3, #190]
 1419 0030 002B     		cmp	r3, #0
 1420 0032 04D0     		beq	.L84
 664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 1421              		.loc 2 665 0
 1422 0034 3B68     		ldr	r3, [r7]
 1423 0036 9AB2     		uxth	r2, r3
 1424 0038 FB68     		ldr	r3, [r7, #12]
 1425 003a A3F8BE20 		strh	r2, [r3, #190]	@ movhi
 1426              	.L84:
 666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 1427              		.loc 2 668 0
 1428 003e FB68     		ldr	r3, [r7, #12]
 1429 0040 B3F8BC30 		ldrh	r3, [r3, #188]
 1430 0044 1A46     		mov	r2, r3
 1431 0046 3B68     		ldr	r3, [r7]
 1432 0048 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccuG1sHT.s 			page 45


 1433 004a 04D8     		bhi	.L85
 1434              		.loc 2 668 0 is_stmt 0 discriminator 1
 1435 004c FB68     		ldr	r3, [r7, #12]
 1436 004e B3F8BC30 		ldrh	r3, [r3, #188]
 1437 0052 002B     		cmp	r3, #0
 1438 0054 0ED1     		bne	.L83
 1439              	.L85:
 669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 1440              		.loc 2 670 0 is_stmt 1
 1441 0056 FB68     		ldr	r3, [r7, #12]
 1442 0058 5A68     		ldr	r2, [r3, #4]
 1443 005a 3B68     		ldr	r3, [r7]
 1444 005c B2FBF3F3 		udiv	r3, r2, r3
 1445 0060 3A68     		ldr	r2, [r7]
 1446 0062 02FB03F2 		mul	r2, r2, r3
 1447 0066 FB68     		ldr	r3, [r7, #12]
 1448 0068 5A60     		str	r2, [r3, #4]
 671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxWindow->usMSS = ( uint16_t ) ulMSS;
 1449              		.loc 2 671 0
 1450 006a 3B68     		ldr	r3, [r7]
 1451 006c 9AB2     		uxth	r2, r3
 1452 006e FB68     		ldr	r3, [r7, #12]
 1453 0070 A3F8BC20 		strh	r2, [r3, #188]	@ movhi
 1454              	.L83:
 672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#if( ipconfigUSE_TCP_WIN == 0 )
 676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
 678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	#endif /* ipconfigUSE_TCP_WIN == 1 */
 680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/*Start with a timeout of 2 * 500 ms (1 sec). */
 682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->lSRTT = l500ms;
 1455              		.loc 2 682 0
 1456 0074 FB68     		ldr	r3, [r7, #12]
 1457 0076 7A69     		ldr	r2, [r7, #20]
 1458 0078 9A63     		str	r2, [r3, #56]
 683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* Just for logging, to print relative sequence numbers. */
 685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 1459              		.loc 2 685 0
 1460 007a FB68     		ldr	r3, [r7, #12]
 1461 007c BA68     		ldr	r2, [r7, #8]
 1462 007e DA60     		str	r2, [r3, #12]
 686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* The segment asked for in the next transmission. */
 688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 1463              		.loc 2 688 0
 1464 0080 FB68     		ldr	r3, [r7, #12]
 1465 0082 BA68     		ldr	r2, [r7, #8]
 1466 0084 1A61     		str	r2, [r3, #16]
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* The right-hand side of the receive window. */
 691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
ARM GAS  /tmp/ccuG1sHT.s 			page 46


 1467              		.loc 2 691 0
 1468 0086 FB68     		ldr	r3, [r7, #12]
 1469 0088 BA68     		ldr	r2, [r7, #8]
 1470 008a 9A61     		str	r2, [r3, #24]
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 1471              		.loc 2 693 0
 1472 008c FB68     		ldr	r3, [r7, #12]
 1473 008e 7A68     		ldr	r2, [r7, #4]
 1474 0090 DA61     		str	r2, [r3, #28]
 694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* The segment asked for in next transmission. */
 696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 1475              		.loc 2 696 0
 1476 0092 FB68     		ldr	r3, [r7, #12]
 1477 0094 7A68     		ldr	r2, [r7, #4]
 1478 0096 1A62     		str	r2, [r3, #32]
 697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* The sequence number given to the next outgoing byte to be added is
 699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	maintained by lTCPWindowTxAdd(). */
 700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 1479              		.loc 2 700 0
 1480 0098 FB68     		ldr	r3, [r7, #12]
 1481 009a 7A68     		ldr	r2, [r7, #4]
 1482 009c 5A63     		str	r2, [r3, #52]
 701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	/* The right-hand side of the transmit window. */
 703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 1483              		.loc 2 703 0
 1484 009e FB68     		ldr	r3, [r7, #12]
 1485 00a0 7A68     		ldr	r2, [r7, #4]
 1486 00a2 9A62     		str	r2, [r3, #40]
 704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 1487              		.loc 2 704 0
 1488 00a4 FB68     		ldr	r3, [r7, #12]
 1489 00a6 7A68     		ldr	r2, [r7, #4]
 1490 00a8 DA62     		str	r2, [r3, #44]
 705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** }
 1491              		.loc 2 705 0
 1492 00aa 1C37     		adds	r7, r7, #28
 1493              	.LCFI107:
 1494              		.cfi_def_cfa_offset 4
 1495 00ac BD46     		mov	sp, r7
 1496              	.LCFI108:
 1497              		.cfi_def_cfa_register 13
 1498              		@ sp needed
 1499 00ae 5DF8047B 		ldr	r7, [sp], #4
 1500              	.LCFI109:
 1501              		.cfi_restore 7
 1502              		.cfi_def_cfa_offset 0
 1503 00b2 7047     		bx	lr
 1504              		.cfi_endproc
 1505              	.LFE46:
 1507              		.section	.text.xTCPWindowRxConfirm,"ax",%progbits
 1508              		.align	2
 1509              		.thumb
 1510              		.thumb_func
ARM GAS  /tmp/ccuG1sHT.s 			page 47


 1512              	xTCPWindowRxConfirm:
 1513              	.LFB47:
 706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*=============================================================================
 709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
 710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                ######        #    #
 711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                 #    #       #    #
 712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                 #    #       #    #
 713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                 #    #        ####
 714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                 ######         ##
 715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                 #  ##         ####
 716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                 #   #        #    #
 717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                 #    #       #    #
 718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                ###  ##       #    #
 719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Rx functions
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
 721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *=============================================================================*/
 722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static TCPSegment_t *xTCPWindowRxConfirm( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32
 726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 1514              		.loc 2 726 0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 40
 1517              		@ frame_needed = 1, uses_anonymous_args = 0
 1518 0000 80B5     		push	{r7, lr}
 1519              	.LCFI110:
 1520              		.cfi_def_cfa_offset 8
 1521              		.cfi_offset 7, -8
 1522              		.cfi_offset 14, -4
 1523 0002 8AB0     		sub	sp, sp, #40
 1524              	.LCFI111:
 1525              		.cfi_def_cfa_offset 48
 1526 0004 00AF     		add	r7, sp, #0
 1527              	.LCFI112:
 1528              		.cfi_def_cfa_register 7
 1529 0006 F860     		str	r0, [r7, #12]
 1530 0008 B960     		str	r1, [r7, #8]
 1531 000a 7A60     		str	r2, [r7, #4]
 727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxBest = NULL;
 1532              		.loc 2 727 0
 1533 000c 0023     		movs	r3, #0
 1534 000e 7B62     		str	r3, [r7, #36]
 728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	const ListItem_t *pxIterator;
 729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 1535              		.loc 2 729 0
 1536 0010 BA68     		ldr	r2, [r7, #8]
 1537 0012 7B68     		ldr	r3, [r7, #4]
 1538 0014 1344     		add	r3, r3, r2
 1539 0016 FB61     		str	r3, [r7, #28]
 730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments
 1540              		.loc 2 730 0
 1541 0018 FB68     		ldr	r3, [r7, #12]
 1542 001a AC33     		adds	r3, r3, #172
 1543 001c BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/ccuG1sHT.s 			page 48


 731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
 732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* A segment has been received with sequence number 'ulSequenceNumber',
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		where 'ulCurrentSequenceNumber == ulSequenceNumber', which means that
 735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		exactly this segment was expected.  xTCPWindowRxConfirm() will check if
 736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		there is already another segment with a sequence number between (ulSequenceNumber)
 737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		and (ulSequenceNumber+ulLength).  Normally none will be found, because
 738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		the next RX segment should have a sequence number equal to
 739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		'(ulSequenceNumber+ulLength)'. */
 740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Iterate through all RX segments that are stored: */
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 1544              		.loc 2 742 0
 1545 001e BB69     		ldr	r3, [r7, #24]
 1546 0020 5B68     		ldr	r3, [r3, #4]
 1547 0022 3B62     		str	r3, [r7, #32]
 1548 0024 27E0     		b	.L87
 1549              	.L90:
 743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 1550              		.loc 2 746 0
 1551 0026 3B6A     		ldr	r3, [r7, #32]
 1552 0028 DB68     		ldr	r3, [r3, #12]
 1553 002a 7B61     		str	r3, [r7, #20]
 747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* And see if there is a segment for which:
 748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
 749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			If there are more matching segments, the one with the lowest sequence number
 750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			shall be taken */
 751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 1554              		.loc 2 751 0
 1555 002c 7B69     		ldr	r3, [r7, #20]
 1556 002e 1B68     		ldr	r3, [r3]
 1557 0030 1846     		mov	r0, r3
 1558 0032 B968     		ldr	r1, [r7, #8]
 1559 0034 FFF7FEFF 		bl	xSequenceGreaterThanOrEqual
 1560 0038 0346     		mov	r3, r0
 1561 003a 002B     		cmp	r3, #0
 1562 003c 18D0     		beq	.L88
 752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 1563              		.loc 2 752 0 discriminator 1
 1564 003e 7B69     		ldr	r3, [r7, #20]
 1565 0040 1B68     		ldr	r3, [r3]
 1566 0042 1846     		mov	r0, r3
 1567 0044 F969     		ldr	r1, [r7, #28]
 1568 0046 FFF7FEFF 		bl	xSequenceLessThan
 1569 004a 0346     		mov	r3, r0
 751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 1570              		.loc 2 751 0 discriminator 1
 1571 004c 002B     		cmp	r3, #0
 1572 004e 0FD0     		beq	.L88
 753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceN
 1573              		.loc 2 754 0
 1574 0050 7B6A     		ldr	r3, [r7, #36]
 1575 0052 002B     		cmp	r3, #0
ARM GAS  /tmp/ccuG1sHT.s 			page 49


 1576 0054 0AD0     		beq	.L89
 1577              		.loc 2 754 0 is_stmt 0 discriminator 1
 1578 0056 7B69     		ldr	r3, [r7, #20]
 1579 0058 1A68     		ldr	r2, [r3]
 1580 005a 7B6A     		ldr	r3, [r7, #36]
 1581 005c 1B68     		ldr	r3, [r3]
 1582 005e 1046     		mov	r0, r2
 1583 0060 1946     		mov	r1, r3
 1584 0062 FFF7FEFF 		bl	xSequenceLessThan
 1585 0066 0346     		mov	r3, r0
 1586 0068 002B     		cmp	r3, #0
 1587 006a 01D0     		beq	.L88
 1588              	.L89:
 755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxBest = pxSegment;
 1589              		.loc 2 756 0 is_stmt 1
 1590 006c 7B69     		ldr	r3, [r7, #20]
 1591 006e 7B62     		str	r3, [r7, #36]
 1592              	.L88:
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 1593              		.loc 2 744 0
 1594 0070 3B6A     		ldr	r3, [r7, #32]
 1595 0072 5B68     		ldr	r3, [r3, #4]
 1596 0074 3B62     		str	r3, [r7, #32]
 1597              	.L87:
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
 1598              		.loc 2 742 0 discriminator 1
 1599 0076 3A6A     		ldr	r2, [r7, #32]
 1600 0078 BB69     		ldr	r3, [r7, #24]
 1601 007a 9A42     		cmp	r2, r3
 1602 007c D3D1     		bne	.L90
 757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
 758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( ( pxBest != NULL ) &&
 1603              		.loc 2 761 0
 1604 007e 7B6A     		ldr	r3, [r7, #36]
 1605 0080 002B     		cmp	r3, #0
 1606 0082 03D0     		beq	.L91
 762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLen
 1607              		.loc 2 762 0 discriminator 1
 1608 0084 7B6A     		ldr	r3, [r7, #36]
 1609 0086 1A68     		ldr	r2, [r3]
 761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLen
 1610              		.loc 2 761 0 discriminator 1
 1611 0088 BB68     		ldr	r3, [r7, #8]
 1612 008a 9A42     		cmp	r2, r3
 1613              	.L91:
 763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			FreeRTOS_flush_logging();
 765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n"
 766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->usPeerPortNumber,
 767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
 768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulLength,
 769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulSequenceNumber + ulLength - pxWindow->rx.ulFirstSequenceNumber,
 770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
ARM GAS  /tmp/ccuG1sHT.s 			page 50


 771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxBest->lDataLength,
 772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceN
 773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return pxBest;
 1614              		.loc 2 775 0
 1615 008c 7B6A     		ldr	r3, [r7, #36]
 776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 1616              		.loc 2 776 0
 1617 008e 1846     		mov	r0, r3
 1618 0090 2837     		adds	r7, r7, #40
 1619              	.LCFI113:
 1620              		.cfi_def_cfa_offset 8
 1621 0092 BD46     		mov	sp, r7
 1622              	.LCFI114:
 1623              		.cfi_def_cfa_register 13
 1624              		@ sp needed
 1625 0094 80BD     		pop	{r7, pc}
 1626              		.cfi_endproc
 1627              	.LFE47:
 1629 0096 00BF     		.section	.text.lTCPWindowRxCheck,"ax",%progbits
 1630              		.align	2
 1631              		.global	lTCPWindowRxCheck
 1632              		.thumb
 1633              		.thumb_func
 1635              	lTCPWindowRxCheck:
 1636              	.LFB48:
 777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfgiUSE_TCP_WIN == 1 */
 779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
 782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	int32_t lTCPWindowRxCheck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, ui
 784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 1637              		.loc 2 784 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 40
 1640              		@ frame_needed = 1, uses_anonymous_args = 0
 1641 0000 80B5     		push	{r7, lr}
 1642              	.LCFI115:
 1643              		.cfi_def_cfa_offset 8
 1644              		.cfi_offset 7, -8
 1645              		.cfi_offset 14, -4
 1646 0002 8AB0     		sub	sp, sp, #40
 1647              	.LCFI116:
 1648              		.cfi_def_cfa_offset 48
 1649 0004 00AF     		add	r7, sp, #0
 1650              	.LCFI117:
 1651              		.cfi_def_cfa_register 7
 1652 0006 F860     		str	r0, [r7, #12]
 1653 0008 B960     		str	r1, [r7, #8]
 1654 000a 7A60     		str	r2, [r7, #4]
 1655 000c 3B60     		str	r3, [r7]
 785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber;
 786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	int32_t lReturn, lDistance;
 787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxFound;
ARM GAS  /tmp/ccuG1sHT.s 			page 51


 788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* If lTCPWindowRxCheck( ) returns == 0, the packet will be passed
 790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		directly to user (segment is expected).  If it returns a positive
 791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		number, an earlier packet is missing, but this packet may be stored.
 792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		If negative, the packet has already been stored, or it is out-of-order,
 793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		or there is not enough space.
 794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
 796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if more Rx data may be passed to the user after this packet. */
 797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 1656              		.loc 2 798 0
 1657 000e FB68     		ldr	r3, [r7, #12]
 1658 0010 1B69     		ldr	r3, [r3, #16]
 1659 0012 7B62     		str	r3, [r7, #36]
 799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* For Selective Ack (SACK), used when out-of-sequence data come in. */
 801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxWindow->ucOptionLength = 0u;
 1660              		.loc 2 801 0
 1661 0014 FB68     		ldr	r3, [r7, #12]
 1662 0016 0022     		movs	r2, #0
 1663 0018 83F83C20 		strb	r2, [r3, #60]
 802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Non-zero if TCP-windows contains data which must be popped. */
 804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxWindow->ulUserDataLength = 0ul;
 1664              		.loc 2 804 0
 1665 001c FB68     		ldr	r3, [r7, #12]
 1666 001e 0022     		movs	r2, #0
 1667 0020 1A63     		str	r2, [r3, #48]
 805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( ulCurrentSequenceNumber == ulSequenceNumber )
 1668              		.loc 2 806 0
 1669 0022 7A6A     		ldr	r2, [r7, #36]
 1670 0024 BB68     		ldr	r3, [r7, #8]
 1671 0026 9A42     		cmp	r2, r3
 1672 0028 45D1     		bne	.L94
 807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* This is the packet with the lowest sequence number we're waiting
 809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			for.  It can be passed directly to the rx stream. */
 810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( ulLength > ulSpace )
 1673              		.loc 2 810 0
 1674 002a 7A68     		ldr	r2, [r7, #4]
 1675 002c 3B68     		ldr	r3, [r7]
 1676 002e 9A42     		cmp	r2, r3
 1677 0030 03D9     		bls	.L95
 811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", u
 813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				lReturn = -1;
 1678              		.loc 2 813 0
 1679 0032 4FF0FF33 		mov	r3, #-1
 1680 0036 FB61     		str	r3, [r7, #28]
 1681 0038 BBE0     		b	.L101
 1682              	.L95:
 814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			else
 816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulCurrentSequenceNumber += ulLength;
ARM GAS  /tmp/ccuG1sHT.s 			page 52


 1683              		.loc 2 817 0
 1684 003a 7A6A     		ldr	r2, [r7, #36]
 1685 003c 7B68     		ldr	r3, [r7, #4]
 1686 003e 1344     		add	r3, r3, r2
 1687 0040 7B62     		str	r3, [r7, #36]
 818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 1688              		.loc 2 819 0
 1689 0042 FB68     		ldr	r3, [r7, #12]
 1690 0044 D3F8A430 		ldr	r3, [r3, #164]
 1691 0048 002B     		cmp	r3, #0
 1692 004a 2ED0     		beq	.L97
 820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					ulSavedSequenceNumber = ulCurrentSequenceNumber;
 1693              		.loc 2 821 0
 1694 004c 7B6A     		ldr	r3, [r7, #36]
 1695 004e BB61     		str	r3, [r7, #24]
 822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* See if (part of) this segment has been stored already,
 824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					but this rarely happens. */
 825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 1696              		.loc 2 825 0
 1697 0050 F868     		ldr	r0, [r7, #12]
 1698 0052 B968     		ldr	r1, [r7, #8]
 1699 0054 7A68     		ldr	r2, [r7, #4]
 1700 0056 FFF7FEFF 		bl	xTCPWindowRxConfirm
 1701 005a 7861     		str	r0, [r7, #20]
 826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( pxFound != NULL )
 1702              		.loc 2 826 0
 1703 005c 7B69     		ldr	r3, [r7, #20]
 1704 005e 002B     		cmp	r3, #0
 1705 0060 08D0     		beq	.L98
 827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
 828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						ulCurrentSequenceNumber = pxFound->ulSequenceNumber + ( ( uint32_t ) pxFound->lDataLength );
 1706              		.loc 2 828 0
 1707 0062 7B69     		ldr	r3, [r7, #20]
 1708 0064 1B68     		ldr	r3, [r3]
 1709 0066 7A69     		ldr	r2, [r7, #20]
 1710 0068 9268     		ldr	r2, [r2, #8]
 1711 006a 1344     		add	r3, r3, r2
 1712 006c 7B62     		str	r3, [r7, #36]
 829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/* Remove it because it will be passed to user directly. */
 831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						vTCPWindowFree( pxFound );
 1713              		.loc 2 831 0
 1714 006e 7869     		ldr	r0, [r7, #20]
 1715 0070 FFF7FEFF 		bl	vTCPWindowFree
 1716              	.L98:
 832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
 833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/*  Check for following segments that are already in the
 835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					queue and increment ulCurrentSequenceNumber. */
 836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 1717              		.loc 2 836 0
 1718 0074 08E0     		b	.L99
 1719              	.L100:
 837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
ARM GAS  /tmp/ccuG1sHT.s 			page 53


 838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 1720              		.loc 2 838 0
 1721 0076 7B69     		ldr	r3, [r7, #20]
 1722 0078 9B68     		ldr	r3, [r3, #8]
 1723 007a 1A46     		mov	r2, r3
 1724 007c 7B6A     		ldr	r3, [r7, #36]
 1725 007e 1344     		add	r3, r3, r2
 1726 0080 7B62     		str	r3, [r7, #36]
 839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/* As all packet below this one have been passed to the
 841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						user it can be discarded. */
 842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						vTCPWindowFree( pxFound );
 1727              		.loc 2 842 0
 1728 0082 7869     		ldr	r0, [r7, #20]
 1729 0084 FFF7FEFF 		bl	vTCPWindowFree
 1730              	.L99:
 836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
 1731              		.loc 2 836 0
 1732 0088 F868     		ldr	r0, [r7, #12]
 1733 008a 796A     		ldr	r1, [r7, #36]
 1734 008c FFF7FEFF 		bl	xTCPWindowRxFind
 1735 0090 7861     		str	r0, [r7, #20]
 1736 0092 7B69     		ldr	r3, [r7, #20]
 1737 0094 002B     		cmp	r3, #0
 1738 0096 EED1     		bne	.L100
 843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
 844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 1739              		.loc 2 845 0
 1740 0098 BA69     		ldr	r2, [r7, #24]
 1741 009a 7B6A     		ldr	r3, [r7, #36]
 1742 009c 9A42     		cmp	r2, r3
 1743 009e 04D0     		beq	.L97
 846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
 847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/*  After the current data-package, there is more data
 848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						to be popped. */
 849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 1744              		.loc 2 849 0
 1745 00a0 7A6A     		ldr	r2, [r7, #36]
 1746 00a2 BB69     		ldr	r3, [r7, #24]
 1747 00a4 D21A     		subs	r2, r2, r3
 1748 00a6 FB68     		ldr	r3, [r7, #12]
 1749 00a8 1A63     		str	r2, [r3, #48]
 1750              	.L97:
 850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						if( xTCPWindowLoggingLevel >= 1 )
 852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						{
 853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %
 854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 								pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
 855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 								ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
 856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 								pxWindow->ulUserDataLength,
 857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 								ulSavedSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
 858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
 859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						}
 860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
 861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
 862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
ARM GAS  /tmp/ccuG1sHT.s 			page 54


 863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 1751              		.loc 2 863 0
 1752 00aa FB68     		ldr	r3, [r7, #12]
 1753 00ac 7A6A     		ldr	r2, [r7, #36]
 1754 00ae 1A61     		str	r2, [r3, #16]
 864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Packet was expected, may be passed directly to the socket
 866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				buffer or application.  Store the packet at offset 0. */
 867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				lReturn = 0;
 1755              		.loc 2 867 0
 1756 00b0 0023     		movs	r3, #0
 1757 00b2 FB61     		str	r3, [r7, #28]
 1758 00b4 7DE0     		b	.L101
 1759              	.L94:
 868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 1760              		.loc 2 870 0
 1761 00b6 BB68     		ldr	r3, [r7, #8]
 1762 00b8 5A1C     		adds	r2, r3, #1
 1763 00ba 7B6A     		ldr	r3, [r7, #36]
 1764 00bc 9A42     		cmp	r2, r3
 1765 00be 03D1     		bne	.L102
 871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Looks like a TCP keep-alive message.  Do not accept/store Rx data
 873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
 874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			lReturn = -1;
 1766              		.loc 2 874 0
 1767 00c0 4FF0FF33 		mov	r3, #-1
 1768 00c4 FB61     		str	r3, [r7, #28]
 1769 00c6 74E0     		b	.L101
 1770              	.L102:
 875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
 877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* The packet is not the one expected.  See if it falls within the Rx
 879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			window so it can be stored. */
 880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/*  An "out-of-sequence" segment was received, must have missed one.
 882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			Prepare a SACK (Selective ACK). */
 883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulLast = ulSequenceNumber + ulLength;
 1771              		.loc 2 883 0
 1772 00c8 BA68     		ldr	r2, [r7, #8]
 1773 00ca 7B68     		ldr	r3, [r7, #4]
 1774 00cc 1344     		add	r3, r3, r2
 1775 00ce 3B62     		str	r3, [r7, #32]
 884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 1776              		.loc 2 884 0
 1777 00d0 3A6A     		ldr	r2, [r7, #32]
 1778 00d2 7B6A     		ldr	r3, [r7, #36]
 1779 00d4 D31A     		subs	r3, r2, r3
 1780 00d6 3B61     		str	r3, [r7, #16]
 885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( lDistance <= 0 )
 1781              		.loc 2 886 0
 1782 00d8 3B69     		ldr	r3, [r7, #16]
 1783 00da 002B     		cmp	r3, #0
ARM GAS  /tmp/ccuG1sHT.s 			page 55


 1784 00dc 03DC     		bgt	.L103
 887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* An earlier has been received, must be a retransmission of a
 889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				packet that has been accepted already.  No need to send out a
 890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				Selective ACK (SACK). */
 891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				lReturn = -1;
 1785              		.loc 2 891 0
 1786 00de 4FF0FF33 		mov	r3, #-1
 1787 00e2 FB61     		str	r3, [r7, #28]
 1788 00e4 65E0     		b	.L101
 1789              	.L103:
 892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			else if( lDistance > ( int32_t ) ulSpace )
 1790              		.loc 2 893 0
 1791 00e6 3A68     		ldr	r2, [r7]
 1792 00e8 3B69     		ldr	r3, [r7, #16]
 1793 00ea 9A42     		cmp	r2, r3
 1794 00ec 03DA     		bge	.L104
 894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
 896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				sequence number of this packet is too far ahead, ignore it. */
 897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n
 898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				lReturn = -1;
 1795              		.loc 2 898 0
 1796 00ee 4FF0FF33 		mov	r3, #-1
 1797 00f2 FB61     		str	r3, [r7, #28]
 1798 00f4 5DE0     		b	.L101
 1799              	.L104:
 899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			else
 901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
 902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* See if there is more data in a contiguous block to make the
 903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				SACK describe a longer range of data. */
 904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* TODO: SACK's may also be delayed for a short period
 906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				 * This is useful because subsequent packets will be SACK'd with
 907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				 * single one message
 908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				 */
 909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 1800              		.loc 2 909 0
 1801 00f6 05E0     		b	.L105
 1802              	.L106:
 910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					ulLast += ( uint32_t ) pxFound->lDataLength;
 1803              		.loc 2 911 0
 1804 00f8 7B69     		ldr	r3, [r7, #20]
 1805 00fa 9B68     		ldr	r3, [r3, #8]
 1806 00fc 1A46     		mov	r2, r3
 1807 00fe 3B6A     		ldr	r3, [r7, #32]
 1808 0100 1344     		add	r3, r3, r2
 1809 0102 3B62     		str	r3, [r7, #32]
 1810              	.L105:
 909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 1811              		.loc 2 909 0
 1812 0104 F868     		ldr	r0, [r7, #12]
 1813 0106 396A     		ldr	r1, [r7, #32]
 1814 0108 FFF7FEFF 		bl	xTCPWindowRxFind
ARM GAS  /tmp/ccuG1sHT.s 			page 56


 1815 010c 7861     		str	r0, [r7, #20]
 1816 010e 7B69     		ldr	r3, [r7, #20]
 1817 0110 002B     		cmp	r3, #0
 1818 0112 F1D1     		bne	.L106
 912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
 913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( xTCPWindowLoggingLevel >= 1 )
 915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %lu exp %lu (dist %ld) SACK to %lu\n
 917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
 918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
 919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
 920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						( BaseType_t ) ( ulSequenceNumber - ulCurrentSequenceNumber ),	/* want this signed */
 921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						ulLast - pxWindow->rx.ulFirstSequenceNumber ) );
 922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
 923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Now prepare the SACK message.
 925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				Code OPTION_CODE_SINGLE_SACK already in network byte order. */
 926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 1819              		.loc 2 926 0
 1820 0114 FB68     		ldr	r3, [r7, #12]
 1821 0116 294A     		ldr	r2, .L110
 1822 0118 C3F88020 		str	r2, [r3, #128]
 927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* First sequence number that we received. */
 929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 1823              		.loc 2 929 0
 1824 011c BB68     		ldr	r3, [r7, #8]
 1825 011e 1A06     		lsls	r2, r3, #24
 1826 0120 BB68     		ldr	r3, [r7, #8]
 1827 0122 03F47F43 		and	r3, r3, #65280
 1828 0126 1B02     		lsls	r3, r3, #8
 1829 0128 1A43     		orrs	r2, r2, r3
 1830 012a BB68     		ldr	r3, [r7, #8]
 1831 012c 03F47F03 		and	r3, r3, #16711680
 1832 0130 1B0A     		lsrs	r3, r3, #8
 1833 0132 1A43     		orrs	r2, r2, r3
 1834 0134 BB68     		ldr	r3, [r7, #8]
 1835 0136 1B0E     		lsrs	r3, r3, #24
 1836 0138 1A43     		orrs	r2, r2, r3
 1837 013a FB68     		ldr	r3, [r7, #12]
 1838 013c C3F88420 		str	r2, [r3, #132]
 930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Last + 1 */
 932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 1839              		.loc 2 932 0
 1840 0140 3B6A     		ldr	r3, [r7, #32]
 1841 0142 1A06     		lsls	r2, r3, #24
 1842 0144 3B6A     		ldr	r3, [r7, #32]
 1843 0146 03F47F43 		and	r3, r3, #65280
 1844 014a 1B02     		lsls	r3, r3, #8
 1845 014c 1A43     		orrs	r2, r2, r3
 1846 014e 3B6A     		ldr	r3, [r7, #32]
 1847 0150 03F47F03 		and	r3, r3, #16711680
 1848 0154 1B0A     		lsrs	r3, r3, #8
 1849 0156 1A43     		orrs	r2, r2, r3
 1850 0158 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccuG1sHT.s 			page 57


 1851 015a 1B0E     		lsrs	r3, r3, #24
 1852 015c 1A43     		orrs	r2, r2, r3
 1853 015e FB68     		ldr	r3, [r7, #12]
 1854 0160 C3F88820 		str	r2, [r3, #136]
 933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Which make 12 (3*4) option bytes. */
 935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 1855              		.loc 2 935 0
 1856 0164 FB68     		ldr	r3, [r7, #12]
 1857 0166 0C22     		movs	r2, #12
 1858 0168 83F83C20 		strb	r2, [r3, #60]
 936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 1859              		.loc 2 937 0
 1860 016c F868     		ldr	r0, [r7, #12]
 1861 016e B968     		ldr	r1, [r7, #8]
 1862 0170 FFF7FEFF 		bl	xTCPWindowRxFind
 1863 0174 7861     		str	r0, [r7, #20]
 938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( pxFound != NULL )
 1864              		.loc 2 939 0
 1865 0176 7B69     		ldr	r3, [r7, #20]
 1866 0178 002B     		cmp	r3, #0
 1867 017a 03D0     		beq	.L107
 940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* This out-of-sequence packet has been received for a
 942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					second time.  It is already stored but do send a SACK
 943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					again. */
 944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					lReturn = -1;
 1868              		.loc 2 944 0
 1869 017c 4FF0FF33 		mov	r3, #-1
 1870 0180 FB61     		str	r3, [r7, #28]
 1871 0182 16E0     		b	.L101
 1872              	.L107:
 945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
 946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else
 947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
 948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 1873              		.loc 2 948 0
 1874 0184 7B68     		ldr	r3, [r7, #4]
 1875 0186 F868     		ldr	r0, [r7, #12]
 1876 0188 B968     		ldr	r1, [r7, #8]
 1877 018a 1A46     		mov	r2, r3
 1878 018c 0123     		movs	r3, #1
 1879 018e FFF7FEFF 		bl	xTCPWindowNew
 1880 0192 7861     		str	r0, [r7, #20]
 949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( pxFound == NULL )
 1881              		.loc 2 950 0
 1882 0194 7B69     		ldr	r3, [r7, #20]
 1883 0196 002B     		cmp	r3, #0
 1884 0198 07D1     		bne	.L108
 951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
 952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/* Can not send a SACK, because the segment cannot be
 953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						stored. */
 954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->ucOptionLength = 0u;
 1885              		.loc 2 954 0
ARM GAS  /tmp/ccuG1sHT.s 			page 58


 1886 019a FB68     		ldr	r3, [r7, #12]
 1887 019c 0022     		movs	r2, #0
 1888 019e 83F83C20 		strb	r2, [r3, #60]
 955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/* Needs to be stored but there is no segment
 957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						available. */
 958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						lReturn = -1;
 1889              		.loc 2 958 0
 1890 01a2 4FF0FF33 		mov	r3, #-1
 1891 01a6 FB61     		str	r3, [r7, #28]
 1892 01a8 03E0     		b	.L101
 1893              	.L108:
 959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
 960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					else
 961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
 962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						if( xTCPWindowLoggingLevel != 0 )
 963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						{
 964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %lu (cnt %lu)\n",
 965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 								pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber, ulSequenceNumber - pxWindow->rx.ulFi
 966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
 967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							FreeRTOS_flush_logging( );
 968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						}
 969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/* Return a positive value.  The packet may be accepted
 971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						and stored but an earlier packet is still missing. */
 972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 1894              		.loc 2 972 0
 1895 01aa BA68     		ldr	r2, [r7, #8]
 1896 01ac 7B6A     		ldr	r3, [r7, #36]
 1897 01ae D31A     		subs	r3, r2, r3
 1898 01b0 FB61     		str	r3, [r7, #28]
 1899              	.L101:
 973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
 974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
 975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
 976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
 977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return lReturn;
 1900              		.loc 2 978 0
 1901 01b2 FB69     		ldr	r3, [r7, #28]
 979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 1902              		.loc 2 979 0
 1903 01b4 1846     		mov	r0, r3
 1904 01b6 2837     		adds	r7, r7, #40
 1905              	.LCFI118:
 1906              		.cfi_def_cfa_offset 8
 1907 01b8 BD46     		mov	sp, r7
 1908              	.LCFI119:
 1909              		.cfi_def_cfa_register 13
 1910              		@ sp needed
 1911 01ba 80BD     		pop	{r7, pc}
 1912              	.L111:
 1913              		.align	2
 1914              	.L110:
 1915 01bc 0101050A 		.word	168100097
 1916              		.cfi_endproc
 1917              	.LFE48:
ARM GAS  /tmp/ccuG1sHT.s 			page 59


 1919              		.section	.text.lTCPIncrementTxPosition,"ax",%progbits
 1920              		.align	2
 1921              		.thumb
 1922              		.thumb_func
 1924              	lTCPIncrementTxPosition:
 1925              	.LFB49:
 980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfgiUSE_TCP_WIN == 1 */
 982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
 983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
 984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*=============================================================================
 985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
 986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                    #########   #    #
 987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                    #   #   #   #    #
 988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                        #       #    #
 989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                        #        ####
 990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                        #         ##
 991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                        #        ####
 992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                        #       #    #
 993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                        #       #    #
 994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *                      #####     #    #
 995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
 996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  * Tx functions
 997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *
 998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c ****  *=============================================================================*/
 999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount )
1003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 1926              		.loc 2 1003 0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 16
 1929              		@ frame_needed = 1, uses_anonymous_args = 0
 1930              		@ link register save eliminated.
 1931 0000 80B4     		push	{r7}
 1932              	.LCFI120:
 1933              		.cfi_def_cfa_offset 4
 1934              		.cfi_offset 7, -4
 1935 0002 85B0     		sub	sp, sp, #20
 1936              	.LCFI121:
 1937              		.cfi_def_cfa_offset 24
 1938 0004 00AF     		add	r7, sp, #0
 1939              	.LCFI122:
 1940              		.cfi_def_cfa_register 7
 1941 0006 F860     		str	r0, [r7, #12]
 1942 0008 B960     		str	r1, [r7, #8]
 1943 000a 7A60     		str	r2, [r7, #4]
1004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* +TCP stores data in circular buffers.  Calculate the next position to
1005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		store. */
1006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		lPosition += lCount;
 1944              		.loc 2 1006 0
 1945 000c FA68     		ldr	r2, [r7, #12]
 1946 000e 7B68     		ldr	r3, [r7, #4]
 1947 0010 1344     		add	r3, r3, r2
 1948 0012 FB60     		str	r3, [r7, #12]
1007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( lPosition >= lMax )
ARM GAS  /tmp/ccuG1sHT.s 			page 60


 1949              		.loc 2 1007 0
 1950 0014 FA68     		ldr	r2, [r7, #12]
 1951 0016 BB68     		ldr	r3, [r7, #8]
 1952 0018 9A42     		cmp	r2, r3
 1953 001a 03DB     		blt	.L113
1008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			lPosition -= lMax;
 1954              		.loc 2 1009 0
 1955 001c FA68     		ldr	r2, [r7, #12]
 1956 001e BB68     		ldr	r3, [r7, #8]
 1957 0020 D31A     		subs	r3, r2, r3
 1958 0022 FB60     		str	r3, [r7, #12]
 1959              	.L113:
1010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return lPosition;
 1960              		.loc 2 1012 0
 1961 0024 FB68     		ldr	r3, [r7, #12]
1013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 1962              		.loc 2 1013 0
 1963 0026 1846     		mov	r0, r3
 1964 0028 1437     		adds	r7, r7, #20
 1965              	.LCFI123:
 1966              		.cfi_def_cfa_offset 4
 1967 002a BD46     		mov	sp, r7
 1968              	.LCFI124:
 1969              		.cfi_def_cfa_register 13
 1970              		@ sp needed
 1971 002c 5DF8047B 		ldr	r7, [sp], #4
 1972              	.LCFI125:
 1973              		.cfi_restore 7
 1974              		.cfi_def_cfa_offset 0
 1975 0030 7047     		bx	lr
 1976              		.cfi_endproc
 1977              	.LFE49:
 1979 0032 00BF     		.section	.text.lTCPWindowTxAdd,"ax",%progbits
 1980              		.align	2
 1981              		.global	lTCPWindowTxAdd
 1982              		.thumb
 1983              		.thumb_func
 1985              	lTCPWindowTxAdd:
 1986              	.LFB50:
1014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	int32_t lTCPWindowTxAdd( TCPWindow_t *pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax
1021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 1987              		.loc 2 1021 0
 1988              		.cfi_startproc
 1989              		@ args = 0, pretend = 0, frame = 32
 1990              		@ frame_needed = 1, uses_anonymous_args = 0
 1991 0000 80B5     		push	{r7, lr}
 1992              	.LCFI126:
 1993              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccuG1sHT.s 			page 61


 1994              		.cfi_offset 7, -8
 1995              		.cfi_offset 14, -4
 1996 0002 88B0     		sub	sp, sp, #32
 1997              	.LCFI127:
 1998              		.cfi_def_cfa_offset 40
 1999 0004 00AF     		add	r7, sp, #0
 2000              	.LCFI128:
 2001              		.cfi_def_cfa_register 7
 2002 0006 F860     		str	r0, [r7, #12]
 2003 0008 B960     		str	r1, [r7, #8]
 2004 000a 7A60     		str	r2, [r7, #4]
 2005 000c 3B60     		str	r3, [r7]
1022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 2006              		.loc 2 1022 0
 2007 000e BB68     		ldr	r3, [r7, #8]
 2008 0010 FB61     		str	r3, [r7, #28]
1023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	int32_t lDone = 0;
 2009              		.loc 2 1023 0
 2010 0012 0023     		movs	r3, #0
 2011 0014 BB61     		str	r3, [r7, #24]
1024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 2012              		.loc 2 1024 0
 2013 0016 FB68     		ldr	r3, [r7, #12]
 2014 0018 DB6F     		ldr	r3, [r3, #124]
 2015 001a 7B61     		str	r3, [r7, #20]
1025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Puts a message in the Tx-window (after buffer size has been
1027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		verified). */
1028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( pxSegment != NULL )
 2016              		.loc 2 1028 0
 2017 001c 7B69     		ldr	r3, [r7, #20]
 2018 001e 002B     		cmp	r3, #0
 2019 0020 40D0     		beq	.L116
1029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 2020              		.loc 2 1030 0
 2021 0022 7B69     		ldr	r3, [r7, #20]
 2022 0024 9A68     		ldr	r2, [r3, #8]
 2023 0026 7B69     		ldr	r3, [r7, #20]
 2024 0028 5B68     		ldr	r3, [r3, #4]
 2025 002a 9A42     		cmp	r2, r3
 2026 002c 3ADA     		bge	.L116
1031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 2027              		.loc 2 1032 0
 2028 002e 7B69     		ldr	r3, [r7, #20]
 2029 0030 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2030 0032 03F00103 		and	r3, r3, #1
 2031 0036 DBB2     		uxtb	r3, r3
 2032 0038 002B     		cmp	r3, #0
 2033 003a 33D1     		bne	.L116
 2034              		.loc 2 1032 0 is_stmt 0 discriminator 1
 2035 003c 7B69     		ldr	r3, [r7, #20]
 2036 003e 9B68     		ldr	r3, [r3, #8]
 2037 0040 002B     		cmp	r3, #0
 2038 0042 2FD0     		beq	.L116
1033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
ARM GAS  /tmp/ccuG1sHT.s 			page 62


1034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Adding data to a segment that was already in the TX queue.  It
1035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					will be filled-up to a maximum of MSS (maximum segment size). */
1036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 2039              		.loc 2 1036 0 is_stmt 1
 2040 0044 7B69     		ldr	r3, [r7, #20]
 2041 0046 5A68     		ldr	r2, [r3, #4]
 2042 0048 7B69     		ldr	r3, [r7, #20]
 2043 004a 9B68     		ldr	r3, [r3, #8]
 2044 004c D31A     		subs	r3, r2, r3
 2045 004e F869     		ldr	r0, [r7, #28]
 2046 0050 1946     		mov	r1, r3
 2047 0052 FFF7FEFF 		bl	FreeRTOS_min_int32
 2048 0056 3861     		str	r0, [r7, #16]
1037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxSegment->lDataLength += lToWrite;
 2049              		.loc 2 1038 0
 2050 0058 7B69     		ldr	r3, [r7, #20]
 2051 005a 9A68     		ldr	r2, [r3, #8]
 2052 005c 3B69     		ldr	r3, [r7, #16]
 2053 005e 1A44     		add	r2, r2, r3
 2054 0060 7B69     		ldr	r3, [r7, #20]
 2055 0062 9A60     		str	r2, [r3, #8]
1039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 2056              		.loc 2 1040 0
 2057 0064 7B69     		ldr	r3, [r7, #20]
 2058 0066 9A68     		ldr	r2, [r3, #8]
 2059 0068 7B69     		ldr	r3, [r7, #20]
 2060 006a 5B68     		ldr	r3, [r3, #4]
 2061 006c 9A42     		cmp	r2, r3
 2062 006e 02DB     		blt	.L117
1041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/* This segment is full, don't add more bytes. */
1043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->pxHeadSegment = NULL;
 2063              		.loc 2 1043 0
 2064 0070 FB68     		ldr	r3, [r7, #12]
 2065 0072 0022     		movs	r2, #0
 2066 0074 DA67     		str	r2, [r3, #124]
 2067              	.L117:
1044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					lBytesLeft -= lToWrite;
 2068              		.loc 2 1046 0
 2069 0076 FA69     		ldr	r2, [r7, #28]
 2070 0078 3B69     		ldr	r3, [r7, #16]
 2071 007a D31A     		subs	r3, r2, r3
 2072 007c FB61     		str	r3, [r7, #28]
1047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* ulNextTxSequenceNumber is the sequence number of the next byte to
1049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					be stored for transmission. */
1050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 2073              		.loc 2 1050 0
 2074 007e FB68     		ldr	r3, [r7, #12]
 2075 0080 5A6B     		ldr	r2, [r3, #52]
 2076 0082 3B69     		ldr	r3, [r7, #16]
 2077 0084 1A44     		add	r2, r2, r3
 2078 0086 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccuG1sHT.s 			page 63


 2079 0088 5A63     		str	r2, [r3, #52]
1051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Increased the return value. */
1053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					lDone += lToWrite;
 2080              		.loc 2 1053 0
 2081 008a BA69     		ldr	r2, [r7, #24]
 2082 008c 3B69     		ldr	r3, [r7, #16]
 2083 008e 1344     		add	r3, r3, r2
 2084 0090 BB61     		str	r3, [r7, #24]
1054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Some detailed logging, for those who're interested. */
1056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber )
 2085              		.loc 2 1056 0
 2086 0092 334B     		ldr	r3, .L126
 2087 0094 1B68     		ldr	r3, [r3]
 2088 0096 012B     		cmp	r3, #1
1057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4lu bytes for seqNr %lu len %4lu (nxt %lu) po
1059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							ulLength,
1060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber,
1061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->lDataLength,
1062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber,
1063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->lStreamPos ) );
1064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_flush_logging( );
1065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Calculate the next position in the circular data buffer, knowing
1068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					its maximum length 'lMax'. */
1069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 2089              		.loc 2 1069 0
 2090 0098 7868     		ldr	r0, [r7, #4]
 2091 009a 3968     		ldr	r1, [r7]
 2092 009c 3A69     		ldr	r2, [r7, #16]
 2093 009e FFF7FEFF 		bl	lTCPIncrementTxPosition
 2094 00a2 7860     		str	r0, [r7, #4]
 2095              	.L116:
1070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		while( lBytesLeft > 0 )
 2096              		.loc 2 1074 0
 2097 00a4 53E0     		b	.L119
 2098              	.L124:
1075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* The current transmission segment is full, create new segments as
1077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			needed. */
1078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 2099              		.loc 2 1078 0
 2100 00a6 FB68     		ldr	r3, [r7, #12]
 2101 00a8 5A6B     		ldr	r2, [r3, #52]
 2102 00aa FB68     		ldr	r3, [r7, #12]
 2103 00ac B3F8BC30 		ldrh	r3, [r3, #188]
 2104 00b0 F868     		ldr	r0, [r7, #12]
 2105 00b2 1146     		mov	r1, r2
 2106 00b4 1A46     		mov	r2, r3
 2107 00b6 0023     		movs	r3, #0
ARM GAS  /tmp/ccuG1sHT.s 			page 64


 2108 00b8 FFF7FEFF 		bl	xTCPWindowNew
 2109 00bc 7861     		str	r0, [r7, #20]
1079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxSegment != NULL )
 2110              		.loc 2 1080 0
 2111 00be 7B69     		ldr	r3, [r7, #20]
 2112 00c0 002B     		cmp	r3, #0
 2113 00c2 43D0     		beq	.L120
1081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Store as many as needed, but no more than the maximum
1083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				(MSS). */
1084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 2114              		.loc 2 1084 0
 2115 00c4 7B69     		ldr	r3, [r7, #20]
 2116 00c6 5B68     		ldr	r3, [r3, #4]
 2117 00c8 F869     		ldr	r0, [r7, #28]
 2118 00ca 1946     		mov	r1, r3
 2119 00cc FFF7FEFF 		bl	FreeRTOS_min_int32
 2120 00d0 3861     		str	r0, [r7, #16]
1085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxSegment->lDataLength = lToWrite;
 2121              		.loc 2 1086 0
 2122 00d2 7B69     		ldr	r3, [r7, #20]
 2123 00d4 3A69     		ldr	r2, [r7, #16]
 2124 00d6 9A60     		str	r2, [r3, #8]
1087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxSegment->lStreamPos = lPosition;
 2125              		.loc 2 1087 0
 2126 00d8 7B69     		ldr	r3, [r7, #20]
 2127 00da 7A68     		ldr	r2, [r7, #4]
 2128 00dc DA60     		str	r2, [r3, #12]
1088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				lBytesLeft -= lToWrite;
 2129              		.loc 2 1088 0
 2130 00de FA69     		ldr	r2, [r7, #28]
 2131 00e0 3B69     		ldr	r3, [r7, #16]
 2132 00e2 D31A     		subs	r3, r2, r3
 2133 00e4 FB61     		str	r3, [r7, #28]
1089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 2134              		.loc 2 1089 0
 2135 00e6 7868     		ldr	r0, [r7, #4]
 2136 00e8 3968     		ldr	r1, [r7]
 2137 00ea 3A69     		ldr	r2, [r7, #16]
 2138 00ec FFF7FEFF 		bl	lTCPIncrementTxPosition
 2139 00f0 7860     		str	r0, [r7, #4]
1090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 2140              		.loc 2 1090 0
 2141 00f2 FB68     		ldr	r3, [r7, #12]
 2142 00f4 5A6B     		ldr	r2, [r3, #52]
 2143 00f6 3B69     		ldr	r3, [r7, #16]
 2144 00f8 1A44     		add	r2, r2, r3
 2145 00fa FB68     		ldr	r3, [r7, #12]
 2146 00fc 5A63     		str	r2, [r3, #52]
1091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				lDone += lToWrite;
 2147              		.loc 2 1091 0
 2148 00fe BA69     		ldr	r2, [r7, #24]
 2149 0100 3B69     		ldr	r3, [r7, #16]
 2150 0102 1344     		add	r3, r3, r2
 2151 0104 BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/ccuG1sHT.s 			page 65


1092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Link this segment in the Tx-Queue. */
1094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 2152              		.loc 2 1094 0
 2153 0106 FB68     		ldr	r3, [r7, #12]
 2154 0108 03F15402 		add	r2, r3, #84
 2155 010c 7B69     		ldr	r3, [r7, #20]
 2156 010e 1833     		adds	r3, r3, #24
 2157 0110 1046     		mov	r0, r2
 2158 0112 1946     		mov	r1, r3
 2159 0114 FFF7FEFF 		bl	vListInsertFifo
1095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Let 'pxHeadSegment' point to this segment if there is still
1097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				space. */
1098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 2160              		.loc 2 1098 0
 2161 0118 7B69     		ldr	r3, [r7, #20]
 2162 011a 9A68     		ldr	r2, [r3, #8]
 2163 011c 7B69     		ldr	r3, [r7, #20]
 2164 011e 5B68     		ldr	r3, [r3, #4]
 2165 0120 9A42     		cmp	r2, r3
 2166 0122 03DA     		bge	.L121
1099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxWindow->pxHeadSegment = pxSegment;
 2167              		.loc 2 1100 0
 2168 0124 FB68     		ldr	r3, [r7, #12]
 2169 0126 7A69     		ldr	r2, [r7, #20]
 2170 0128 DA67     		str	r2, [r3, #124]
 2171 012a 02E0     		b	.L122
 2172              	.L121:
1101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else
1103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxWindow->pxHeadSegment = NULL;
 2173              		.loc 2 1104 0
 2174 012c FB68     		ldr	r3, [r7, #12]
 2175 012e 0022     		movs	r2, #0
 2176 0130 DA67     		str	r2, [r3, #124]
 2177              	.L122:
1105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 )
 2178              		.loc 2 1107 0
 2179 0132 FB68     		ldr	r3, [r7, #12]
 2180 0134 B3F8B830 		ldrh	r3, [r3, #184]
 2181 0138 172B     		cmp	r3, #23
 2182 013a 08D0     		beq	.L119
1108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 2183              		.loc 2 1109 0
 2184 013c 084B     		ldr	r3, .L126
 2185 013e 1B68     		ldr	r3, [r3]
 2186 0140 022B     		cmp	r3, #2
 2187 0142 04DC     		bgt	.L119
1110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 2188              		.loc 2 1110 0 discriminator 1
 2189 0144 064B     		ldr	r3, .L126
ARM GAS  /tmp/ccuG1sHT.s 			page 66


 2190 0146 1B68     		ldr	r3, [r3]
1109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 2191              		.loc 2 1109 0 discriminator 1
 2192 0148 012B     		cmp	r3, #1
 2193 014a 00E0     		b	.L119
 2194              	.L120:
1111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: New %4ld bytes for seqNr %lu len %4lu (nxt %lu) po
1113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							ulLength,
1114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber,
1115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->lDataLength,
1116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber,
1117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->lStreamPos ) );
1118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_flush_logging( );
1119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			else
1123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* A sever situation: running out of segments for transmission.
1125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				No more data can be sent at the moment. */
1126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( lDone != 0 )
1127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lByte
1129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				break;
 2195              		.loc 2 1130 0
 2196 014c 02E0     		b	.L123
 2197              	.L119:
1074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
 2198              		.loc 2 1074 0
 2199 014e FB69     		ldr	r3, [r7, #28]
 2200 0150 002B     		cmp	r3, #0
 2201 0152 A8DC     		bgt	.L124
 2202              	.L123:
1131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return lDone;
 2203              		.loc 2 1134 0
 2204 0154 BB69     		ldr	r3, [r7, #24]
1135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 2205              		.loc 2 1135 0
 2206 0156 1846     		mov	r0, r3
 2207 0158 2037     		adds	r7, r7, #32
 2208              	.LCFI129:
 2209              		.cfi_def_cfa_offset 8
 2210 015a BD46     		mov	sp, r7
 2211              	.LCFI130:
 2212              		.cfi_def_cfa_register 13
 2213              		@ sp needed
 2214 015c 80BD     		pop	{r7, pc}
 2215              	.L127:
 2216 015e 00BF     		.align	2
 2217              	.L126:
 2218 0160 00000000 		.word	xTCPWindowLoggingLevel
 2219              		.cfi_endproc
ARM GAS  /tmp/ccuG1sHT.s 			page 67


 2220              	.LFE50:
 2222              		.section	.text.xTCPWindowTxDone,"ax",%progbits
 2223              		.align	2
 2224              		.global	xTCPWindowTxDone
 2225              		.thumb
 2226              		.thumb_func
 2228              	xTCPWindowTxDone:
 2229              	.LFB51:
1136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xTCPWindowTxDone( TCPWindow_t *pxWindow )
1143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 2230              		.loc 2 1143 0
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 8
 2233              		@ frame_needed = 1, uses_anonymous_args = 0
 2234              		@ link register save eliminated.
 2235 0000 80B4     		push	{r7}
 2236              	.LCFI131:
 2237              		.cfi_def_cfa_offset 4
 2238              		.cfi_offset 7, -4
 2239 0002 83B0     		sub	sp, sp, #12
 2240              	.LCFI132:
 2241              		.cfi_def_cfa_offset 16
 2242 0004 00AF     		add	r7, sp, #0
 2243              	.LCFI133:
 2244              		.cfi_def_cfa_register 7
 2245 0006 7860     		str	r0, [r7, #4]
1144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 2246              		.loc 2 1144 0
 2247 0008 7B68     		ldr	r3, [r7, #4]
 2248 000a D3F89030 		ldr	r3, [r3, #144]
 2249 000e 002B     		cmp	r3, #0
 2250 0010 0CBF     		ite	eq
 2251 0012 0123     		moveq	r3, #1
 2252 0014 0023     		movne	r3, #0
 2253 0016 DBB2     		uxtb	r3, r3
1145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 2254              		.loc 2 1145 0
 2255 0018 1846     		mov	r0, r3
 2256 001a 0C37     		adds	r7, r7, #12
 2257              	.LCFI134:
 2258              		.cfi_def_cfa_offset 4
 2259 001c BD46     		mov	sp, r7
 2260              	.LCFI135:
 2261              		.cfi_def_cfa_register 13
 2262              		@ sp needed
 2263 001e 5DF8047B 		ldr	r7, [sp], #4
 2264              	.LCFI136:
 2265              		.cfi_restore 7
 2266              		.cfi_def_cfa_offset 0
 2267 0022 7047     		bx	lr
 2268              		.cfi_endproc
ARM GAS  /tmp/ccuG1sHT.s 			page 68


 2269              	.LFE51:
 2271              		.section	.text.prvTCPWindowTxHasSpace,"ax",%progbits
 2272              		.align	2
 2273              		.thumb
 2274              		.thumb_func
 2276              	prvTCPWindowTxHasSpace:
 2277              	.LFB52:
1146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
1153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 2278              		.loc 2 1153 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 24
 2281              		@ frame_needed = 1, uses_anonymous_args = 0
 2282 0000 80B5     		push	{r7, lr}
 2283              	.LCFI137:
 2284              		.cfi_def_cfa_offset 8
 2285              		.cfi_offset 7, -8
 2286              		.cfi_offset 14, -4
 2287 0002 86B0     		sub	sp, sp, #24
 2288              	.LCFI138:
 2289              		.cfi_def_cfa_offset 32
 2290 0004 00AF     		add	r7, sp, #0
 2291              	.LCFI139:
 2292              		.cfi_def_cfa_register 7
 2293 0006 7860     		str	r0, [r7, #4]
 2294 0008 3960     		str	r1, [r7]
1154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulTxOutstanding;
1155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xHasSpace;
1156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
1157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* This function will look if there is new transmission data.  It will
1159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return true if there is data to be sent. */
1160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 2295              		.loc 2 1161 0
 2296 000a 7B68     		ldr	r3, [r7, #4]
 2297 000c 5433     		adds	r3, r3, #84
 2298 000e 1846     		mov	r0, r3
 2299 0010 FFF7FEFF 		bl	xTCPWindowPeekHead
 2300 0014 F860     		str	r0, [r7, #12]
1162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( pxSegment == NULL )
 2301              		.loc 2 1163 0
 2302 0016 FB68     		ldr	r3, [r7, #12]
 2303 0018 002B     		cmp	r3, #0
 2304 001a 02D1     		bne	.L131
1164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			xHasSpace = pdFALSE;
 2305              		.loc 2 1165 0
 2306 001c 0023     		movs	r3, #0
 2307 001e 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/ccuG1sHT.s 			page 69


 2308 0020 2FE0     		b	.L132
 2309              	.L131:
1166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
1168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* How much data is outstanding, i.e. how much data has been sent
1170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			but not yet acknowledged ? */
1171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 2310              		.loc 2 1171 0
 2311 0022 7B68     		ldr	r3, [r7, #4]
 2312 0024 9A6A     		ldr	r2, [r3, #40]
 2313 0026 7B68     		ldr	r3, [r7, #4]
 2314 0028 1B6A     		ldr	r3, [r3, #32]
 2315 002a 9A42     		cmp	r2, r3
 2316 002c 06D3     		bcc	.L133
1172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 2317              		.loc 2 1173 0
 2318 002e 7B68     		ldr	r3, [r7, #4]
 2319 0030 9A6A     		ldr	r2, [r3, #40]
 2320 0032 7B68     		ldr	r3, [r7, #4]
 2321 0034 1B6A     		ldr	r3, [r3, #32]
 2322 0036 D31A     		subs	r3, r2, r3
 2323 0038 7B61     		str	r3, [r7, #20]
 2324 003a 01E0     		b	.L134
 2325              	.L133:
1174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			else
1176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulTxOutstanding = 0UL;
 2326              		.loc 2 1177 0
 2327 003c 0023     		movs	r3, #0
 2328 003e 7B61     		str	r3, [r7, #20]
 2329              	.L134:
1178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Subtract this from the peer's space. */
1181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 2330              		.loc 2 1181 0
 2331 0040 3868     		ldr	r0, [r7]
 2332 0042 7969     		ldr	r1, [r7, #20]
 2333 0044 FFF7FEFF 		bl	FreeRTOS_min_uint32
 2334 0048 0246     		mov	r2, r0
 2335 004a 3B68     		ldr	r3, [r7]
 2336 004c 9B1A     		subs	r3, r3, r2
 2337 004e 3B60     		str	r3, [r7]
1182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* See if the next segment may be sent. */
1184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 2338              		.loc 2 1184 0
 2339 0050 FB68     		ldr	r3, [r7, #12]
 2340 0052 9B68     		ldr	r3, [r3, #8]
 2341 0054 1A46     		mov	r2, r3
 2342 0056 3B68     		ldr	r3, [r7]
 2343 0058 9A42     		cmp	r2, r3
 2344 005a 02D8     		bhi	.L135
1185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
ARM GAS  /tmp/ccuG1sHT.s 			page 70


1186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				xHasSpace = pdTRUE;
 2345              		.loc 2 1186 0
 2346 005c 0123     		movs	r3, #1
 2347 005e 3B61     		str	r3, [r7, #16]
 2348 0060 01E0     		b	.L136
 2349              	.L135:
1187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			else
1189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				xHasSpace = pdFALSE;
 2350              		.loc 2 1190 0
 2351 0062 0023     		movs	r3, #0
 2352 0064 3B61     		str	r3, [r7, #16]
 2353              	.L136:
1191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* If 'xHasSpace', it looks like the peer has at least space for 1
1194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
1195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			limitation of the transmission window (in case of many resends it
1196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			may be decreased). */
1197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uin
 2354              		.loc 2 1197 0
 2355 0066 7B69     		ldr	r3, [r7, #20]
 2356 0068 002B     		cmp	r3, #0
 2357 006a 0AD0     		beq	.L132
 2358              		.loc 2 1197 0 is_stmt 0 discriminator 1
 2359 006c 7B68     		ldr	r3, [r7, #4]
 2360 006e 9A68     		ldr	r2, [r3, #8]
 2361 0070 FB68     		ldr	r3, [r7, #12]
 2362 0072 9B68     		ldr	r3, [r3, #8]
 2363 0074 1946     		mov	r1, r3
 2364 0076 7B69     		ldr	r3, [r7, #20]
 2365 0078 0B44     		add	r3, r3, r1
 2366 007a 9A42     		cmp	r2, r3
 2367 007c 01D2     		bcs	.L132
1198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				xHasSpace = pdFALSE;
 2368              		.loc 2 1199 0 is_stmt 1
 2369 007e 0023     		movs	r3, #0
 2370 0080 3B61     		str	r3, [r7, #16]
 2371              	.L132:
1200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return xHasSpace;
 2372              		.loc 2 1203 0
 2373 0082 3B69     		ldr	r3, [r7, #16]
1204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 2374              		.loc 2 1204 0
 2375 0084 1846     		mov	r0, r3
 2376 0086 1837     		adds	r7, r7, #24
 2377              	.LCFI140:
 2378              		.cfi_def_cfa_offset 8
 2379 0088 BD46     		mov	sp, r7
 2380              	.LCFI141:
 2381              		.cfi_def_cfa_register 13
 2382              		@ sp needed
ARM GAS  /tmp/ccuG1sHT.s 			page 71


 2383 008a 80BD     		pop	{r7, pc}
 2384              		.cfi_endproc
 2385              	.LFE52:
 2387              		.section	.text.xTCPWindowTxHasData,"ax",%progbits
 2388              		.align	2
 2389              		.global	xTCPWindowTxHasData
 2390              		.thumb
 2391              		.thumb_func
 2393              	xTCPWindowTxHasData:
 2394              	.LFB53:
1205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xTCPWindowTxHasData( TCPWindow_t *pxWindow, uint32_t ulWindowSize, TickType_t *pulDelay
1212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 2395              		.loc 2 1212 0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 32
 2398              		@ frame_needed = 1, uses_anonymous_args = 0
 2399 0000 80B5     		push	{r7, lr}
 2400              	.LCFI142:
 2401              		.cfi_def_cfa_offset 8
 2402              		.cfi_offset 7, -8
 2403              		.cfi_offset 14, -4
 2404 0002 88B0     		sub	sp, sp, #32
 2405              	.LCFI143:
 2406              		.cfi_def_cfa_offset 40
 2407 0004 00AF     		add	r7, sp, #0
 2408              	.LCFI144:
 2409              		.cfi_def_cfa_register 7
 2410 0006 F860     		str	r0, [r7, #12]
 2411 0008 B960     		str	r1, [r7, #8]
 2412 000a 7A60     		str	r2, [r7, #4]
1213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
1214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xReturn;
1215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TickType_t ulAge, ulMaxAge;
1216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		*pulDelay = 0u;
 2413              		.loc 2 1217 0
 2414 000c 7B68     		ldr	r3, [r7, #4]
 2415 000e 0022     		movs	r2, #0
 2416 0010 1A60     		str	r2, [r3]
1218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 2417              		.loc 2 1219 0
 2418 0012 FB68     		ldr	r3, [r7, #12]
 2419 0014 1B6C     		ldr	r3, [r3, #64]
 2420 0016 002B     		cmp	r3, #0
 2421 0018 02D0     		beq	.L139
1220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* No need to look at retransmissions or new transmission as long as
1222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			there are priority segments.  *pulDelay equals zero, meaning it must
1223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			be sent out immediately. */
1224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			xReturn = pdTRUE;
ARM GAS  /tmp/ccuG1sHT.s 			page 72


 2422              		.loc 2 1224 0
 2423 001a 0123     		movs	r3, #1
 2424 001c FB61     		str	r3, [r7, #28]
 2425 001e 4AE0     		b	.L140
 2426              	.L139:
1225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
1227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 2427              		.loc 2 1228 0
 2428 0020 FB68     		ldr	r3, [r7, #12]
 2429 0022 6833     		adds	r3, r3, #104
 2430 0024 1846     		mov	r0, r3
 2431 0026 FFF7FEFF 		bl	xTCPWindowPeekHead
 2432 002a B861     		str	r0, [r7, #24]
1229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxSegment != NULL )
 2433              		.loc 2 1230 0
 2434 002c BB69     		ldr	r3, [r7, #24]
 2435 002e 002B     		cmp	r3, #0
 2436 0030 19D0     		beq	.L141
1231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* There is an outstanding segment, see if it is time to resend
1233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				it. */
1234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 2437              		.loc 2 1234 0
 2438 0032 BB69     		ldr	r3, [r7, #24]
 2439 0034 1033     		adds	r3, r3, #16
 2440 0036 1846     		mov	r0, r3
 2441 0038 FFF7FEFF 		bl	ulTimerGetAge
 2442 003c 7861     		str	r0, [r7, #20]
1235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* After a packet has been sent for the first time, it will wait
1237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				'1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
1238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				each time doubling the time-out */
1239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 2443              		.loc 2 1239 0
 2444 003e FB68     		ldr	r3, [r7, #12]
 2445 0040 9B6B     		ldr	r3, [r3, #56]
 2446 0042 1A46     		mov	r2, r3
 2447 0044 BB69     		ldr	r3, [r7, #24]
 2448 0046 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2449 0048 02FA03F3 		lsl	r3, r2, r3
 2450 004c 3B61     		str	r3, [r7, #16]
1240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( ulMaxAge > ulAge )
 2451              		.loc 2 1241 0
 2452 004e 3A69     		ldr	r2, [r7, #16]
 2453 0050 7B69     		ldr	r3, [r7, #20]
 2454 0052 9A42     		cmp	r2, r3
 2455 0054 04D9     		bls	.L142
1242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* A segment must be sent after this amount of msecs */
1244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					*pulDelay = ulMaxAge - ulAge;
 2456              		.loc 2 1244 0
 2457 0056 3A69     		ldr	r2, [r7, #16]
 2458 0058 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccuG1sHT.s 			page 73


 2459 005a D21A     		subs	r2, r2, r3
 2460 005c 7B68     		ldr	r3, [r7, #4]
 2461 005e 1A60     		str	r2, [r3]
 2462              	.L142:
1245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				xReturn = pdTRUE;
 2463              		.loc 2 1247 0
 2464 0060 0123     		movs	r3, #1
 2465 0062 FB61     		str	r3, [r7, #28]
 2466 0064 27E0     		b	.L140
 2467              	.L141:
1248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			else
1250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* No priority segment, no outstanding data, see if there is new
1252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				transmission data. */
1253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 2468              		.loc 2 1253 0
 2469 0066 FB68     		ldr	r3, [r7, #12]
 2470 0068 5433     		adds	r3, r3, #84
 2471 006a 1846     		mov	r0, r3
 2472 006c FFF7FEFF 		bl	xTCPWindowPeekHead
 2473 0070 B861     		str	r0, [r7, #24]
1254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* See if it fits in the peer's reception window. */
1256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( pxSegment == NULL )
 2474              		.loc 2 1256 0
 2475 0072 BB69     		ldr	r3, [r7, #24]
 2476 0074 002B     		cmp	r3, #0
 2477 0076 02D1     		bne	.L143
1257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					xReturn = pdFALSE;
 2478              		.loc 2 1258 0
 2479 0078 0023     		movs	r3, #0
 2480 007a FB61     		str	r3, [r7, #28]
 2481 007c 1BE0     		b	.L140
 2482              	.L143:
1259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 2483              		.loc 2 1260 0
 2484 007e F868     		ldr	r0, [r7, #12]
 2485 0080 B968     		ldr	r1, [r7, #8]
 2486 0082 FFF7FEFF 		bl	prvTCPWindowTxHasSpace
 2487 0086 0346     		mov	r3, r0
 2488 0088 002B     		cmp	r3, #0
 2489 008a 02D1     		bne	.L144
1261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Too many outstanding messages. */
1263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					xReturn = pdFALSE;
 2490              		.loc 2 1263 0
 2491 008c 0023     		movs	r3, #0
 2492 008e FB61     		str	r3, [r7, #28]
 2493 0090 11E0     		b	.L140
 2494              	.L144:
1264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < p
ARM GAS  /tmp/ccuG1sHT.s 			page 74


 2495              		.loc 2 1265 0
 2496 0092 FB68     		ldr	r3, [r7, #12]
 2497 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2498 0096 03F00203 		and	r3, r3, #2
 2499 009a DBB2     		uxtb	r3, r3
 2500 009c 002B     		cmp	r3, #0
 2501 009e 08D0     		beq	.L145
 2502              		.loc 2 1265 0 is_stmt 0 discriminator 1
 2503 00a0 BB69     		ldr	r3, [r7, #24]
 2504 00a2 9A68     		ldr	r2, [r3, #8]
 2505 00a4 BB69     		ldr	r3, [r7, #24]
 2506 00a6 5B68     		ldr	r3, [r3, #4]
 2507 00a8 9A42     		cmp	r2, r3
 2508 00aa 02DA     		bge	.L145
1266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* 'bSendFullSize' is a special optimisation.  If true, the
1268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					driver will only sent completely filled packets (of MSS
1269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					bytes). */
1270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					xReturn = pdFALSE;
 2509              		.loc 2 1270 0 is_stmt 1
 2510 00ac 0023     		movs	r3, #0
 2511 00ae FB61     		str	r3, [r7, #28]
 2512 00b0 01E0     		b	.L140
 2513              	.L145:
1271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else
1273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					xReturn = pdTRUE;
 2514              		.loc 2 1274 0
 2515 00b2 0123     		movs	r3, #1
 2516 00b4 FB61     		str	r3, [r7, #28]
 2517              	.L140:
1275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return xReturn;
 2518              		.loc 2 1279 0
 2519 00b6 FB69     		ldr	r3, [r7, #28]
1280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 2520              		.loc 2 1280 0
 2521 00b8 1846     		mov	r0, r3
 2522 00ba 2037     		adds	r7, r7, #32
 2523              	.LCFI145:
 2524              		.cfi_def_cfa_offset 8
 2525 00bc BD46     		mov	sp, r7
 2526              	.LCFI146:
 2527              		.cfi_def_cfa_register 13
 2528              		@ sp needed
 2529 00be 80BD     		pop	{r7, pc}
 2530              		.cfi_endproc
 2531              	.LFE53:
 2533              		.section	.text.ulTCPWindowTxGet,"ax",%progbits
 2534              		.align	2
 2535              		.global	ulTCPWindowTxGet
 2536              		.thumb
 2537              		.thumb_func
ARM GAS  /tmp/ccuG1sHT.s 			page 75


 2539              	ulTCPWindowTxGet:
 2540              	.LFB54:
1281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulTCPWindowTxGet( TCPWindow_t *pxWindow, uint32_t ulWindowSize, int32_t *plPosition )
1288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 2541              		.loc 2 1288 0
 2542              		.cfi_startproc
 2543              		@ args = 0, pretend = 0, frame = 32
 2544              		@ frame_needed = 1, uses_anonymous_args = 0
 2545 0000 80B5     		push	{r7, lr}
 2546              	.LCFI147:
 2547              		.cfi_def_cfa_offset 8
 2548              		.cfi_offset 7, -8
 2549              		.cfi_offset 14, -4
 2550 0002 88B0     		sub	sp, sp, #32
 2551              	.LCFI148:
 2552              		.cfi_def_cfa_offset 40
 2553 0004 00AF     		add	r7, sp, #0
 2554              	.LCFI149:
 2555              		.cfi_def_cfa_register 7
 2556 0006 F860     		str	r0, [r7, #12]
 2557 0008 B960     		str	r1, [r7, #8]
 2558 000a 7A60     		str	r2, [r7, #4]
1289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
1290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulMaxTime;
1291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulReturn  = ~0UL;
 2559              		.loc 2 1291 0
 2560 000c 4FF0FF33 		mov	r3, #-1
 2561 0010 BB61     		str	r3, [r7, #24]
1292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Fetches data to be sent-out now.
1295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		Priority messages: segments with a resend need no check current sliding
1297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		window size. */
1298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 2562              		.loc 2 1298 0
 2563 0012 FB68     		ldr	r3, [r7, #12]
 2564 0014 4033     		adds	r3, r3, #64
 2565 0016 1846     		mov	r0, r3
 2566 0018 FFF7FEFF 		bl	xTCPWindowGetHead
 2567 001c F861     		str	r0, [r7, #28]
1299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 2568              		.loc 2 1299 0
 2569 001e FB68     		ldr	r3, [r7, #12]
 2570 0020 9A6A     		ldr	r2, [r3, #40]
 2571 0022 FB68     		ldr	r3, [r7, #12]
 2572 0024 DA62     		str	r2, [r3, #44]
1300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( pxSegment == NULL )
 2573              		.loc 2 1301 0
 2574 0026 FB69     		ldr	r3, [r7, #28]
ARM GAS  /tmp/ccuG1sHT.s 			page 76


 2575 0028 002B     		cmp	r3, #0
 2576 002a 6ED1     		bne	.L158
1302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Waiting messages: outstanding messages with a running timer
1304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			neither check peer's reception window size because these packets
1305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			have been sent earlier. */
1306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 2577              		.loc 2 1306 0
 2578 002c FB68     		ldr	r3, [r7, #12]
 2579 002e 6833     		adds	r3, r3, #104
 2580 0030 1846     		mov	r0, r3
 2581 0032 FFF7FEFF 		bl	xTCPWindowPeekHead
 2582 0036 F861     		str	r0, [r7, #28]
1307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxSegment != NULL )
 2583              		.loc 2 1308 0
 2584 0038 FB69     		ldr	r3, [r7, #28]
 2585 003a 002B     		cmp	r3, #0
 2586 003c 1FD0     		beq	.L149
1309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Do check the timing. */
1311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 2587              		.loc 2 1311 0
 2588 003e FB68     		ldr	r3, [r7, #12]
 2589 0040 9B6B     		ldr	r3, [r3, #56]
 2590 0042 1A46     		mov	r2, r3
 2591 0044 FB69     		ldr	r3, [r7, #28]
 2592 0046 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2593 0048 02FA03F3 		lsl	r3, r2, r3
 2594 004c 7B61     		str	r3, [r7, #20]
1312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 2595              		.loc 2 1313 0
 2596 004e FB69     		ldr	r3, [r7, #28]
 2597 0050 1033     		adds	r3, r3, #16
 2598 0052 1846     		mov	r0, r3
 2599 0054 FFF7FEFF 		bl	ulTimerGetAge
 2600 0058 0246     		mov	r2, r0
 2601 005a 7B69     		ldr	r3, [r7, #20]
 2602 005c 9A42     		cmp	r2, r3
 2603 005e 0CD9     		bls	.L150
1314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* A normal (non-fast) retransmission.  Move it from the
1316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					head of the waiting queue. */
1317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 2604              		.loc 2 1317 0
 2605 0060 FB68     		ldr	r3, [r7, #12]
 2606 0062 6833     		adds	r3, r3, #104
 2607 0064 1846     		mov	r0, r3
 2608 0066 FFF7FEFF 		bl	xTCPWindowGetHead
 2609 006a F861     		str	r0, [r7, #28]
1318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 2610              		.loc 2 1318 0
 2611 006c FB69     		ldr	r3, [r7, #28]
 2612 006e 0022     		movs	r2, #0
 2613 0070 5A75     		strb	r2, [r3, #21]
1319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
ARM GAS  /tmp/ccuG1sHT.s 			page 77


1320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Some detailed logging. */
1321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber )
 2614              		.loc 2 1321 0
 2615 0072 4C4B     		ldr	r3, .L164
 2616 0074 1B68     		ldr	r3, [r3]
 2617 0076 002B     		cmp	r3, #0
 2618 0078 01E0     		b	.L149
 2619              	.L150:
1322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %ld bytes for sequence number %l
1324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxWindow->usPeerPortNumber,
1325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxWindow->usOurPortNumber,
1326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->lDataLength,
1327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber,
1328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->ulSequenceNumber ) );
1329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_flush_logging( );
1330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else
1333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxSegment = NULL;
 2620              		.loc 2 1334 0
 2621 007a 0023     		movs	r3, #0
 2622 007c FB61     		str	r3, [r7, #28]
 2623              	.L149:
1335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxSegment == NULL )
 2624              		.loc 2 1338 0
 2625 007e FB69     		ldr	r3, [r7, #28]
 2626 0080 002B     		cmp	r3, #0
 2627 0082 42D1     		bne	.L158
1339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* New messages: sent-out for the first time.  Check current
1341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				sliding window size of peer. */
1342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 2628              		.loc 2 1342 0
 2629 0084 FB68     		ldr	r3, [r7, #12]
 2630 0086 5433     		adds	r3, r3, #84
 2631 0088 1846     		mov	r0, r3
 2632 008a FFF7FEFF 		bl	xTCPWindowPeekHead
 2633 008e F861     		str	r0, [r7, #28]
1343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( pxSegment == NULL )
 2634              		.loc 2 1344 0
 2635 0090 FB69     		ldr	r3, [r7, #28]
 2636 0092 002B     		cmp	r3, #0
 2637 0094 02D1     		bne	.L152
1345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* No segments queued. */
1347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					ulReturn = 0UL;
 2638              		.loc 2 1347 0
 2639 0096 0023     		movs	r3, #0
 2640 0098 BB61     		str	r3, [r7, #24]
 2641 009a 36E0     		b	.L158
 2642              	.L152:
ARM GAS  /tmp/ccuG1sHT.s 			page 78


1348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < p
 2643              		.loc 2 1349 0
 2644 009c FB68     		ldr	r3, [r7, #12]
 2645 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2646 00a0 03F00203 		and	r3, r3, #2
 2647 00a4 DBB2     		uxtb	r3, r3
 2648 00a6 002B     		cmp	r3, #0
 2649 00a8 08D0     		beq	.L153
 2650              		.loc 2 1349 0 is_stmt 0 discriminator 1
 2651 00aa FB69     		ldr	r3, [r7, #28]
 2652 00ac 9A68     		ldr	r2, [r3, #8]
 2653 00ae FB69     		ldr	r3, [r7, #28]
 2654 00b0 5B68     		ldr	r3, [r3, #4]
 2655 00b2 9A42     		cmp	r2, r3
 2656 00b4 02DA     		bge	.L153
1350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* A segment has been queued but the driver waits until it
1352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					has a full size of MSS. */
1353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					ulReturn = 0;
 2657              		.loc 2 1353 0 is_stmt 1
 2658 00b6 0023     		movs	r3, #0
 2659 00b8 BB61     		str	r3, [r7, #24]
 2660 00ba 26E0     		b	.L158
 2661              	.L153:
1354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 2662              		.loc 2 1355 0
 2663 00bc F868     		ldr	r0, [r7, #12]
 2664 00be B968     		ldr	r1, [r7, #8]
 2665 00c0 FFF7FEFF 		bl	prvTCPWindowTxHasSpace
 2666 00c4 0346     		mov	r3, r0
 2667 00c6 002B     		cmp	r3, #0
 2668 00c8 02D1     		bne	.L154
1356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Peer has no more space at this moment. */
1358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					ulReturn = 0;
 2669              		.loc 2 1358 0
 2670 00ca 0023     		movs	r3, #0
 2671 00cc BB61     		str	r3, [r7, #24]
 2672 00ce 1CE0     		b	.L158
 2673              	.L154:
1359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				else
1361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Move it out of the Tx queue. */
1363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 2674              		.loc 2 1363 0
 2675 00d0 FB68     		ldr	r3, [r7, #12]
 2676 00d2 5433     		adds	r3, r3, #84
 2677 00d4 1846     		mov	r0, r3
 2678 00d6 FFF7FEFF 		bl	xTCPWindowGetHead
 2679 00da F861     		str	r0, [r7, #28]
1364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Don't let pxHeadSegment point to this segment any more,
1366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					so no more data will be added. */
1367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( pxWindow->pxHeadSegment == pxSegment )
ARM GAS  /tmp/ccuG1sHT.s 			page 79


 2680              		.loc 2 1367 0
 2681 00dc FB68     		ldr	r3, [r7, #12]
 2682 00de DA6F     		ldr	r2, [r3, #124]
 2683 00e0 FB69     		ldr	r3, [r7, #28]
 2684 00e2 9A42     		cmp	r2, r3
 2685 00e4 02D1     		bne	.L155
1368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->pxHeadSegment = NULL;
 2686              		.loc 2 1369 0
 2687 00e6 FB68     		ldr	r3, [r7, #12]
 2688 00e8 0022     		movs	r2, #0
 2689 00ea DA67     		str	r2, [r3, #124]
 2690              	.L155:
1370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* pxWindow->tx.highest registers the highest sequence
1373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					number in our transmission window. */
1374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment-
 2691              		.loc 2 1374 0
 2692 00ec FB69     		ldr	r3, [r7, #28]
 2693 00ee 1B68     		ldr	r3, [r3]
 2694 00f0 FA69     		ldr	r2, [r7, #28]
 2695 00f2 9268     		ldr	r2, [r2, #8]
 2696 00f4 1A44     		add	r2, r2, r3
 2697 00f6 FB68     		ldr	r3, [r7, #12]
 2698 00f8 9A62     		str	r2, [r3, #40]
1375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* ...and more detailed logging */
1377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber )
 2699              		.loc 2 1377 0
 2700 00fa 2A4B     		ldr	r3, .L164
 2701 00fc 1B68     		ldr	r3, [r3]
 2702 00fe 012B     		cmp	r3, #1
 2703 0100 03DD     		ble	.L158
 2704              		.loc 2 1377 0 is_stmt 0 discriminator 1
 2705 0102 FB68     		ldr	r3, [r7, #12]
 2706 0104 B3F8B830 		ldrh	r3, [r3, #184]
 2707 0108 172B     		cmp	r3, #23
 2708              	.L158:
1378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %ld bytes for sequence number %l
1380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxWindow->usPeerPortNumber,
1381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxWindow->usOurPortNumber,
1382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->lDataLength,
1383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber,
1384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							ulWindowSize ) );
1385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_flush_logging( );
1386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
1391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* There is a priority segment. It doesn't need any checking for
1393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			space or timeouts. */
1394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( xTCPWindowLoggingLevel != 0 )
1395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
ARM GAS  /tmp/ccuG1sHT.s 			page 80


1396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %ld bytes for sequence number %lu 
1397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxWindow->usPeerPortNumber,
1398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxWindow->usOurPortNumber,
1399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxSegment->lDataLength,
1400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber,
1401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					ulWindowSize ) );
1402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				FreeRTOS_flush_logging( );
1403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* See if it has already been determined to return 0. */
1407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( ulReturn != 0UL )
 2709              		.loc 2 1407 0 is_stmt 1
 2710 010a BB69     		ldr	r3, [r7, #24]
 2711 010c 002B     		cmp	r3, #0
 2712 010e 43D0     		beq	.L159
1408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 2713              		.loc 2 1409 0
 2714 0110 FB69     		ldr	r3, [r7, #28]
 2715 0112 9B6A     		ldr	r3, [r3, #40]
 2716 0114 002B     		cmp	r3, #0
 2717 0116 09D0     		beq	.L160
 2718              	.LBB12:
 2719              	.LBB13:
 2720              		.loc 3 237 0 discriminator 1
 2721              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2722 0118 4FF05003 			mov r3, #80												
 2723 011c 83F31188 		msr basepri, r3											
 2724 0120 BFF36F8F 		isb														
 2725 0124 BFF34F8F 		dsb														
 2726              	
 2727              	@ 0 "" 2
 2728              		.thumb
 2729 0128 3B61     		str	r3, [r7, #16]
 2730              	.L161:
 2731              	.LBE13:
 2732              	.LBE12:
 2733              		.loc 2 1409 0 discriminator 1
 2734 012a FEE7     		b	.L161
 2735              	.L160:
1410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Now that the segment will be transmitted, add it to the tail of
1412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			the waiting queue. */
1413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 2736              		.loc 2 1413 0
 2737 012c FB68     		ldr	r3, [r7, #12]
 2738 012e 03F16802 		add	r2, r3, #104
 2739 0132 FB69     		ldr	r3, [r7, #28]
 2740 0134 1833     		adds	r3, r3, #24
 2741 0136 1046     		mov	r0, r2
 2742 0138 1946     		mov	r1, r3
 2743 013a FFF7FEFF 		bl	vListInsertFifo
1414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* And mark it as outstanding. */
1416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 2744              		.loc 2 1416 0
ARM GAS  /tmp/ccuG1sHT.s 			page 81


 2745 013e FA69     		ldr	r2, [r7, #28]
 2746 0140 937D     		ldrb	r3, [r2, #22]
 2747 0142 43F00103 		orr	r3, r3, #1
 2748 0146 9375     		strb	r3, [r2, #22]
1417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Administer the transmit count, needed for fast
1419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			retransmissions. */
1420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			( pxSegment->u.bits.ucTransmitCount )++;
 2749              		.loc 2 1420 0
 2750 0148 FB69     		ldr	r3, [r7, #28]
 2751 014a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2752 014c 0133     		adds	r3, r3, #1
 2753 014e DAB2     		uxtb	r2, r3
 2754 0150 FB69     		ldr	r3, [r7, #28]
 2755 0152 1A75     		strb	r2, [r3, #20]
1421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* If there have been several retransmissions (4), decrease the
1423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			size of the transmission window to at most 2 times MSS. */
1424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 2756              		.loc 2 1424 0
 2757 0154 FB69     		ldr	r3, [r7, #28]
 2758 0156 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2759 0158 042B     		cmp	r3, #4
 2760 015a 0DD1     		bne	.L162
1425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 2761              		.loc 2 1426 0
 2762 015c FB68     		ldr	r3, [r7, #12]
 2763 015e 9A68     		ldr	r2, [r3, #8]
 2764 0160 FB68     		ldr	r3, [r7, #12]
 2765 0162 B3F8BC30 		ldrh	r3, [r3, #188]
 2766 0166 5B00     		lsls	r3, r3, #1
 2767 0168 9A42     		cmp	r2, r3
 2768 016a 05D9     		bls	.L162
1427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
1429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
1430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->xSize.ulTxWindowLength, 2 * pxWindow->usMSS ) );
1431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 2769              		.loc 2 1431 0
 2770 016c FB68     		ldr	r3, [r7, #12]
 2771 016e B3F8BC30 		ldrh	r3, [r3, #188]
 2772 0172 5A00     		lsls	r2, r3, #1
 2773 0174 FB68     		ldr	r3, [r7, #12]
 2774 0176 9A60     		str	r2, [r3, #8]
 2775              	.L162:
1432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Clear the transmit timer. */
1436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 2776              		.loc 2 1436 0
 2777 0178 FB69     		ldr	r3, [r7, #28]
 2778 017a 1033     		adds	r3, r3, #16
 2779 017c 1846     		mov	r0, r3
 2780 017e FFF7FEFF 		bl	vTCPTimerSet
1437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
ARM GAS  /tmp/ccuG1sHT.s 			page 82


1438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 2781              		.loc 2 1438 0
 2782 0182 FB69     		ldr	r3, [r7, #28]
 2783 0184 1A68     		ldr	r2, [r3]
 2784 0186 FB68     		ldr	r3, [r7, #12]
 2785 0188 DA62     		str	r2, [r3, #44]
1439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Inform the caller where to find the data within the queue. */
1441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			*plPosition = pxSegment->lStreamPos;
 2786              		.loc 2 1441 0
 2787 018a FB69     		ldr	r3, [r7, #28]
 2788 018c DA68     		ldr	r2, [r3, #12]
 2789 018e 7B68     		ldr	r3, [r7, #4]
 2790 0190 1A60     		str	r2, [r3]
1442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* And return the length of the data segment */
1444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 2791              		.loc 2 1444 0
 2792 0192 FB69     		ldr	r3, [r7, #28]
 2793 0194 9B68     		ldr	r3, [r3, #8]
 2794 0196 BB61     		str	r3, [r7, #24]
 2795              	.L159:
1445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return ulReturn;
 2796              		.loc 2 1447 0
 2797 0198 BB69     		ldr	r3, [r7, #24]
1448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 2798              		.loc 2 1448 0
 2799 019a 1846     		mov	r0, r3
 2800 019c 2037     		adds	r7, r7, #32
 2801              	.LCFI150:
 2802              		.cfi_def_cfa_offset 8
 2803 019e BD46     		mov	sp, r7
 2804              	.LCFI151:
 2805              		.cfi_def_cfa_register 13
 2806              		@ sp needed
 2807 01a0 80BD     		pop	{r7, pc}
 2808              	.L165:
 2809 01a2 00BF     		.align	2
 2810              	.L164:
 2811 01a4 00000000 		.word	xTCPWindowLoggingLevel
 2812              		.cfi_endproc
 2813              	.LFE54:
 2815              		.section	.text.prvTCPWindowTxCheckAck,"ax",%progbits
 2816              		.align	2
 2817              		.thumb
 2818              		.thumb_func
 2820              	prvTCPWindowTxCheckAck:
 2821              	.LFB55:
1449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
ARM GAS  /tmp/ccuG1sHT.s 			page 83


1456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 2822              		.loc 2 1456 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 48
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826 0000 80B5     		push	{r7, lr}
 2827              	.LCFI152:
 2828              		.cfi_def_cfa_offset 8
 2829              		.cfi_offset 7, -8
 2830              		.cfi_offset 14, -4
 2831 0002 8CB0     		sub	sp, sp, #48
 2832              	.LCFI153:
 2833              		.cfi_def_cfa_offset 56
 2834 0004 00AF     		add	r7, sp, #0
 2835              	.LCFI154:
 2836              		.cfi_def_cfa_register 7
 2837 0006 F860     		str	r0, [r7, #12]
 2838 0008 B960     		str	r1, [r7, #8]
 2839 000a 7A60     		str	r2, [r7, #4]
1457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulBytesConfirmed = 0u;
 2840              		.loc 2 1457 0
 2841 000c 0023     		movs	r3, #0
 2842 000e FB62     		str	r3, [r7, #44]
1458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 2843              		.loc 2 1458 0
 2844 0010 BB68     		ldr	r3, [r7, #8]
 2845 0012 BB62     		str	r3, [r7, #40]
1459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	const ListItem_t *pxIterator;
1460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments 
 2846              		.loc 2 1460 0
 2847 0014 FB68     		ldr	r3, [r7, #12]
 2848 0016 9833     		adds	r3, r3, #152
 2849 0018 FB61     		str	r3, [r7, #28]
1461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	BaseType_t xDoUnlink;
1462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
1463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* An acknowledgement or a selective ACK (SACK) was received.  See if some outstanding data
1464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		may be removed from the transmission queue(s).
1465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		All TX segments for which
1466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		( ( ulSequenceNumber >= ulFirst ) && ( ulSequenceNumber < ulLast ) in a
1467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		contiguous block.  Note that the segments are stored in xTxSegments in a
1468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		strict sequential order. */
1469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* SRTT[i] = (1-a) * SRTT[i-1] + a * RTT
1471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		0 < a < 1; usually a = 1/8
1473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		RTO = 2 * SRTT
1475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		where:
1477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		  RTT is Round Trip Time
1478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		  SRTT is Smoothed RTT
1479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		  RTO is Retransmit timeout
1480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		 A Smoothed RTT will increase quickly, but it is conservative when
1482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		 becoming smaller. */
1483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		for(
ARM GAS  /tmp/ccuG1sHT.s 			page 84


1485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 2850              		.loc 2 1485 0
 2851 001a FB69     		ldr	r3, [r7, #28]
 2852 001c 5B68     		ldr	r3, [r3, #4]
 2853 001e 7B62     		str	r3, [r7, #36]
1484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 2854              		.loc 2 1484 0
 2855 0020 9CE0     		b	.L167
 2856              	.L183:
1486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast
1487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			)
1488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			xDoUnlink = pdFALSE;
 2857              		.loc 2 1489 0
 2858 0022 0023     		movs	r3, #0
 2859 0024 3B62     		str	r3, [r7, #32]
1490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 2860              		.loc 2 1490 0
 2861 0026 7B6A     		ldr	r3, [r7, #36]
 2862 0028 DB68     		ldr	r3, [r3, #12]
 2863 002a BB61     		str	r3, [r7, #24]
1491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Move to the next item because the current item might get
1493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			removed. */
1494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 2864              		.loc 2 1494 0
 2865 002c 7B6A     		ldr	r3, [r7, #36]
 2866 002e 5B68     		ldr	r3, [r3, #4]
 2867 0030 7B62     		str	r3, [r7, #36]
1495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Continue if this segment does not fall within the ACK'd range. */
1497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 2868              		.loc 2 1497 0
 2869 0032 BB69     		ldr	r3, [r7, #24]
 2870 0034 1B68     		ldr	r3, [r3]
 2871 0036 B86A     		ldr	r0, [r7, #40]
 2872 0038 1946     		mov	r1, r3
 2873 003a FFF7FEFF 		bl	xSequenceGreaterThan
 2874 003e 0346     		mov	r3, r0
 2875 0040 002B     		cmp	r3, #0
 2876 0042 00D0     		beq	.L168
1498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				continue;
 2877              		.loc 2 1499 0
 2878 0044 8AE0     		b	.L167
 2879              	.L168:
1500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Is it ready? */
1503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 2880              		.loc 2 1503 0
 2881 0046 BB69     		ldr	r3, [r7, #24]
 2882 0048 1A68     		ldr	r2, [r3]
 2883 004a BB6A     		ldr	r3, [r7, #40]
 2884 004c 9A42     		cmp	r2, r3
 2885 004e 00D0     		beq	.L169
1504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
ARM GAS  /tmp/ccuG1sHT.s 			page 85


1505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				break;
 2886              		.loc 2 1505 0
 2887 0050 90E0     		b	.L170
 2888              	.L169:
1506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 2889              		.loc 2 1508 0
 2890 0052 BB69     		ldr	r3, [r7, #24]
 2891 0054 9B68     		ldr	r3, [r3, #8]
 2892 0056 7B61     		str	r3, [r7, #20]
1509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 2893              		.loc 2 1510 0
 2894 0058 BB69     		ldr	r3, [r7, #24]
 2895 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2896 005c 03F00203 		and	r3, r3, #2
 2897 0060 DBB2     		uxtb	r3, r3
 2898 0062 002B     		cmp	r3, #0
 2899 0064 4ED1     		bne	.L171
1511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != p
 2900              		.loc 2 1512 0
 2901 0066 BB69     		ldr	r3, [r7, #24]
 2902 0068 1A68     		ldr	r2, [r3]
 2903 006a 7B69     		ldr	r3, [r7, #20]
 2904 006c 1344     		add	r3, r3, r2
 2905 006e 1846     		mov	r0, r3
 2906 0070 7968     		ldr	r1, [r7, #4]
 2907 0072 FFF7FEFF 		bl	xSequenceGreaterThan
 2908 0076 0346     		mov	r3, r0
 2909 0078 002B     		cmp	r3, #0
 2910 007a 00D0     		beq	.L172
1513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* What happens?  Only part of this segment was accepted,
1515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					probably due to WND limits
1516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					  AAAAAAA BBBBBBB << acked
1518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					  aaaaaaa aaaa    << sent */
1519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
1522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %l
1523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxWindow->usPeerPortNumber,
1524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							pxWindow->usOurPortNumber,
1525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							ulFirstSeq - pxWindow->tx.ulFirstSequenceNumber,
1526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							ulLast - pxWindow->tx.ulFirstSequenceNumber,
1527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 							ulFirstSeq, ulFirstSeq + ulDataLength ) );
1528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					#endif /* ipconfigHAS_DEBUG_PRINTF */
1530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					break;
 2911              		.loc 2 1530 0
 2912 007c 7AE0     		b	.L170
 2913              	.L172:
1531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* This segment is fully ACK'd, set the flag. */
ARM GAS  /tmp/ccuG1sHT.s 			page 86


1534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 2914              		.loc 2 1534 0
 2915 007e BA69     		ldr	r2, [r7, #24]
 2916 0080 937D     		ldrb	r3, [r2, #22]
 2917 0082 43F00203 		orr	r3, r3, #2
 2918 0086 9375     		strb	r3, [r2, #22]
1535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Calculate the RTT only if the segment was sent-out for the
1537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				first time and if this is the last ACK'd segment in a range. */
1538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLengt
 2919              		.loc 2 1538 0
 2920 0088 BB69     		ldr	r3, [r7, #24]
 2921 008a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2922 008c 012B     		cmp	r3, #1
 2923 008e 37D1     		bne	.L173
 2924              		.loc 2 1538 0 is_stmt 0 discriminator 1
 2925 0090 BB69     		ldr	r3, [r7, #24]
 2926 0092 1A68     		ldr	r2, [r3]
 2927 0094 7B69     		ldr	r3, [r7, #20]
 2928 0096 1A44     		add	r2, r2, r3
 2929 0098 7B68     		ldr	r3, [r7, #4]
 2930 009a 9A42     		cmp	r2, r3
 2931 009c 30D1     		bne	.L173
 2932              	.LBB14:
1539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 2933              		.loc 2 1540 0 is_stmt 1
 2934 009e BB69     		ldr	r3, [r7, #24]
 2935 00a0 1033     		adds	r3, r3, #16
 2936 00a2 1846     		mov	r0, r3
 2937 00a4 FFF7FEFF 		bl	ulTimerGetAge
 2938 00a8 0346     		mov	r3, r0
 2939 00aa 3B61     		str	r3, [r7, #16]
1541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( pxWindow->lSRTT >= mS )
 2940              		.loc 2 1542 0
 2941 00ac FB68     		ldr	r3, [r7, #12]
 2942 00ae 9A6B     		ldr	r2, [r3, #56]
 2943 00b0 3B69     		ldr	r3, [r7, #16]
 2944 00b2 9A42     		cmp	r2, r3
 2945 00b4 0EDB     		blt	.L174
1543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/* RTT becomes smaller: adapt slowly. */
1545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->
 2946              		.loc 2 1545 0
 2947 00b6 FB68     		ldr	r3, [r7, #12]
 2948 00b8 9A6B     		ldr	r2, [r3, #56]
 2949 00ba 1346     		mov	r3, r2
 2950 00bc DB00     		lsls	r3, r3, #3
 2951 00be 9A1A     		subs	r2, r3, r2
 2952 00c0 3B69     		ldr	r3, [r7, #16]
 2953 00c2 1344     		add	r3, r3, r2
 2954 00c4 002B     		cmp	r3, #0
 2955 00c6 00DA     		bge	.L175
 2956 00c8 0733     		adds	r3, r3, #7
 2957              	.L175:
 2958 00ca DB10     		asrs	r3, r3, #3
ARM GAS  /tmp/ccuG1sHT.s 			page 87


 2959 00cc 1A46     		mov	r2, r3
 2960 00ce FB68     		ldr	r3, [r7, #12]
 2961 00d0 9A63     		str	r2, [r3, #56]
 2962 00d2 0EE0     		b	.L176
 2963              	.L174:
1546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					else
1548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						/* RTT becomes larger: adapt quicker */
1550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->
 2964              		.loc 2 1550 0
 2965 00d4 FB68     		ldr	r3, [r7, #12]
 2966 00d6 9A6B     		ldr	r2, [r3, #56]
 2967 00d8 1346     		mov	r3, r2
 2968 00da 5B00     		lsls	r3, r3, #1
 2969 00dc 1A44     		add	r2, r2, r3
 2970 00de 3B69     		ldr	r3, [r7, #16]
 2971 00e0 1344     		add	r3, r3, r2
 2972 00e2 5B00     		lsls	r3, r3, #1
 2973 00e4 002B     		cmp	r3, #0
 2974 00e6 00DA     		bge	.L177
 2975 00e8 0733     		adds	r3, r3, #7
 2976              	.L177:
 2977 00ea DB10     		asrs	r3, r3, #3
 2978 00ec 1A46     		mov	r2, r3
 2979 00ee FB68     		ldr	r3, [r7, #12]
 2980 00f0 9A63     		str	r2, [r3, #56]
 2981              	.L176:
1551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					/* Cap to the minimum of 50ms. */
1554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 2982              		.loc 2 1554 0
 2983 00f2 FB68     		ldr	r3, [r7, #12]
 2984 00f4 9B6B     		ldr	r3, [r3, #56]
 2985 00f6 312B     		cmp	r3, #49
 2986 00f8 02DC     		bgt	.L173
1555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					{
1556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxWindow->lSRTT = winSRTT_CAP_mS;
 2987              		.loc 2 1556 0
 2988 00fa FB68     		ldr	r3, [r7, #12]
 2989 00fc 3222     		movs	r2, #50
 2990 00fe 9A63     		str	r2, [r3, #56]
 2991              	.L173:
 2992              	.LBE14:
1557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					}
1558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Unlink it from the 3 queues, but do not destroy it (yet). */
1561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				xDoUnlink = pdTRUE;
 2993              		.loc 2 1561 0
 2994 0100 0123     		movs	r3, #1
 2995 0102 3B62     		str	r3, [r7, #32]
 2996              	.L171:
1562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* pxSegment->u.bits.bAcked is now true.  Is it located at the left
ARM GAS  /tmp/ccuG1sHT.s 			page 88


1565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			side of the transmission queue?  If so, it may be freed. */
1566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 2997              		.loc 2 1566 0
 2998 0104 FB68     		ldr	r3, [r7, #12]
 2999 0106 1A6A     		ldr	r2, [r3, #32]
 3000 0108 BB6A     		ldr	r3, [r7, #40]
 3001 010a 9A42     		cmp	r2, r3
 3002 010c 16D1     		bne	.L178
1567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) 
 3003              		.loc 2 1568 0
 3004 010e 1C4B     		ldr	r3, .L185
 3005 0110 1B68     		ldr	r3, [r3]
 3006 0112 012B     		cmp	r3, #1
 3007 0114 03DD     		ble	.L179
 3008              		.loc 2 1568 0 is_stmt 0 discriminator 1
 3009 0116 FB68     		ldr	r3, [r7, #12]
 3010 0118 B3F8B830 		ldrh	r3, [r3, #184]
 3011 011c 172B     		cmp	r3, #23
 3012              	.L179:
1569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %lu - %lu Ready sequence number %lu\n",
1571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						ulFirst - pxWindow->tx.ulFirstSequenceNumber,
1572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						ulLast - pxWindow->tx.ulFirstSequenceNumber,
1573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
1574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Increase the left-hand value of the transmission window. */
1577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 3013              		.loc 2 1577 0 is_stmt 1
 3014 011e FB68     		ldr	r3, [r7, #12]
 3015 0120 1A6A     		ldr	r2, [r3, #32]
 3016 0122 7B69     		ldr	r3, [r7, #20]
 3017 0124 1A44     		add	r2, r2, r3
 3018 0126 FB68     		ldr	r3, [r7, #12]
 3019 0128 1A62     		str	r2, [r3, #32]
1578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* This function will return the number of bytes that the tail
1580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				of txStream may be advanced. */
1581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulBytesConfirmed += ulDataLength;
 3020              		.loc 2 1581 0
 3021 012a FA6A     		ldr	r2, [r7, #44]
 3022 012c 7B69     		ldr	r3, [r7, #20]
 3023 012e 1344     		add	r3, r3, r2
 3024 0130 FB62     		str	r3, [r7, #44]
1582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
1584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				vTCPWindowFree( pxSegment );
 3025              		.loc 2 1584 0
 3026 0132 B869     		ldr	r0, [r7, #24]
 3027 0134 FFF7FEFF 		bl	vTCPWindowFree
1585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* No need to unlink it any more. */
1587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				xDoUnlink = pdFALSE;
 3028              		.loc 2 1587 0
 3029 0138 0023     		movs	r3, #0
 3030 013a 3B62     		str	r3, [r7, #32]
ARM GAS  /tmp/ccuG1sHT.s 			page 89


 3031              	.L178:
1588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL 
 3032              		.loc 2 1590 0
 3033 013c 3B6A     		ldr	r3, [r7, #32]
 3034 013e 002B     		cmp	r3, #0
 3035 0140 08D0     		beq	.L182
 3036              		.loc 2 1590 0 is_stmt 0 discriminator 1
 3037 0142 BB69     		ldr	r3, [r7, #24]
 3038 0144 9B6A     		ldr	r3, [r3, #40]
 3039 0146 002B     		cmp	r3, #0
 3040 0148 04D0     		beq	.L182
1591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Remove item from its queues. */
1593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				uxListRemove( &pxSegment->xQueueItem );
 3041              		.loc 2 1593 0 is_stmt 1
 3042 014a BB69     		ldr	r3, [r7, #24]
 3043 014c 1833     		adds	r3, r3, #24
 3044 014e 1846     		mov	r0, r3
 3045 0150 FFF7FEFF 		bl	uxListRemove
 3046              	.L182:
1594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulSequenceNumber += ulDataLength;
 3047              		.loc 2 1596 0
 3048 0154 BA6A     		ldr	r2, [r7, #40]
 3049 0156 7B69     		ldr	r3, [r7, #20]
 3050 0158 1344     		add	r3, r3, r2
 3051 015a BB62     		str	r3, [r7, #40]
 3052              	.L167:
1484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 3053              		.loc 2 1484 0
 3054 015c 7A6A     		ldr	r2, [r7, #36]
 3055 015e FB69     		ldr	r3, [r7, #28]
 3056 0160 9A42     		cmp	r2, r3
 3057 0162 07D0     		beq	.L170
1486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			)
 3058              		.loc 2 1486 0
 3059 0164 B86A     		ldr	r0, [r7, #40]
 3060 0166 7968     		ldr	r1, [r7, #4]
 3061 0168 FFF7FEFF 		bl	xSequenceLessThan
 3062 016c 0346     		mov	r3, r0
 3063 016e 002B     		cmp	r3, #0
 3064 0170 7FF457AF 		bne	.L183
 3065              	.L170:
1597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return ulBytesConfirmed;
 3066              		.loc 2 1599 0
 3067 0174 FB6A     		ldr	r3, [r7, #44]
1600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 3068              		.loc 2 1600 0
 3069 0176 1846     		mov	r0, r3
 3070 0178 3037     		adds	r7, r7, #48
 3071              	.LCFI155:
 3072              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccuG1sHT.s 			page 90


 3073 017a BD46     		mov	sp, r7
 3074              	.LCFI156:
 3075              		.cfi_def_cfa_register 13
 3076              		@ sp needed
 3077 017c 80BD     		pop	{r7, pc}
 3078              	.L186:
 3079 017e 00BF     		.align	2
 3080              	.L185:
 3081 0180 00000000 		.word	xTCPWindowLoggingLevel
 3082              		.cfi_endproc
 3083              	.LFE55:
 3085              		.section	.text.prvTCPWindowFastRetransmit,"ax",%progbits
 3086              		.align	2
 3087              		.thumb
 3088              		.thumb_func
 3090              	prvTCPWindowFastRetransmit:
 3091              	.LFB56:
1601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst )
1607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 3092              		.loc 2 1607 0
 3093              		.cfi_startproc
 3094              		@ args = 0, pretend = 0, frame = 24
 3095              		@ frame_needed = 1, uses_anonymous_args = 0
 3096 0000 80B5     		push	{r7, lr}
 3097              	.LCFI157:
 3098              		.cfi_def_cfa_offset 8
 3099              		.cfi_offset 7, -8
 3100              		.cfi_offset 14, -4
 3101 0002 86B0     		sub	sp, sp, #24
 3102              	.LCFI158:
 3103              		.cfi_def_cfa_offset 32
 3104 0004 00AF     		add	r7, sp, #0
 3105              	.LCFI159:
 3106              		.cfi_def_cfa_register 7
 3107 0006 7860     		str	r0, [r7, #4]
 3108 0008 3960     		str	r1, [r7]
1608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	const ListItem_t *pxIterator;
1609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	const MiniListItem_t* pxEnd;
1610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	TCPSegment_t *pxSegment;
1611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulCount = 0UL;
 3109              		.loc 2 1611 0
 3110 000a 0023     		movs	r3, #0
 3111 000c 3B61     		str	r3, [r7, #16]
1612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* A higher Tx block has been acknowledged.  Now iterate through the
1614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		 xWaitQueue to find a possible condition for a FAST retransmission. */
1615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 3112              		.loc 2 1616 0
 3113 000e 7B68     		ldr	r3, [r7, #4]
 3114 0010 7033     		adds	r3, r3, #112
 3115 0012 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccuG1sHT.s 			page 91


1617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 3116              		.loc 2 1618 0
 3117 0014 FB68     		ldr	r3, [r7, #12]
 3118 0016 5B68     		ldr	r3, [r3, #4]
 3119 0018 7B61     		str	r3, [r7, #20]
 3120 001a 3BE0     		b	.L188
 3121              	.L192:
1619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd; )
1620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Get the owner, which is a TCP segment. */
1622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 3122              		.loc 2 1622 0
 3123 001c 7B69     		ldr	r3, [r7, #20]
 3124 001e DB68     		ldr	r3, [r3, #12]
 3125 0020 BB60     		str	r3, [r7, #8]
1623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Hop to the next item before the current gets unlinked. */
1625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 3126              		.loc 2 1625 0
 3127 0022 7B69     		ldr	r3, [r7, #20]
 3128 0024 5B68     		ldr	r3, [r3, #4]
 3129 0026 7B61     		str	r3, [r7, #20]
1626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			/* Fast retransmission:
1628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			When 3 packets with a higher sequence number have been acknowledged
1629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			by the peer, it is very unlikely a current packet will ever arrive.
1630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			It will be retransmitted far before the RTO. */
1631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 3130              		.loc 2 1631 0
 3131 0028 BB68     		ldr	r3, [r7, #8]
 3132 002a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3133 002c 03F00203 		and	r3, r3, #2
 3134 0030 DBB2     		uxtb	r3, r3
 3135 0032 002B     		cmp	r3, #0
 3136 0034 2ED1     		bne	.L188
1632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 3137              		.loc 2 1632 0 discriminator 1
 3138 0036 BB68     		ldr	r3, [r7, #8]
 3139 0038 1B68     		ldr	r3, [r3]
 3140 003a 1846     		mov	r0, r3
 3141 003c 3968     		ldr	r1, [r7]
 3142 003e FFF7FEFF 		bl	xSequenceLessThan
 3143 0042 0346     		mov	r3, r0
1631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 3144              		.loc 2 1631 0 discriminator 1
 3145 0044 002B     		cmp	r3, #0
 3146 0046 25D0     		beq	.L188
1633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 3147              		.loc 2 1633 0
 3148 0048 BB68     		ldr	r3, [r7, #8]
 3149 004a 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 3150 004c 0133     		adds	r3, r3, #1
 3151 004e DAB2     		uxtb	r2, r3
1632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 3152              		.loc 2 1632 0
 3153 0050 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccuG1sHT.s 			page 92


 3154 0052 5A75     		strb	r2, [r3, #21]
 3155              		.loc 2 1633 0
 3156 0054 BB68     		ldr	r3, [r7, #8]
 3157 0056 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
1632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 3158              		.loc 2 1632 0
 3159 0058 032B     		cmp	r3, #3
 3160 005a 1BD1     		bne	.L188
1634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			{
1635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 3161              		.loc 2 1635 0
 3162 005c BB68     		ldr	r3, [r7, #8]
 3163 005e 0022     		movs	r2, #0
 3164 0060 1A75     		strb	r2, [r3, #20]
1636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Not clearing 'ucDupAckCount' yet as more SACK's might come in
1638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				which might lead to a second fast rexmit. */
1639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) 
 3165              		.loc 2 1639 0
 3166 0062 114B     		ldr	r3, .L194
 3167 0064 1B68     		ldr	r3, [r3]
 3168 0066 002B     		cmp	r3, #0
 3169 0068 03DB     		blt	.L189
 3170              		.loc 2 1639 0 is_stmt 0 discriminator 1
 3171 006a 7B68     		ldr	r3, [r7, #4]
 3172 006c B3F8B830 		ldrh	r3, [r3, #184]
 3173 0070 172B     		cmp	r3, #23
 3174              	.L189:
1640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				{
1641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %lu < %lu\n",
1642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber,
1643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 						ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
1644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 					FreeRTOS_flush_logging( );
1645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				}
1646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Remove it from xWaitQueue. */
1648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				uxListRemove( &pxSegment->xQueueItem );
 3175              		.loc 2 1648 0 is_stmt 1
 3176 0072 BB68     		ldr	r3, [r7, #8]
 3177 0074 1833     		adds	r3, r3, #24
 3178 0076 1846     		mov	r0, r3
 3179 0078 FFF7FEFF 		bl	uxListRemove
1649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				/* Add this segment to the priority queue so it gets
1651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				retransmitted immediately. */
1652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 3180              		.loc 2 1652 0
 3181 007c 7B68     		ldr	r3, [r7, #4]
 3182 007e 03F14002 		add	r2, r3, #64
 3183 0082 BB68     		ldr	r3, [r7, #8]
 3184 0084 1833     		adds	r3, r3, #24
 3185 0086 1046     		mov	r0, r2
 3186 0088 1946     		mov	r1, r3
 3187 008a FFF7FEFF 		bl	vListInsertFifo
1653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulCount++;
 3188              		.loc 2 1653 0
 3189 008e 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccuG1sHT.s 			page 93


 3190 0090 0133     		adds	r3, r3, #1
 3191 0092 3B61     		str	r3, [r7, #16]
 3192              	.L188:
1618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd; )
 3193              		.loc 2 1618 0 discriminator 1
 3194 0094 7A69     		ldr	r2, [r7, #20]
 3195 0096 FB68     		ldr	r3, [r7, #12]
 3196 0098 9A42     		cmp	r2, r3
 3197 009a BFD1     		bne	.L192
1654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			}
1655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return ulCount;
 3198              		.loc 2 1657 0
 3199 009c 3B69     		ldr	r3, [r7, #16]
1658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 3200              		.loc 2 1658 0
 3201 009e 1846     		mov	r0, r3
 3202 00a0 1837     		adds	r7, r7, #24
 3203              	.LCFI160:
 3204              		.cfi_def_cfa_offset 8
 3205 00a2 BD46     		mov	sp, r7
 3206              	.LCFI161:
 3207              		.cfi_def_cfa_register 13
 3208              		@ sp needed
 3209 00a4 80BD     		pop	{r7, pc}
 3210              	.L195:
 3211 00a6 00BF     		.align	2
 3212              	.L194:
 3213 00a8 00000000 		.word	xTCPWindowLoggingLevel
 3214              		.cfi_endproc
 3215              	.LFE56:
 3217              		.section	.text.ulTCPWindowTxAck,"ax",%progbits
 3218              		.align	2
 3219              		.global	ulTCPWindowTxAck
 3220              		.thumb
 3221              		.thumb_func
 3223              	ulTCPWindowTxAck:
 3224              	.LFB57:
1659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
1665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 3225              		.loc 2 1665 0
 3226              		.cfi_startproc
 3227              		@ args = 0, pretend = 0, frame = 16
 3228              		@ frame_needed = 1, uses_anonymous_args = 0
 3229 0000 80B5     		push	{r7, lr}
 3230              	.LCFI162:
 3231              		.cfi_def_cfa_offset 8
 3232              		.cfi_offset 7, -8
 3233              		.cfi_offset 14, -4
 3234 0002 84B0     		sub	sp, sp, #16
 3235              	.LCFI163:
ARM GAS  /tmp/ccuG1sHT.s 			page 94


 3236              		.cfi_def_cfa_offset 24
 3237 0004 00AF     		add	r7, sp, #0
 3238              	.LCFI164:
 3239              		.cfi_def_cfa_register 7
 3240 0006 7860     		str	r0, [r7, #4]
 3241 0008 3960     		str	r1, [r7]
1666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulFirstSequence, ulReturn;
1667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Receive a normal ACK. */
1669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 3242              		.loc 2 1670 0
 3243 000a 7B68     		ldr	r3, [r7, #4]
 3244 000c 1B6A     		ldr	r3, [r3, #32]
 3245 000e BB60     		str	r3, [r7, #8]
1671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 3246              		.loc 2 1672 0
 3247 0010 3868     		ldr	r0, [r7]
 3248 0012 B968     		ldr	r1, [r7, #8]
 3249 0014 FFF7FEFF 		bl	xSequenceLessThanOrEqual
 3250 0018 0346     		mov	r3, r0
 3251 001a 002B     		cmp	r3, #0
 3252 001c 02D0     		beq	.L197
1673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulReturn = 0UL;
 3253              		.loc 2 1674 0
 3254 001e 0023     		movs	r3, #0
 3255 0020 FB60     		str	r3, [r7, #12]
 3256 0022 05E0     		b	.L198
 3257              	.L197:
1675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		else
1677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 3258              		.loc 2 1678 0
 3259 0024 7868     		ldr	r0, [r7, #4]
 3260 0026 B968     		ldr	r1, [r7, #8]
 3261 0028 3A68     		ldr	r2, [r7]
 3262 002a FFF7FEFF 		bl	prvTCPWindowTxCheckAck
 3263 002e F860     		str	r0, [r7, #12]
 3264              	.L198:
1679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return ulReturn;
 3265              		.loc 2 1681 0
 3266 0030 FB68     		ldr	r3, [r7, #12]
1682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 3267              		.loc 2 1682 0
 3268 0032 1846     		mov	r0, r3
 3269 0034 1037     		adds	r7, r7, #16
 3270              	.LCFI165:
 3271              		.cfi_def_cfa_offset 8
 3272 0036 BD46     		mov	sp, r7
 3273              	.LCFI166:
 3274              		.cfi_def_cfa_register 13
 3275              		@ sp needed
ARM GAS  /tmp/ccuG1sHT.s 			page 95


 3276 0038 80BD     		pop	{r7, pc}
 3277              		.cfi_endproc
 3278              	.LFE57:
 3280 003a 00BF     		.section	.text.ulTCPWindowTxSack,"ax",%progbits
 3281              		.align	2
 3282              		.global	ulTCPWindowTxSack
 3283              		.thumb
 3284              		.thumb_func
 3286              	ulTCPWindowTxSack:
 3287              	.LFB58:
1683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #endif /* ipconfigUSE_TCP_WIN == 1 */
1685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** /*-----------------------------------------------------------*/
1686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** #if( ipconfigUSE_TCP_WIN == 1 )
1688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
1690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	{
 3288              		.loc 2 1690 0
 3289              		.cfi_startproc
 3290              		@ args = 0, pretend = 0, frame = 24
 3291              		@ frame_needed = 1, uses_anonymous_args = 0
 3292 0000 80B5     		push	{r7, lr}
 3293              	.LCFI167:
 3294              		.cfi_def_cfa_offset 8
 3295              		.cfi_offset 7, -8
 3296              		.cfi_offset 14, -4
 3297 0002 86B0     		sub	sp, sp, #24
 3298              	.LCFI168:
 3299              		.cfi_def_cfa_offset 32
 3300 0004 00AF     		add	r7, sp, #0
 3301              	.LCFI169:
 3302              		.cfi_def_cfa_register 7
 3303 0006 F860     		str	r0, [r7, #12]
 3304 0008 B960     		str	r1, [r7, #8]
 3305 000a 7A60     		str	r2, [r7, #4]
1691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulAckCount = 0UL;
 3306              		.loc 2 1691 0
 3307 000c 0023     		movs	r3, #0
 3308 000e 7B61     		str	r3, [r7, #20]
1692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 3309              		.loc 2 1692 0
 3310 0010 FB68     		ldr	r3, [r7, #12]
 3311 0012 1B6A     		ldr	r3, [r3, #32]
 3312 0014 3B61     		str	r3, [r7, #16]
1693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		/* Receive a SACK option. */
1695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 3313              		.loc 2 1695 0
 3314 0016 F868     		ldr	r0, [r7, #12]
 3315 0018 B968     		ldr	r1, [r7, #8]
 3316 001a 7A68     		ldr	r2, [r7, #4]
 3317 001c FFF7FEFF 		bl	prvTCPWindowTxCheckAck
 3318 0020 7861     		str	r0, [r7, #20]
1696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 3319              		.loc 2 1696 0
 3320 0022 F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/ccuG1sHT.s 			page 96


 3321 0024 B968     		ldr	r1, [r7, #8]
 3322 0026 FFF7FEFF 		bl	prvTCPWindowFastRetransmit
1697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber )
 3323              		.loc 2 1698 0
 3324 002a 064B     		ldr	r3, .L203
 3325 002c 1B68     		ldr	r3, [r3]
 3326 002e 002B     		cmp	r3, #0
 3327 0030 03DD     		ble	.L201
 3328              		.loc 2 1698 0 is_stmt 0 discriminator 1
 3329 0032 B868     		ldr	r0, [r7, #8]
 3330 0034 3969     		ldr	r1, [r7, #16]
 3331 0036 FFF7FEFF 		bl	xSequenceGreaterThan
 3332              	.L201:
1699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		{
1700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %lu to %lu (ack = %lu)\n",
1701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->usPeerPortNumber,
1702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->usOurPortNumber,
1703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulFirst - pxWindow->tx.ulFirstSequenceNumber,
1704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				ulLast - pxWindow->tx.ulFirstSequenceNumber,
1705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
1706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 			FreeRTOS_flush_logging( );
1707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		}
1708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 
1709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 		return ulAckCount;
 3333              		.loc 2 1709 0 is_stmt 1
 3334 003a 7B69     		ldr	r3, [r7, #20]
1710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_TCP_WIN.c **** 	}
 3335              		.loc 2 1710 0
 3336 003c 1846     		mov	r0, r3
 3337 003e 1837     		adds	r7, r7, #24
 3338              	.LCFI170:
 3339              		.cfi_def_cfa_offset 8
 3340 0040 BD46     		mov	sp, r7
 3341              	.LCFI171:
 3342              		.cfi_def_cfa_register 13
 3343              		@ sp needed
 3344 0042 80BD     		pop	{r7, pc}
 3345              	.L204:
 3346              		.align	2
 3347              	.L203:
 3348 0044 00000000 		.word	xTCPWindowLoggingLevel
 3349              		.cfi_endproc
 3350              	.LFE58:
 3352              		.text
 3353              	.Letext0:
 3354              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3355              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3356              		.file 6 "../../../FreeRTOS_9_0/Source/include/list.h"
 3357              		.file 7 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_TCP_WIN.h"
ARM GAS  /tmp/ccuG1sHT.s 			page 97


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FreeRTOS_TCP_WIN.c
     /tmp/ccuG1sHT.s:21     .text.FreeRTOS_min_int32:0000000000000000 $t
     /tmp/ccuG1sHT.s:25     .text.FreeRTOS_min_int32:0000000000000000 FreeRTOS_min_int32
     /tmp/ccuG1sHT.s:68     .text.FreeRTOS_min_uint32:0000000000000000 $t
     /tmp/ccuG1sHT.s:72     .text.FreeRTOS_min_uint32:0000000000000000 FreeRTOS_min_uint32
     /tmp/ccuG1sHT.s:114    .bss.xTCPSegments:0000000000000000 $d
     /tmp/ccuG1sHT.s:117    .bss.xTCPSegments:0000000000000000 xTCPSegments
     /tmp/ccuG1sHT.s:120    .bss.xSegmentList:0000000000000000 $d
     /tmp/ccuG1sHT.s:123    .bss.xSegmentList:0000000000000000 xSegmentList
     /tmp/ccuG1sHT.s:130    .bss.xTCPWindowLoggingLevel:0000000000000000 xTCPWindowLoggingLevel
     /tmp/ccuG1sHT.s:127    .bss.xTCPWindowLoggingLevel:0000000000000000 $d
     /tmp/ccuG1sHT.s:133    .text.xSequenceLessThanOrEqual:0000000000000000 $t
     /tmp/ccuG1sHT.s:137    .text.xSequenceLessThanOrEqual:0000000000000000 xSequenceLessThanOrEqual
     /tmp/ccuG1sHT.s:182    .text.xSequenceLessThan:0000000000000000 $t
     /tmp/ccuG1sHT.s:186    .text.xSequenceLessThan:0000000000000000 xSequenceLessThan
     /tmp/ccuG1sHT.s:231    .text.xSequenceGreaterThan:0000000000000000 $t
     /tmp/ccuG1sHT.s:235    .text.xSequenceGreaterThan:0000000000000000 xSequenceGreaterThan
     /tmp/ccuG1sHT.s:280    .text.xSequenceGreaterThanOrEqual:0000000000000000 $t
     /tmp/ccuG1sHT.s:284    .text.xSequenceGreaterThanOrEqual:0000000000000000 xSequenceGreaterThanOrEqual
     /tmp/ccuG1sHT.s:328    .text.vListInsertFifo:0000000000000000 $t
     /tmp/ccuG1sHT.s:332    .text.vListInsertFifo:0000000000000000 vListInsertFifo
     /tmp/ccuG1sHT.s:458    .text.vListInsertGeneric:0000000000000000 vListInsertGeneric
     /tmp/ccuG1sHT.s:371    .text.vTCPTimerSet:0000000000000000 $t
     /tmp/ccuG1sHT.s:375    .text.vTCPTimerSet:0000000000000000 vTCPTimerSet
     /tmp/ccuG1sHT.s:411    .text.ulTimerGetAge:0000000000000000 $t
     /tmp/ccuG1sHT.s:415    .text.ulTimerGetAge:0000000000000000 ulTimerGetAge
     /tmp/ccuG1sHT.s:453    .text.vListInsertGeneric:0000000000000000 $t
     /tmp/ccuG1sHT.s:523    .text.prvCreateSectors:0000000000000000 $t
     /tmp/ccuG1sHT.s:527    .text.prvCreateSectors:0000000000000000 prvCreateSectors
     /tmp/ccuG1sHT.s:637    .text.prvCreateSectors:0000000000000098 $d
     /tmp/ccuG1sHT.s:643    .text.xTCPWindowRxFind:0000000000000000 $t
     /tmp/ccuG1sHT.s:647    .text.xTCPWindowRxFind:0000000000000000 xTCPWindowRxFind
     /tmp/ccuG1sHT.s:726    .text.xTCPWindowNew:0000000000000000 $t
     /tmp/ccuG1sHT.s:730    .text.xTCPWindowNew:0000000000000000 xTCPWindowNew
     /tmp/ccuG1sHT.s:892    .text.xTCPWindowNew:00000000000000c8 $d
     /tmp/ccuG1sHT.s:897    .text.xTCPWindowRxEmpty:0000000000000000 $t
     /tmp/ccuG1sHT.s:902    .text.xTCPWindowRxEmpty:0000000000000000 xTCPWindowRxEmpty
     /tmp/ccuG1sHT.s:966    .text.xTCPWindowGetHead:0000000000000000 $t
     /tmp/ccuG1sHT.s:970    .text.xTCPWindowGetHead:0000000000000000 xTCPWindowGetHead
     /tmp/ccuG1sHT.s:1036   .text.xTCPWindowPeekHead:0000000000000000 $t
     /tmp/ccuG1sHT.s:1040   .text.xTCPWindowPeekHead:0000000000000000 xTCPWindowPeekHead
     /tmp/ccuG1sHT.s:1107   .text.vTCPWindowFree:0000000000000000 $t
     /tmp/ccuG1sHT.s:1111   .text.vTCPWindowFree:0000000000000000 vTCPWindowFree
     /tmp/ccuG1sHT.s:1181   .text.vTCPWindowFree:0000000000000050 $d
     /tmp/ccuG1sHT.s:1186   .text.vTCPWindowDestroy:0000000000000000 $t
     /tmp/ccuG1sHT.s:1191   .text.vTCPWindowDestroy:0000000000000000 vTCPWindowDestroy
     /tmp/ccuG1sHT.s:1284   .text.vTCPWindowCreate:0000000000000000 $t
     /tmp/ccuG1sHT.s:1289   .text.vTCPWindowCreate:0000000000000000 vTCPWindowCreate
     /tmp/ccuG1sHT.s:1379   .text.vTCPWindowInit:0000000000000000 vTCPWindowInit
     /tmp/ccuG1sHT.s:1369   .text.vTCPWindowCreate:000000000000006c $d
     /tmp/ccuG1sHT.s:1374   .text.vTCPWindowInit:0000000000000000 $t
     /tmp/ccuG1sHT.s:1508   .text.xTCPWindowRxConfirm:0000000000000000 $t
     /tmp/ccuG1sHT.s:1512   .text.xTCPWindowRxConfirm:0000000000000000 xTCPWindowRxConfirm
     /tmp/ccuG1sHT.s:1630   .text.lTCPWindowRxCheck:0000000000000000 $t
     /tmp/ccuG1sHT.s:1635   .text.lTCPWindowRxCheck:0000000000000000 lTCPWindowRxCheck
     /tmp/ccuG1sHT.s:1915   .text.lTCPWindowRxCheck:00000000000001bc $d
ARM GAS  /tmp/ccuG1sHT.s 			page 98


     /tmp/ccuG1sHT.s:1920   .text.lTCPIncrementTxPosition:0000000000000000 $t
     /tmp/ccuG1sHT.s:1924   .text.lTCPIncrementTxPosition:0000000000000000 lTCPIncrementTxPosition
     /tmp/ccuG1sHT.s:1980   .text.lTCPWindowTxAdd:0000000000000000 $t
     /tmp/ccuG1sHT.s:1985   .text.lTCPWindowTxAdd:0000000000000000 lTCPWindowTxAdd
     /tmp/ccuG1sHT.s:2218   .text.lTCPWindowTxAdd:0000000000000160 $d
     /tmp/ccuG1sHT.s:2223   .text.xTCPWindowTxDone:0000000000000000 $t
     /tmp/ccuG1sHT.s:2228   .text.xTCPWindowTxDone:0000000000000000 xTCPWindowTxDone
     /tmp/ccuG1sHT.s:2272   .text.prvTCPWindowTxHasSpace:0000000000000000 $t
     /tmp/ccuG1sHT.s:2276   .text.prvTCPWindowTxHasSpace:0000000000000000 prvTCPWindowTxHasSpace
     /tmp/ccuG1sHT.s:2388   .text.xTCPWindowTxHasData:0000000000000000 $t
     /tmp/ccuG1sHT.s:2393   .text.xTCPWindowTxHasData:0000000000000000 xTCPWindowTxHasData
     /tmp/ccuG1sHT.s:2534   .text.ulTCPWindowTxGet:0000000000000000 $t
     /tmp/ccuG1sHT.s:2539   .text.ulTCPWindowTxGet:0000000000000000 ulTCPWindowTxGet
     /tmp/ccuG1sHT.s:2811   .text.ulTCPWindowTxGet:00000000000001a4 $d
     /tmp/ccuG1sHT.s:2816   .text.prvTCPWindowTxCheckAck:0000000000000000 $t
     /tmp/ccuG1sHT.s:2820   .text.prvTCPWindowTxCheckAck:0000000000000000 prvTCPWindowTxCheckAck
     /tmp/ccuG1sHT.s:3081   .text.prvTCPWindowTxCheckAck:0000000000000180 $d
     /tmp/ccuG1sHT.s:3086   .text.prvTCPWindowFastRetransmit:0000000000000000 $t
     /tmp/ccuG1sHT.s:3090   .text.prvTCPWindowFastRetransmit:0000000000000000 prvTCPWindowFastRetransmit
     /tmp/ccuG1sHT.s:3213   .text.prvTCPWindowFastRetransmit:00000000000000a8 $d
     /tmp/ccuG1sHT.s:3218   .text.ulTCPWindowTxAck:0000000000000000 $t
     /tmp/ccuG1sHT.s:3223   .text.ulTCPWindowTxAck:0000000000000000 ulTCPWindowTxAck
     /tmp/ccuG1sHT.s:3281   .text.ulTCPWindowTxSack:0000000000000000 $t
     /tmp/ccuG1sHT.s:3286   .text.ulTCPWindowTxSack:0000000000000000 ulTCPWindowTxSack
     /tmp/ccuG1sHT.s:3348   .text.ulTCPWindowTxSack:0000000000000044 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xTaskGetTickCount
vListInitialise
pvPortMalloc
memset
uxListRemove

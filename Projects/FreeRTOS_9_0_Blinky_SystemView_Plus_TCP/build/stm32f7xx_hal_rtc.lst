ARM GAS  /tmp/cctjoR32.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f7xx_hal_rtc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_RTC_Init,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_RTC_Init
  23              		.thumb
  24              		.thumb_func
  26              	HAL_RTC_Init:
  27              	.LFB135:
  28              		.file 1 "../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c"
   1:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
   2:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
   3:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @file    stm32f7xx_hal_rtc.c
   4:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @version V1.1.2
   6:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @date    23-September-2016 
   7:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   8:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following 
   9:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
  10:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
  11:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Time and Date functions
  12:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Alarm functions
  13:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral Control functions   
  14:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral State functions
  15:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         
  16:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   @verbatim
  17:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  18:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ##### Backup Domain Operating Condition #####
  19:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  20:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  21:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  22:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        VDD supply is powered off.
  23:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        To retain the content of the RTC backup registers, backup SRAM, and supply 
  24:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  25:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  26:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  27:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  28:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  29:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The RTC
  30:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The LSE oscillator
ARM GAS  /tmp/cctjoR32.s 			page 2


  31:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The backup SRAM when the low power backup regulator is enabled
  32:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  33:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  34:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  35:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        the following pins are available:
  36:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  37:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  38:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  39:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  40:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  41:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  42:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  43:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin 
  44:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as the RTC_AF2 pin
  45:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC1 can be used as the RTC_AF3 pin
  46:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              
  47:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  48:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  49:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  50:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        to their reset values. The BKPSRAM is not affected by this reset. The only
  51:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        way to reset the BKPSRAM is through the Flash interface by requesting 
  52:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        a protection level change from 1 to 0.
  53:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  54:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the 
  55:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR). 
  56:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.  
  57:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  58:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  59:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  60:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data 
  61:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write 
  62:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        accesses. 
  63:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  64:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  65:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() function.
  66:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  67:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  68:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  69:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  70:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  71:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ##### How to use this driver #####
  72:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  73:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] 
  74:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  75:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  76:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  77:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  78:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Time and Date configuration ***
  79:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ===================================
  80:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] 
  81:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime() 
  82:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  83:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions. 
  84:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  85:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Alarm configuration ***
  86:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ===========================
  87:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..]
ARM GAS  /tmp/cctjoR32.s 			page 3


  88:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function. 
  89:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() fu
  90:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  91:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  92:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  93:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  94:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate 
  95:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        function.
  96:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
  97:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  98:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and 
  99:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Standby low power modes.
 100:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending 
 101:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 102:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        or the RTC wakeup events.
 103:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the 
 104:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
 105:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
 106:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        is LSE or LSI.
 107:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 108:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    @endverbatim
 109:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 110:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @attention
 111:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 112:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 113:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 114:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 115:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * are permitted provided that the following conditions are met:
 116:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 117:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer.
 118:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 119:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer in the documentation
 120:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      and/or other materials provided with the distribution.
 121:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 122:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      may be used to endorse or promote products derived from this software
 123:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      without specific prior written permission.
 124:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 125:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 126:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 127:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 128:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 129:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 130:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 131:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 132:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 133:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 134:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 135:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 136:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 137:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */ 
 138:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 139:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 140:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #include "stm32f7xx_hal.h"
 141:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 142:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 143:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 144:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
ARM GAS  /tmp/cctjoR32.s 			page 4


 145:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 146:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC RTC
 147:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief RTC HAL module driver
 148:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 149:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 150:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 151:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 152:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 153:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 154:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 155:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 156:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 157:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 158:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private functions ---------------------------------------------------------*/
 159:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 160:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 161:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 162:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 163:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 164:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group1 Initialization and de-initialization functions 
 165:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions 
 166:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 167:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim    
 168:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 169:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 170:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 171:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the 
 172:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable 
 173:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode, 
 174:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 175:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. 
 176:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 177:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 13-bit synchronous prescaler.
 178:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the 
 179:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 180:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 181:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 182:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter 
 183:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped 
 184:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is 
 185:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 186:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar 
 187:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes 
 188:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then 
 189:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means 
 190:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the 
 191:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function 
 192:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 193:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
 194:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 195:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 196:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 197:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 198:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 199:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral 
 200:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 201:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
ARM GAS  /tmp/cctjoR32.s 			page 5


 202:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 203:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 204:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 205:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
  29              		.loc 1 205 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 206:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 207:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc == NULL)
  45              		.loc 1 207 0
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 002B     		cmp	r3, #0
  48 000c 01D1     		bne	.L2
 208:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 209:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      return HAL_ERROR;
  49              		.loc 1 209 0
  50 000e 0123     		movs	r3, #1
  51 0010 6BE0     		b	.L3
  52              	.L2:
 210:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 211:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 212:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 213:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 214:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 215:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 216:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 217:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 218:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 219:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 220:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 221:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
  53              		.loc 1 221 0
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 5B7F     		ldrb	r3, [r3, #29]
  56 0016 DBB2     		uxtb	r3, r3
  57 0018 002B     		cmp	r3, #0
  58 001a 05D1     		bne	.L4
 222:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 223:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 224:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
  59              		.loc 1 224 0
  60 001c 7B68     		ldr	r3, [r7, #4]
  61 001e 0022     		movs	r2, #0
  62 0020 1A77     		strb	r2, [r3, #28]
ARM GAS  /tmp/cctjoR32.s 			page 6


 225:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Initialize RTC MSP */
 226:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
  63              		.loc 1 226 0
  64 0022 7868     		ldr	r0, [r7, #4]
  65 0024 FFF7FEFF 		bl	HAL_RTC_MspInit
  66              	.L4:
 227:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 228:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 229:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */  
 230:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;  
  67              		.loc 1 230 0
  68 0028 7B68     		ldr	r3, [r7, #4]
  69 002a 0222     		movs	r2, #2
  70 002c 5A77     		strb	r2, [r3, #29]
 231:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        
 232:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 233:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  71              		.loc 1 233 0
  72 002e 7B68     		ldr	r3, [r7, #4]
  73 0030 1B68     		ldr	r3, [r3]
  74 0032 CA22     		movs	r2, #202
  75 0034 5A62     		str	r2, [r3, #36]
  76 0036 7B68     		ldr	r3, [r7, #4]
  77 0038 1B68     		ldr	r3, [r3]
  78 003a 5322     		movs	r2, #83
  79 003c 5A62     		str	r2, [r3, #36]
 234:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 235:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 236:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
  80              		.loc 1 236 0
  81 003e 7868     		ldr	r0, [r7, #4]
  82 0040 FFF7FEFF 		bl	RTC_EnterInitMode
  83 0044 0346     		mov	r3, r0
  84 0046 002B     		cmp	r3, #0
  85 0048 08D0     		beq	.L5
 237:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 238:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 239:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
  86              		.loc 1 239 0
  87 004a 7B68     		ldr	r3, [r7, #4]
  88 004c 1B68     		ldr	r3, [r3]
  89 004e FF22     		movs	r2, #255
  90 0050 5A62     		str	r2, [r3, #36]
 240:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 241:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 242:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
  91              		.loc 1 242 0
  92 0052 7B68     		ldr	r3, [r7, #4]
  93 0054 0422     		movs	r2, #4
  94 0056 5A77     		strb	r2, [r3, #29]
 243:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 244:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
  95              		.loc 1 244 0
  96 0058 0123     		movs	r3, #1
  97 005a 46E0     		b	.L3
  98              	.L5:
 245:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
ARM GAS  /tmp/cctjoR32.s 			page 7


 246:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 247:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   { 
 248:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
 249:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
  99              		.loc 1 249 0
 100 005c 7B68     		ldr	r3, [r7, #4]
 101 005e 1A68     		ldr	r2, [r3]
 102 0060 7B68     		ldr	r3, [r7, #4]
 103 0062 1B68     		ldr	r3, [r3]
 104 0064 9968     		ldr	r1, [r3, #8]
 105 0066 234B     		ldr	r3, .L6
 106 0068 0B40     		ands	r3, r3, r1
 107 006a 9360     		str	r3, [r2, #8]
 250:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC_CR register */
 251:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
 108              		.loc 1 251 0
 109 006c 7B68     		ldr	r3, [r7, #4]
 110 006e 1B68     		ldr	r3, [r3]
 111 0070 7A68     		ldr	r2, [r7, #4]
 112 0072 1268     		ldr	r2, [r2]
 113 0074 9168     		ldr	r1, [r2, #8]
 114 0076 7A68     		ldr	r2, [r7, #4]
 115 0078 5068     		ldr	r0, [r2, #4]
 116 007a 7A68     		ldr	r2, [r7, #4]
 117 007c 1269     		ldr	r2, [r2, #16]
 118 007e 1043     		orrs	r0, r0, r2
 119 0080 7A68     		ldr	r2, [r7, #4]
 120 0082 5269     		ldr	r2, [r2, #20]
 121 0084 0243     		orrs	r2, r2, r0
 122 0086 0A43     		orrs	r2, r2, r1
 123 0088 9A60     		str	r2, [r3, #8]
 252:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 253:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC PRER */
 254:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 124              		.loc 1 254 0
 125 008a 7B68     		ldr	r3, [r7, #4]
 126 008c 1B68     		ldr	r3, [r3]
 127 008e 7A68     		ldr	r2, [r7, #4]
 128 0090 D268     		ldr	r2, [r2, #12]
 129 0092 1A61     		str	r2, [r3, #16]
 255:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 130              		.loc 1 255 0
 131 0094 7B68     		ldr	r3, [r7, #4]
 132 0096 1B68     		ldr	r3, [r3]
 133 0098 7A68     		ldr	r2, [r7, #4]
 134 009a 1268     		ldr	r2, [r2]
 135 009c 1169     		ldr	r1, [r2, #16]
 136 009e 7A68     		ldr	r2, [r7, #4]
 137 00a0 9268     		ldr	r2, [r2, #8]
 138 00a2 1204     		lsls	r2, r2, #16
 139 00a4 0A43     		orrs	r2, r2, r1
 140 00a6 1A61     		str	r2, [r3, #16]
 256:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 257:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 258:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 141              		.loc 1 258 0
 142 00a8 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cctjoR32.s 			page 8


 143 00aa 1B68     		ldr	r3, [r3]
 144 00ac 7A68     		ldr	r2, [r7, #4]
 145 00ae 1268     		ldr	r2, [r2]
 146 00b0 D268     		ldr	r2, [r2, #12]
 147 00b2 22F08002 		bic	r2, r2, #128
 148 00b6 DA60     		str	r2, [r3, #12]
 259:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 260:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 149              		.loc 1 260 0
 150 00b8 7B68     		ldr	r3, [r7, #4]
 151 00ba 1B68     		ldr	r3, [r3]
 152 00bc 7A68     		ldr	r2, [r7, #4]
 153 00be 1268     		ldr	r2, [r2]
 154 00c0 D26C     		ldr	r2, [r2, #76]
 155 00c2 22F00802 		bic	r2, r2, #8
 156 00c6 DA64     		str	r2, [r3, #76]
 261:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 157              		.loc 1 261 0
 158 00c8 7B68     		ldr	r3, [r7, #4]
 159 00ca 1B68     		ldr	r3, [r3]
 160 00cc 7A68     		ldr	r2, [r7, #4]
 161 00ce 1268     		ldr	r2, [r2]
 162 00d0 D16C     		ldr	r1, [r2, #76]
 163 00d2 7A68     		ldr	r2, [r7, #4]
 164 00d4 9269     		ldr	r2, [r2, #24]
 165 00d6 0A43     		orrs	r2, r2, r1
 166 00d8 DA64     		str	r2, [r3, #76]
 262:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 263:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 264:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 167              		.loc 1 264 0
 168 00da 7B68     		ldr	r3, [r7, #4]
 169 00dc 1B68     		ldr	r3, [r3]
 170 00de FF22     		movs	r2, #255
 171 00e0 5A62     		str	r2, [r3, #36]
 265:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 266:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 267:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 172              		.loc 1 267 0
 173 00e2 7B68     		ldr	r3, [r7, #4]
 174 00e4 0122     		movs	r2, #1
 175 00e6 5A77     		strb	r2, [r3, #29]
 268:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 269:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;
 176              		.loc 1 269 0
 177 00e8 0023     		movs	r3, #0
 178              	.L3:
 270:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 271:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 179              		.loc 1 271 0
 180 00ea 1846     		mov	r0, r3
 181 00ec 0837     		adds	r7, r7, #8
 182              	.LCFI3:
 183              		.cfi_def_cfa_offset 8
 184 00ee BD46     		mov	sp, r7
 185              	.LCFI4:
 186              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cctjoR32.s 			page 9


 187              		@ sp needed
 188 00f0 80BD     		pop	{r7, pc}
 189              	.L7:
 190 00f2 00BF     		.align	2
 191              	.L6:
 192 00f4 BFFF8FFF 		.word	-7340097
 193              		.cfi_endproc
 194              	.LFE135:
 196              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 197              		.align	2
 198              		.global	HAL_RTC_DeInit
 199              		.thumb
 200              		.thumb_func
 202              	HAL_RTC_DeInit:
 203              	.LFB136:
 272:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 273:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 274:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral 
 275:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 276:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 277:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.   
 278:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 279:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 280:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 281:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 204              		.loc 1 281 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 16
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208 0000 80B5     		push	{r7, lr}
 209              	.LCFI5:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 0002 84B0     		sub	sp, sp, #16
 214              	.LCFI6:
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              	.LCFI7:
 218              		.cfi_def_cfa_register 7
 219 0006 7860     		str	r0, [r7, #4]
 282:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 220              		.loc 1 282 0
 221 0008 0023     		movs	r3, #0
 222 000a FB60     		str	r3, [r7, #12]
 283:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 284:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 285:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 286:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 287:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */
 288:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 223              		.loc 1 288 0
 224 000c 7B68     		ldr	r3, [r7, #4]
 225 000e 0222     		movs	r2, #2
 226 0010 5A77     		strb	r2, [r3, #29]
 289:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 290:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/cctjoR32.s 			page 10


 291:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 227              		.loc 1 291 0
 228 0012 7B68     		ldr	r3, [r7, #4]
 229 0014 1B68     		ldr	r3, [r3]
 230 0016 CA22     		movs	r2, #202
 231 0018 5A62     		str	r2, [r3, #36]
 232 001a 7B68     		ldr	r3, [r7, #4]
 233 001c 1B68     		ldr	r3, [r3]
 234 001e 5322     		movs	r2, #83
 235 0020 5A62     		str	r2, [r3, #36]
 292:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 293:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 294:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 236              		.loc 1 294 0
 237 0022 7868     		ldr	r0, [r7, #4]
 238 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 239 0028 0346     		mov	r3, r0
 240 002a 002B     		cmp	r3, #0
 241 002c 08D0     		beq	.L9
 295:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 296:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 297:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 242              		.loc 1 297 0
 243 002e 7B68     		ldr	r3, [r7, #4]
 244 0030 1B68     		ldr	r3, [r3]
 245 0032 FF22     		movs	r2, #255
 246 0034 5A62     		str	r2, [r3, #36]
 298:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 299:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 300:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 247              		.loc 1 300 0
 248 0036 7B68     		ldr	r3, [r7, #4]
 249 0038 0422     		movs	r2, #4
 250 003a 5A77     		strb	r2, [r3, #29]
 301:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 302:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 251              		.loc 1 302 0
 252 003c 0123     		movs	r3, #1
 253 003e 84E0     		b	.L10
 254              	.L9:
 303:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }  
 304:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 305:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 306:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
 307:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)0x00000000;
 255              		.loc 1 307 0
 256 0040 7B68     		ldr	r3, [r7, #4]
 257 0042 1B68     		ldr	r3, [r3]
 258 0044 0022     		movs	r2, #0
 259 0046 1A60     		str	r2, [r3]
 308:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)0x00002101;
 260              		.loc 1 308 0
 261 0048 7B68     		ldr	r3, [r7, #4]
 262 004a 1B68     		ldr	r3, [r3]
 263 004c 42F20112 		movw	r2, #8449
 264 0050 5A60     		str	r2, [r3, #4]
 309:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
ARM GAS  /tmp/cctjoR32.s 			page 11


 310:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000007;
 265              		.loc 1 310 0
 266 0052 7B68     		ldr	r3, [r7, #4]
 267 0054 1B68     		ldr	r3, [r3]
 268 0056 7A68     		ldr	r2, [r7, #4]
 269 0058 1268     		ldr	r2, [r2]
 270 005a 9268     		ldr	r2, [r2, #8]
 271 005c 02F00702 		and	r2, r2, #7
 272 0060 9A60     		str	r2, [r3, #8]
 311:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 312:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 313:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 273              		.loc 1 313 0
 274 0062 FFF7FEFF 		bl	HAL_GetTick
 275 0066 F860     		str	r0, [r7, #12]
 314:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 315:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 316:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 276              		.loc 1 316 0
 277 0068 10E0     		b	.L11
 278              	.L12:
 317:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 318:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 279              		.loc 1 318 0
 280 006a FFF7FEFF 		bl	HAL_GetTick
 281 006e 0246     		mov	r2, r0
 282 0070 FB68     		ldr	r3, [r7, #12]
 283 0072 D31A     		subs	r3, r2, r3
 284 0074 B3F57A7F 		cmp	r3, #1000
 285 0078 08D9     		bls	.L11
 319:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
 320:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 321:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 286              		.loc 1 321 0
 287 007a 7B68     		ldr	r3, [r7, #4]
 288 007c 1B68     		ldr	r3, [r3]
 289 007e FF22     		movs	r2, #255
 290 0080 5A62     		str	r2, [r3, #36]
 322:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 323:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Set RTC state */
 324:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 291              		.loc 1 324 0
 292 0082 7B68     		ldr	r3, [r7, #4]
 293 0084 0322     		movs	r2, #3
 294 0086 5A77     		strb	r2, [r3, #29]
 325:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 326:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 295              		.loc 1 326 0
 296 0088 0323     		movs	r3, #3
 297 008a 5EE0     		b	.L10
 298              	.L11:
 316:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 299              		.loc 1 316 0
 300 008c 7B68     		ldr	r3, [r7, #4]
 301 008e 1B68     		ldr	r3, [r3]
 302 0090 DB68     		ldr	r3, [r3, #12]
 303 0092 03F00403 		and	r3, r3, #4
ARM GAS  /tmp/cctjoR32.s 			page 12


 304 0096 002B     		cmp	r3, #0
 305 0098 E7D0     		beq	.L12
 327:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }      
 328:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 329:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 330:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 331:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000000;
 306              		.loc 1 331 0
 307 009a 7B68     		ldr	r3, [r7, #4]
 308 009c 1B68     		ldr	r3, [r3]
 309 009e 9B68     		ldr	r3, [r3, #8]
 310 00a0 7B68     		ldr	r3, [r7, #4]
 311 00a2 1B68     		ldr	r3, [r3]
 312 00a4 0022     		movs	r2, #0
 313 00a6 9A60     		str	r2, [r3, #8]
 332:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
 314              		.loc 1 332 0
 315 00a8 7B68     		ldr	r3, [r7, #4]
 316 00aa 1B68     		ldr	r3, [r3]
 317 00ac 4FF6FF72 		movw	r2, #65535
 318 00b0 5A61     		str	r2, [r3, #20]
 333:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)0x007F00FF;
 319              		.loc 1 333 0
 320 00b2 7B68     		ldr	r3, [r7, #4]
 321 00b4 1B68     		ldr	r3, [r3]
 322 00b6 274A     		ldr	r2, .L14
 323 00b8 1A61     		str	r2, [r3, #16]
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 324              		.loc 1 334 0
 325 00ba 7B68     		ldr	r3, [r7, #4]
 326 00bc 1B68     		ldr	r3, [r3]
 327 00be 0022     		movs	r2, #0
 328 00c0 DA61     		str	r2, [r3, #28]
 335:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 329              		.loc 1 335 0
 330 00c2 7B68     		ldr	r3, [r7, #4]
 331 00c4 1B68     		ldr	r3, [r3]
 332 00c6 0022     		movs	r2, #0
 333 00c8 1A62     		str	r2, [r3, #32]
 336:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
 334              		.loc 1 336 0
 335 00ca 7B68     		ldr	r3, [r7, #4]
 336 00cc 1B68     		ldr	r3, [r3]
 337 00ce 0022     		movs	r2, #0
 338 00d0 DA62     		str	r2, [r3, #44]
 337:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CALR = (uint32_t)0x00000000;
 339              		.loc 1 337 0
 340 00d2 7B68     		ldr	r3, [r7, #4]
 341 00d4 1B68     		ldr	r3, [r3]
 342 00d6 0022     		movs	r2, #0
 343 00d8 DA63     		str	r2, [r3, #60]
 338:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
 344              		.loc 1 338 0
 345 00da 7B68     		ldr	r3, [r7, #4]
 346 00dc 1B68     		ldr	r3, [r3]
 347 00de 0022     		movs	r2, #0
 348 00e0 5A64     		str	r2, [r3, #68]
ARM GAS  /tmp/cctjoR32.s 			page 13


 339:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
 349              		.loc 1 339 0
 350 00e2 7B68     		ldr	r3, [r7, #4]
 351 00e4 1B68     		ldr	r3, [r3]
 352 00e6 0022     		movs	r2, #0
 353 00e8 9A64     		str	r2, [r3, #72]
 340:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 341:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 342:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)0x00000000;
 354              		.loc 1 342 0
 355 00ea 7B68     		ldr	r3, [r7, #4]
 356 00ec 1B68     		ldr	r3, [r3]
 357 00ee 0022     		movs	r2, #0
 358 00f0 DA60     		str	r2, [r3, #12]
 343:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 344:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 345:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TAMPCR = 0x00000000;
 359              		.loc 1 345 0
 360 00f2 7B68     		ldr	r3, [r7, #4]
 361 00f4 1B68     		ldr	r3, [r3]
 362 00f6 0022     		movs	r2, #0
 363 00f8 1A64     		str	r2, [r3, #64]
 346:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 347:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset Option register */
 348:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR = 0x00000000;
 364              		.loc 1 348 0
 365 00fa 7B68     		ldr	r3, [r7, #4]
 366 00fc 1B68     		ldr	r3, [r3]
 367 00fe 0022     		movs	r2, #0
 368 0100 DA64     		str	r2, [r3, #76]
 349:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 350:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 351:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 369              		.loc 1 351 0
 370 0102 7B68     		ldr	r3, [r7, #4]
 371 0104 1B68     		ldr	r3, [r3]
 372 0106 9B68     		ldr	r3, [r3, #8]
 373 0108 03F02003 		and	r3, r3, #32
 374 010c 002B     		cmp	r3, #0
 375 010e 0ED1     		bne	.L13
 352:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 353:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 376              		.loc 1 353 0
 377 0110 7868     		ldr	r0, [r7, #4]
 378 0112 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 379 0116 0346     		mov	r3, r0
 380 0118 002B     		cmp	r3, #0
 381 011a 08D0     		beq	.L13
 354:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 355:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 356:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 382              		.loc 1 356 0
 383 011c 7B68     		ldr	r3, [r7, #4]
 384 011e 1B68     		ldr	r3, [r3]
 385 0120 FF22     		movs	r2, #255
 386 0122 5A62     		str	r2, [r3, #36]
 357:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
ARM GAS  /tmp/cctjoR32.s 			page 14


 358:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 387              		.loc 1 358 0
 388 0124 7B68     		ldr	r3, [r7, #4]
 389 0126 0422     		movs	r2, #4
 390 0128 5A77     		strb	r2, [r3, #29]
 359:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 360:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 391              		.loc 1 360 0
 392 012a 0123     		movs	r3, #1
 393 012c 0DE0     		b	.L10
 394              	.L13:
 361:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 362:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }    
 363:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 364:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 365:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 366:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 395              		.loc 1 366 0
 396 012e 7B68     		ldr	r3, [r7, #4]
 397 0130 1B68     		ldr	r3, [r3]
 398 0132 FF22     		movs	r2, #255
 399 0134 5A62     		str	r2, [r3, #36]
 367:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 368:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 369:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 400              		.loc 1 369 0
 401 0136 7868     		ldr	r0, [r7, #4]
 402 0138 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 370:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 371:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET; 
 403              		.loc 1 371 0
 404 013c 7B68     		ldr	r3, [r7, #4]
 405 013e 0022     		movs	r2, #0
 406 0140 5A77     		strb	r2, [r3, #29]
 372:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 373:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Release Lock */
 374:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 407              		.loc 1 374 0
 408 0142 7B68     		ldr	r3, [r7, #4]
 409 0144 0022     		movs	r2, #0
 410 0146 1A77     		strb	r2, [r3, #28]
 375:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 376:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 411              		.loc 1 376 0
 412 0148 0023     		movs	r3, #0
 413              	.L10:
 377:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 414              		.loc 1 377 0
 415 014a 1846     		mov	r0, r3
 416 014c 1037     		adds	r7, r7, #16
 417              	.LCFI8:
 418              		.cfi_def_cfa_offset 8
 419 014e BD46     		mov	sp, r7
 420              	.LCFI9:
 421              		.cfi_def_cfa_register 13
 422              		@ sp needed
 423 0150 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cctjoR32.s 			page 15


 424              	.L15:
 425 0152 00BF     		.align	2
 426              	.L14:
 427 0154 FF007F00 		.word	8323327
 428              		.cfi_endproc
 429              	.LFE136:
 431              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
 432              		.align	2
 433              		.weak	HAL_RTC_MspInit
 434              		.thumb
 435              		.thumb_func
 437              	HAL_RTC_MspInit:
 438              	.LFB137:
 378:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 379:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 380:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 381:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 382:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.  
 383:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 384:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 385:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 386:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 439              		.loc 1 386 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 8
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444 0000 80B4     		push	{r7}
 445              	.LCFI10:
 446              		.cfi_def_cfa_offset 4
 447              		.cfi_offset 7, -4
 448 0002 83B0     		sub	sp, sp, #12
 449              	.LCFI11:
 450              		.cfi_def_cfa_offset 16
 451 0004 00AF     		add	r7, sp, #0
 452              	.LCFI12:
 453              		.cfi_def_cfa_register 7
 454 0006 7860     		str	r0, [r7, #4]
 387:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 388:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 389:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 390:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 391:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 392:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */ 
 393:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 455              		.loc 1 393 0
 456 0008 0C37     		adds	r7, r7, #12
 457              	.LCFI13:
 458              		.cfi_def_cfa_offset 4
 459 000a BD46     		mov	sp, r7
 460              	.LCFI14:
 461              		.cfi_def_cfa_register 13
 462              		@ sp needed
 463 000c 5DF8047B 		ldr	r7, [sp], #4
 464              	.LCFI15:
 465              		.cfi_restore 7
 466              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cctjoR32.s 			page 16


 467 0010 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE137:
 471 0012 00BF     		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 472              		.align	2
 473              		.weak	HAL_RTC_MspDeInit
 474              		.thumb
 475              		.thumb_func
 477              	HAL_RTC_MspDeInit:
 478              	.LFB138:
 394:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 395:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 396:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 397:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 398:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC. 
 399:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 400:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 401:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 402:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 479              		.loc 1 402 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 8
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0000 80B4     		push	{r7}
 485              	.LCFI16:
 486              		.cfi_def_cfa_offset 4
 487              		.cfi_offset 7, -4
 488 0002 83B0     		sub	sp, sp, #12
 489              	.LCFI17:
 490              		.cfi_def_cfa_offset 16
 491 0004 00AF     		add	r7, sp, #0
 492              	.LCFI18:
 493              		.cfi_def_cfa_register 7
 494 0006 7860     		str	r0, [r7, #4]
 403:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 404:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 405:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 406:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 407:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 408:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */ 
 409:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 495              		.loc 1 409 0
 496 0008 0C37     		adds	r7, r7, #12
 497              	.LCFI19:
 498              		.cfi_def_cfa_offset 4
 499 000a BD46     		mov	sp, r7
 500              	.LCFI20:
 501              		.cfi_def_cfa_register 13
 502              		@ sp needed
 503 000c 5DF8047B 		ldr	r7, [sp], #4
 504              	.LCFI21:
 505              		.cfi_restore 7
 506              		.cfi_def_cfa_offset 0
 507 0010 7047     		bx	lr
 508              		.cfi_endproc
 509              	.LFE138:
ARM GAS  /tmp/cctjoR32.s 			page 17


 511 0012 00BF     		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 512              		.align	2
 513              		.global	HAL_RTC_SetTime
 514              		.thumb
 515              		.thumb_func
 517              	HAL_RTC_SetTime:
 518              	.LFB139:
 410:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 411:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 412:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
 413:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 414:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 415:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group2 RTC Time and Date functions
 416:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 417:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 418:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
 419:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 420:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 421:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
 422:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
 423:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 424:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 425:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 426:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 427:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 428:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 429:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 430:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 431:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 432:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 433:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime: Pointer to Time structure
 434:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 435:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 436:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BIN: Binary data format 
 437:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BCD: BCD data format
 438:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 439:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 440:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 441:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 519              		.loc 1 441 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 24
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523 0000 90B5     		push	{r4, r7, lr}
 524              	.LCFI22:
 525              		.cfi_def_cfa_offset 12
 526              		.cfi_offset 4, -12
 527              		.cfi_offset 7, -8
 528              		.cfi_offset 14, -4
 529 0002 87B0     		sub	sp, sp, #28
 530              	.LCFI23:
 531              		.cfi_def_cfa_offset 40
 532 0004 00AF     		add	r7, sp, #0
 533              	.LCFI24:
 534              		.cfi_def_cfa_register 7
 535 0006 F860     		str	r0, [r7, #12]
 536 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/cctjoR32.s 			page 18


 537 000a 7A60     		str	r2, [r7, #4]
 442:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 538              		.loc 1 442 0
 539 000c 0023     		movs	r3, #0
 540 000e 7B61     		str	r3, [r7, #20]
 443:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 444:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 445:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 446:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 447:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 448:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 449:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 450:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 541              		.loc 1 450 0
 542 0010 FB68     		ldr	r3, [r7, #12]
 543 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 544 0014 012B     		cmp	r3, #1
 545 0016 01D1     		bne	.L19
 546              		.loc 1 450 0 is_stmt 0 discriminator 1
 547 0018 0223     		movs	r3, #2
 548 001a B0E0     		b	.L20
 549              	.L19:
 550              		.loc 1 450 0 discriminator 2
 551 001c FB68     		ldr	r3, [r7, #12]
 552 001e 0122     		movs	r2, #1
 553 0020 1A77     		strb	r2, [r3, #28]
 451:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 452:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 554              		.loc 1 452 0 is_stmt 1 discriminator 2
 555 0022 FB68     		ldr	r3, [r7, #12]
 556 0024 0222     		movs	r2, #2
 557 0026 5A77     		strb	r2, [r3, #29]
 453:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 454:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 558              		.loc 1 454 0 discriminator 2
 559 0028 7B68     		ldr	r3, [r7, #4]
 560 002a 002B     		cmp	r3, #0
 561 002c 26D1     		bne	.L21
 455:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 456:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 562              		.loc 1 456 0
 563 002e FB68     		ldr	r3, [r7, #12]
 564 0030 1B68     		ldr	r3, [r3]
 565 0032 9B68     		ldr	r3, [r3, #8]
 566 0034 03F04003 		and	r3, r3, #64
 567 0038 002B     		cmp	r3, #0
 568 003a 02D1     		bne	.L22
 457:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 458:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 459:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 460:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 461:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 462:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 463:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 569              		.loc 1 463 0
 570 003c BB68     		ldr	r3, [r7, #8]
 571 003e 0022     		movs	r2, #0
ARM GAS  /tmp/cctjoR32.s 			page 19


 572 0040 1A73     		strb	r2, [r3, #12]
 573              	.L22:
 464:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 465:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 466:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 467:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 468:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 469:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 574              		.loc 1 469 0
 575 0042 BB68     		ldr	r3, [r7, #8]
 576 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 577 0046 1846     		mov	r0, r3
 578 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 579 004c 0346     		mov	r3, r0
 580 004e 1C04     		lsls	r4, r3, #16
 470:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 581              		.loc 1 470 0
 582 0050 BB68     		ldr	r3, [r7, #8]
 583 0052 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 584 0054 1846     		mov	r0, r3
 585 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 586 005a 0346     		mov	r3, r0
 587 005c 1B02     		lsls	r3, r3, #8
 469:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 588              		.loc 1 469 0
 589 005e 1C43     		orrs	r4, r4, r3
 471:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 590              		.loc 1 471 0
 591 0060 BB68     		ldr	r3, [r7, #8]
 592 0062 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 593 0064 1846     		mov	r0, r3
 594 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 595 006a 0346     		mov	r3, r0
 470:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 596              		.loc 1 470 0
 597 006c 44EA0302 		orr	r2, r4, r3
 472:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16));  
 598              		.loc 1 472 0
 599 0070 BB68     		ldr	r3, [r7, #8]
 600 0072 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 601 0074 1B04     		lsls	r3, r3, #16
 469:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 602              		.loc 1 469 0
 603 0076 1343     		orrs	r3, r3, r2
 604 0078 7B61     		str	r3, [r7, #20]
 605 007a 20E0     		b	.L23
 606              	.L21:
 473:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 474:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 475:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 476:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 607              		.loc 1 476 0
 608 007c FB68     		ldr	r3, [r7, #12]
 609 007e 1B68     		ldr	r3, [r3]
 610 0080 9B68     		ldr	r3, [r3, #8]
 611 0082 03F04003 		and	r3, r3, #64
 612 0086 002B     		cmp	r3, #0
ARM GAS  /tmp/cctjoR32.s 			page 20


 613 0088 07D0     		beq	.L24
 477:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 478:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 614              		.loc 1 478 0
 615 008a BB68     		ldr	r3, [r7, #8]
 616 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 617 008e 1846     		mov	r0, r3
 618 0090 FFF7FEFF 		bl	RTC_Bcd2ToByte
 619 0094 0346     		mov	r3, r0
 620 0096 7B61     		str	r3, [r7, #20]
 621 0098 02E0     		b	.L25
 622              	.L24:
 479:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 480:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 481:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 482:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 483:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 484:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 623              		.loc 1 484 0
 624 009a BB68     		ldr	r3, [r7, #8]
 625 009c 0022     		movs	r2, #0
 626 009e 1A73     		strb	r2, [r3, #12]
 627              	.L25:
 485:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 486:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 487:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 488:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 489:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 628              		.loc 1 489 0
 629 00a0 BB68     		ldr	r3, [r7, #8]
 630 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 631 00a4 1A04     		lsls	r2, r3, #16
 490:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 632              		.loc 1 490 0
 633 00a6 BB68     		ldr	r3, [r7, #8]
 634 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 635 00aa 1B02     		lsls	r3, r3, #8
 489:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 636              		.loc 1 489 0
 637 00ac 1343     		orrs	r3, r3, r2
 491:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 638              		.loc 1 491 0
 639 00ae BA68     		ldr	r2, [r7, #8]
 640 00b0 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 490:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 641              		.loc 1 490 0
 642 00b2 1A43     		orrs	r2, r2, r3
 492:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16));   
 643              		.loc 1 492 0
 644 00b4 BB68     		ldr	r3, [r7, #8]
 645 00b6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 646 00b8 1B04     		lsls	r3, r3, #16
 489:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 647              		.loc 1 489 0
 648 00ba 1343     		orrs	r3, r3, r2
 649 00bc 7B61     		str	r3, [r7, #20]
 650              	.L23:
ARM GAS  /tmp/cctjoR32.s 			page 21


 493:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 494:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 495:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 496:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 651              		.loc 1 496 0
 652 00be FB68     		ldr	r3, [r7, #12]
 653 00c0 1B68     		ldr	r3, [r3]
 654 00c2 CA22     		movs	r2, #202
 655 00c4 5A62     		str	r2, [r3, #36]
 656 00c6 FB68     		ldr	r3, [r7, #12]
 657 00c8 1B68     		ldr	r3, [r3]
 658 00ca 5322     		movs	r2, #83
 659 00cc 5A62     		str	r2, [r3, #36]
 497:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 498:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 499:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 660              		.loc 1 499 0
 661 00ce F868     		ldr	r0, [r7, #12]
 662 00d0 FFF7FEFF 		bl	RTC_EnterInitMode
 663 00d4 0346     		mov	r3, r0
 664 00d6 002B     		cmp	r3, #0
 665 00d8 0BD0     		beq	.L26
 500:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 501:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 502:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 666              		.loc 1 502 0
 667 00da FB68     		ldr	r3, [r7, #12]
 668 00dc 1B68     		ldr	r3, [r3]
 669 00de FF22     		movs	r2, #255
 670 00e0 5A62     		str	r2, [r3, #36]
 503:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 504:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 505:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 671              		.loc 1 505 0
 672 00e2 FB68     		ldr	r3, [r7, #12]
 673 00e4 0422     		movs	r2, #4
 674 00e6 5A77     		strb	r2, [r3, #29]
 506:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 507:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 508:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 675              		.loc 1 508 0
 676 00e8 FB68     		ldr	r3, [r7, #12]
 677 00ea 0022     		movs	r2, #0
 678 00ec 1A77     		strb	r2, [r3, #28]
 509:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 510:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 679              		.loc 1 510 0
 680 00ee 0123     		movs	r3, #1
 681 00f0 45E0     		b	.L20
 682              	.L26:
 511:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
 512:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 513:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 514:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 515:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 683              		.loc 1 515 0
 684 00f2 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cctjoR32.s 			page 22


 685 00f4 1A68     		ldr	r2, [r3]
 686 00f6 7969     		ldr	r1, [r7, #20]
 687 00f8 234B     		ldr	r3, .L28
 688 00fa 0B40     		ands	r3, r3, r1
 689 00fc 1360     		str	r3, [r2]
 516:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 517:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 518:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 690              		.loc 1 518 0
 691 00fe FB68     		ldr	r3, [r7, #12]
 692 0100 1B68     		ldr	r3, [r3]
 693 0102 FA68     		ldr	r2, [r7, #12]
 694 0104 1268     		ldr	r2, [r2]
 695 0106 9268     		ldr	r2, [r2, #8]
 696 0108 22F48022 		bic	r2, r2, #262144
 697 010c 9A60     		str	r2, [r3, #8]
 519:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 520:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 521:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 698              		.loc 1 521 0
 699 010e FB68     		ldr	r3, [r7, #12]
 700 0110 1B68     		ldr	r3, [r3]
 701 0112 FA68     		ldr	r2, [r7, #12]
 702 0114 1268     		ldr	r2, [r2]
 703 0116 9168     		ldr	r1, [r2, #8]
 704 0118 BA68     		ldr	r2, [r7, #8]
 705 011a 1069     		ldr	r0, [r2, #16]
 706 011c BA68     		ldr	r2, [r7, #8]
 707 011e 5269     		ldr	r2, [r2, #20]
 708 0120 0243     		orrs	r2, r2, r0
 709 0122 0A43     		orrs	r2, r2, r1
 710 0124 9A60     		str	r2, [r3, #8]
 522:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 523:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 524:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 711              		.loc 1 524 0
 712 0126 FB68     		ldr	r3, [r7, #12]
 713 0128 1B68     		ldr	r3, [r3]
 714 012a FA68     		ldr	r2, [r7, #12]
 715 012c 1268     		ldr	r2, [r2]
 716 012e D268     		ldr	r2, [r2, #12]
 717 0130 22F08002 		bic	r2, r2, #128
 718 0134 DA60     		str	r2, [r3, #12]
 525:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 526:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 527:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 719              		.loc 1 527 0
 720 0136 FB68     		ldr	r3, [r7, #12]
 721 0138 1B68     		ldr	r3, [r3]
 722 013a 9B68     		ldr	r3, [r3, #8]
 723 013c 03F02003 		and	r3, r3, #32
 724 0140 002B     		cmp	r3, #0
 725 0142 11D1     		bne	.L27
 528:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 529:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 726              		.loc 1 529 0
 727 0144 F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/cctjoR32.s 			page 23


 728 0146 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 729 014a 0346     		mov	r3, r0
 730 014c 002B     		cmp	r3, #0
 731 014e 0BD0     		beq	.L27
 530:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {        
 531:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 532:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 732              		.loc 1 532 0
 733 0150 FB68     		ldr	r3, [r7, #12]
 734 0152 1B68     		ldr	r3, [r3]
 735 0154 FF22     		movs	r2, #255
 736 0156 5A62     		str	r2, [r3, #36]
 533:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 534:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 737              		.loc 1 534 0
 738 0158 FB68     		ldr	r3, [r7, #12]
 739 015a 0422     		movs	r2, #4
 740 015c 5A77     		strb	r2, [r3, #29]
 535:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 536:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 537:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 741              		.loc 1 537 0
 742 015e FB68     		ldr	r3, [r7, #12]
 743 0160 0022     		movs	r2, #0
 744 0162 1A77     		strb	r2, [r3, #28]
 538:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 539:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 745              		.loc 1 539 0
 746 0164 0123     		movs	r3, #1
 747 0166 0AE0     		b	.L20
 748              	.L27:
 540:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 541:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 542:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 543:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 544:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 749              		.loc 1 544 0
 750 0168 FB68     		ldr	r3, [r7, #12]
 751 016a 1B68     		ldr	r3, [r3]
 752 016c FF22     		movs	r2, #255
 753 016e 5A62     		str	r2, [r3, #36]
 545:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 546:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 754              		.loc 1 546 0
 755 0170 FB68     		ldr	r3, [r7, #12]
 756 0172 0122     		movs	r2, #1
 757 0174 5A77     		strb	r2, [r3, #29]
 547:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 548:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc); 
 758              		.loc 1 548 0
 759 0176 FB68     		ldr	r3, [r7, #12]
 760 0178 0022     		movs	r2, #0
 761 017a 1A77     		strb	r2, [r3, #28]
 549:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 550:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    return HAL_OK;
 762              		.loc 1 550 0
 763 017c 0023     		movs	r3, #0
ARM GAS  /tmp/cctjoR32.s 			page 24


 764              	.L20:
 551:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 552:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 765              		.loc 1 552 0
 766 017e 1846     		mov	r0, r3
 767 0180 1C37     		adds	r7, r7, #28
 768              	.LCFI25:
 769              		.cfi_def_cfa_offset 12
 770 0182 BD46     		mov	sp, r7
 771              	.LCFI26:
 772              		.cfi_def_cfa_register 13
 773              		@ sp needed
 774 0184 90BD     		pop	{r4, r7, pc}
 775              	.L29:
 776 0186 00BF     		.align	2
 777              	.L28:
 778 0188 7F7F7F00 		.word	8355711
 779              		.cfi_endproc
 780              	.LFE139:
 782              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 783              		.align	2
 784              		.global	HAL_RTC_GetTime
 785              		.thumb
 786              		.thumb_func
 788              	HAL_RTC_GetTime:
 789              	.LFB140:
 553:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 554:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 555:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 556:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 557:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime: Pointer to Time structure with Hours, Minutes and Seconds fields returned 
 558:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 559:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 560:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 561:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 562:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 563:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 564:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 565:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 566:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 567:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 568:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 569:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 570:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 571:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 572:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 573:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 574:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 575:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 576:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 790              		.loc 1 576 0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 24
 793              		@ frame_needed = 1, uses_anonymous_args = 0
 794 0000 80B5     		push	{r7, lr}
 795              	.LCFI27:
 796              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cctjoR32.s 			page 25


 797              		.cfi_offset 7, -8
 798              		.cfi_offset 14, -4
 799 0002 86B0     		sub	sp, sp, #24
 800              	.LCFI28:
 801              		.cfi_def_cfa_offset 32
 802 0004 00AF     		add	r7, sp, #0
 803              	.LCFI29:
 804              		.cfi_def_cfa_register 7
 805 0006 F860     		str	r0, [r7, #12]
 806 0008 B960     		str	r1, [r7, #8]
 807 000a 7A60     		str	r2, [r7, #4]
 577:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 808              		.loc 1 577 0
 809 000c 0023     		movs	r3, #0
 810 000e 7B61     		str	r3, [r7, #20]
 578:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 579:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 580:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 581:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 582:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 583:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 811              		.loc 1 583 0
 812 0010 FB68     		ldr	r3, [r7, #12]
 813 0012 1B68     		ldr	r3, [r3]
 814 0014 9A6A     		ldr	r2, [r3, #40]
 815 0016 BB68     		ldr	r3, [r7, #8]
 816 0018 5A60     		str	r2, [r3, #4]
 584:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 585:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 586:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 817              		.loc 1 586 0
 818 001a FB68     		ldr	r3, [r7, #12]
 819 001c 1B68     		ldr	r3, [r3]
 820 001e 1B69     		ldr	r3, [r3, #16]
 821 0020 C3F30E02 		ubfx	r2, r3, #0, #15
 822 0024 BB68     		ldr	r3, [r7, #8]
 823 0026 9A60     		str	r2, [r3, #8]
 587:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 588:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the TR register */
 589:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 824              		.loc 1 589 0
 825 0028 FB68     		ldr	r3, [r7, #12]
 826 002a 1B68     		ldr	r3, [r3]
 827 002c 1A68     		ldr	r2, [r3]
 828 002e 214B     		ldr	r3, .L33
 829 0030 1340     		ands	r3, r3, r2
 830 0032 7B61     		str	r3, [r7, #20]
 590:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 591:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 592:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 831              		.loc 1 592 0
 832 0034 7B69     		ldr	r3, [r7, #20]
 833 0036 03F47C13 		and	r3, r3, #4128768
 834 003a 1B0C     		lsrs	r3, r3, #16
 835 003c DAB2     		uxtb	r2, r3
 836 003e BB68     		ldr	r3, [r7, #8]
 837 0040 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cctjoR32.s 			page 26


 593:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 838              		.loc 1 593 0
 839 0042 7B69     		ldr	r3, [r7, #20]
 840 0044 03F4FE43 		and	r3, r3, #32512
 841 0048 1B0A     		lsrs	r3, r3, #8
 842 004a DAB2     		uxtb	r2, r3
 843 004c BB68     		ldr	r3, [r7, #8]
 844 004e 5A70     		strb	r2, [r3, #1]
 594:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 845              		.loc 1 594 0
 846 0050 7B69     		ldr	r3, [r7, #20]
 847 0052 DBB2     		uxtb	r3, r3
 848 0054 03F07F03 		and	r3, r3, #127
 849 0058 DAB2     		uxtb	r2, r3
 850 005a BB68     		ldr	r3, [r7, #8]
 851 005c 9A70     		strb	r2, [r3, #2]
 595:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 852              		.loc 1 595 0
 853 005e 7B69     		ldr	r3, [r7, #20]
 854 0060 03F48003 		and	r3, r3, #4194304
 855 0064 1B0C     		lsrs	r3, r3, #16
 856 0066 DAB2     		uxtb	r2, r3
 857 0068 BB68     		ldr	r3, [r7, #8]
 858 006a 1A73     		strb	r2, [r3, #12]
 596:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 597:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 598:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 859              		.loc 1 598 0
 860 006c 7B68     		ldr	r3, [r7, #4]
 861 006e 002B     		cmp	r3, #0
 862 0070 1AD1     		bne	.L31
 599:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 600:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 601:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 863              		.loc 1 601 0
 864 0072 BB68     		ldr	r3, [r7, #8]
 865 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 866 0076 1846     		mov	r0, r3
 867 0078 FFF7FEFF 		bl	RTC_Bcd2ToByte
 868 007c 0346     		mov	r3, r0
 869 007e 1A46     		mov	r2, r3
 870 0080 BB68     		ldr	r3, [r7, #8]
 871 0082 1A70     		strb	r2, [r3]
 602:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 872              		.loc 1 602 0
 873 0084 BB68     		ldr	r3, [r7, #8]
 874 0086 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 875 0088 1846     		mov	r0, r3
 876 008a FFF7FEFF 		bl	RTC_Bcd2ToByte
 877 008e 0346     		mov	r3, r0
 878 0090 1A46     		mov	r2, r3
 879 0092 BB68     		ldr	r3, [r7, #8]
 880 0094 5A70     		strb	r2, [r3, #1]
 603:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 881              		.loc 1 603 0
 882 0096 BB68     		ldr	r3, [r7, #8]
 883 0098 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/cctjoR32.s 			page 27


 884 009a 1846     		mov	r0, r3
 885 009c FFF7FEFF 		bl	RTC_Bcd2ToByte
 886 00a0 0346     		mov	r3, r0
 887 00a2 1A46     		mov	r2, r3
 888 00a4 BB68     		ldr	r3, [r7, #8]
 889 00a6 9A70     		strb	r2, [r3, #2]
 890              	.L31:
 604:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 605:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 606:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 891              		.loc 1 606 0
 892 00a8 0023     		movs	r3, #0
 607:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 893              		.loc 1 607 0
 894 00aa 1846     		mov	r0, r3
 895 00ac 1837     		adds	r7, r7, #24
 896              	.LCFI30:
 897              		.cfi_def_cfa_offset 8
 898 00ae BD46     		mov	sp, r7
 899              	.LCFI31:
 900              		.cfi_def_cfa_register 13
 901              		@ sp needed
 902 00b0 80BD     		pop	{r7, pc}
 903              	.L34:
 904 00b2 00BF     		.align	2
 905              	.L33:
 906 00b4 7F7F7F00 		.word	8355711
 907              		.cfi_endproc
 908              	.LFE140:
 910              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 911              		.align	2
 912              		.global	HAL_RTC_SetDate
 913              		.thumb
 914              		.thumb_func
 916              	HAL_RTC_SetDate:
 917              	.LFB141:
 608:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 609:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 610:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 611:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 612:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 613:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate: Pointer to date structure
 614:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format: specifies the format of the entered parameters.
 615:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 616:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 617:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 618:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 619:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 620:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 621:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 918              		.loc 1 621 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 24
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 0000 90B5     		push	{r4, r7, lr}
 923              	.LCFI32:
 924              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cctjoR32.s 			page 28


 925              		.cfi_offset 4, -12
 926              		.cfi_offset 7, -8
 927              		.cfi_offset 14, -4
 928 0002 87B0     		sub	sp, sp, #28
 929              	.LCFI33:
 930              		.cfi_def_cfa_offset 40
 931 0004 00AF     		add	r7, sp, #0
 932              	.LCFI34:
 933              		.cfi_def_cfa_register 7
 934 0006 F860     		str	r0, [r7, #12]
 935 0008 B960     		str	r1, [r7, #8]
 936 000a 7A60     		str	r2, [r7, #4]
 622:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 937              		.loc 1 622 0
 938 000c 0023     		movs	r3, #0
 939 000e 7B61     		str	r3, [r7, #20]
 623:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 624:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 625:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 626:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 627:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Process Locked */ 
 628:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
 940              		.loc 1 628 0
 941 0010 FB68     		ldr	r3, [r7, #12]
 942 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 943 0014 012B     		cmp	r3, #1
 944 0016 01D1     		bne	.L36
 945              		.loc 1 628 0 is_stmt 0 discriminator 1
 946 0018 0223     		movs	r3, #2
 947 001a A0E0     		b	.L37
 948              	.L36:
 949              		.loc 1 628 0 discriminator 2
 950 001c FB68     		ldr	r3, [r7, #12]
 951 001e 0122     		movs	r2, #1
 952 0020 1A77     		strb	r2, [r3, #28]
 629:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 630:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 953              		.loc 1 630 0 is_stmt 1 discriminator 2
 954 0022 FB68     		ldr	r3, [r7, #12]
 955 0024 0222     		movs	r2, #2
 956 0026 5A77     		strb	r2, [r3, #29]
 631:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 632:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 957              		.loc 1 632 0 discriminator 2
 958 0028 7B68     		ldr	r3, [r7, #4]
 959 002a 002B     		cmp	r3, #0
 960 002c 0ED1     		bne	.L38
 961              		.loc 1 632 0 is_stmt 0 discriminator 1
 962 002e BB68     		ldr	r3, [r7, #8]
 963 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 964 0032 03F01003 		and	r3, r3, #16
 965 0036 002B     		cmp	r3, #0
 966 0038 08D0     		beq	.L38
 633:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 634:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 967              		.loc 1 634 0 is_stmt 1
 968 003a BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cctjoR32.s 			page 29


 969 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 970 003e 23F01003 		bic	r3, r3, #16
 971 0042 DBB2     		uxtb	r3, r3
 972 0044 0A33     		adds	r3, r3, #10
 973 0046 DAB2     		uxtb	r2, r3
 974 0048 BB68     		ldr	r3, [r7, #8]
 975 004a 5A70     		strb	r2, [r3, #1]
 976              	.L38:
 635:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 636:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 637:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 638:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 639:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 977              		.loc 1 639 0
 978 004c 7B68     		ldr	r3, [r7, #4]
 979 004e 002B     		cmp	r3, #0
 980 0050 1CD1     		bne	.L39
 640:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {   
 641:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 642:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 643:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date)); 
 644:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 645:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 981              		.loc 1 645 0
 982 0052 BB68     		ldr	r3, [r7, #8]
 983 0054 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 984 0056 1846     		mov	r0, r3
 985 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 986 005c 0346     		mov	r3, r0
 987 005e 1C04     		lsls	r4, r3, #16
 646:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 988              		.loc 1 646 0
 989 0060 BB68     		ldr	r3, [r7, #8]
 990 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 991 0064 1846     		mov	r0, r3
 992 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 993 006a 0346     		mov	r3, r0
 994 006c 1B02     		lsls	r3, r3, #8
 645:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 995              		.loc 1 645 0
 996 006e 1C43     		orrs	r4, r4, r3
 647:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 997              		.loc 1 647 0
 998 0070 BB68     		ldr	r3, [r7, #8]
 999 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1000 0074 1846     		mov	r0, r3
 1001 0076 FFF7FEFF 		bl	RTC_ByteToBcd2
 1002 007a 0346     		mov	r3, r0
 646:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1003              		.loc 1 646 0
 1004 007c 44EA0302 		orr	r2, r4, r3
 648:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13));   
 1005              		.loc 1 648 0
 1006 0080 BB68     		ldr	r3, [r7, #8]
 1007 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1008 0084 5B03     		lsls	r3, r3, #13
 645:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
ARM GAS  /tmp/cctjoR32.s 			page 30


 1009              		.loc 1 645 0
 1010 0086 1343     		orrs	r3, r3, r2
 1011 0088 7B61     		str	r3, [r7, #20]
 1012 008a 1CE0     		b	.L40
 1013              	.L39:
 649:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 650:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 651:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {   
 652:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 653:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 1014              		.loc 1 653 0
 1015 008c BB68     		ldr	r3, [r7, #8]
 1016 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1017 0090 1846     		mov	r0, r3
 1018 0092 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1019 0096 0346     		mov	r3, r0
 1020 0098 7B61     		str	r3, [r7, #20]
 654:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(datetmpreg));
 655:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 1021              		.loc 1 655 0
 1022 009a BB68     		ldr	r3, [r7, #8]
 1023 009c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1024 009e 1846     		mov	r0, r3
 1025 00a0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1026 00a4 0346     		mov	r3, r0
 1027 00a6 7B61     		str	r3, [r7, #20]
 656:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(datetmpreg));
 657:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 658:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 1028              		.loc 1 658 0
 1029 00a8 BB68     		ldr	r3, [r7, #8]
 1030 00aa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1031 00ac 1A04     		lsls	r2, r3, #16
 659:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1032              		.loc 1 659 0
 1033 00ae BB68     		ldr	r3, [r7, #8]
 1034 00b0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1035 00b2 1B02     		lsls	r3, r3, #8
 658:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1036              		.loc 1 658 0
 1037 00b4 1343     		orrs	r3, r3, r2
 660:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1038              		.loc 1 660 0
 1039 00b6 BA68     		ldr	r2, [r7, #8]
 1040 00b8 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 659:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1041              		.loc 1 659 0
 1042 00ba 1A43     		orrs	r2, r2, r3
 661:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13));  
 1043              		.loc 1 661 0
 1044 00bc BB68     		ldr	r3, [r7, #8]
 1045 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1046 00c0 5B03     		lsls	r3, r3, #13
 658:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1047              		.loc 1 658 0
 1048 00c2 1343     		orrs	r3, r3, r2
 1049 00c4 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/cctjoR32.s 			page 31


 1050              	.L40:
 662:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 663:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 664:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 665:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1051              		.loc 1 665 0
 1052 00c6 FB68     		ldr	r3, [r7, #12]
 1053 00c8 1B68     		ldr	r3, [r3]
 1054 00ca CA22     		movs	r2, #202
 1055 00cc 5A62     		str	r2, [r3, #36]
 1056 00ce FB68     		ldr	r3, [r7, #12]
 1057 00d0 1B68     		ldr	r3, [r3]
 1058 00d2 5322     		movs	r2, #83
 1059 00d4 5A62     		str	r2, [r3, #36]
 666:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 667:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 668:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 1060              		.loc 1 668 0
 1061 00d6 F868     		ldr	r0, [r7, #12]
 1062 00d8 FFF7FEFF 		bl	RTC_EnterInitMode
 1063 00dc 0346     		mov	r3, r0
 1064 00de 002B     		cmp	r3, #0
 1065 00e0 0BD0     		beq	.L41
 669:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 670:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 671:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1066              		.loc 1 671 0
 1067 00e2 FB68     		ldr	r3, [r7, #12]
 1068 00e4 1B68     		ldr	r3, [r3]
 1069 00e6 FF22     		movs	r2, #255
 1070 00e8 5A62     		str	r2, [r3, #36]
 672:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 673:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state*/
 674:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 1071              		.loc 1 674 0
 1072 00ea FB68     		ldr	r3, [r7, #12]
 1073 00ec 0422     		movs	r2, #4
 1074 00ee 5A77     		strb	r2, [r3, #29]
 675:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 676:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 677:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1075              		.loc 1 677 0
 1076 00f0 FB68     		ldr	r3, [r7, #12]
 1077 00f2 0022     		movs	r2, #0
 1078 00f4 1A77     		strb	r2, [r3, #28]
 678:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 679:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 1079              		.loc 1 679 0
 1080 00f6 0123     		movs	r3, #1
 1081 00f8 31E0     		b	.L37
 1082              	.L41:
 680:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
 681:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 682:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 683:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_DR register */
 684:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 1083              		.loc 1 684 0
ARM GAS  /tmp/cctjoR32.s 			page 32


 1084 00fa FB68     		ldr	r3, [r7, #12]
 1085 00fc 1A68     		ldr	r2, [r3]
 1086 00fe 7969     		ldr	r1, [r7, #20]
 1087 0100 194B     		ldr	r3, .L43
 1088 0102 0B40     		ands	r3, r3, r1
 1089 0104 5360     		str	r3, [r2, #4]
 685:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 686:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 687:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 1090              		.loc 1 687 0
 1091 0106 FB68     		ldr	r3, [r7, #12]
 1092 0108 1B68     		ldr	r3, [r3]
 1093 010a FA68     		ldr	r2, [r7, #12]
 1094 010c 1268     		ldr	r2, [r2]
 1095 010e D268     		ldr	r2, [r2, #12]
 1096 0110 22F08002 		bic	r2, r2, #128
 1097 0114 DA60     		str	r2, [r3, #12]
 688:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 689:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 690:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 1098              		.loc 1 690 0
 1099 0116 FB68     		ldr	r3, [r7, #12]
 1100 0118 1B68     		ldr	r3, [r3]
 1101 011a 9B68     		ldr	r3, [r3, #8]
 1102 011c 03F02003 		and	r3, r3, #32
 1103 0120 002B     		cmp	r3, #0
 1104 0122 11D1     		bne	.L42
 691:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 692:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 1105              		.loc 1 692 0
 1106 0124 F868     		ldr	r0, [r7, #12]
 1107 0126 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1108 012a 0346     		mov	r3, r0
 1109 012c 002B     		cmp	r3, #0
 1110 012e 0BD0     		beq	.L42
 693:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
 694:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 695:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1111              		.loc 1 695 0
 1112 0130 FB68     		ldr	r3, [r7, #12]
 1113 0132 1B68     		ldr	r3, [r3]
 1114 0134 FF22     		movs	r2, #255
 1115 0136 5A62     		str	r2, [r3, #36]
 696:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 697:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 1116              		.loc 1 697 0
 1117 0138 FB68     		ldr	r3, [r7, #12]
 1118 013a 0422     		movs	r2, #4
 1119 013c 5A77     		strb	r2, [r3, #29]
 698:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 699:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 700:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1120              		.loc 1 700 0
 1121 013e FB68     		ldr	r3, [r7, #12]
 1122 0140 0022     		movs	r2, #0
 1123 0142 1A77     		strb	r2, [r3, #28]
 701:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
ARM GAS  /tmp/cctjoR32.s 			page 33


 702:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 1124              		.loc 1 702 0
 1125 0144 0123     		movs	r3, #1
 1126 0146 0AE0     		b	.L37
 1127              	.L42:
 703:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 704:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 705:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 706:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 707:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1128              		.loc 1 707 0
 1129 0148 FB68     		ldr	r3, [r7, #12]
 1130 014a 1B68     		ldr	r3, [r3]
 1131 014c FF22     		movs	r2, #255
 1132 014e 5A62     		str	r2, [r3, #36]
 708:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 709:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 1133              		.loc 1 709 0
 1134 0150 FB68     		ldr	r3, [r7, #12]
 1135 0152 0122     		movs	r2, #1
 1136 0154 5A77     		strb	r2, [r3, #29]
 710:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 711:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 712:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1137              		.loc 1 712 0
 1138 0156 FB68     		ldr	r3, [r7, #12]
 1139 0158 0022     		movs	r2, #0
 1140 015a 1A77     		strb	r2, [r3, #28]
 713:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 714:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;    
 1141              		.loc 1 714 0
 1142 015c 0023     		movs	r3, #0
 1143              	.L37:
 715:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 716:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1144              		.loc 1 716 0
 1145 015e 1846     		mov	r0, r3
 1146 0160 1C37     		adds	r7, r7, #28
 1147              	.LCFI35:
 1148              		.cfi_def_cfa_offset 12
 1149 0162 BD46     		mov	sp, r7
 1150              	.LCFI36:
 1151              		.cfi_def_cfa_register 13
 1152              		@ sp needed
 1153 0164 90BD     		pop	{r4, r7, pc}
 1154              	.L44:
 1155 0166 00BF     		.align	2
 1156              	.L43:
 1157 0168 3FFFFF00 		.word	16777023
 1158              		.cfi_endproc
 1159              	.LFE141:
 1161              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1162              		.align	2
 1163              		.global	HAL_RTC_GetDate
 1164              		.thumb
 1165              		.thumb_func
 1167              	HAL_RTC_GetDate:
ARM GAS  /tmp/cctjoR32.s 			page 34


 1168              	.LFB142:
 717:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 718:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 719:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current date.
 720:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 721:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 722:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate: Pointer to Date structure
 723:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 724:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 725:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format 
 726:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
 727:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 728:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * in the higher-order calendar shadow registers to ensure consistency between the time and date v
 729:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * Reading RTC current time locks the values in calendar shadow registers until Current date is re
 730:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 731:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 732:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 733:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1169              		.loc 1 733 0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 24
 1172              		@ frame_needed = 1, uses_anonymous_args = 0
 1173 0000 80B5     		push	{r7, lr}
 1174              	.LCFI37:
 1175              		.cfi_def_cfa_offset 8
 1176              		.cfi_offset 7, -8
 1177              		.cfi_offset 14, -4
 1178 0002 86B0     		sub	sp, sp, #24
 1179              	.LCFI38:
 1180              		.cfi_def_cfa_offset 32
 1181 0004 00AF     		add	r7, sp, #0
 1182              	.LCFI39:
 1183              		.cfi_def_cfa_register 7
 1184 0006 F860     		str	r0, [r7, #12]
 1185 0008 B960     		str	r1, [r7, #8]
 1186 000a 7A60     		str	r2, [r7, #4]
 734:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 1187              		.loc 1 734 0
 1188 000c 0023     		movs	r3, #0
 1189 000e 7B61     		str	r3, [r7, #20]
 735:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 736:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 737:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 738:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****           
 739:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the DR register */
 740:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 1190              		.loc 1 740 0
 1191 0010 FB68     		ldr	r3, [r7, #12]
 1192 0012 1B68     		ldr	r3, [r3]
 1193 0014 5A68     		ldr	r2, [r3, #4]
 1194 0016 214B     		ldr	r3, .L48
 1195 0018 1340     		ands	r3, r3, r2
 1196 001a 7B61     		str	r3, [r7, #20]
 741:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 742:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 743:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1197              		.loc 1 743 0
ARM GAS  /tmp/cctjoR32.s 			page 35


 1198 001c 7B69     		ldr	r3, [r7, #20]
 1199 001e 03F47F03 		and	r3, r3, #16711680
 1200 0022 1B0C     		lsrs	r3, r3, #16
 1201 0024 DAB2     		uxtb	r2, r3
 1202 0026 BB68     		ldr	r3, [r7, #8]
 1203 0028 DA70     		strb	r2, [r3, #3]
 744:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1204              		.loc 1 744 0
 1205 002a 7B69     		ldr	r3, [r7, #20]
 1206 002c 03F4F853 		and	r3, r3, #7936
 1207 0030 1B0A     		lsrs	r3, r3, #8
 1208 0032 DAB2     		uxtb	r2, r3
 1209 0034 BB68     		ldr	r3, [r7, #8]
 1210 0036 5A70     		strb	r2, [r3, #1]
 745:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1211              		.loc 1 745 0
 1212 0038 7B69     		ldr	r3, [r7, #20]
 1213 003a DBB2     		uxtb	r3, r3
 1214 003c 03F03F03 		and	r3, r3, #63
 1215 0040 DAB2     		uxtb	r2, r3
 1216 0042 BB68     		ldr	r3, [r7, #8]
 1217 0044 9A70     		strb	r2, [r3, #2]
 746:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 1218              		.loc 1 746 0
 1219 0046 7B69     		ldr	r3, [r7, #20]
 1220 0048 03F46043 		and	r3, r3, #57344
 1221 004c 5B0B     		lsrs	r3, r3, #13
 1222 004e DAB2     		uxtb	r2, r3
 1223 0050 BB68     		ldr	r3, [r7, #8]
 1224 0052 1A70     		strb	r2, [r3]
 747:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 748:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 749:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1225              		.loc 1 749 0
 1226 0054 7B68     		ldr	r3, [r7, #4]
 1227 0056 002B     		cmp	r3, #0
 1228 0058 1AD1     		bne	.L46
 750:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {    
 751:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
 752:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1229              		.loc 1 752 0
 1230 005a BB68     		ldr	r3, [r7, #8]
 1231 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1232 005e 1846     		mov	r0, r3
 1233 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1234 0064 0346     		mov	r3, r0
 1235 0066 1A46     		mov	r2, r3
 1236 0068 BB68     		ldr	r3, [r7, #8]
 1237 006a DA70     		strb	r2, [r3, #3]
 753:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1238              		.loc 1 753 0
 1239 006c BB68     		ldr	r3, [r7, #8]
 1240 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1241 0070 1846     		mov	r0, r3
 1242 0072 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1243 0076 0346     		mov	r3, r0
 1244 0078 1A46     		mov	r2, r3
ARM GAS  /tmp/cctjoR32.s 			page 36


 1245 007a BB68     		ldr	r3, [r7, #8]
 1246 007c 5A70     		strb	r2, [r3, #1]
 754:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 1247              		.loc 1 754 0
 1248 007e BB68     		ldr	r3, [r7, #8]
 1249 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1250 0082 1846     		mov	r0, r3
 1251 0084 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1252 0088 0346     		mov	r3, r0
 1253 008a 1A46     		mov	r2, r3
 1254 008c BB68     		ldr	r3, [r7, #8]
 1255 008e 9A70     		strb	r2, [r3, #2]
 1256              	.L46:
 755:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 756:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 1257              		.loc 1 756 0
 1258 0090 0023     		movs	r3, #0
 757:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1259              		.loc 1 757 0
 1260 0092 1846     		mov	r0, r3
 1261 0094 1837     		adds	r7, r7, #24
 1262              	.LCFI40:
 1263              		.cfi_def_cfa_offset 8
 1264 0096 BD46     		mov	sp, r7
 1265              	.LCFI41:
 1266              		.cfi_def_cfa_register 13
 1267              		@ sp needed
 1268 0098 80BD     		pop	{r7, pc}
 1269              	.L49:
 1270 009a 00BF     		.align	2
 1271              	.L48:
 1272 009c 3FFFFF00 		.word	16777023
 1273              		.cfi_endproc
 1274              	.LFE142:
 1276              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1277              		.align	2
 1278              		.global	HAL_RTC_SetAlarm
 1279              		.thumb
 1280              		.thumb_func
 1282              	HAL_RTC_SetAlarm:
 1283              	.LFB143:
 758:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 759:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 760:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
 761:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 762:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 763:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group3 RTC Alarm functions
 764:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
 765:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 766:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
 767:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 768:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
 769:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
 770:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
 771:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
 772:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 773:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
ARM GAS  /tmp/cctjoR32.s 			page 37


 774:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 775:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 776:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 777:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
 778:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 779:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 780:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Alarm structure
 781:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 782:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 783:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format 
 784:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
 785:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 786:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 787:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
 788:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1284              		.loc 1 788 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 32
 1287              		@ frame_needed = 1, uses_anonymous_args = 0
 1288 0000 90B5     		push	{r4, r7, lr}
 1289              	.LCFI42:
 1290              		.cfi_def_cfa_offset 12
 1291              		.cfi_offset 4, -12
 1292              		.cfi_offset 7, -8
 1293              		.cfi_offset 14, -4
 1294 0002 89B0     		sub	sp, sp, #36
 1295              	.LCFI43:
 1296              		.cfi_def_cfa_offset 48
 1297 0004 00AF     		add	r7, sp, #0
 1298              	.LCFI44:
 1299              		.cfi_def_cfa_register 7
 1300 0006 F860     		str	r0, [r7, #12]
 1301 0008 B960     		str	r1, [r7, #8]
 1302 000a 7A60     		str	r2, [r7, #4]
 789:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 1303              		.loc 1 789 0
 1304 000c 0023     		movs	r3, #0
 1305 000e BB61     		str	r3, [r7, #24]
 790:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 1306              		.loc 1 790 0
 1307 0010 0023     		movs	r3, #0
 1308 0012 FB61     		str	r3, [r7, #28]
 1309 0014 0023     		movs	r3, #0
 1310 0016 7B61     		str	r3, [r7, #20]
 791:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 792:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 793:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 794:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 795:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 796:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 797:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 798:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 799:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 800:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 801:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1311              		.loc 1 801 0
 1312 0018 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cctjoR32.s 			page 38


 1313 001a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1314 001c 012B     		cmp	r3, #1
 1315 001e 01D1     		bne	.L51
 1316              		.loc 1 801 0 is_stmt 0 discriminator 1
 1317 0020 0223     		movs	r3, #2
 1318 0022 1EE1     		b	.L52
 1319              	.L51:
 1320              		.loc 1 801 0 discriminator 2
 1321 0024 FB68     		ldr	r3, [r7, #12]
 1322 0026 0122     		movs	r2, #1
 1323 0028 1A77     		strb	r2, [r3, #28]
 802:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 803:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1324              		.loc 1 803 0 is_stmt 1 discriminator 2
 1325 002a FB68     		ldr	r3, [r7, #12]
 1326 002c 0222     		movs	r2, #2
 1327 002e 5A77     		strb	r2, [r3, #29]
 804:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 805:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1328              		.loc 1 805 0 discriminator 2
 1329 0030 7B68     		ldr	r3, [r7, #4]
 1330 0032 002B     		cmp	r3, #0
 1331 0034 37D1     		bne	.L53
 806:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 807:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1332              		.loc 1 807 0
 1333 0036 FB68     		ldr	r3, [r7, #12]
 1334 0038 1B68     		ldr	r3, [r3]
 1335 003a 9B68     		ldr	r3, [r3, #8]
 1336 003c 03F04003 		and	r3, r3, #64
 1337 0040 002B     		cmp	r3, #0
 1338 0042 02D1     		bne	.L54
 808:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 809:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 810:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 811:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 812:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 813:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 814:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1339              		.loc 1 814 0
 1340 0044 BB68     		ldr	r3, [r7, #8]
 1341 0046 0022     		movs	r2, #0
 1342 0048 1A73     		strb	r2, [r3, #12]
 1343              	.L54:
 815:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 816:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 817:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 818:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 819:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 820:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 821:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 822:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 823:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 824:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 825:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 826:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 827:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
ARM GAS  /tmp/cctjoR32.s 			page 39


 828:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 829:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 1344              		.loc 1 829 0
 1345 004a BB68     		ldr	r3, [r7, #8]
 1346 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1347 004e 1846     		mov	r0, r3
 1348 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1349 0054 0346     		mov	r3, r0
 1350 0056 1C04     		lsls	r4, r3, #16
 830:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1351              		.loc 1 830 0
 1352 0058 BB68     		ldr	r3, [r7, #8]
 1353 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1354 005c 1846     		mov	r0, r3
 1355 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1356 0062 0346     		mov	r3, r0
 1357 0064 1B02     		lsls	r3, r3, #8
 829:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1358              		.loc 1 829 0
 1359 0066 1C43     		orrs	r4, r4, r3
 831:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1360              		.loc 1 831 0
 1361 0068 BB68     		ldr	r3, [r7, #8]
 1362 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1363 006c 1846     		mov	r0, r3
 1364 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1365 0072 0346     		mov	r3, r0
 830:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1366              		.loc 1 830 0
 1367 0074 44EA0302 		orr	r2, r4, r3
 832:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1368              		.loc 1 832 0
 1369 0078 BB68     		ldr	r3, [r7, #8]
 1370 007a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1371 007c 1B04     		lsls	r3, r3, #16
 831:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1372              		.loc 1 831 0
 1373 007e 42EA0304 		orr	r4, r2, r3
 833:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1374              		.loc 1 833 0
 1375 0082 BB68     		ldr	r3, [r7, #8]
 1376 0084 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1377 0088 1846     		mov	r0, r3
 1378 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1379 008e 0346     		mov	r3, r0
 1380 0090 1B06     		lsls	r3, r3, #24
 832:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1381              		.loc 1 832 0
 1382 0092 44EA0302 		orr	r2, r4, r3
 834:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1383              		.loc 1 834 0
 1384 0096 BB68     		ldr	r3, [r7, #8]
 1385 0098 1B6A     		ldr	r3, [r3, #32]
 833:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1386              		.loc 1 833 0
 1387 009a 1A43     		orrs	r2, r2, r3
 835:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
ARM GAS  /tmp/cctjoR32.s 			page 40


 1388              		.loc 1 835 0
 1389 009c BB68     		ldr	r3, [r7, #8]
 1390 009e 9B69     		ldr	r3, [r3, #24]
 829:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1391              		.loc 1 829 0
 1392 00a0 1343     		orrs	r3, r3, r2
 1393 00a2 FB61     		str	r3, [r7, #28]
 1394 00a4 40E0     		b	.L55
 1395              	.L53:
 836:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 837:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 838:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 839:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1396              		.loc 1 839 0
 1397 00a6 FB68     		ldr	r3, [r7, #12]
 1398 00a8 1B68     		ldr	r3, [r3]
 1399 00aa 9B68     		ldr	r3, [r3, #8]
 1400 00ac 03F04003 		and	r3, r3, #64
 1401 00b0 002B     		cmp	r3, #0
 1402 00b2 07D0     		beq	.L56
 840:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 841:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1403              		.loc 1 841 0
 1404 00b4 BB68     		ldr	r3, [r7, #8]
 1405 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1406 00b8 1846     		mov	r0, r3
 1407 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 1408 00be 0346     		mov	r3, r0
 1409 00c0 FB61     		str	r3, [r7, #28]
 1410 00c2 02E0     		b	.L57
 1411              	.L56:
 842:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 843:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 844:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 845:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 846:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 847:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1412              		.loc 1 847 0
 1413 00c4 BB68     		ldr	r3, [r7, #8]
 1414 00c6 0022     		movs	r2, #0
 1415 00c8 1A73     		strb	r2, [r3, #12]
 1416              	.L57:
 848:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 849:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 850:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 851:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 852:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 853:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 854:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1417              		.loc 1 854 0
 1418 00ca BB68     		ldr	r3, [r7, #8]
 1419 00cc 1B6A     		ldr	r3, [r3, #32]
 1420 00ce 002B     		cmp	r3, #0
 1421 00d0 08D1     		bne	.L58
 855:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 856:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1422              		.loc 1 856 0
ARM GAS  /tmp/cctjoR32.s 			page 41


 1423 00d2 BB68     		ldr	r3, [r7, #8]
 1424 00d4 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1425 00d8 1846     		mov	r0, r3
 1426 00da FFF7FEFF 		bl	RTC_Bcd2ToByte
 1427 00de 0346     		mov	r3, r0
 1428 00e0 FB61     		str	r3, [r7, #28]
 1429 00e2 07E0     		b	.L59
 1430              	.L58:
 857:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
 858:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 859:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 860:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 861:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1431              		.loc 1 861 0
 1432 00e4 BB68     		ldr	r3, [r7, #8]
 1433 00e6 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1434 00ea 1846     		mov	r0, r3
 1435 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1436 00f0 0346     		mov	r3, r0
 1437 00f2 FB61     		str	r3, [r7, #28]
 1438              	.L59:
 862:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
 863:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }  
 864:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 865:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 1439              		.loc 1 865 0
 1440 00f4 BB68     		ldr	r3, [r7, #8]
 1441 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1442 00f8 1A04     		lsls	r2, r3, #16
 866:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1443              		.loc 1 866 0
 1444 00fa BB68     		ldr	r3, [r7, #8]
 1445 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1446 00fe 1B02     		lsls	r3, r3, #8
 865:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1447              		.loc 1 865 0
 1448 0100 1343     		orrs	r3, r3, r2
 867:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1449              		.loc 1 867 0
 1450 0102 BA68     		ldr	r2, [r7, #8]
 1451 0104 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 866:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1452              		.loc 1 866 0
 1453 0106 1A43     		orrs	r2, r2, r3
 868:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1454              		.loc 1 868 0
 1455 0108 BB68     		ldr	r3, [r7, #8]
 1456 010a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1457 010c 1B04     		lsls	r3, r3, #16
 867:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1458              		.loc 1 867 0
 1459 010e 1A43     		orrs	r2, r2, r3
 869:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1460              		.loc 1 869 0
 1461 0110 BB68     		ldr	r3, [r7, #8]
 1462 0112 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1463 0116 1B06     		lsls	r3, r3, #24
ARM GAS  /tmp/cctjoR32.s 			page 42


 868:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1464              		.loc 1 868 0
 1465 0118 1A43     		orrs	r2, r2, r3
 870:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1466              		.loc 1 870 0
 1467 011a BB68     		ldr	r3, [r7, #8]
 1468 011c 1B6A     		ldr	r3, [r3, #32]
 869:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1469              		.loc 1 869 0
 1470 011e 1A43     		orrs	r2, r2, r3
 871:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));   
 1471              		.loc 1 871 0
 1472 0120 BB68     		ldr	r3, [r7, #8]
 1473 0122 9B69     		ldr	r3, [r3, #24]
 865:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1474              		.loc 1 865 0
 1475 0124 1343     		orrs	r3, r3, r2
 1476 0126 FB61     		str	r3, [r7, #28]
 1477              	.L55:
 872:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 873:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 874:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
 875:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1478              		.loc 1 875 0
 1479 0128 BB68     		ldr	r3, [r7, #8]
 1480 012a 5A68     		ldr	r2, [r3, #4]
 1481 012c BB68     		ldr	r3, [r7, #8]
 1482 012e DB69     		ldr	r3, [r3, #28]
 1483 0130 1343     		orrs	r3, r3, r2
 1484 0132 7B61     		str	r3, [r7, #20]
 876:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 877:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 878:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1485              		.loc 1 878 0
 1486 0134 FB68     		ldr	r3, [r7, #12]
 1487 0136 1B68     		ldr	r3, [r3]
 1488 0138 CA22     		movs	r2, #202
 1489 013a 5A62     		str	r2, [r3, #36]
 1490 013c FB68     		ldr	r3, [r7, #12]
 1491 013e 1B68     		ldr	r3, [r3]
 1492 0140 5322     		movs	r2, #83
 1493 0142 5A62     		str	r2, [r3, #36]
 879:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 880:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
 881:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1494              		.loc 1 881 0
 1495 0144 BB68     		ldr	r3, [r7, #8]
 1496 0146 9B6A     		ldr	r3, [r3, #40]
 1497 0148 B3F5807F 		cmp	r3, #256
 1498 014c 3FD1     		bne	.L60
 882:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 883:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
 884:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1499              		.loc 1 884 0
 1500 014e FB68     		ldr	r3, [r7, #12]
 1501 0150 1B68     		ldr	r3, [r3]
 1502 0152 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/cctjoR32.s 			page 43


 1503 0154 1268     		ldr	r2, [r2]
 1504 0156 9268     		ldr	r2, [r2, #8]
 1505 0158 22F48072 		bic	r2, r2, #256
 1506 015c 9A60     		str	r2, [r3, #8]
 885:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 886:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 887:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1507              		.loc 1 887 0
 1508 015e FB68     		ldr	r3, [r7, #12]
 1509 0160 1B68     		ldr	r3, [r3]
 1510 0162 FA68     		ldr	r2, [r7, #12]
 1511 0164 1268     		ldr	r2, [r2]
 1512 0166 9268     		ldr	r2, [r2, #8]
 1513 0168 22F48052 		bic	r2, r2, #4096
 1514 016c 9A60     		str	r2, [r3, #8]
 888:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 889:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 890:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1515              		.loc 1 890 0
 1516 016e FFF7FEFF 		bl	HAL_GetTick
 1517 0172 B861     		str	r0, [r7, #24]
 891:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 892:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 893:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1518              		.loc 1 893 0
 1519 0174 13E0     		b	.L61
 1520              	.L62:
 894:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 895:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1521              		.loc 1 895 0
 1522 0176 FFF7FEFF 		bl	HAL_GetTick
 1523 017a 0246     		mov	r2, r0
 1524 017c BB69     		ldr	r3, [r7, #24]
 1525 017e D31A     		subs	r3, r2, r3
 1526 0180 B3F57A7F 		cmp	r3, #1000
 1527 0184 0BD9     		bls	.L61
 896:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 897:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 898:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1528              		.loc 1 898 0
 1529 0186 FB68     		ldr	r3, [r7, #12]
 1530 0188 1B68     		ldr	r3, [r3]
 1531 018a FF22     		movs	r2, #255
 1532 018c 5A62     		str	r2, [r3, #36]
 899:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 900:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1533              		.loc 1 900 0
 1534 018e FB68     		ldr	r3, [r7, #12]
 1535 0190 0322     		movs	r2, #3
 1536 0192 5A77     		strb	r2, [r3, #29]
 901:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 902:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 903:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1537              		.loc 1 903 0
 1538 0194 FB68     		ldr	r3, [r7, #12]
 1539 0196 0022     		movs	r2, #0
 1540 0198 1A77     		strb	r2, [r3, #28]
ARM GAS  /tmp/cctjoR32.s 			page 44


 904:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 905:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1541              		.loc 1 905 0
 1542 019a 0323     		movs	r3, #3
 1543 019c 61E0     		b	.L52
 1544              	.L61:
 893:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1545              		.loc 1 893 0
 1546 019e FB68     		ldr	r3, [r7, #12]
 1547 01a0 1B68     		ldr	r3, [r3]
 1548 01a2 DB68     		ldr	r3, [r3, #12]
 1549 01a4 03F00103 		and	r3, r3, #1
 1550 01a8 002B     		cmp	r3, #0
 1551 01aa E4D0     		beq	.L62
 906:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }   
 907:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 908:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 909:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1552              		.loc 1 909 0
 1553 01ac FB68     		ldr	r3, [r7, #12]
 1554 01ae 1B68     		ldr	r3, [r3]
 1555 01b0 FA69     		ldr	r2, [r7, #28]
 1556 01b2 DA61     		str	r2, [r3, #28]
 910:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 911:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1557              		.loc 1 911 0
 1558 01b4 FB68     		ldr	r3, [r7, #12]
 1559 01b6 1B68     		ldr	r3, [r3]
 1560 01b8 7A69     		ldr	r2, [r7, #20]
 1561 01ba 5A64     		str	r2, [r3, #68]
 912:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 913:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1562              		.loc 1 913 0
 1563 01bc FB68     		ldr	r3, [r7, #12]
 1564 01be 1B68     		ldr	r3, [r3]
 1565 01c0 FA68     		ldr	r2, [r7, #12]
 1566 01c2 1268     		ldr	r2, [r2]
 1567 01c4 9268     		ldr	r2, [r2, #8]
 1568 01c6 42F48072 		orr	r2, r2, #256
 1569 01ca 9A60     		str	r2, [r3, #8]
 1570 01cc 3EE0     		b	.L63
 1571              	.L60:
 914:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 915:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 916:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 917:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
 918:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1572              		.loc 1 918 0
 1573 01ce FB68     		ldr	r3, [r7, #12]
 1574 01d0 1B68     		ldr	r3, [r3]
 1575 01d2 FA68     		ldr	r2, [r7, #12]
 1576 01d4 1268     		ldr	r2, [r2]
 1577 01d6 9268     		ldr	r2, [r2, #8]
 1578 01d8 22F40072 		bic	r2, r2, #512
 1579 01dc 9A60     		str	r2, [r3, #8]
 919:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 920:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
ARM GAS  /tmp/cctjoR32.s 			page 45


 921:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1580              		.loc 1 921 0
 1581 01de FB68     		ldr	r3, [r7, #12]
 1582 01e0 1B68     		ldr	r3, [r3]
 1583 01e2 FA68     		ldr	r2, [r7, #12]
 1584 01e4 1268     		ldr	r2, [r2]
 1585 01e6 9268     		ldr	r2, [r2, #8]
 1586 01e8 22F40052 		bic	r2, r2, #8192
 1587 01ec 9A60     		str	r2, [r3, #8]
 922:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 923:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 924:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1588              		.loc 1 924 0
 1589 01ee FFF7FEFF 		bl	HAL_GetTick
 1590 01f2 B861     		str	r0, [r7, #24]
 925:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 926:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 927:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1591              		.loc 1 927 0
 1592 01f4 13E0     		b	.L64
 1593              	.L65:
 928:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 929:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1594              		.loc 1 929 0
 1595 01f6 FFF7FEFF 		bl	HAL_GetTick
 1596 01fa 0246     		mov	r2, r0
 1597 01fc BB69     		ldr	r3, [r7, #24]
 1598 01fe D31A     		subs	r3, r2, r3
 1599 0200 B3F57A7F 		cmp	r3, #1000
 1600 0204 0BD9     		bls	.L64
 930:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 931:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 932:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1601              		.loc 1 932 0
 1602 0206 FB68     		ldr	r3, [r7, #12]
 1603 0208 1B68     		ldr	r3, [r3]
 1604 020a FF22     		movs	r2, #255
 1605 020c 5A62     		str	r2, [r3, #36]
 933:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 934:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1606              		.loc 1 934 0
 1607 020e FB68     		ldr	r3, [r7, #12]
 1608 0210 0322     		movs	r2, #3
 1609 0212 5A77     		strb	r2, [r3, #29]
 935:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 936:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 937:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1610              		.loc 1 937 0
 1611 0214 FB68     		ldr	r3, [r7, #12]
 1612 0216 0022     		movs	r2, #0
 1613 0218 1A77     		strb	r2, [r3, #28]
 938:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 939:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1614              		.loc 1 939 0
 1615 021a 0323     		movs	r3, #3
 1616 021c 21E0     		b	.L52
 1617              	.L64:
ARM GAS  /tmp/cctjoR32.s 			page 46


 927:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1618              		.loc 1 927 0
 1619 021e FB68     		ldr	r3, [r7, #12]
 1620 0220 1B68     		ldr	r3, [r3]
 1621 0222 DB68     		ldr	r3, [r3, #12]
 1622 0224 03F00203 		and	r3, r3, #2
 1623 0228 002B     		cmp	r3, #0
 1624 022a E4D0     		beq	.L65
 940:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }  
 941:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }    
 942:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 943:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1625              		.loc 1 943 0
 1626 022c FB68     		ldr	r3, [r7, #12]
 1627 022e 1B68     		ldr	r3, [r3]
 1628 0230 FA69     		ldr	r2, [r7, #28]
 1629 0232 1A62     		str	r2, [r3, #32]
 944:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 945:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 1630              		.loc 1 945 0
 1631 0234 FB68     		ldr	r3, [r7, #12]
 1632 0236 1B68     		ldr	r3, [r3]
 1633 0238 7A69     		ldr	r2, [r7, #20]
 1634 023a 9A64     		str	r2, [r3, #72]
 946:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 947:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc); 
 1635              		.loc 1 947 0
 1636 023c FB68     		ldr	r3, [r7, #12]
 1637 023e 1B68     		ldr	r3, [r3]
 1638 0240 FA68     		ldr	r2, [r7, #12]
 1639 0242 1268     		ldr	r2, [r2]
 1640 0244 9268     		ldr	r2, [r2, #8]
 1641 0246 42F40072 		orr	r2, r2, #512
 1642 024a 9A60     		str	r2, [r3, #8]
 1643              	.L63:
 948:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 949:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 950:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 951:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 1644              		.loc 1 951 0
 1645 024c FB68     		ldr	r3, [r7, #12]
 1646 024e 1B68     		ldr	r3, [r3]
 1647 0250 FF22     		movs	r2, #255
 1648 0252 5A62     		str	r2, [r3, #36]
 952:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 953:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
 954:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1649              		.loc 1 954 0
 1650 0254 FB68     		ldr	r3, [r7, #12]
 1651 0256 0122     		movs	r2, #1
 1652 0258 5A77     		strb	r2, [r3, #29]
 955:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 956:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
 957:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1653              		.loc 1 957 0
 1654 025a FB68     		ldr	r3, [r7, #12]
 1655 025c 0022     		movs	r2, #0
ARM GAS  /tmp/cctjoR32.s 			page 47


 1656 025e 1A77     		strb	r2, [r3, #28]
 958:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 959:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 1657              		.loc 1 959 0
 1658 0260 0023     		movs	r3, #0
 1659              	.L52:
 960:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1660              		.loc 1 960 0
 1661 0262 1846     		mov	r0, r3
 1662 0264 2437     		adds	r7, r7, #36
 1663              	.LCFI45:
 1664              		.cfi_def_cfa_offset 12
 1665 0266 BD46     		mov	sp, r7
 1666              	.LCFI46:
 1667              		.cfi_def_cfa_register 13
 1668              		@ sp needed
 1669 0268 90BD     		pop	{r4, r7, pc}
 1670              		.cfi_endproc
 1671              	.LFE143:
 1673 026a 00BF     		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1674              		.align	2
 1675              		.global	HAL_RTC_SetAlarm_IT
 1676              		.thumb
 1677              		.thumb_func
 1679              	HAL_RTC_SetAlarm_IT:
 1680              	.LFB144:
 961:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 962:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 963:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt 
 964:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
 965:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 966:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Alarm structure
 967:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 968:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 969:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format 
 970:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
 971:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
 972:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
 973:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
 974:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 975:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 976:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
 977:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1681              		.loc 1 977 0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 32
 1684              		@ frame_needed = 1, uses_anonymous_args = 0
 1685 0000 90B5     		push	{r4, r7, lr}
 1686              	.LCFI47:
 1687              		.cfi_def_cfa_offset 12
 1688              		.cfi_offset 4, -12
 1689              		.cfi_offset 7, -8
 1690              		.cfi_offset 14, -4
 1691 0002 89B0     		sub	sp, sp, #36
 1692              	.LCFI48:
 1693              		.cfi_def_cfa_offset 48
 1694 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cctjoR32.s 			page 48


 1695              	.LCFI49:
 1696              		.cfi_def_cfa_register 7
 1697 0006 F860     		str	r0, [r7, #12]
 1698 0008 B960     		str	r1, [r7, #8]
 1699 000a 7A60     		str	r2, [r7, #4]
 978:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 1700              		.loc 1 978 0
 1701 000c 0023     		movs	r3, #0
 1702 000e BB61     		str	r3, [r7, #24]
 979:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 1703              		.loc 1 979 0
 1704 0010 0023     		movs	r3, #0
 1705 0012 FB61     		str	r3, [r7, #28]
 1706 0014 0023     		movs	r3, #0
 1707 0016 7B61     		str	r3, [r7, #20]
 980:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 981:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 982:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 983:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 984:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 985:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 986:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 987:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 988:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
 989:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 990:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1708              		.loc 1 990 0
 1709 0018 FB68     		ldr	r3, [r7, #12]
 1710 001a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1711 001c 012B     		cmp	r3, #1
 1712 001e 01D1     		bne	.L67
 1713              		.loc 1 990 0 is_stmt 0 discriminator 1
 1714 0020 0223     		movs	r3, #2
 1715 0022 3CE1     		b	.L68
 1716              	.L67:
 1717              		.loc 1 990 0 discriminator 2
 1718 0024 FB68     		ldr	r3, [r7, #12]
 1719 0026 0122     		movs	r2, #1
 1720 0028 1A77     		strb	r2, [r3, #28]
 991:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 992:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1721              		.loc 1 992 0 is_stmt 1 discriminator 2
 1722 002a FB68     		ldr	r3, [r7, #12]
 1723 002c 0222     		movs	r2, #2
 1724 002e 5A77     		strb	r2, [r3, #29]
 993:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 994:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1725              		.loc 1 994 0 discriminator 2
 1726 0030 7B68     		ldr	r3, [r7, #4]
 1727 0032 002B     		cmp	r3, #0
 1728 0034 37D1     		bne	.L69
 995:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 996:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1729              		.loc 1 996 0
 1730 0036 FB68     		ldr	r3, [r7, #12]
 1731 0038 1B68     		ldr	r3, [r3]
 1732 003a 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/cctjoR32.s 			page 49


 1733 003c 03F04003 		and	r3, r3, #64
 1734 0040 002B     		cmp	r3, #0
 1735 0042 02D1     		bne	.L70
 997:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 998:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 999:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1000:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1001:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1002:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1003:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1736              		.loc 1 1003 0
 1737 0044 BB68     		ldr	r3, [r7, #8]
 1738 0046 0022     		movs	r2, #0
 1739 0048 1A73     		strb	r2, [r3, #12]
 1740              	.L70:
1004:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1005:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1006:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1007:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1008:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1009:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1010:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1011:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1012:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1013:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1014:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1015:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1016:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1017:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 1741              		.loc 1 1017 0
 1742 004a BB68     		ldr	r3, [r7, #8]
 1743 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1744 004e 1846     		mov	r0, r3
 1745 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1746 0054 0346     		mov	r3, r0
 1747 0056 1C04     		lsls	r4, r3, #16
1018:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1748              		.loc 1 1018 0
 1749 0058 BB68     		ldr	r3, [r7, #8]
 1750 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1751 005c 1846     		mov	r0, r3
 1752 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1753 0062 0346     		mov	r3, r0
 1754 0064 1B02     		lsls	r3, r3, #8
1017:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1755              		.loc 1 1017 0
 1756 0066 1C43     		orrs	r4, r4, r3
1019:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1757              		.loc 1 1019 0
 1758 0068 BB68     		ldr	r3, [r7, #8]
 1759 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1760 006c 1846     		mov	r0, r3
 1761 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1762 0072 0346     		mov	r3, r0
1018:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1763              		.loc 1 1018 0
 1764 0074 44EA0302 		orr	r2, r4, r3
ARM GAS  /tmp/cctjoR32.s 			page 50


1020:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1765              		.loc 1 1020 0
 1766 0078 BB68     		ldr	r3, [r7, #8]
 1767 007a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1768 007c 1B04     		lsls	r3, r3, #16
1019:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1769              		.loc 1 1019 0
 1770 007e 42EA0304 		orr	r4, r2, r3
1021:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1771              		.loc 1 1021 0
 1772 0082 BB68     		ldr	r3, [r7, #8]
 1773 0084 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1774 0088 1846     		mov	r0, r3
 1775 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1776 008e 0346     		mov	r3, r0
 1777 0090 1B06     		lsls	r3, r3, #24
1020:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1778              		.loc 1 1020 0
 1779 0092 44EA0302 		orr	r2, r4, r3
1022:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1780              		.loc 1 1022 0
 1781 0096 BB68     		ldr	r3, [r7, #8]
 1782 0098 1B6A     		ldr	r3, [r3, #32]
1021:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1783              		.loc 1 1021 0
 1784 009a 1A43     		orrs	r2, r2, r3
1023:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1785              		.loc 1 1023 0
 1786 009c BB68     		ldr	r3, [r7, #8]
 1787 009e 9B69     		ldr	r3, [r3, #24]
1017:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1788              		.loc 1 1017 0
 1789 00a0 1343     		orrs	r3, r3, r2
 1790 00a2 FB61     		str	r3, [r7, #28]
 1791 00a4 40E0     		b	.L71
 1792              	.L69:
1024:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1025:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1026:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1027:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1793              		.loc 1 1027 0
 1794 00a6 FB68     		ldr	r3, [r7, #12]
 1795 00a8 1B68     		ldr	r3, [r3]
 1796 00aa 9B68     		ldr	r3, [r3, #8]
 1797 00ac 03F04003 		and	r3, r3, #64
 1798 00b0 002B     		cmp	r3, #0
 1799 00b2 07D0     		beq	.L72
1028:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1029:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1800              		.loc 1 1029 0
 1801 00b4 BB68     		ldr	r3, [r7, #8]
 1802 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1803 00b8 1846     		mov	r0, r3
 1804 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 1805 00be 0346     		mov	r3, r0
 1806 00c0 FB61     		str	r3, [r7, #28]
 1807 00c2 02E0     		b	.L73
ARM GAS  /tmp/cctjoR32.s 			page 51


 1808              	.L72:
1030:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1031:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1032:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1033:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1034:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1035:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1809              		.loc 1 1035 0
 1810 00c4 BB68     		ldr	r3, [r7, #8]
 1811 00c6 0022     		movs	r2, #0
 1812 00c8 1A73     		strb	r2, [r3, #12]
 1813              	.L73:
1036:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1037:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1038:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1039:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1040:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1041:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1042:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1814              		.loc 1 1042 0
 1815 00ca BB68     		ldr	r3, [r7, #8]
 1816 00cc 1B6A     		ldr	r3, [r3, #32]
 1817 00ce 002B     		cmp	r3, #0
 1818 00d0 08D1     		bne	.L74
1043:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1044:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1819              		.loc 1 1044 0
 1820 00d2 BB68     		ldr	r3, [r7, #8]
 1821 00d4 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1822 00d8 1846     		mov	r0, r3
 1823 00da FFF7FEFF 		bl	RTC_Bcd2ToByte
 1824 00de 0346     		mov	r3, r0
 1825 00e0 FB61     		str	r3, [r7, #28]
 1826 00e2 07E0     		b	.L75
 1827              	.L74:
1045:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1046:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1047:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1048:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1049:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1828              		.loc 1 1049 0
 1829 00e4 BB68     		ldr	r3, [r7, #8]
 1830 00e6 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1831 00ea 1846     		mov	r0, r3
 1832 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1833 00f0 0346     		mov	r3, r0
 1834 00f2 FB61     		str	r3, [r7, #28]
 1835              	.L75:
1050:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1051:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1052:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 1836              		.loc 1 1052 0
 1837 00f4 BB68     		ldr	r3, [r7, #8]
 1838 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1839 00f8 1A04     		lsls	r2, r3, #16
1053:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1840              		.loc 1 1053 0
ARM GAS  /tmp/cctjoR32.s 			page 52


 1841 00fa BB68     		ldr	r3, [r7, #8]
 1842 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1843 00fe 1B02     		lsls	r3, r3, #8
1052:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1844              		.loc 1 1052 0
 1845 0100 1343     		orrs	r3, r3, r2
1054:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1846              		.loc 1 1054 0
 1847 0102 BA68     		ldr	r2, [r7, #8]
 1848 0104 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1053:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1849              		.loc 1 1053 0
 1850 0106 1A43     		orrs	r2, r2, r3
1055:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1851              		.loc 1 1055 0
 1852 0108 BB68     		ldr	r3, [r7, #8]
 1853 010a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1854 010c 1B04     		lsls	r3, r3, #16
1054:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1855              		.loc 1 1054 0
 1856 010e 1A43     		orrs	r2, r2, r3
1056:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1857              		.loc 1 1056 0
 1858 0110 BB68     		ldr	r3, [r7, #8]
 1859 0112 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1860 0116 1B06     		lsls	r3, r3, #24
1055:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1861              		.loc 1 1055 0
 1862 0118 1A43     		orrs	r2, r2, r3
1057:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1863              		.loc 1 1057 0
 1864 011a BB68     		ldr	r3, [r7, #8]
 1865 011c 1B6A     		ldr	r3, [r3, #32]
1056:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1866              		.loc 1 1056 0
 1867 011e 1A43     		orrs	r2, r2, r3
1058:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));     
 1868              		.loc 1 1058 0
 1869 0120 BB68     		ldr	r3, [r7, #8]
 1870 0122 9B69     		ldr	r3, [r3, #24]
1052:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1871              		.loc 1 1052 0
 1872 0124 1343     		orrs	r3, r3, r2
 1873 0126 FB61     		str	r3, [r7, #28]
 1874              	.L71:
1059:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1060:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1061:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1875              		.loc 1 1061 0
 1876 0128 BB68     		ldr	r3, [r7, #8]
 1877 012a 5A68     		ldr	r2, [r3, #4]
 1878 012c BB68     		ldr	r3, [r7, #8]
 1879 012e DB69     		ldr	r3, [r3, #28]
 1880 0130 1343     		orrs	r3, r3, r2
 1881 0132 7B61     		str	r3, [r7, #20]
1062:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1063:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/cctjoR32.s 			page 53


1064:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1882              		.loc 1 1064 0
 1883 0134 FB68     		ldr	r3, [r7, #12]
 1884 0136 1B68     		ldr	r3, [r3]
 1885 0138 CA22     		movs	r2, #202
 1886 013a 5A62     		str	r2, [r3, #36]
 1887 013c FB68     		ldr	r3, [r7, #12]
 1888 013e 1B68     		ldr	r3, [r3]
 1889 0140 5322     		movs	r2, #83
 1890 0142 5A62     		str	r2, [r3, #36]
1065:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1066:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
1067:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1891              		.loc 1 1067 0
 1892 0144 BB68     		ldr	r3, [r7, #8]
 1893 0146 9B6A     		ldr	r3, [r3, #40]
 1894 0148 B3F5807F 		cmp	r3, #256
 1895 014c 48D1     		bne	.L76
1068:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1069:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1070:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1896              		.loc 1 1070 0
 1897 014e FB68     		ldr	r3, [r7, #12]
 1898 0150 1B68     		ldr	r3, [r3]
 1899 0152 FA68     		ldr	r2, [r7, #12]
 1900 0154 1268     		ldr	r2, [r2]
 1901 0156 9268     		ldr	r2, [r2, #8]
 1902 0158 22F48072 		bic	r2, r2, #256
 1903 015c 9A60     		str	r2, [r3, #8]
1071:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1072:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm A */
1073:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1904              		.loc 1 1073 0
 1905 015e FB68     		ldr	r3, [r7, #12]
 1906 0160 1B68     		ldr	r3, [r3]
 1907 0162 FA68     		ldr	r2, [r7, #12]
 1908 0164 1268     		ldr	r2, [r2]
 1909 0166 D268     		ldr	r2, [r2, #12]
 1910 0168 D2B2     		uxtb	r2, r2
 1911 016a 62F4C072 		orn	r2, r2, #384
 1912 016e DA60     		str	r2, [r3, #12]
1074:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1075:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1076:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1913              		.loc 1 1076 0
 1914 0170 FFF7FEFF 		bl	HAL_GetTick
 1915 0174 B861     		str	r0, [r7, #24]
1077:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1078:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1079:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1916              		.loc 1 1079 0
 1917 0176 13E0     		b	.L77
 1918              	.L78:
1080:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1081:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1919              		.loc 1 1081 0
 1920 0178 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/cctjoR32.s 			page 54


 1921 017c 0246     		mov	r2, r0
 1922 017e BB69     		ldr	r3, [r7, #24]
 1923 0180 D31A     		subs	r3, r2, r3
 1924 0182 B3F57A7F 		cmp	r3, #1000
 1925 0186 0BD9     		bls	.L77
1082:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1083:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1084:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1926              		.loc 1 1084 0
 1927 0188 FB68     		ldr	r3, [r7, #12]
 1928 018a 1B68     		ldr	r3, [r3]
 1929 018c FF22     		movs	r2, #255
 1930 018e 5A62     		str	r2, [r3, #36]
1085:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1086:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1931              		.loc 1 1086 0
 1932 0190 FB68     		ldr	r3, [r7, #12]
 1933 0192 0322     		movs	r2, #3
 1934 0194 5A77     		strb	r2, [r3, #29]
1087:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1088:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1089:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1935              		.loc 1 1089 0
 1936 0196 FB68     		ldr	r3, [r7, #12]
 1937 0198 0022     		movs	r2, #0
 1938 019a 1A77     		strb	r2, [r3, #28]
1090:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1091:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1939              		.loc 1 1091 0
 1940 019c 0323     		movs	r3, #3
 1941 019e 7EE0     		b	.L68
 1942              	.L77:
1079:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1943              		.loc 1 1079 0
 1944 01a0 FB68     		ldr	r3, [r7, #12]
 1945 01a2 1B68     		ldr	r3, [r3]
 1946 01a4 DB68     		ldr	r3, [r3, #12]
 1947 01a6 03F00103 		and	r3, r3, #1
 1948 01aa 002B     		cmp	r3, #0
 1949 01ac E4D0     		beq	.L78
1092:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }  
1093:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1094:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1095:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1950              		.loc 1 1095 0
 1951 01ae FB68     		ldr	r3, [r7, #12]
 1952 01b0 1B68     		ldr	r3, [r3]
 1953 01b2 FA69     		ldr	r2, [r7, #28]
 1954 01b4 DA61     		str	r2, [r3, #28]
1096:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1097:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1955              		.loc 1 1097 0
 1956 01b6 FB68     		ldr	r3, [r7, #12]
 1957 01b8 1B68     		ldr	r3, [r3]
 1958 01ba 7A69     		ldr	r2, [r7, #20]
 1959 01bc 5A64     		str	r2, [r3, #68]
1098:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
ARM GAS  /tmp/cctjoR32.s 			page 55


1099:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1960              		.loc 1 1099 0
 1961 01be FB68     		ldr	r3, [r7, #12]
 1962 01c0 1B68     		ldr	r3, [r3]
 1963 01c2 FA68     		ldr	r2, [r7, #12]
 1964 01c4 1268     		ldr	r2, [r2]
 1965 01c6 9268     		ldr	r2, [r2, #8]
 1966 01c8 42F48072 		orr	r2, r2, #256
 1967 01cc 9A60     		str	r2, [r3, #8]
1100:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1101:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 1968              		.loc 1 1101 0
 1969 01ce FB68     		ldr	r3, [r7, #12]
 1970 01d0 1B68     		ldr	r3, [r3]
 1971 01d2 FA68     		ldr	r2, [r7, #12]
 1972 01d4 1268     		ldr	r2, [r2]
 1973 01d6 9268     		ldr	r2, [r2, #8]
 1974 01d8 42F48052 		orr	r2, r2, #4096
 1975 01dc 9A60     		str	r2, [r3, #8]
 1976 01de 47E0     		b	.L79
 1977              	.L76:
1102:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1103:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1104:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1105:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1106:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1978              		.loc 1 1106 0
 1979 01e0 FB68     		ldr	r3, [r7, #12]
 1980 01e2 1B68     		ldr	r3, [r3]
 1981 01e4 FA68     		ldr	r2, [r7, #12]
 1982 01e6 1268     		ldr	r2, [r2]
 1983 01e8 9268     		ldr	r2, [r2, #8]
 1984 01ea 22F40072 		bic	r2, r2, #512
 1985 01ee 9A60     		str	r2, [r3, #8]
1107:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1108:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm B */
1109:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1986              		.loc 1 1109 0
 1987 01f0 FB68     		ldr	r3, [r7, #12]
 1988 01f2 1B68     		ldr	r3, [r3]
 1989 01f4 FA68     		ldr	r2, [r7, #12]
 1990 01f6 1268     		ldr	r2, [r2]
 1991 01f8 D268     		ldr	r2, [r2, #12]
 1992 01fa D2B2     		uxtb	r2, r2
 1993 01fc 62F42072 		orn	r2, r2, #640
 1994 0200 DA60     		str	r2, [r3, #12]
1110:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1111:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1112:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1995              		.loc 1 1112 0
 1996 0202 FFF7FEFF 		bl	HAL_GetTick
 1997 0206 B861     		str	r0, [r7, #24]
1113:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1114:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1115:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1998              		.loc 1 1115 0
 1999 0208 13E0     		b	.L80
ARM GAS  /tmp/cctjoR32.s 			page 56


 2000              	.L81:
1116:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1117:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2001              		.loc 1 1117 0
 2002 020a FFF7FEFF 		bl	HAL_GetTick
 2003 020e 0246     		mov	r2, r0
 2004 0210 BB69     		ldr	r3, [r7, #24]
 2005 0212 D31A     		subs	r3, r2, r3
 2006 0214 B3F57A7F 		cmp	r3, #1000
 2007 0218 0BD9     		bls	.L80
1118:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1119:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1120:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2008              		.loc 1 1120 0
 2009 021a FB68     		ldr	r3, [r7, #12]
 2010 021c 1B68     		ldr	r3, [r3]
 2011 021e FF22     		movs	r2, #255
 2012 0220 5A62     		str	r2, [r3, #36]
1121:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1122:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2013              		.loc 1 1122 0
 2014 0222 FB68     		ldr	r3, [r7, #12]
 2015 0224 0322     		movs	r2, #3
 2016 0226 5A77     		strb	r2, [r3, #29]
1123:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1124:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1125:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2017              		.loc 1 1125 0
 2018 0228 FB68     		ldr	r3, [r7, #12]
 2019 022a 0022     		movs	r2, #0
 2020 022c 1A77     		strb	r2, [r3, #28]
1126:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1127:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2021              		.loc 1 1127 0
 2022 022e 0323     		movs	r3, #3
 2023 0230 35E0     		b	.L68
 2024              	.L80:
1115:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2025              		.loc 1 1115 0
 2026 0232 FB68     		ldr	r3, [r7, #12]
 2027 0234 1B68     		ldr	r3, [r3]
 2028 0236 DB68     		ldr	r3, [r3, #12]
 2029 0238 03F00203 		and	r3, r3, #2
 2030 023c 002B     		cmp	r3, #0
 2031 023e E4D0     		beq	.L81
1128:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }  
1129:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1130:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1131:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 2032              		.loc 1 1131 0
 2033 0240 FB68     		ldr	r3, [r7, #12]
 2034 0242 1B68     		ldr	r3, [r3]
 2035 0244 FA69     		ldr	r2, [r7, #28]
 2036 0246 1A62     		str	r2, [r3, #32]
1132:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1133:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 2037              		.loc 1 1133 0
ARM GAS  /tmp/cctjoR32.s 			page 57


 2038 0248 FB68     		ldr	r3, [r7, #12]
 2039 024a 1B68     		ldr	r3, [r3]
 2040 024c 7A69     		ldr	r2, [r7, #20]
 2041 024e 9A64     		str	r2, [r3, #72]
1134:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1135:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 2042              		.loc 1 1135 0
 2043 0250 FB68     		ldr	r3, [r7, #12]
 2044 0252 1B68     		ldr	r3, [r3]
 2045 0254 FA68     		ldr	r2, [r7, #12]
 2046 0256 1268     		ldr	r2, [r2]
 2047 0258 9268     		ldr	r2, [r2, #8]
 2048 025a 42F40072 		orr	r2, r2, #512
 2049 025e 9A60     		str	r2, [r3, #8]
1136:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1137:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 2050              		.loc 1 1137 0
 2051 0260 FB68     		ldr	r3, [r7, #12]
 2052 0262 1B68     		ldr	r3, [r3]
 2053 0264 FA68     		ldr	r2, [r7, #12]
 2054 0266 1268     		ldr	r2, [r2]
 2055 0268 9268     		ldr	r2, [r2, #8]
 2056 026a 42F40052 		orr	r2, r2, #8192
 2057 026e 9A60     		str	r2, [r3, #8]
 2058              	.L79:
1138:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1139:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1140:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1141:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 2059              		.loc 1 1141 0
 2060 0270 0D4A     		ldr	r2, .L82
 2061 0272 0D4B     		ldr	r3, .L82
 2062 0274 1B68     		ldr	r3, [r3]
 2063 0276 43F40033 		orr	r3, r3, #131072
 2064 027a 1360     		str	r3, [r2]
1142:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1143:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 2065              		.loc 1 1143 0
 2066 027c 0A4A     		ldr	r2, .L82
 2067 027e 0A4B     		ldr	r3, .L82
 2068 0280 9B68     		ldr	r3, [r3, #8]
 2069 0282 43F40033 		orr	r3, r3, #131072
 2070 0286 9360     		str	r3, [r2, #8]
1144:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1145:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1146:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 2071              		.loc 1 1146 0
 2072 0288 FB68     		ldr	r3, [r7, #12]
 2073 028a 1B68     		ldr	r3, [r3]
 2074 028c FF22     		movs	r2, #255
 2075 028e 5A62     		str	r2, [r3, #36]
1147:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1148:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2076              		.loc 1 1148 0
 2077 0290 FB68     		ldr	r3, [r7, #12]
 2078 0292 0122     		movs	r2, #1
 2079 0294 5A77     		strb	r2, [r3, #29]
ARM GAS  /tmp/cctjoR32.s 			page 58


1149:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1150:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
1151:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2080              		.loc 1 1151 0
 2081 0296 FB68     		ldr	r3, [r7, #12]
 2082 0298 0022     		movs	r2, #0
 2083 029a 1A77     		strb	r2, [r3, #28]
1152:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1153:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2084              		.loc 1 1153 0
 2085 029c 0023     		movs	r3, #0
 2086              	.L68:
1154:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2087              		.loc 1 1154 0
 2088 029e 1846     		mov	r0, r3
 2089 02a0 2437     		adds	r7, r7, #36
 2090              	.LCFI50:
 2091              		.cfi_def_cfa_offset 12
 2092 02a2 BD46     		mov	sp, r7
 2093              	.LCFI51:
 2094              		.cfi_def_cfa_register 13
 2095              		@ sp needed
 2096 02a4 90BD     		pop	{r4, r7, pc}
 2097              	.L83:
 2098 02a6 00BF     		.align	2
 2099              	.L82:
 2100 02a8 003C0140 		.word	1073822720
 2101              		.cfi_endproc
 2102              	.LFE144:
 2104              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
 2105              		.align	2
 2106              		.global	HAL_RTC_DeactivateAlarm
 2107              		.thumb
 2108              		.thumb_func
 2110              	HAL_RTC_DeactivateAlarm:
 2111              	.LFB145:
1155:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1156:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1157:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Deactive the specified RTC Alarm 
1158:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
1159:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1160:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm: Specifies the Alarm.
1161:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1162:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1163:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1164:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1165:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1166:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1167:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2112              		.loc 1 1167 0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 16
 2115              		@ frame_needed = 1, uses_anonymous_args = 0
 2116 0000 80B5     		push	{r7, lr}
 2117              	.LCFI52:
 2118              		.cfi_def_cfa_offset 8
 2119              		.cfi_offset 7, -8
ARM GAS  /tmp/cctjoR32.s 			page 59


 2120              		.cfi_offset 14, -4
 2121 0002 84B0     		sub	sp, sp, #16
 2122              	.LCFI53:
 2123              		.cfi_def_cfa_offset 24
 2124 0004 00AF     		add	r7, sp, #0
 2125              	.LCFI54:
 2126              		.cfi_def_cfa_register 7
 2127 0006 7860     		str	r0, [r7, #4]
 2128 0008 3960     		str	r1, [r7]
1168:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 2129              		.loc 1 1168 0
 2130 000a 0023     		movs	r3, #0
 2131 000c FB60     		str	r3, [r7, #12]
1169:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1170:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1171:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1172:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1173:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
1174:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 2132              		.loc 1 1174 0
 2133 000e 7B68     		ldr	r3, [r7, #4]
 2134 0010 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2135 0012 012B     		cmp	r3, #1
 2136 0014 01D1     		bne	.L85
 2137              		.loc 1 1174 0 is_stmt 0 discriminator 1
 2138 0016 0223     		movs	r3, #2
 2139 0018 7BE0     		b	.L86
 2140              	.L85:
 2141              		.loc 1 1174 0 discriminator 2
 2142 001a 7B68     		ldr	r3, [r7, #4]
 2143 001c 0122     		movs	r2, #1
 2144 001e 1A77     		strb	r2, [r3, #28]
1175:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1176:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2145              		.loc 1 1176 0 is_stmt 1 discriminator 2
 2146 0020 7B68     		ldr	r3, [r7, #4]
 2147 0022 0222     		movs	r2, #2
 2148 0024 5A77     		strb	r2, [r3, #29]
1177:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1178:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1179:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2149              		.loc 1 1179 0 discriminator 2
 2150 0026 7B68     		ldr	r3, [r7, #4]
 2151 0028 1B68     		ldr	r3, [r3]
 2152 002a CA22     		movs	r2, #202
 2153 002c 5A62     		str	r2, [r3, #36]
 2154 002e 7B68     		ldr	r3, [r7, #4]
 2155 0030 1B68     		ldr	r3, [r3]
 2156 0032 5322     		movs	r2, #83
 2157 0034 5A62     		str	r2, [r3, #36]
1180:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1181:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2158              		.loc 1 1181 0 discriminator 2
 2159 0036 3B68     		ldr	r3, [r7]
 2160 0038 B3F5807F 		cmp	r3, #256
 2161 003c 2FD1     		bne	.L87
1182:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/cctjoR32.s 			page 60


1183:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1184:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2162              		.loc 1 1184 0
 2163 003e 7B68     		ldr	r3, [r7, #4]
 2164 0040 1B68     		ldr	r3, [r3]
 2165 0042 7A68     		ldr	r2, [r7, #4]
 2166 0044 1268     		ldr	r2, [r2]
 2167 0046 9268     		ldr	r2, [r2, #8]
 2168 0048 22F48072 		bic	r2, r2, #256
 2169 004c 9A60     		str	r2, [r3, #8]
1185:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1186:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1187:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 2170              		.loc 1 1187 0
 2171 004e 7B68     		ldr	r3, [r7, #4]
 2172 0050 1B68     		ldr	r3, [r3]
 2173 0052 7A68     		ldr	r2, [r7, #4]
 2174 0054 1268     		ldr	r2, [r2]
 2175 0056 9268     		ldr	r2, [r2, #8]
 2176 0058 22F48052 		bic	r2, r2, #4096
 2177 005c 9A60     		str	r2, [r3, #8]
1188:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1189:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1190:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2178              		.loc 1 1190 0
 2179 005e FFF7FEFF 		bl	HAL_GetTick
 2180 0062 F860     		str	r0, [r7, #12]
1191:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1192:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1193:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 2181              		.loc 1 1193 0
 2182 0064 13E0     		b	.L88
 2183              	.L89:
1194:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1195:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2184              		.loc 1 1195 0
 2185 0066 FFF7FEFF 		bl	HAL_GetTick
 2186 006a 0246     		mov	r2, r0
 2187 006c FB68     		ldr	r3, [r7, #12]
 2188 006e D31A     		subs	r3, r2, r3
 2189 0070 B3F57A7F 		cmp	r3, #1000
 2190 0074 0BD9     		bls	.L88
1196:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
1197:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1198:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2191              		.loc 1 1198 0
 2192 0076 7B68     		ldr	r3, [r7, #4]
 2193 0078 1B68     		ldr	r3, [r3]
 2194 007a FF22     		movs	r2, #255
 2195 007c 5A62     		str	r2, [r3, #36]
1199:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1200:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2196              		.loc 1 1200 0
 2197 007e 7B68     		ldr	r3, [r7, #4]
 2198 0080 0322     		movs	r2, #3
 2199 0082 5A77     		strb	r2, [r3, #29]
1201:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
ARM GAS  /tmp/cctjoR32.s 			page 61


1202:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1203:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2200              		.loc 1 1203 0
 2201 0084 7B68     		ldr	r3, [r7, #4]
 2202 0086 0022     		movs	r2, #0
 2203 0088 1A77     		strb	r2, [r3, #28]
1204:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1205:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2204              		.loc 1 1205 0
 2205 008a 0323     		movs	r3, #3
 2206 008c 41E0     		b	.L86
 2207              	.L88:
1193:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2208              		.loc 1 1193 0
 2209 008e 7B68     		ldr	r3, [r7, #4]
 2210 0090 1B68     		ldr	r3, [r3]
 2211 0092 DB68     		ldr	r3, [r3, #12]
 2212 0094 03F00103 		and	r3, r3, #1
 2213 0098 002B     		cmp	r3, #0
 2214 009a E4D0     		beq	.L89
 2215 009c 2EE0     		b	.L90
 2216              	.L87:
1206:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }      
1207:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1208:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1209:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1210:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1211:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmB */
1212:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2217              		.loc 1 1212 0
 2218 009e 7B68     		ldr	r3, [r7, #4]
 2219 00a0 1B68     		ldr	r3, [r3]
 2220 00a2 7A68     		ldr	r2, [r7, #4]
 2221 00a4 1268     		ldr	r2, [r2]
 2222 00a6 9268     		ldr	r2, [r2, #8]
 2223 00a8 22F40072 		bic	r2, r2, #512
 2224 00ac 9A60     		str	r2, [r3, #8]
1213:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1214:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1215:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 2225              		.loc 1 1215 0
 2226 00ae 7B68     		ldr	r3, [r7, #4]
 2227 00b0 1B68     		ldr	r3, [r3]
 2228 00b2 7A68     		ldr	r2, [r7, #4]
 2229 00b4 1268     		ldr	r2, [r2]
 2230 00b6 9268     		ldr	r2, [r2, #8]
 2231 00b8 22F40052 		bic	r2, r2, #8192
 2232 00bc 9A60     		str	r2, [r3, #8]
1216:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1217:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1218:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2233              		.loc 1 1218 0
 2234 00be FFF7FEFF 		bl	HAL_GetTick
 2235 00c2 F860     		str	r0, [r7, #12]
1219:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1220:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1221:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
ARM GAS  /tmp/cctjoR32.s 			page 62


 2236              		.loc 1 1221 0
 2237 00c4 13E0     		b	.L91
 2238              	.L92:
1222:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1223:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2239              		.loc 1 1223 0
 2240 00c6 FFF7FEFF 		bl	HAL_GetTick
 2241 00ca 0246     		mov	r2, r0
 2242 00cc FB68     		ldr	r3, [r7, #12]
 2243 00ce D31A     		subs	r3, r2, r3
 2244 00d0 B3F57A7F 		cmp	r3, #1000
 2245 00d4 0BD9     		bls	.L91
1224:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1225:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1226:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2246              		.loc 1 1226 0
 2247 00d6 7B68     		ldr	r3, [r7, #4]
 2248 00d8 1B68     		ldr	r3, [r3]
 2249 00da FF22     		movs	r2, #255
 2250 00dc 5A62     		str	r2, [r3, #36]
1227:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1228:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2251              		.loc 1 1228 0
 2252 00de 7B68     		ldr	r3, [r7, #4]
 2253 00e0 0322     		movs	r2, #3
 2254 00e2 5A77     		strb	r2, [r3, #29]
1229:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1230:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1231:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2255              		.loc 1 1231 0
 2256 00e4 7B68     		ldr	r3, [r7, #4]
 2257 00e6 0022     		movs	r2, #0
 2258 00e8 1A77     		strb	r2, [r3, #28]
1232:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1233:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2259              		.loc 1 1233 0
 2260 00ea 0323     		movs	r3, #3
 2261 00ec 11E0     		b	.L86
 2262              	.L91:
1221:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2263              		.loc 1 1221 0
 2264 00ee 7B68     		ldr	r3, [r7, #4]
 2265 00f0 1B68     		ldr	r3, [r3]
 2266 00f2 DB68     		ldr	r3, [r3, #12]
 2267 00f4 03F00203 		and	r3, r3, #2
 2268 00f8 002B     		cmp	r3, #0
 2269 00fa E4D0     		beq	.L92
 2270              	.L90:
1234:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }    
1235:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1236:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1237:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1238:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2271              		.loc 1 1238 0
 2272 00fc 7B68     		ldr	r3, [r7, #4]
 2273 00fe 1B68     		ldr	r3, [r3]
 2274 0100 FF22     		movs	r2, #255
ARM GAS  /tmp/cctjoR32.s 			page 63


 2275 0102 5A62     		str	r2, [r3, #36]
1239:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1240:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2276              		.loc 1 1240 0
 2277 0104 7B68     		ldr	r3, [r7, #4]
 2278 0106 0122     		movs	r2, #1
 2279 0108 5A77     		strb	r2, [r3, #29]
1241:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1242:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
1243:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2280              		.loc 1 1243 0
 2281 010a 7B68     		ldr	r3, [r7, #4]
 2282 010c 0022     		movs	r2, #0
 2283 010e 1A77     		strb	r2, [r3, #28]
1244:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1245:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK; 
 2284              		.loc 1 1245 0
 2285 0110 0023     		movs	r3, #0
 2286              	.L86:
1246:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2287              		.loc 1 1246 0
 2288 0112 1846     		mov	r0, r3
 2289 0114 1037     		adds	r7, r7, #16
 2290              	.LCFI55:
 2291              		.cfi_def_cfa_offset 8
 2292 0116 BD46     		mov	sp, r7
 2293              	.LCFI56:
 2294              		.cfi_def_cfa_register 13
 2295              		@ sp needed
 2296 0118 80BD     		pop	{r7, pc}
 2297              		.cfi_endproc
 2298              	.LFE145:
 2300 011a 00BF     		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2301              		.align	2
 2302              		.global	HAL_RTC_GetAlarm
 2303              		.thumb
 2304              		.thumb_func
 2306              	HAL_RTC_GetAlarm:
 2307              	.LFB146:
1247:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****            
1248:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1249:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1250:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
1251:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1252:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Date structure
1253:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm: Specifies the Alarm.
1254:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1255:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1256:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB  
1257:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
1258:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1259:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
1260:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1261:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1262:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1263:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1264:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
ARM GAS  /tmp/cctjoR32.s 			page 64


 2308              		.loc 1 1264 0
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 24
 2311              		@ frame_needed = 1, uses_anonymous_args = 0
 2312 0000 80B5     		push	{r7, lr}
 2313              	.LCFI57:
 2314              		.cfi_def_cfa_offset 8
 2315              		.cfi_offset 7, -8
 2316              		.cfi_offset 14, -4
 2317 0002 86B0     		sub	sp, sp, #24
 2318              	.LCFI58:
 2319              		.cfi_def_cfa_offset 32
 2320 0004 00AF     		add	r7, sp, #0
 2321              	.LCFI59:
 2322              		.cfi_def_cfa_register 7
 2323 0006 F860     		str	r0, [r7, #12]
 2324 0008 B960     		str	r1, [r7, #8]
 2325 000a 7A60     		str	r2, [r7, #4]
 2326 000c 3B60     		str	r3, [r7]
1265:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 2327              		.loc 1 1265 0
 2328 000e 0023     		movs	r3, #0
 2329 0010 7B61     		str	r3, [r7, #20]
 2330 0012 0023     		movs	r3, #0
 2331 0014 3B61     		str	r3, [r7, #16]
1266:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1267:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1268:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1269:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1270:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1271:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2332              		.loc 1 1271 0
 2333 0016 7B68     		ldr	r3, [r7, #4]
 2334 0018 B3F5807F 		cmp	r3, #256
 2335 001c 0ED1     		bne	.L94
1272:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1273:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1274:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2336              		.loc 1 1274 0
 2337 001e BB68     		ldr	r3, [r7, #8]
 2338 0020 4FF48072 		mov	r2, #256
 2339 0024 9A62     		str	r2, [r3, #40]
1275:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1276:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2340              		.loc 1 1276 0
 2341 0026 FB68     		ldr	r3, [r7, #12]
 2342 0028 1B68     		ldr	r3, [r3]
 2343 002a DB69     		ldr	r3, [r3, #28]
 2344 002c 7B61     		str	r3, [r7, #20]
1277:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 2345              		.loc 1 1277 0
 2346 002e FB68     		ldr	r3, [r7, #12]
 2347 0030 1B68     		ldr	r3, [r3]
 2348 0032 5B6C     		ldr	r3, [r3, #68]
 2349 0034 C3F30E03 		ubfx	r3, r3, #0, #15
 2350 0038 3B61     		str	r3, [r7, #16]
 2351 003a 0DE0     		b	.L95
ARM GAS  /tmp/cctjoR32.s 			page 65


 2352              	.L94:
1278:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1279:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1280:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1281:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2353              		.loc 1 1281 0
 2354 003c BB68     		ldr	r3, [r7, #8]
 2355 003e 4FF40072 		mov	r2, #512
 2356 0042 9A62     		str	r2, [r3, #40]
1282:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1283:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2357              		.loc 1 1283 0
 2358 0044 FB68     		ldr	r3, [r7, #12]
 2359 0046 1B68     		ldr	r3, [r3]
 2360 0048 1B6A     		ldr	r3, [r3, #32]
 2361 004a 7B61     		str	r3, [r7, #20]
1284:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2362              		.loc 1 1284 0
 2363 004c FB68     		ldr	r3, [r7, #12]
 2364 004e 1B68     		ldr	r3, [r3]
 2365 0050 9B6C     		ldr	r3, [r3, #72]
 2366 0052 C3F30E03 		ubfx	r3, r3, #0, #15
 2367 0056 3B61     		str	r3, [r7, #16]
 2368              	.L95:
1285:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1286:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1287:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1288:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16);
 2369              		.loc 1 1288 0
 2370 0058 7B69     		ldr	r3, [r7, #20]
 2371 005a 03F47C13 		and	r3, r3, #4128768
 2372 005e 1B0C     		lsrs	r3, r3, #16
 2373 0060 DAB2     		uxtb	r2, r3
 2374 0062 BB68     		ldr	r3, [r7, #8]
 2375 0064 1A70     		strb	r2, [r3]
1289:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
 2376              		.loc 1 1289 0
 2377 0066 7B69     		ldr	r3, [r7, #20]
 2378 0068 03F4FE43 		and	r3, r3, #32512
 2379 006c 1B0A     		lsrs	r3, r3, #8
 2380 006e DAB2     		uxtb	r2, r3
 2381 0070 BB68     		ldr	r3, [r7, #8]
 2382 0072 5A70     		strb	r2, [r3, #1]
1290:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 2383              		.loc 1 1290 0
 2384 0074 7B69     		ldr	r3, [r7, #20]
 2385 0076 DBB2     		uxtb	r3, r3
 2386 0078 03F07F03 		and	r3, r3, #127
 2387 007c DAB2     		uxtb	r2, r3
 2388 007e BB68     		ldr	r3, [r7, #8]
 2389 0080 9A70     		strb	r2, [r3, #2]
1291:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2390              		.loc 1 1291 0
 2391 0082 7B69     		ldr	r3, [r7, #20]
 2392 0084 03F48003 		and	r3, r3, #4194304
 2393 0088 1B0C     		lsrs	r3, r3, #16
 2394 008a DAB2     		uxtb	r2, r3
ARM GAS  /tmp/cctjoR32.s 			page 66


 2395 008c BB68     		ldr	r3, [r7, #8]
 2396 008e 1A73     		strb	r2, [r3, #12]
1292:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2397              		.loc 1 1292 0
 2398 0090 BB68     		ldr	r3, [r7, #8]
 2399 0092 3A69     		ldr	r2, [r7, #16]
 2400 0094 5A60     		str	r2, [r3, #4]
1293:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 2401              		.loc 1 1293 0
 2402 0096 7B69     		ldr	r3, [r7, #20]
 2403 0098 03F07C53 		and	r3, r3, #1056964608
 2404 009c 1B0E     		lsrs	r3, r3, #24
 2405 009e DAB2     		uxtb	r2, r3
 2406 00a0 BB68     		ldr	r3, [r7, #8]
 2407 00a2 83F82420 		strb	r2, [r3, #36]
1294:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2408              		.loc 1 1294 0
 2409 00a6 7B69     		ldr	r3, [r7, #20]
 2410 00a8 03F08042 		and	r2, r3, #1073741824
 2411 00ac BB68     		ldr	r3, [r7, #8]
 2412 00ae 1A62     		str	r2, [r3, #32]
1295:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2413              		.loc 1 1295 0
 2414 00b0 7B69     		ldr	r3, [r7, #20]
 2415 00b2 03F08032 		and	r2, r3, #-2139062144
 2416 00b6 BB68     		ldr	r3, [r7, #8]
 2417 00b8 9A61     		str	r2, [r3, #24]
1296:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1297:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 2418              		.loc 1 1297 0
 2419 00ba 3B68     		ldr	r3, [r7]
 2420 00bc 002B     		cmp	r3, #0
 2421 00be 25D1     		bne	.L96
1298:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1299:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2422              		.loc 1 1299 0
 2423 00c0 BB68     		ldr	r3, [r7, #8]
 2424 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2425 00c4 1846     		mov	r0, r3
 2426 00c6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2427 00ca 0346     		mov	r3, r0
 2428 00cc 1A46     		mov	r2, r3
 2429 00ce BB68     		ldr	r3, [r7, #8]
 2430 00d0 1A70     		strb	r2, [r3]
1300:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2431              		.loc 1 1300 0
 2432 00d2 BB68     		ldr	r3, [r7, #8]
 2433 00d4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2434 00d6 1846     		mov	r0, r3
 2435 00d8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2436 00dc 0346     		mov	r3, r0
 2437 00de 1A46     		mov	r2, r3
 2438 00e0 BB68     		ldr	r3, [r7, #8]
 2439 00e2 5A70     		strb	r2, [r3, #1]
1301:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2440              		.loc 1 1301 0
 2441 00e4 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cctjoR32.s 			page 67


 2442 00e6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2443 00e8 1846     		mov	r0, r3
 2444 00ea FFF7FEFF 		bl	RTC_Bcd2ToByte
 2445 00ee 0346     		mov	r3, r0
 2446 00f0 1A46     		mov	r2, r3
 2447 00f2 BB68     		ldr	r3, [r7, #8]
 2448 00f4 9A70     		strb	r2, [r3, #2]
1302:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2449              		.loc 1 1302 0
 2450 00f6 BB68     		ldr	r3, [r7, #8]
 2451 00f8 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2452 00fc 1846     		mov	r0, r3
 2453 00fe FFF7FEFF 		bl	RTC_Bcd2ToByte
 2454 0102 0346     		mov	r3, r0
 2455 0104 1A46     		mov	r2, r3
 2456 0106 BB68     		ldr	r3, [r7, #8]
 2457 0108 83F82420 		strb	r2, [r3, #36]
 2458              	.L96:
1303:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }  
1304:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1305:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2459              		.loc 1 1305 0
 2460 010c 0023     		movs	r3, #0
1306:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2461              		.loc 1 1306 0
 2462 010e 1846     		mov	r0, r3
 2463 0110 1837     		adds	r7, r7, #24
 2464              	.LCFI60:
 2465              		.cfi_def_cfa_offset 8
 2466 0112 BD46     		mov	sp, r7
 2467              	.LCFI61:
 2468              		.cfi_def_cfa_register 13
 2469              		@ sp needed
 2470 0114 80BD     		pop	{r7, pc}
 2471              		.cfi_endproc
 2472              	.LFE146:
 2474 0116 00BF     		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 2475              		.align	2
 2476              		.global	HAL_RTC_AlarmIRQHandler
 2477              		.thumb
 2478              		.thumb_func
 2480              	HAL_RTC_AlarmIRQHandler:
 2481              	.LFB147:
1307:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1308:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1309:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles Alarm interrupt request.
1310:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
1311:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1312:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1313:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1314:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1315:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {  
 2482              		.loc 1 1315 0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 8
 2485              		@ frame_needed = 1, uses_anonymous_args = 0
 2486 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/cctjoR32.s 			page 68


 2487              	.LCFI62:
 2488              		.cfi_def_cfa_offset 8
 2489              		.cfi_offset 7, -8
 2490              		.cfi_offset 14, -4
 2491 0002 82B0     		sub	sp, sp, #8
 2492              	.LCFI63:
 2493              		.cfi_def_cfa_offset 16
 2494 0004 00AF     		add	r7, sp, #0
 2495              	.LCFI64:
 2496              		.cfi_def_cfa_register 7
 2497 0006 7860     		str	r0, [r7, #4]
1316:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 2498              		.loc 1 1316 0
 2499 0008 7B68     		ldr	r3, [r7, #4]
 2500 000a 1B68     		ldr	r3, [r3]
 2501 000c DB68     		ldr	r3, [r3, #12]
 2502 000e 03F48073 		and	r3, r3, #256
 2503 0012 002B     		cmp	r3, #0
 2504 0014 12D0     		beq	.L99
1317:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1318:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1319:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 2505              		.loc 1 1319 0
 2506 0016 7B68     		ldr	r3, [r7, #4]
 2507 0018 1B68     		ldr	r3, [r3]
 2508 001a 9B68     		ldr	r3, [r3, #8]
 2509 001c 03F48053 		and	r3, r3, #4096
 2510 0020 002B     		cmp	r3, #0
 2511 0022 0BD0     		beq	.L99
1320:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1321:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* AlarmA callback */ 
1322:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2512              		.loc 1 1322 0
 2513 0024 7868     		ldr	r0, [r7, #4]
 2514 0026 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
1323:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
1324:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1325:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 2515              		.loc 1 1325 0
 2516 002a 7B68     		ldr	r3, [r7, #4]
 2517 002c 1B68     		ldr	r3, [r3]
 2518 002e 7A68     		ldr	r2, [r7, #4]
 2519 0030 1268     		ldr	r2, [r2]
 2520 0032 D268     		ldr	r2, [r2, #12]
 2521 0034 D2B2     		uxtb	r2, r2
 2522 0036 62F4C072 		orn	r2, r2, #384
 2523 003a DA60     		str	r2, [r3, #12]
 2524              	.L99:
1326:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1327:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1328:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1329:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 2525              		.loc 1 1329 0
 2526 003c 7B68     		ldr	r3, [r7, #4]
 2527 003e 1B68     		ldr	r3, [r3]
 2528 0040 DB68     		ldr	r3, [r3, #12]
 2529 0042 03F40073 		and	r3, r3, #512
ARM GAS  /tmp/cctjoR32.s 			page 69


 2530 0046 002B     		cmp	r3, #0
 2531 0048 12D0     		beq	.L100
1330:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1331:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1332:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 2532              		.loc 1 1332 0
 2533 004a 7B68     		ldr	r3, [r7, #4]
 2534 004c 1B68     		ldr	r3, [r3]
 2535 004e 9B68     		ldr	r3, [r3, #8]
 2536 0050 03F40053 		and	r3, r3, #8192
 2537 0054 002B     		cmp	r3, #0
 2538 0056 0BD0     		beq	.L100
1333:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* AlarmB callback */ 
1335:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2539              		.loc 1 1335 0
 2540 0058 7868     		ldr	r0, [r7, #4]
 2541 005a FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
1336:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
1337:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1338:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 2542              		.loc 1 1338 0
 2543 005e 7B68     		ldr	r3, [r7, #4]
 2544 0060 1B68     		ldr	r3, [r3]
 2545 0062 7A68     		ldr	r2, [r7, #4]
 2546 0064 1268     		ldr	r2, [r2]
 2547 0066 D268     		ldr	r2, [r2, #12]
 2548 0068 D2B2     		uxtb	r2, r2
 2549 006a 62F42072 		orn	r2, r2, #640
 2550 006e DA60     		str	r2, [r3, #12]
 2551              	.L100:
1339:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1340:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1341:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1342:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1343:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 2552              		.loc 1 1343 0
 2553 0070 044B     		ldr	r3, .L101
 2554 0072 4FF40032 		mov	r2, #131072
 2555 0076 5A61     		str	r2, [r3, #20]
1344:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1345:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1346:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2556              		.loc 1 1346 0
 2557 0078 7B68     		ldr	r3, [r7, #4]
 2558 007a 0122     		movs	r2, #1
 2559 007c 5A77     		strb	r2, [r3, #29]
1347:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2560              		.loc 1 1347 0
 2561 007e 0837     		adds	r7, r7, #8
 2562              	.LCFI65:
 2563              		.cfi_def_cfa_offset 8
 2564 0080 BD46     		mov	sp, r7
 2565              	.LCFI66:
 2566              		.cfi_def_cfa_register 13
 2567              		@ sp needed
 2568 0082 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cctjoR32.s 			page 70


 2569              	.L102:
 2570              		.align	2
 2571              	.L101:
 2572 0084 003C0140 		.word	1073822720
 2573              		.cfi_endproc
 2574              	.LFE147:
 2576              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 2577              		.align	2
 2578              		.weak	HAL_RTC_AlarmAEventCallback
 2579              		.thumb
 2580              		.thumb_func
 2582              	HAL_RTC_AlarmAEventCallback:
 2583              	.LFB148:
1348:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1349:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1350:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1351:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
1352:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1353:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1354:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1355:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1356:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2584              		.loc 1 1356 0
 2585              		.cfi_startproc
 2586              		@ args = 0, pretend = 0, frame = 8
 2587              		@ frame_needed = 1, uses_anonymous_args = 0
 2588              		@ link register save eliminated.
 2589 0000 80B4     		push	{r7}
 2590              	.LCFI67:
 2591              		.cfi_def_cfa_offset 4
 2592              		.cfi_offset 7, -4
 2593 0002 83B0     		sub	sp, sp, #12
 2594              	.LCFI68:
 2595              		.cfi_def_cfa_offset 16
 2596 0004 00AF     		add	r7, sp, #0
 2597              	.LCFI69:
 2598              		.cfi_def_cfa_register 7
 2599 0006 7860     		str	r0, [r7, #4]
1357:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1358:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
1359:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1360:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1361:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1362:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */
1363:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2600              		.loc 1 1363 0
 2601 0008 0C37     		adds	r7, r7, #12
 2602              	.LCFI70:
 2603              		.cfi_def_cfa_offset 4
 2604 000a BD46     		mov	sp, r7
 2605              	.LCFI71:
 2606              		.cfi_def_cfa_register 13
 2607              		@ sp needed
 2608 000c 5DF8047B 		ldr	r7, [sp], #4
 2609              	.LCFI72:
 2610              		.cfi_restore 7
 2611              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cctjoR32.s 			page 71


 2612 0010 7047     		bx	lr
 2613              		.cfi_endproc
 2614              	.LFE148:
 2616 0012 00BF     		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 2617              		.align	2
 2618              		.global	HAL_RTC_PollForAlarmAEvent
 2619              		.thumb
 2620              		.thumb_func
 2622              	HAL_RTC_PollForAlarmAEvent:
 2623              	.LFB149:
1364:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1365:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1366:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles AlarmA Polling request.
1367:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
1368:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1369:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Timeout: Timeout duration
1370:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1371:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1372:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1373:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2624              		.loc 1 1373 0
 2625              		.cfi_startproc
 2626              		@ args = 0, pretend = 0, frame = 16
 2627              		@ frame_needed = 1, uses_anonymous_args = 0
 2628 0000 80B5     		push	{r7, lr}
 2629              	.LCFI73:
 2630              		.cfi_def_cfa_offset 8
 2631              		.cfi_offset 7, -8
 2632              		.cfi_offset 14, -4
 2633 0002 84B0     		sub	sp, sp, #16
 2634              	.LCFI74:
 2635              		.cfi_def_cfa_offset 24
 2636 0004 00AF     		add	r7, sp, #0
 2637              	.LCFI75:
 2638              		.cfi_def_cfa_register 7
 2639 0006 7860     		str	r0, [r7, #4]
 2640 0008 3960     		str	r1, [r7]
1374:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0; 
 2641              		.loc 1 1374 0
 2642 000a 0023     		movs	r3, #0
 2643 000c FB60     		str	r3, [r7, #12]
1375:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1376:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1377:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2644              		.loc 1 1377 0
 2645 000e FFF7FEFF 		bl	HAL_GetTick
 2646 0012 F860     		str	r0, [r7, #12]
1378:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1379:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
 2647              		.loc 1 1379 0
 2648 0014 13E0     		b	.L105
 2649              	.L108:
1380:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1381:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 2650              		.loc 1 1381 0
 2651 0016 3B68     		ldr	r3, [r7]
 2652 0018 B3F1FF3F 		cmp	r3, #-1
ARM GAS  /tmp/cctjoR32.s 			page 72


 2653 001c 0FD0     		beq	.L105
1382:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1383:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 2654              		.loc 1 1383 0
 2655 001e 3B68     		ldr	r3, [r7]
 2656 0020 002B     		cmp	r3, #0
 2657 0022 07D0     		beq	.L106
 2658              		.loc 1 1383 0 is_stmt 0 discriminator 1
 2659 0024 FFF7FEFF 		bl	HAL_GetTick
 2660 0028 0246     		mov	r2, r0
 2661 002a FB68     		ldr	r3, [r7, #12]
 2662 002c D21A     		subs	r2, r2, r3
 2663 002e 3B68     		ldr	r3, [r7]
 2664 0030 9A42     		cmp	r2, r3
 2665 0032 04D9     		bls	.L105
 2666              	.L106:
1384:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1385:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2667              		.loc 1 1385 0 is_stmt 1
 2668 0034 7B68     		ldr	r3, [r7, #4]
 2669 0036 0322     		movs	r2, #3
 2670 0038 5A77     		strb	r2, [r3, #29]
1386:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2671              		.loc 1 1386 0
 2672 003a 0323     		movs	r3, #3
 2673 003c 13E0     		b	.L107
 2674              	.L105:
1379:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2675              		.loc 1 1379 0
 2676 003e 7B68     		ldr	r3, [r7, #4]
 2677 0040 1B68     		ldr	r3, [r3]
 2678 0042 DB68     		ldr	r3, [r3, #12]
 2679 0044 03F48073 		and	r3, r3, #256
 2680 0048 002B     		cmp	r3, #0
 2681 004a E4D0     		beq	.L108
1387:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1388:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1389:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1390:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1391:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1392:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2682              		.loc 1 1392 0
 2683 004c 7B68     		ldr	r3, [r7, #4]
 2684 004e 1B68     		ldr	r3, [r3]
 2685 0050 7A68     		ldr	r2, [r7, #4]
 2686 0052 1268     		ldr	r2, [r2]
 2687 0054 D268     		ldr	r2, [r2, #12]
 2688 0056 D2B2     		uxtb	r2, r2
 2689 0058 62F4C072 		orn	r2, r2, #384
 2690 005c DA60     		str	r2, [r3, #12]
1393:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1394:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1395:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2691              		.loc 1 1395 0
 2692 005e 7B68     		ldr	r3, [r7, #4]
 2693 0060 0122     		movs	r2, #1
 2694 0062 5A77     		strb	r2, [r3, #29]
ARM GAS  /tmp/cctjoR32.s 			page 73


1396:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1397:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;  
 2695              		.loc 1 1397 0
 2696 0064 0023     		movs	r3, #0
 2697              	.L107:
1398:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2698              		.loc 1 1398 0
 2699 0066 1846     		mov	r0, r3
 2700 0068 1037     		adds	r7, r7, #16
 2701              	.LCFI76:
 2702              		.cfi_def_cfa_offset 8
 2703 006a BD46     		mov	sp, r7
 2704              	.LCFI77:
 2705              		.cfi_def_cfa_register 13
 2706              		@ sp needed
 2707 006c 80BD     		pop	{r7, pc}
 2708              		.cfi_endproc
 2709              	.LFE149:
 2711 006e 00BF     		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 2712              		.align	2
 2713              		.global	HAL_RTC_WaitForSynchro
 2714              		.thumb
 2715              		.thumb_func
 2717              	HAL_RTC_WaitForSynchro:
 2718              	.LFB150:
1399:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1400:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1401:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1402:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1403:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1404:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group4 Peripheral Control functions 
1405:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions 
1406:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1407:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
1408:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1409:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1410:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
1411:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     [..]
1412:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1413:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1414:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1415:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1416:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1417:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1418:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1419:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1420:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
1421:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1422:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
1423:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function. 
1424:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
1425:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
1426:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         the software must first clear the RSF flag. 
1427:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading 
1428:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been 
1429:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
1430:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
ARM GAS  /tmp/cctjoR32.s 			page 74


1431:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1432:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1433:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1434:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1435:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2719              		.loc 1 1435 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 16
 2722              		@ frame_needed = 1, uses_anonymous_args = 0
 2723 0000 80B5     		push	{r7, lr}
 2724              	.LCFI78:
 2725              		.cfi_def_cfa_offset 8
 2726              		.cfi_offset 7, -8
 2727              		.cfi_offset 14, -4
 2728 0002 84B0     		sub	sp, sp, #16
 2729              	.LCFI79:
 2730              		.cfi_def_cfa_offset 24
 2731 0004 00AF     		add	r7, sp, #0
 2732              	.LCFI80:
 2733              		.cfi_def_cfa_register 7
 2734 0006 7860     		str	r0, [r7, #4]
1436:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 2735              		.loc 1 1436 0
 2736 0008 0023     		movs	r3, #0
 2737 000a FB60     		str	r3, [r7, #12]
1437:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1438:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear RSF flag */
1439:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 2738              		.loc 1 1439 0
 2739 000c 7B68     		ldr	r3, [r7, #4]
 2740 000e 1B68     		ldr	r3, [r3]
 2741 0010 7A68     		ldr	r2, [r7, #4]
 2742 0012 1268     		ldr	r2, [r2]
 2743 0014 D268     		ldr	r2, [r2, #12]
 2744 0016 22F0A002 		bic	r2, r2, #160
 2745 001a DA60     		str	r2, [r3, #12]
1440:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1441:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1442:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2746              		.loc 1 1442 0
 2747 001c FFF7FEFF 		bl	HAL_GetTick
 2748 0020 F860     		str	r0, [r7, #12]
1443:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1444:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1445:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 2749              		.loc 1 1445 0
 2750 0022 09E0     		b	.L110
 2751              	.L112:
1446:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1447:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2752              		.loc 1 1447 0
 2753 0024 FFF7FEFF 		bl	HAL_GetTick
 2754 0028 0246     		mov	r2, r0
 2755 002a FB68     		ldr	r3, [r7, #12]
 2756 002c D31A     		subs	r3, r2, r3
 2757 002e B3F57A7F 		cmp	r3, #1000
 2758 0032 01D9     		bls	.L110
ARM GAS  /tmp/cctjoR32.s 			page 75


1448:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {       
1449:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       return HAL_TIMEOUT;
 2759              		.loc 1 1449 0
 2760 0034 0323     		movs	r3, #3
 2761 0036 07E0     		b	.L111
 2762              	.L110:
1445:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2763              		.loc 1 1445 0
 2764 0038 7B68     		ldr	r3, [r7, #4]
 2765 003a 1B68     		ldr	r3, [r3]
 2766 003c DB68     		ldr	r3, [r3, #12]
 2767 003e 03F02003 		and	r3, r3, #32
 2768 0042 002B     		cmp	r3, #0
 2769 0044 EED0     		beq	.L112
1450:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1451:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1452:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1453:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2770              		.loc 1 1453 0
 2771 0046 0023     		movs	r3, #0
 2772              	.L111:
1454:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2773              		.loc 1 1454 0
 2774 0048 1846     		mov	r0, r3
 2775 004a 1037     		adds	r7, r7, #16
 2776              	.LCFI81:
 2777              		.cfi_def_cfa_offset 8
 2778 004c BD46     		mov	sp, r7
 2779              	.LCFI82:
 2780              		.cfi_def_cfa_register 13
 2781              		@ sp needed
 2782 004e 80BD     		pop	{r7, pc}
 2783              		.cfi_endproc
 2784              	.LFE150:
 2786              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 2787              		.align	2
 2788              		.global	HAL_RTC_GetState
 2789              		.thumb
 2790              		.thumb_func
 2792              	HAL_RTC_GetState:
 2793              	.LFB151:
1455:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1456:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1457:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1458:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1459:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1460:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group5 Peripheral State functions 
1461:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral State functions 
1462:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1463:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
1464:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1465:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1466:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
1467:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     [..]
1468:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1469:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       (+) Get RTC state
1470:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cctjoR32.s 			page 76


1471:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1472:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1473:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1474:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1475:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Returns the RTC state.
1476:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
1477:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1478:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL state
1479:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1480:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1481:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2794              		.loc 1 1481 0
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 8
 2797              		@ frame_needed = 1, uses_anonymous_args = 0
 2798              		@ link register save eliminated.
 2799 0000 80B4     		push	{r7}
 2800              	.LCFI83:
 2801              		.cfi_def_cfa_offset 4
 2802              		.cfi_offset 7, -4
 2803 0002 83B0     		sub	sp, sp, #12
 2804              	.LCFI84:
 2805              		.cfi_def_cfa_offset 16
 2806 0004 00AF     		add	r7, sp, #0
 2807              	.LCFI85:
 2808              		.cfi_def_cfa_register 7
 2809 0006 7860     		str	r0, [r7, #4]
1482:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return hrtc->State;
 2810              		.loc 1 1482 0
 2811 0008 7B68     		ldr	r3, [r7, #4]
 2812 000a 5B7F     		ldrb	r3, [r3, #29]
 2813 000c DBB2     		uxtb	r3, r3
1483:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2814              		.loc 1 1483 0
 2815 000e 1846     		mov	r0, r3
 2816 0010 0C37     		adds	r7, r7, #12
 2817              	.LCFI86:
 2818              		.cfi_def_cfa_offset 4
 2819 0012 BD46     		mov	sp, r7
 2820              	.LCFI87:
 2821              		.cfi_def_cfa_register 13
 2822              		@ sp needed
 2823 0014 5DF8047B 		ldr	r7, [sp], #4
 2824              	.LCFI88:
 2825              		.cfi_restore 7
 2826              		.cfi_def_cfa_offset 0
 2827 0018 7047     		bx	lr
 2828              		.cfi_endproc
 2829              	.LFE151:
 2831 001a 00BF     		.section	.text.RTC_EnterInitMode,"ax",%progbits
 2832              		.align	2
 2833              		.global	RTC_EnterInitMode
 2834              		.thumb
 2835              		.thumb_func
 2837              	RTC_EnterInitMode:
 2838              	.LFB152:
1484:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cctjoR32.s 			page 77


1485:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1486:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1487:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1488:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1489:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1490:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1491:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1492:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1493:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
1494:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1495:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1496:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1497:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1498:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2839              		.loc 1 1498 0
 2840              		.cfi_startproc
 2841              		@ args = 0, pretend = 0, frame = 16
 2842              		@ frame_needed = 1, uses_anonymous_args = 0
 2843 0000 80B5     		push	{r7, lr}
 2844              	.LCFI89:
 2845              		.cfi_def_cfa_offset 8
 2846              		.cfi_offset 7, -8
 2847              		.cfi_offset 14, -4
 2848 0002 84B0     		sub	sp, sp, #16
 2849              	.LCFI90:
 2850              		.cfi_def_cfa_offset 24
 2851 0004 00AF     		add	r7, sp, #0
 2852              	.LCFI91:
 2853              		.cfi_def_cfa_register 7
 2854 0006 7860     		str	r0, [r7, #4]
1499:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0; 
 2855              		.loc 1 1499 0
 2856 0008 0023     		movs	r3, #0
 2857 000a FB60     		str	r3, [r7, #12]
1500:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1501:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1502:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2858              		.loc 1 1502 0
 2859 000c 7B68     		ldr	r3, [r7, #4]
 2860 000e 1B68     		ldr	r3, [r3]
 2861 0010 DB68     		ldr	r3, [r3, #12]
 2862 0012 03F04003 		and	r3, r3, #64
 2863 0016 002B     		cmp	r3, #0
 2864 0018 19D1     		bne	.L116
1503:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1504:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the Initialization mode */
1505:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 2865              		.loc 1 1505 0
 2866 001a 7B68     		ldr	r3, [r7, #4]
 2867 001c 1B68     		ldr	r3, [r3]
 2868 001e 4FF0FF32 		mov	r2, #-1
 2869 0022 DA60     		str	r2, [r3, #12]
1506:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1507:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1508:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2870              		.loc 1 1508 0
 2871 0024 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/cctjoR32.s 			page 78


 2872 0028 F860     		str	r0, [r7, #12]
1509:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1510:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1511:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2873              		.loc 1 1511 0
 2874 002a 09E0     		b	.L117
 2875              	.L119:
1512:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1513:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2876              		.loc 1 1513 0
 2877 002c FFF7FEFF 		bl	HAL_GetTick
 2878 0030 0246     		mov	r2, r0
 2879 0032 FB68     		ldr	r3, [r7, #12]
 2880 0034 D31A     		subs	r3, r2, r3
 2881 0036 B3F57A7F 		cmp	r3, #1000
 2882 003a 01D9     		bls	.L117
1514:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {       
1515:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2883              		.loc 1 1515 0
 2884 003c 0323     		movs	r3, #3
 2885 003e 07E0     		b	.L118
 2886              	.L117:
1511:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2887              		.loc 1 1511 0
 2888 0040 7B68     		ldr	r3, [r7, #4]
 2889 0042 1B68     		ldr	r3, [r3]
 2890 0044 DB68     		ldr	r3, [r3, #12]
 2891 0046 03F04003 		and	r3, r3, #64
 2892 004a 002B     		cmp	r3, #0
 2893 004c EED0     		beq	.L119
 2894              	.L116:
1516:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       } 
1517:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1518:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1519:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1520:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;  
 2895              		.loc 1 1520 0
 2896 004e 0023     		movs	r3, #0
 2897              	.L118:
1521:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2898              		.loc 1 1521 0
 2899 0050 1846     		mov	r0, r3
 2900 0052 1037     		adds	r7, r7, #16
 2901              	.LCFI92:
 2902              		.cfi_def_cfa_offset 8
 2903 0054 BD46     		mov	sp, r7
 2904              	.LCFI93:
 2905              		.cfi_def_cfa_register 13
 2906              		@ sp needed
 2907 0056 80BD     		pop	{r7, pc}
 2908              		.cfi_endproc
 2909              	.LFE152:
 2911              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 2912              		.align	2
 2913              		.global	RTC_ByteToBcd2
 2914              		.thumb
 2915              		.thumb_func
ARM GAS  /tmp/cctjoR32.s 			page 79


 2917              	RTC_ByteToBcd2:
 2918              	.LFB153:
1522:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1523:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1524:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1525:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
1526:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Value: Byte to be converted
1527:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted byte
1528:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1529:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1530:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2919              		.loc 1 1530 0
 2920              		.cfi_startproc
 2921              		@ args = 0, pretend = 0, frame = 16
 2922              		@ frame_needed = 1, uses_anonymous_args = 0
 2923              		@ link register save eliminated.
 2924 0000 80B4     		push	{r7}
 2925              	.LCFI94:
 2926              		.cfi_def_cfa_offset 4
 2927              		.cfi_offset 7, -4
 2928 0002 85B0     		sub	sp, sp, #20
 2929              	.LCFI95:
 2930              		.cfi_def_cfa_offset 24
 2931 0004 00AF     		add	r7, sp, #0
 2932              	.LCFI96:
 2933              		.cfi_def_cfa_register 7
 2934 0006 0346     		mov	r3, r0
 2935 0008 FB71     		strb	r3, [r7, #7]
1531:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t bcdhigh = 0;
 2936              		.loc 1 1531 0
 2937 000a 0023     		movs	r3, #0
 2938 000c FB60     		str	r3, [r7, #12]
1532:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1533:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while(Value >= 10)
 2939              		.loc 1 1533 0
 2940 000e 05E0     		b	.L121
 2941              	.L122:
1534:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1535:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     bcdhigh++;
 2942              		.loc 1 1535 0
 2943 0010 FB68     		ldr	r3, [r7, #12]
 2944 0012 0133     		adds	r3, r3, #1
 2945 0014 FB60     		str	r3, [r7, #12]
1536:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     Value -= 10;
 2946              		.loc 1 1536 0
 2947 0016 FB79     		ldrb	r3, [r7, #7]
 2948 0018 0A3B     		subs	r3, r3, #10
 2949 001a FB71     		strb	r3, [r7, #7]
 2950              	.L121:
1533:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2951              		.loc 1 1533 0
 2952 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2953 001e 092B     		cmp	r3, #9
 2954 0020 F6D8     		bhi	.L122
1537:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1538:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1539:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
ARM GAS  /tmp/cctjoR32.s 			page 80


 2955              		.loc 1 1539 0
 2956 0022 FB68     		ldr	r3, [r7, #12]
 2957 0024 DBB2     		uxtb	r3, r3
 2958 0026 1B01     		lsls	r3, r3, #4
 2959 0028 DAB2     		uxtb	r2, r3
 2960 002a FB79     		ldrb	r3, [r7, #7]
 2961 002c 1343     		orrs	r3, r3, r2
 2962 002e DBB2     		uxtb	r3, r3
1540:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2963              		.loc 1 1540 0
 2964 0030 1846     		mov	r0, r3
 2965 0032 1437     		adds	r7, r7, #20
 2966              	.LCFI97:
 2967              		.cfi_def_cfa_offset 4
 2968 0034 BD46     		mov	sp, r7
 2969              	.LCFI98:
 2970              		.cfi_def_cfa_register 13
 2971              		@ sp needed
 2972 0036 5DF8047B 		ldr	r7, [sp], #4
 2973              	.LCFI99:
 2974              		.cfi_restore 7
 2975              		.cfi_def_cfa_offset 0
 2976 003a 7047     		bx	lr
 2977              		.cfi_endproc
 2978              	.LFE153:
 2980              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 2981              		.align	2
 2982              		.global	RTC_Bcd2ToByte
 2983              		.thumb
 2984              		.thumb_func
 2986              	RTC_Bcd2ToByte:
 2987              	.LFB154:
1541:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1542:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1543:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts from 2 digit BCD to Binary.
1544:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Value: BCD value to be converted
1545:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted word
1546:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1547:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1548:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2988              		.loc 1 1548 0
 2989              		.cfi_startproc
 2990              		@ args = 0, pretend = 0, frame = 16
 2991              		@ frame_needed = 1, uses_anonymous_args = 0
 2992              		@ link register save eliminated.
 2993 0000 80B4     		push	{r7}
 2994              	.LCFI100:
 2995              		.cfi_def_cfa_offset 4
 2996              		.cfi_offset 7, -4
 2997 0002 85B0     		sub	sp, sp, #20
 2998              	.LCFI101:
 2999              		.cfi_def_cfa_offset 24
 3000 0004 00AF     		add	r7, sp, #0
 3001              	.LCFI102:
 3002              		.cfi_def_cfa_register 7
 3003 0006 0346     		mov	r3, r0
 3004 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  /tmp/cctjoR32.s 			page 81


1549:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmp = 0;
 3005              		.loc 1 1549 0
 3006 000a 0023     		movs	r3, #0
 3007 000c FB60     		str	r3, [r7, #12]
1550:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3008              		.loc 1 1550 0
 3009 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3010 0010 1B09     		lsrs	r3, r3, #4
 3011 0012 DBB2     		uxtb	r3, r3
 3012 0014 1A46     		mov	r2, r3
 3013 0016 1346     		mov	r3, r2
 3014 0018 9B00     		lsls	r3, r3, #2
 3015 001a 1344     		add	r3, r3, r2
 3016 001c 5B00     		lsls	r3, r3, #1
 3017 001e FB60     		str	r3, [r7, #12]
1551:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 3018              		.loc 1 1551 0
 3019 0020 FB79     		ldrb	r3, [r7, #7]
 3020 0022 03F00F03 		and	r3, r3, #15
 3021 0026 DAB2     		uxtb	r2, r3
 3022 0028 FB68     		ldr	r3, [r7, #12]
 3023 002a DBB2     		uxtb	r3, r3
 3024 002c 1344     		add	r3, r3, r2
 3025 002e DBB2     		uxtb	r3, r3
1552:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 3026              		.loc 1 1552 0
 3027 0030 1846     		mov	r0, r3
 3028 0032 1437     		adds	r7, r7, #20
 3029              	.LCFI103:
 3030              		.cfi_def_cfa_offset 4
 3031 0034 BD46     		mov	sp, r7
 3032              	.LCFI104:
 3033              		.cfi_def_cfa_register 13
 3034              		@ sp needed
 3035 0036 5DF8047B 		ldr	r7, [sp], #4
 3036              	.LCFI105:
 3037              		.cfi_restore 7
 3038              		.cfi_def_cfa_offset 0
 3039 003a 7047     		bx	lr
 3040              		.cfi_endproc
 3041              	.LFE154:
 3043              		.text
 3044              	.Letext0:
 3045              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3046              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3047              		.file 4 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f769xx.h"
 3048              		.file 5 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 3049              		.file 6 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 3050              		.file 7 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
 3051              		.file 8 "../../Drivers/CMSIS/Include/core_cm7.h"
ARM GAS  /tmp/cctjoR32.s 			page 82


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_rtc.c
     /tmp/cctjoR32.s:21     .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/cctjoR32.s:26     .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/cctjoR32.s:437    .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/cctjoR32.s:2837   .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/cctjoR32.s:192    .text.HAL_RTC_Init:00000000000000f4 $d
     /tmp/cctjoR32.s:197    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/cctjoR32.s:202    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/cctjoR32.s:2717   .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/cctjoR32.s:477    .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/cctjoR32.s:427    .text.HAL_RTC_DeInit:0000000000000154 $d
     /tmp/cctjoR32.s:432    .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/cctjoR32.s:472    .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/cctjoR32.s:512    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/cctjoR32.s:517    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/cctjoR32.s:2917   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/cctjoR32.s:2986   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/cctjoR32.s:778    .text.HAL_RTC_SetTime:0000000000000188 $d
     /tmp/cctjoR32.s:783    .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/cctjoR32.s:788    .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/cctjoR32.s:906    .text.HAL_RTC_GetTime:00000000000000b4 $d
     /tmp/cctjoR32.s:911    .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/cctjoR32.s:916    .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/cctjoR32.s:1157   .text.HAL_RTC_SetDate:0000000000000168 $d
     /tmp/cctjoR32.s:1162   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/cctjoR32.s:1167   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/cctjoR32.s:1272   .text.HAL_RTC_GetDate:000000000000009c $d
     /tmp/cctjoR32.s:1277   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/cctjoR32.s:1282   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/cctjoR32.s:1674   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/cctjoR32.s:1679   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/cctjoR32.s:2100   .text.HAL_RTC_SetAlarm_IT:00000000000002a8 $d
     /tmp/cctjoR32.s:2105   .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/cctjoR32.s:2110   .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/cctjoR32.s:2301   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/cctjoR32.s:2306   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
     /tmp/cctjoR32.s:2475   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/cctjoR32.s:2480   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/cctjoR32.s:2582   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/cctjoR32.s:2572   .text.HAL_RTC_AlarmIRQHandler:0000000000000084 $d
     /tmp/cctjoR32.s:2577   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/cctjoR32.s:2617   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/cctjoR32.s:2622   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/cctjoR32.s:2712   .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/cctjoR32.s:2787   .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/cctjoR32.s:2792   .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/cctjoR32.s:2832   .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/cctjoR32.s:2912   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/cctjoR32.s:2981   .text.RTC_Bcd2ToByte:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback

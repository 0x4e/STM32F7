ARM GAS  /tmp/ccWCEgX6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"queue.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.comm	xQueueRegistry,64,4
  21              		.section	.text.xQueueGenericReset,"ax",%progbits
  22              		.align	2
  23              		.global	xQueueGenericReset
  24              		.thumb
  25              		.thumb_func
  27              	xQueueGenericReset:
  28              	.LFB5:
  29              		.file 1 "../../../FreeRTOS_9_0/Source/queue.c"
   1:../../../FreeRTOS_9_0/Source/queue.c **** /*
   2:../../../FreeRTOS_9_0/Source/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/queue.c ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/queue.c **** 
   5:../../../FreeRTOS_9_0/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/queue.c **** 
   7:../../../FreeRTOS_9_0/Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/queue.c **** 
   9:../../../FreeRTOS_9_0/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/queue.c **** 
  13:../../../FreeRTOS_9_0/Source/queue.c ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/queue.c ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/queue.c **** 
  20:../../../FreeRTOS_9_0/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/queue.c **** 
  25:../../../FreeRTOS_9_0/Source/queue.c ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/queue.c ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/queue.c ****      *    platform software that is more than just the market leader, it     *
ARM GAS  /tmp/ccWCEgX6.s 			page 2


  30:../../../FreeRTOS_9_0/Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/queue.c ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/queue.c ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/queue.c ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/queue.c **** 
  39:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/queue.c ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/queue.c **** 
  43:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/queue.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/queue.c ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/queue.c **** 
  47:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/queue.c **** 
  52:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/queue.c **** 
  56:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/queue.c **** 
  59:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/queue.c **** 
  63:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/queue.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/queue.c **** 
  67:../../../FreeRTOS_9_0/Source/queue.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/queue.c **** */
  69:../../../FreeRTOS_9_0/Source/queue.c **** 
  70:../../../FreeRTOS_9_0/Source/queue.c **** #include <stdlib.h>
  71:../../../FreeRTOS_9_0/Source/queue.c **** #include <string.h>
  72:../../../FreeRTOS_9_0/Source/queue.c **** 
  73:../../../FreeRTOS_9_0/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../../../FreeRTOS_9_0/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../../../FreeRTOS_9_0/Source/queue.c **** task.h is included from an application file. */
  76:../../../FreeRTOS_9_0/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../../../FreeRTOS_9_0/Source/queue.c **** 
  78:../../../FreeRTOS_9_0/Source/queue.c **** #include "FreeRTOS.h"
  79:../../../FreeRTOS_9_0/Source/queue.c **** #include "task.h"
  80:../../../FreeRTOS_9_0/Source/queue.c **** #include "queue.h"
  81:../../../FreeRTOS_9_0/Source/queue.c **** 
  82:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:../../../FreeRTOS_9_0/Source/queue.c **** 	#include "croutine.h"
  84:../../../FreeRTOS_9_0/Source/queue.c **** #endif
  85:../../../FreeRTOS_9_0/Source/queue.c **** 
  86:../../../FreeRTOS_9_0/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
ARM GAS  /tmp/ccWCEgX6.s 			page 3


  87:../../../FreeRTOS_9_0/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:../../../FreeRTOS_9_0/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:../../../FreeRTOS_9_0/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:../../../FreeRTOS_9_0/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:../../../FreeRTOS_9_0/Source/queue.c **** 
  92:../../../FreeRTOS_9_0/Source/queue.c **** 
  93:../../../FreeRTOS_9_0/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:../../../FreeRTOS_9_0/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:../../../FreeRTOS_9_0/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:../../../FreeRTOS_9_0/Source/queue.c **** 
  97:../../../FreeRTOS_9_0/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:../../../FreeRTOS_9_0/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:../../../FreeRTOS_9_0/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:../../../FreeRTOS_9_0/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:../../../FreeRTOS_9_0/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:../../../FreeRTOS_9_0/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:../../../FreeRTOS_9_0/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:../../../FreeRTOS_9_0/Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:../../../FreeRTOS_9_0/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:../../../FreeRTOS_9_0/Source/queue.c **** structure member). */
 108:../../../FreeRTOS_9_0/Source/queue.c **** #define pxMutexHolder					pcTail
 109:../../../FreeRTOS_9_0/Source/queue.c **** #define uxQueueType						pcHead
 110:../../../FreeRTOS_9_0/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:../../../FreeRTOS_9_0/Source/queue.c **** 
 112:../../../FreeRTOS_9_0/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:../../../FreeRTOS_9_0/Source/queue.c **** zero. */
 114:../../../FreeRTOS_9_0/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:../../../FreeRTOS_9_0/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:../../../FreeRTOS_9_0/Source/queue.c **** 
 117:../../../FreeRTOS_9_0/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:../../../FreeRTOS_9_0/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:../../../FreeRTOS_9_0/Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:../../../FreeRTOS_9_0/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:../../../FreeRTOS_9_0/Source/queue.c **** #else
 122:../../../FreeRTOS_9_0/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:../../../FreeRTOS_9_0/Source/queue.c **** #endif
 124:../../../FreeRTOS_9_0/Source/queue.c **** 
 125:../../../FreeRTOS_9_0/Source/queue.c **** /*
 126:../../../FreeRTOS_9_0/Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:../../../FreeRTOS_9_0/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:../../../FreeRTOS_9_0/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:../../../FreeRTOS_9_0/Source/queue.c ****  */
 130:../../../FreeRTOS_9_0/Source/queue.c **** typedef struct QueueDefinition
 131:../../../FreeRTOS_9_0/Source/queue.c **** {
 132:../../../FreeRTOS_9_0/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:../../../FreeRTOS_9_0/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:../../../FreeRTOS_9_0/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:../../../FreeRTOS_9_0/Source/queue.c **** 
 136:../../../FreeRTOS_9_0/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 138:../../../FreeRTOS_9_0/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:../../../FreeRTOS_9_0/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:../../../FreeRTOS_9_0/Source/queue.c **** 	} u;
 141:../../../FreeRTOS_9_0/Source/queue.c **** 
 142:../../../FreeRTOS_9_0/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:../../../FreeRTOS_9_0/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
ARM GAS  /tmp/ccWCEgX6.s 			page 4


 144:../../../FreeRTOS_9_0/Source/queue.c **** 
 145:../../../FreeRTOS_9_0/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:../../../FreeRTOS_9_0/Source/queue.c **** 
 149:../../../FreeRTOS_9_0/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:../../../FreeRTOS_9_0/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:../../../FreeRTOS_9_0/Source/queue.c **** 
 152:../../../FreeRTOS_9_0/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:../../../FreeRTOS_9_0/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
 155:../../../FreeRTOS_9_0/Source/queue.c **** 
 156:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:../../../FreeRTOS_9_0/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
 159:../../../FreeRTOS_9_0/Source/queue.c **** 
 160:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:../../../FreeRTOS_9_0/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 162:../../../FreeRTOS_9_0/Source/queue.c **** 		uint8_t ucQueueType;
 163:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
 164:../../../FreeRTOS_9_0/Source/queue.c **** 
 165:../../../FreeRTOS_9_0/Source/queue.c **** } xQUEUE;
 166:../../../FreeRTOS_9_0/Source/queue.c **** 
 167:../../../FreeRTOS_9_0/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:../../../FreeRTOS_9_0/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:../../../FreeRTOS_9_0/Source/queue.c **** typedef xQUEUE Queue_t;
 170:../../../FreeRTOS_9_0/Source/queue.c **** 
 171:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 172:../../../FreeRTOS_9_0/Source/queue.c **** 
 173:../../../FreeRTOS_9_0/Source/queue.c **** /*
 174:../../../FreeRTOS_9_0/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:../../../FreeRTOS_9_0/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:../../../FreeRTOS_9_0/Source/queue.c ****  */
 177:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:../../../FreeRTOS_9_0/Source/queue.c **** 
 179:../../../FreeRTOS_9_0/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:../../../FreeRTOS_9_0/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:../../../FreeRTOS_9_0/Source/queue.c **** 	more user friendly. */
 182:../../../FreeRTOS_9_0/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 184:../../../FreeRTOS_9_0/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:../../../FreeRTOS_9_0/Source/queue.c **** 		QueueHandle_t xHandle;
 186:../../../FreeRTOS_9_0/Source/queue.c **** 	} xQueueRegistryItem;
 187:../../../FreeRTOS_9_0/Source/queue.c **** 
 188:../../../FreeRTOS_9_0/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:../../../FreeRTOS_9_0/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:../../../FreeRTOS_9_0/Source/queue.c **** 	debuggers. */
 191:../../../FreeRTOS_9_0/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:../../../FreeRTOS_9_0/Source/queue.c **** 
 193:../../../FreeRTOS_9_0/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:../../../FreeRTOS_9_0/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:../../../FreeRTOS_9_0/Source/queue.c **** 	array position being vacant. */
 196:../../../FreeRTOS_9_0/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:../../../FreeRTOS_9_0/Source/queue.c **** 
 198:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:../../../FreeRTOS_9_0/Source/queue.c **** 
 200:../../../FreeRTOS_9_0/Source/queue.c **** /*
ARM GAS  /tmp/ccWCEgX6.s 			page 5


 201:../../../FreeRTOS_9_0/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:../../../FreeRTOS_9_0/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:../../../FreeRTOS_9_0/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:../../../FreeRTOS_9_0/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:../../../FreeRTOS_9_0/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:../../../FreeRTOS_9_0/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:../../../FreeRTOS_9_0/Source/queue.c ****  */
 208:../../../FreeRTOS_9_0/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:../../../FreeRTOS_9_0/Source/queue.c **** 
 210:../../../FreeRTOS_9_0/Source/queue.c **** /*
 211:../../../FreeRTOS_9_0/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:../../../FreeRTOS_9_0/Source/queue.c ****  *
 213:../../../FreeRTOS_9_0/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:../../../FreeRTOS_9_0/Source/queue.c ****  */
 215:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:../../../FreeRTOS_9_0/Source/queue.c **** 
 217:../../../FreeRTOS_9_0/Source/queue.c **** /*
 218:../../../FreeRTOS_9_0/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:../../../FreeRTOS_9_0/Source/queue.c ****  *
 220:../../../FreeRTOS_9_0/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:../../../FreeRTOS_9_0/Source/queue.c ****  */
 222:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:../../../FreeRTOS_9_0/Source/queue.c **** 
 224:../../../FreeRTOS_9_0/Source/queue.c **** /*
 225:../../../FreeRTOS_9_0/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:../../../FreeRTOS_9_0/Source/queue.c ****  * back of the queue.
 227:../../../FreeRTOS_9_0/Source/queue.c ****  */
 228:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:../../../FreeRTOS_9_0/Source/queue.c **** 
 230:../../../FreeRTOS_9_0/Source/queue.c **** /*
 231:../../../FreeRTOS_9_0/Source/queue.c ****  * Copies an item out of a queue.
 232:../../../FreeRTOS_9_0/Source/queue.c ****  */
 233:../../../FreeRTOS_9_0/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:../../../FreeRTOS_9_0/Source/queue.c **** 
 235:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:../../../FreeRTOS_9_0/Source/queue.c **** 	/*
 237:../../../FreeRTOS_9_0/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:../../../FreeRTOS_9_0/Source/queue.c **** 	 * the queue set that the queue contains data.
 239:../../../FreeRTOS_9_0/Source/queue.c **** 	 */
 240:../../../FreeRTOS_9_0/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:../../../FreeRTOS_9_0/Source/queue.c **** #endif
 242:../../../FreeRTOS_9_0/Source/queue.c **** 
 243:../../../FreeRTOS_9_0/Source/queue.c **** /*
 244:../../../FreeRTOS_9_0/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:../../../FreeRTOS_9_0/Source/queue.c ****  * dynamically to fill in the structure's members.
 246:../../../FreeRTOS_9_0/Source/queue.c ****  */
 247:../../../FreeRTOS_9_0/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:../../../FreeRTOS_9_0/Source/queue.c **** 
 249:../../../FreeRTOS_9_0/Source/queue.c **** /*
 250:../../../FreeRTOS_9_0/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:../../../FreeRTOS_9_0/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:../../../FreeRTOS_9_0/Source/queue.c ****  * as a mutex.
 253:../../../FreeRTOS_9_0/Source/queue.c ****  */
 254:../../../FreeRTOS_9_0/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:../../../FreeRTOS_9_0/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:../../../FreeRTOS_9_0/Source/queue.c **** #endif
 257:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccWCEgX6.s 			page 6


 258:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 259:../../../FreeRTOS_9_0/Source/queue.c **** 
 260:../../../FreeRTOS_9_0/Source/queue.c **** /*
 261:../../../FreeRTOS_9_0/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:../../../FreeRTOS_9_0/Source/queue.c ****  * accessing the queue event lists.
 263:../../../FreeRTOS_9_0/Source/queue.c ****  */
 264:../../../FreeRTOS_9_0/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 265:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();									\
 266:../../../FreeRTOS_9_0/Source/queue.c **** 	{														\
 267:../../../FreeRTOS_9_0/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:../../../FreeRTOS_9_0/Source/queue.c **** 		{													\
 269:../../../FreeRTOS_9_0/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:../../../FreeRTOS_9_0/Source/queue.c **** 		}													\
 271:../../../FreeRTOS_9_0/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:../../../FreeRTOS_9_0/Source/queue.c **** 		{													\
 273:../../../FreeRTOS_9_0/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:../../../FreeRTOS_9_0/Source/queue.c **** 		}													\
 275:../../../FreeRTOS_9_0/Source/queue.c **** 	}														\
 276:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL()
 277:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 278:../../../FreeRTOS_9_0/Source/queue.c **** 
 279:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:../../../FreeRTOS_9_0/Source/queue.c **** {
  30              		.loc 1 280 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  46 0008 3960     		str	r1, [r7]
 281:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  47              		.loc 1 281 0
  48 000a 7B68     		ldr	r3, [r7, #4]
  49 000c FB60     		str	r3, [r7, #12]
 282:../../../FreeRTOS_9_0/Source/queue.c **** 
 283:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
  50              		.loc 1 283 0
  51 000e FB68     		ldr	r3, [r7, #12]
  52 0010 002B     		cmp	r3, #0
  53 0012 09D1     		bne	.L2
  54              	.LBB84:
  55              	.LBB85:
  56              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccWCEgX6.s 			page 7


   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
ARM GAS  /tmp/ccWCEgX6.s 			page 8


  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccWCEgX6.s 			page 9


 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccWCEgX6.s 			page 10


 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccWCEgX6.s 			page 11


 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  57              		.loc 2 237 0 discriminator 1
  58              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0014 4FF05003 			mov r3, #80												
  60 0018 83F31188 		msr basepri, r3											
  61 001c BFF36F8F 		isb														
  62 0020 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              		.thumb
  66 0024 BB60     		str	r3, [r7, #8]
  67              	.L3:
  68              	.LBE85:
  69              	.LBE84:
  70              		.loc 1 283 0 discriminator 1
  71 0026 FEE7     		b	.L3
  72              	.L2:
 284:../../../FreeRTOS_9_0/Source/queue.c **** 
 285:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
  73              		.loc 1 285 0
  74 0028 FFF7FEFF 		bl	vPortEnterCritical
 286:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 287:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  75              		.loc 1 287 0
  76 002c FB68     		ldr	r3, [r7, #12]
  77 002e 1A68     		ldr	r2, [r3]
  78 0030 FB68     		ldr	r3, [r7, #12]
  79 0032 DB6B     		ldr	r3, [r3, #60]
  80 0034 F968     		ldr	r1, [r7, #12]
  81 0036 096C     		ldr	r1, [r1, #64]
  82 0038 01FB03F3 		mul	r3, r1, r3
  83 003c 1A44     		add	r2, r2, r3
  84 003e FB68     		ldr	r3, [r7, #12]
  85 0040 5A60     		str	r2, [r3, #4]
 288:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  86              		.loc 1 288 0
  87 0042 FB68     		ldr	r3, [r7, #12]
  88 0044 0022     		movs	r2, #0
  89 0046 9A63     		str	r2, [r3, #56]
 289:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
  90              		.loc 1 289 0
  91 0048 FB68     		ldr	r3, [r7, #12]
  92 004a 1A68     		ldr	r2, [r3]
  93 004c FB68     		ldr	r3, [r7, #12]
  94 004e 9A60     		str	r2, [r3, #8]
 290:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
  95              		.loc 1 290 0
  96 0050 FB68     		ldr	r3, [r7, #12]
  97 0052 1A68     		ldr	r2, [r3]
  98 0054 FB68     		ldr	r3, [r7, #12]
  99 0056 DB6B     		ldr	r3, [r3, #60]
 100 0058 013B     		subs	r3, r3, #1
 101 005a F968     		ldr	r1, [r7, #12]
ARM GAS  /tmp/ccWCEgX6.s 			page 12


 102 005c 096C     		ldr	r1, [r1, #64]
 103 005e 01FB03F3 		mul	r3, r1, r3
 104 0062 1A44     		add	r2, r2, r3
 105 0064 FB68     		ldr	r3, [r7, #12]
 106 0066 DA60     		str	r2, [r3, #12]
 291:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 107              		.loc 1 291 0
 108 0068 FB68     		ldr	r3, [r7, #12]
 109 006a FF22     		movs	r2, #255
 110 006c 83F84420 		strb	r2, [r3, #68]
 292:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 111              		.loc 1 292 0
 112 0070 FB68     		ldr	r3, [r7, #12]
 113 0072 FF22     		movs	r2, #255
 114 0074 83F84520 		strb	r2, [r3, #69]
 293:../../../FreeRTOS_9_0/Source/queue.c **** 
 294:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 115              		.loc 1 294 0
 116 0078 3B68     		ldr	r3, [r7]
 117 007a 002B     		cmp	r3, #0
 118 007c 14D1     		bne	.L4
 295:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 296:../../../FreeRTOS_9_0/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:../../../FreeRTOS_9_0/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:../../../FreeRTOS_9_0/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:../../../FreeRTOS_9_0/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:../../../FreeRTOS_9_0/Source/queue.c **** 			it will be possible to write to it. */
 301:../../../FreeRTOS_9_0/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 119              		.loc 1 301 0
 120 007e FB68     		ldr	r3, [r7, #12]
 121 0080 1B69     		ldr	r3, [r3, #16]
 122 0082 002B     		cmp	r3, #0
 123 0084 1AD0     		beq	.L5
 302:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 303:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 124              		.loc 1 303 0
 125 0086 FB68     		ldr	r3, [r7, #12]
 126 0088 1033     		adds	r3, r3, #16
 127 008a 1846     		mov	r0, r3
 128 008c FFF7FEFF 		bl	xTaskRemoveFromEventList
 129 0090 0346     		mov	r3, r0
 130 0092 002B     		cmp	r3, #0
 131 0094 12D0     		beq	.L5
 304:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 305:../../../FreeRTOS_9_0/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 132              		.loc 1 305 0
 133 0096 0D4B     		ldr	r3, .L7
 134 0098 4FF08052 		mov	r2, #268435456
 135 009c 1A60     		str	r2, [r3]
 136              	@ 305 "../../../FreeRTOS_9_0/Source/queue.c" 1
 137 009e BFF34F8F 		dsb
 138              	@ 0 "" 2
 139              	@ 305 "../../../FreeRTOS_9_0/Source/queue.c" 1
 140 00a2 BFF36F8F 		isb
 141              	@ 0 "" 2
 142              		.thumb
 143 00a6 09E0     		b	.L5
ARM GAS  /tmp/ccWCEgX6.s 			page 13


 144              	.L4:
 306:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 307:../../../FreeRTOS_9_0/Source/queue.c **** 				else
 308:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 309:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 311:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 312:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 313:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 314:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 316:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 317:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 318:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 319:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:../../../FreeRTOS_9_0/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 145              		.loc 1 320 0
 146 00a8 FB68     		ldr	r3, [r7, #12]
 147 00aa 1033     		adds	r3, r3, #16
 148 00ac 1846     		mov	r0, r3
 149 00ae FFF7FEFF 		bl	vListInitialise
 321:../../../FreeRTOS_9_0/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 150              		.loc 1 321 0
 151 00b2 FB68     		ldr	r3, [r7, #12]
 152 00b4 2433     		adds	r3, r3, #36
 153 00b6 1846     		mov	r0, r3
 154 00b8 FFF7FEFF 		bl	vListInitialise
 155              	.L5:
 322:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 323:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 324:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 156              		.loc 1 324 0
 157 00bc FFF7FEFF 		bl	vPortExitCritical
 325:../../../FreeRTOS_9_0/Source/queue.c **** 
 326:../../../FreeRTOS_9_0/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:../../../FreeRTOS_9_0/Source/queue.c **** 	versions. */
 328:../../../FreeRTOS_9_0/Source/queue.c **** 	return pdPASS;
 158              		.loc 1 328 0
 159 00c0 0123     		movs	r3, #1
 329:../../../FreeRTOS_9_0/Source/queue.c **** }
 160              		.loc 1 329 0
 161 00c2 1846     		mov	r0, r3
 162 00c4 1037     		adds	r7, r7, #16
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 8
 165 00c6 BD46     		mov	sp, r7
 166              	.LCFI4:
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 00c8 80BD     		pop	{r7, pc}
 170              	.L8:
 171 00ca 00BF     		.align	2
 172              	.L7:
 173 00cc 04ED00E0 		.word	-536810236
 174              		.cfi_endproc
 175              	.LFE5:
 177              		.section	.text.xQueueGenericCreate,"ax",%progbits
ARM GAS  /tmp/ccWCEgX6.s 			page 14


 178              		.align	2
 179              		.global	xQueueGenericCreate
 180              		.thumb
 181              		.thumb_func
 183              	xQueueGenericCreate:
 184              	.LFB6:
 330:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 331:../../../FreeRTOS_9_0/Source/queue.c **** 
 332:../../../FreeRTOS_9_0/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:../../../FreeRTOS_9_0/Source/queue.c **** 
 334:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 336:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t *pxNewQueue;
 337:../../../FreeRTOS_9_0/Source/queue.c **** 
 338:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:../../../FreeRTOS_9_0/Source/queue.c **** 
 340:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:../../../FreeRTOS_9_0/Source/queue.c **** 		supplied. */
 342:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:../../../FreeRTOS_9_0/Source/queue.c **** 
 344:../../../FreeRTOS_9_0/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:../../../FreeRTOS_9_0/Source/queue.c **** 		should not be provided if the item size is 0. */
 346:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:../../../FreeRTOS_9_0/Source/queue.c **** 
 349:../../../FreeRTOS_9_0/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 351:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:../../../FreeRTOS_9_0/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:../../../FreeRTOS_9_0/Source/queue.c **** 			the real queue and semaphore structures. */
 354:../../../FreeRTOS_9_0/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:../../../FreeRTOS_9_0/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 357:../../../FreeRTOS_9_0/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:../../../FreeRTOS_9_0/Source/queue.c **** 
 359:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:../../../FreeRTOS_9_0/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:../../../FreeRTOS_9_0/Source/queue.c **** 		but is already set. */
 362:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:../../../FreeRTOS_9_0/Source/queue.c **** 
 364:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxNewQueue != NULL )
 365:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 366:../../../FreeRTOS_9_0/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 368:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:../../../FreeRTOS_9_0/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 370:../../../FreeRTOS_9_0/Source/queue.c **** 				later deleted. */
 371:../../../FreeRTOS_9_0/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 373:../../../FreeRTOS_9_0/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:../../../FreeRTOS_9_0/Source/queue.c **** 
 375:../../../FreeRTOS_9_0/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 377:../../../FreeRTOS_9_0/Source/queue.c **** 
 378:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxNewQueue;
 379:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 380:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccWCEgX6.s 			page 15


 381:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 383:../../../FreeRTOS_9_0/Source/queue.c **** 
 384:../../../FreeRTOS_9_0/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:../../../FreeRTOS_9_0/Source/queue.c **** 
 386:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 185              		.loc 1 387 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 32
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 90B5     		push	{r4, r7, lr}
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 12
 192              		.cfi_offset 4, -12
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 8BB0     		sub	sp, sp, #44
 196              	.LCFI6:
 197              		.cfi_def_cfa_offset 56
 198 0004 02AF     		add	r7, sp, #8
 199              	.LCFI7:
 200              		.cfi_def_cfa 7, 48
 201 0006 F860     		str	r0, [r7, #12]
 202 0008 B960     		str	r1, [r7, #8]
 203 000a 1346     		mov	r3, r2
 204 000c FB71     		strb	r3, [r7, #7]
 388:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t *pxNewQueue;
 389:../../../FreeRTOS_9_0/Source/queue.c **** 	size_t xQueueSizeInBytes;
 390:../../../FreeRTOS_9_0/Source/queue.c **** 	uint8_t *pucQueueStorage;
 391:../../../FreeRTOS_9_0/Source/queue.c **** 
 392:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 205              		.loc 1 392 0
 206 000e FB68     		ldr	r3, [r7, #12]
 207 0010 002B     		cmp	r3, #0
 208 0012 09D1     		bne	.L10
 209              	.LBB86:
 210              	.LBB87:
 211              		.loc 2 237 0 discriminator 1
 212              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 213 0014 4FF05003 			mov r3, #80												
 214 0018 83F31188 		msr basepri, r3											
 215 001c BFF36F8F 		isb														
 216 0020 BFF34F8F 		dsb														
 217              	
 218              	@ 0 "" 2
 219              		.thumb
 220 0024 3B61     		str	r3, [r7, #16]
 221              	.L11:
 222              	.LBE87:
 223              	.LBE86:
 224              		.loc 1 392 0 discriminator 1
 225 0026 FEE7     		b	.L11
 226              	.L10:
 393:../../../FreeRTOS_9_0/Source/queue.c **** 
 394:../../../FreeRTOS_9_0/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 227              		.loc 1 394 0
ARM GAS  /tmp/ccWCEgX6.s 			page 16


 228 0028 BB68     		ldr	r3, [r7, #8]
 229 002a 002B     		cmp	r3, #0
 230 002c 02D1     		bne	.L12
 395:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 396:../../../FreeRTOS_9_0/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 397:../../../FreeRTOS_9_0/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 231              		.loc 1 397 0
 232 002e 0023     		movs	r3, #0
 233 0030 FB61     		str	r3, [r7, #28]
 234 0032 04E0     		b	.L13
 235              	.L12:
 398:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 399:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 400:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 401:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:../../../FreeRTOS_9_0/Source/queue.c **** 			can be in the queue at any time. */
 403:../../../FreeRTOS_9_0/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 236              		.loc 1 403 0
 237 0034 FB68     		ldr	r3, [r7, #12]
 238 0036 BA68     		ldr	r2, [r7, #8]
 239 0038 02FB03F3 		mul	r3, r2, r3
 240 003c FB61     		str	r3, [r7, #28]
 241              	.L13:
 404:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 405:../../../FreeRTOS_9_0/Source/queue.c **** 
 406:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 242              		.loc 1 406 0
 243 003e FB69     		ldr	r3, [r7, #28]
 244 0040 5033     		adds	r3, r3, #80
 245 0042 1846     		mov	r0, r3
 246 0044 FFF7FEFF 		bl	pvPortMalloc
 247 0048 B861     		str	r0, [r7, #24]
 407:../../../FreeRTOS_9_0/Source/queue.c **** 
 408:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxNewQueue != NULL )
 248              		.loc 1 408 0
 249 004a BB69     		ldr	r3, [r7, #24]
 250 004c 002B     		cmp	r3, #0
 251 004e 0BD0     		beq	.L14
 409:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 410:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:../../../FreeRTOS_9_0/Source/queue.c **** 			storage area. */
 412:../../../FreeRTOS_9_0/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 252              		.loc 1 412 0
 253 0050 BB69     		ldr	r3, [r7, #24]
 254 0052 5033     		adds	r3, r3, #80
 255 0054 7B61     		str	r3, [r7, #20]
 413:../../../FreeRTOS_9_0/Source/queue.c **** 
 414:../../../FreeRTOS_9_0/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 416:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:../../../FreeRTOS_9_0/Source/queue.c **** 				note this task was created dynamically in case it is later
 418:../../../FreeRTOS_9_0/Source/queue.c **** 				deleted. */
 419:../../../FreeRTOS_9_0/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 421:../../../FreeRTOS_9_0/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:../../../FreeRTOS_9_0/Source/queue.c **** 
 423:../../../FreeRTOS_9_0/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
ARM GAS  /tmp/ccWCEgX6.s 			page 17


 256              		.loc 1 423 0
 257 0056 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 258 0058 BB69     		ldr	r3, [r7, #24]
 259 005a 0093     		str	r3, [sp]
 260 005c F868     		ldr	r0, [r7, #12]
 261 005e B968     		ldr	r1, [r7, #8]
 262 0060 7A69     		ldr	r2, [r7, #20]
 263 0062 2346     		mov	r3, r4
 264 0064 FFF7FEFF 		bl	prvInitialiseNewQueue
 265              	.L14:
 424:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 425:../../../FreeRTOS_9_0/Source/queue.c **** 
 426:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxNewQueue;
 266              		.loc 1 426 0
 267 0068 BB69     		ldr	r3, [r7, #24]
 427:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 268              		.loc 1 427 0
 269 006a 1846     		mov	r0, r3
 270 006c 2437     		adds	r7, r7, #36
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 12
 273 006e BD46     		mov	sp, r7
 274              	.LCFI9:
 275              		.cfi_def_cfa_register 13
 276              		@ sp needed
 277 0070 90BD     		pop	{r4, r7, pc}
 278              		.cfi_endproc
 279              	.LFE6:
 281 0072 00BF     		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 282              		.align	2
 283              		.thumb
 284              		.thumb_func
 286              	prvInitialiseNewQueue:
 287              	.LFB7:
 428:../../../FreeRTOS_9_0/Source/queue.c **** 
 429:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 431:../../../FreeRTOS_9_0/Source/queue.c **** 
 432:../../../FreeRTOS_9_0/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:../../../FreeRTOS_9_0/Source/queue.c **** {
 288              		.loc 1 433 0
 289              		.cfi_startproc
 290              		@ args = 4, pretend = 0, frame = 16
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292 0000 80B5     		push	{r7, lr}
 293              	.LCFI10:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 7, -8
 296              		.cfi_offset 14, -4
 297 0002 84B0     		sub	sp, sp, #16
 298              	.LCFI11:
 299              		.cfi_def_cfa_offset 24
 300 0004 00AF     		add	r7, sp, #0
 301              	.LCFI12:
 302              		.cfi_def_cfa_register 7
 303 0006 F860     		str	r0, [r7, #12]
 304 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccWCEgX6.s 			page 18


 305 000a 7A60     		str	r2, [r7, #4]
 306 000c FB70     		strb	r3, [r7, #3]
 434:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:../../../FreeRTOS_9_0/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:../../../FreeRTOS_9_0/Source/queue.c **** 	( void ) ucQueueType;
 437:../../../FreeRTOS_9_0/Source/queue.c **** 
 438:../../../FreeRTOS_9_0/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 307              		.loc 1 438 0
 308 000e BB68     		ldr	r3, [r7, #8]
 309 0010 002B     		cmp	r3, #0
 310 0012 03D1     		bne	.L17
 439:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 440:../../../FreeRTOS_9_0/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:../../../FreeRTOS_9_0/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:../../../FreeRTOS_9_0/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:../../../FreeRTOS_9_0/Source/queue.c **** 		value that is known to be within the memory map. */
 444:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 311              		.loc 1 444 0
 312 0014 BB69     		ldr	r3, [r7, #24]
 313 0016 BA69     		ldr	r2, [r7, #24]
 314 0018 1A60     		str	r2, [r3]
 315 001a 02E0     		b	.L18
 316              	.L17:
 445:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 446:../../../FreeRTOS_9_0/Source/queue.c **** 	else
 447:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 448:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 317              		.loc 1 449 0
 318 001c BB69     		ldr	r3, [r7, #24]
 319 001e 7A68     		ldr	r2, [r7, #4]
 320 0020 1A60     		str	r2, [r3]
 321              	.L18:
 450:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 451:../../../FreeRTOS_9_0/Source/queue.c **** 
 452:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:../../../FreeRTOS_9_0/Source/queue.c **** 	defined. */
 454:../../../FreeRTOS_9_0/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 322              		.loc 1 454 0
 323 0022 BB69     		ldr	r3, [r7, #24]
 324 0024 FA68     		ldr	r2, [r7, #12]
 325 0026 DA63     		str	r2, [r3, #60]
 455:../../../FreeRTOS_9_0/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 326              		.loc 1 455 0
 327 0028 BB69     		ldr	r3, [r7, #24]
 328 002a BA68     		ldr	r2, [r7, #8]
 329 002c 1A64     		str	r2, [r3, #64]
 456:../../../FreeRTOS_9_0/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 330              		.loc 1 456 0
 331 002e B869     		ldr	r0, [r7, #24]
 332 0030 0121     		movs	r1, #1
 333 0032 FFF7FEFF 		bl	xQueueGenericReset
 457:../../../FreeRTOS_9_0/Source/queue.c **** 
 458:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 460:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 334              		.loc 1 460 0
ARM GAS  /tmp/ccWCEgX6.s 			page 19


 335 0036 BB69     		ldr	r3, [r7, #24]
 336 0038 FA78     		ldrb	r2, [r7, #3]
 337 003a 83F84C20 		strb	r2, [r3, #76]
 461:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 462:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:../../../FreeRTOS_9_0/Source/queue.c **** 
 464:../../../FreeRTOS_9_0/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 466:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 468:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:../../../FreeRTOS_9_0/Source/queue.c **** 
 470:../../../FreeRTOS_9_0/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 338              		.loc 1 470 0
 339 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 340 0040 7320     		movs	r0, #115
 341 0042 F968     		ldr	r1, [r7, #12]
 342 0044 BA68     		ldr	r2, [r7, #8]
 343 0046 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
 471:../../../FreeRTOS_9_0/Source/queue.c **** }
 344              		.loc 1 471 0
 345 004a 1037     		adds	r7, r7, #16
 346              	.LCFI13:
 347              		.cfi_def_cfa_offset 8
 348 004c BD46     		mov	sp, r7
 349              	.LCFI14:
 350              		.cfi_def_cfa_register 13
 351              		@ sp needed
 352 004e 80BD     		pop	{r7, pc}
 353              		.cfi_endproc
 354              	.LFE7:
 356              		.section	.text.prvInitialiseMutex,"ax",%progbits
 357              		.align	2
 358              		.thumb
 359              		.thumb_func
 361              	prvInitialiseMutex:
 362              	.LFB8:
 472:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 473:../../../FreeRTOS_9_0/Source/queue.c **** 
 474:../../../FreeRTOS_9_0/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:../../../FreeRTOS_9_0/Source/queue.c **** 
 476:../../../FreeRTOS_9_0/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 363              		.loc 1 477 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 8
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0000 80B5     		push	{r7, lr}
 368              	.LCFI15:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 7, -8
 371              		.cfi_offset 14, -4
 372 0002 82B0     		sub	sp, sp, #8
 373              	.LCFI16:
 374              		.cfi_def_cfa_offset 16
 375 0004 00AF     		add	r7, sp, #0
 376              	.LCFI17:
ARM GAS  /tmp/ccWCEgX6.s 			page 20


 377              		.cfi_def_cfa_register 7
 378 0006 7860     		str	r0, [r7, #4]
 478:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxNewQueue != NULL )
 379              		.loc 1 478 0
 380 0008 7B68     		ldr	r3, [r7, #4]
 381 000a 002B     		cmp	r3, #0
 382 000c 0ED0     		beq	.L19
 479:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 480:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 481:../../../FreeRTOS_9_0/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:../../../FreeRTOS_9_0/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:../../../FreeRTOS_9_0/Source/queue.c **** 			in particular the information required for priority inheritance. */
 484:../../../FreeRTOS_9_0/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 383              		.loc 1 484 0
 384 000e 7B68     		ldr	r3, [r7, #4]
 385 0010 0022     		movs	r2, #0
 386 0012 5A60     		str	r2, [r3, #4]
 485:../../../FreeRTOS_9_0/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 387              		.loc 1 485 0
 388 0014 7B68     		ldr	r3, [r7, #4]
 389 0016 0022     		movs	r2, #0
 390 0018 1A60     		str	r2, [r3]
 486:../../../FreeRTOS_9_0/Source/queue.c **** 
 487:../../../FreeRTOS_9_0/Source/queue.c **** 			/* In case this is a recursive mutex. */
 488:../../../FreeRTOS_9_0/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 391              		.loc 1 488 0
 392 001a 7B68     		ldr	r3, [r7, #4]
 393 001c 0022     		movs	r2, #0
 394 001e DA60     		str	r2, [r3, #12]
 489:../../../FreeRTOS_9_0/Source/queue.c **** 
 490:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:../../../FreeRTOS_9_0/Source/queue.c **** 
 492:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 395              		.loc 1 493 0
 396 0020 7868     		ldr	r0, [r7, #4]
 397 0022 0021     		movs	r1, #0
 398 0024 0022     		movs	r2, #0
 399 0026 0023     		movs	r3, #0
 400 0028 FFF7FEFF 		bl	xQueueGenericSend
 401              	.L19:
 494:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 495:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 496:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 497:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 499:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 402              		.loc 1 499 0
 403 002c 0837     		adds	r7, r7, #8
 404              	.LCFI18:
 405              		.cfi_def_cfa_offset 8
 406 002e BD46     		mov	sp, r7
 407              	.LCFI19:
 408              		.cfi_def_cfa_register 13
 409              		@ sp needed
 410 0030 80BD     		pop	{r7, pc}
 411              		.cfi_endproc
ARM GAS  /tmp/ccWCEgX6.s 			page 21


 412              	.LFE8:
 414 0032 00BF     		.section	.text.xQueueCreateMutex,"ax",%progbits
 415              		.align	2
 416              		.global	xQueueCreateMutex
 417              		.thumb
 418              		.thumb_func
 420              	xQueueCreateMutex:
 421              	.LFB9:
 500:../../../FreeRTOS_9_0/Source/queue.c **** 
 501:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_MUTEXES */
 502:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 503:../../../FreeRTOS_9_0/Source/queue.c **** 
 504:../../../FreeRTOS_9_0/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:../../../FreeRTOS_9_0/Source/queue.c **** 
 506:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 422              		.loc 1 507 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 24
 425              		@ frame_needed = 1, uses_anonymous_args = 0
 426 0000 80B5     		push	{r7, lr}
 427              	.LCFI20:
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 7, -8
 430              		.cfi_offset 14, -4
 431 0002 86B0     		sub	sp, sp, #24
 432              	.LCFI21:
 433              		.cfi_def_cfa_offset 32
 434 0004 00AF     		add	r7, sp, #0
 435              	.LCFI22:
 436              		.cfi_def_cfa_register 7
 437 0006 0346     		mov	r3, r0
 438 0008 FB71     		strb	r3, [r7, #7]
 508:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t *pxNewQueue;
 509:../../../FreeRTOS_9_0/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 439              		.loc 1 509 0
 440 000a 0123     		movs	r3, #1
 441 000c 7B61     		str	r3, [r7, #20]
 442 000e 0023     		movs	r3, #0
 443 0010 3B61     		str	r3, [r7, #16]
 510:../../../FreeRTOS_9_0/Source/queue.c **** 
 511:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 444              		.loc 1 511 0
 445 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 446 0014 7869     		ldr	r0, [r7, #20]
 447 0016 3969     		ldr	r1, [r7, #16]
 448 0018 1A46     		mov	r2, r3
 449 001a FFF7FEFF 		bl	xQueueGenericCreate
 450 001e F860     		str	r0, [r7, #12]
 512:../../../FreeRTOS_9_0/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 451              		.loc 1 512 0
 452 0020 F868     		ldr	r0, [r7, #12]
 453 0022 FFF7FEFF 		bl	prvInitialiseMutex
 513:../../../FreeRTOS_9_0/Source/queue.c **** 
 514:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxNewQueue;
 454              		.loc 1 514 0
 455 0026 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccWCEgX6.s 			page 22


 515:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 456              		.loc 1 515 0
 457 0028 1846     		mov	r0, r3
 458 002a 1837     		adds	r7, r7, #24
 459              	.LCFI23:
 460              		.cfi_def_cfa_offset 8
 461 002c BD46     		mov	sp, r7
 462              	.LCFI24:
 463              		.cfi_def_cfa_register 13
 464              		@ sp needed
 465 002e 80BD     		pop	{r7, pc}
 466              		.cfi_endproc
 467              	.LFE9:
 469              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 470              		.align	2
 471              		.global	xQueueGiveMutexRecursive
 472              		.thumb
 473              		.thumb_func
 475              	xQueueGiveMutexRecursive:
 476              	.LFB10:
 516:../../../FreeRTOS_9_0/Source/queue.c **** 
 517:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_MUTEXES */
 518:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 519:../../../FreeRTOS_9_0/Source/queue.c **** 
 520:../../../FreeRTOS_9_0/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:../../../FreeRTOS_9_0/Source/queue.c **** 
 522:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 524:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t *pxNewQueue;
 525:../../../FreeRTOS_9_0/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:../../../FreeRTOS_9_0/Source/queue.c **** 
 527:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:../../../FreeRTOS_9_0/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) ucQueueType;
 530:../../../FreeRTOS_9_0/Source/queue.c **** 
 531:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:../../../FreeRTOS_9_0/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:../../../FreeRTOS_9_0/Source/queue.c **** 
 534:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxNewQueue;
 535:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 536:../../../FreeRTOS_9_0/Source/queue.c **** 
 537:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_MUTEXES */
 538:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 539:../../../FreeRTOS_9_0/Source/queue.c **** 
 540:../../../FreeRTOS_9_0/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:../../../FreeRTOS_9_0/Source/queue.c **** 
 542:../../../FreeRTOS_9_0/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 544:../../../FreeRTOS_9_0/Source/queue.c **** 	void *pxReturn;
 545:../../../FreeRTOS_9_0/Source/queue.c **** 
 546:../../../FreeRTOS_9_0/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:../../../FreeRTOS_9_0/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:../../../FreeRTOS_9_0/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:../../../FreeRTOS_9_0/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:../../../FreeRTOS_9_0/Source/queue.c **** 		following critical section exiting and the function returning. */
 551:../../../FreeRTOS_9_0/Source/queue.c **** 		taskENTER_CRITICAL();
 552:../../../FreeRTOS_9_0/Source/queue.c **** 		{
ARM GAS  /tmp/ccWCEgX6.s 			page 23


 553:../../../FreeRTOS_9_0/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 555:../../../FreeRTOS_9_0/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 557:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 558:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 559:../../../FreeRTOS_9_0/Source/queue.c **** 				pxReturn = NULL;
 560:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 561:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 562:../../../FreeRTOS_9_0/Source/queue.c **** 		taskEXIT_CRITICAL();
 563:../../../FreeRTOS_9_0/Source/queue.c **** 
 564:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxReturn;
 565:../../../FreeRTOS_9_0/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:../../../FreeRTOS_9_0/Source/queue.c **** 
 567:../../../FreeRTOS_9_0/Source/queue.c **** #endif
 568:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 569:../../../FreeRTOS_9_0/Source/queue.c **** 
 570:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:../../../FreeRTOS_9_0/Source/queue.c **** 
 572:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 477              		.loc 1 573 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 24
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 90B5     		push	{r4, r7, lr}
 482              	.LCFI25:
 483              		.cfi_def_cfa_offset 12
 484              		.cfi_offset 4, -12
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 87B0     		sub	sp, sp, #28
 488              	.LCFI26:
 489              		.cfi_def_cfa_offset 40
 490 0004 00AF     		add	r7, sp, #0
 491              	.LCFI27:
 492              		.cfi_def_cfa_register 7
 493 0006 7860     		str	r0, [r7, #4]
 574:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
 575:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 494              		.loc 1 575 0
 495 0008 7B68     		ldr	r3, [r7, #4]
 496 000a 3B61     		str	r3, [r7, #16]
 576:../../../FreeRTOS_9_0/Source/queue.c **** 
 577:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( pxMutex );
 497              		.loc 1 577 0
 498 000c 3B69     		ldr	r3, [r7, #16]
 499 000e 002B     		cmp	r3, #0
 500 0010 09D1     		bne	.L24
 501              	.LBB88:
 502              	.LBB89:
 503              		.loc 2 237 0 discriminator 1
 504              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 505 0012 4FF05003 			mov r3, #80												
 506 0016 83F31188 		msr basepri, r3											
 507 001a BFF36F8F 		isb														
 508 001e BFF34F8F 		dsb														
ARM GAS  /tmp/ccWCEgX6.s 			page 24


 509              	
 510              	@ 0 "" 2
 511              		.thumb
 512 0022 FB60     		str	r3, [r7, #12]
 513              	.L25:
 514              	.LBE89:
 515              	.LBE88:
 516              		.loc 1 577 0 discriminator 1
 517 0024 FEE7     		b	.L25
 518              	.L24:
 578:../../../FreeRTOS_9_0/Source/queue.c **** 
 579:../../../FreeRTOS_9_0/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:../../../FreeRTOS_9_0/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:../../../FreeRTOS_9_0/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:../../../FreeRTOS_9_0/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:../../../FreeRTOS_9_0/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:../../../FreeRTOS_9_0/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 519              		.loc 1 585 0
 520 0026 3B69     		ldr	r3, [r7, #16]
 521 0028 5C68     		ldr	r4, [r3, #4]
 522 002a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 523 002e 0346     		mov	r3, r0
 524 0030 9C42     		cmp	r4, r3
 525 0032 11D1     		bne	.L26
 586:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 587:../../../FreeRTOS_9_0/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:../../../FreeRTOS_9_0/Source/queue.c **** 
 589:../../../FreeRTOS_9_0/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:../../../FreeRTOS_9_0/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:../../../FreeRTOS_9_0/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:../../../FreeRTOS_9_0/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:../../../FreeRTOS_9_0/Source/queue.c **** 			uxRecursiveCallCount member. */
 594:../../../FreeRTOS_9_0/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 526              		.loc 1 594 0
 527 0034 3B69     		ldr	r3, [r7, #16]
 528 0036 DB68     		ldr	r3, [r3, #12]
 529 0038 5A1E     		subs	r2, r3, #1
 530 003a 3B69     		ldr	r3, [r7, #16]
 531 003c DA60     		str	r2, [r3, #12]
 595:../../../FreeRTOS_9_0/Source/queue.c **** 
 596:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 532              		.loc 1 597 0
 533 003e 3B69     		ldr	r3, [r7, #16]
 534 0040 DB68     		ldr	r3, [r3, #12]
 535 0042 002B     		cmp	r3, #0
 536 0044 05D1     		bne	.L27
 598:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 599:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:../../../FreeRTOS_9_0/Source/queue.c **** 				task that might be waiting to access the mutex. */
 601:../../../FreeRTOS_9_0/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 537              		.loc 1 601 0
 538 0046 3869     		ldr	r0, [r7, #16]
 539 0048 0021     		movs	r1, #0
 540 004a 0022     		movs	r2, #0
 541 004c 0023     		movs	r3, #0
ARM GAS  /tmp/ccWCEgX6.s 			page 25


 542 004e FFF7FEFF 		bl	xQueueGenericSend
 543              	.L27:
 602:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 603:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 604:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 605:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 607:../../../FreeRTOS_9_0/Source/queue.c **** 
 608:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 544              		.loc 1 608 0
 545 0052 0123     		movs	r3, #1
 546 0054 7B61     		str	r3, [r7, #20]
 547 0056 01E0     		b	.L28
 548              	.L26:
 609:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 610:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 611:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 612:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:../../../FreeRTOS_9_0/Source/queue.c **** 			holder. */
 614:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFAIL;
 549              		.loc 1 614 0
 550 0058 0023     		movs	r3, #0
 551 005a 7B61     		str	r3, [r7, #20]
 552              	.L28:
 615:../../../FreeRTOS_9_0/Source/queue.c **** 
 616:../../../FreeRTOS_9_0/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 618:../../../FreeRTOS_9_0/Source/queue.c **** 
 619:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
 553              		.loc 1 619 0
 554 005c 7B69     		ldr	r3, [r7, #20]
 620:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 555              		.loc 1 620 0
 556 005e 1846     		mov	r0, r3
 557 0060 1C37     		adds	r7, r7, #28
 558              	.LCFI28:
 559              		.cfi_def_cfa_offset 12
 560 0062 BD46     		mov	sp, r7
 561              	.LCFI29:
 562              		.cfi_def_cfa_register 13
 563              		@ sp needed
 564 0064 90BD     		pop	{r4, r7, pc}
 565              		.cfi_endproc
 566              	.LFE10:
 568 0066 00BF     		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 569              		.align	2
 570              		.global	xQueueTakeMutexRecursive
 571              		.thumb
 572              		.thumb_func
 574              	xQueueTakeMutexRecursive:
 575              	.LFB11:
 621:../../../FreeRTOS_9_0/Source/queue.c **** 
 622:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 624:../../../FreeRTOS_9_0/Source/queue.c **** 
 625:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccWCEgX6.s 			page 26


 627:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 576              		.loc 1 628 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 24
 579              		@ frame_needed = 1, uses_anonymous_args = 0
 580 0000 90B5     		push	{r4, r7, lr}
 581              	.LCFI30:
 582              		.cfi_def_cfa_offset 12
 583              		.cfi_offset 4, -12
 584              		.cfi_offset 7, -8
 585              		.cfi_offset 14, -4
 586 0002 87B0     		sub	sp, sp, #28
 587              	.LCFI31:
 588              		.cfi_def_cfa_offset 40
 589 0004 00AF     		add	r7, sp, #0
 590              	.LCFI32:
 591              		.cfi_def_cfa_register 7
 592 0006 7860     		str	r0, [r7, #4]
 593 0008 3960     		str	r1, [r7]
 629:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
 630:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 594              		.loc 1 630 0
 595 000a 7B68     		ldr	r3, [r7, #4]
 596 000c 3B61     		str	r3, [r7, #16]
 631:../../../FreeRTOS_9_0/Source/queue.c **** 
 632:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( pxMutex );
 597              		.loc 1 632 0
 598 000e 3B69     		ldr	r3, [r7, #16]
 599 0010 002B     		cmp	r3, #0
 600 0012 09D1     		bne	.L31
 601              	.LBB90:
 602              	.LBB91:
 603              		.loc 2 237 0 discriminator 1
 604              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 605 0014 4FF05003 			mov r3, #80												
 606 0018 83F31188 		msr basepri, r3											
 607 001c BFF36F8F 		isb														
 608 0020 BFF34F8F 		dsb														
 609              	
 610              	@ 0 "" 2
 611              		.thumb
 612 0024 FB60     		str	r3, [r7, #12]
 613              	.L32:
 614              	.LBE91:
 615              	.LBE90:
 616              		.loc 1 632 0 discriminator 1
 617 0026 FEE7     		b	.L32
 618              	.L31:
 633:../../../FreeRTOS_9_0/Source/queue.c **** 
 634:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:../../../FreeRTOS_9_0/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:../../../FreeRTOS_9_0/Source/queue.c **** 
 637:../../../FreeRTOS_9_0/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:../../../FreeRTOS_9_0/Source/queue.c **** 
 639:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 619              		.loc 1 639 0
ARM GAS  /tmp/ccWCEgX6.s 			page 27


 620 0028 3B69     		ldr	r3, [r7, #16]
 621 002a 5C68     		ldr	r4, [r3, #4]
 622 002c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 623 0030 0346     		mov	r3, r0
 624 0032 9C42     		cmp	r4, r3
 625 0034 07D1     		bne	.L33
 640:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 641:../../../FreeRTOS_9_0/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 626              		.loc 1 641 0
 627 0036 3B69     		ldr	r3, [r7, #16]
 628 0038 DB68     		ldr	r3, [r3, #12]
 629 003a 5A1C     		adds	r2, r3, #1
 630 003c 3B69     		ldr	r3, [r7, #16]
 631 003e DA60     		str	r2, [r3, #12]
 642:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 632              		.loc 1 642 0
 633 0040 0123     		movs	r3, #1
 634 0042 7B61     		str	r3, [r7, #20]
 635 0044 0EE0     		b	.L34
 636              	.L33:
 643:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 644:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 645:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 646:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 637              		.loc 1 646 0
 638 0046 3869     		ldr	r0, [r7, #16]
 639 0048 0021     		movs	r1, #0
 640 004a 3A68     		ldr	r2, [r7]
 641 004c 0023     		movs	r3, #0
 642 004e FFF7FEFF 		bl	xQueueGenericReceive
 643 0052 7861     		str	r0, [r7, #20]
 647:../../../FreeRTOS_9_0/Source/queue.c **** 
 648:../../../FreeRTOS_9_0/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:../../../FreeRTOS_9_0/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:../../../FreeRTOS_9_0/Source/queue.c **** 			before reaching here. */
 651:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xReturn != pdFAIL )
 644              		.loc 1 651 0
 645 0054 7B69     		ldr	r3, [r7, #20]
 646 0056 002B     		cmp	r3, #0
 647 0058 04D0     		beq	.L34
 652:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 653:../../../FreeRTOS_9_0/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 648              		.loc 1 653 0
 649 005a 3B69     		ldr	r3, [r7, #16]
 650 005c DB68     		ldr	r3, [r3, #12]
 651 005e 5A1C     		adds	r2, r3, #1
 652 0060 3B69     		ldr	r3, [r7, #16]
 653 0062 DA60     		str	r2, [r3, #12]
 654              	.L34:
 654:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 655:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 656:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 657:../../../FreeRTOS_9_0/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 659:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 660:../../../FreeRTOS_9_0/Source/queue.c **** 
 661:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
ARM GAS  /tmp/ccWCEgX6.s 			page 28


 655              		.loc 1 661 0
 656 0064 7B69     		ldr	r3, [r7, #20]
 662:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 657              		.loc 1 662 0
 658 0066 1846     		mov	r0, r3
 659 0068 1C37     		adds	r7, r7, #28
 660              	.LCFI33:
 661              		.cfi_def_cfa_offset 12
 662 006a BD46     		mov	sp, r7
 663              	.LCFI34:
 664              		.cfi_def_cfa_register 13
 665              		@ sp needed
 666 006c 90BD     		pop	{r4, r7, pc}
 667              		.cfi_endproc
 668              	.LFE11:
 670 006e 00BF     		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 671              		.align	2
 672              		.global	xQueueCreateCountingSemaphore
 673              		.thumb
 674              		.thumb_func
 676              	xQueueCreateCountingSemaphore:
 677              	.LFB12:
 663:../../../FreeRTOS_9_0/Source/queue.c **** 
 664:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 666:../../../FreeRTOS_9_0/Source/queue.c **** 
 667:../../../FreeRTOS_9_0/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:../../../FreeRTOS_9_0/Source/queue.c **** 
 669:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 671:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xHandle;
 672:../../../FreeRTOS_9_0/Source/queue.c **** 
 673:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:../../../FreeRTOS_9_0/Source/queue.c **** 
 676:../../../FreeRTOS_9_0/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:../../../FreeRTOS_9_0/Source/queue.c **** 
 678:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xHandle != NULL )
 679:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 680:../../../FreeRTOS_9_0/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:../../../FreeRTOS_9_0/Source/queue.c **** 
 682:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 684:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 685:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 686:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 688:../../../FreeRTOS_9_0/Source/queue.c **** 
 689:../../../FreeRTOS_9_0/Source/queue.c **** 		return xHandle;
 690:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 691:../../../FreeRTOS_9_0/Source/queue.c **** 
 692:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 694:../../../FreeRTOS_9_0/Source/queue.c **** 
 695:../../../FreeRTOS_9_0/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:../../../FreeRTOS_9_0/Source/queue.c **** 
 697:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
ARM GAS  /tmp/ccWCEgX6.s 			page 29


 698:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 678              		.loc 1 698 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 24
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682 0000 80B5     		push	{r7, lr}
 683              	.LCFI35:
 684              		.cfi_def_cfa_offset 8
 685              		.cfi_offset 7, -8
 686              		.cfi_offset 14, -4
 687 0002 86B0     		sub	sp, sp, #24
 688              	.LCFI36:
 689              		.cfi_def_cfa_offset 32
 690 0004 00AF     		add	r7, sp, #0
 691              	.LCFI37:
 692              		.cfi_def_cfa_register 7
 693 0006 7860     		str	r0, [r7, #4]
 694 0008 3960     		str	r1, [r7]
 699:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xHandle;
 700:../../../FreeRTOS_9_0/Source/queue.c **** 
 701:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 695              		.loc 1 701 0
 696 000a 7B68     		ldr	r3, [r7, #4]
 697 000c 002B     		cmp	r3, #0
 698 000e 09D1     		bne	.L37
 699              	.LBB92:
 700              	.LBB93:
 701              		.loc 2 237 0 discriminator 1
 702              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 703 0010 4FF05003 			mov r3, #80												
 704 0014 83F31188 		msr basepri, r3											
 705 0018 BFF36F8F 		isb														
 706 001c BFF34F8F 		dsb														
 707              	
 708              	@ 0 "" 2
 709              		.thumb
 710 0020 3B61     		str	r3, [r7, #16]
 711              	.L38:
 712              	.LBE93:
 713              	.LBE92:
 714              		.loc 1 701 0 discriminator 1
 715 0022 FEE7     		b	.L38
 716              	.L37:
 702:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 717              		.loc 1 702 0
 718 0024 3A68     		ldr	r2, [r7]
 719 0026 7B68     		ldr	r3, [r7, #4]
 720 0028 9A42     		cmp	r2, r3
 721 002a 09D9     		bls	.L39
 722              	.LBB94:
 723              	.LBB95:
 724              		.loc 2 237 0 discriminator 1
 725              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 726 002c 4FF05003 			mov r3, #80												
 727 0030 83F31188 		msr basepri, r3											
 728 0034 BFF36F8F 		isb														
 729 0038 BFF34F8F 		dsb														
ARM GAS  /tmp/ccWCEgX6.s 			page 30


 730              	
 731              	@ 0 "" 2
 732              		.thumb
 733 003c FB60     		str	r3, [r7, #12]
 734              	.L40:
 735              	.LBE95:
 736              	.LBE94:
 737              		.loc 1 702 0 discriminator 2
 738 003e FEE7     		b	.L40
 739              	.L39:
 703:../../../FreeRTOS_9_0/Source/queue.c **** 
 704:../../../FreeRTOS_9_0/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 740              		.loc 1 704 0
 741 0040 7868     		ldr	r0, [r7, #4]
 742 0042 0021     		movs	r1, #0
 743 0044 0222     		movs	r2, #2
 744 0046 FFF7FEFF 		bl	xQueueGenericCreate
 745 004a 7861     		str	r0, [r7, #20]
 705:../../../FreeRTOS_9_0/Source/queue.c **** 
 706:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xHandle != NULL )
 746              		.loc 1 706 0
 747 004c 7B69     		ldr	r3, [r7, #20]
 748 004e 002B     		cmp	r3, #0
 749 0050 02D0     		beq	.L41
 707:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 708:../../../FreeRTOS_9_0/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 750              		.loc 1 708 0
 751 0052 7B69     		ldr	r3, [r7, #20]
 752 0054 3A68     		ldr	r2, [r7]
 753 0056 9A63     		str	r2, [r3, #56]
 754              	.L41:
 709:../../../FreeRTOS_9_0/Source/queue.c **** 
 710:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 712:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 713:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 714:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 716:../../../FreeRTOS_9_0/Source/queue.c **** 
 717:../../../FreeRTOS_9_0/Source/queue.c **** 		return xHandle;
 755              		.loc 1 717 0
 756 0058 7B69     		ldr	r3, [r7, #20]
 718:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 757              		.loc 1 718 0
 758 005a 1846     		mov	r0, r3
 759 005c 1837     		adds	r7, r7, #24
 760              	.LCFI38:
 761              		.cfi_def_cfa_offset 8
 762 005e BD46     		mov	sp, r7
 763              	.LCFI39:
 764              		.cfi_def_cfa_register 13
 765              		@ sp needed
 766 0060 80BD     		pop	{r7, pc}
 767              		.cfi_endproc
 768              	.LFE12:
 770 0062 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 771              		.align	2
ARM GAS  /tmp/ccWCEgX6.s 			page 31


 772              		.global	xQueueGenericSend
 773              		.thumb
 774              		.thumb_func
 776              	xQueueGenericSend:
 777              	.LFB13:
 719:../../../FreeRTOS_9_0/Source/queue.c **** 
 720:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 722:../../../FreeRTOS_9_0/Source/queue.c **** 
 723:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:../../../FreeRTOS_9_0/Source/queue.c **** {
 778              		.loc 1 724 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 56
 781              		@ frame_needed = 1, uses_anonymous_args = 0
 782 0000 90B5     		push	{r4, r7, lr}
 783              	.LCFI40:
 784              		.cfi_def_cfa_offset 12
 785              		.cfi_offset 4, -12
 786              		.cfi_offset 7, -8
 787              		.cfi_offset 14, -4
 788 0002 91B0     		sub	sp, sp, #68
 789              	.LCFI41:
 790              		.cfi_def_cfa_offset 80
 791 0004 02AF     		add	r7, sp, #8
 792              	.LCFI42:
 793              		.cfi_def_cfa 7, 72
 794 0006 F860     		str	r0, [r7, #12]
 795 0008 B960     		str	r1, [r7, #8]
 796 000a 7A60     		str	r2, [r7, #4]
 797 000c 3B60     		str	r3, [r7]
 725:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 798              		.loc 1 725 0
 799 000e 0023     		movs	r3, #0
 800 0010 7B63     		str	r3, [r7, #52]
 726:../../../FreeRTOS_9_0/Source/queue.c **** TimeOut_t xTimeOut;
 727:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801              		.loc 1 727 0
 802 0012 FB68     		ldr	r3, [r7, #12]
 803 0014 3B63     		str	r3, [r7, #48]
 728:../../../FreeRTOS_9_0/Source/queue.c **** 
 729:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 804              		.loc 1 729 0
 805 0016 3B6B     		ldr	r3, [r7, #48]
 806 0018 002B     		cmp	r3, #0
 807 001a 09D1     		bne	.L44
 808              	.LBB96:
 809              	.LBB97:
 810              		.loc 2 237 0 discriminator 1
 811              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 812 001c 4FF05003 			mov r3, #80												
 813 0020 83F31188 		msr basepri, r3											
 814 0024 BFF36F8F 		isb														
 815 0028 BFF34F8F 		dsb														
 816              	
 817              	@ 0 "" 2
 818              		.thumb
ARM GAS  /tmp/ccWCEgX6.s 			page 32


 819 002c BB62     		str	r3, [r7, #40]
 820              	.L45:
 821              	.LBE97:
 822              	.LBE96:
 823              		.loc 1 729 0 discriminator 1
 824 002e FEE7     		b	.L45
 825              	.L44:
 730:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 826              		.loc 1 730 0
 827 0030 BB68     		ldr	r3, [r7, #8]
 828 0032 002B     		cmp	r3, #0
 829 0034 03D1     		bne	.L46
 830              		.loc 1 730 0 is_stmt 0 discriminator 2
 831 0036 3B6B     		ldr	r3, [r7, #48]
 832 0038 1B6C     		ldr	r3, [r3, #64]
 833 003a 002B     		cmp	r3, #0
 834 003c 01D1     		bne	.L47
 835              	.L46:
 836              		.loc 1 730 0 discriminator 3
 837 003e 0123     		movs	r3, #1
 838 0040 00E0     		b	.L48
 839              	.L47:
 840              		.loc 1 730 0 discriminator 4
 841 0042 0023     		movs	r3, #0
 842              	.L48:
 843              		.loc 1 730 0 discriminator 6
 844 0044 002B     		cmp	r3, #0
 845 0046 09D1     		bne	.L49
 846              	.LBB98:
 847              	.LBB99:
 848              		.loc 2 237 0 is_stmt 1 discriminator 7
 849              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 850 0048 4FF05003 			mov r3, #80												
 851 004c 83F31188 		msr basepri, r3											
 852 0050 BFF36F8F 		isb														
 853 0054 BFF34F8F 		dsb														
 854              	
 855              	@ 0 "" 2
 856              		.thumb
 857 0058 7B62     		str	r3, [r7, #36]
 858              	.L50:
 859              	.LBE99:
 860              	.LBE98:
 861              		.loc 1 730 0 discriminator 2
 862 005a FEE7     		b	.L50
 863              	.L49:
 731:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 864              		.loc 1 731 0
 865 005c 3B68     		ldr	r3, [r7]
 866 005e 022B     		cmp	r3, #2
 867 0060 03D1     		bne	.L51
 868              		.loc 1 731 0 is_stmt 0 discriminator 2
 869 0062 3B6B     		ldr	r3, [r7, #48]
 870 0064 DB6B     		ldr	r3, [r3, #60]
 871 0066 012B     		cmp	r3, #1
 872 0068 01D1     		bne	.L52
 873              	.L51:
ARM GAS  /tmp/ccWCEgX6.s 			page 33


 874              		.loc 1 731 0 discriminator 3
 875 006a 0123     		movs	r3, #1
 876 006c 00E0     		b	.L53
 877              	.L52:
 878              		.loc 1 731 0 discriminator 4
 879 006e 0023     		movs	r3, #0
 880              	.L53:
 881              		.loc 1 731 0 discriminator 6
 882 0070 002B     		cmp	r3, #0
 883 0072 09D1     		bne	.L54
 884              	.LBB100:
 885              	.LBB101:
 886              		.loc 2 237 0 is_stmt 1 discriminator 7
 887              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 888 0074 4FF05003 			mov r3, #80												
 889 0078 83F31188 		msr basepri, r3											
 890 007c BFF36F8F 		isb														
 891 0080 BFF34F8F 		dsb														
 892              	
 893              	@ 0 "" 2
 894              		.thumb
 895 0084 3B62     		str	r3, [r7, #32]
 896              	.L55:
 897              	.LBE101:
 898              	.LBE100:
 899              		.loc 1 731 0 discriminator 3
 900 0086 FEE7     		b	.L55
 901              	.L54:
 732:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 734:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 902              		.loc 1 734 0
 903 0088 FFF7FEFF 		bl	xTaskGetSchedulerState
 904 008c 0346     		mov	r3, r0
 905 008e 002B     		cmp	r3, #0
 906 0090 02D1     		bne	.L56
 907              		.loc 1 734 0 is_stmt 0 discriminator 2
 908 0092 7B68     		ldr	r3, [r7, #4]
 909 0094 002B     		cmp	r3, #0
 910 0096 01D1     		bne	.L57
 911              	.L56:
 912              		.loc 1 734 0 discriminator 3
 913 0098 0123     		movs	r3, #1
 914 009a 00E0     		b	.L58
 915              	.L57:
 916              		.loc 1 734 0 discriminator 4
 917 009c 0023     		movs	r3, #0
 918              	.L58:
 919              		.loc 1 734 0 discriminator 6
 920 009e 002B     		cmp	r3, #0
 921 00a0 09D1     		bne	.L59
 922              	.LBB102:
 923              	.LBB103:
 924              		.loc 2 237 0 is_stmt 1 discriminator 7
 925              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 926 00a2 4FF05003 			mov r3, #80												
 927 00a6 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccWCEgX6.s 			page 34


 928 00aa BFF36F8F 		isb														
 929 00ae BFF34F8F 		dsb														
 930              	
 931              	@ 0 "" 2
 932              		.thumb
 933 00b2 FB61     		str	r3, [r7, #28]
 934              	.L60:
 935              	.LBE103:
 936              	.LBE102:
 937              		.loc 1 734 0 discriminator 4
 938 00b4 FEE7     		b	.L60
 939              	.L59:
 735:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 736:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
 737:../../../FreeRTOS_9_0/Source/queue.c **** 
 738:../../../FreeRTOS_9_0/Source/queue.c **** 
 739:../../../FreeRTOS_9_0/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:../../../FreeRTOS_9_0/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 741:../../../FreeRTOS_9_0/Source/queue.c **** 	of execution time efficiency. */
 742:../../../FreeRTOS_9_0/Source/queue.c **** 	for( ;; )
 743:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 744:../../../FreeRTOS_9_0/Source/queue.c **** 		taskENTER_CRITICAL();
 940              		.loc 1 744 0
 941 00b6 FFF7FEFF 		bl	vPortEnterCritical
 745:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 746:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:../../../FreeRTOS_9_0/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:../../../FreeRTOS_9_0/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:../../../FreeRTOS_9_0/Source/queue.c **** 			queue is full. */
 750:../../../FreeRTOS_9_0/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 942              		.loc 1 750 0
 943 00ba 3B6B     		ldr	r3, [r7, #48]
 944 00bc 9A6B     		ldr	r2, [r3, #56]
 945 00be 3B6B     		ldr	r3, [r7, #48]
 946 00c0 DB6B     		ldr	r3, [r3, #60]
 947 00c2 9A42     		cmp	r2, r3
 948 00c4 02D3     		bcc	.L61
 949              		.loc 1 750 0 is_stmt 0 discriminator 1
 950 00c6 3B68     		ldr	r3, [r7]
 951 00c8 022B     		cmp	r3, #2
 952 00ca 36D1     		bne	.L62
 953              	.L61:
 751:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 752:../../../FreeRTOS_9_0/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 954              		.loc 1 752 0 is_stmt 1
 955 00cc 3B6B     		ldr	r3, [r7, #48]
 956 00ce 1846     		mov	r0, r3
 957 00d0 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 958 00d4 0146     		mov	r1, r0
 959 00d6 BA68     		ldr	r2, [r7, #8]
 960 00d8 7C68     		ldr	r4, [r7, #4]
 961 00da 3B68     		ldr	r3, [r7]
 962 00dc 0093     		str	r3, [sp]
 963 00de 5A20     		movs	r0, #90
 964 00e0 2346     		mov	r3, r4
 965 00e2 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
 753:../../../FreeRTOS_9_0/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
ARM GAS  /tmp/ccWCEgX6.s 			page 35


 966              		.loc 1 753 0
 967 00e6 386B     		ldr	r0, [r7, #48]
 968 00e8 B968     		ldr	r1, [r7, #8]
 969 00ea 3A68     		ldr	r2, [r7]
 970 00ec FFF7FEFF 		bl	prvCopyDataToQueue
 971 00f0 F862     		str	r0, [r7, #44]
 754:../../../FreeRTOS_9_0/Source/queue.c **** 
 755:../../../FreeRTOS_9_0/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 757:../../../FreeRTOS_9_0/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 759:../../../FreeRTOS_9_0/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 761:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:../../../FreeRTOS_9_0/Source/queue.c **** 							to the queue set caused a higher priority task to
 763:../../../FreeRTOS_9_0/Source/queue.c **** 							unblock. A context switch is required. */
 764:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 766:../../../FreeRTOS_9_0/Source/queue.c **** 						else
 767:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 768:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 770:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 771:../../../FreeRTOS_9_0/Source/queue.c **** 					else
 772:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 773:../../../FreeRTOS_9_0/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:../../../FreeRTOS_9_0/Source/queue.c **** 						queue then unblock it now. */
 775:../../../FreeRTOS_9_0/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 777:../../../FreeRTOS_9_0/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:../../../FreeRTOS_9_0/Source/queue.c **** 							{
 779:../../../FreeRTOS_9_0/Source/queue.c **** 								/* The unblocked task has a priority higher than
 780:../../../FreeRTOS_9_0/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:../../../FreeRTOS_9_0/Source/queue.c **** 								do this from within the critical section - the
 782:../../../FreeRTOS_9_0/Source/queue.c **** 								kernel takes care of that. */
 783:../../../FreeRTOS_9_0/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:../../../FreeRTOS_9_0/Source/queue.c **** 							}
 785:../../../FreeRTOS_9_0/Source/queue.c **** 							else
 786:../../../FreeRTOS_9_0/Source/queue.c **** 							{
 787:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:../../../FreeRTOS_9_0/Source/queue.c **** 							}
 789:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 790:../../../FreeRTOS_9_0/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 792:../../../FreeRTOS_9_0/Source/queue.c **** 							/* This path is a special case that will only get
 793:../../../FreeRTOS_9_0/Source/queue.c **** 							executed if the task was holding multiple mutexes
 794:../../../FreeRTOS_9_0/Source/queue.c **** 							and the mutexes were given back in an order that is
 795:../../../FreeRTOS_9_0/Source/queue.c **** 							different to that in which they were taken. */
 796:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 798:../../../FreeRTOS_9_0/Source/queue.c **** 						else
 799:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 800:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 802:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 803:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 804:../../../FreeRTOS_9_0/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
ARM GAS  /tmp/ccWCEgX6.s 			page 36


 805:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 806:../../../FreeRTOS_9_0/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:../../../FreeRTOS_9_0/Source/queue.c **** 					queue then unblock it now. */
 808:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 972              		.loc 1 808 0
 973 00f2 3B6B     		ldr	r3, [r7, #48]
 974 00f4 5B6A     		ldr	r3, [r3, #36]
 975 00f6 002B     		cmp	r3, #0
 976 00f8 10D0     		beq	.L63
 809:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 810:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 977              		.loc 1 810 0
 978 00fa 3B6B     		ldr	r3, [r7, #48]
 979 00fc 2433     		adds	r3, r3, #36
 980 00fe 1846     		mov	r0, r3
 981 0100 FFF7FEFF 		bl	xTaskRemoveFromEventList
 982 0104 0346     		mov	r3, r0
 983 0106 002B     		cmp	r3, #0
 984 0108 13D0     		beq	.L64
 811:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 812:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The unblocked task has a priority higher than
 813:../../../FreeRTOS_9_0/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:../../../FreeRTOS_9_0/Source/queue.c **** 							this from within the critical section - the kernel
 815:../../../FreeRTOS_9_0/Source/queue.c **** 							takes care of that. */
 816:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 985              		.loc 1 816 0
 986 010a 4F4B     		ldr	r3, .L76
 987 010c 4FF08052 		mov	r2, #268435456
 988 0110 1A60     		str	r2, [r3]
 989              	@ 816 "../../../FreeRTOS_9_0/Source/queue.c" 1
 990 0112 BFF34F8F 		dsb
 991              	@ 0 "" 2
 992              	@ 816 "../../../FreeRTOS_9_0/Source/queue.c" 1
 993 0116 BFF36F8F 		isb
 994              	@ 0 "" 2
 995              		.thumb
 996 011a 0AE0     		b	.L64
 997              	.L63:
 817:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 818:../../../FreeRTOS_9_0/Source/queue.c **** 						else
 819:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 820:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 822:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 823:../../../FreeRTOS_9_0/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 998              		.loc 1 823 0
 999 011c FB6A     		ldr	r3, [r7, #44]
 1000 011e 002B     		cmp	r3, #0
 1001 0120 07D0     		beq	.L64
 824:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 825:../../../FreeRTOS_9_0/Source/queue.c **** 						/* This path is a special case that will only get
 826:../../../FreeRTOS_9_0/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 827:../../../FreeRTOS_9_0/Source/queue.c **** 						the mutexes were given back in an order that is
 828:../../../FreeRTOS_9_0/Source/queue.c **** 						different to that in which they were taken. */
 829:../../../FreeRTOS_9_0/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1002              		.loc 1 829 0
 1003 0122 494B     		ldr	r3, .L76
ARM GAS  /tmp/ccWCEgX6.s 			page 37


 1004 0124 4FF08052 		mov	r2, #268435456
 1005 0128 1A60     		str	r2, [r3]
 1006              	@ 829 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1007 012a BFF34F8F 		dsb
 1008              	@ 0 "" 2
 1009              	@ 829 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1010 012e BFF36F8F 		isb
 1011              	@ 0 "" 2
 1012              		.thumb
 1013              	.L64:
 830:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 831:../../../FreeRTOS_9_0/Source/queue.c **** 					else
 832:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 833:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 835:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 836:../../../FreeRTOS_9_0/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:../../../FreeRTOS_9_0/Source/queue.c **** 
 838:../../../FreeRTOS_9_0/Source/queue.c **** 				taskEXIT_CRITICAL();
 1014              		.loc 1 838 0
 1015 0132 FFF7FEFF 		bl	vPortExitCritical
 839:../../../FreeRTOS_9_0/Source/queue.c **** 				return pdPASS;
 1016              		.loc 1 839 0
 1017 0136 0123     		movs	r3, #1
 1018 0138 81E0     		b	.L75
 1019              	.L62:
 840:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 841:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 842:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 843:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1020              		.loc 1 843 0
 1021 013a 7B68     		ldr	r3, [r7, #4]
 1022 013c 002B     		cmp	r3, #0
 1023 013e 10D1     		bne	.L66
 844:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 845:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 846:../../../FreeRTOS_9_0/Source/queue.c **** 					the block time has expired) so leave now. */
 847:../../../FreeRTOS_9_0/Source/queue.c **** 					taskEXIT_CRITICAL();
 1024              		.loc 1 847 0
 1025 0140 FFF7FEFF 		bl	vPortExitCritical
 848:../../../FreeRTOS_9_0/Source/queue.c **** 
 849:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Return to the original privilege level before exiting
 850:../../../FreeRTOS_9_0/Source/queue.c **** 					the function. */
 851:../../../FreeRTOS_9_0/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 1026              		.loc 1 851 0
 1027 0144 3B6B     		ldr	r3, [r7, #48]
 1028 0146 1846     		mov	r0, r3
 1029 0148 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1030 014c 0146     		mov	r1, r0
 1031 014e BA68     		ldr	r2, [r7, #8]
 1032 0150 7C68     		ldr	r4, [r7, #4]
 1033 0152 3B68     		ldr	r3, [r7]
 1034 0154 0093     		str	r3, [sp]
 1035 0156 5A20     		movs	r0, #90
 1036 0158 2346     		mov	r3, r4
 1037 015a FFF7FEFF 		bl	SYSVIEW_RecordU32x4
 852:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_FULL;
ARM GAS  /tmp/ccWCEgX6.s 			page 38


 1038              		.loc 1 852 0
 1039 015e 0023     		movs	r3, #0
 1040 0160 6DE0     		b	.L75
 1041              	.L66:
 853:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 854:../../../FreeRTOS_9_0/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1042              		.loc 1 854 0
 1043 0162 7B6B     		ldr	r3, [r7, #52]
 1044 0164 002B     		cmp	r3, #0
 1045 0166 06D1     		bne	.L67
 855:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 856:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The queue was full and a block time was specified so
 857:../../../FreeRTOS_9_0/Source/queue.c **** 					configure the timeout structure. */
 858:../../../FreeRTOS_9_0/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 1046              		.loc 1 858 0
 1047 0168 07F11403 		add	r3, r7, #20
 1048 016c 1846     		mov	r0, r3
 1049 016e FFF7FEFF 		bl	vTaskSetTimeOutState
 859:../../../FreeRTOS_9_0/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1050              		.loc 1 859 0
 1051 0172 0123     		movs	r3, #1
 1052 0174 7B63     		str	r3, [r7, #52]
 1053              	.L67:
 860:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 861:../../../FreeRTOS_9_0/Source/queue.c **** 				else
 862:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 863:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Entry time was already set. */
 864:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 866:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 867:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 868:../../../FreeRTOS_9_0/Source/queue.c **** 		taskEXIT_CRITICAL();
 1054              		.loc 1 868 0
 1055 0176 FFF7FEFF 		bl	vPortExitCritical
 869:../../../FreeRTOS_9_0/Source/queue.c **** 
 870:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:../../../FreeRTOS_9_0/Source/queue.c **** 		now the critical section has been exited. */
 872:../../../FreeRTOS_9_0/Source/queue.c **** 
 873:../../../FreeRTOS_9_0/Source/queue.c **** 		vTaskSuspendAll();
 1056              		.loc 1 873 0
 1057 017a FFF7FEFF 		bl	vTaskSuspendAll
 874:../../../FreeRTOS_9_0/Source/queue.c **** 		prvLockQueue( pxQueue );
 1058              		.loc 1 874 0
 1059 017e FFF7FEFF 		bl	vPortEnterCritical
 1060 0182 3B6B     		ldr	r3, [r7, #48]
 1061 0184 93F84430 		ldrb	r3, [r3, #68]
 1062 0188 DBB2     		uxtb	r3, r3
 1063 018a 5BB2     		sxtb	r3, r3
 1064 018c B3F1FF3F 		cmp	r3, #-1
 1065 0190 03D1     		bne	.L68
 1066              		.loc 1 874 0 is_stmt 0 discriminator 1
 1067 0192 3B6B     		ldr	r3, [r7, #48]
 1068 0194 0022     		movs	r2, #0
 1069 0196 83F84420 		strb	r2, [r3, #68]
 1070              	.L68:
 1071              		.loc 1 874 0 discriminator 3
 1072 019a 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccWCEgX6.s 			page 39


 1073 019c 93F84530 		ldrb	r3, [r3, #69]
 1074 01a0 DBB2     		uxtb	r3, r3
 1075 01a2 5BB2     		sxtb	r3, r3
 1076 01a4 B3F1FF3F 		cmp	r3, #-1
 1077 01a8 03D1     		bne	.L69
 1078              		.loc 1 874 0 discriminator 4
 1079 01aa 3B6B     		ldr	r3, [r7, #48]
 1080 01ac 0022     		movs	r2, #0
 1081 01ae 83F84520 		strb	r2, [r3, #69]
 1082              	.L69:
 1083              		.loc 1 874 0 discriminator 6
 1084 01b2 FFF7FEFF 		bl	vPortExitCritical
 875:../../../FreeRTOS_9_0/Source/queue.c **** 
 876:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1085              		.loc 1 877 0 is_stmt 1 discriminator 6
 1086 01b6 07F11402 		add	r2, r7, #20
 1087 01ba 3B1D     		adds	r3, r7, #4
 1088 01bc 1046     		mov	r0, r2
 1089 01be 1946     		mov	r1, r3
 1090 01c0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1091 01c4 0346     		mov	r3, r0
 1092 01c6 002B     		cmp	r3, #0
 1093 01c8 24D1     		bne	.L70
 878:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 879:../../../FreeRTOS_9_0/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1094              		.loc 1 879 0
 1095 01ca 386B     		ldr	r0, [r7, #48]
 1096 01cc FFF7FEFF 		bl	prvIsQueueFull
 1097 01d0 0346     		mov	r3, r0
 1098 01d2 002B     		cmp	r3, #0
 1099 01d4 18D0     		beq	.L71
 880:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 881:../../../FreeRTOS_9_0/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:../../../FreeRTOS_9_0/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1100              		.loc 1 882 0
 1101 01d6 3B6B     		ldr	r3, [r7, #48]
 1102 01d8 03F11002 		add	r2, r3, #16
 1103 01dc 7B68     		ldr	r3, [r7, #4]
 1104 01de 1046     		mov	r0, r2
 1105 01e0 1946     		mov	r1, r3
 1106 01e2 FFF7FEFF 		bl	vTaskPlaceOnEventList
 883:../../../FreeRTOS_9_0/Source/queue.c **** 
 884:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:../../../FreeRTOS_9_0/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:../../../FreeRTOS_9_0/Source/queue.c **** 				remove this task from the event	list again - but as the
 887:../../../FreeRTOS_9_0/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:../../../FreeRTOS_9_0/Source/queue.c **** 				ready last instead of the actual ready list. */
 889:../../../FreeRTOS_9_0/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1107              		.loc 1 889 0
 1108 01e6 386B     		ldr	r0, [r7, #48]
 1109 01e8 FFF7FEFF 		bl	prvUnlockQueue
 890:../../../FreeRTOS_9_0/Source/queue.c **** 
 891:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:../../../FreeRTOS_9_0/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:../../../FreeRTOS_9_0/Source/queue.c **** 				task is already in a ready list before it yields - in which
 894:../../../FreeRTOS_9_0/Source/queue.c **** 				case the yield will not cause a context switch unless there
ARM GAS  /tmp/ccWCEgX6.s 			page 40


 895:../../../FreeRTOS_9_0/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1110              		.loc 1 896 0
 1111 01ec FFF7FEFF 		bl	xTaskResumeAll
 1112 01f0 0346     		mov	r3, r0
 1113 01f2 002B     		cmp	r3, #0
 1114 01f4 22D1     		bne	.L74
 897:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 898:../../../FreeRTOS_9_0/Source/queue.c **** 					portYIELD_WITHIN_API();
 1115              		.loc 1 898 0
 1116 01f6 144B     		ldr	r3, .L76
 1117 01f8 4FF08052 		mov	r2, #268435456
 1118 01fc 1A60     		str	r2, [r3]
 1119              	@ 898 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1120 01fe BFF34F8F 		dsb
 1121              	@ 0 "" 2
 1122              	@ 898 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1123 0202 BFF36F8F 		isb
 1124              	@ 0 "" 2
 1125              		.thumb
 1126 0206 19E0     		b	.L74
 1127              	.L71:
 899:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 900:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 901:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 902:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 903:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Try again. */
 904:../../../FreeRTOS_9_0/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1128              		.loc 1 904 0
 1129 0208 386B     		ldr	r0, [r7, #48]
 1130 020a FFF7FEFF 		bl	prvUnlockQueue
 905:../../../FreeRTOS_9_0/Source/queue.c **** 				( void ) xTaskResumeAll();
 1131              		.loc 1 905 0
 1132 020e FFF7FEFF 		bl	xTaskResumeAll
 1133 0212 50E7     		b	.L59
 1134              	.L70:
 906:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 907:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 908:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 909:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 910:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The timeout has expired. */
 911:../../../FreeRTOS_9_0/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1135              		.loc 1 911 0
 1136 0214 386B     		ldr	r0, [r7, #48]
 1137 0216 FFF7FEFF 		bl	prvUnlockQueue
 912:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) xTaskResumeAll();
 1138              		.loc 1 912 0
 1139 021a FFF7FEFF 		bl	xTaskResumeAll
 913:../../../FreeRTOS_9_0/Source/queue.c **** 
 914:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 1140              		.loc 1 914 0
 1141 021e 3B6B     		ldr	r3, [r7, #48]
 1142 0220 1846     		mov	r0, r3
 1143 0222 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1144 0226 0146     		mov	r1, r0
 1145 0228 BA68     		ldr	r2, [r7, #8]
 1146 022a 7C68     		ldr	r4, [r7, #4]
ARM GAS  /tmp/ccWCEgX6.s 			page 41


 1147 022c 3B68     		ldr	r3, [r7]
 1148 022e 0093     		str	r3, [sp]
 1149 0230 5A20     		movs	r0, #90
 1150 0232 2346     		mov	r3, r4
 1151 0234 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
 915:../../../FreeRTOS_9_0/Source/queue.c **** 			return errQUEUE_FULL;
 1152              		.loc 1 915 0
 1153 0238 0023     		movs	r3, #0
 1154 023a 00E0     		b	.L75
 1155              	.L74:
 916:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 917:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 1156              		.loc 1 917 0 discriminator 6
 1157 023c 3BE7     		b	.L59
 1158              	.L75:
 918:../../../FreeRTOS_9_0/Source/queue.c **** }
 1159              		.loc 1 918 0 discriminator 7
 1160 023e 1846     		mov	r0, r3
 1161 0240 3C37     		adds	r7, r7, #60
 1162              	.LCFI43:
 1163              		.cfi_def_cfa_offset 12
 1164 0242 BD46     		mov	sp, r7
 1165              	.LCFI44:
 1166              		.cfi_def_cfa_register 13
 1167              		@ sp needed
 1168 0244 90BD     		pop	{r4, r7, pc}
 1169              	.L77:
 1170 0246 00BF     		.align	2
 1171              	.L76:
 1172 0248 04ED00E0 		.word	-536810236
 1173              		.cfi_endproc
 1174              	.LFE13:
 1176              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1177              		.align	2
 1178              		.global	xQueueGenericSendFromISR
 1179              		.thumb
 1180              		.thumb_func
 1182              	xQueueGenericSendFromISR:
 1183              	.LFB14:
 919:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 920:../../../FreeRTOS_9_0/Source/queue.c **** 
 921:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:../../../FreeRTOS_9_0/Source/queue.c **** {
 1184              		.loc 1 922 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 56
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188 0000 80B5     		push	{r7, lr}
 1189              	.LCFI45:
 1190              		.cfi_def_cfa_offset 8
 1191              		.cfi_offset 7, -8
 1192              		.cfi_offset 14, -4
 1193 0002 8EB0     		sub	sp, sp, #56
 1194              	.LCFI46:
 1195              		.cfi_def_cfa_offset 64
 1196 0004 00AF     		add	r7, sp, #0
 1197              	.LCFI47:
ARM GAS  /tmp/ccWCEgX6.s 			page 42


 1198              		.cfi_def_cfa_register 7
 1199 0006 F860     		str	r0, [r7, #12]
 1200 0008 B960     		str	r1, [r7, #8]
 1201 000a 7A60     		str	r2, [r7, #4]
 1202 000c 3B60     		str	r3, [r7]
 923:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
 924:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1203              		.loc 1 925 0
 1204 000e FB68     		ldr	r3, [r7, #12]
 1205 0010 3B63     		str	r3, [r7, #48]
 926:../../../FreeRTOS_9_0/Source/queue.c **** 
 927:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 1206              		.loc 1 927 0
 1207 0012 3B6B     		ldr	r3, [r7, #48]
 1208 0014 002B     		cmp	r3, #0
 1209 0016 09D1     		bne	.L79
 1210              	.LBB104:
 1211              	.LBB105:
 1212              		.loc 2 237 0 discriminator 1
 1213              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1214 0018 4FF05003 			mov r3, #80												
 1215 001c 83F31188 		msr basepri, r3											
 1216 0020 BFF36F8F 		isb														
 1217 0024 BFF34F8F 		dsb														
 1218              	
 1219              	@ 0 "" 2
 1220              		.thumb
 1221 0028 7B62     		str	r3, [r7, #36]
 1222              	.L80:
 1223              	.LBE105:
 1224              	.LBE104:
 1225              		.loc 1 927 0 discriminator 1
 1226 002a FEE7     		b	.L80
 1227              	.L79:
 928:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1228              		.loc 1 928 0
 1229 002c BB68     		ldr	r3, [r7, #8]
 1230 002e 002B     		cmp	r3, #0
 1231 0030 03D1     		bne	.L81
 1232              		.loc 1 928 0 is_stmt 0 discriminator 2
 1233 0032 3B6B     		ldr	r3, [r7, #48]
 1234 0034 1B6C     		ldr	r3, [r3, #64]
 1235 0036 002B     		cmp	r3, #0
 1236 0038 01D1     		bne	.L82
 1237              	.L81:
 1238              		.loc 1 928 0 discriminator 3
 1239 003a 0123     		movs	r3, #1
 1240 003c 00E0     		b	.L83
 1241              	.L82:
 1242              		.loc 1 928 0 discriminator 4
 1243 003e 0023     		movs	r3, #0
 1244              	.L83:
 1245              		.loc 1 928 0 discriminator 6
 1246 0040 002B     		cmp	r3, #0
 1247 0042 09D1     		bne	.L84
 1248              	.LBB106:
ARM GAS  /tmp/ccWCEgX6.s 			page 43


 1249              	.LBB107:
 1250              		.loc 2 237 0 is_stmt 1 discriminator 7
 1251              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1252 0044 4FF05003 			mov r3, #80												
 1253 0048 83F31188 		msr basepri, r3											
 1254 004c BFF36F8F 		isb														
 1255 0050 BFF34F8F 		dsb														
 1256              	
 1257              	@ 0 "" 2
 1258              		.thumb
 1259 0054 3B62     		str	r3, [r7, #32]
 1260              	.L85:
 1261              	.LBE107:
 1262              	.LBE106:
 1263              		.loc 1 928 0 discriminator 2
 1264 0056 FEE7     		b	.L85
 1265              	.L84:
 929:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1266              		.loc 1 929 0
 1267 0058 3B68     		ldr	r3, [r7]
 1268 005a 022B     		cmp	r3, #2
 1269 005c 03D1     		bne	.L86
 1270              		.loc 1 929 0 is_stmt 0 discriminator 2
 1271 005e 3B6B     		ldr	r3, [r7, #48]
 1272 0060 DB6B     		ldr	r3, [r3, #60]
 1273 0062 012B     		cmp	r3, #1
 1274 0064 01D1     		bne	.L87
 1275              	.L86:
 1276              		.loc 1 929 0 discriminator 3
 1277 0066 0123     		movs	r3, #1
 1278 0068 00E0     		b	.L88
 1279              	.L87:
 1280              		.loc 1 929 0 discriminator 4
 1281 006a 0023     		movs	r3, #0
 1282              	.L88:
 1283              		.loc 1 929 0 discriminator 6
 1284 006c 002B     		cmp	r3, #0
 1285 006e 09D1     		bne	.L89
 1286              	.LBB108:
 1287              	.LBB109:
 1288              		.loc 2 237 0 is_stmt 1 discriminator 7
 1289              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1290 0070 4FF05003 			mov r3, #80												
 1291 0074 83F31188 		msr basepri, r3											
 1292 0078 BFF36F8F 		isb														
 1293 007c BFF34F8F 		dsb														
 1294              	
 1295              	@ 0 "" 2
 1296              		.thumb
 1297 0080 FB61     		str	r3, [r7, #28]
 1298              	.L90:
 1299              	.LBE109:
 1300              	.LBE108:
 1301              		.loc 1 929 0 discriminator 3
 1302 0082 FEE7     		b	.L90
 1303              	.L89:
 930:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccWCEgX6.s 			page 44


 931:../../../FreeRTOS_9_0/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:../../../FreeRTOS_9_0/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:../../../FreeRTOS_9_0/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:../../../FreeRTOS_9_0/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:../../../FreeRTOS_9_0/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:../../../FreeRTOS_9_0/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:../../../FreeRTOS_9_0/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:../../../FreeRTOS_9_0/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:../../../FreeRTOS_9_0/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:../../../FreeRTOS_9_0/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:../../../FreeRTOS_9_0/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:../../../FreeRTOS_9_0/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:../../../FreeRTOS_9_0/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:../../../FreeRTOS_9_0/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:../../../FreeRTOS_9_0/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1304              		.loc 1 945 0
 1305 0084 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1306              	.LBB110:
 1307              	.LBB111:
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1308              		.loc 2 253 0
 1309              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1310 0088 EFF31182 			mrs r2, basepri											
 1311 008c 4FF05003 		mov r3, #80												
 1312 0090 83F31188 		msr basepri, r3											
 1313 0094 BFF36F8F 		isb														
 1314 0098 BFF34F8F 		dsb														
 1315              	
 1316              	@ 0 "" 2
 1317              		.thumb
 1318 009c BA61     		str	r2, [r7, #24]
 1319 009e 7B61     		str	r3, [r7, #20]
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
ARM GAS  /tmp/ccWCEgX6.s 			page 45


 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1320              		.loc 2 265 0
 1321 00a0 BB69     		ldr	r3, [r7, #24]
 1322              	.LBE111:
 1323              	.LBE110:
 946:../../../FreeRTOS_9_0/Source/queue.c **** 
 947:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:../../../FreeRTOS_9_0/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:../../../FreeRTOS_9_0/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:../../../FreeRTOS_9_0/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:../../../FreeRTOS_9_0/Source/queue.c **** 	post). */
 952:../../../FreeRTOS_9_0/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1324              		.loc 1 952 0
 1325 00a2 FB62     		str	r3, [r7, #44]
 953:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 954:../../../FreeRTOS_9_0/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1326              		.loc 1 954 0
 1327 00a4 3B6B     		ldr	r3, [r7, #48]
 1328 00a6 9A6B     		ldr	r2, [r3, #56]
 1329 00a8 3B6B     		ldr	r3, [r7, #48]
 1330 00aa DB6B     		ldr	r3, [r3, #60]
 1331 00ac 9A42     		cmp	r2, r3
 1332 00ae 02D3     		bcc	.L92
 1333              		.loc 1 954 0 is_stmt 0 discriminator 1
 1334 00b0 3B68     		ldr	r3, [r7]
 1335 00b2 022B     		cmp	r3, #2
 1336 00b4 37D1     		bne	.L93
 1337              	.L92:
 1338              	.LBB112:
 955:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 956:../../../FreeRTOS_9_0/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1339              		.loc 1 956 0 is_stmt 1
 1340 00b6 3B6B     		ldr	r3, [r7, #48]
 1341 00b8 93F84530 		ldrb	r3, [r3, #69]
 1342 00bc 87F82B30 		strb	r3, [r7, #43]
 957:../../../FreeRTOS_9_0/Source/queue.c **** 
 958:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 1343              		.loc 1 958 0
 1344 00c0 3B6B     		ldr	r3, [r7, #48]
 1345 00c2 1846     		mov	r0, r3
 1346 00c4 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1347 00c8 0246     		mov	r2, r0
 1348 00ca 7B68     		ldr	r3, [r7, #4]
 1349 00cc 6020     		movs	r0, #96
 1350 00ce 1146     		mov	r1, r2
 1351 00d0 1A46     		mov	r2, r3
 1352 00d2 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 959:../../../FreeRTOS_9_0/Source/queue.c **** 
 960:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:../../../FreeRTOS_9_0/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:../../../FreeRTOS_9_0/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:../../../FreeRTOS_9_0/Source/queue.c **** 			called here even though the disinherit function does not check if
 964:../../../FreeRTOS_9_0/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1353              		.loc 1 965 0
 1354 00d6 386B     		ldr	r0, [r7, #48]
ARM GAS  /tmp/ccWCEgX6.s 			page 46


 1355 00d8 B968     		ldr	r1, [r7, #8]
 1356 00da 3A68     		ldr	r2, [r7]
 1357 00dc FFF7FEFF 		bl	prvCopyDataToQueue
 966:../../../FreeRTOS_9_0/Source/queue.c **** 
 967:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:../../../FreeRTOS_9_0/Source/queue.c **** 			be done when the queue is unlocked later. */
 969:../../../FreeRTOS_9_0/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1358              		.loc 1 969 0
 1359 00e0 97F92B30 		ldrsb	r3, [r7, #43]
 1360 00e4 B3F1FF3F 		cmp	r3, #-1
 1361 00e8 12D1     		bne	.L94
 970:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 971:../../../FreeRTOS_9_0/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 973:../../../FreeRTOS_9_0/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 975:../../../FreeRTOS_9_0/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 977:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:../../../FreeRTOS_9_0/Source/queue.c **** 							to the queue set caused a higher priority task to
 979:../../../FreeRTOS_9_0/Source/queue.c **** 							unblock.  A context switch is required. */
 980:../../../FreeRTOS_9_0/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:../../../FreeRTOS_9_0/Source/queue.c **** 							{
 982:../../../FreeRTOS_9_0/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:../../../FreeRTOS_9_0/Source/queue.c **** 							}
 984:../../../FreeRTOS_9_0/Source/queue.c **** 							else
 985:../../../FreeRTOS_9_0/Source/queue.c **** 							{
 986:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:../../../FreeRTOS_9_0/Source/queue.c **** 							}
 988:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 989:../../../FreeRTOS_9_0/Source/queue.c **** 						else
 990:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 991:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 993:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 994:../../../FreeRTOS_9_0/Source/queue.c **** 					else
 995:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 996:../../../FreeRTOS_9_0/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 998:../../../FreeRTOS_9_0/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1000:../../../FreeRTOS_9_0/Source/queue.c **** 								/* The task waiting has a higher priority so
1001:../../../FreeRTOS_9_0/Source/queue.c **** 								record that a context switch is required. */
1002:../../../FreeRTOS_9_0/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:../../../FreeRTOS_9_0/Source/queue.c **** 								{
1004:../../../FreeRTOS_9_0/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:../../../FreeRTOS_9_0/Source/queue.c **** 								}
1006:../../../FreeRTOS_9_0/Source/queue.c **** 								else
1007:../../../FreeRTOS_9_0/Source/queue.c **** 								{
1008:../../../FreeRTOS_9_0/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:../../../FreeRTOS_9_0/Source/queue.c **** 								}
1010:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1011:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1012:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1013:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1015:../../../FreeRTOS_9_0/Source/queue.c **** 						}
ARM GAS  /tmp/ccWCEgX6.s 			page 47


1016:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1017:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1018:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1020:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1021:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1022:../../../FreeRTOS_9_0/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1024:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1362              		.loc 1 1024 0
 1363 00ea 3B6B     		ldr	r3, [r7, #48]
 1364 00ec 5B6A     		ldr	r3, [r3, #36]
 1365 00ee 002B     		cmp	r3, #0
 1366 00f0 16D0     		beq	.L95
1025:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1026:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1367              		.loc 1 1026 0
 1368 00f2 3B6B     		ldr	r3, [r7, #48]
 1369 00f4 2433     		adds	r3, r3, #36
 1370 00f6 1846     		mov	r0, r3
 1371 00f8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1372 00fc 0346     		mov	r3, r0
 1373 00fe 002B     		cmp	r3, #0
 1374 0100 0ED0     		beq	.L95
1027:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1028:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:../../../FreeRTOS_9_0/Source/queue.c **** 							context	switch is required. */
1030:../../../FreeRTOS_9_0/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1375              		.loc 1 1030 0
 1376 0102 7B68     		ldr	r3, [r7, #4]
 1377 0104 002B     		cmp	r3, #0
 1378 0106 0BD0     		beq	.L95
1031:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1032:../../../FreeRTOS_9_0/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1379              		.loc 1 1032 0
 1380 0108 7B68     		ldr	r3, [r7, #4]
 1381 010a 0122     		movs	r2, #1
 1382 010c 1A60     		str	r2, [r3]
 1383 010e 07E0     		b	.L95
 1384              	.L94:
1033:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1034:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1035:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1036:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1038:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1039:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1040:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1041:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1043:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1044:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1045:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1046:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1048:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1049:../../../FreeRTOS_9_0/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
ARM GAS  /tmp/ccWCEgX6.s 			page 48


1050:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1051:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1052:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1053:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:../../../FreeRTOS_9_0/Source/queue.c **** 				knows that data was posted while it was locked. */
1055:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1385              		.loc 1 1055 0
 1386 0110 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1387 0114 0133     		adds	r3, r3, #1
 1388 0116 DBB2     		uxtb	r3, r3
 1389 0118 DAB2     		uxtb	r2, r3
 1390 011a 3B6B     		ldr	r3, [r7, #48]
 1391 011c 83F84520 		strb	r2, [r3, #69]
 1392              	.L95:
1056:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1057:../../../FreeRTOS_9_0/Source/queue.c **** 
1058:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 1393              		.loc 1 1058 0
 1394 0120 0123     		movs	r3, #1
 1395 0122 7B63     		str	r3, [r7, #52]
 1396              	.LBE112:
 955:../../../FreeRTOS_9_0/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1397              		.loc 1 955 0
 1398 0124 0CE0     		b	.L96
 1399              	.L93:
1059:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1060:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1061:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1062:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 1400              		.loc 1 1062 0
 1401 0126 3B6B     		ldr	r3, [r7, #48]
 1402 0128 1846     		mov	r0, r3
 1403 012a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1404 012e 0246     		mov	r2, r0
 1405 0130 7B68     		ldr	r3, [r7, #4]
 1406 0132 6020     		movs	r0, #96
 1407 0134 1146     		mov	r1, r2
 1408 0136 1A46     		mov	r2, r3
 1409 0138 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1063:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1410              		.loc 1 1063 0
 1411 013c 0023     		movs	r3, #0
 1412 013e 7B63     		str	r3, [r7, #52]
 1413              	.L96:
 1414 0140 FB6A     		ldr	r3, [r7, #44]
 1415 0142 3B61     		str	r3, [r7, #16]
 1416              	.LBB113:
 1417              	.LBB114:
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1418              		.loc 2 271 0
 1419 0144 3B69     		ldr	r3, [r7, #16]
 1420              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccWCEgX6.s 			page 49


 1421 0146 83F31188 			msr basepri, r3	
 1422              	@ 0 "" 2
 1423              		.thumb
 1424              	.LBE114:
 1425              	.LBE113:
1064:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1065:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1066:../../../FreeRTOS_9_0/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:../../../FreeRTOS_9_0/Source/queue.c **** 
1068:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 1426              		.loc 1 1068 0
 1427 014a 7B6B     		ldr	r3, [r7, #52]
1069:../../../FreeRTOS_9_0/Source/queue.c **** }
 1428              		.loc 1 1069 0
 1429 014c 1846     		mov	r0, r3
 1430 014e 3837     		adds	r7, r7, #56
 1431              	.LCFI48:
 1432              		.cfi_def_cfa_offset 8
 1433 0150 BD46     		mov	sp, r7
 1434              	.LCFI49:
 1435              		.cfi_def_cfa_register 13
 1436              		@ sp needed
 1437 0152 80BD     		pop	{r7, pc}
 1438              		.cfi_endproc
 1439              	.LFE14:
 1441              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1442              		.align	2
 1443              		.global	xQueueGiveFromISR
 1444              		.thumb
 1445              		.thumb_func
 1447              	xQueueGiveFromISR:
 1448              	.LFB15:
1070:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1071:../../../FreeRTOS_9_0/Source/queue.c **** 
1072:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:../../../FreeRTOS_9_0/Source/queue.c **** {
 1449              		.loc 1 1073 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 56
 1452              		@ frame_needed = 1, uses_anonymous_args = 0
 1453 0000 80B5     		push	{r7, lr}
 1454              	.LCFI50:
 1455              		.cfi_def_cfa_offset 8
 1456              		.cfi_offset 7, -8
 1457              		.cfi_offset 14, -4
 1458 0002 8EB0     		sub	sp, sp, #56
 1459              	.LCFI51:
 1460              		.cfi_def_cfa_offset 64
 1461 0004 00AF     		add	r7, sp, #0
 1462              	.LCFI52:
 1463              		.cfi_def_cfa_register 7
 1464 0006 7860     		str	r0, [r7, #4]
 1465 0008 3960     		str	r1, [r7]
1074:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1075:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1466              		.loc 1 1076 0
ARM GAS  /tmp/ccWCEgX6.s 			page 50


 1467 000a 7B68     		ldr	r3, [r7, #4]
 1468 000c 3B63     		str	r3, [r7, #48]
1077:../../../FreeRTOS_9_0/Source/queue.c **** 
1078:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:../../../FreeRTOS_9_0/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:../../../FreeRTOS_9_0/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:../../../FreeRTOS_9_0/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:../../../FreeRTOS_9_0/Source/queue.c **** 	post). */
1083:../../../FreeRTOS_9_0/Source/queue.c **** 
1084:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 1469              		.loc 1 1084 0
 1470 000e 3B6B     		ldr	r3, [r7, #48]
 1471 0010 002B     		cmp	r3, #0
 1472 0012 09D1     		bne	.L99
 1473              	.LBB115:
 1474              	.LBB116:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1475              		.loc 2 237 0 discriminator 1
 1476              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1477 0014 4FF05003 			mov r3, #80												
 1478 0018 83F31188 		msr basepri, r3											
 1479 001c BFF36F8F 		isb														
 1480 0020 BFF34F8F 		dsb														
 1481              	
 1482              	@ 0 "" 2
 1483              		.thumb
 1484 0024 3B62     		str	r3, [r7, #32]
 1485              	.L100:
 1486              	.LBE116:
 1487              	.LBE115:
 1488              		.loc 1 1084 0 discriminator 1
 1489 0026 FEE7     		b	.L100
 1490              	.L99:
1085:../../../FreeRTOS_9_0/Source/queue.c **** 
1086:../../../FreeRTOS_9_0/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:../../../FreeRTOS_9_0/Source/queue.c **** 	if the item size is not 0. */
1088:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 1491              		.loc 1 1088 0
 1492 0028 3B6B     		ldr	r3, [r7, #48]
 1493 002a 1B6C     		ldr	r3, [r3, #64]
 1494 002c 002B     		cmp	r3, #0
 1495 002e 09D0     		beq	.L101
 1496              	.LBB117:
 1497              	.LBB118:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1498              		.loc 2 237 0 discriminator 1
 1499              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1500 0030 4FF05003 			mov r3, #80												
 1501 0034 83F31188 		msr basepri, r3											
 1502 0038 BFF36F8F 		isb														
 1503 003c BFF34F8F 		dsb														
 1504              	
 1505              	@ 0 "" 2
 1506              		.thumb
 1507 0040 FB61     		str	r3, [r7, #28]
 1508              	.L102:
 1509              	.LBE118:
ARM GAS  /tmp/ccWCEgX6.s 			page 51


 1510              	.LBE117:
 1511              		.loc 1 1088 0 discriminator 2
 1512 0042 FEE7     		b	.L102
 1513              	.L101:
1089:../../../FreeRTOS_9_0/Source/queue.c **** 
1090:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:../../../FreeRTOS_9_0/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:../../../FreeRTOS_9_0/Source/queue.c **** 	interrupts, only tasks. */
1093:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
 1514              		.loc 1 1093 0
 1515 0044 3B6B     		ldr	r3, [r7, #48]
 1516 0046 1B68     		ldr	r3, [r3]
 1517 0048 002B     		cmp	r3, #0
 1518 004a 03D1     		bne	.L103
 1519              		.loc 1 1093 0 is_stmt 0 discriminator 2
 1520 004c 3B6B     		ldr	r3, [r7, #48]
 1521 004e 5B68     		ldr	r3, [r3, #4]
 1522 0050 002B     		cmp	r3, #0
 1523 0052 01D1     		bne	.L104
 1524              	.L103:
 1525              		.loc 1 1093 0 discriminator 3
 1526 0054 0123     		movs	r3, #1
 1527 0056 00E0     		b	.L105
 1528              	.L104:
 1529              		.loc 1 1093 0 discriminator 4
 1530 0058 0023     		movs	r3, #0
 1531              	.L105:
 1532              		.loc 1 1093 0 discriminator 6
 1533 005a 002B     		cmp	r3, #0
 1534 005c 09D1     		bne	.L106
 1535              	.LBB119:
 1536              	.LBB120:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1537              		.loc 2 237 0 is_stmt 1 discriminator 7
 1538              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1539 005e 4FF05003 			mov r3, #80												
 1540 0062 83F31188 		msr basepri, r3											
 1541 0066 BFF36F8F 		isb														
 1542 006a BFF34F8F 		dsb														
 1543              	
 1544              	@ 0 "" 2
 1545              		.thumb
 1546 006e BB61     		str	r3, [r7, #24]
 1547              	.L107:
 1548              	.LBE120:
 1549              	.LBE119:
 1550              		.loc 1 1093 0 discriminator 3
 1551 0070 FEE7     		b	.L107
 1552              	.L106:
1094:../../../FreeRTOS_9_0/Source/queue.c **** 
1095:../../../FreeRTOS_9_0/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:../../../FreeRTOS_9_0/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:../../../FreeRTOS_9_0/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:../../../FreeRTOS_9_0/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:../../../FreeRTOS_9_0/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:../../../FreeRTOS_9_0/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:../../../FreeRTOS_9_0/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
ARM GAS  /tmp/ccWCEgX6.s 			page 52


1102:../../../FreeRTOS_9_0/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:../../../FreeRTOS_9_0/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:../../../FreeRTOS_9_0/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:../../../FreeRTOS_9_0/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:../../../FreeRTOS_9_0/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:../../../FreeRTOS_9_0/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:../../../FreeRTOS_9_0/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:../../../FreeRTOS_9_0/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1553              		.loc 1 1109 0
 1554 0072 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1555              	.LBB121:
 1556              	.LBB122:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1557              		.loc 2 253 0
 1558              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1559 0076 EFF31182 			mrs r2, basepri											
 1560 007a 4FF05003 		mov r3, #80												
 1561 007e 83F31188 		msr basepri, r3											
 1562 0082 BFF36F8F 		isb														
 1563 0086 BFF34F8F 		dsb														
 1564              	
 1565              	@ 0 "" 2
 1566              		.thumb
 1567 008a 7A61     		str	r2, [r7, #20]
 1568 008c 3B61     		str	r3, [r7, #16]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1569              		.loc 2 265 0
 1570 008e 7B69     		ldr	r3, [r7, #20]
 1571              	.LBE122:
 1572              	.LBE121:
1110:../../../FreeRTOS_9_0/Source/queue.c **** 
1111:../../../FreeRTOS_9_0/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1573              		.loc 1 1111 0
 1574 0090 FB62     		str	r3, [r7, #44]
 1575              	.LBB123:
1112:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1113:../../../FreeRTOS_9_0/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1576              		.loc 1 1113 0
 1577 0092 3B6B     		ldr	r3, [r7, #48]
 1578 0094 9B6B     		ldr	r3, [r3, #56]
 1579 0096 BB62     		str	r3, [r7, #40]
1114:../../../FreeRTOS_9_0/Source/queue.c **** 
1115:../../../FreeRTOS_9_0/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:../../../FreeRTOS_9_0/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:../../../FreeRTOS_9_0/Source/queue.c **** 		space'. */
1118:../../../FreeRTOS_9_0/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
 1580              		.loc 1 1118 0
 1581 0098 3B6B     		ldr	r3, [r7, #48]
 1582 009a DA6B     		ldr	r2, [r3, #60]
 1583 009c BB6A     		ldr	r3, [r7, #40]
 1584 009e 9A42     		cmp	r2, r3
 1585 00a0 36D9     		bls	.L109
 1586              	.LBB124:
1119:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1120:../../../FreeRTOS_9_0/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1587              		.loc 1 1120 0
 1588 00a2 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccWCEgX6.s 			page 53


 1589 00a4 93F84530 		ldrb	r3, [r3, #69]
 1590 00a8 87F82730 		strb	r3, [r7, #39]
1121:../../../FreeRTOS_9_0/Source/queue.c **** 
1122:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 1591              		.loc 1 1122 0
 1592 00ac 3B6B     		ldr	r3, [r7, #48]
 1593 00ae 1846     		mov	r0, r3
 1594 00b0 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1595 00b4 0246     		mov	r2, r0
 1596 00b6 3B68     		ldr	r3, [r7]
 1597 00b8 6020     		movs	r0, #96
 1598 00ba 1146     		mov	r1, r2
 1599 00bc 1A46     		mov	r2, r3
 1600 00be FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1123:../../../FreeRTOS_9_0/Source/queue.c **** 
1124:../../../FreeRTOS_9_0/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:../../../FreeRTOS_9_0/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:../../../FreeRTOS_9_0/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:../../../FreeRTOS_9_0/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:../../../FreeRTOS_9_0/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:../../../FreeRTOS_9_0/Source/queue.c **** 			messages (semaphores) available. */
1130:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 1601              		.loc 1 1130 0
 1602 00c2 BB6A     		ldr	r3, [r7, #40]
 1603 00c4 5A1C     		adds	r2, r3, #1
 1604 00c6 3B6B     		ldr	r3, [r7, #48]
 1605 00c8 9A63     		str	r2, [r3, #56]
1131:../../../FreeRTOS_9_0/Source/queue.c **** 
1132:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:../../../FreeRTOS_9_0/Source/queue.c **** 			be done when the queue is unlocked later. */
1134:../../../FreeRTOS_9_0/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1606              		.loc 1 1134 0
 1607 00ca 97F92730 		ldrsb	r3, [r7, #39]
 1608 00ce B3F1FF3F 		cmp	r3, #-1
 1609 00d2 12D1     		bne	.L110
1135:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1136:../../../FreeRTOS_9_0/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1138:../../../FreeRTOS_9_0/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1140:../../../FreeRTOS_9_0/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1142:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:../../../FreeRTOS_9_0/Source/queue.c **** 							posting	to the queue set caused a higher priority
1144:../../../FreeRTOS_9_0/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1145:../../../FreeRTOS_9_0/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1147:../../../FreeRTOS_9_0/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1149:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1150:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1151:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1153:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1154:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1155:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1156:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccWCEgX6.s 			page 54


1157:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1158:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1159:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1160:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1161:../../../FreeRTOS_9_0/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1163:../../../FreeRTOS_9_0/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1165:../../../FreeRTOS_9_0/Source/queue.c **** 								/* The task waiting has a higher priority so
1166:../../../FreeRTOS_9_0/Source/queue.c **** 								record that a context switch is required. */
1167:../../../FreeRTOS_9_0/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:../../../FreeRTOS_9_0/Source/queue.c **** 								{
1169:../../../FreeRTOS_9_0/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:../../../FreeRTOS_9_0/Source/queue.c **** 								}
1171:../../../FreeRTOS_9_0/Source/queue.c **** 								else
1172:../../../FreeRTOS_9_0/Source/queue.c **** 								{
1173:../../../FreeRTOS_9_0/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:../../../FreeRTOS_9_0/Source/queue.c **** 								}
1175:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1176:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1177:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1178:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1180:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1181:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1182:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1183:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1185:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1186:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1187:../../../FreeRTOS_9_0/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1189:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1610              		.loc 1 1189 0
 1611 00d4 3B6B     		ldr	r3, [r7, #48]
 1612 00d6 5B6A     		ldr	r3, [r3, #36]
 1613 00d8 002B     		cmp	r3, #0
 1614 00da 16D0     		beq	.L111
1190:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1191:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1615              		.loc 1 1191 0
 1616 00dc 3B6B     		ldr	r3, [r7, #48]
 1617 00de 2433     		adds	r3, r3, #36
 1618 00e0 1846     		mov	r0, r3
 1619 00e2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1620 00e6 0346     		mov	r3, r0
 1621 00e8 002B     		cmp	r3, #0
 1622 00ea 0ED0     		beq	.L111
1192:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1193:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:../../../FreeRTOS_9_0/Source/queue.c **** 							context	switch is required. */
1195:../../../FreeRTOS_9_0/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1623              		.loc 1 1195 0
 1624 00ec 3B68     		ldr	r3, [r7]
 1625 00ee 002B     		cmp	r3, #0
 1626 00f0 0BD0     		beq	.L111
1196:../../../FreeRTOS_9_0/Source/queue.c **** 							{
ARM GAS  /tmp/ccWCEgX6.s 			page 55


1197:../../../FreeRTOS_9_0/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1627              		.loc 1 1197 0
 1628 00f2 3B68     		ldr	r3, [r7]
 1629 00f4 0122     		movs	r2, #1
 1630 00f6 1A60     		str	r2, [r3]
 1631 00f8 07E0     		b	.L111
 1632              	.L110:
1198:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1199:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1200:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1201:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1203:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1204:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1205:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1206:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1208:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1209:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1210:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1211:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1213:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1214:../../../FreeRTOS_9_0/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1216:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1217:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1218:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:../../../FreeRTOS_9_0/Source/queue.c **** 				knows that data was posted while it was locked. */
1220:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1633              		.loc 1 1220 0
 1634 00fa 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1635 00fe 0133     		adds	r3, r3, #1
 1636 0100 DBB2     		uxtb	r3, r3
 1637 0102 DAB2     		uxtb	r2, r3
 1638 0104 3B6B     		ldr	r3, [r7, #48]
 1639 0106 83F84520 		strb	r2, [r3, #69]
 1640              	.L111:
1221:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1222:../../../FreeRTOS_9_0/Source/queue.c **** 
1223:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 1641              		.loc 1 1223 0
 1642 010a 0123     		movs	r3, #1
 1643 010c 7B63     		str	r3, [r7, #52]
 1644              	.LBE124:
 1645 010e 0CE0     		b	.L112
 1646              	.L109:
1224:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1225:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1226:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1227:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 1647              		.loc 1 1227 0
 1648 0110 3B6B     		ldr	r3, [r7, #48]
 1649 0112 1846     		mov	r0, r3
 1650 0114 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1651 0118 0246     		mov	r2, r0
 1652 011a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccWCEgX6.s 			page 56


 1653 011c 6020     		movs	r0, #96
 1654 011e 1146     		mov	r1, r2
 1655 0120 1A46     		mov	r2, r3
 1656 0122 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1228:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1657              		.loc 1 1228 0
 1658 0126 0023     		movs	r3, #0
 1659 0128 7B63     		str	r3, [r7, #52]
 1660              	.L112:
 1661 012a FB6A     		ldr	r3, [r7, #44]
 1662 012c FB60     		str	r3, [r7, #12]
 1663              	.LBE123:
 1664              	.LBB125:
 1665              	.LBB126:
 1666              		.loc 2 271 0
 1667 012e FB68     		ldr	r3, [r7, #12]
 1668              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1669 0130 83F31188 			msr basepri, r3	
 1670              	@ 0 "" 2
 1671              		.thumb
 1672              	.LBE126:
 1673              	.LBE125:
1229:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1230:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1231:../../../FreeRTOS_9_0/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:../../../FreeRTOS_9_0/Source/queue.c **** 
1233:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 1674              		.loc 1 1233 0
 1675 0134 7B6B     		ldr	r3, [r7, #52]
1234:../../../FreeRTOS_9_0/Source/queue.c **** }
 1676              		.loc 1 1234 0
 1677 0136 1846     		mov	r0, r3
 1678 0138 3837     		adds	r7, r7, #56
 1679              	.LCFI53:
 1680              		.cfi_def_cfa_offset 8
 1681 013a BD46     		mov	sp, r7
 1682              	.LCFI54:
 1683              		.cfi_def_cfa_register 13
 1684              		@ sp needed
 1685 013c 80BD     		pop	{r7, pc}
 1686              		.cfi_endproc
 1687              	.LFE15:
 1689 013e 00BF     		.section	.text.xQueueGenericReceive,"ax",%progbits
 1690              		.align	2
 1691              		.global	xQueueGenericReceive
 1692              		.thumb
 1693              		.thumb_func
 1695              	xQueueGenericReceive:
 1696              	.LFB16:
1235:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1236:../../../FreeRTOS_9_0/Source/queue.c **** 
1237:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:../../../FreeRTOS_9_0/Source/queue.c **** {
 1697              		.loc 1 1238 0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 56
 1700              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccWCEgX6.s 			page 57


 1701 0000 B0B5     		push	{r4, r5, r7, lr}
 1702              	.LCFI55:
 1703              		.cfi_def_cfa_offset 16
 1704              		.cfi_offset 4, -16
 1705              		.cfi_offset 5, -12
 1706              		.cfi_offset 7, -8
 1707              		.cfi_offset 14, -4
 1708 0002 90B0     		sub	sp, sp, #64
 1709              	.LCFI56:
 1710              		.cfi_def_cfa_offset 80
 1711 0004 02AF     		add	r7, sp, #8
 1712              	.LCFI57:
 1713              		.cfi_def_cfa 7, 72
 1714 0006 F860     		str	r0, [r7, #12]
 1715 0008 B960     		str	r1, [r7, #8]
 1716 000a 7A60     		str	r2, [r7, #4]
 1717 000c 3B60     		str	r3, [r7]
1239:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1718              		.loc 1 1239 0
 1719 000e 0023     		movs	r3, #0
 1720 0010 7B63     		str	r3, [r7, #52]
1240:../../../FreeRTOS_9_0/Source/queue.c **** TimeOut_t xTimeOut;
1241:../../../FreeRTOS_9_0/Source/queue.c **** int8_t *pcOriginalReadPosition;
1242:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1721              		.loc 1 1242 0
 1722 0012 FB68     		ldr	r3, [r7, #12]
 1723 0014 3B63     		str	r3, [r7, #48]
1243:../../../FreeRTOS_9_0/Source/queue.c **** 
1244:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 1724              		.loc 1 1244 0
 1725 0016 3B6B     		ldr	r3, [r7, #48]
 1726 0018 002B     		cmp	r3, #0
 1727 001a 09D1     		bne	.L115
 1728              	.LBB127:
 1729              	.LBB128:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1730              		.loc 2 237 0 discriminator 1
 1731              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1732 001c 4FF05003 			mov r3, #80												
 1733 0020 83F31188 		msr basepri, r3											
 1734 0024 BFF36F8F 		isb														
 1735 0028 BFF34F8F 		dsb														
 1736              	
 1737              	@ 0 "" 2
 1738              		.thumb
 1739 002c 7B62     		str	r3, [r7, #36]
 1740              	.L116:
 1741              	.LBE128:
 1742              	.LBE127:
 1743              		.loc 1 1244 0 discriminator 1
 1744 002e FEE7     		b	.L116
 1745              	.L115:
1245:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1746              		.loc 1 1245 0
 1747 0030 BB68     		ldr	r3, [r7, #8]
 1748 0032 002B     		cmp	r3, #0
 1749 0034 03D1     		bne	.L117
ARM GAS  /tmp/ccWCEgX6.s 			page 58


 1750              		.loc 1 1245 0 is_stmt 0 discriminator 2
 1751 0036 3B6B     		ldr	r3, [r7, #48]
 1752 0038 1B6C     		ldr	r3, [r3, #64]
 1753 003a 002B     		cmp	r3, #0
 1754 003c 01D1     		bne	.L118
 1755              	.L117:
 1756              		.loc 1 1245 0 discriminator 3
 1757 003e 0123     		movs	r3, #1
 1758 0040 00E0     		b	.L119
 1759              	.L118:
 1760              		.loc 1 1245 0 discriminator 4
 1761 0042 0023     		movs	r3, #0
 1762              	.L119:
 1763              		.loc 1 1245 0 discriminator 6
 1764 0044 002B     		cmp	r3, #0
 1765 0046 09D1     		bne	.L120
 1766              	.LBB129:
 1767              	.LBB130:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1768              		.loc 2 237 0 is_stmt 1 discriminator 7
 1769              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1770 0048 4FF05003 			mov r3, #80												
 1771 004c 83F31188 		msr basepri, r3											
 1772 0050 BFF36F8F 		isb														
 1773 0054 BFF34F8F 		dsb														
 1774              	
 1775              	@ 0 "" 2
 1776              		.thumb
 1777 0058 3B62     		str	r3, [r7, #32]
 1778              	.L121:
 1779              	.LBE130:
 1780              	.LBE129:
 1781              		.loc 1 1245 0 discriminator 2
 1782 005a FEE7     		b	.L121
 1783              	.L120:
1246:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1248:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 1784              		.loc 1 1248 0
 1785 005c FFF7FEFF 		bl	xTaskGetSchedulerState
 1786 0060 0346     		mov	r3, r0
 1787 0062 002B     		cmp	r3, #0
 1788 0064 02D1     		bne	.L122
 1789              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1790 0066 7B68     		ldr	r3, [r7, #4]
 1791 0068 002B     		cmp	r3, #0
 1792 006a 01D1     		bne	.L123
 1793              	.L122:
 1794              		.loc 1 1248 0 discriminator 3
 1795 006c 0123     		movs	r3, #1
 1796 006e 00E0     		b	.L124
 1797              	.L123:
 1798              		.loc 1 1248 0 discriminator 4
 1799 0070 0023     		movs	r3, #0
 1800              	.L124:
 1801              		.loc 1 1248 0 discriminator 6
 1802 0072 002B     		cmp	r3, #0
ARM GAS  /tmp/ccWCEgX6.s 			page 59


 1803 0074 09D1     		bne	.L125
 1804              	.LBB131:
 1805              	.LBB132:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1806              		.loc 2 237 0 is_stmt 1 discriminator 7
 1807              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1808 0076 4FF05003 			mov r3, #80												
 1809 007a 83F31188 		msr basepri, r3											
 1810 007e BFF36F8F 		isb														
 1811 0082 BFF34F8F 		dsb														
 1812              	
 1813              	@ 0 "" 2
 1814              		.thumb
 1815 0086 FB61     		str	r3, [r7, #28]
 1816              	.L126:
 1817              	.LBE132:
 1818              	.LBE131:
 1819              		.loc 1 1248 0 discriminator 3
 1820 0088 FEE7     		b	.L126
 1821              	.L125:
1249:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1250:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
1251:../../../FreeRTOS_9_0/Source/queue.c **** 
1252:../../../FreeRTOS_9_0/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:../../../FreeRTOS_9_0/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1254:../../../FreeRTOS_9_0/Source/queue.c **** 	of execution time efficiency. */
1255:../../../FreeRTOS_9_0/Source/queue.c **** 
1256:../../../FreeRTOS_9_0/Source/queue.c **** 	for( ;; )
1257:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1258:../../../FreeRTOS_9_0/Source/queue.c **** 		taskENTER_CRITICAL();
 1822              		.loc 1 1258 0
 1823 008a FFF7FEFF 		bl	vPortEnterCritical
 1824              	.LBB133:
1259:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1260:../../../FreeRTOS_9_0/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1825              		.loc 1 1260 0
 1826 008e 3B6B     		ldr	r3, [r7, #48]
 1827 0090 9B6B     		ldr	r3, [r3, #56]
 1828 0092 FB62     		str	r3, [r7, #44]
1261:../../../FreeRTOS_9_0/Source/queue.c **** 
1262:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:../../../FreeRTOS_9_0/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:../../../FreeRTOS_9_0/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1829              		.loc 1 1264 0
 1830 0094 FB6A     		ldr	r3, [r7, #44]
 1831 0096 002B     		cmp	r3, #0
 1832 0098 6AD0     		beq	.L127
1265:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1266:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1267:../../../FreeRTOS_9_0/Source/queue.c **** 				peeked. */
1268:../../../FreeRTOS_9_0/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1833              		.loc 1 1268 0
 1834 009a 3B6B     		ldr	r3, [r7, #48]
 1835 009c DB68     		ldr	r3, [r3, #12]
 1836 009e BB62     		str	r3, [r7, #40]
1269:../../../FreeRTOS_9_0/Source/queue.c **** 
1270:../../../FreeRTOS_9_0/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
ARM GAS  /tmp/ccWCEgX6.s 			page 60


 1837              		.loc 1 1270 0
 1838 00a0 386B     		ldr	r0, [r7, #48]
 1839 00a2 B968     		ldr	r1, [r7, #8]
 1840 00a4 FFF7FEFF 		bl	prvCopyDataFromQueue
1271:../../../FreeRTOS_9_0/Source/queue.c **** 
1272:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
 1841              		.loc 1 1272 0
 1842 00a8 3B68     		ldr	r3, [r7]
 1843 00aa 002B     		cmp	r3, #0
 1844 00ac 33D1     		bne	.L128
1273:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1274:../../../FreeRTOS_9_0/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
 1845              		.loc 1 1274 0
 1846 00ae 3B6B     		ldr	r3, [r7, #48]
 1847 00b0 1846     		mov	r0, r3
 1848 00b2 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1849 00b6 0546     		mov	r5, r0
 1850 00b8 BB68     		ldr	r3, [r7, #8]
 1851 00ba 1846     		mov	r0, r3
 1852 00bc FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1853 00c0 0246     		mov	r2, r0
 1854 00c2 7C68     		ldr	r4, [r7, #4]
 1855 00c4 3B68     		ldr	r3, [r7]
 1856 00c6 0093     		str	r3, [sp]
 1857 00c8 5C20     		movs	r0, #92
 1858 00ca 2946     		mov	r1, r5
 1859 00cc 2346     		mov	r3, r4
 1860 00ce FFF7FEFF 		bl	SYSVIEW_RecordU32x4
1275:../../../FreeRTOS_9_0/Source/queue.c **** 
1276:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1277:../../../FreeRTOS_9_0/Source/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1861              		.loc 1 1277 0
 1862 00d2 FB6A     		ldr	r3, [r7, #44]
 1863 00d4 5A1E     		subs	r2, r3, #1
 1864 00d6 3B6B     		ldr	r3, [r7, #48]
 1865 00d8 9A63     		str	r2, [r3, #56]
1278:../../../FreeRTOS_9_0/Source/queue.c **** 
1279:../../../FreeRTOS_9_0/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1281:../../../FreeRTOS_9_0/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1866              		.loc 1 1281 0
 1867 00da 3B6B     		ldr	r3, [r7, #48]
 1868 00dc 1B68     		ldr	r3, [r3]
 1869 00de 002B     		cmp	r3, #0
 1870 00e0 04D1     		bne	.L129
1282:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1283:../../../FreeRTOS_9_0/Source/queue.c **** 							/* Record the information required to implement
1284:../../../FreeRTOS_9_0/Source/queue.c **** 							priority inheritance should it become necessary. */
1285:../../../FreeRTOS_9_0/Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
 1871              		.loc 1 1285 0
 1872 00e2 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1873 00e6 0246     		mov	r2, r0
 1874 00e8 3B6B     		ldr	r3, [r7, #48]
 1875 00ea 5A60     		str	r2, [r3, #4]
 1876              	.L129:
1286:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1287:../../../FreeRTOS_9_0/Source/queue.c **** 						else
ARM GAS  /tmp/ccWCEgX6.s 			page 61


1288:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1289:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1291:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1292:../../../FreeRTOS_9_0/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:../../../FreeRTOS_9_0/Source/queue.c **** 
1294:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1877              		.loc 1 1294 0
 1878 00ec 3B6B     		ldr	r3, [r7, #48]
 1879 00ee 1B69     		ldr	r3, [r3, #16]
 1880 00f0 002B     		cmp	r3, #0
 1881 00f2 39D0     		beq	.L130
1295:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1296:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1882              		.loc 1 1296 0
 1883 00f4 3B6B     		ldr	r3, [r7, #48]
 1884 00f6 1033     		adds	r3, r3, #16
 1885 00f8 1846     		mov	r0, r3
 1886 00fa FFF7FEFF 		bl	xTaskRemoveFromEventList
 1887 00fe 0346     		mov	r3, r0
 1888 0100 002B     		cmp	r3, #0
 1889 0102 31D0     		beq	.L130
1297:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1298:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1890              		.loc 1 1298 0
 1891 0104 6C4B     		ldr	r3, .L142
 1892 0106 4FF08052 		mov	r2, #268435456
 1893 010a 1A60     		str	r2, [r3]
 1894              	@ 1298 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1895 010c BFF34F8F 		dsb
 1896              	@ 0 "" 2
 1897              	@ 1298 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1898 0110 BFF36F8F 		isb
 1899              	@ 0 "" 2
 1900              		.thumb
 1901 0114 28E0     		b	.L130
 1902              	.L128:
1299:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1300:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1301:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1302:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1304:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1305:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1306:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1307:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1309:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1310:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1311:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1312:../../../FreeRTOS_9_0/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
 1903              		.loc 1 1312 0
 1904 0116 3B6B     		ldr	r3, [r7, #48]
 1905 0118 1846     		mov	r0, r3
 1906 011a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1907 011e 0546     		mov	r5, r0
 1908 0120 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccWCEgX6.s 			page 62


 1909 0122 1846     		mov	r0, r3
 1910 0124 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1911 0128 0246     		mov	r2, r0
 1912 012a 7C68     		ldr	r4, [r7, #4]
 1913 012c 3B68     		ldr	r3, [r7]
 1914 012e 0093     		str	r3, [sp]
 1915 0130 5C20     		movs	r0, #92
 1916 0132 2946     		mov	r1, r5
 1917 0134 2346     		mov	r3, r4
 1918 0136 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
1313:../../../FreeRTOS_9_0/Source/queue.c **** 
1314:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The data is not being removed, so reset the read
1315:../../../FreeRTOS_9_0/Source/queue.c **** 					pointer. */
1316:../../../FreeRTOS_9_0/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1919              		.loc 1 1316 0
 1920 013a 3B6B     		ldr	r3, [r7, #48]
 1921 013c BA6A     		ldr	r2, [r7, #40]
 1922 013e DA60     		str	r2, [r3, #12]
1317:../../../FreeRTOS_9_0/Source/queue.c **** 
1318:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:../../../FreeRTOS_9_0/Source/queue.c **** 					any other tasks waiting for the data. */
1320:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1923              		.loc 1 1320 0
 1924 0140 3B6B     		ldr	r3, [r7, #48]
 1925 0142 5B6A     		ldr	r3, [r3, #36]
 1926 0144 002B     		cmp	r3, #0
 1927 0146 0FD0     		beq	.L130
1321:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1322:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1928              		.loc 1 1322 0
 1929 0148 3B6B     		ldr	r3, [r7, #48]
 1930 014a 2433     		adds	r3, r3, #36
 1931 014c 1846     		mov	r0, r3
 1932 014e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1933 0152 0346     		mov	r3, r0
 1934 0154 002B     		cmp	r3, #0
 1935 0156 07D0     		beq	.L130
1323:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1324:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1936              		.loc 1 1325 0
 1937 0158 574B     		ldr	r3, .L142
 1938 015a 4FF08052 		mov	r2, #268435456
 1939 015e 1A60     		str	r2, [r3]
 1940              	@ 1325 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1941 0160 BFF34F8F 		dsb
 1942              	@ 0 "" 2
 1943              	@ 1325 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1944 0164 BFF36F8F 		isb
 1945              	@ 0 "" 2
 1946              		.thumb
 1947              	.L130:
1326:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1327:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1328:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1329:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:../../../FreeRTOS_9_0/Source/queue.c **** 						}
ARM GAS  /tmp/ccWCEgX6.s 			page 63


1331:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1332:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1333:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1334:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1336:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1337:../../../FreeRTOS_9_0/Source/queue.c **** 
1338:../../../FreeRTOS_9_0/Source/queue.c **** 				taskEXIT_CRITICAL();
 1948              		.loc 1 1338 0
 1949 0168 FFF7FEFF 		bl	vPortExitCritical
1339:../../../FreeRTOS_9_0/Source/queue.c **** 				return pdPASS;
 1950              		.loc 1 1339 0
 1951 016c 0123     		movs	r3, #1
 1952 016e 9EE0     		b	.L141
 1953              	.L127:
1340:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1341:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1342:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1343:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1954              		.loc 1 1343 0
 1955 0170 7B68     		ldr	r3, [r7, #4]
 1956 0172 002B     		cmp	r3, #0
 1957 0174 15D1     		bne	.L132
1344:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1345:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:../../../FreeRTOS_9_0/Source/queue.c **** 					the block time has expired) so leave now. */
1347:../../../FreeRTOS_9_0/Source/queue.c **** 					taskEXIT_CRITICAL();
 1958              		.loc 1 1347 0
 1959 0176 FFF7FEFF 		bl	vPortExitCritical
1348:../../../FreeRTOS_9_0/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1960              		.loc 1 1348 0
 1961 017a 3B6B     		ldr	r3, [r7, #48]
 1962 017c 1846     		mov	r0, r3
 1963 017e FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1964 0182 0546     		mov	r5, r0
 1965 0184 BB68     		ldr	r3, [r7, #8]
 1966 0186 1846     		mov	r0, r3
 1967 0188 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1968 018c 0246     		mov	r2, r0
 1969 018e 7C68     		ldr	r4, [r7, #4]
 1970 0190 3B68     		ldr	r3, [r7]
 1971 0192 0093     		str	r3, [sp]
 1972 0194 5C20     		movs	r0, #92
 1973 0196 2946     		mov	r1, r5
 1974 0198 2346     		mov	r3, r4
 1975 019a FFF7FEFF 		bl	SYSVIEW_RecordU32x4
1349:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_EMPTY;
 1976              		.loc 1 1349 0
 1977 019e 0023     		movs	r3, #0
 1978 01a0 85E0     		b	.L141
 1979              	.L132:
1350:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1351:../../../FreeRTOS_9_0/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1980              		.loc 1 1351 0
 1981 01a2 7B6B     		ldr	r3, [r7, #52]
 1982 01a4 002B     		cmp	r3, #0
 1983 01a6 06D1     		bne	.L133
ARM GAS  /tmp/ccWCEgX6.s 			page 64


1352:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1353:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1354:../../../FreeRTOS_9_0/Source/queue.c **** 					configure the timeout structure. */
1355:../../../FreeRTOS_9_0/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 1984              		.loc 1 1355 0
 1985 01a8 07F11403 		add	r3, r7, #20
 1986 01ac 1846     		mov	r0, r3
 1987 01ae FFF7FEFF 		bl	vTaskSetTimeOutState
1356:../../../FreeRTOS_9_0/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1988              		.loc 1 1356 0
 1989 01b2 0123     		movs	r3, #1
 1990 01b4 7B63     		str	r3, [r7, #52]
 1991              	.L133:
 1992              	.LBE133:
1357:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1358:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1359:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1360:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Entry time was already set. */
1361:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1363:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1364:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1365:../../../FreeRTOS_9_0/Source/queue.c **** 		taskEXIT_CRITICAL();
 1993              		.loc 1 1365 0
 1994 01b6 FFF7FEFF 		bl	vPortExitCritical
1366:../../../FreeRTOS_9_0/Source/queue.c **** 
1367:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:../../../FreeRTOS_9_0/Source/queue.c **** 		now the critical section has been exited. */
1369:../../../FreeRTOS_9_0/Source/queue.c **** 
1370:../../../FreeRTOS_9_0/Source/queue.c **** 		vTaskSuspendAll();
 1995              		.loc 1 1370 0
 1996 01ba FFF7FEFF 		bl	vTaskSuspendAll
1371:../../../FreeRTOS_9_0/Source/queue.c **** 		prvLockQueue( pxQueue );
 1997              		.loc 1 1371 0
 1998 01be FFF7FEFF 		bl	vPortEnterCritical
 1999 01c2 3B6B     		ldr	r3, [r7, #48]
 2000 01c4 93F84430 		ldrb	r3, [r3, #68]
 2001 01c8 DBB2     		uxtb	r3, r3
 2002 01ca 5BB2     		sxtb	r3, r3
 2003 01cc B3F1FF3F 		cmp	r3, #-1
 2004 01d0 03D1     		bne	.L134
 2005              		.loc 1 1371 0 is_stmt 0 discriminator 1
 2006 01d2 3B6B     		ldr	r3, [r7, #48]
 2007 01d4 0022     		movs	r2, #0
 2008 01d6 83F84420 		strb	r2, [r3, #68]
 2009              	.L134:
 2010              		.loc 1 1371 0 discriminator 3
 2011 01da 3B6B     		ldr	r3, [r7, #48]
 2012 01dc 93F84530 		ldrb	r3, [r3, #69]
 2013 01e0 DBB2     		uxtb	r3, r3
 2014 01e2 5BB2     		sxtb	r3, r3
 2015 01e4 B3F1FF3F 		cmp	r3, #-1
 2016 01e8 03D1     		bne	.L135
 2017              		.loc 1 1371 0 discriminator 4
 2018 01ea 3B6B     		ldr	r3, [r7, #48]
 2019 01ec 0022     		movs	r2, #0
 2020 01ee 83F84520 		strb	r2, [r3, #69]
ARM GAS  /tmp/ccWCEgX6.s 			page 65


 2021              	.L135:
 2022              		.loc 1 1371 0 discriminator 6
 2023 01f2 FFF7FEFF 		bl	vPortExitCritical
1372:../../../FreeRTOS_9_0/Source/queue.c **** 
1373:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2024              		.loc 1 1374 0 is_stmt 1 discriminator 6
 2025 01f6 07F11402 		add	r2, r7, #20
 2026 01fa 3B1D     		adds	r3, r7, #4
 2027 01fc 1046     		mov	r0, r2
 2028 01fe 1946     		mov	r1, r3
 2029 0200 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2030 0204 0346     		mov	r3, r0
 2031 0206 002B     		cmp	r3, #0
 2032 0208 31D1     		bne	.L136
1375:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1376:../../../FreeRTOS_9_0/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2033              		.loc 1 1376 0
 2034 020a 386B     		ldr	r0, [r7, #48]
 2035 020c FFF7FEFF 		bl	prvIsQueueEmpty
 2036 0210 0346     		mov	r3, r0
 2037 0212 002B     		cmp	r3, #0
 2038 0214 25D0     		beq	.L137
1377:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1378:../../../FreeRTOS_9_0/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:../../../FreeRTOS_9_0/Source/queue.c **** 
1380:../../../FreeRTOS_9_0/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1382:../../../FreeRTOS_9_0/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2039              		.loc 1 1382 0
 2040 0216 3B6B     		ldr	r3, [r7, #48]
 2041 0218 1B68     		ldr	r3, [r3]
 2042 021a 002B     		cmp	r3, #0
 2043 021c 08D1     		bne	.L138
1383:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1384:../../../FreeRTOS_9_0/Source/queue.c **** 						taskENTER_CRITICAL();
 2044              		.loc 1 1384 0
 2045 021e FFF7FEFF 		bl	vPortEnterCritical
1385:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1386:../../../FreeRTOS_9_0/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 2046              		.loc 1 1386 0
 2047 0222 3B6B     		ldr	r3, [r7, #48]
 2048 0224 5B68     		ldr	r3, [r3, #4]
 2049 0226 1846     		mov	r0, r3
 2050 0228 FFF7FEFF 		bl	vTaskPriorityInherit
1387:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1388:../../../FreeRTOS_9_0/Source/queue.c **** 						taskEXIT_CRITICAL();
 2051              		.loc 1 1388 0
 2052 022c FFF7FEFF 		bl	vPortExitCritical
 2053              	.L138:
1389:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1390:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1391:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1392:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1394:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1395:../../../FreeRTOS_9_0/Source/queue.c **** 				#endif
ARM GAS  /tmp/ccWCEgX6.s 			page 66


1396:../../../FreeRTOS_9_0/Source/queue.c **** 
1397:../../../FreeRTOS_9_0/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2054              		.loc 1 1397 0
 2055 0230 3B6B     		ldr	r3, [r7, #48]
 2056 0232 03F12402 		add	r2, r3, #36
 2057 0236 7B68     		ldr	r3, [r7, #4]
 2058 0238 1046     		mov	r0, r2
 2059 023a 1946     		mov	r1, r3
 2060 023c FFF7FEFF 		bl	vTaskPlaceOnEventList
1398:../../../FreeRTOS_9_0/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2061              		.loc 1 1398 0
 2062 0240 386B     		ldr	r0, [r7, #48]
 2063 0242 FFF7FEFF 		bl	prvUnlockQueue
1399:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2064              		.loc 1 1399 0
 2065 0246 FFF7FEFF 		bl	xTaskResumeAll
 2066 024a 0346     		mov	r3, r0
 2067 024c 002B     		cmp	r3, #0
 2068 024e 2DD1     		bne	.L140
1400:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1401:../../../FreeRTOS_9_0/Source/queue.c **** 					portYIELD_WITHIN_API();
 2069              		.loc 1 1401 0
 2070 0250 194B     		ldr	r3, .L142
 2071 0252 4FF08052 		mov	r2, #268435456
 2072 0256 1A60     		str	r2, [r3]
 2073              	@ 1401 "../../../FreeRTOS_9_0/Source/queue.c" 1
 2074 0258 BFF34F8F 		dsb
 2075              	@ 0 "" 2
 2076              	@ 1401 "../../../FreeRTOS_9_0/Source/queue.c" 1
 2077 025c BFF36F8F 		isb
 2078              	@ 0 "" 2
 2079              		.thumb
 2080 0260 24E0     		b	.L140
 2081              	.L137:
1402:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1403:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1404:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1405:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1407:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1408:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1409:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1410:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Try again. */
1411:../../../FreeRTOS_9_0/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2082              		.loc 1 1411 0
 2083 0262 386B     		ldr	r0, [r7, #48]
 2084 0264 FFF7FEFF 		bl	prvUnlockQueue
1412:../../../FreeRTOS_9_0/Source/queue.c **** 				( void ) xTaskResumeAll();
 2085              		.loc 1 1412 0
 2086 0268 FFF7FEFF 		bl	xTaskResumeAll
 2087 026c 0DE7     		b	.L125
 2088              	.L136:
1413:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1414:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1415:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1416:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1417:../../../FreeRTOS_9_0/Source/queue.c **** 			prvUnlockQueue( pxQueue );
ARM GAS  /tmp/ccWCEgX6.s 			page 67


 2089              		.loc 1 1417 0
 2090 026e 386B     		ldr	r0, [r7, #48]
 2091 0270 FFF7FEFF 		bl	prvUnlockQueue
1418:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) xTaskResumeAll();
 2092              		.loc 1 1418 0
 2093 0274 FFF7FEFF 		bl	xTaskResumeAll
1419:../../../FreeRTOS_9_0/Source/queue.c **** 
1420:../../../FreeRTOS_9_0/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2094              		.loc 1 1420 0
 2095 0278 386B     		ldr	r0, [r7, #48]
 2096 027a FFF7FEFF 		bl	prvIsQueueEmpty
 2097 027e 0346     		mov	r3, r0
 2098 0280 002B     		cmp	r3, #0
 2099 0282 13D0     		beq	.L140
1421:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1422:../../../FreeRTOS_9_0/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
 2100              		.loc 1 1422 0
 2101 0284 3B6B     		ldr	r3, [r7, #48]
 2102 0286 1846     		mov	r0, r3
 2103 0288 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2104 028c 0546     		mov	r5, r0
 2105 028e BB68     		ldr	r3, [r7, #8]
 2106 0290 1846     		mov	r0, r3
 2107 0292 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2108 0296 0246     		mov	r2, r0
 2109 0298 7C68     		ldr	r4, [r7, #4]
 2110 029a 3B68     		ldr	r3, [r7]
 2111 029c 0093     		str	r3, [sp]
 2112 029e 5C20     		movs	r0, #92
 2113 02a0 2946     		mov	r1, r5
 2114 02a2 2346     		mov	r3, r4
 2115 02a4 FFF7FEFF 		bl	SYSVIEW_RecordU32x4
1423:../../../FreeRTOS_9_0/Source/queue.c **** 				return errQUEUE_EMPTY;
 2116              		.loc 1 1423 0
 2117 02a8 0023     		movs	r3, #0
 2118 02aa 00E0     		b	.L141
 2119              	.L140:
1424:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1425:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1426:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1427:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1429:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1430:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 2120              		.loc 1 1430 0 discriminator 6
 2121 02ac EDE6     		b	.L125
 2122              	.L141:
1431:../../../FreeRTOS_9_0/Source/queue.c **** }
 2123              		.loc 1 1431 0 discriminator 7
 2124 02ae 1846     		mov	r0, r3
 2125 02b0 3837     		adds	r7, r7, #56
 2126              	.LCFI58:
 2127              		.cfi_def_cfa_offset 16
 2128 02b2 BD46     		mov	sp, r7
 2129              	.LCFI59:
 2130              		.cfi_def_cfa_register 13
 2131              		@ sp needed
ARM GAS  /tmp/ccWCEgX6.s 			page 68


 2132 02b4 B0BD     		pop	{r4, r5, r7, pc}
 2133              	.L143:
 2134 02b6 00BF     		.align	2
 2135              	.L142:
 2136 02b8 04ED00E0 		.word	-536810236
 2137              		.cfi_endproc
 2138              	.LFE16:
 2140              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2141              		.align	2
 2142              		.global	xQueueReceiveFromISR
 2143              		.thumb
 2144              		.thumb_func
 2146              	xQueueReceiveFromISR:
 2147              	.LFB17:
1432:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1433:../../../FreeRTOS_9_0/Source/queue.c **** 
1434:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:../../../FreeRTOS_9_0/Source/queue.c **** {
 2148              		.loc 1 1435 0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 56
 2151              		@ frame_needed = 1, uses_anonymous_args = 0
 2152 0000 90B5     		push	{r4, r7, lr}
 2153              	.LCFI60:
 2154              		.cfi_def_cfa_offset 12
 2155              		.cfi_offset 4, -12
 2156              		.cfi_offset 7, -8
 2157              		.cfi_offset 14, -4
 2158 0002 8FB0     		sub	sp, sp, #60
 2159              	.LCFI61:
 2160              		.cfi_def_cfa_offset 72
 2161 0004 00AF     		add	r7, sp, #0
 2162              	.LCFI62:
 2163              		.cfi_def_cfa_register 7
 2164 0006 F860     		str	r0, [r7, #12]
 2165 0008 B960     		str	r1, [r7, #8]
 2166 000a 7A60     		str	r2, [r7, #4]
1436:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1437:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2167              		.loc 1 1438 0
 2168 000c FB68     		ldr	r3, [r7, #12]
 2169 000e 3B63     		str	r3, [r7, #48]
1439:../../../FreeRTOS_9_0/Source/queue.c **** 
1440:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 2170              		.loc 1 1440 0
 2171 0010 3B6B     		ldr	r3, [r7, #48]
 2172 0012 002B     		cmp	r3, #0
 2173 0014 09D1     		bne	.L145
 2174              	.LBB134:
 2175              	.LBB135:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2176              		.loc 2 237 0 discriminator 1
 2177              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2178 0016 4FF05003 			mov r3, #80												
 2179 001a 83F31188 		msr basepri, r3											
 2180 001e BFF36F8F 		isb														
ARM GAS  /tmp/ccWCEgX6.s 			page 69


 2181 0022 BFF34F8F 		dsb														
 2182              	
 2183              	@ 0 "" 2
 2184              		.thumb
 2185 0026 3B62     		str	r3, [r7, #32]
 2186              	.L146:
 2187              	.LBE135:
 2188              	.LBE134:
 2189              		.loc 1 1440 0 discriminator 1
 2190 0028 FEE7     		b	.L146
 2191              	.L145:
1441:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2192              		.loc 1 1441 0
 2193 002a BB68     		ldr	r3, [r7, #8]
 2194 002c 002B     		cmp	r3, #0
 2195 002e 03D1     		bne	.L147
 2196              		.loc 1 1441 0 is_stmt 0 discriminator 2
 2197 0030 3B6B     		ldr	r3, [r7, #48]
 2198 0032 1B6C     		ldr	r3, [r3, #64]
 2199 0034 002B     		cmp	r3, #0
 2200 0036 01D1     		bne	.L148
 2201              	.L147:
 2202              		.loc 1 1441 0 discriminator 3
 2203 0038 0123     		movs	r3, #1
 2204 003a 00E0     		b	.L149
 2205              	.L148:
 2206              		.loc 1 1441 0 discriminator 4
 2207 003c 0023     		movs	r3, #0
 2208              	.L149:
 2209              		.loc 1 1441 0 discriminator 6
 2210 003e 002B     		cmp	r3, #0
 2211 0040 09D1     		bne	.L150
 2212              	.LBB136:
 2213              	.LBB137:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2214              		.loc 2 237 0 is_stmt 1 discriminator 7
 2215              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2216 0042 4FF05003 			mov r3, #80												
 2217 0046 83F31188 		msr basepri, r3											
 2218 004a BFF36F8F 		isb														
 2219 004e BFF34F8F 		dsb														
 2220              	
 2221              	@ 0 "" 2
 2222              		.thumb
 2223 0052 FB61     		str	r3, [r7, #28]
 2224              	.L151:
 2225              	.LBE137:
 2226              	.LBE136:
 2227              		.loc 1 1441 0 discriminator 2
 2228 0054 FEE7     		b	.L151
 2229              	.L150:
1442:../../../FreeRTOS_9_0/Source/queue.c **** 
1443:../../../FreeRTOS_9_0/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:../../../FreeRTOS_9_0/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:../../../FreeRTOS_9_0/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:../../../FreeRTOS_9_0/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:../../../FreeRTOS_9_0/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
ARM GAS  /tmp/ccWCEgX6.s 			page 70


1448:../../../FreeRTOS_9_0/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:../../../FreeRTOS_9_0/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:../../../FreeRTOS_9_0/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:../../../FreeRTOS_9_0/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:../../../FreeRTOS_9_0/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:../../../FreeRTOS_9_0/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:../../../FreeRTOS_9_0/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:../../../FreeRTOS_9_0/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:../../../FreeRTOS_9_0/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:../../../FreeRTOS_9_0/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2230              		.loc 1 1457 0
 2231 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2232              	.LBB138:
 2233              	.LBB139:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2234              		.loc 2 253 0
 2235              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2236 005a EFF31182 			mrs r2, basepri											
 2237 005e 4FF05003 		mov r3, #80												
 2238 0062 83F31188 		msr basepri, r3											
 2239 0066 BFF36F8F 		isb														
 2240 006a BFF34F8F 		dsb														
 2241              	
 2242              	@ 0 "" 2
 2243              		.thumb
 2244 006e BA61     		str	r2, [r7, #24]
 2245 0070 7B61     		str	r3, [r7, #20]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2246              		.loc 2 265 0
 2247 0072 BB69     		ldr	r3, [r7, #24]
 2248              	.LBE139:
 2249              	.LBE138:
1458:../../../FreeRTOS_9_0/Source/queue.c **** 
1459:../../../FreeRTOS_9_0/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2250              		.loc 1 1459 0
 2251 0074 FB62     		str	r3, [r7, #44]
 2252              	.LBB140:
1460:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1461:../../../FreeRTOS_9_0/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2253              		.loc 1 1461 0
 2254 0076 3B6B     		ldr	r3, [r7, #48]
 2255 0078 9B6B     		ldr	r3, [r3, #56]
 2256 007a BB62     		str	r3, [r7, #40]
1462:../../../FreeRTOS_9_0/Source/queue.c **** 
1463:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:../../../FreeRTOS_9_0/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2257              		.loc 1 1464 0
 2258 007c BB6A     		ldr	r3, [r7, #40]
 2259 007e 002B     		cmp	r3, #0
 2260 0080 3ED0     		beq	.L153
 2261              	.LBB141:
1465:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1466:../../../FreeRTOS_9_0/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
 2262              		.loc 1 1466 0
 2263 0082 3B6B     		ldr	r3, [r7, #48]
 2264 0084 93F84430 		ldrb	r3, [r3, #68]
 2265 0088 87F82730 		strb	r3, [r7, #39]
ARM GAS  /tmp/ccWCEgX6.s 			page 71


1467:../../../FreeRTOS_9_0/Source/queue.c **** 
1468:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 2266              		.loc 1 1468 0
 2267 008c 3B6B     		ldr	r3, [r7, #48]
 2268 008e 1846     		mov	r0, r3
 2269 0090 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2270 0094 0446     		mov	r4, r0
 2271 0096 BB68     		ldr	r3, [r7, #8]
 2272 0098 1846     		mov	r0, r3
 2273 009a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2274 009e 0246     		mov	r2, r0
 2275 00a0 7B68     		ldr	r3, [r7, #4]
 2276 00a2 6220     		movs	r0, #98
 2277 00a4 2146     		mov	r1, r4
 2278 00a6 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
1469:../../../FreeRTOS_9_0/Source/queue.c **** 
1470:../../../FreeRTOS_9_0/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2279              		.loc 1 1470 0
 2280 00aa 386B     		ldr	r0, [r7, #48]
 2281 00ac B968     		ldr	r1, [r7, #8]
 2282 00ae FFF7FEFF 		bl	prvCopyDataFromQueue
1471:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 2283              		.loc 1 1471 0
 2284 00b2 BB6A     		ldr	r3, [r7, #40]
 2285 00b4 5A1E     		subs	r2, r3, #1
 2286 00b6 3B6B     		ldr	r3, [r7, #48]
 2287 00b8 9A63     		str	r2, [r3, #56]
1472:../../../FreeRTOS_9_0/Source/queue.c **** 
1473:../../../FreeRTOS_9_0/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:../../../FreeRTOS_9_0/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:../../../FreeRTOS_9_0/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1476:../../../FreeRTOS_9_0/Source/queue.c **** 			locked. */
1477:../../../FreeRTOS_9_0/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
 2288              		.loc 1 1477 0
 2289 00ba 97F92730 		ldrsb	r3, [r7, #39]
 2290 00be B3F1FF3F 		cmp	r3, #-1
 2291 00c2 12D1     		bne	.L154
1478:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1479:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2292              		.loc 1 1479 0
 2293 00c4 3B6B     		ldr	r3, [r7, #48]
 2294 00c6 1B69     		ldr	r3, [r3, #16]
 2295 00c8 002B     		cmp	r3, #0
 2296 00ca 16D0     		beq	.L155
1480:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1481:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2297              		.loc 1 1481 0
 2298 00cc 3B6B     		ldr	r3, [r7, #48]
 2299 00ce 1033     		adds	r3, r3, #16
 2300 00d0 1846     		mov	r0, r3
 2301 00d2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2302 00d6 0346     		mov	r3, r0
 2303 00d8 002B     		cmp	r3, #0
 2304 00da 0ED0     		beq	.L155
1482:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1483:../../../FreeRTOS_9_0/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1484:../../../FreeRTOS_9_0/Source/queue.c **** 						force a context switch. */
ARM GAS  /tmp/ccWCEgX6.s 			page 72


1485:../../../FreeRTOS_9_0/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 2305              		.loc 1 1485 0
 2306 00dc 7B68     		ldr	r3, [r7, #4]
 2307 00de 002B     		cmp	r3, #0
 2308 00e0 0BD0     		beq	.L155
1486:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1487:../../../FreeRTOS_9_0/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 2309              		.loc 1 1487 0
 2310 00e2 7B68     		ldr	r3, [r7, #4]
 2311 00e4 0122     		movs	r2, #1
 2312 00e6 1A60     		str	r2, [r3]
 2313 00e8 07E0     		b	.L155
 2314              	.L154:
1488:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1489:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1490:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1491:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1493:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1494:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1495:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1496:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1498:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1499:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1500:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1501:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1503:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1504:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1505:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1506:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:../../../FreeRTOS_9_0/Source/queue.c **** 				knows that data was removed while it was locked. */
1508:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 2315              		.loc 1 1508 0
 2316 00ea 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2317 00ee 0133     		adds	r3, r3, #1
 2318 00f0 DBB2     		uxtb	r3, r3
 2319 00f2 DAB2     		uxtb	r2, r3
 2320 00f4 3B6B     		ldr	r3, [r7, #48]
 2321 00f6 83F84420 		strb	r2, [r3, #68]
 2322              	.L155:
1509:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1510:../../../FreeRTOS_9_0/Source/queue.c **** 
1511:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 2323              		.loc 1 1511 0
 2324 00fa 0123     		movs	r3, #1
 2325 00fc 7B63     		str	r3, [r7, #52]
 2326              	.LBE141:
 2327 00fe 10E0     		b	.L156
 2328              	.L153:
1512:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1513:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1514:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1515:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFAIL;
 2329              		.loc 1 1515 0
 2330 0100 0023     		movs	r3, #0
ARM GAS  /tmp/ccWCEgX6.s 			page 73


 2331 0102 7B63     		str	r3, [r7, #52]
1516:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2332              		.loc 1 1516 0
 2333 0104 3B6B     		ldr	r3, [r7, #48]
 2334 0106 1846     		mov	r0, r3
 2335 0108 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2336 010c 0446     		mov	r4, r0
 2337 010e BB68     		ldr	r3, [r7, #8]
 2338 0110 1846     		mov	r0, r3
 2339 0112 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2340 0116 0246     		mov	r2, r0
 2341 0118 7B68     		ldr	r3, [r7, #4]
 2342 011a 6220     		movs	r0, #98
 2343 011c 2146     		mov	r1, r4
 2344 011e FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
 2345              	.L156:
 2346 0122 FB6A     		ldr	r3, [r7, #44]
 2347 0124 3B61     		str	r3, [r7, #16]
 2348              	.LBE140:
 2349              	.LBB142:
 2350              	.LBB143:
 2351              		.loc 2 271 0
 2352 0126 3B69     		ldr	r3, [r7, #16]
 2353              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2354 0128 83F31188 			msr basepri, r3	
 2355              	@ 0 "" 2
 2356              		.thumb
 2357              	.LBE143:
 2358              	.LBE142:
1517:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1518:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1519:../../../FreeRTOS_9_0/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:../../../FreeRTOS_9_0/Source/queue.c **** 
1521:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 2359              		.loc 1 1521 0
 2360 012c 7B6B     		ldr	r3, [r7, #52]
1522:../../../FreeRTOS_9_0/Source/queue.c **** }
 2361              		.loc 1 1522 0
 2362 012e 1846     		mov	r0, r3
 2363 0130 3C37     		adds	r7, r7, #60
 2364              	.LCFI63:
 2365              		.cfi_def_cfa_offset 12
 2366 0132 BD46     		mov	sp, r7
 2367              	.LCFI64:
 2368              		.cfi_def_cfa_register 13
 2369              		@ sp needed
 2370 0134 90BD     		pop	{r4, r7, pc}
 2371              		.cfi_endproc
 2372              	.LFE17:
 2374 0136 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2375              		.align	2
 2376              		.global	xQueuePeekFromISR
 2377              		.thumb
 2378              		.thumb_func
 2380              	xQueuePeekFromISR:
 2381              	.LFB18:
1523:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccWCEgX6.s 			page 74


1524:../../../FreeRTOS_9_0/Source/queue.c **** 
1525:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:../../../FreeRTOS_9_0/Source/queue.c **** {
 2382              		.loc 1 1526 0
 2383              		.cfi_startproc
 2384              		@ args = 0, pretend = 0, frame = 48
 2385              		@ frame_needed = 1, uses_anonymous_args = 0
 2386 0000 90B5     		push	{r4, r7, lr}
 2387              	.LCFI65:
 2388              		.cfi_def_cfa_offset 12
 2389              		.cfi_offset 4, -12
 2390              		.cfi_offset 7, -8
 2391              		.cfi_offset 14, -4
 2392 0002 8DB0     		sub	sp, sp, #52
 2393              	.LCFI66:
 2394              		.cfi_def_cfa_offset 64
 2395 0004 00AF     		add	r7, sp, #0
 2396              	.LCFI67:
 2397              		.cfi_def_cfa_register 7
 2398 0006 7860     		str	r0, [r7, #4]
 2399 0008 3960     		str	r1, [r7]
1527:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1528:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:../../../FreeRTOS_9_0/Source/queue.c **** int8_t *pcOriginalReadPosition;
1530:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2400              		.loc 1 1530 0
 2401 000a 7B68     		ldr	r3, [r7, #4]
 2402 000c BB62     		str	r3, [r7, #40]
1531:../../../FreeRTOS_9_0/Source/queue.c **** 
1532:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 2403              		.loc 1 1532 0
 2404 000e BB6A     		ldr	r3, [r7, #40]
 2405 0010 002B     		cmp	r3, #0
 2406 0012 09D1     		bne	.L159
 2407              	.LBB144:
 2408              	.LBB145:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2409              		.loc 2 237 0 discriminator 1
 2410              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2411 0014 4FF05003 			mov r3, #80												
 2412 0018 83F31188 		msr basepri, r3											
 2413 001c BFF36F8F 		isb														
 2414 0020 BFF34F8F 		dsb														
 2415              	
 2416              	@ 0 "" 2
 2417              		.thumb
 2418 0024 FB61     		str	r3, [r7, #28]
 2419              	.L160:
 2420              	.LBE145:
 2421              	.LBE144:
 2422              		.loc 1 1532 0 discriminator 1
 2423 0026 FEE7     		b	.L160
 2424              	.L159:
1533:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2425              		.loc 1 1533 0
 2426 0028 3B68     		ldr	r3, [r7]
 2427 002a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccWCEgX6.s 			page 75


 2428 002c 03D1     		bne	.L161
 2429              		.loc 1 1533 0 is_stmt 0 discriminator 2
 2430 002e BB6A     		ldr	r3, [r7, #40]
 2431 0030 1B6C     		ldr	r3, [r3, #64]
 2432 0032 002B     		cmp	r3, #0
 2433 0034 01D1     		bne	.L162
 2434              	.L161:
 2435              		.loc 1 1533 0 discriminator 3
 2436 0036 0123     		movs	r3, #1
 2437 0038 00E0     		b	.L163
 2438              	.L162:
 2439              		.loc 1 1533 0 discriminator 4
 2440 003a 0023     		movs	r3, #0
 2441              	.L163:
 2442              		.loc 1 1533 0 discriminator 6
 2443 003c 002B     		cmp	r3, #0
 2444 003e 09D1     		bne	.L164
 2445              	.LBB146:
 2446              	.LBB147:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2447              		.loc 2 237 0 is_stmt 1 discriminator 7
 2448              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2449 0040 4FF05003 			mov r3, #80												
 2450 0044 83F31188 		msr basepri, r3											
 2451 0048 BFF36F8F 		isb														
 2452 004c BFF34F8F 		dsb														
 2453              	
 2454              	@ 0 "" 2
 2455              		.thumb
 2456 0050 BB61     		str	r3, [r7, #24]
 2457              	.L165:
 2458              	.LBE147:
 2459              	.LBE146:
 2460              		.loc 1 1533 0 discriminator 2
 2461 0052 FEE7     		b	.L165
 2462              	.L164:
1534:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2463              		.loc 1 1534 0
 2464 0054 BB6A     		ldr	r3, [r7, #40]
 2465 0056 1B6C     		ldr	r3, [r3, #64]
 2466 0058 002B     		cmp	r3, #0
 2467 005a 09D1     		bne	.L166
 2468              	.LBB148:
 2469              	.LBB149:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2470              		.loc 2 237 0 discriminator 1
 2471              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2472 005c 4FF05003 			mov r3, #80												
 2473 0060 83F31188 		msr basepri, r3											
 2474 0064 BFF36F8F 		isb														
 2475 0068 BFF34F8F 		dsb														
 2476              	
 2477              	@ 0 "" 2
 2478              		.thumb
 2479 006c 7B61     		str	r3, [r7, #20]
 2480              	.L167:
 2481              	.LBE149:
ARM GAS  /tmp/ccWCEgX6.s 			page 76


 2482              	.LBE148:
 2483              		.loc 1 1534 0 discriminator 3
 2484 006e FEE7     		b	.L167
 2485              	.L166:
1535:../../../FreeRTOS_9_0/Source/queue.c **** 
1536:../../../FreeRTOS_9_0/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:../../../FreeRTOS_9_0/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:../../../FreeRTOS_9_0/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:../../../FreeRTOS_9_0/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:../../../FreeRTOS_9_0/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:../../../FreeRTOS_9_0/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:../../../FreeRTOS_9_0/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:../../../FreeRTOS_9_0/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:../../../FreeRTOS_9_0/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:../../../FreeRTOS_9_0/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:../../../FreeRTOS_9_0/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:../../../FreeRTOS_9_0/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:../../../FreeRTOS_9_0/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:../../../FreeRTOS_9_0/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:../../../FreeRTOS_9_0/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2486              		.loc 1 1550 0
 2487 0070 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2488              	.LBB150:
 2489              	.LBB151:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2490              		.loc 2 253 0
 2491              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2492 0074 EFF31182 			mrs r2, basepri											
 2493 0078 4FF05003 		mov r3, #80												
 2494 007c 83F31188 		msr basepri, r3											
 2495 0080 BFF36F8F 		isb														
 2496 0084 BFF34F8F 		dsb														
 2497              	
 2498              	@ 0 "" 2
 2499              		.thumb
 2500 0088 3A61     		str	r2, [r7, #16]
 2501 008a FB60     		str	r3, [r7, #12]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2502              		.loc 2 265 0
 2503 008c 3B69     		ldr	r3, [r7, #16]
 2504              	.LBE151:
 2505              	.LBE150:
1551:../../../FreeRTOS_9_0/Source/queue.c **** 
1552:../../../FreeRTOS_9_0/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2506              		.loc 1 1552 0
 2507 008e 7B62     		str	r3, [r7, #36]
1553:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1554:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 2508              		.loc 1 1555 0
 2509 0090 BB6A     		ldr	r3, [r7, #40]
 2510 0092 9B6B     		ldr	r3, [r3, #56]
 2511 0094 002B     		cmp	r3, #0
 2512 0096 1BD0     		beq	.L169
1556:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1557:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
 2513              		.loc 1 1557 0
ARM GAS  /tmp/ccWCEgX6.s 			page 77


 2514 0098 BB6A     		ldr	r3, [r7, #40]
 2515 009a 1846     		mov	r0, r3
 2516 009c FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2517 00a0 0446     		mov	r4, r0
 2518 00a2 3B68     		ldr	r3, [r7]
 2519 00a4 1846     		mov	r0, r3
 2520 00a6 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2521 00aa 0346     		mov	r3, r0
 2522 00ac 5B20     		movs	r0, #91
 2523 00ae 2146     		mov	r1, r4
 2524 00b0 1A46     		mov	r2, r3
 2525 00b2 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
1558:../../../FreeRTOS_9_0/Source/queue.c **** 
1559:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:../../../FreeRTOS_9_0/Source/queue.c **** 			actually being removed from the queue. */
1561:../../../FreeRTOS_9_0/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 2526              		.loc 1 1561 0
 2527 00b6 BB6A     		ldr	r3, [r7, #40]
 2528 00b8 DB68     		ldr	r3, [r3, #12]
 2529 00ba 3B62     		str	r3, [r7, #32]
1562:../../../FreeRTOS_9_0/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2530              		.loc 1 1562 0
 2531 00bc B86A     		ldr	r0, [r7, #40]
 2532 00be 3968     		ldr	r1, [r7]
 2533 00c0 FFF7FEFF 		bl	prvCopyDataFromQueue
1563:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2534              		.loc 1 1563 0
 2535 00c4 BB6A     		ldr	r3, [r7, #40]
 2536 00c6 3A6A     		ldr	r2, [r7, #32]
 2537 00c8 DA60     		str	r2, [r3, #12]
1564:../../../FreeRTOS_9_0/Source/queue.c **** 
1565:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 2538              		.loc 1 1565 0
 2539 00ca 0123     		movs	r3, #1
 2540 00cc FB62     		str	r3, [r7, #44]
 2541 00ce 10E0     		b	.L170
 2542              	.L169:
1566:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1567:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1568:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1569:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFAIL;
 2543              		.loc 1 1569 0
 2544 00d0 0023     		movs	r3, #0
 2545 00d2 FB62     		str	r3, [r7, #44]
1570:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2546              		.loc 1 1570 0
 2547 00d4 BB6A     		ldr	r3, [r7, #40]
 2548 00d6 1846     		mov	r0, r3
 2549 00d8 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2550 00dc 0446     		mov	r4, r0
 2551 00de 3B68     		ldr	r3, [r7]
 2552 00e0 1846     		mov	r0, r3
 2553 00e2 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2554 00e6 0346     		mov	r3, r0
 2555 00e8 5B20     		movs	r0, #91
 2556 00ea 2146     		mov	r1, r4
 2557 00ec 1A46     		mov	r2, r3
ARM GAS  /tmp/ccWCEgX6.s 			page 78


 2558 00ee FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 2559              	.L170:
 2560 00f2 7B6A     		ldr	r3, [r7, #36]
 2561 00f4 BB60     		str	r3, [r7, #8]
 2562              	.LBB152:
 2563              	.LBB153:
 2564              		.loc 2 271 0
 2565 00f6 BB68     		ldr	r3, [r7, #8]
 2566              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2567 00f8 83F31188 			msr basepri, r3	
 2568              	@ 0 "" 2
 2569              		.thumb
 2570              	.LBE153:
 2571              	.LBE152:
1571:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1572:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1573:../../../FreeRTOS_9_0/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:../../../FreeRTOS_9_0/Source/queue.c **** 
1575:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 2572              		.loc 1 1575 0
 2573 00fc FB6A     		ldr	r3, [r7, #44]
1576:../../../FreeRTOS_9_0/Source/queue.c **** }
 2574              		.loc 1 1576 0
 2575 00fe 1846     		mov	r0, r3
 2576 0100 3437     		adds	r7, r7, #52
 2577              	.LCFI68:
 2578              		.cfi_def_cfa_offset 12
 2579 0102 BD46     		mov	sp, r7
 2580              	.LCFI69:
 2581              		.cfi_def_cfa_register 13
 2582              		@ sp needed
 2583 0104 90BD     		pop	{r4, r7, pc}
 2584              		.cfi_endproc
 2585              	.LFE18:
 2587 0106 00BF     		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2588              		.align	2
 2589              		.global	uxQueueMessagesWaiting
 2590              		.thumb
 2591              		.thumb_func
 2593              	uxQueueMessagesWaiting:
 2594              	.LFB19:
1577:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1578:../../../FreeRTOS_9_0/Source/queue.c **** 
1579:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:../../../FreeRTOS_9_0/Source/queue.c **** {
 2595              		.loc 1 1580 0
 2596              		.cfi_startproc
 2597              		@ args = 0, pretend = 0, frame = 16
 2598              		@ frame_needed = 1, uses_anonymous_args = 0
 2599 0000 80B5     		push	{r7, lr}
 2600              	.LCFI70:
 2601              		.cfi_def_cfa_offset 8
 2602              		.cfi_offset 7, -8
 2603              		.cfi_offset 14, -4
 2604 0002 84B0     		sub	sp, sp, #16
 2605              	.LCFI71:
 2606              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccWCEgX6.s 			page 79


 2607 0004 00AF     		add	r7, sp, #0
 2608              	.LCFI72:
 2609              		.cfi_def_cfa_register 7
 2610 0006 7860     		str	r0, [r7, #4]
1581:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxReturn;
1582:../../../FreeRTOS_9_0/Source/queue.c **** 
1583:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( xQueue );
 2611              		.loc 1 1583 0
 2612 0008 7B68     		ldr	r3, [r7, #4]
 2613 000a 002B     		cmp	r3, #0
 2614 000c 09D1     		bne	.L173
 2615              	.LBB154:
 2616              	.LBB155:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2617              		.loc 2 237 0 discriminator 1
 2618              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2619 000e 4FF05003 			mov r3, #80												
 2620 0012 83F31188 		msr basepri, r3											
 2621 0016 BFF36F8F 		isb														
 2622 001a BFF34F8F 		dsb														
 2623              	
 2624              	@ 0 "" 2
 2625              		.thumb
 2626 001e BB60     		str	r3, [r7, #8]
 2627              	.L174:
 2628              	.LBE155:
 2629              	.LBE154:
 2630              		.loc 1 1583 0 discriminator 1
 2631 0020 FEE7     		b	.L174
 2632              	.L173:
1584:../../../FreeRTOS_9_0/Source/queue.c **** 
1585:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 2633              		.loc 1 1585 0
 2634 0022 FFF7FEFF 		bl	vPortEnterCritical
1586:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1587:../../../FreeRTOS_9_0/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2635              		.loc 1 1587 0
 2636 0026 7B68     		ldr	r3, [r7, #4]
 2637 0028 9B6B     		ldr	r3, [r3, #56]
 2638 002a FB60     		str	r3, [r7, #12]
1588:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1589:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 2639              		.loc 1 1589 0
 2640 002c FFF7FEFF 		bl	vPortExitCritical
1590:../../../FreeRTOS_9_0/Source/queue.c **** 
1591:../../../FreeRTOS_9_0/Source/queue.c **** 	return uxReturn;
 2641              		.loc 1 1591 0
 2642 0030 FB68     		ldr	r3, [r7, #12]
1592:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2643              		.loc 1 1592 0
 2644 0032 1846     		mov	r0, r3
 2645 0034 1037     		adds	r7, r7, #16
 2646              	.LCFI73:
 2647              		.cfi_def_cfa_offset 8
 2648 0036 BD46     		mov	sp, r7
 2649              	.LCFI74:
 2650              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccWCEgX6.s 			page 80


 2651              		@ sp needed
 2652 0038 80BD     		pop	{r7, pc}
 2653              		.cfi_endproc
 2654              	.LFE19:
 2656 003a 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2657              		.align	2
 2658              		.global	uxQueueSpacesAvailable
 2659              		.thumb
 2660              		.thumb_func
 2662              	uxQueueSpacesAvailable:
 2663              	.LFB20:
1593:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1594:../../../FreeRTOS_9_0/Source/queue.c **** 
1595:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:../../../FreeRTOS_9_0/Source/queue.c **** {
 2664              		.loc 1 1596 0
 2665              		.cfi_startproc
 2666              		@ args = 0, pretend = 0, frame = 24
 2667              		@ frame_needed = 1, uses_anonymous_args = 0
 2668 0000 80B5     		push	{r7, lr}
 2669              	.LCFI75:
 2670              		.cfi_def_cfa_offset 8
 2671              		.cfi_offset 7, -8
 2672              		.cfi_offset 14, -4
 2673 0002 86B0     		sub	sp, sp, #24
 2674              	.LCFI76:
 2675              		.cfi_def_cfa_offset 32
 2676 0004 00AF     		add	r7, sp, #0
 2677              	.LCFI77:
 2678              		.cfi_def_cfa_register 7
 2679 0006 7860     		str	r0, [r7, #4]
1597:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxReturn;
1598:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t *pxQueue;
1599:../../../FreeRTOS_9_0/Source/queue.c **** 
1600:../../../FreeRTOS_9_0/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
 2680              		.loc 1 1600 0
 2681 0008 7B68     		ldr	r3, [r7, #4]
 2682 000a 7B61     		str	r3, [r7, #20]
1601:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 2683              		.loc 1 1601 0
 2684 000c 7B69     		ldr	r3, [r7, #20]
 2685 000e 002B     		cmp	r3, #0
 2686 0010 09D1     		bne	.L177
 2687              	.LBB156:
 2688              	.LBB157:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2689              		.loc 2 237 0 discriminator 1
 2690              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2691 0012 4FF05003 			mov r3, #80												
 2692 0016 83F31188 		msr basepri, r3											
 2693 001a BFF36F8F 		isb														
 2694 001e BFF34F8F 		dsb														
 2695              	
 2696              	@ 0 "" 2
 2697              		.thumb
 2698 0022 FB60     		str	r3, [r7, #12]
 2699              	.L178:
ARM GAS  /tmp/ccWCEgX6.s 			page 81


 2700              	.LBE157:
 2701              	.LBE156:
 2702              		.loc 1 1601 0 discriminator 1
 2703 0024 FEE7     		b	.L178
 2704              	.L177:
1602:../../../FreeRTOS_9_0/Source/queue.c **** 
1603:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 2705              		.loc 1 1603 0
 2706 0026 FFF7FEFF 		bl	vPortEnterCritical
1604:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1605:../../../FreeRTOS_9_0/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2707              		.loc 1 1605 0
 2708 002a 7B69     		ldr	r3, [r7, #20]
 2709 002c DA6B     		ldr	r2, [r3, #60]
 2710 002e 7B69     		ldr	r3, [r7, #20]
 2711 0030 9B6B     		ldr	r3, [r3, #56]
 2712 0032 D31A     		subs	r3, r2, r3
 2713 0034 3B61     		str	r3, [r7, #16]
1606:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1607:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 2714              		.loc 1 1607 0
 2715 0036 FFF7FEFF 		bl	vPortExitCritical
1608:../../../FreeRTOS_9_0/Source/queue.c **** 
1609:../../../FreeRTOS_9_0/Source/queue.c **** 	return uxReturn;
 2716              		.loc 1 1609 0
 2717 003a 3B69     		ldr	r3, [r7, #16]
1610:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2718              		.loc 1 1610 0
 2719 003c 1846     		mov	r0, r3
 2720 003e 1837     		adds	r7, r7, #24
 2721              	.LCFI78:
 2722              		.cfi_def_cfa_offset 8
 2723 0040 BD46     		mov	sp, r7
 2724              	.LCFI79:
 2725              		.cfi_def_cfa_register 13
 2726              		@ sp needed
 2727 0042 80BD     		pop	{r7, pc}
 2728              		.cfi_endproc
 2729              	.LFE20:
 2731              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2732              		.align	2
 2733              		.global	uxQueueMessagesWaitingFromISR
 2734              		.thumb
 2735              		.thumb_func
 2737              	uxQueueMessagesWaitingFromISR:
 2738              	.LFB21:
1611:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1612:../../../FreeRTOS_9_0/Source/queue.c **** 
1613:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:../../../FreeRTOS_9_0/Source/queue.c **** {
 2739              		.loc 1 1614 0
 2740              		.cfi_startproc
 2741              		@ args = 0, pretend = 0, frame = 16
 2742              		@ frame_needed = 1, uses_anonymous_args = 0
 2743              		@ link register save eliminated.
 2744 0000 80B4     		push	{r7}
 2745              	.LCFI80:
ARM GAS  /tmp/ccWCEgX6.s 			page 82


 2746              		.cfi_def_cfa_offset 4
 2747              		.cfi_offset 7, -4
 2748 0002 85B0     		sub	sp, sp, #20
 2749              	.LCFI81:
 2750              		.cfi_def_cfa_offset 24
 2751 0004 00AF     		add	r7, sp, #0
 2752              	.LCFI82:
 2753              		.cfi_def_cfa_register 7
 2754 0006 7860     		str	r0, [r7, #4]
1615:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxReturn;
1616:../../../FreeRTOS_9_0/Source/queue.c **** 
1617:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( xQueue );
 2755              		.loc 1 1617 0
 2756 0008 7B68     		ldr	r3, [r7, #4]
 2757 000a 002B     		cmp	r3, #0
 2758 000c 09D1     		bne	.L181
 2759              	.LBB158:
 2760              	.LBB159:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2761              		.loc 2 237 0 discriminator 1
 2762              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2763 000e 4FF05003 			mov r3, #80												
 2764 0012 83F31188 		msr basepri, r3											
 2765 0016 BFF36F8F 		isb														
 2766 001a BFF34F8F 		dsb														
 2767              	
 2768              	@ 0 "" 2
 2769              		.thumb
 2770 001e BB60     		str	r3, [r7, #8]
 2771              	.L182:
 2772              	.LBE159:
 2773              	.LBE158:
 2774              		.loc 1 1617 0 discriminator 1
 2775 0020 FEE7     		b	.L182
 2776              	.L181:
1618:../../../FreeRTOS_9_0/Source/queue.c **** 
1619:../../../FreeRTOS_9_0/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2777              		.loc 1 1619 0
 2778 0022 7B68     		ldr	r3, [r7, #4]
 2779 0024 9B6B     		ldr	r3, [r3, #56]
 2780 0026 FB60     		str	r3, [r7, #12]
1620:../../../FreeRTOS_9_0/Source/queue.c **** 
1621:../../../FreeRTOS_9_0/Source/queue.c **** 	return uxReturn;
 2781              		.loc 1 1621 0
 2782 0028 FB68     		ldr	r3, [r7, #12]
1622:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2783              		.loc 1 1622 0
 2784 002a 1846     		mov	r0, r3
 2785 002c 1437     		adds	r7, r7, #20
 2786              	.LCFI83:
 2787              		.cfi_def_cfa_offset 4
 2788 002e BD46     		mov	sp, r7
 2789              	.LCFI84:
 2790              		.cfi_def_cfa_register 13
 2791              		@ sp needed
 2792 0030 5DF8047B 		ldr	r7, [sp], #4
 2793              	.LCFI85:
ARM GAS  /tmp/ccWCEgX6.s 			page 83


 2794              		.cfi_restore 7
 2795              		.cfi_def_cfa_offset 0
 2796 0034 7047     		bx	lr
 2797              		.cfi_endproc
 2798              	.LFE21:
 2800 0036 00BF     		.section	.text.vQueueDelete,"ax",%progbits
 2801              		.align	2
 2802              		.global	vQueueDelete
 2803              		.thumb
 2804              		.thumb_func
 2806              	vQueueDelete:
 2807              	.LFB22:
1623:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1624:../../../FreeRTOS_9_0/Source/queue.c **** 
1625:../../../FreeRTOS_9_0/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:../../../FreeRTOS_9_0/Source/queue.c **** {
 2808              		.loc 1 1626 0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 16
 2811              		@ frame_needed = 1, uses_anonymous_args = 0
 2812 0000 80B5     		push	{r7, lr}
 2813              	.LCFI86:
 2814              		.cfi_def_cfa_offset 8
 2815              		.cfi_offset 7, -8
 2816              		.cfi_offset 14, -4
 2817 0002 84B0     		sub	sp, sp, #16
 2818              	.LCFI87:
 2819              		.cfi_def_cfa_offset 24
 2820 0004 00AF     		add	r7, sp, #0
 2821              	.LCFI88:
 2822              		.cfi_def_cfa_register 7
 2823 0006 7860     		str	r0, [r7, #4]
1627:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2824              		.loc 1 1627 0
 2825 0008 7B68     		ldr	r3, [r7, #4]
 2826 000a FB60     		str	r3, [r7, #12]
1628:../../../FreeRTOS_9_0/Source/queue.c **** 
1629:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 2827              		.loc 1 1629 0
 2828 000c FB68     		ldr	r3, [r7, #12]
 2829 000e 002B     		cmp	r3, #0
 2830 0010 09D1     		bne	.L185
 2831              	.LBB160:
 2832              	.LBB161:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2833              		.loc 2 237 0 discriminator 1
 2834              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2835 0012 4FF05003 			mov r3, #80												
 2836 0016 83F31188 		msr basepri, r3											
 2837 001a BFF36F8F 		isb														
 2838 001e BFF34F8F 		dsb														
 2839              	
 2840              	@ 0 "" 2
 2841              		.thumb
 2842 0022 BB60     		str	r3, [r7, #8]
 2843              	.L186:
 2844              	.LBE161:
ARM GAS  /tmp/ccWCEgX6.s 			page 84


 2845              	.LBE160:
 2846              		.loc 1 1629 0 discriminator 1
 2847 0024 FEE7     		b	.L186
 2848              	.L185:
1630:../../../FreeRTOS_9_0/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2849              		.loc 1 1630 0
 2850 0026 FB68     		ldr	r3, [r7, #12]
 2851 0028 1846     		mov	r0, r3
 2852 002a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2853 002e 0346     		mov	r3, r0
 2854 0030 5F20     		movs	r0, #95
 2855 0032 1946     		mov	r1, r3
 2856 0034 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
1631:../../../FreeRTOS_9_0/Source/queue.c **** 
1632:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1634:../../../FreeRTOS_9_0/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
 2857              		.loc 1 1634 0
 2858 0038 F868     		ldr	r0, [r7, #12]
 2859 003a FFF7FEFF 		bl	vQueueUnregisterQueue
1635:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1636:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
1637:../../../FreeRTOS_9_0/Source/queue.c **** 
1638:../../../FreeRTOS_9_0/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1640:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:../../../FreeRTOS_9_0/Source/queue.c **** 		again. */
1642:../../../FreeRTOS_9_0/Source/queue.c **** 		vPortFree( pxQueue );
 2860              		.loc 1 1642 0
 2861 003e F868     		ldr	r0, [r7, #12]
 2862 0040 FFF7FEFF 		bl	vPortFree
1643:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1644:../../../FreeRTOS_9_0/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1646:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:../../../FreeRTOS_9_0/Source/queue.c **** 		check before attempting to free the memory. */
1648:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1650:../../../FreeRTOS_9_0/Source/queue.c **** 			vPortFree( pxQueue );
1651:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1652:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1653:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1654:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1656:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1657:../../../FreeRTOS_9_0/Source/queue.c **** 	#else
1658:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1659:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:../../../FreeRTOS_9_0/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) pxQueue;
1662:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1663:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:../../../FreeRTOS_9_0/Source/queue.c **** }
 2863              		.loc 1 1664 0
 2864 0044 1037     		adds	r7, r7, #16
 2865              	.LCFI89:
 2866              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccWCEgX6.s 			page 85


 2867 0046 BD46     		mov	sp, r7
 2868              	.LCFI90:
 2869              		.cfi_def_cfa_register 13
 2870              		@ sp needed
 2871 0048 80BD     		pop	{r7, pc}
 2872              		.cfi_endproc
 2873              	.LFE22:
 2875 004a 00BF     		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 2876              		.align	2
 2877              		.global	uxQueueGetQueueNumber
 2878              		.thumb
 2879              		.thumb_func
 2881              	uxQueueGetQueueNumber:
 2882              	.LFB23:
1665:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1666:../../../FreeRTOS_9_0/Source/queue.c **** 
1667:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:../../../FreeRTOS_9_0/Source/queue.c **** 
1669:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 2883              		.loc 1 1670 0
 2884              		.cfi_startproc
 2885              		@ args = 0, pretend = 0, frame = 8
 2886              		@ frame_needed = 1, uses_anonymous_args = 0
 2887              		@ link register save eliminated.
 2888 0000 80B4     		push	{r7}
 2889              	.LCFI91:
 2890              		.cfi_def_cfa_offset 4
 2891              		.cfi_offset 7, -4
 2892 0002 83B0     		sub	sp, sp, #12
 2893              	.LCFI92:
 2894              		.cfi_def_cfa_offset 16
 2895 0004 00AF     		add	r7, sp, #0
 2896              	.LCFI93:
 2897              		.cfi_def_cfa_register 7
 2898 0006 7860     		str	r0, [r7, #4]
1671:../../../FreeRTOS_9_0/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 2899              		.loc 1 1671 0
 2900 0008 7B68     		ldr	r3, [r7, #4]
 2901 000a 9B6C     		ldr	r3, [r3, #72]
1672:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 2902              		.loc 1 1672 0
 2903 000c 1846     		mov	r0, r3
 2904 000e 0C37     		adds	r7, r7, #12
 2905              	.LCFI94:
 2906              		.cfi_def_cfa_offset 4
 2907 0010 BD46     		mov	sp, r7
 2908              	.LCFI95:
 2909              		.cfi_def_cfa_register 13
 2910              		@ sp needed
 2911 0012 5DF8047B 		ldr	r7, [sp], #4
 2912              	.LCFI96:
 2913              		.cfi_restore 7
 2914              		.cfi_def_cfa_offset 0
 2915 0016 7047     		bx	lr
 2916              		.cfi_endproc
 2917              	.LFE23:
ARM GAS  /tmp/ccWCEgX6.s 			page 86


 2919              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 2920              		.align	2
 2921              		.global	vQueueSetQueueNumber
 2922              		.thumb
 2923              		.thumb_func
 2925              	vQueueSetQueueNumber:
 2926              	.LFB24:
1673:../../../FreeRTOS_9_0/Source/queue.c **** 
1674:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1676:../../../FreeRTOS_9_0/Source/queue.c **** 
1677:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:../../../FreeRTOS_9_0/Source/queue.c **** 
1679:../../../FreeRTOS_9_0/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 2927              		.loc 1 1680 0
 2928              		.cfi_startproc
 2929              		@ args = 0, pretend = 0, frame = 8
 2930              		@ frame_needed = 1, uses_anonymous_args = 0
 2931              		@ link register save eliminated.
 2932 0000 80B4     		push	{r7}
 2933              	.LCFI97:
 2934              		.cfi_def_cfa_offset 4
 2935              		.cfi_offset 7, -4
 2936 0002 83B0     		sub	sp, sp, #12
 2937              	.LCFI98:
 2938              		.cfi_def_cfa_offset 16
 2939 0004 00AF     		add	r7, sp, #0
 2940              	.LCFI99:
 2941              		.cfi_def_cfa_register 7
 2942 0006 7860     		str	r0, [r7, #4]
 2943 0008 3960     		str	r1, [r7]
1681:../../../FreeRTOS_9_0/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 2944              		.loc 1 1681 0
 2945 000a 7B68     		ldr	r3, [r7, #4]
 2946 000c 3A68     		ldr	r2, [r7]
 2947 000e 9A64     		str	r2, [r3, #72]
1682:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 2948              		.loc 1 1682 0
 2949 0010 0C37     		adds	r7, r7, #12
 2950              	.LCFI100:
 2951              		.cfi_def_cfa_offset 4
 2952 0012 BD46     		mov	sp, r7
 2953              	.LCFI101:
 2954              		.cfi_def_cfa_register 13
 2955              		@ sp needed
 2956 0014 5DF8047B 		ldr	r7, [sp], #4
 2957              	.LCFI102:
 2958              		.cfi_restore 7
 2959              		.cfi_def_cfa_offset 0
 2960 0018 7047     		bx	lr
 2961              		.cfi_endproc
 2962              	.LFE24:
 2964 001a 00BF     		.section	.text.ucQueueGetQueueType,"ax",%progbits
 2965              		.align	2
 2966              		.global	ucQueueGetQueueType
 2967              		.thumb
ARM GAS  /tmp/ccWCEgX6.s 			page 87


 2968              		.thumb_func
 2970              	ucQueueGetQueueType:
 2971              	.LFB25:
1683:../../../FreeRTOS_9_0/Source/queue.c **** 
1684:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1686:../../../FreeRTOS_9_0/Source/queue.c **** 
1687:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:../../../FreeRTOS_9_0/Source/queue.c **** 
1689:../../../FreeRTOS_9_0/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 2972              		.loc 1 1690 0
 2973              		.cfi_startproc
 2974              		@ args = 0, pretend = 0, frame = 8
 2975              		@ frame_needed = 1, uses_anonymous_args = 0
 2976              		@ link register save eliminated.
 2977 0000 80B4     		push	{r7}
 2978              	.LCFI103:
 2979              		.cfi_def_cfa_offset 4
 2980              		.cfi_offset 7, -4
 2981 0002 83B0     		sub	sp, sp, #12
 2982              	.LCFI104:
 2983              		.cfi_def_cfa_offset 16
 2984 0004 00AF     		add	r7, sp, #0
 2985              	.LCFI105:
 2986              		.cfi_def_cfa_register 7
 2987 0006 7860     		str	r0, [r7, #4]
1691:../../../FreeRTOS_9_0/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 2988              		.loc 1 1691 0
 2989 0008 7B68     		ldr	r3, [r7, #4]
 2990 000a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
1692:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 2991              		.loc 1 1692 0
 2992 000e 1846     		mov	r0, r3
 2993 0010 0C37     		adds	r7, r7, #12
 2994              	.LCFI106:
 2995              		.cfi_def_cfa_offset 4
 2996 0012 BD46     		mov	sp, r7
 2997              	.LCFI107:
 2998              		.cfi_def_cfa_register 13
 2999              		@ sp needed
 3000 0014 5DF8047B 		ldr	r7, [sp], #4
 3001              	.LCFI108:
 3002              		.cfi_restore 7
 3003              		.cfi_def_cfa_offset 0
 3004 0018 7047     		bx	lr
 3005              		.cfi_endproc
 3006              	.LFE25:
 3008 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 3009              		.align	2
 3010              		.thumb
 3011              		.thumb_func
 3013              	prvCopyDataToQueue:
 3014              	.LFB26:
1693:../../../FreeRTOS_9_0/Source/queue.c **** 
1694:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccWCEgX6.s 			page 88


1696:../../../FreeRTOS_9_0/Source/queue.c **** 
1697:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:../../../FreeRTOS_9_0/Source/queue.c **** {
 3015              		.loc 1 1698 0
 3016              		.cfi_startproc
 3017              		@ args = 0, pretend = 0, frame = 24
 3018              		@ frame_needed = 1, uses_anonymous_args = 0
 3019 0000 80B5     		push	{r7, lr}
 3020              	.LCFI109:
 3021              		.cfi_def_cfa_offset 8
 3022              		.cfi_offset 7, -8
 3023              		.cfi_offset 14, -4
 3024 0002 86B0     		sub	sp, sp, #24
 3025              	.LCFI110:
 3026              		.cfi_def_cfa_offset 32
 3027 0004 00AF     		add	r7, sp, #0
 3028              	.LCFI111:
 3029              		.cfi_def_cfa_register 7
 3030 0006 F860     		str	r0, [r7, #12]
 3031 0008 B960     		str	r1, [r7, #8]
 3032 000a 7A60     		str	r2, [r7, #4]
1699:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 3033              		.loc 1 1699 0
 3034 000c 0023     		movs	r3, #0
 3035 000e 7B61     		str	r3, [r7, #20]
1700:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxMessagesWaiting;
1701:../../../FreeRTOS_9_0/Source/queue.c **** 
1702:../../../FreeRTOS_9_0/Source/queue.c **** 	/* This function is called from a critical section. */
1703:../../../FreeRTOS_9_0/Source/queue.c **** 
1704:../../../FreeRTOS_9_0/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3036              		.loc 1 1704 0
 3037 0010 FB68     		ldr	r3, [r7, #12]
 3038 0012 9B6B     		ldr	r3, [r3, #56]
 3039 0014 3B61     		str	r3, [r7, #16]
1705:../../../FreeRTOS_9_0/Source/queue.c **** 
1706:../../../FreeRTOS_9_0/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 3040              		.loc 1 1706 0
 3041 0016 FB68     		ldr	r3, [r7, #12]
 3042 0018 1B6C     		ldr	r3, [r3, #64]
 3043 001a 002B     		cmp	r3, #0
 3044 001c 0DD1     		bne	.L193
1707:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1708:../../../FreeRTOS_9_0/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1710:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 3045              		.loc 1 1710 0
 3046 001e FB68     		ldr	r3, [r7, #12]
 3047 0020 1B68     		ldr	r3, [r3]
 3048 0022 002B     		cmp	r3, #0
 3049 0024 4FD1     		bne	.L194
1711:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1712:../../../FreeRTOS_9_0/Source/queue.c **** 				/* The mutex is no longer being held. */
1713:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 3050              		.loc 1 1713 0
 3051 0026 FB68     		ldr	r3, [r7, #12]
 3052 0028 5B68     		ldr	r3, [r3, #4]
 3053 002a 1846     		mov	r0, r3
ARM GAS  /tmp/ccWCEgX6.s 			page 89


 3054 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 3055 0030 7861     		str	r0, [r7, #20]
1714:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 3056              		.loc 1 1714 0
 3057 0032 FB68     		ldr	r3, [r7, #12]
 3058 0034 0022     		movs	r2, #0
 3059 0036 5A60     		str	r2, [r3, #4]
 3060 0038 45E0     		b	.L194
 3061              	.L193:
1715:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1716:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1717:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1718:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1720:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1721:../../../FreeRTOS_9_0/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1723:../../../FreeRTOS_9_0/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 3062              		.loc 1 1723 0
 3063 003a 7B68     		ldr	r3, [r7, #4]
 3064 003c 002B     		cmp	r3, #0
 3065 003e 1AD1     		bne	.L195
1724:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1725:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 3066              		.loc 1 1725 0
 3067 0040 FB68     		ldr	r3, [r7, #12]
 3068 0042 9A68     		ldr	r2, [r3, #8]
 3069 0044 FB68     		ldr	r3, [r7, #12]
 3070 0046 1B6C     		ldr	r3, [r3, #64]
 3071 0048 1046     		mov	r0, r2
 3072 004a B968     		ldr	r1, [r7, #8]
 3073 004c 1A46     		mov	r2, r3
 3074 004e FFF7FEFF 		bl	memcpy
1726:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 3075              		.loc 1 1726 0
 3076 0052 FB68     		ldr	r3, [r7, #12]
 3077 0054 9A68     		ldr	r2, [r3, #8]
 3078 0056 FB68     		ldr	r3, [r7, #12]
 3079 0058 1B6C     		ldr	r3, [r3, #64]
 3080 005a 1A44     		add	r2, r2, r3
 3081 005c FB68     		ldr	r3, [r7, #12]
 3082 005e 9A60     		str	r2, [r3, #8]
1727:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 3083              		.loc 1 1727 0
 3084 0060 FB68     		ldr	r3, [r7, #12]
 3085 0062 9A68     		ldr	r2, [r3, #8]
 3086 0064 FB68     		ldr	r3, [r7, #12]
 3087 0066 5B68     		ldr	r3, [r3, #4]
 3088 0068 9A42     		cmp	r2, r3
 3089 006a 2CD3     		bcc	.L194
1728:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1729:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 3090              		.loc 1 1729 0
 3091 006c FB68     		ldr	r3, [r7, #12]
 3092 006e 1A68     		ldr	r2, [r3]
 3093 0070 FB68     		ldr	r3, [r7, #12]
 3094 0072 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccWCEgX6.s 			page 90


 3095 0074 27E0     		b	.L194
 3096              	.L195:
1730:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1731:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1732:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1733:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1735:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1736:../../../FreeRTOS_9_0/Source/queue.c **** 	else
1737:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1738:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
 3097              		.loc 1 1738 0
 3098 0076 FB68     		ldr	r3, [r7, #12]
 3099 0078 DA68     		ldr	r2, [r3, #12]
 3100 007a FB68     		ldr	r3, [r7, #12]
 3101 007c 1B6C     		ldr	r3, [r3, #64]
 3102 007e 1046     		mov	r0, r2
 3103 0080 B968     		ldr	r1, [r7, #8]
 3104 0082 1A46     		mov	r2, r3
 3105 0084 FFF7FEFF 		bl	memcpy
1739:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 3106              		.loc 1 1739 0
 3107 0088 FB68     		ldr	r3, [r7, #12]
 3108 008a DA68     		ldr	r2, [r3, #12]
 3109 008c FB68     		ldr	r3, [r7, #12]
 3110 008e 1B6C     		ldr	r3, [r3, #64]
 3111 0090 5B42     		negs	r3, r3
 3112 0092 1A44     		add	r2, r2, r3
 3113 0094 FB68     		ldr	r3, [r7, #12]
 3114 0096 DA60     		str	r2, [r3, #12]
1740:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 3115              		.loc 1 1740 0
 3116 0098 FB68     		ldr	r3, [r7, #12]
 3117 009a DA68     		ldr	r2, [r3, #12]
 3118 009c FB68     		ldr	r3, [r7, #12]
 3119 009e 1B68     		ldr	r3, [r3]
 3120 00a0 9A42     		cmp	r2, r3
 3121 00a2 07D2     		bcs	.L196
1741:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1742:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 3122              		.loc 1 1742 0
 3123 00a4 FB68     		ldr	r3, [r7, #12]
 3124 00a6 5A68     		ldr	r2, [r3, #4]
 3125 00a8 FB68     		ldr	r3, [r7, #12]
 3126 00aa 1B6C     		ldr	r3, [r3, #64]
 3127 00ac 5B42     		negs	r3, r3
 3128 00ae 1A44     		add	r2, r2, r3
 3129 00b0 FB68     		ldr	r3, [r7, #12]
 3130 00b2 DA60     		str	r2, [r3, #12]
 3131              	.L196:
1743:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1744:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1745:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1746:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1748:../../../FreeRTOS_9_0/Source/queue.c **** 
1749:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
ARM GAS  /tmp/ccWCEgX6.s 			page 91


 3132              		.loc 1 1749 0
 3133 00b4 7B68     		ldr	r3, [r7, #4]
 3134 00b6 022B     		cmp	r3, #2
 3135 00b8 05D1     		bne	.L194
1750:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1751:../../../FreeRTOS_9_0/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3136              		.loc 1 1751 0
 3137 00ba 3B69     		ldr	r3, [r7, #16]
 3138 00bc 002B     		cmp	r3, #0
 3139 00be 02D0     		beq	.L194
1752:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1753:../../../FreeRTOS_9_0/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:../../../FreeRTOS_9_0/Source/queue.c **** 				one from the recorded number of items in the queue so when
1755:../../../FreeRTOS_9_0/Source/queue.c **** 				one is added again below the number of recorded items remains
1756:../../../FreeRTOS_9_0/Source/queue.c **** 				correct. */
1757:../../../FreeRTOS_9_0/Source/queue.c **** 				--uxMessagesWaiting;
 3140              		.loc 1 1757 0
 3141 00c0 3B69     		ldr	r3, [r7, #16]
 3142 00c2 013B     		subs	r3, r3, #1
 3143 00c4 3B61     		str	r3, [r7, #16]
 3144              	.L194:
1758:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1759:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1760:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1761:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1763:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1764:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1765:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1766:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1768:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1769:../../../FreeRTOS_9_0/Source/queue.c **** 
1770:../../../FreeRTOS_9_0/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 3145              		.loc 1 1770 0
 3146 00c6 3B69     		ldr	r3, [r7, #16]
 3147 00c8 5A1C     		adds	r2, r3, #1
 3148 00ca FB68     		ldr	r3, [r7, #12]
 3149 00cc 9A63     		str	r2, [r3, #56]
1771:../../../FreeRTOS_9_0/Source/queue.c **** 
1772:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 3150              		.loc 1 1772 0
 3151 00ce 7B69     		ldr	r3, [r7, #20]
1773:../../../FreeRTOS_9_0/Source/queue.c **** }
 3152              		.loc 1 1773 0
 3153 00d0 1846     		mov	r0, r3
 3154 00d2 1837     		adds	r7, r7, #24
 3155              	.LCFI112:
 3156              		.cfi_def_cfa_offset 8
 3157 00d4 BD46     		mov	sp, r7
 3158              	.LCFI113:
 3159              		.cfi_def_cfa_register 13
 3160              		@ sp needed
 3161 00d6 80BD     		pop	{r7, pc}
 3162              		.cfi_endproc
 3163              	.LFE26:
 3165              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
ARM GAS  /tmp/ccWCEgX6.s 			page 92


 3166              		.align	2
 3167              		.thumb
 3168              		.thumb_func
 3170              	prvCopyDataFromQueue:
 3171              	.LFB27:
1774:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1775:../../../FreeRTOS_9_0/Source/queue.c **** 
1776:../../../FreeRTOS_9_0/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:../../../FreeRTOS_9_0/Source/queue.c **** {
 3172              		.loc 1 1777 0
 3173              		.cfi_startproc
 3174              		@ args = 0, pretend = 0, frame = 8
 3175              		@ frame_needed = 1, uses_anonymous_args = 0
 3176 0000 80B5     		push	{r7, lr}
 3177              	.LCFI114:
 3178              		.cfi_def_cfa_offset 8
 3179              		.cfi_offset 7, -8
 3180              		.cfi_offset 14, -4
 3181 0002 82B0     		sub	sp, sp, #8
 3182              	.LCFI115:
 3183              		.cfi_def_cfa_offset 16
 3184 0004 00AF     		add	r7, sp, #0
 3185              	.LCFI116:
 3186              		.cfi_def_cfa_register 7
 3187 0006 7860     		str	r0, [r7, #4]
 3188 0008 3960     		str	r1, [r7]
1778:../../../FreeRTOS_9_0/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 3189              		.loc 1 1778 0
 3190 000a 7B68     		ldr	r3, [r7, #4]
 3191 000c 1B6C     		ldr	r3, [r3, #64]
 3192 000e 002B     		cmp	r3, #0
 3193 0010 19D0     		beq	.L198
1779:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1780:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 3194              		.loc 1 1780 0
 3195 0012 7B68     		ldr	r3, [r7, #4]
 3196 0014 DA68     		ldr	r2, [r3, #12]
 3197 0016 7B68     		ldr	r3, [r7, #4]
 3198 0018 1B6C     		ldr	r3, [r3, #64]
 3199 001a 1A44     		add	r2, r2, r3
 3200 001c 7B68     		ldr	r3, [r7, #4]
 3201 001e DA60     		str	r2, [r3, #12]
1781:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 3202              		.loc 1 1781 0
 3203 0020 7B68     		ldr	r3, [r7, #4]
 3204 0022 DA68     		ldr	r2, [r3, #12]
 3205 0024 7B68     		ldr	r3, [r7, #4]
 3206 0026 5B68     		ldr	r3, [r3, #4]
 3207 0028 9A42     		cmp	r2, r3
 3208 002a 03D3     		bcc	.L200
1782:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1783:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 3209              		.loc 1 1783 0
 3210 002c 7B68     		ldr	r3, [r7, #4]
 3211 002e 1A68     		ldr	r2, [r3]
 3212 0030 7B68     		ldr	r3, [r7, #4]
 3213 0032 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccWCEgX6.s 			page 93


 3214              	.L200:
1784:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1785:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1786:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1787:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1789:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
 3215              		.loc 1 1789 0
 3216 0034 7B68     		ldr	r3, [r7, #4]
 3217 0036 DA68     		ldr	r2, [r3, #12]
 3218 0038 7B68     		ldr	r3, [r7, #4]
 3219 003a 1B6C     		ldr	r3, [r3, #64]
 3220 003c 3868     		ldr	r0, [r7]
 3221 003e 1146     		mov	r1, r2
 3222 0040 1A46     		mov	r2, r3
 3223 0042 FFF7FEFF 		bl	memcpy
 3224              	.L198:
1790:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1791:../../../FreeRTOS_9_0/Source/queue.c **** }
 3225              		.loc 1 1791 0
 3226 0046 0837     		adds	r7, r7, #8
 3227              	.LCFI117:
 3228              		.cfi_def_cfa_offset 8
 3229 0048 BD46     		mov	sp, r7
 3230              	.LCFI118:
 3231              		.cfi_def_cfa_register 13
 3232              		@ sp needed
 3233 004a 80BD     		pop	{r7, pc}
 3234              		.cfi_endproc
 3235              	.LFE27:
 3237              		.section	.text.prvUnlockQueue,"ax",%progbits
 3238              		.align	2
 3239              		.thumb
 3240              		.thumb_func
 3242              	prvUnlockQueue:
 3243              	.LFB28:
1792:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1793:../../../FreeRTOS_9_0/Source/queue.c **** 
1794:../../../FreeRTOS_9_0/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:../../../FreeRTOS_9_0/Source/queue.c **** {
 3244              		.loc 1 1795 0
 3245              		.cfi_startproc
 3246              		@ args = 0, pretend = 0, frame = 16
 3247              		@ frame_needed = 1, uses_anonymous_args = 0
 3248 0000 80B5     		push	{r7, lr}
 3249              	.LCFI119:
 3250              		.cfi_def_cfa_offset 8
 3251              		.cfi_offset 7, -8
 3252              		.cfi_offset 14, -4
 3253 0002 84B0     		sub	sp, sp, #16
 3254              	.LCFI120:
 3255              		.cfi_def_cfa_offset 24
 3256 0004 00AF     		add	r7, sp, #0
 3257              	.LCFI121:
 3258              		.cfi_def_cfa_register 7
 3259 0006 7860     		str	r0, [r7, #4]
1796:../../../FreeRTOS_9_0/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
ARM GAS  /tmp/ccWCEgX6.s 			page 94


1797:../../../FreeRTOS_9_0/Source/queue.c **** 
1798:../../../FreeRTOS_9_0/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:../../../FreeRTOS_9_0/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:../../../FreeRTOS_9_0/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:../../../FreeRTOS_9_0/Source/queue.c **** 	updated. */
1802:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 3260              		.loc 1 1802 0
 3261 0008 FFF7FEFF 		bl	vPortEnterCritical
 3262              	.LBB162:
1803:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1804:../../../FreeRTOS_9_0/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
 3263              		.loc 1 1804 0
 3264 000c 7B68     		ldr	r3, [r7, #4]
 3265 000e 93F84530 		ldrb	r3, [r3, #69]
 3266 0012 FB73     		strb	r3, [r7, #15]
1805:../../../FreeRTOS_9_0/Source/queue.c **** 
1806:../../../FreeRTOS_9_0/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:../../../FreeRTOS_9_0/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
 3267              		.loc 1 1807 0
 3268 0014 13E0     		b	.L202
 3269              	.L206:
1808:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1809:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:../../../FreeRTOS_9_0/Source/queue.c **** 			blocked waiting for data to become available? */
1811:../../../FreeRTOS_9_0/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1813:../../../FreeRTOS_9_0/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1815:../../../FreeRTOS_9_0/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1817:../../../FreeRTOS_9_0/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:../../../FreeRTOS_9_0/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:../../../FreeRTOS_9_0/Source/queue.c **** 						A context switch is required. */
1820:../../../FreeRTOS_9_0/Source/queue.c **** 						vTaskMissedYield();
1821:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1822:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1823:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1824:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1826:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1827:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1828:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1829:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Tasks that are removed from the event list will get
1830:../../../FreeRTOS_9_0/Source/queue.c **** 					added to the pending ready list as the scheduler is still
1831:../../../FreeRTOS_9_0/Source/queue.c **** 					suspended. */
1832:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1834:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1836:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:../../../FreeRTOS_9_0/Source/queue.c **** 							context	switch is required. */
1838:../../../FreeRTOS_9_0/Source/queue.c **** 							vTaskMissedYield();
1839:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1840:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1841:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1842:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:../../../FreeRTOS_9_0/Source/queue.c **** 						}
ARM GAS  /tmp/ccWCEgX6.s 			page 95


1844:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1845:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1846:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1847:../../../FreeRTOS_9_0/Source/queue.c **** 						break;
1848:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1849:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1850:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1851:../../../FreeRTOS_9_0/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1853:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:../../../FreeRTOS_9_0/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 3270              		.loc 1 1855 0
 3271 0016 7B68     		ldr	r3, [r7, #4]
 3272 0018 5B6A     		ldr	r3, [r3, #36]
 3273 001a 002B     		cmp	r3, #0
 3274 001c 0AD0     		beq	.L203
1856:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1857:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 3275              		.loc 1 1857 0
 3276 001e 7B68     		ldr	r3, [r7, #4]
 3277 0020 2433     		adds	r3, r3, #36
 3278 0022 1846     		mov	r0, r3
 3279 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3280 0028 0346     		mov	r3, r0
 3281 002a 002B     		cmp	r3, #0
 3282 002c 03D0     		beq	.L204
1858:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1859:../../../FreeRTOS_9_0/Source/queue.c **** 						/* The task waiting has a higher priority so record that
1860:../../../FreeRTOS_9_0/Source/queue.c **** 						a context switch is required. */
1861:../../../FreeRTOS_9_0/Source/queue.c **** 						vTaskMissedYield();
 3283              		.loc 1 1861 0
 3284 002e FFF7FEFF 		bl	vTaskMissedYield
 3285 0032 00E0     		b	.L204
 3286              	.L203:
1862:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1863:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1864:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1865:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1867:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1868:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1869:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1870:../../../FreeRTOS_9_0/Source/queue.c **** 					break;
 3287              		.loc 1 1870 0
 3288 0034 07E0     		b	.L205
 3289              	.L204:
1871:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1872:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1873:../../../FreeRTOS_9_0/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:../../../FreeRTOS_9_0/Source/queue.c **** 
1875:../../../FreeRTOS_9_0/Source/queue.c **** 			--cTxLock;
 3290              		.loc 1 1875 0
 3291 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3292 0038 013B     		subs	r3, r3, #1
 3293 003a DBB2     		uxtb	r3, r3
 3294 003c FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccWCEgX6.s 			page 96


 3295              	.L202:
1807:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3296              		.loc 1 1807 0
 3297 003e 97F90F30 		ldrsb	r3, [r7, #15]
 3298 0042 002B     		cmp	r3, #0
 3299 0044 E7DC     		bgt	.L206
 3300              	.L205:
1876:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1877:../../../FreeRTOS_9_0/Source/queue.c **** 
1878:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 3301              		.loc 1 1878 0
 3302 0046 7B68     		ldr	r3, [r7, #4]
 3303 0048 FF22     		movs	r2, #255
 3304 004a 83F84520 		strb	r2, [r3, #69]
 3305              	.LBE162:
1879:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1880:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 3306              		.loc 1 1880 0
 3307 004e FFF7FEFF 		bl	vPortExitCritical
1881:../../../FreeRTOS_9_0/Source/queue.c **** 
1882:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Do the same for the Rx lock. */
1883:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 3308              		.loc 1 1883 0
 3309 0052 FFF7FEFF 		bl	vPortEnterCritical
 3310              	.LBB163:
1884:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1885:../../../FreeRTOS_9_0/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
 3311              		.loc 1 1885 0
 3312 0056 7B68     		ldr	r3, [r7, #4]
 3313 0058 93F84430 		ldrb	r3, [r3, #68]
 3314 005c BB73     		strb	r3, [r7, #14]
1886:../../../FreeRTOS_9_0/Source/queue.c **** 
1887:../../../FreeRTOS_9_0/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
 3315              		.loc 1 1887 0
 3316 005e 13E0     		b	.L207
 3317              	.L211:
1888:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1889:../../../FreeRTOS_9_0/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 3318              		.loc 1 1889 0
 3319 0060 7B68     		ldr	r3, [r7, #4]
 3320 0062 1B69     		ldr	r3, [r3, #16]
 3321 0064 002B     		cmp	r3, #0
 3322 0066 0ED0     		beq	.L208
1890:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1891:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 3323              		.loc 1 1891 0
 3324 0068 7B68     		ldr	r3, [r7, #4]
 3325 006a 1033     		adds	r3, r3, #16
 3326 006c 1846     		mov	r0, r3
 3327 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
 3328 0072 0346     		mov	r3, r0
 3329 0074 002B     		cmp	r3, #0
 3330 0076 01D0     		beq	.L209
1892:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1893:../../../FreeRTOS_9_0/Source/queue.c **** 					vTaskMissedYield();
 3331              		.loc 1 1893 0
 3332 0078 FFF7FEFF 		bl	vTaskMissedYield
ARM GAS  /tmp/ccWCEgX6.s 			page 97


 3333              	.L209:
1894:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1895:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1896:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1897:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1899:../../../FreeRTOS_9_0/Source/queue.c **** 
1900:../../../FreeRTOS_9_0/Source/queue.c **** 				--cRxLock;
 3334              		.loc 1 1900 0
 3335 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3336 007e 013B     		subs	r3, r3, #1
 3337 0080 DBB2     		uxtb	r3, r3
 3338 0082 BB73     		strb	r3, [r7, #14]
 3339 0084 00E0     		b	.L207
 3340              	.L208:
1901:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1902:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1903:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1904:../../../FreeRTOS_9_0/Source/queue.c **** 				break;
 3341              		.loc 1 1904 0
 3342 0086 03E0     		b	.L210
 3343              	.L207:
1887:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3344              		.loc 1 1887 0
 3345 0088 97F90E30 		ldrsb	r3, [r7, #14]
 3346 008c 002B     		cmp	r3, #0
 3347 008e E7DC     		bgt	.L211
 3348              	.L210:
1905:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1906:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1907:../../../FreeRTOS_9_0/Source/queue.c **** 
1908:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 3349              		.loc 1 1908 0
 3350 0090 7B68     		ldr	r3, [r7, #4]
 3351 0092 FF22     		movs	r2, #255
 3352 0094 83F84420 		strb	r2, [r3, #68]
 3353              	.LBE163:
1909:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1910:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 3354              		.loc 1 1910 0
 3355 0098 FFF7FEFF 		bl	vPortExitCritical
1911:../../../FreeRTOS_9_0/Source/queue.c **** }
 3356              		.loc 1 1911 0
 3357 009c 1037     		adds	r7, r7, #16
 3358              	.LCFI122:
 3359              		.cfi_def_cfa_offset 8
 3360 009e BD46     		mov	sp, r7
 3361              	.LCFI123:
 3362              		.cfi_def_cfa_register 13
 3363              		@ sp needed
 3364 00a0 80BD     		pop	{r7, pc}
 3365              		.cfi_endproc
 3366              	.LFE28:
 3368 00a2 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 3369              		.align	2
 3370              		.thumb
 3371              		.thumb_func
ARM GAS  /tmp/ccWCEgX6.s 			page 98


 3373              	prvIsQueueEmpty:
 3374              	.LFB29:
1912:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1913:../../../FreeRTOS_9_0/Source/queue.c **** 
1914:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:../../../FreeRTOS_9_0/Source/queue.c **** {
 3375              		.loc 1 1915 0
 3376              		.cfi_startproc
 3377              		@ args = 0, pretend = 0, frame = 16
 3378              		@ frame_needed = 1, uses_anonymous_args = 0
 3379 0000 80B5     		push	{r7, lr}
 3380              	.LCFI124:
 3381              		.cfi_def_cfa_offset 8
 3382              		.cfi_offset 7, -8
 3383              		.cfi_offset 14, -4
 3384 0002 84B0     		sub	sp, sp, #16
 3385              	.LCFI125:
 3386              		.cfi_def_cfa_offset 24
 3387 0004 00AF     		add	r7, sp, #0
 3388              	.LCFI126:
 3389              		.cfi_def_cfa_register 7
 3390 0006 7860     		str	r0, [r7, #4]
1916:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1917:../../../FreeRTOS_9_0/Source/queue.c **** 
1918:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 3391              		.loc 1 1918 0
 3392 0008 FFF7FEFF 		bl	vPortEnterCritical
1919:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1920:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 3393              		.loc 1 1920 0
 3394 000c 7B68     		ldr	r3, [r7, #4]
 3395 000e 9B6B     		ldr	r3, [r3, #56]
 3396 0010 002B     		cmp	r3, #0
 3397 0012 02D1     		bne	.L213
1921:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1922:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdTRUE;
 3398              		.loc 1 1922 0
 3399 0014 0123     		movs	r3, #1
 3400 0016 FB60     		str	r3, [r7, #12]
 3401 0018 01E0     		b	.L214
 3402              	.L213:
1923:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1924:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1925:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1926:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFALSE;
 3403              		.loc 1 1926 0
 3404 001a 0023     		movs	r3, #0
 3405 001c FB60     		str	r3, [r7, #12]
 3406              	.L214:
1927:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1928:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1929:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 3407              		.loc 1 1929 0
 3408 001e FFF7FEFF 		bl	vPortExitCritical
1930:../../../FreeRTOS_9_0/Source/queue.c **** 
1931:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 3409              		.loc 1 1931 0
ARM GAS  /tmp/ccWCEgX6.s 			page 99


 3410 0022 FB68     		ldr	r3, [r7, #12]
1932:../../../FreeRTOS_9_0/Source/queue.c **** }
 3411              		.loc 1 1932 0
 3412 0024 1846     		mov	r0, r3
 3413 0026 1037     		adds	r7, r7, #16
 3414              	.LCFI127:
 3415              		.cfi_def_cfa_offset 8
 3416 0028 BD46     		mov	sp, r7
 3417              	.LCFI128:
 3418              		.cfi_def_cfa_register 13
 3419              		@ sp needed
 3420 002a 80BD     		pop	{r7, pc}
 3421              		.cfi_endproc
 3422              	.LFE29:
 3424              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3425              		.align	2
 3426              		.global	xQueueIsQueueEmptyFromISR
 3427              		.thumb
 3428              		.thumb_func
 3430              	xQueueIsQueueEmptyFromISR:
 3431              	.LFB30:
1933:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1934:../../../FreeRTOS_9_0/Source/queue.c **** 
1935:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:../../../FreeRTOS_9_0/Source/queue.c **** {
 3432              		.loc 1 1936 0
 3433              		.cfi_startproc
 3434              		@ args = 0, pretend = 0, frame = 16
 3435              		@ frame_needed = 1, uses_anonymous_args = 0
 3436              		@ link register save eliminated.
 3437 0000 80B4     		push	{r7}
 3438              	.LCFI129:
 3439              		.cfi_def_cfa_offset 4
 3440              		.cfi_offset 7, -4
 3441 0002 85B0     		sub	sp, sp, #20
 3442              	.LCFI130:
 3443              		.cfi_def_cfa_offset 24
 3444 0004 00AF     		add	r7, sp, #0
 3445              	.LCFI131:
 3446              		.cfi_def_cfa_register 7
 3447 0006 7860     		str	r0, [r7, #4]
1937:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1938:../../../FreeRTOS_9_0/Source/queue.c **** 
1939:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( xQueue );
 3448              		.loc 1 1939 0
 3449 0008 7B68     		ldr	r3, [r7, #4]
 3450 000a 002B     		cmp	r3, #0
 3451 000c 09D1     		bne	.L217
 3452              	.LBB164:
 3453              	.LBB165:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3454              		.loc 2 237 0 discriminator 1
 3455              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3456 000e 4FF05003 			mov r3, #80												
 3457 0012 83F31188 		msr basepri, r3											
 3458 0016 BFF36F8F 		isb														
 3459 001a BFF34F8F 		dsb														
ARM GAS  /tmp/ccWCEgX6.s 			page 100


 3460              	
 3461              	@ 0 "" 2
 3462              		.thumb
 3463 001e BB60     		str	r3, [r7, #8]
 3464              	.L218:
 3465              	.LBE165:
 3466              	.LBE164:
 3467              		.loc 1 1939 0 discriminator 1
 3468 0020 FEE7     		b	.L218
 3469              	.L217:
1940:../../../FreeRTOS_9_0/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3470              		.loc 1 1940 0
 3471 0022 7B68     		ldr	r3, [r7, #4]
 3472 0024 9B6B     		ldr	r3, [r3, #56]
 3473 0026 002B     		cmp	r3, #0
 3474 0028 02D1     		bne	.L219
1941:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1942:../../../FreeRTOS_9_0/Source/queue.c **** 		xReturn = pdTRUE;
 3475              		.loc 1 1942 0
 3476 002a 0123     		movs	r3, #1
 3477 002c FB60     		str	r3, [r7, #12]
 3478 002e 01E0     		b	.L220
 3479              	.L219:
1943:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1944:../../../FreeRTOS_9_0/Source/queue.c **** 	else
1945:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1946:../../../FreeRTOS_9_0/Source/queue.c **** 		xReturn = pdFALSE;
 3480              		.loc 1 1946 0
 3481 0030 0023     		movs	r3, #0
 3482 0032 FB60     		str	r3, [r7, #12]
 3483              	.L220:
1947:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1948:../../../FreeRTOS_9_0/Source/queue.c **** 
1949:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 3484              		.loc 1 1949 0
 3485 0034 FB68     		ldr	r3, [r7, #12]
1950:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3486              		.loc 1 1950 0
 3487 0036 1846     		mov	r0, r3
 3488 0038 1437     		adds	r7, r7, #20
 3489              	.LCFI132:
 3490              		.cfi_def_cfa_offset 4
 3491 003a BD46     		mov	sp, r7
 3492              	.LCFI133:
 3493              		.cfi_def_cfa_register 13
 3494              		@ sp needed
 3495 003c 5DF8047B 		ldr	r7, [sp], #4
 3496              	.LCFI134:
 3497              		.cfi_restore 7
 3498              		.cfi_def_cfa_offset 0
 3499 0040 7047     		bx	lr
 3500              		.cfi_endproc
 3501              	.LFE30:
 3503 0042 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
 3504              		.align	2
 3505              		.thumb
 3506              		.thumb_func
ARM GAS  /tmp/ccWCEgX6.s 			page 101


 3508              	prvIsQueueFull:
 3509              	.LFB31:
1951:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1952:../../../FreeRTOS_9_0/Source/queue.c **** 
1953:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:../../../FreeRTOS_9_0/Source/queue.c **** {
 3510              		.loc 1 1954 0
 3511              		.cfi_startproc
 3512              		@ args = 0, pretend = 0, frame = 16
 3513              		@ frame_needed = 1, uses_anonymous_args = 0
 3514 0000 80B5     		push	{r7, lr}
 3515              	.LCFI135:
 3516              		.cfi_def_cfa_offset 8
 3517              		.cfi_offset 7, -8
 3518              		.cfi_offset 14, -4
 3519 0002 84B0     		sub	sp, sp, #16
 3520              	.LCFI136:
 3521              		.cfi_def_cfa_offset 24
 3522 0004 00AF     		add	r7, sp, #0
 3523              	.LCFI137:
 3524              		.cfi_def_cfa_register 7
 3525 0006 7860     		str	r0, [r7, #4]
1955:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1956:../../../FreeRTOS_9_0/Source/queue.c **** 
1957:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 3526              		.loc 1 1957 0
 3527 0008 FFF7FEFF 		bl	vPortEnterCritical
1958:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1959:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3528              		.loc 1 1959 0
 3529 000c 7B68     		ldr	r3, [r7, #4]
 3530 000e 9A6B     		ldr	r2, [r3, #56]
 3531 0010 7B68     		ldr	r3, [r7, #4]
 3532 0012 DB6B     		ldr	r3, [r3, #60]
 3533 0014 9A42     		cmp	r2, r3
 3534 0016 02D1     		bne	.L223
1960:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1961:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdTRUE;
 3535              		.loc 1 1961 0
 3536 0018 0123     		movs	r3, #1
 3537 001a FB60     		str	r3, [r7, #12]
 3538 001c 01E0     		b	.L224
 3539              	.L223:
1962:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1963:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1964:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1965:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFALSE;
 3540              		.loc 1 1965 0
 3541 001e 0023     		movs	r3, #0
 3542 0020 FB60     		str	r3, [r7, #12]
 3543              	.L224:
1966:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1967:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1968:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 3544              		.loc 1 1968 0
 3545 0022 FFF7FEFF 		bl	vPortExitCritical
1969:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccWCEgX6.s 			page 102


1970:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 3546              		.loc 1 1970 0
 3547 0026 FB68     		ldr	r3, [r7, #12]
1971:../../../FreeRTOS_9_0/Source/queue.c **** }
 3548              		.loc 1 1971 0
 3549 0028 1846     		mov	r0, r3
 3550 002a 1037     		adds	r7, r7, #16
 3551              	.LCFI138:
 3552              		.cfi_def_cfa_offset 8
 3553 002c BD46     		mov	sp, r7
 3554              	.LCFI139:
 3555              		.cfi_def_cfa_register 13
 3556              		@ sp needed
 3557 002e 80BD     		pop	{r7, pc}
 3558              		.cfi_endproc
 3559              	.LFE31:
 3561              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3562              		.align	2
 3563              		.global	xQueueIsQueueFullFromISR
 3564              		.thumb
 3565              		.thumb_func
 3567              	xQueueIsQueueFullFromISR:
 3568              	.LFB32:
1972:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1973:../../../FreeRTOS_9_0/Source/queue.c **** 
1974:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:../../../FreeRTOS_9_0/Source/queue.c **** {
 3569              		.loc 1 1975 0
 3570              		.cfi_startproc
 3571              		@ args = 0, pretend = 0, frame = 16
 3572              		@ frame_needed = 1, uses_anonymous_args = 0
 3573              		@ link register save eliminated.
 3574 0000 80B4     		push	{r7}
 3575              	.LCFI140:
 3576              		.cfi_def_cfa_offset 4
 3577              		.cfi_offset 7, -4
 3578 0002 85B0     		sub	sp, sp, #20
 3579              	.LCFI141:
 3580              		.cfi_def_cfa_offset 24
 3581 0004 00AF     		add	r7, sp, #0
 3582              	.LCFI142:
 3583              		.cfi_def_cfa_register 7
 3584 0006 7860     		str	r0, [r7, #4]
1976:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1977:../../../FreeRTOS_9_0/Source/queue.c **** 
1978:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( xQueue );
 3585              		.loc 1 1978 0
 3586 0008 7B68     		ldr	r3, [r7, #4]
 3587 000a 002B     		cmp	r3, #0
 3588 000c 09D1     		bne	.L227
 3589              	.LBB166:
 3590              	.LBB167:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3591              		.loc 2 237 0 discriminator 1
 3592              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3593 000e 4FF05003 			mov r3, #80												
 3594 0012 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccWCEgX6.s 			page 103


 3595 0016 BFF36F8F 		isb														
 3596 001a BFF34F8F 		dsb														
 3597              	
 3598              	@ 0 "" 2
 3599              		.thumb
 3600 001e BB60     		str	r3, [r7, #8]
 3601              	.L228:
 3602              	.LBE167:
 3603              	.LBE166:
 3604              		.loc 1 1978 0 discriminator 1
 3605 0020 FEE7     		b	.L228
 3606              	.L227:
1979:../../../FreeRTOS_9_0/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3607              		.loc 1 1979 0
 3608 0022 7B68     		ldr	r3, [r7, #4]
 3609 0024 9A6B     		ldr	r2, [r3, #56]
 3610 0026 7B68     		ldr	r3, [r7, #4]
 3611 0028 DB6B     		ldr	r3, [r3, #60]
 3612 002a 9A42     		cmp	r2, r3
 3613 002c 02D1     		bne	.L229
1980:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1981:../../../FreeRTOS_9_0/Source/queue.c **** 		xReturn = pdTRUE;
 3614              		.loc 1 1981 0
 3615 002e 0123     		movs	r3, #1
 3616 0030 FB60     		str	r3, [r7, #12]
 3617 0032 01E0     		b	.L230
 3618              	.L229:
1982:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1983:../../../FreeRTOS_9_0/Source/queue.c **** 	else
1984:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1985:../../../FreeRTOS_9_0/Source/queue.c **** 		xReturn = pdFALSE;
 3619              		.loc 1 1985 0
 3620 0034 0023     		movs	r3, #0
 3621 0036 FB60     		str	r3, [r7, #12]
 3622              	.L230:
1986:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1987:../../../FreeRTOS_9_0/Source/queue.c **** 
1988:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 3623              		.loc 1 1988 0
 3624 0038 FB68     		ldr	r3, [r7, #12]
1989:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3625              		.loc 1 1989 0
 3626 003a 1846     		mov	r0, r3
 3627 003c 1437     		adds	r7, r7, #20
 3628              	.LCFI143:
 3629              		.cfi_def_cfa_offset 4
 3630 003e BD46     		mov	sp, r7
 3631              	.LCFI144:
 3632              		.cfi_def_cfa_register 13
 3633              		@ sp needed
 3634 0040 5DF8047B 		ldr	r7, [sp], #4
 3635              	.LCFI145:
 3636              		.cfi_restore 7
 3637              		.cfi_def_cfa_offset 0
 3638 0044 7047     		bx	lr
 3639              		.cfi_endproc
 3640              	.LFE32:
ARM GAS  /tmp/ccWCEgX6.s 			page 104


 3642 0046 00BF     		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3643              		.align	2
 3644              		.global	vQueueAddToRegistry
 3645              		.thumb
 3646              		.thumb_func
 3648              	vQueueAddToRegistry:
 3649              	.LFB33:
1990:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1991:../../../FreeRTOS_9_0/Source/queue.c **** 
1992:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:../../../FreeRTOS_9_0/Source/queue.c **** 
1994:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1996:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
1997:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:../../../FreeRTOS_9_0/Source/queue.c **** 
1999:../../../FreeRTOS_9_0/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:../../../FreeRTOS_9_0/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:../../../FreeRTOS_9_0/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:../../../FreeRTOS_9_0/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2003:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2004:../../../FreeRTOS_9_0/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2006:../../../FreeRTOS_9_0/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:../../../FreeRTOS_9_0/Source/queue.c **** 				posting? */
2008:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2010:../../../FreeRTOS_9_0/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:../../../FreeRTOS_9_0/Source/queue.c **** 					return indicating that we need to block. */
2012:../../../FreeRTOS_9_0/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:../../../FreeRTOS_9_0/Source/queue.c **** 					portENABLE_INTERRUPTS();
2014:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_BLOCKED;
2015:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2016:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2017:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2018:../../../FreeRTOS_9_0/Source/queue.c **** 					portENABLE_INTERRUPTS();
2019:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_FULL;
2020:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2021:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2022:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2023:../../../FreeRTOS_9_0/Source/queue.c **** 		portENABLE_INTERRUPTS();
2024:../../../FreeRTOS_9_0/Source/queue.c **** 
2025:../../../FreeRTOS_9_0/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2026:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2027:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2029:../../../FreeRTOS_9_0/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:../../../FreeRTOS_9_0/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = pdPASS;
2032:../../../FreeRTOS_9_0/Source/queue.c **** 
2033:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2036:../../../FreeRTOS_9_0/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:../../../FreeRTOS_9_0/Source/queue.c **** 					into the ready list as we are within a critical section.
2038:../../../FreeRTOS_9_0/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:../../../FreeRTOS_9_0/Source/queue.c **** 					the event were caused from within an interrupt. */
ARM GAS  /tmp/ccWCEgX6.s 			page 105


2040:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2042:../../../FreeRTOS_9_0/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:../../../FreeRTOS_9_0/Source/queue.c **** 						that a yield might be appropriate. */
2044:../../../FreeRTOS_9_0/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2046:../../../FreeRTOS_9_0/Source/queue.c **** 					else
2047:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2048:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2050:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2051:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2052:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2053:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2055:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2056:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2057:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2058:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2059:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2060:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2061:../../../FreeRTOS_9_0/Source/queue.c **** 		portENABLE_INTERRUPTS();
2062:../../../FreeRTOS_9_0/Source/queue.c **** 
2063:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
2064:../../../FreeRTOS_9_0/Source/queue.c **** 	}
2065:../../../FreeRTOS_9_0/Source/queue.c **** 
2066:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2068:../../../FreeRTOS_9_0/Source/queue.c **** 
2069:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:../../../FreeRTOS_9_0/Source/queue.c **** 
2071:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:../../../FreeRTOS_9_0/Source/queue.c **** 	{
2073:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
2074:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:../../../FreeRTOS_9_0/Source/queue.c **** 
2076:../../../FreeRTOS_9_0/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:../../../FreeRTOS_9_0/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:../../../FreeRTOS_9_0/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:../../../FreeRTOS_9_0/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2080:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2081:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2083:../../../FreeRTOS_9_0/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:../../../FreeRTOS_9_0/Source/queue.c **** 				leave with nothing? */
2085:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2087:../../../FreeRTOS_9_0/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:../../../FreeRTOS_9_0/Source/queue.c **** 					indicating that we need to block. */
2089:../../../FreeRTOS_9_0/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:../../../FreeRTOS_9_0/Source/queue.c **** 					portENABLE_INTERRUPTS();
2091:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_BLOCKED;
2092:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2093:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2094:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2095:../../../FreeRTOS_9_0/Source/queue.c **** 					portENABLE_INTERRUPTS();
2096:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_FULL;
ARM GAS  /tmp/ccWCEgX6.s 			page 106


2097:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2098:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2099:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2100:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2101:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2103:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2104:../../../FreeRTOS_9_0/Source/queue.c **** 		portENABLE_INTERRUPTS();
2105:../../../FreeRTOS_9_0/Source/queue.c **** 
2106:../../../FreeRTOS_9_0/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2107:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2108:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2110:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Data is available from the queue. */
2111:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:../../../FreeRTOS_9_0/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2114:../../../FreeRTOS_9_0/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2116:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2117:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2118:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2120:../../../FreeRTOS_9_0/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:../../../FreeRTOS_9_0/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:../../../FreeRTOS_9_0/Source/queue.c **** 
2123:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = pdPASS;
2124:../../../FreeRTOS_9_0/Source/queue.c **** 
2125:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2128:../../../FreeRTOS_9_0/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:../../../FreeRTOS_9_0/Source/queue.c **** 					into the ready list as we are within a critical section.
2130:../../../FreeRTOS_9_0/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:../../../FreeRTOS_9_0/Source/queue.c **** 					the event were caused from within an interrupt. */
2132:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2134:../../../FreeRTOS_9_0/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2136:../../../FreeRTOS_9_0/Source/queue.c **** 					else
2137:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2138:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2140:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2141:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2142:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2143:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2145:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2146:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2147:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2148:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = pdFAIL;
2149:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2150:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2151:../../../FreeRTOS_9_0/Source/queue.c **** 		portENABLE_INTERRUPTS();
2152:../../../FreeRTOS_9_0/Source/queue.c **** 
2153:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
ARM GAS  /tmp/ccWCEgX6.s 			page 107


2154:../../../FreeRTOS_9_0/Source/queue.c **** 	}
2155:../../../FreeRTOS_9_0/Source/queue.c **** 
2156:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2158:../../../FreeRTOS_9_0/Source/queue.c **** 
2159:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:../../../FreeRTOS_9_0/Source/queue.c **** 
2161:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:../../../FreeRTOS_9_0/Source/queue.c **** 	{
2163:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:../../../FreeRTOS_9_0/Source/queue.c **** 
2165:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:../../../FreeRTOS_9_0/Source/queue.c **** 		exit without doing anything. */
2167:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2169:../../../FreeRTOS_9_0/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:../../../FreeRTOS_9_0/Source/queue.c **** 
2171:../../../FreeRTOS_9_0/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:../../../FreeRTOS_9_0/Source/queue.c **** 			co-routine has not already been woken. */
2173:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2175:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2177:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2179:../../../FreeRTOS_9_0/Source/queue.c **** 						return pdTRUE;
2180:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2181:../../../FreeRTOS_9_0/Source/queue.c **** 					else
2182:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2183:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2185:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2186:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2187:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2188:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2190:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2191:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2192:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2193:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2195:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2196:../../../FreeRTOS_9_0/Source/queue.c **** 		else
2197:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2198:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2200:../../../FreeRTOS_9_0/Source/queue.c **** 
2201:../../../FreeRTOS_9_0/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:../../../FreeRTOS_9_0/Source/queue.c **** 	}
2203:../../../FreeRTOS_9_0/Source/queue.c **** 
2204:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2206:../../../FreeRTOS_9_0/Source/queue.c **** 
2207:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:../../../FreeRTOS_9_0/Source/queue.c **** 
2209:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:../../../FreeRTOS_9_0/Source/queue.c **** 	{
ARM GAS  /tmp/ccWCEgX6.s 			page 108


2211:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
2212:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:../../../FreeRTOS_9_0/Source/queue.c **** 
2214:../../../FreeRTOS_9_0/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:../../../FreeRTOS_9_0/Source/queue.c **** 		not then just leave without doing anything. */
2216:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2218:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Copy the data from the queue. */
2219:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2222:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2224:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2225:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2226:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2228:../../../FreeRTOS_9_0/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:../../../FreeRTOS_9_0/Source/queue.c **** 
2231:../../../FreeRTOS_9_0/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2233:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2235:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2237:../../../FreeRTOS_9_0/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2239:../../../FreeRTOS_9_0/Source/queue.c **** 					else
2240:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2241:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2243:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2244:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2245:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2246:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2248:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2249:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2250:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2251:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2253:../../../FreeRTOS_9_0/Source/queue.c **** 
2254:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
2255:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2256:../../../FreeRTOS_9_0/Source/queue.c **** 		else
2257:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2258:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFAIL;
2259:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2260:../../../FreeRTOS_9_0/Source/queue.c **** 
2261:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
2262:../../../FreeRTOS_9_0/Source/queue.c **** 	}
2263:../../../FreeRTOS_9_0/Source/queue.c **** 
2264:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2266:../../../FreeRTOS_9_0/Source/queue.c **** 
2267:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
ARM GAS  /tmp/ccWCEgX6.s 			page 109


2268:../../../FreeRTOS_9_0/Source/queue.c **** 
2269:../../../FreeRTOS_9_0/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 3650              		.loc 1 2270 0
 3651              		.cfi_startproc
 3652              		@ args = 0, pretend = 0, frame = 16
 3653              		@ frame_needed = 1, uses_anonymous_args = 0
 3654 0000 80B5     		push	{r7, lr}
 3655              	.LCFI146:
 3656              		.cfi_def_cfa_offset 8
 3657              		.cfi_offset 7, -8
 3658              		.cfi_offset 14, -4
 3659 0002 84B0     		sub	sp, sp, #16
 3660              	.LCFI147:
 3661              		.cfi_def_cfa_offset 24
 3662 0004 00AF     		add	r7, sp, #0
 3663              	.LCFI148:
 3664              		.cfi_def_cfa_register 7
 3665 0006 7860     		str	r0, [r7, #4]
 3666 0008 3960     		str	r1, [r7]
2271:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t ux;
2272:../../../FreeRTOS_9_0/Source/queue.c **** 
2273:../../../FreeRTOS_9_0/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:../../../FreeRTOS_9_0/Source/queue.c **** 		a free slot. */
2275:../../../FreeRTOS_9_0/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3667              		.loc 1 2275 0
 3668 000a 0023     		movs	r3, #0
 3669 000c FB60     		str	r3, [r7, #12]
 3670 000e 1FE0     		b	.L233
 3671              	.L236:
2276:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2277:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3672              		.loc 1 2277 0
 3673 0010 124A     		ldr	r2, .L237
 3674 0012 FB68     		ldr	r3, [r7, #12]
 3675 0014 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3676 0018 002B     		cmp	r3, #0
 3677 001a 16D1     		bne	.L234
2278:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2279:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Store the information on this queue. */
2280:../../../FreeRTOS_9_0/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3678              		.loc 1 2280 0
 3679 001c 0F49     		ldr	r1, .L237
 3680 001e FB68     		ldr	r3, [r7, #12]
 3681 0020 3A68     		ldr	r2, [r7]
 3682 0022 41F83320 		str	r2, [r1, r3, lsl #3]
2281:../../../FreeRTOS_9_0/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3683              		.loc 1 2281 0
 3684 0026 0D4A     		ldr	r2, .L237
 3685 0028 FB68     		ldr	r3, [r7, #12]
 3686 002a DB00     		lsls	r3, r3, #3
 3687 002c 1344     		add	r3, r3, r2
 3688 002e 7A68     		ldr	r2, [r7, #4]
 3689 0030 5A60     		str	r2, [r3, #4]
2282:../../../FreeRTOS_9_0/Source/queue.c **** 
2283:../../../FreeRTOS_9_0/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 3690              		.loc 1 2283 0
ARM GAS  /tmp/ccWCEgX6.s 			page 110


 3691 0032 7B68     		ldr	r3, [r7, #4]
 3692 0034 1846     		mov	r0, r3
 3693 0036 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3694 003a 0246     		mov	r2, r0
 3695 003c 3B68     		ldr	r3, [r7]
 3696 003e 7120     		movs	r0, #113
 3697 0040 1146     		mov	r1, r2
 3698 0042 1A46     		mov	r2, r3
 3699 0044 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
2284:../../../FreeRTOS_9_0/Source/queue.c **** 				break;
 3700              		.loc 1 2284 0
 3701 0048 05E0     		b	.L232
 3702              	.L234:
2275:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3703              		.loc 1 2275 0 discriminator 2
 3704 004a FB68     		ldr	r3, [r7, #12]
 3705 004c 0133     		adds	r3, r3, #1
 3706 004e FB60     		str	r3, [r7, #12]
 3707              	.L233:
2275:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3708              		.loc 1 2275 0 is_stmt 0 discriminator 1
 3709 0050 FB68     		ldr	r3, [r7, #12]
 3710 0052 072B     		cmp	r3, #7
 3711 0054 DCD9     		bls	.L236
 3712              	.L232:
2285:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2286:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2287:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2288:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2289:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2290:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2291:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 3713              		.loc 1 2291 0 is_stmt 1
 3714 0056 1037     		adds	r7, r7, #16
 3715              	.LCFI149:
 3716              		.cfi_def_cfa_offset 8
 3717 0058 BD46     		mov	sp, r7
 3718              	.LCFI150:
 3719              		.cfi_def_cfa_register 13
 3720              		@ sp needed
 3721 005a 80BD     		pop	{r7, pc}
 3722              	.L238:
 3723              		.align	2
 3724              	.L237:
 3725 005c 00000000 		.word	xQueueRegistry
 3726              		.cfi_endproc
 3727              	.LFE33:
 3729              		.section	.text.pcQueueGetName,"ax",%progbits
 3730              		.align	2
 3731              		.global	pcQueueGetName
 3732              		.thumb
 3733              		.thumb_func
 3735              	pcQueueGetName:
 3736              	.LFB34:
2292:../../../FreeRTOS_9_0/Source/queue.c **** 
2293:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccWCEgX6.s 			page 111


2295:../../../FreeRTOS_9_0/Source/queue.c **** 
2296:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:../../../FreeRTOS_9_0/Source/queue.c **** 
2298:../../../FreeRTOS_9_0/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 3737              		.loc 1 2299 0
 3738              		.cfi_startproc
 3739              		@ args = 0, pretend = 0, frame = 16
 3740              		@ frame_needed = 1, uses_anonymous_args = 0
 3741              		@ link register save eliminated.
 3742 0000 80B4     		push	{r7}
 3743              	.LCFI151:
 3744              		.cfi_def_cfa_offset 4
 3745              		.cfi_offset 7, -4
 3746 0002 85B0     		sub	sp, sp, #20
 3747              	.LCFI152:
 3748              		.cfi_def_cfa_offset 24
 3749 0004 00AF     		add	r7, sp, #0
 3750              	.LCFI153:
 3751              		.cfi_def_cfa_register 7
 3752 0006 7860     		str	r0, [r7, #4]
2300:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t ux;
2301:../../../FreeRTOS_9_0/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
 3753              		.loc 1 2301 0
 3754 0008 0023     		movs	r3, #0
 3755 000a BB60     		str	r3, [r7, #8]
2302:../../../FreeRTOS_9_0/Source/queue.c **** 
2303:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:../../../FreeRTOS_9_0/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2305:../../../FreeRTOS_9_0/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3756              		.loc 1 2305 0
 3757 000c 0023     		movs	r3, #0
 3758 000e FB60     		str	r3, [r7, #12]
 3759 0010 10E0     		b	.L240
 3760              	.L243:
2306:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2307:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3761              		.loc 1 2307 0
 3762 0012 0D4A     		ldr	r2, .L245
 3763 0014 FB68     		ldr	r3, [r7, #12]
 3764 0016 DB00     		lsls	r3, r3, #3
 3765 0018 1344     		add	r3, r3, r2
 3766 001a 5A68     		ldr	r2, [r3, #4]
 3767 001c 7B68     		ldr	r3, [r7, #4]
 3768 001e 9A42     		cmp	r2, r3
 3769 0020 05D1     		bne	.L241
2308:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2309:../../../FreeRTOS_9_0/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3770              		.loc 1 2309 0
 3771 0022 094A     		ldr	r2, .L245
 3772 0024 FB68     		ldr	r3, [r7, #12]
 3773 0026 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3774 002a BB60     		str	r3, [r7, #8]
2310:../../../FreeRTOS_9_0/Source/queue.c **** 				break;
 3775              		.loc 1 2310 0
 3776 002c 05E0     		b	.L242
 3777              	.L241:
ARM GAS  /tmp/ccWCEgX6.s 			page 112


2305:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3778              		.loc 1 2305 0 discriminator 2
 3779 002e FB68     		ldr	r3, [r7, #12]
 3780 0030 0133     		adds	r3, r3, #1
 3781 0032 FB60     		str	r3, [r7, #12]
 3782              	.L240:
2305:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3783              		.loc 1 2305 0 is_stmt 0 discriminator 1
 3784 0034 FB68     		ldr	r3, [r7, #12]
 3785 0036 072B     		cmp	r3, #7
 3786 0038 EBD9     		bls	.L243
 3787              	.L242:
2311:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2312:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2313:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2314:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2315:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2316:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2317:../../../FreeRTOS_9_0/Source/queue.c **** 
2318:../../../FreeRTOS_9_0/Source/queue.c **** 		return pcReturn;
 3788              		.loc 1 2318 0 is_stmt 1
 3789 003a BB68     		ldr	r3, [r7, #8]
2319:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 3790              		.loc 1 2319 0
 3791 003c 1846     		mov	r0, r3
 3792 003e 1437     		adds	r7, r7, #20
 3793              	.LCFI154:
 3794              		.cfi_def_cfa_offset 4
 3795 0040 BD46     		mov	sp, r7
 3796              	.LCFI155:
 3797              		.cfi_def_cfa_register 13
 3798              		@ sp needed
 3799 0042 5DF8047B 		ldr	r7, [sp], #4
 3800              	.LCFI156:
 3801              		.cfi_restore 7
 3802              		.cfi_def_cfa_offset 0
 3803 0046 7047     		bx	lr
 3804              	.L246:
 3805              		.align	2
 3806              	.L245:
 3807 0048 00000000 		.word	xQueueRegistry
 3808              		.cfi_endproc
 3809              	.LFE34:
 3811              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3812              		.align	2
 3813              		.global	vQueueUnregisterQueue
 3814              		.thumb
 3815              		.thumb_func
 3817              	vQueueUnregisterQueue:
 3818              	.LFB35:
2320:../../../FreeRTOS_9_0/Source/queue.c **** 
2321:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2323:../../../FreeRTOS_9_0/Source/queue.c **** 
2324:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:../../../FreeRTOS_9_0/Source/queue.c **** 
2326:../../../FreeRTOS_9_0/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
ARM GAS  /tmp/ccWCEgX6.s 			page 113


2327:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 3819              		.loc 1 2327 0
 3820              		.cfi_startproc
 3821              		@ args = 0, pretend = 0, frame = 16
 3822              		@ frame_needed = 1, uses_anonymous_args = 0
 3823              		@ link register save eliminated.
 3824 0000 80B4     		push	{r7}
 3825              	.LCFI157:
 3826              		.cfi_def_cfa_offset 4
 3827              		.cfi_offset 7, -4
 3828 0002 85B0     		sub	sp, sp, #20
 3829              	.LCFI158:
 3830              		.cfi_def_cfa_offset 24
 3831 0004 00AF     		add	r7, sp, #0
 3832              	.LCFI159:
 3833              		.cfi_def_cfa_register 7
 3834 0006 7860     		str	r0, [r7, #4]
2328:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t ux;
2329:../../../FreeRTOS_9_0/Source/queue.c **** 
2330:../../../FreeRTOS_9_0/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:../../../FreeRTOS_9_0/Source/queue.c **** 		registry. */
2332:../../../FreeRTOS_9_0/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3835              		.loc 1 2332 0
 3836 0008 0023     		movs	r3, #0
 3837 000a FB60     		str	r3, [r7, #12]
 3838 000c 16E0     		b	.L248
 3839              	.L251:
2333:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2334:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3840              		.loc 1 2334 0
 3841 000e 0F4A     		ldr	r2, .L252
 3842 0010 FB68     		ldr	r3, [r7, #12]
 3843 0012 DB00     		lsls	r3, r3, #3
 3844 0014 1344     		add	r3, r3, r2
 3845 0016 5A68     		ldr	r2, [r3, #4]
 3846 0018 7B68     		ldr	r3, [r7, #4]
 3847 001a 9A42     		cmp	r2, r3
 3848 001c 0BD1     		bne	.L249
2335:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2336:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:../../../FreeRTOS_9_0/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3849              		.loc 1 2337 0
 3850 001e 0B4A     		ldr	r2, .L252
 3851 0020 FB68     		ldr	r3, [r7, #12]
 3852 0022 0021     		movs	r1, #0
 3853 0024 42F83310 		str	r1, [r2, r3, lsl #3]
2338:../../../FreeRTOS_9_0/Source/queue.c **** 
2339:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:../../../FreeRTOS_9_0/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:../../../FreeRTOS_9_0/Source/queue.c **** 				added again. */
2342:../../../FreeRTOS_9_0/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3854              		.loc 1 2342 0
 3855 0028 084A     		ldr	r2, .L252
 3856 002a FB68     		ldr	r3, [r7, #12]
 3857 002c DB00     		lsls	r3, r3, #3
 3858 002e 1344     		add	r3, r3, r2
 3859 0030 0022     		movs	r2, #0
ARM GAS  /tmp/ccWCEgX6.s 			page 114


 3860 0032 5A60     		str	r2, [r3, #4]
2343:../../../FreeRTOS_9_0/Source/queue.c **** 				break;
 3861              		.loc 1 2343 0
 3862 0034 05E0     		b	.L247
 3863              	.L249:
2332:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3864              		.loc 1 2332 0 discriminator 2
 3865 0036 FB68     		ldr	r3, [r7, #12]
 3866 0038 0133     		adds	r3, r3, #1
 3867 003a FB60     		str	r3, [r7, #12]
 3868              	.L248:
2332:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3869              		.loc 1 2332 0 is_stmt 0 discriminator 1
 3870 003c FB68     		ldr	r3, [r7, #12]
 3871 003e 072B     		cmp	r3, #7
 3872 0040 E5D9     		bls	.L251
 3873              	.L247:
2344:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2345:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2346:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2347:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2348:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2349:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2350:../../../FreeRTOS_9_0/Source/queue.c **** 
2351:../../../FreeRTOS_9_0/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3874              		.loc 1 2351 0 is_stmt 1
 3875 0042 1437     		adds	r7, r7, #20
 3876              	.LCFI160:
 3877              		.cfi_def_cfa_offset 4
 3878 0044 BD46     		mov	sp, r7
 3879              	.LCFI161:
 3880              		.cfi_def_cfa_register 13
 3881              		@ sp needed
 3882 0046 5DF8047B 		ldr	r7, [sp], #4
 3883              	.LCFI162:
 3884              		.cfi_restore 7
 3885              		.cfi_def_cfa_offset 0
 3886 004a 7047     		bx	lr
 3887              	.L253:
 3888              		.align	2
 3889              	.L252:
 3890 004c 00000000 		.word	xQueueRegistry
 3891              		.cfi_endproc
 3892              	.LFE35:
 3894              		.text
 3895              	.Letext0:
 3896              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 3897              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3898              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3899              		.file 6 "../../../FreeRTOS_9_0/Source/include/list.h"
 3900              		.file 7 "../../../FreeRTOS_9_0/Source/include/task.h"
 3901              		.file 8 "../../../FreeRTOS_9_0/Source/include/queue.h"
ARM GAS  /tmp/ccWCEgX6.s 			page 115


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/ccWCEgX6.s:22     .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccWCEgX6.s:27     .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccWCEgX6.s:173    .text.xQueueGenericReset:00000000000000cc $d
     /tmp/ccWCEgX6.s:178    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccWCEgX6.s:183    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccWCEgX6.s:286    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccWCEgX6.s:282    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccWCEgX6.s:357    .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccWCEgX6.s:361    .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccWCEgX6.s:776    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccWCEgX6.s:415    .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccWCEgX6.s:420    .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccWCEgX6.s:470    .text.xQueueGiveMutexRecursive:0000000000000000 $t
     /tmp/ccWCEgX6.s:475    .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
     /tmp/ccWCEgX6.s:569    .text.xQueueTakeMutexRecursive:0000000000000000 $t
     /tmp/ccWCEgX6.s:574    .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
     /tmp/ccWCEgX6.s:1695   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
     /tmp/ccWCEgX6.s:671    .text.xQueueCreateCountingSemaphore:0000000000000000 $t
     /tmp/ccWCEgX6.s:676    .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
     /tmp/ccWCEgX6.s:771    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccWCEgX6.s:3013   .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccWCEgX6.s:3508   .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccWCEgX6.s:3242   .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccWCEgX6.s:1172   .text.xQueueGenericSend:0000000000000248 $d
     /tmp/ccWCEgX6.s:1177   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccWCEgX6.s:1182   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccWCEgX6.s:1442   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccWCEgX6.s:1447   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccWCEgX6.s:1690   .text.xQueueGenericReceive:0000000000000000 $t
     /tmp/ccWCEgX6.s:3170   .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccWCEgX6.s:3373   .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccWCEgX6.s:2136   .text.xQueueGenericReceive:00000000000002b8 $d
     /tmp/ccWCEgX6.s:2141   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccWCEgX6.s:2146   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccWCEgX6.s:2375   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccWCEgX6.s:2380   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccWCEgX6.s:2588   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccWCEgX6.s:2593   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccWCEgX6.s:2657   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccWCEgX6.s:2662   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccWCEgX6.s:2732   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccWCEgX6.s:2737   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccWCEgX6.s:2801   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccWCEgX6.s:2806   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/ccWCEgX6.s:3817   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccWCEgX6.s:2876   .text.uxQueueGetQueueNumber:0000000000000000 $t
     /tmp/ccWCEgX6.s:2881   .text.uxQueueGetQueueNumber:0000000000000000 uxQueueGetQueueNumber
     /tmp/ccWCEgX6.s:2920   .text.vQueueSetQueueNumber:0000000000000000 $t
     /tmp/ccWCEgX6.s:2925   .text.vQueueSetQueueNumber:0000000000000000 vQueueSetQueueNumber
     /tmp/ccWCEgX6.s:2965   .text.ucQueueGetQueueType:0000000000000000 $t
     /tmp/ccWCEgX6.s:2970   .text.ucQueueGetQueueType:0000000000000000 ucQueueGetQueueType
     /tmp/ccWCEgX6.s:3009   .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccWCEgX6.s:3166   .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccWCEgX6.s:3238   .text.prvUnlockQueue:0000000000000000 $t
ARM GAS  /tmp/ccWCEgX6.s 			page 116


     /tmp/ccWCEgX6.s:3369   .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccWCEgX6.s:3425   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccWCEgX6.s:3430   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccWCEgX6.s:3504   .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccWCEgX6.s:3562   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccWCEgX6.s:3567   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccWCEgX6.s:3643   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccWCEgX6.s:3648   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/ccWCEgX6.s:3725   .text.vQueueAddToRegistry:000000000000005c $d
     /tmp/ccWCEgX6.s:3730   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccWCEgX6.s:3735   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccWCEgX6.s:3807   .text.pcQueueGetName:0000000000000048 $d
     /tmp/ccWCEgX6.s:3812   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccWCEgX6.s:3890   .text.vQueueUnregisterQueue:000000000000004c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
SEGGER_SYSVIEW_RecordU32x3
xTaskGetCurrentTaskHandle
xTaskGetSchedulerState
SEGGER_SYSVIEW_ShrinkId
SYSVIEW_RecordU32x4
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
SEGGER_SYSVIEW_RecordU32x2
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
SEGGER_SYSVIEW_RecordU32
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield

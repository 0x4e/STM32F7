ARM GAS  /tmp/cc3wfdLm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"FreeRTOS_IP.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	xNetworkEventQueue
  21              		.section	.bss.xNetworkEventQueue,"aw",%nobits
  22              		.align	2
  25              	xNetworkEventQueue:
  26 0000 00000000 		.space	4
  27              		.global	usPacketIdentifier
  28              		.section	.bss.usPacketIdentifier,"aw",%nobits
  29              		.align	1
  32              	usPacketIdentifier:
  33 0000 0000     		.space	2
  34              		.global	xBroadcastMACAddress
  35              		.section	.rodata.xBroadcastMACAddress,"a",%progbits
  36              		.align	2
  39              	xBroadcastMACAddress:
  40 0000 FF       		.byte	-1
  41 0001 FF       		.byte	-1
  42 0002 FF       		.byte	-1
  43 0003 FF       		.byte	-1
  44 0004 FF       		.byte	-1
  45 0005 FF       		.byte	-1
  46              		.global	xNetworkAddressing
  47              		.section	.bss.xNetworkAddressing,"aw",%nobits
  48              		.align	2
  51              	xNetworkAddressing:
  52 0000 00000000 		.space	20
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              		.global	xDefaultAddressing
  54              		.section	.bss.xDefaultAddressing,"aw",%nobits
  55              		.align	2
  58              	xDefaultAddressing:
  59 0000 00000000 		.space	20
  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
ARM GAS  /tmp/cc3wfdLm.s 			page 2


  60              		.section	.bss.xNetworkDownEventPending,"aw",%nobits
  61              		.align	2
  64              	xNetworkDownEventPending:
  65 0000 00000000 		.space	4
  66              		.section	.bss.xIPTaskHandle,"aw",%nobits
  67              		.align	2
  70              	xIPTaskHandle:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xProcessedTCPMessage,"aw",%nobits
  73              		.align	2
  76              	xProcessedTCPMessage:
  77 0000 00000000 		.space	4
  78              		.section	.bss.xNetworkUp,"aw",%nobits
  79              		.align	2
  82              	xNetworkUp:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xARPTimer,"aw",%nobits
  85              		.align	2
  88              	xARPTimer:
  89 0000 00000000 		.space	20
  89      00000000 
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.section	.bss.xDHCPTimer,"aw",%nobits
  91              		.align	2
  94              	xDHCPTimer:
  95 0000 00000000 		.space	20
  95      00000000 
  95      00000000 
  95      00000000 
  95      00000000 
  96              		.section	.bss.xTCPTimer,"aw",%nobits
  97              		.align	2
 100              	xTCPTimer:
 101 0000 00000000 		.space	20
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.section	.bss.xDNSTimer,"aw",%nobits
 103              		.align	2
 106              	xDNSTimer:
 107 0000 00000000 		.space	20
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.section	.bss.xIPTaskInitialised,"aw",%nobits
 109              		.align	2
 112              	xIPTaskInitialised:
 113 0000 00000000 		.space	4
 114              		.section	.text.prvIPTask,"ax",%progbits
 115              		.align	2
 116              		.thumb
 117              		.thumb_func
 119              	prvIPTask:
ARM GAS  /tmp/cc3wfdLm.s 			page 3


 120              	.LFB29:
 121              		.file 1 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
ARM GAS  /tmp/cc3wfdLm.s 			page 4


  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Standard includes. */
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <stdint.h>
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <stdio.h>
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <string.h>
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* FreeRTOS includes. */
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS.h"
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "task.h"
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "queue.h"
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "semphr.h"
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* FreeRTOS+TCP includes. */
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_IP.h"
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_Sockets.h"
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_IP_Private.h"
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_ARP.h"
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_UDP_IP.h"
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_TCP_IP.h"
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_DHCP.h"
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "NetworkInterface.h"
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "NetworkBufferManagement.h"
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_DNS.h"
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used to ensure the structure packing is having the desired effect.  The
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 'volatile' is used to prevent compiler warnings about comparing a constant with
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** a constant. */
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_EthernetHeader_t_SIZE	( ( size_t ) 14 )
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_ARPHeader_t_SIZE			( ( size_t ) 28 )
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_IPHeader_t_SIZE			( ( size_t ) 20 )
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_IGMPHeader__SIZE			( ( size_t ) 8 )
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_ICMPHeader_t_SIZE		( ( size_t ) 8 )
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_UDPHeader_t_SIZE			( ( size_t ) 8 )
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_TCPHeader_t_SIZE			( ( size_t ) 20 )
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* ICMP protocol definitions. */
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipICMP_ECHO_REQUEST				( ( uint8_t ) 8 )
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipICMP_ECHO_REPLY				( ( uint8_t ) 0 )
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Time delay between repeated attempts to initialise the network hardware. */
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipINITIALISATION_RETRY_DELAY	( pdMS_TO_TICKS( 3000 ) )
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Defines how often the ARP timer callback function is executed.  The time is
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** shorted in the Windows simulator as simulated time is not real time. */
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef	ipARP_TIMER_PERIOD_MS
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#ifdef _WINDOWS_
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipARP_TIMER_PERIOD_MS	( 500 ) /* For windows simulator builds. */
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipARP_TIMER_PERIOD_MS	( 10000 )
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef iptraceIP_TASK_STARTING
ARM GAS  /tmp/cc3wfdLm.s 			page 5


 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define	iptraceIP_TASK_STARTING()	do {} while( 0 )
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ( ipconfigUSE_TCP == 1 ) && !defined( ipTCP_TIMER_PERIOD_MS ) )
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* When initialising the TCP timer,
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	give it an initial time-out of 1 second. */
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipTCP_TIMER_PERIOD_MS	( 1000 )
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the Ethernet
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** driver will filter incoming packets and only pass the stack those packets it
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** considers need processing.  In this case ipCONSIDER_FRAME_FOR_PROCESSING() can
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** be #defined away.  If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 0
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** then the Ethernet driver will pass all received packets to the stack, and the
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** stack must do the filtering itself.  In this case ipCONSIDER_FRAME_FOR_PROCESSING
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** needs to call eConsiderFrameForProcessing. */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipCONSIDER_FRAME_FOR_PROCESSING( pucEthernetBuffer ) eConsiderFrameForProcessing( ( pucEth
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #else
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipCONSIDER_FRAME_FOR_PROCESSING( pucEthernetBuffer ) eProcessBuffer
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The character used to fill ICMP echo requests, and therefore also the
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** character expected to fill ICMP echo replies. */
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipECHO_DATA_FILL_BYTE						'x'
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The bits in the two byte IP header field that make up the fragment offset value. */
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipFRAGMENT_OFFSET_BIT_MASK				( ( uint16_t ) 0xff0f )
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #else
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The bits in the two byte IP header field that make up the fragment offset value. */
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipFRAGMENT_OFFSET_BIT_MASK				( ( uint16_t ) 0x0fff )
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigBYTE_ORDER */
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The maximum time the IP task is allowed to remain in the Blocked state if no
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** events are posted to the network event queue. */
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef	ipconfigMAX_IP_TASK_SLEEP_TIME
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipconfigMAX_IP_TASK_SLEEP_TIME ( pdMS_TO_TICKS( 10000UL ) )
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* When a new TCP connection is established, the value of
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 'ulNextInitialSequenceNumber' will be used as the initial sequence number.  It
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** is very important that at start-up, 'ulNextInitialSequenceNumber' contains a
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** random value.  Also its value must be increased continuously in time, to prevent
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** a third party guessing the next sequence number and take-over a TCP connection.
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** It is advised to increment it by 1 ever 4us, which makes about 256 times
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** per ms: */
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipINITIAL_SEQUENCE_NUMBER_FACTOR	256UL
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned as the (invalid) checksum when the protocol being checked is not
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** handled.  The value is chosen simply to be easy to spot when debugging. */
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipUNHANDLED_PROTOCOL		0x4321u
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned to indicate a valid checksum when the checksum does not need to be
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** calculated. */
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipCORRECT_CRC				0xffffu
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc3wfdLm.s 			page 6


 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned as the (invalid) checksum when the length of the data being checked
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** had an invalid length. */
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipINVALID_LENGTH			0x1234u
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** typedef struct xIP_TIMER
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint32_t
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		bActive : 1,	/* This timer is running and must be processed. */
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		bExpired : 1;	/* Timer has expired and a task must be processed. */
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TimeOut_t xTimeOut;
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TickType_t ulRemainingTime;
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TickType_t ulReloadTime;
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** } IPTimer_t;
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used in checksum calculation. */
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** typedef union _xUnion32
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint32_t u32;
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t u16[ 2 ];
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t u8[ 4 ];
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** } xUnion32;
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used in checksum calculation. */
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** typedef union _xUnionPtr
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint32_t *u32ptr;
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t *u16ptr;
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *u8ptr;
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** } xUnionPtr;
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The main TCP/IP stack processing task.  This task receives commands/events
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * from the network hardware drivers and tasks that are using sockets.  It also
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * maintains a set of protocol timers.
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTask( void *pvParameters );
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Called when new data is available from the network interface.
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer );
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Process incoming IP packets.
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * const pxIPPacket, NetworkBuf
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/*
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 * Process incoming ICMP packets.
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 */
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket );
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
ARM GAS  /tmp/cc3wfdLm.s 			page 7


 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Turns around an incoming ping request to convert it into a ping reply.
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket );
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigREPLY_TO_INCOMING_PINGS */
 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Processes incoming ping replies.  The application callback function
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * vApplicationPingReplyHook() is called with the results.
 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket );
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Called to create a network connection when the stack is first started, or
 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * when the network connection is lost.
 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessNetworkDownEvent( void );
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Checks the ARP, DHCP and TCP timers to see if any periodic or timeout
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * processing is required.
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvCheckNetworkTimers( void );
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Determine how long the IP task can sleep for, which depends on when the next
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * periodic or timeout processing must be performed.
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TickType_t prvCalculateSleepTime( void );
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The network card driver has received a packet.  In the case that it is part
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * of a linked packet chain, walk through it to handle every message.
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer );
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Utility functions for the light weight IP timers.
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime );
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer );
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime );
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength );
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The queue used to pass events into the IP-task for processing. */
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** QueueHandle_t xNetworkEventQueue = NULL;
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_RB_ Requires comment. */
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usPacketIdentifier = 0U;
ARM GAS  /tmp/cc3wfdLm.s 			page 8


 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* For convenience, a MAC address of all 0xffs is defined const for quick
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** reference. */
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const MACAddress_t xBroadcastMACAddress = { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Structure that stores the netmask, gateway address and DNS server addresses. */
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkAddressingParameters_t xNetworkAddressing = { 0, 0, 0, 0, 0 };
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Default values for the above struct in case DHCP
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** does not lead to a confirmed request. */
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkAddressingParameters_t xDefaultAddressing = { 0, 0, 0, 0, 0 };
 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used to ensure network down events cannot be missed when they cannot be
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** posted to the network event queue because the network event queue is already
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** full. */
 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t xNetworkDownEventPending = pdFALSE;
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Stores the handle of the task that handles the stack.  The handle is used
 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** (indirectly) by some utility function to determine if the utility function is
 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** being called by a task (in which case it is ok to block) or by the IP task
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** itself (in which case it is not ok to block). */
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TaskHandle_t xIPTaskHandle = NULL;
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_TCP != 0 )
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Set to a non-zero value if one or more TCP message have been processed
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	within the last round. */
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static BaseType_t xProcessedTCPMessage;
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Simple set to pdTRUE or pdFALSE depending on whether the network is up or
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** down (connected, not connected) respectively. */
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t xNetworkUp = pdFALSE;
 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** A timer for each of the following processes, all of which need attention on a
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** regular basis:
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	1. ARP, to check its table entries
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	2. DPHC, to send requests and to renew a reservation
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	3. TCP, to check for timeouts, resends
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	4. DNS, to check for timeouts when looking-up a domain.
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static IPTimer_t xARPTimer;
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP != 0 )
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xDHCPTimer;
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_TCP != 0 )
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xTCPTimer;
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS != 0 )
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xDNSTimer;
 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Set to pdTRUE when the IP task is ready to start processing packets. */
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t xIPTaskInitialised = pdFALSE;
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Keep track of the lowest amount of space in 'xNetworkEventQueue'. */
ARM GAS  /tmp/cc3wfdLm.s 			page 9


 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static UBaseType_t uxQueueMinimumSpace = ipconfigEVENT_QUEUE_LENGTH;
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTask( void *pvParameters )
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 122              		.loc 1 347 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 32
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0000 80B5     		push	{r7, lr}
 127              	.LCFI0:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 88B0     		sub	sp, sp, #32
 132              	.LCFI1:
 133              		.cfi_def_cfa_offset 40
 134 0004 00AF     		add	r7, sp, #0
 135              	.LCFI2:
 136              		.cfi_def_cfa_register 7
 137 0006 7860     		str	r0, [r7, #4]
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPStackEvent_t xReceivedEvent;
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** TickType_t xNextIPSleep;
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** FreeRTOS_Socket_t *pxSocket;
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** struct freertos_sockaddr xAddress;
 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Just to prevent compiler warnings about unused parameters. */
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	( void ) pvParameters;
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* A possibility to set some additional task properties. */
 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceIP_TASK_STARTING();
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Generate a dummy message to say that the network connection has gone
 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	down.  This will cause this task to initialise the network interface.  After
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	this it is the responsibility of the network interface hardware driver to
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	send this message if a previously connected network is disconnected. */
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOS_NetworkDown();
 138              		.loc 1 363 0
 139 0008 FFF7FEFF 		bl	FreeRTOS_NetworkDown
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Initialise the TCP timer. */
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 140              		.loc 1 368 0
 141 000c 5448     		ldr	r0, .L21
 142 000e 4FF47A71 		mov	r1, #1000
 143 0012 FFF7FEFF 		bl	prvIPTimerReload
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Initialisation is complete and events can now be processed. */
 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xIPTaskInitialised = pdTRUE;
 144              		.loc 1 373 0
 145 0016 534B     		ldr	r3, .L21+4
ARM GAS  /tmp/cc3wfdLm.s 			page 10


 146 0018 0122     		movs	r2, #1
 147 001a 1A60     		str	r2, [r3]
 148              	.L19:
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Loop, processing IP events. */
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	for( ;; )
 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ipconfigWATCHDOG_TIMER();
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		or timeout processing to perform. */
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvCheckNetworkTimers();
 149              		.loc 1 384 0
 150 001c FFF7FEFF 		bl	prvCheckNetworkTimers
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Calculate the acceptable maximum sleep time. */
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNextIPSleep = prvCalculateSleepTime();
 151              		.loc 1 387 0
 152 0020 FFF7FEFF 		bl	prvCalculateSleepTime
 153 0024 F861     		str	r0, [r7, #28]
 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Wait until there is something to do.  The event is initialised to "no
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		event" in case the following call exits due to a time out rather than a
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		message being received. */
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReceivedEvent.eEventType = eNoEvent;
 154              		.loc 1 392 0
 155 0026 FF23     		movs	r3, #255
 156 0028 3B74     		strb	r3, [r7, #16]
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep );
 157              		.loc 1 393 0
 158 002a 4F4B     		ldr	r3, .L21+8
 159 002c 1A68     		ldr	r2, [r3]
 160 002e 07F11003 		add	r3, r7, #16
 161 0032 1046     		mov	r0, r2
 162 0034 1946     		mov	r1, r3
 163 0036 FA69     		ldr	r2, [r7, #28]
 164 0038 0023     		movs	r3, #0
 165 003a FFF7FEFF 		bl	xQueueGenericReceive
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xReceivedEvent.eEventType != eNoEvent )
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			UBaseType_t uxCount;
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( uxQueueMinimumSpace > uxCount )
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					uxQueueMinimumSpace = uxCount;
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */
 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );
ARM GAS  /tmp/cc3wfdLm.s 			page 11


 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( xReceivedEvent.eEventType )
 166              		.loc 1 412 0
 167 003e 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 168 0040 5BB2     		sxtb	r3, r3
 169 0042 0B2B     		cmp	r3, #11
 170 0044 00F28480 		bhi	.L20
 171 0048 01A2     		adr	r2, .L4
 172 004a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 173 004e 00BF     		.p2align 2
 174              	.L4:
 175 0050 81000000 		.word	.L3+1
 176 0054 8D000000 		.word	.L5+1
 177 0058 97000000 		.word	.L6+1
 178 005c F3000000 		.word	.L7+1
 179 0060 FD000000 		.word	.L8+1
 180 0064 19010000 		.word	.L9+1
 181 0068 25010000 		.word	.L10+1
 182 006c 4B010000 		.word	.L11+1
 183 0070 9D000000 		.word	.L12+1
 184 0074 E9000000 		.word	.L13+1
 185 0078 05010000 		.word	.L14+1
 186 007c 0F010000 		.word	.L15+1
 187              		.p2align 1
 188              	.L3:
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eNetworkDownEvent :
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Attempt to establish a connection. */
 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xNetworkUp = pdFALSE;
 189              		.loc 1 416 0
 190 0080 3A4B     		ldr	r3, .L21+12
 191 0082 0022     		movs	r2, #0
 192 0084 1A60     		str	r2, [r3]
 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				prvProcessNetworkDownEvent();
 193              		.loc 1 417 0
 194 0086 FFF7FEFF 		bl	prvProcessNetworkDownEvent
 418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 195              		.loc 1 418 0
 196 008a 62E0     		b	.L16
 197              	.L5:
 419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eNetworkRxEvent:
 421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The network hardware driver has received a new packet.  A
 422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pointer to the received buffer is located in the pvData member
 423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				of the received event structure. */
 424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 198              		.loc 1 424 0
 199 008c 7B69     		ldr	r3, [r7, #20]
 200 008e 1846     		mov	r0, r3
 201 0090 FFF7FEFF 		bl	prvHandleEthernetPacket
 425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 202              		.loc 1 425 0
 203 0094 5DE0     		b	.L16
 204              	.L6:
 426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eARPTimerEvent :
 428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The ARP timer has expired, process the ARP cache. */
ARM GAS  /tmp/cc3wfdLm.s 			page 12


 429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vARPAgeCache();
 205              		.loc 1 429 0
 206 0096 FFF7FEFF 		bl	vARPAgeCache
 430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 207              		.loc 1 430 0
 208 009a 5AE0     		b	.L16
 209              	.L12:
 431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketBindEvent:
 433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
 434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				to a port. The port number is communicated in the socket field
 435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usLocalPort. vSocketBind() will actually bind the socket and the
 436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				API will unblock as soon as the eSOCKET_BOUND event is
 437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				triggered. */
 438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 210              		.loc 1 438 0
 211 009c 7B69     		ldr	r3, [r7, #20]
 212 009e BB61     		str	r3, [r7, #24]
 439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xAddress.sin_addr = 0u;	/* For the moment. */
 213              		.loc 1 439 0
 214 00a0 0023     		movs	r3, #0
 215 00a2 FB60     		str	r3, [r7, #12]
 440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 216              		.loc 1 440 0
 217 00a4 BB69     		ldr	r3, [r7, #24]
 218 00a6 9B8C     		ldrh	r3, [r3, #36]
 219 00a8 1B02     		lsls	r3, r3, #8
 220 00aa 9AB2     		uxth	r2, r3
 221 00ac BB69     		ldr	r3, [r7, #24]
 222 00ae 9B8C     		ldrh	r3, [r3, #36]
 223 00b0 1B0A     		lsrs	r3, r3, #8
 224 00b2 9BB2     		uxth	r3, r3
 225 00b4 9BB2     		uxth	r3, r3
 226 00b6 1343     		orrs	r3, r3, r2
 227 00b8 9BB2     		uxth	r3, r3
 228 00ba 9BB2     		uxth	r3, r3
 229 00bc 7B81     		strh	r3, [r7, #10]	@ movhi
 441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket->usLocalPort = 0u;
 230              		.loc 1 441 0
 231 00be BB69     		ldr	r3, [r7, #24]
 232 00c0 0022     		movs	r2, #0
 233 00c2 9A84     		strh	r2, [r3, #36]	@ movhi
 442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 234              		.loc 1 442 0
 235 00c4 07F10803 		add	r3, r7, #8
 236 00c8 B869     		ldr	r0, [r7, #24]
 237 00ca 1946     		mov	r1, r3
 238 00cc 0822     		movs	r2, #8
 239 00ce 0023     		movs	r3, #0
 240 00d0 FFF7FEFF 		bl	vSocketBind
 443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Before 'eSocketBindEvent' was sent it was tested that
 445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( xEventGroup != NULL ) so it can be used now to wake up the
 446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				user. */
 447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket->xEventBits |= eSOCKET_BOUND;
 241              		.loc 1 447 0
 242 00d4 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cc3wfdLm.s 			page 13


 243 00d6 1B68     		ldr	r3, [r3]
 244 00d8 43F01002 		orr	r2, r3, #16
 245 00dc BB69     		ldr	r3, [r7, #24]
 246 00de 1A60     		str	r2, [r3]
 448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketWakeUpUser( pxSocket );
 247              		.loc 1 448 0
 248 00e0 B869     		ldr	r0, [r7, #24]
 249 00e2 FFF7FEFF 		bl	vSocketWakeUpUser
 449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 250              		.loc 1 449 0
 251 00e6 34E0     		b	.L16
 252              	.L13:
 450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketCloseEvent :
 452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The user API FreeRTOS_closesocket() has sent a message to the
 453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				IP-task to actually close a socket. This is handled in
 454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketClose().  As the socket gets closed, there is no way to
 455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				report back to the API, so the API won't wait for the result */
 456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 253              		.loc 1 456 0
 254 00e8 7B69     		ldr	r3, [r7, #20]
 255 00ea 1846     		mov	r0, r3
 256 00ec FFF7FEFF 		bl	vSocketClose
 457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 257              		.loc 1 457 0
 258 00f0 2FE0     		b	.L16
 259              	.L7:
 458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eStackTxEvent :
 460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The network stack has generated a packet to send.  A
 461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pointer to the generated buffer is located in the pvData
 462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				member of the received event structure. */
 463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 260              		.loc 1 463 0
 261 00f2 7B69     		ldr	r3, [r7, #20]
 262 00f4 1846     		mov	r0, r3
 263 00f6 FFF7FEFF 		bl	vProcessGeneratedUDPPacket
 464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 264              		.loc 1 464 0
 265 00fa 2AE0     		b	.L16
 266              	.L8:
 465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eDHCPEvent:
 467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The DHCP state machine needs processing. */
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_DHCP == 1 )
 469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vDHCPProcess( pdFALSE );
 267              		.loc 1 470 0
 268 00fc 0020     		movs	r0, #0
 269 00fe FFF7FEFF 		bl	vDHCPProcess
 471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_DHCP */
 473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 270              		.loc 1 473 0
 271 0102 26E0     		b	.L16
 272              	.L14:
 474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc3wfdLm.s 			page 14


 475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketSelectEvent :
 476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_select() has got unblocked by a socket event,
 477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketSelect() will check which sockets actually have an event
 478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				and update the socket field xSocketBits. */
 479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 273              		.loc 1 481 0
 274 0104 7B69     		ldr	r3, [r7, #20]
 275 0106 1846     		mov	r0, r3
 276 0108 FFF7FEFF 		bl	vSocketSelect
 482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 277              		.loc 1 484 0
 278 010c 21E0     		b	.L16
 279              	.L15:
 485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketSignalEvent :
 487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigSUPPORT_SIGNALS != 0 )
 488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Some task wants to signal the user of this socket in
 490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					order to interrupt a call to recv() or a call to select(). */
 491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					FreeRTOS_SignalSocket( ( Socket_t ) xReceivedEvent.pvData );
 280              		.loc 1 491 0
 281 010e 7B69     		ldr	r3, [r7, #20]
 282 0110 1846     		mov	r0, r3
 283 0112 FFF7FEFF 		bl	FreeRTOS_SignalSocket
 492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_SIGNALS */
 494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 284              		.loc 1 494 0
 285 0116 1CE0     		b	.L16
 286              	.L9:
 495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPTimerEvent :
 497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_TCP == 1 )
 498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Simply mark the TCP timer as expired so it gets processed
 500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					the next time prvCheckNetworkTimers() is called. */
 501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 287              		.loc 1 501 0
 288 0118 114A     		ldr	r2, .L21
 289 011a 1378     		ldrb	r3, [r2]
 290 011c 43F00203 		orr	r3, r3, #2
 291 0120 1370     		strb	r3, [r2]
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 292              		.loc 1 504 0
 293 0122 16E0     		b	.L16
 294              	.L10:
 505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPAcceptEvent:
 507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The API FreeRTOS_accept() was called, the IP-task will now
 508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				check if the listening socket (communicated in pvData) actually
 509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				received a new connection. */
ARM GAS  /tmp/cc3wfdLm.s 			page 15


 510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_TCP == 1 )
 511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 295              		.loc 1 512 0
 296 0124 7B69     		ldr	r3, [r7, #20]
 297 0126 BB61     		str	r3, [r7, #24]
 513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 298              		.loc 1 514 0
 299 0128 B869     		ldr	r0, [r7, #24]
 300 012a FFF7FEFF 		bl	xTCPCheckNewClient
 301 012e 0346     		mov	r3, r0
 302 0130 002B     		cmp	r3, #0
 303 0132 09D0     		beq	.L17
 515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 304              		.loc 1 516 0
 305 0134 BB69     		ldr	r3, [r7, #24]
 306 0136 1B68     		ldr	r3, [r3]
 307 0138 43F00402 		orr	r2, r3, #4
 308 013c BB69     		ldr	r3, [r7, #24]
 309 013e 1A60     		str	r2, [r3]
 517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						vSocketWakeUpUser( pxSocket );
 310              		.loc 1 517 0
 311 0140 B869     		ldr	r0, [r7, #24]
 312 0142 FFF7FEFF 		bl	vSocketWakeUpUser
 518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 313              		.loc 1 521 0
 314 0146 04E0     		b	.L16
 315              	.L17:
 316 0148 03E0     		b	.L16
 317              	.L11:
 522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPNetStat:
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_netstat() was called to have the IP-task print an
 525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				overview of all sockets and their connections */
 526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
 527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vTCPNetStat();
 318              		.loc 1 528 0
 319 014a FFF7FEFF 		bl	vTCPNetStat
 529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 320              		.loc 1 531 0
 321 014e 00E0     		b	.L16
 322              	.L20:
 532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default :
 534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Should not get here. */
 535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 323              		.loc 1 535 0
 324 0150 00BF     		nop
 325              	.L16:
ARM GAS  /tmp/cc3wfdLm.s 			page 16


 536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xNetworkDownEventPending != pdFALSE )
 326              		.loc 1 538 0
 327 0152 074B     		ldr	r3, .L21+16
 328 0154 1B68     		ldr	r3, [r3]
 329 0156 002B     		cmp	r3, #0
 330 0158 01D0     		beq	.L18
 539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* A network down event could not be posted to the network event
 541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			queue because the queue was full.  Try posting again. */
 542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_NetworkDown();
 331              		.loc 1 542 0
 332 015a FFF7FEFF 		bl	FreeRTOS_NetworkDown
 333              	.L18:
 543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 334              		.loc 1 544 0
 335 015e 5DE7     		b	.L19
 336              	.L22:
 337              		.align	2
 338              	.L21:
 339 0160 00000000 		.word	xTCPTimer
 340 0164 00000000 		.word	xIPTaskInitialised
 341 0168 00000000 		.word	xNetworkEventQueue
 342 016c 00000000 		.word	xNetworkUp
 343 0170 00000000 		.word	xNetworkDownEventPending
 344              		.cfi_endproc
 345              	.LFE29:
 347              		.section	.text.xIsCallingFromIPTask,"ax",%progbits
 348              		.align	2
 349              		.global	xIsCallingFromIPTask
 350              		.thumb
 351              		.thumb_func
 353              	xIsCallingFromIPTask:
 354              	.LFB30:
 545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xIsCallingFromIPTask( void )
 549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 355              		.loc 1 549 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 8
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359 0000 80B5     		push	{r7, lr}
 360              	.LCFI3:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 82B0     		sub	sp, sp, #8
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 16
 367 0004 00AF     		add	r7, sp, #0
 368              	.LCFI5:
 369              		.cfi_def_cfa_register 7
 550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
ARM GAS  /tmp/cc3wfdLm.s 			page 17


 551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 370              		.loc 1 552 0
 371 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 372 000a 0246     		mov	r2, r0
 373 000c 064B     		ldr	r3, .L27
 374 000e 1B68     		ldr	r3, [r3]
 375 0010 9A42     		cmp	r2, r3
 376 0012 02D1     		bne	.L24
 553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdTRUE;
 377              		.loc 1 554 0
 378 0014 0123     		movs	r3, #1
 379 0016 7B60     		str	r3, [r7, #4]
 380 0018 01E0     		b	.L25
 381              	.L24:
 555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFALSE;
 382              		.loc 1 558 0
 383 001a 0023     		movs	r3, #0
 384 001c 7B60     		str	r3, [r7, #4]
 385              	.L25:
 559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 386              		.loc 1 561 0
 387 001e 7B68     		ldr	r3, [r7, #4]
 562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 388              		.loc 1 562 0
 389 0020 1846     		mov	r0, r3
 390 0022 0837     		adds	r7, r7, #8
 391              	.LCFI6:
 392              		.cfi_def_cfa_offset 8
 393 0024 BD46     		mov	sp, r7
 394              	.LCFI7:
 395              		.cfi_def_cfa_register 13
 396              		@ sp needed
 397 0026 80BD     		pop	{r7, pc}
 398              	.L28:
 399              		.align	2
 400              	.L27:
 401 0028 00000000 		.word	xIPTaskHandle
 402              		.cfi_endproc
 403              	.LFE30:
 405              		.section	.text.prvHandleEthernetPacket,"ax",%progbits
 406              		.align	2
 407              		.thumb
 408              		.thumb_func
 410              	prvHandleEthernetPacket:
 411              	.LFB31:
 563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
 566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 412              		.loc 1 566 0
ARM GAS  /tmp/cc3wfdLm.s 			page 18


 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              	.LCFI8:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 82B0     		sub	sp, sp, #8
 422              	.LCFI9:
 423              		.cfi_def_cfa_offset 16
 424 0004 00AF     		add	r7, sp, #0
 425              	.LCFI10:
 426              		.cfi_def_cfa_register 7
 427 0006 7860     		str	r0, [r7, #4]
 567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
 568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
 570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		buffer will be sent at a time.  This is the default way for +TCP to pass
 571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		messages from the MAC to the TCP/IP stack. */
 572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvProcessEthernetPacket( pxBuffer );
 428              		.loc 1 572 0
 429 0008 7868     		ldr	r0, [r7, #4]
 430 000a FFF7FEFF 		bl	prvProcessEthernetPacket
 573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else /* ipconfigUSE_LINKED_RX_MESSAGES */
 575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNextBuffer;
 577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* An optimisation that is useful when there is high network traffic.
 579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		Instead of passing received packets into the IP task one at a time the
 580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		network interface can chain received packets together and pass them into
 581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the IP task in one go.  The packets are chained using the pxNextBuffer
 582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		member.  The loop below walks through the chain processing each packet
 583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		in the chain in turn. */
 584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		do
 585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Store a pointer to the buffer after pxBuffer for use later on. */
 587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNextBuffer = pxBuffer->pxNextBuffer;
 588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Make it NULL to avoid using it later on. */
 590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxBuffer->pxNextBuffer = NULL;
 591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvProcessEthernetPacket( pxBuffer );
 593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxBuffer = pxNextBuffer;
 594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* While there is another packet in the chain. */
 596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		} while( pxBuffer != NULL );
 597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
 599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 431              		.loc 1 599 0
 432 000e 0837     		adds	r7, r7, #8
 433              	.LCFI11:
 434              		.cfi_def_cfa_offset 8
 435 0010 BD46     		mov	sp, r7
 436              	.LCFI12:
ARM GAS  /tmp/cc3wfdLm.s 			page 19


 437              		.cfi_def_cfa_register 13
 438              		@ sp needed
 439 0012 80BD     		pop	{r7, pc}
 440              		.cfi_endproc
 441              	.LFE31:
 443              		.section	.text.prvCalculateSleepTime,"ax",%progbits
 444              		.align	2
 445              		.thumb
 446              		.thumb_func
 448              	prvCalculateSleepTime:
 449              	.LFB32:
 600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TickType_t prvCalculateSleepTime( void )
 603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 450              		.loc 1 603 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 8
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455 0000 80B4     		push	{r7}
 456              	.LCFI13:
 457              		.cfi_def_cfa_offset 4
 458              		.cfi_offset 7, -4
 459 0002 83B0     		sub	sp, sp, #12
 460              	.LCFI14:
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              	.LCFI15:
 464              		.cfi_def_cfa_register 7
 604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** TickType_t xMaximumSleepTime;
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Start with the maximum sleep time, then check this against the remaining
 607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	time in any other timers that are active. */
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 465              		.loc 1 608 0
 466 0006 42F21073 		movw	r3, #10000
 467 000a 7B60     		str	r3, [r7, #4]
 609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 468              		.loc 1 610 0
 469 000c 1D4B     		ldr	r3, .L36
 470 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 471 0010 03F00103 		and	r3, r3, #1
 472 0014 DBB2     		uxtb	r3, r3
 473 0016 002B     		cmp	r3, #0
 474 0018 07D0     		beq	.L31
 611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 475              		.loc 1 612 0
 476 001a 1A4B     		ldr	r3, .L36
 477 001c DA68     		ldr	r2, [r3, #12]
 478 001e 7B68     		ldr	r3, [r7, #4]
 479 0020 9A42     		cmp	r2, r3
 480 0022 02D2     		bcs	.L31
 613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xMaximumSleepTime = xARPTimer.ulReloadTime;
ARM GAS  /tmp/cc3wfdLm.s 			page 20


 481              		.loc 1 614 0
 482 0024 174B     		ldr	r3, .L36
 483 0026 1B69     		ldr	r3, [r3, #16]
 484 0028 7B60     		str	r3, [r7, #4]
 485              	.L31:
 615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_DHCP == 1 )
 619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 486              		.loc 1 620 0
 487 002a 174B     		ldr	r3, .L36+4
 488 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 489 002e 03F00103 		and	r3, r3, #1
 490 0032 DBB2     		uxtb	r3, r3
 491 0034 002B     		cmp	r3, #0
 492 0036 07D0     		beq	.L32
 621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 493              		.loc 1 622 0
 494 0038 134B     		ldr	r3, .L36+4
 495 003a DA68     		ldr	r2, [r3, #12]
 496 003c 7B68     		ldr	r3, [r7, #4]
 497 003e 9A42     		cmp	r2, r3
 498 0040 02D2     		bcs	.L32
 623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 499              		.loc 1 624 0
 500 0042 114B     		ldr	r3, .L36+4
 501 0044 DB68     		ldr	r3, [r3, #12]
 502 0046 7B60     		str	r3, [r7, #4]
 503              	.L32:
 625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_DHCP */
 629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 504              		.loc 1 632 0
 505 0048 104B     		ldr	r3, .L36+8
 506 004a DA68     		ldr	r2, [r3, #12]
 507 004c 7B68     		ldr	r3, [r7, #4]
 508 004e 9A42     		cmp	r2, r3
 509 0050 02D2     		bcs	.L33
 633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 510              		.loc 1 634 0
 511 0052 0E4B     		ldr	r3, .L36+8
 512 0054 DB68     		ldr	r3, [r3, #12]
 513 0056 7B60     		str	r3, [r7, #4]
 514              	.L33:
 635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
ARM GAS  /tmp/cc3wfdLm.s 			page 21


 638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
 640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xDNSTimer.bActive != pdFALSE )
 515              		.loc 1 641 0
 516 0058 0D4B     		ldr	r3, .L36+12
 517 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 005c 03F00103 		and	r3, r3, #1
 519 0060 DBB2     		uxtb	r3, r3
 520 0062 002B     		cmp	r3, #0
 521 0064 07D0     		beq	.L34
 642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xDNSTimer.ulRemainingTime < xMaximumSleepTime )
 522              		.loc 1 643 0
 523 0066 0A4B     		ldr	r3, .L36+12
 524 0068 DA68     		ldr	r2, [r3, #12]
 525 006a 7B68     		ldr	r3, [r7, #4]
 526 006c 9A42     		cmp	r2, r3
 527 006e 02D2     		bcs	.L34
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xMaximumSleepTime = xDNSTimer.ulRemainingTime;
 528              		.loc 1 645 0
 529 0070 074B     		ldr	r3, .L36+12
 530 0072 DB68     		ldr	r3, [r3, #12]
 531 0074 7B60     		str	r3, [r7, #4]
 532              	.L34:
 646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xMaximumSleepTime;
 533              		.loc 1 651 0
 534 0076 7B68     		ldr	r3, [r7, #4]
 652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 535              		.loc 1 652 0
 536 0078 1846     		mov	r0, r3
 537 007a 0C37     		adds	r7, r7, #12
 538              	.LCFI16:
 539              		.cfi_def_cfa_offset 4
 540 007c BD46     		mov	sp, r7
 541              	.LCFI17:
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
 544 007e 5DF8047B 		ldr	r7, [sp], #4
 545              	.LCFI18:
 546              		.cfi_restore 7
 547              		.cfi_def_cfa_offset 0
 548 0082 7047     		bx	lr
 549              	.L37:
 550              		.align	2
 551              	.L36:
 552 0084 00000000 		.word	xARPTimer
 553 0088 00000000 		.word	xDHCPTimer
 554 008c 00000000 		.word	xTCPTimer
 555 0090 00000000 		.word	xDNSTimer
 556              		.cfi_endproc
ARM GAS  /tmp/cc3wfdLm.s 			page 22


 557              	.LFE32:
 559              		.section	.text.prvCheckNetworkTimers,"ax",%progbits
 560              		.align	2
 561              		.thumb
 562              		.thumb_func
 564              	prvCheckNetworkTimers:
 565              	.LFB33:
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvCheckNetworkTimers( void )
 656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 566              		.loc 1 656 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 16
 569              		@ frame_needed = 1, uses_anonymous_args = 0
 570 0000 80B5     		push	{r7, lr}
 571              	.LCFI19:
 572              		.cfi_def_cfa_offset 8
 573              		.cfi_offset 7, -8
 574              		.cfi_offset 14, -4
 575 0002 84B0     		sub	sp, sp, #16
 576              	.LCFI20:
 577              		.cfi_def_cfa_offset 24
 578 0004 00AF     		add	r7, sp, #0
 579              	.LCFI21:
 580              		.cfi_def_cfa_register 7
 657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Is it time for ARP processing? */
 658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 581              		.loc 1 658 0
 582 0006 2D48     		ldr	r0, .L47
 583 0008 FFF7FEFF 		bl	prvIPTimerCheck
 584 000c 0346     		mov	r3, r0
 585 000e 002B     		cmp	r3, #0
 586 0010 02D0     		beq	.L39
 659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSendEventToIPTask( eARPTimerEvent );
 587              		.loc 1 660 0
 588 0012 0220     		movs	r0, #2
 589 0014 FFF7FEFF 		bl	xSendEventToIPTask
 590              	.L39:
 661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_DHCP == 1 )
 664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Is it time for DHCP processing? */
 666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 591              		.loc 1 666 0
 592 0018 2948     		ldr	r0, .L47+4
 593 001a FFF7FEFF 		bl	prvIPTimerCheck
 594 001e 0346     		mov	r3, r0
 595 0020 002B     		cmp	r3, #0
 596 0022 02D0     		beq	.L40
 667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xSendEventToIPTask( eDHCPEvent );
 597              		.loc 1 668 0
 598 0024 0420     		movs	r0, #4
 599 0026 FFF7FEFF 		bl	xSendEventToIPTask
ARM GAS  /tmp/cc3wfdLm.s 			page 23


 600              	.L40:
 601              	.LBB12:
 669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_DHCP */
 672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
 674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	extern void vDNSCheckCallBack( void *pvSearchID );
 676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Is it time for DNS processing? */
 678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 602              		.loc 1 678 0
 603 002a 2648     		ldr	r0, .L47+8
 604 002c FFF7FEFF 		bl	prvIPTimerCheck
 605 0030 0346     		mov	r3, r0
 606 0032 002B     		cmp	r3, #0
 607 0034 02D0     		beq	.L41
 679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vDNSCheckCallBack( NULL );
 608              		.loc 1 680 0
 609 0036 0020     		movs	r0, #0
 610 0038 FFF7FEFF 		bl	vDNSCheckCallBack
 611              	.L41:
 612              	.LBE12:
 613              	.LBB13:
 681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDNS_USE_CALLBACKS */
 684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xWillSleep;
 688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* xStart keeps a copy of the last time this function was active,
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	and during every call it will be updated with xTaskGetTickCount()
 690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	'0' means: not yet initialised (although later '0' might be returned
 691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	by xTaskGetTickCount(), which is no problem). */
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static TickType_t xStart = ( TickType_t ) 0;
 693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TickType_t xTimeNow, xNextTime;
 694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xCheckTCPSockets;
 695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	extern uint32_t ulNextInitialSequenceNumber;
 696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 614              		.loc 1 697 0
 615 003c 224B     		ldr	r3, .L47+12
 616 003e 1B68     		ldr	r3, [r3]
 617 0040 1846     		mov	r0, r3
 618 0042 FFF7FEFF 		bl	uxQueueMessagesWaiting
 619 0046 0346     		mov	r3, r0
 620 0048 002B     		cmp	r3, #0
 621 004a 02D1     		bne	.L42
 698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xWillSleep = pdTRUE;
 622              		.loc 1 699 0
 623 004c 0123     		movs	r3, #1
 624 004e FB60     		str	r3, [r7, #12]
 625 0050 01E0     		b	.L43
ARM GAS  /tmp/cc3wfdLm.s 			page 24


 626              	.L42:
 700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xWillSleep = pdFALSE;
 627              		.loc 1 703 0
 628 0052 0023     		movs	r3, #0
 629 0054 FB60     		str	r3, [r7, #12]
 630              	.L43:
 704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xTimeNow = xTaskGetTickCount();
 631              		.loc 1 706 0
 632 0056 FFF7FEFF 		bl	xTaskGetTickCount
 633 005a 7860     		str	r0, [r7, #4]
 707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xStart != ( TickType_t ) 0 )
 634              		.loc 1 708 0
 635 005c 1B4B     		ldr	r3, .L47+16
 636 005e 1B68     		ldr	r3, [r3]
 637 0060 002B     		cmp	r3, #0
 638 0062 09D0     		beq	.L44
 709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* It is advised to increment the Initial Sequence Number every 4
 711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			microseconds which makes 250 times per ms.  This will make it harder
 712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			for a third party to 'guess' our sequence number and 'take over'
 713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			a TCP connection */
 714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulNextInitialSequenceNumber += ipINITIAL_SEQUENCE_NUMBER_FACTOR * ( ( xTimeNow - xStart ) * port
 639              		.loc 1 714 0
 640 0064 194B     		ldr	r3, .L47+16
 641 0066 1B68     		ldr	r3, [r3]
 642 0068 7A68     		ldr	r2, [r7, #4]
 643 006a D31A     		subs	r3, r2, r3
 644 006c 1A02     		lsls	r2, r3, #8
 645 006e 184B     		ldr	r3, .L47+20
 646 0070 1B68     		ldr	r3, [r3]
 647 0072 1344     		add	r3, r3, r2
 648 0074 164A     		ldr	r2, .L47+20
 649 0076 1360     		str	r3, [r2]
 650              	.L44:
 715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xStart = xTimeNow;
 651              		.loc 1 717 0
 652 0078 144A     		ldr	r2, .L47+16
 653 007a 7B68     		ldr	r3, [r7, #4]
 654 007c 1360     		str	r3, [r2]
 718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sockets need to be checked if the TCP timer has expired. */
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 655              		.loc 1 720 0
 656 007e 1548     		ldr	r0, .L47+24
 657 0080 FFF7FEFF 		bl	prvIPTimerCheck
 658 0084 B860     		str	r0, [r7, #8]
 721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sockets will also be checked if there are TCP messages but the
 723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		message queue is empty (indicated by xWillSleep being true). */
ARM GAS  /tmp/cc3wfdLm.s 			page 25


 724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 659              		.loc 1 724 0
 660 0086 144B     		ldr	r3, .L47+28
 661 0088 1B68     		ldr	r3, [r3]
 662 008a 002B     		cmp	r3, #0
 663 008c 04D0     		beq	.L45
 664              		.loc 1 724 0 is_stmt 0 discriminator 1
 665 008e FB68     		ldr	r3, [r7, #12]
 666 0090 002B     		cmp	r3, #0
 667 0092 01D0     		beq	.L45
 725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xCheckTCPSockets = pdTRUE;
 668              		.loc 1 726 0 is_stmt 1
 669 0094 0123     		movs	r3, #1
 670 0096 BB60     		str	r3, [r7, #8]
 671              	.L45:
 727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xCheckTCPSockets != pdFALSE )
 672              		.loc 1 729 0
 673 0098 BB68     		ldr	r3, [r7, #8]
 674 009a 002B     		cmp	r3, #0
 675 009c 0AD0     		beq	.L38
 730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Attend to the sockets, returning the period after which the
 732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			check must be repeated. */
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNextTime = xTCPTimerCheck( xWillSleep );
 676              		.loc 1 733 0
 677 009e F868     		ldr	r0, [r7, #12]
 678 00a0 FFF7FEFF 		bl	xTCPTimerCheck
 679 00a4 3860     		str	r0, [r7]
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvIPTimerStart( &xTCPTimer, xNextTime );
 680              		.loc 1 734 0
 681 00a6 0B48     		ldr	r0, .L47+24
 682 00a8 3968     		ldr	r1, [r7]
 683 00aa FFF7FEFF 		bl	prvIPTimerStart
 735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xProcessedTCPMessage = 0;
 684              		.loc 1 735 0
 685 00ae 0A4B     		ldr	r3, .L47+28
 686 00b0 0022     		movs	r2, #0
 687 00b2 1A60     		str	r2, [r3]
 688              	.L38:
 689              	.LBE13:
 736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_TCP == 1 */
 739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 690              		.loc 1 739 0
 691 00b4 1037     		adds	r7, r7, #16
 692              	.LCFI22:
 693              		.cfi_def_cfa_offset 8
 694 00b6 BD46     		mov	sp, r7
 695              	.LCFI23:
 696              		.cfi_def_cfa_register 13
 697              		@ sp needed
 698 00b8 80BD     		pop	{r7, pc}
 699              	.L48:
ARM GAS  /tmp/cc3wfdLm.s 			page 26


 700 00ba 00BF     		.align	2
 701              	.L47:
 702 00bc 00000000 		.word	xARPTimer
 703 00c0 00000000 		.word	xDHCPTimer
 704 00c4 00000000 		.word	xDNSTimer
 705 00c8 00000000 		.word	xNetworkEventQueue
 706 00cc 00000000 		.word	xStart.7234
 707 00d0 00000000 		.word	ulNextInitialSequenceNumber
 708 00d4 00000000 		.word	xTCPTimer
 709 00d8 00000000 		.word	xProcessedTCPMessage
 710              		.cfi_endproc
 711              	.LFE33:
 713              		.section	.text.prvIPTimerStart,"ax",%progbits
 714              		.align	2
 715              		.thumb
 716              		.thumb_func
 718              	prvIPTimerStart:
 719              	.LFB34:
 740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
 743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 720              		.loc 1 743 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 8
 723              		@ frame_needed = 1, uses_anonymous_args = 0
 724 0000 80B5     		push	{r7, lr}
 725              	.LCFI24:
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 7, -8
 728              		.cfi_offset 14, -4
 729 0002 82B0     		sub	sp, sp, #8
 730              	.LCFI25:
 731              		.cfi_def_cfa_offset 16
 732 0004 00AF     		add	r7, sp, #0
 733              	.LCFI26:
 734              		.cfi_def_cfa_register 7
 735 0006 7860     		str	r0, [r7, #4]
 736 0008 3960     		str	r1, [r7]
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 737              		.loc 1 744 0
 738 000a 7B68     		ldr	r3, [r7, #4]
 739 000c 0433     		adds	r3, r3, #4
 740 000e 1846     		mov	r0, r3
 741 0010 FFF7FEFF 		bl	vTaskSetTimeOutState
 745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
 742              		.loc 1 745 0
 743 0014 7B68     		ldr	r3, [r7, #4]
 744 0016 3A68     		ldr	r2, [r7]
 745 0018 DA60     		str	r2, [r3, #12]
 746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xTime == ( TickType_t ) 0 )
 746              		.loc 1 747 0
 747 001a 3B68     		ldr	r3, [r7]
 748 001c 002B     		cmp	r3, #0
 749 001e 05D1     		bne	.L50
 748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
ARM GAS  /tmp/cc3wfdLm.s 			page 27


 749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxTimer->bExpired = pdTRUE_UNSIGNED;
 750              		.loc 1 749 0
 751 0020 7A68     		ldr	r2, [r7, #4]
 752 0022 1378     		ldrb	r3, [r2]
 753 0024 43F00203 		orr	r3, r3, #2
 754 0028 1370     		strb	r3, [r2]
 755 002a 04E0     		b	.L51
 756              	.L50:
 750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxTimer->bExpired = pdFALSE_UNSIGNED;
 757              		.loc 1 753 0
 758 002c 7A68     		ldr	r2, [r7, #4]
 759 002e 1378     		ldrb	r3, [r2]
 760 0030 6FF34103 		bfc	r3, #1, #1
 761 0034 1370     		strb	r3, [r2]
 762              	.L51:
 754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->bActive = pdTRUE_UNSIGNED;
 763              		.loc 1 756 0
 764 0036 7A68     		ldr	r2, [r7, #4]
 765 0038 1378     		ldrb	r3, [r2]
 766 003a 43F00103 		orr	r3, r3, #1
 767 003e 1370     		strb	r3, [r2]
 757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 768              		.loc 1 757 0
 769 0040 0837     		adds	r7, r7, #8
 770              	.LCFI27:
 771              		.cfi_def_cfa_offset 8
 772 0042 BD46     		mov	sp, r7
 773              	.LCFI28:
 774              		.cfi_def_cfa_register 13
 775              		@ sp needed
 776 0044 80BD     		pop	{r7, pc}
 777              		.cfi_endproc
 778              	.LFE34:
 780 0046 00BF     		.section	.text.prvIPTimerReload,"ax",%progbits
 781              		.align	2
 782              		.thumb
 783              		.thumb_func
 785              	prvIPTimerReload:
 786              	.LFB35:
 758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
 761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 787              		.loc 1 761 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 8
 790              		@ frame_needed = 1, uses_anonymous_args = 0
 791 0000 80B5     		push	{r7, lr}
 792              	.LCFI29:
 793              		.cfi_def_cfa_offset 8
 794              		.cfi_offset 7, -8
 795              		.cfi_offset 14, -4
ARM GAS  /tmp/cc3wfdLm.s 			page 28


 796 0002 82B0     		sub	sp, sp, #8
 797              	.LCFI30:
 798              		.cfi_def_cfa_offset 16
 799 0004 00AF     		add	r7, sp, #0
 800              	.LCFI31:
 801              		.cfi_def_cfa_register 7
 802 0006 7860     		str	r0, [r7, #4]
 803 0008 3960     		str	r1, [r7]
 762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulReloadTime = xTime;
 804              		.loc 1 762 0
 805 000a 7B68     		ldr	r3, [r7, #4]
 806 000c 3A68     		ldr	r2, [r7]
 807 000e 1A61     		str	r2, [r3, #16]
 763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerStart( pxTimer, xTime );
 808              		.loc 1 763 0
 809 0010 7868     		ldr	r0, [r7, #4]
 810 0012 3968     		ldr	r1, [r7]
 811 0014 FFF7FEFF 		bl	prvIPTimerStart
 764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 812              		.loc 1 764 0
 813 0018 0837     		adds	r7, r7, #8
 814              	.LCFI32:
 815              		.cfi_def_cfa_offset 8
 816 001a BD46     		mov	sp, r7
 817              	.LCFI33:
 818              		.cfi_def_cfa_register 13
 819              		@ sp needed
 820 001c 80BD     		pop	{r7, pc}
 821              		.cfi_endproc
 822              	.LFE35:
 824 001e 00BF     		.section	.text.prvIPTimerCheck,"ax",%progbits
 825              		.align	2
 826              		.thumb
 827              		.thumb_func
 829              	prvIPTimerCheck:
 830              	.LFB36:
 765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
 768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 831              		.loc 1 768 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 16
 834              		@ frame_needed = 1, uses_anonymous_args = 0
 835 0000 80B5     		push	{r7, lr}
 836              	.LCFI34:
 837              		.cfi_def_cfa_offset 8
 838              		.cfi_offset 7, -8
 839              		.cfi_offset 14, -4
 840 0002 84B0     		sub	sp, sp, #16
 841              	.LCFI35:
 842              		.cfi_def_cfa_offset 24
 843 0004 00AF     		add	r7, sp, #0
 844              	.LCFI36:
 845              		.cfi_def_cfa_register 7
 846 0006 7860     		str	r0, [r7, #4]
 769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
ARM GAS  /tmp/cc3wfdLm.s 			page 29


 770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 847              		.loc 1 771 0
 848 0008 7B68     		ldr	r3, [r7, #4]
 849 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 850 000c 03F00103 		and	r3, r3, #1
 851 0010 DBB2     		uxtb	r3, r3
 852 0012 002B     		cmp	r3, #0
 853 0014 02D1     		bne	.L54
 772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The timer is not enabled. */
 774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFALSE;
 854              		.loc 1 774 0
 855 0016 0023     		movs	r3, #0
 856 0018 FB60     		str	r3, [r7, #12]
 857 001a 1CE0     		b	.L55
 858              	.L54:
 775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The timer might have set the bExpired flag already, if not, check the
 779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		value of xTimeOut against ulRemainingTime. */
 780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 859              		.loc 1 780 0
 860 001c 7B68     		ldr	r3, [r7, #4]
 861 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 862 0020 03F00203 		and	r3, r3, #2
 863 0024 DBB2     		uxtb	r3, r3
 864 0026 002B     		cmp	r3, #0
 865 0028 0AD1     		bne	.L56
 781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 866              		.loc 1 781 0 discriminator 1
 867 002a 7B68     		ldr	r3, [r7, #4]
 868 002c 1A1D     		adds	r2, r3, #4
 869 002e 7B68     		ldr	r3, [r7, #4]
 870 0030 0C33     		adds	r3, r3, #12
 871 0032 1046     		mov	r0, r2
 872 0034 1946     		mov	r1, r3
 873 0036 FFF7FEFF 		bl	xTaskCheckForTimeOut
 874 003a 0346     		mov	r3, r0
 780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 875              		.loc 1 780 0 discriminator 1
 876 003c 002B     		cmp	r3, #0
 877 003e 08D0     		beq	.L57
 878              	.L56:
 782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 879              		.loc 1 783 0
 880 0040 7B68     		ldr	r3, [r7, #4]
 881 0042 1B69     		ldr	r3, [r3, #16]
 882 0044 7868     		ldr	r0, [r7, #4]
 883 0046 1946     		mov	r1, r3
 884 0048 FFF7FEFF 		bl	prvIPTimerStart
 784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdTRUE;
 885              		.loc 1 784 0
 886 004c 0123     		movs	r3, #1
 887 004e FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc3wfdLm.s 			page 30


 888 0050 01E0     		b	.L55
 889              	.L57:
 785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdFALSE;
 890              		.loc 1 788 0
 891 0052 0023     		movs	r3, #0
 892 0054 FB60     		str	r3, [r7, #12]
 893              	.L55:
 789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 894              		.loc 1 792 0
 895 0056 FB68     		ldr	r3, [r7, #12]
 793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 896              		.loc 1 793 0
 897 0058 1846     		mov	r0, r3
 898 005a 1037     		adds	r7, r7, #16
 899              	.LCFI37:
 900              		.cfi_def_cfa_offset 8
 901 005c BD46     		mov	sp, r7
 902              	.LCFI38:
 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 005e 80BD     		pop	{r7, pc}
 906              		.cfi_endproc
 907              	.LFE36:
 909              		.section	.text.FreeRTOS_NetworkDown,"ax",%progbits
 910              		.align	2
 911              		.global	FreeRTOS_NetworkDown
 912              		.thumb
 913              		.thumb_func
 915              	FreeRTOS_NetworkDown:
 916              	.LFB37:
 794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_NetworkDown( void )
 797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 917              		.loc 1 797 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 8
 920              		@ frame_needed = 1, uses_anonymous_args = 0
 921 0000 80B5     		push	{r7, lr}
 922              	.LCFI39:
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 7, -8
 925              		.cfi_offset 14, -4
 926 0002 82B0     		sub	sp, sp, #8
 927              	.LCFI40:
 928              		.cfi_def_cfa_offset 16
 929 0004 00AF     		add	r7, sp, #0
 930              	.LCFI41:
 931              		.cfi_def_cfa_register 7
 798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
 799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const TickType_t xDontBlock = ( TickType_t ) 0;
ARM GAS  /tmp/cc3wfdLm.s 			page 31


 932              		.loc 1 799 0
 933 0006 0023     		movs	r3, #0
 934 0008 7B60     		str	r3, [r7, #4]
 800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Simply send the network task the appropriate event. */
 802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 935              		.loc 1 802 0
 936 000a 0848     		ldr	r0, .L62
 937 000c 7968     		ldr	r1, [r7, #4]
 938 000e FFF7FEFF 		bl	xSendEventStructToIPTask
 939 0012 0346     		mov	r3, r0
 940 0014 012B     		cmp	r3, #1
 941 0016 03D0     		beq	.L60
 803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Could not send the message, so it is still pending. */
 805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdTRUE;
 942              		.loc 1 805 0
 943 0018 054B     		ldr	r3, .L62+4
 944 001a 0122     		movs	r2, #1
 945 001c 1A60     		str	r2, [r3]
 946 001e 02E0     		b	.L59
 947              	.L60:
 806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Message was sent so it is not pending. */
 810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdFALSE;
 948              		.loc 1 810 0
 949 0020 034B     		ldr	r3, .L62+4
 950 0022 0022     		movs	r2, #0
 951 0024 1A60     		str	r2, [r3]
 952              	.L59:
 811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceNETWORK_DOWN();
 814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 953              		.loc 1 814 0
 954 0026 0837     		adds	r7, r7, #8
 955              	.LCFI42:
 956              		.cfi_def_cfa_offset 8
 957 0028 BD46     		mov	sp, r7
 958              	.LCFI43:
 959              		.cfi_def_cfa_register 13
 960              		@ sp needed
 961 002a 80BD     		pop	{r7, pc}
 962              	.L63:
 963              		.align	2
 964              	.L62:
 965 002c 00000000 		.word	xNetworkDownEvent.7255
 966 0030 00000000 		.word	xNetworkDownEventPending
 967              		.cfi_endproc
 968              	.LFE37:
 970              		.section	.text.FreeRTOS_NetworkDownFromISR,"ax",%progbits
 971              		.align	2
 972              		.global	FreeRTOS_NetworkDownFromISR
 973              		.thumb
 974              		.thumb_func
ARM GAS  /tmp/cc3wfdLm.s 			page 32


 976              	FreeRTOS_NetworkDownFromISR:
 977              	.LFB38:
 815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_NetworkDownFromISR( void )
 818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 978              		.loc 1 818 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 8
 981              		@ frame_needed = 1, uses_anonymous_args = 0
 982 0000 80B5     		push	{r7, lr}
 983              	.LCFI44:
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 7, -8
 986              		.cfi_offset 14, -4
 987 0002 82B0     		sub	sp, sp, #8
 988              	.LCFI45:
 989              		.cfi_def_cfa_offset 16
 990 0004 00AF     		add	r7, sp, #0
 991              	.LCFI46:
 992              		.cfi_def_cfa_register 7
 819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
 820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 993              		.loc 1 820 0
 994 0006 0023     		movs	r3, #0
 995 0008 7B60     		str	r3, [r7, #4]
 821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Simply send the network task the appropriate event. */
 823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) !
 996              		.loc 1 823 0
 997 000a 0C4B     		ldr	r3, .L68
 998 000c 1A68     		ldr	r2, [r3]
 999 000e 3B1D     		adds	r3, r7, #4
 1000 0010 1046     		mov	r0, r2
 1001 0012 0B49     		ldr	r1, .L68+4
 1002 0014 1A46     		mov	r2, r3
 1003 0016 0023     		movs	r3, #0
 1004 0018 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1005 001c 0346     		mov	r3, r0
 1006 001e 012B     		cmp	r3, #1
 1007 0020 03D0     		beq	.L65
 824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdTRUE;
 1008              		.loc 1 825 0
 1009 0022 084B     		ldr	r3, .L68+8
 1010 0024 0122     		movs	r2, #1
 1011 0026 1A60     		str	r2, [r3]
 1012 0028 02E0     		b	.L66
 1013              	.L65:
 826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdFALSE;
 1014              		.loc 1 829 0
 1015 002a 064B     		ldr	r3, .L68+8
 1016 002c 0022     		movs	r2, #0
 1017 002e 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc3wfdLm.s 			page 33


 1018              	.L66:
 830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceNETWORK_DOWN();
 833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xHigherPriorityTaskWoken;
 1019              		.loc 1 834 0
 1020 0030 7B68     		ldr	r3, [r7, #4]
 835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1021              		.loc 1 835 0
 1022 0032 1846     		mov	r0, r3
 1023 0034 0837     		adds	r7, r7, #8
 1024              	.LCFI47:
 1025              		.cfi_def_cfa_offset 8
 1026 0036 BD46     		mov	sp, r7
 1027              	.LCFI48:
 1028              		.cfi_def_cfa_register 13
 1029              		@ sp needed
 1030 0038 80BD     		pop	{r7, pc}
 1031              	.L69:
 1032 003a 00BF     		.align	2
 1033              	.L68:
 1034 003c 00000000 		.word	xNetworkEventQueue
 1035 0040 00000000 		.word	xNetworkDownEvent.7260
 1036 0044 00000000 		.word	xNetworkDownEventPending
 1037              		.cfi_endproc
 1038              	.LFE38:
 1040              		.section	.text.FreeRTOS_GetUDPPayloadBuffer,"ax",%progbits
 1041              		.align	2
 1042              		.global	FreeRTOS_GetUDPPayloadBuffer
 1043              		.thumb
 1044              		.thumb_func
 1046              	FreeRTOS_GetUDPPayloadBuffer:
 1047              	.LFB39:
 836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
 839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1048              		.loc 1 839 0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 16
 1051              		@ frame_needed = 1, uses_anonymous_args = 0
 1052 0000 80B5     		push	{r7, lr}
 1053              	.LCFI49:
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 7, -8
 1056              		.cfi_offset 14, -4
 1057 0002 84B0     		sub	sp, sp, #16
 1058              	.LCFI50:
 1059              		.cfi_def_cfa_offset 24
 1060 0004 00AF     		add	r7, sp, #0
 1061              	.LCFI51:
 1062              		.cfi_def_cfa_register 7
 1063 0006 7860     		str	r0, [r7, #4]
 1064 0008 3960     		str	r1, [r7]
 840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void *pvReturn;
ARM GAS  /tmp/cc3wfdLm.s 			page 34


 842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Cap the block time.  The reason for this is explained where
 844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined (assuming an official
 845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOSIPConfig.h header file is being used). */
 846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xBlockTimeTicks > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 1065              		.loc 1 846 0
 1066 000a 3B68     		ldr	r3, [r7]
 1067 000c 41F28832 		movw	r2, #5000
 1068 0010 9342     		cmp	r3, r2
 1069 0012 02D9     		bls	.L71
 847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 1070              		.loc 1 848 0
 1071 0014 41F28833 		movw	r3, #5000
 1072 0018 3B60     		str	r3, [r7]
 1073              	.L71:
 849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Obtain a network buffer with the required amount of storage. */
 852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, x
 1074              		.loc 1 852 0
 1075 001a 7B68     		ldr	r3, [r7, #4]
 1076 001c 2A33     		adds	r3, r3, #42
 1077 001e 1846     		mov	r0, r3
 1078 0020 3968     		ldr	r1, [r7]
 1079 0022 FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 1080 0026 B860     		str	r0, [r7, #8]
 853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNetworkBuffer != NULL )
 1081              		.loc 1 854 0
 1082 0028 BB68     		ldr	r3, [r7, #8]
 1083 002a 002B     		cmp	r3, #0
 1084 002c 04D0     		beq	.L72
 855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Leave space for the UPD header. */
 857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 1085              		.loc 1 857 0
 1086 002e BB68     		ldr	r3, [r7, #8]
 1087 0030 9B69     		ldr	r3, [r3, #24]
 1088 0032 2A33     		adds	r3, r3, #42
 1089 0034 FB60     		str	r3, [r7, #12]
 1090 0036 01E0     		b	.L73
 1091              	.L72:
 858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pvReturn = NULL;
 1092              		.loc 1 861 0
 1093 0038 0023     		movs	r3, #0
 1094 003a FB60     		str	r3, [r7, #12]
 1095              	.L73:
 862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return ( void * ) pvReturn;
 1096              		.loc 1 864 0
 1097 003c FB68     		ldr	r3, [r7, #12]
 865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
ARM GAS  /tmp/cc3wfdLm.s 			page 35


 1098              		.loc 1 865 0
 1099 003e 1846     		mov	r0, r3
 1100 0040 1037     		adds	r7, r7, #16
 1101              	.LCFI52:
 1102              		.cfi_def_cfa_offset 8
 1103 0042 BD46     		mov	sp, r7
 1104              	.LCFI53:
 1105              		.cfi_def_cfa_register 13
 1106              		@ sp needed
 1107 0044 80BD     		pop	{r7, pc}
 1108              		.cfi_endproc
 1109              	.LFE39:
 1111 0046 00BF     		.section	.text.pxDuplicateNetworkBufferWithDescriptor,"ax",%progbits
 1112              		.align	2
 1113              		.global	pxDuplicateNetworkBufferWithDescriptor
 1114              		.thumb
 1115              		.thumb_func
 1117              	pxDuplicateNetworkBufferWithDescriptor:
 1118              	.LFB40:
 866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * cons
 869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xNewLength )
 870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1119              		.loc 1 870 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 16
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123 0000 80B5     		push	{r7, lr}
 1124              	.LCFI54:
 1125              		.cfi_def_cfa_offset 8
 1126              		.cfi_offset 7, -8
 1127              		.cfi_offset 14, -4
 1128 0002 84B0     		sub	sp, sp, #16
 1129              	.LCFI55:
 1130              		.cfi_def_cfa_offset 24
 1131 0004 00AF     		add	r7, sp, #0
 1132              	.LCFI56:
 1133              		.cfi_def_cfa_register 7
 1134 0006 7860     		str	r0, [r7, #4]
 1135 0008 3960     		str	r1, [r7]
 871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t * pxNewBuffer;
 872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
 874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	The transmit routine wants to have ownership of the network buffer
 875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	descriptor, because it will pass the buffer straight to DMA. */
 876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 1136              		.loc 1 876 0
 1137 000a 3B68     		ldr	r3, [r7]
 1138 000c 1846     		mov	r0, r3
 1139 000e 0021     		movs	r1, #0
 1140 0010 FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 1141 0014 F860     		str	r0, [r7, #12]
 877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNewBuffer != NULL )
 1142              		.loc 1 878 0
 1143 0016 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc3wfdLm.s 			page 36


 1144 0018 002B     		cmp	r3, #0
 1145 001a 16D0     		beq	.L76
 879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 1146              		.loc 1 880 0
 1147 001c 7B68     		ldr	r3, [r7, #4]
 1148 001e 5A69     		ldr	r2, [r3, #20]
 1149 0020 FB68     		ldr	r3, [r7, #12]
 1150 0022 5A61     		str	r2, [r3, #20]
 881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 1151              		.loc 1 881 0
 1152 0024 7B68     		ldr	r3, [r7, #4]
 1153 0026 1A8C     		ldrh	r2, [r3, #32]
 1154 0028 FB68     		ldr	r3, [r7, #12]
 1155 002a 1A84     		strh	r2, [r3, #32]	@ movhi
 882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 1156              		.loc 1 882 0
 1157 002c 7B68     		ldr	r3, [r7, #4]
 1158 002e 5A8C     		ldrh	r2, [r3, #34]
 1159 0030 FB68     		ldr	r3, [r7, #12]
 1160 0032 5A84     		strh	r2, [r3, #34]	@ movhi
 883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDat
 1161              		.loc 1 883 0
 1162 0034 FB68     		ldr	r3, [r7, #12]
 1163 0036 9969     		ldr	r1, [r3, #24]
 1164 0038 7B68     		ldr	r3, [r7, #4]
 1165 003a 9A69     		ldr	r2, [r3, #24]
 1166 003c 7B68     		ldr	r3, [r7, #4]
 1167 003e DB69     		ldr	r3, [r3, #28]
 1168 0040 0846     		mov	r0, r1
 1169 0042 1146     		mov	r1, r2
 1170 0044 1A46     		mov	r2, r3
 1171 0046 FFF7FEFF 		bl	memcpy
 1172              	.L76:
 884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return pxNewBuffer;
 1173              		.loc 1 886 0
 1174 004a FB68     		ldr	r3, [r7, #12]
 887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1175              		.loc 1 887 0
 1176 004c 1846     		mov	r0, r3
 1177 004e 1037     		adds	r7, r7, #16
 1178              	.LCFI57:
 1179              		.cfi_def_cfa_offset 8
 1180 0050 BD46     		mov	sp, r7
 1181              	.LCFI58:
 1182              		.cfi_def_cfa_register 13
 1183              		@ sp needed
 1184 0052 80BD     		pop	{r7, pc}
 1185              		.cfi_endproc
 1186              	.LFE40:
 1188              		.section	.text.pxPacketBuffer_to_NetworkBuffer,"ax",%progbits
 1189              		.align	2
 1190              		.global	pxPacketBuffer_to_NetworkBuffer
 1191              		.thumb
 1192              		.thumb_func
ARM GAS  /tmp/cc3wfdLm.s 			page 37


 1194              	pxPacketBuffer_to_NetworkBuffer:
 1195              	.LFB41:
 888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 ) || ( ipconfigZERO_COPY_RX_DRIVER != 0 )
 891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxPacketBuffer_to_NetworkBuffer( void *pvBuffer )
 893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1196              		.loc 1 893 0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 16
 1199              		@ frame_needed = 1, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 1201 0000 80B4     		push	{r7}
 1202              	.LCFI59:
 1203              		.cfi_def_cfa_offset 4
 1204              		.cfi_offset 7, -4
 1205 0002 85B0     		sub	sp, sp, #20
 1206              	.LCFI60:
 1207              		.cfi_def_cfa_offset 24
 1208 0004 00AF     		add	r7, sp, #0
 1209              	.LCFI61:
 1210              		.cfi_def_cfa_register 7
 1211 0006 7860     		str	r0, [r7, #4]
 894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *pucBuffer;
 895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxResult;
 896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pvBuffer == NULL )
 1212              		.loc 1 897 0
 1213 0008 7B68     		ldr	r3, [r7, #4]
 1214 000a 002B     		cmp	r3, #0
 1215 000c 02D1     		bne	.L79
 898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = NULL;
 1216              		.loc 1 899 0
 1217 000e 0023     		movs	r3, #0
 1218 0010 FB60     		str	r3, [r7, #12]
 1219 0012 0FE0     		b	.L80
 1220              	.L79:
 900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Obtain the network buffer from the zero copy pointer. */
 904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucBuffer = ( uint8_t * ) pvBuffer;
 1221              		.loc 1 904 0
 1222 0014 7B68     		ldr	r3, [r7, #4]
 1223 0016 BB60     		str	r3, [r7, #8]
 905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The input here is a pointer to a payload buffer.  Subtract the
 907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			size of the header in the network buffer, usually 8 + 2 bytes. */
 908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucBuffer -= ipBUFFER_PADDING;
 1224              		.loc 1 908 0
 1225 0018 BB68     		ldr	r3, [r7, #8]
 1226 001a 0A3B     		subs	r3, r3, #10
 1227 001c BB60     		str	r3, [r7, #8]
 909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Here a pointer was placed to the network descriptor.  As a
ARM GAS  /tmp/cc3wfdLm.s 			page 38


 911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pointer is dereferenced, make sure it is well aligned. */
 912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - ( size_t ) 1 ) ) == ( uint32_t ) 0 )
 1228              		.loc 1 912 0
 1229 001e BB68     		ldr	r3, [r7, #8]
 1230 0020 03F00303 		and	r3, r3, #3
 1231 0024 002B     		cmp	r3, #0
 1232 0026 03D1     		bne	.L81
 913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 1233              		.loc 1 914 0
 1234 0028 BB68     		ldr	r3, [r7, #8]
 1235 002a 1B68     		ldr	r3, [r3]
 1236 002c FB60     		str	r3, [r7, #12]
 1237 002e 01E0     		b	.L80
 1238              	.L81:
 915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
 917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxResult = NULL;
 1239              		.loc 1 918 0
 1240 0030 0023     		movs	r3, #0
 1241 0032 FB60     		str	r3, [r7, #12]
 1242              	.L80:
 919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return pxResult;
 1243              		.loc 1 922 0
 1244 0034 FB68     		ldr	r3, [r7, #12]
 923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1245              		.loc 1 923 0
 1246 0036 1846     		mov	r0, r3
 1247 0038 1437     		adds	r7, r7, #20
 1248              	.LCFI62:
 1249              		.cfi_def_cfa_offset 4
 1250 003a BD46     		mov	sp, r7
 1251              	.LCFI63:
 1252              		.cfi_def_cfa_register 13
 1253              		@ sp needed
 1254 003c 5DF8047B 		ldr	r7, [sp], #4
 1255              	.LCFI64:
 1256              		.cfi_restore 7
 1257              		.cfi_def_cfa_offset 0
 1258 0040 7047     		bx	lr
 1259              		.cfi_endproc
 1260              	.LFE41:
 1262 0042 00BF     		.section	.text.pxUDPPayloadBuffer_to_NetworkBuffer,"ax",%progbits
 1263              		.align	2
 1264              		.global	pxUDPPayloadBuffer_to_NetworkBuffer
 1265              		.thumb
 1266              		.thumb_func
 1268              	pxUDPPayloadBuffer_to_NetworkBuffer:
 1269              	.LFB42:
 924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
 926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc3wfdLm.s 			page 39


 928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
 929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1270              		.loc 1 929 0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 16
 1273              		@ frame_needed = 1, uses_anonymous_args = 0
 1274              		@ link register save eliminated.
 1275 0000 80B4     		push	{r7}
 1276              	.LCFI65:
 1277              		.cfi_def_cfa_offset 4
 1278              		.cfi_offset 7, -4
 1279 0002 85B0     		sub	sp, sp, #20
 1280              	.LCFI66:
 1281              		.cfi_def_cfa_offset 24
 1282 0004 00AF     		add	r7, sp, #0
 1283              	.LCFI67:
 1284              		.cfi_def_cfa_register 7
 1285 0006 7860     		str	r0, [r7, #4]
 930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t *pucBuffer;
 931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxResult;
 932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pvBuffer == NULL )
 1286              		.loc 1 933 0
 1287 0008 7B68     		ldr	r3, [r7, #4]
 1288 000a 002B     		cmp	r3, #0
 1289 000c 02D1     		bne	.L84
 934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxResult = NULL;
 1290              		.loc 1 935 0
 1291 000e 0023     		movs	r3, #0
 1292 0010 FB60     		str	r3, [r7, #12]
 1293 0012 0FE0     		b	.L85
 1294              	.L84:
 936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Obtain the network buffer from the zero copy pointer. */
 940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucBuffer = ( uint8_t * ) pvBuffer;
 1295              		.loc 1 940 0
 1296 0014 7B68     		ldr	r3, [r7, #4]
 1297 0016 BB60     		str	r3, [r7, #8]
 941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The input here is a pointer to a payload buffer.  Subtract
 943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the total size of a UDP/IP header plus the size of the header in
 944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the network buffer, usually 8 + 2 bytes. */
 945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );
 1298              		.loc 1 945 0
 1299 0018 BB68     		ldr	r3, [r7, #8]
 1300 001a 343B     		subs	r3, r3, #52
 1301 001c BB60     		str	r3, [r7, #8]
 946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Here a pointer was placed to the network descriptor,
 948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		As a pointer is dereferenced, make sure it is well aligned */
 949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 1302              		.loc 1 949 0
 1303 001e BB68     		ldr	r3, [r7, #8]
 1304 0020 03F00303 		and	r3, r3, #3
ARM GAS  /tmp/cc3wfdLm.s 			page 40


 1305 0024 002B     		cmp	r3, #0
 1306 0026 03D1     		bne	.L86
 950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The following statement may trigger a:
 952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			warning: cast increases required alignment of target type [-Wcast-align].
 953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			It has been confirmed though that the alignment is suitable. */
 954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 1307              		.loc 1 954 0
 1308 0028 BB68     		ldr	r3, [r7, #8]
 1309 002a 1B68     		ldr	r3, [r3]
 1310 002c FB60     		str	r3, [r7, #12]
 1311 002e 01E0     		b	.L85
 1312              	.L86:
 955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = NULL;
 1313              		.loc 1 958 0
 1314 0030 0023     		movs	r3, #0
 1315 0032 FB60     		str	r3, [r7, #12]
 1316              	.L85:
 959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return pxResult;
 1317              		.loc 1 962 0
 1318 0034 FB68     		ldr	r3, [r7, #12]
 963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1319              		.loc 1 963 0
 1320 0036 1846     		mov	r0, r3
 1321 0038 1437     		adds	r7, r7, #20
 1322              	.LCFI68:
 1323              		.cfi_def_cfa_offset 4
 1324 003a BD46     		mov	sp, r7
 1325              	.LCFI69:
 1326              		.cfi_def_cfa_register 13
 1327              		@ sp needed
 1328 003c 5DF8047B 		ldr	r7, [sp], #4
 1329              	.LCFI70:
 1330              		.cfi_restore 7
 1331              		.cfi_def_cfa_offset 0
 1332 0040 7047     		bx	lr
 1333              		.cfi_endproc
 1334              	.LFE42:
 1336 0042 00BF     		.section	.text.FreeRTOS_ReleaseUDPPayloadBuffer,"ax",%progbits
 1337              		.align	2
 1338              		.global	FreeRTOS_ReleaseUDPPayloadBuffer
 1339              		.thumb
 1340              		.thumb_func
 1342              	FreeRTOS_ReleaseUDPPayloadBuffer:
 1343              	.LFB43:
 964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
 967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1344              		.loc 1 967 0
 1345              		.cfi_startproc
ARM GAS  /tmp/cc3wfdLm.s 			page 41


 1346              		@ args = 0, pretend = 0, frame = 8
 1347              		@ frame_needed = 1, uses_anonymous_args = 0
 1348 0000 80B5     		push	{r7, lr}
 1349              	.LCFI71:
 1350              		.cfi_def_cfa_offset 8
 1351              		.cfi_offset 7, -8
 1352              		.cfi_offset 14, -4
 1353 0002 82B0     		sub	sp, sp, #8
 1354              	.LCFI72:
 1355              		.cfi_def_cfa_offset 16
 1356 0004 00AF     		add	r7, sp, #0
 1357              	.LCFI73:
 1358              		.cfi_def_cfa_register 7
 1359 0006 7860     		str	r0, [r7, #4]
 968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 1360              		.loc 1 968 0
 1361 0008 7868     		ldr	r0, [r7, #4]
 1362 000a FFF7FEFF 		bl	pxUDPPayloadBuffer_to_NetworkBuffer
 1363 000e 0346     		mov	r3, r0
 1364 0010 1846     		mov	r0, r3
 1365 0012 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1366              		.loc 1 969 0
 1367 0016 0837     		adds	r7, r7, #8
 1368              	.LCFI74:
 1369              		.cfi_def_cfa_offset 8
 1370 0018 BD46     		mov	sp, r7
 1371              	.LCFI75:
 1372              		.cfi_def_cfa_register 13
 1373              		@ sp needed
 1374 001a 80BD     		pop	{r7, pc}
 1375              		.cfi_endproc
 1376              	.LFE43:
 1378              		.section	.rodata
 1379              		.align	2
 1380              	.LC0:
 1381 0000 4E657445 		.ascii	"NetEvnt\000"
 1381      766E7400 
 1382              		.align	2
 1383              	.LC1:
 1384 0008 49502D74 		.ascii	"IP-task\000"
 1384      61736B00 
 1385              		.section	.text.FreeRTOS_IPInit,"ax",%progbits
 1386              		.align	2
 1387              		.global	FreeRTOS_IPInit
 1388              		.thumb
 1389              		.thumb_func
 1391              	FreeRTOS_IPInit:
 1392              	.LFB44:
 970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't 
 973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was 
 974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  As that bug has been repaired, there is not an urgent reason to warn.
 975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  It is better though to use the advised priority scheme. */
 976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t u
 977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
ARM GAS  /tmp/cc3wfdLm.s 			page 42


 1393              		.loc 1 977 0
 1394              		.cfi_startproc
 1395              		@ args = 4, pretend = 0, frame = 40
 1396              		@ frame_needed = 1, uses_anonymous_args = 0
 1397 0000 B0B5     		push	{r4, r5, r7, lr}
 1398              	.LCFI76:
 1399              		.cfi_def_cfa_offset 16
 1400              		.cfi_offset 4, -16
 1401              		.cfi_offset 5, -12
 1402              		.cfi_offset 7, -8
 1403              		.cfi_offset 14, -4
 1404 0002 8CB0     		sub	sp, sp, #48
 1405              	.LCFI77:
 1406              		.cfi_def_cfa_offset 64
 1407 0004 02AF     		add	r7, sp, #8
 1408              	.LCFI78:
 1409              		.cfi_def_cfa 7, 56
 1410 0006 F860     		str	r0, [r7, #12]
 1411 0008 B960     		str	r1, [r7, #8]
 1412 000a 7A60     		str	r2, [r7, #4]
 1413 000c 3B60     		str	r3, [r7]
 978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn = pdFALSE;
 1414              		.loc 1 978 0
 1415 000e 0023     		movs	r3, #0
 1416 0010 7B62     		str	r3, [r7, #36]
 979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* This function should only be called once. */
 981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 1417              		.loc 1 981 0
 1418 0012 FFF7FEFF 		bl	xIPIsNetworkTaskReady
 1419 0016 0346     		mov	r3, r0
 1420 0018 002B     		cmp	r3, #0
 1421 001a 09D0     		beq	.L90
 1422              	.LBB14:
 1423              	.LBB15:
 1424              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
ARM GAS  /tmp/cc3wfdLm.s 			page 43


  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
ARM GAS  /tmp/cc3wfdLm.s 			page 44


  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
ARM GAS  /tmp/cc3wfdLm.s 			page 45


 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc3wfdLm.s 			page 46


 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1425              		.loc 2 237 0 discriminator 1
 1426              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1427 001c 4FF05003 			mov r3, #80												
 1428 0020 83F31188 		msr basepri, r3											
 1429 0024 BFF36F8F 		isb														
 1430 0028 BFF34F8F 		dsb														
 1431              	
 1432              	@ 0 "" 2
 1433              		.thumb
 1434 002c 3B62     		str	r3, [r7, #32]
 1435              	.L91:
 1436              	.LBE15:
ARM GAS  /tmp/cc3wfdLm.s 			page 47


 1437              	.LBE14:
 1438              		.loc 1 981 0 discriminator 1
 1439 002e FEE7     		b	.L91
 1440              	.L90:
 982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue == NULL );
 1441              		.loc 1 982 0
 1442 0030 624B     		ldr	r3, .L102
 1443 0032 1B68     		ldr	r3, [r3]
 1444 0034 002B     		cmp	r3, #0
 1445 0036 09D0     		beq	.L92
 1446              	.LBB16:
 1447              	.LBB17:
 1448              		.loc 2 237 0 discriminator 1
 1449              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1450 0038 4FF05003 			mov r3, #80												
 1451 003c 83F31188 		msr basepri, r3											
 1452 0040 BFF36F8F 		isb														
 1453 0044 BFF34F8F 		dsb														
 1454              	
 1455              	@ 0 "" 2
 1456              		.thumb
 1457 0048 FB61     		str	r3, [r7, #28]
 1458              	.L93:
 1459              	.LBE17:
 1460              	.LBE16:
 1461              		.loc 1 982 0 discriminator 2
 1462 004a FEE7     		b	.L93
 1463              	.L92:
 983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xIPTaskHandle == NULL );
 1464              		.loc 1 983 0
 1465 004c 5C4B     		ldr	r3, .L102+4
 1466 004e 1B68     		ldr	r3, [r3]
 1467 0050 002B     		cmp	r3, #0
 1468 0052 09D0     		beq	.L94
 1469              	.LBB18:
 1470              	.LBB19:
 1471              		.loc 2 237 0 discriminator 1
 1472              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1473 0054 4FF05003 			mov r3, #80												
 1474 0058 83F31188 		msr basepri, r3											
 1475 005c BFF36F8F 		isb														
 1476 0060 BFF34F8F 		dsb														
 1477              	
 1478              	@ 0 "" 2
 1479              		.thumb
 1480 0064 BB61     		str	r3, [r7, #24]
 1481              	.L95:
 1482              	.LBE19:
 1483              	.LBE18:
 1484              		.loc 1 983 0 discriminator 3
 1485 0066 FEE7     		b	.L95
 1486              	.L94:
 984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Check structure packing is correct. */
 986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( EthernetHeader_t ) == ipEXPECTED_EthernetHeader_t_SIZE );
 987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( ARPHeader_t ) == ipEXPECTED_ARPHeader_t_SIZE );
 988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
ARM GAS  /tmp/cc3wfdLm.s 			page 48


 989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
 990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
 991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Attempt to create the queue used to communicate with the IP task. */
 993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) siz
 1487              		.loc 1 993 0
 1488 0068 2420     		movs	r0, #36
 1489 006a 0821     		movs	r1, #8
 1490 006c 0022     		movs	r2, #0
 1491 006e FFF7FEFF 		bl	xQueueGenericCreate
 1492 0072 0246     		mov	r2, r0
 1493 0074 514B     		ldr	r3, .L102
 1494 0076 1A60     		str	r2, [r3]
 994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue );
 1495              		.loc 1 994 0
 1496 0078 504B     		ldr	r3, .L102
 1497 007a 1B68     		ldr	r3, [r3]
 1498 007c 002B     		cmp	r3, #0
 1499 007e 09D1     		bne	.L96
 1500              	.LBB20:
 1501              	.LBB21:
 1502              		.loc 2 237 0 discriminator 1
 1503              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1504 0080 4FF05003 			mov r3, #80												
 1505 0084 83F31188 		msr basepri, r3											
 1506 0088 BFF36F8F 		isb														
 1507 008c BFF34F8F 		dsb														
 1508              	
 1509              	@ 0 "" 2
 1510              		.thumb
 1511 0090 7B61     		str	r3, [r7, #20]
 1512              	.L97:
 1513              	.LBE21:
 1514              	.LBE20:
 1515              		.loc 1 994 0 discriminator 9
 1516 0092 FEE7     		b	.L97
 1517              	.L96:
 995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xNetworkEventQueue != NULL )
 1518              		.loc 1 996 0
 1519 0094 494B     		ldr	r3, .L102
 1520 0096 1B68     		ldr	r3, [r3]
 1521 0098 002B     		cmp	r3, #0
 1522 009a 00F08980 		beq	.L98
 997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if ( configQUEUE_REGISTRY_SIZE > 0 )
 999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* A queue registry is normally used to assist a kernel aware
1001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			debugger.  If one is in use then it will be helpful for the debugger
1002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			to show information about the network event queue. */
1003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 1523              		.loc 1 1003 0
 1524 009e 474B     		ldr	r3, .L102
 1525 00a0 1B68     		ldr	r3, [r3]
 1526 00a2 1846     		mov	r0, r3
 1527 00a4 4749     		ldr	r1, .L102+8
 1528 00a6 FFF7FEFF 		bl	vQueueAddToRegistry
ARM GAS  /tmp/cc3wfdLm.s 			page 49


1004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* configQUEUE_REGISTRY_SIZE */
1006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xNetworkBuffersInitialise() == pdPASS )
 1529              		.loc 1 1007 0
 1530 00aa FFF7FEFF 		bl	xNetworkBuffersInitialise
 1531 00ae 0346     		mov	r3, r0
 1532 00b0 012B     		cmp	r3, #1
 1533 00b2 75D1     		bne	.L99
1008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Store the local IP and MAC address. */
1010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[
 1534              		.loc 1 1010 0
 1535 00b4 FB68     		ldr	r3, [r7, #12]
 1536 00b6 0333     		adds	r3, r3, #3
 1537 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1538 00ba 1A06     		lsls	r2, r3, #24
 1539 00bc FB68     		ldr	r3, [r7, #12]
 1540 00be 0233     		adds	r3, r3, #2
 1541 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1542 00c2 1B04     		lsls	r3, r3, #16
 1543 00c4 1A43     		orrs	r2, r2, r3
 1544 00c6 FB68     		ldr	r3, [r7, #12]
 1545 00c8 0133     		adds	r3, r3, #1
 1546 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1547 00cc 1B02     		lsls	r3, r3, #8
 1548 00ce 1343     		orrs	r3, r3, r2
 1549 00d0 FA68     		ldr	r2, [r7, #12]
 1550 00d2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1551 00d4 1343     		orrs	r3, r3, r2
 1552 00d6 3C4A     		ldr	r2, .L102+12
 1553 00d8 1360     		str	r3, [r2]
1011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMa
 1554              		.loc 1 1011 0
 1555 00da BB68     		ldr	r3, [r7, #8]
 1556 00dc 0333     		adds	r3, r3, #3
 1557 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1558 00e0 1A06     		lsls	r2, r3, #24
 1559 00e2 BB68     		ldr	r3, [r7, #8]
 1560 00e4 0233     		adds	r3, r3, #2
 1561 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1562 00e8 1B04     		lsls	r3, r3, #16
 1563 00ea 1A43     		orrs	r2, r2, r3
 1564 00ec BB68     		ldr	r3, [r7, #8]
 1565 00ee 0133     		adds	r3, r3, #1
 1566 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1567 00f2 1B02     		lsls	r3, r3, #8
 1568 00f4 1343     		orrs	r3, r3, r2
 1569 00f6 BA68     		ldr	r2, [r7, #8]
 1570 00f8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1571 00fa 1343     		orrs	r3, r3, r2
 1572 00fc 324A     		ldr	r2, .L102+12
 1573 00fe 5360     		str	r3, [r2, #4]
1012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGateway
 1574              		.loc 1 1012 0
 1575 0100 7B68     		ldr	r3, [r7, #4]
 1576 0102 0333     		adds	r3, r3, #3
ARM GAS  /tmp/cc3wfdLm.s 			page 50


 1577 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1578 0106 1A06     		lsls	r2, r3, #24
 1579 0108 7B68     		ldr	r3, [r7, #4]
 1580 010a 0233     		adds	r3, r3, #2
 1581 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1582 010e 1B04     		lsls	r3, r3, #16
 1583 0110 1A43     		orrs	r2, r2, r3
 1584 0112 7B68     		ldr	r3, [r7, #4]
 1585 0114 0133     		adds	r3, r3, #1
 1586 0116 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1587 0118 1B02     		lsls	r3, r3, #8
 1588 011a 1343     		orrs	r3, r3, r2
 1589 011c 7A68     		ldr	r2, [r7, #4]
 1590 011e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1591 0120 1343     		orrs	r3, r3, r2
 1592 0122 294A     		ldr	r2, .L102+12
 1593 0124 9360     		str	r3, [r2, #8]
1013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNS
 1594              		.loc 1 1013 0
 1595 0126 3B68     		ldr	r3, [r7]
 1596 0128 0333     		adds	r3, r3, #3
 1597 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1598 012c 1A06     		lsls	r2, r3, #24
 1599 012e 3B68     		ldr	r3, [r7]
 1600 0130 0233     		adds	r3, r3, #2
 1601 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1602 0134 1B04     		lsls	r3, r3, #16
 1603 0136 1A43     		orrs	r2, r2, r3
 1604 0138 3B68     		ldr	r3, [r7]
 1605 013a 0133     		adds	r3, r3, #1
 1606 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1607 013e 1B02     		lsls	r3, r3, #8
 1608 0140 1343     		orrs	r3, r3, r2
 1609 0142 3A68     		ldr	r2, [r7]
 1610 0144 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1611 0146 1343     		orrs	r3, r3, r2
 1612 0148 1F4A     		ldr	r2, .L102+12
 1613 014a D360     		str	r3, [r2, #12]
1014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddres
 1614              		.loc 1 1014 0
 1615 014c 1E4B     		ldr	r3, .L102+12
 1616 014e 1A68     		ldr	r2, [r3]
 1617 0150 1D4B     		ldr	r3, .L102+12
 1618 0152 5B68     		ldr	r3, [r3, #4]
 1619 0154 1A40     		ands	r2, r2, r3
 1620 0156 1C4B     		ldr	r3, .L102+12
 1621 0158 5B68     		ldr	r3, [r3, #4]
 1622 015a DB43     		mvns	r3, r3
 1623 015c 1343     		orrs	r3, r3, r2
 1624 015e 1A4A     		ldr	r2, .L102+12
 1625 0160 1361     		str	r3, [r2, #16]
1015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 1626              		.loc 1 1016 0
 1627 0162 1A4A     		ldr	r2, .L102+16
 1628 0164 184B     		ldr	r3, .L102+12
 1629 0166 1446     		mov	r4, r2
ARM GAS  /tmp/cc3wfdLm.s 			page 51


 1630 0168 1D46     		mov	r5, r3
 1631 016a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1632 016c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1633 016e 2B68     		ldr	r3, [r5]
 1634 0170 2360     		str	r3, [r4]
1017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if ipconfigUSE_DHCP == 1
1019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The IP address is not set until DHCP completes. */
1021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 1635              		.loc 1 1021 0
 1636 0172 174B     		ldr	r3, .L102+20
 1637 0174 0022     		movs	r2, #0
 1638 0176 5A61     		str	r2, [r3, #20]
1022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#else
1024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The IP address is set from the value passed in. */
1026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
1027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Added to prevent ARP flood to gateway.  Ensure the
1029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				gateway is on the same subnet as the IP	address. */
1030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkA
1031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif /* ipconfigUSE_DHCP == 1 */
1033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The MAC address is stored in the start of the default packet
1035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			header fragment, which is used when sending UDP packets. */
1036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH
 1639              		.loc 1 1036 0
 1640 0178 1548     		ldr	r0, .L102+20
 1641 017a B96B     		ldr	r1, [r7, #56]
 1642 017c 0622     		movs	r2, #6
 1643 017e FFF7FEFF 		bl	memcpy
1037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Prepare the sockets interface. */
1039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vNetworkSocketsInit();
 1644              		.loc 1 1039 0
 1645 0182 FFF7FEFF 		bl	vNetworkSocketsInit
1040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Create the task that processes Ethernet and stack events. */
1042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t ) ipconfigIP_TASK_STACK_SIZE_WORDS, NULL
 1646              		.loc 1 1042 0
 1647 0186 0523     		movs	r3, #5
 1648 0188 0093     		str	r3, [sp]
 1649 018a 0D4B     		ldr	r3, .L102+4
 1650 018c 0193     		str	r3, [sp, #4]
 1651 018e 1148     		ldr	r0, .L102+24
 1652 0190 1149     		ldr	r1, .L102+28
 1653 0192 4FF42072 		mov	r2, #640
 1654 0196 0023     		movs	r3, #0
 1655 0198 FFF7FEFF 		bl	xTaskCreate
 1656 019c 7862     		str	r0, [r7, #36]
 1657 019e 07E0     		b	.L98
 1658              	.L99:
1043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
ARM GAS  /tmp/cc3wfdLm.s 			page 52


1045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );
1047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Clean up. */
1049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vQueueDelete( xNetworkEventQueue );
 1659              		.loc 1 1049 0
 1660 01a0 064B     		ldr	r3, .L102
 1661 01a2 1B68     		ldr	r3, [r3]
 1662 01a4 1846     		mov	r0, r3
 1663 01a6 FFF7FEFF 		bl	vQueueDelete
1050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkEventQueue = NULL;
 1664              		.loc 1 1050 0
 1665 01aa 044B     		ldr	r3, .L102
 1666 01ac 0022     		movs	r2, #0
 1667 01ae 1A60     		str	r2, [r3]
 1668              	.L98:
1051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
1056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 1669              		.loc 1 1058 0
 1670 01b0 7B6A     		ldr	r3, [r7, #36]
1059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1671              		.loc 1 1059 0
 1672 01b2 1846     		mov	r0, r3
 1673 01b4 2837     		adds	r7, r7, #40
 1674              	.LCFI79:
 1675              		.cfi_def_cfa_offset 16
 1676 01b6 BD46     		mov	sp, r7
 1677              	.LCFI80:
 1678              		.cfi_def_cfa_register 13
 1679              		@ sp needed
 1680 01b8 B0BD     		pop	{r4, r5, r7, pc}
 1681              	.L103:
 1682 01ba 00BF     		.align	2
 1683              	.L102:
 1684 01bc 00000000 		.word	xNetworkEventQueue
 1685 01c0 00000000 		.word	xIPTaskHandle
 1686 01c4 00000000 		.word	.LC0
 1687 01c8 00000000 		.word	xNetworkAddressing
 1688 01cc 00000000 		.word	xDefaultAddressing
 1689 01d0 00000000 		.word	xDefaultPartUDPPacketHeader
 1690 01d4 00000000 		.word	prvIPTask
 1691 01d8 08000000 		.word	.LC1
 1692              		.cfi_endproc
 1693              	.LFE44:
 1695              		.section	.text.FreeRTOS_GetAddressConfiguration,"ax",%progbits
 1696              		.align	2
 1697              		.global	FreeRTOS_GetAddressConfiguration
 1698              		.thumb
 1699              		.thumb_func
 1701              	FreeRTOS_GetAddressConfiguration:
 1702              	.LFB45:
ARM GAS  /tmp/cc3wfdLm.s 			page 53


1060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_GetAddressConfiguration( uint32_t *pulIPAddress, uint32_t *pulNetMask, uint32_t *pulG
1063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1703              		.loc 1 1063 0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 16
 1706              		@ frame_needed = 1, uses_anonymous_args = 0
 1707              		@ link register save eliminated.
 1708 0000 80B4     		push	{r7}
 1709              	.LCFI81:
 1710              		.cfi_def_cfa_offset 4
 1711              		.cfi_offset 7, -4
 1712 0002 85B0     		sub	sp, sp, #20
 1713              	.LCFI82:
 1714              		.cfi_def_cfa_offset 24
 1715 0004 00AF     		add	r7, sp, #0
 1716              	.LCFI83:
 1717              		.cfi_def_cfa_register 7
 1718 0006 F860     		str	r0, [r7, #12]
 1719 0008 B960     		str	r1, [r7, #8]
 1720 000a 7A60     		str	r2, [r7, #4]
 1721 000c 3B60     		str	r3, [r7]
1064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Return the address configuration to the caller. */
1065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulIPAddress != NULL )
 1722              		.loc 1 1066 0
 1723 000e FB68     		ldr	r3, [r7, #12]
 1724 0010 002B     		cmp	r3, #0
 1725 0012 03D0     		beq	.L105
1067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 1726              		.loc 1 1068 0
 1727 0014 0E4B     		ldr	r3, .L109
 1728 0016 5A69     		ldr	r2, [r3, #20]
 1729 0018 FB68     		ldr	r3, [r7, #12]
 1730 001a 1A60     		str	r2, [r3]
 1731              	.L105:
1069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulNetMask != NULL )
 1732              		.loc 1 1071 0
 1733 001c BB68     		ldr	r3, [r7, #8]
 1734 001e 002B     		cmp	r3, #0
 1735 0020 03D0     		beq	.L106
1072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulNetMask = xNetworkAddressing.ulNetMask;
 1736              		.loc 1 1073 0
 1737 0022 0C4B     		ldr	r3, .L109+4
 1738 0024 5A68     		ldr	r2, [r3, #4]
 1739 0026 BB68     		ldr	r3, [r7, #8]
 1740 0028 1A60     		str	r2, [r3]
 1741              	.L106:
1074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulGatewayAddress != NULL )
 1742              		.loc 1 1076 0
ARM GAS  /tmp/cc3wfdLm.s 			page 54


 1743 002a 7B68     		ldr	r3, [r7, #4]
 1744 002c 002B     		cmp	r3, #0
 1745 002e 03D0     		beq	.L107
1077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
 1746              		.loc 1 1078 0
 1747 0030 084B     		ldr	r3, .L109+4
 1748 0032 9A68     		ldr	r2, [r3, #8]
 1749 0034 7B68     		ldr	r3, [r7, #4]
 1750 0036 1A60     		str	r2, [r3]
 1751              	.L107:
1079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulDNSServerAddress != NULL )
 1752              		.loc 1 1081 0
 1753 0038 3B68     		ldr	r3, [r7]
 1754 003a 002B     		cmp	r3, #0
 1755 003c 03D0     		beq	.L104
1082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
 1756              		.loc 1 1083 0
 1757 003e 054B     		ldr	r3, .L109+4
 1758 0040 DA68     		ldr	r2, [r3, #12]
 1759 0042 3B68     		ldr	r3, [r7]
 1760 0044 1A60     		str	r2, [r3]
 1761              	.L104:
1084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1762              		.loc 1 1085 0
 1763 0046 1437     		adds	r7, r7, #20
 1764              	.LCFI84:
 1765              		.cfi_def_cfa_offset 4
 1766 0048 BD46     		mov	sp, r7
 1767              	.LCFI85:
 1768              		.cfi_def_cfa_register 13
 1769              		@ sp needed
 1770 004a 5DF8047B 		ldr	r7, [sp], #4
 1771              	.LCFI86:
 1772              		.cfi_restore 7
 1773              		.cfi_def_cfa_offset 0
 1774 004e 7047     		bx	lr
 1775              	.L110:
 1776              		.align	2
 1777              	.L109:
 1778 0050 00000000 		.word	xDefaultPartUDPPacketHeader
 1779 0054 00000000 		.word	xNetworkAddressing
 1780              		.cfi_endproc
 1781              	.LFE45:
 1783              		.section	.text.FreeRTOS_SetAddressConfiguration,"ax",%progbits
 1784              		.align	2
 1785              		.global	FreeRTOS_SetAddressConfiguration
 1786              		.thumb
 1787              		.thumb_func
 1789              	FreeRTOS_SetAddressConfiguration:
 1790              	.LFB46:
1086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc3wfdLm.s 			page 55


1088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetAddressConfiguration( const uint32_t *pulIPAddress, const uint32_t *pulNetMask, co
1089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1791              		.loc 1 1089 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 16
 1794              		@ frame_needed = 1, uses_anonymous_args = 0
 1795              		@ link register save eliminated.
 1796 0000 80B4     		push	{r7}
 1797              	.LCFI87:
 1798              		.cfi_def_cfa_offset 4
 1799              		.cfi_offset 7, -4
 1800 0002 85B0     		sub	sp, sp, #20
 1801              	.LCFI88:
 1802              		.cfi_def_cfa_offset 24
 1803 0004 00AF     		add	r7, sp, #0
 1804              	.LCFI89:
 1805              		.cfi_def_cfa_register 7
 1806 0006 F860     		str	r0, [r7, #12]
 1807 0008 B960     		str	r1, [r7, #8]
 1808 000a 7A60     		str	r2, [r7, #4]
 1809 000c 3B60     		str	r3, [r7]
1090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Update the address configuration. */
1091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulIPAddress != NULL )
 1810              		.loc 1 1092 0
 1811 000e FB68     		ldr	r3, [r7, #12]
 1812 0010 002B     		cmp	r3, #0
 1813 0012 03D0     		beq	.L112
1093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*ipLOCAL_IP_ADDRESS_POINTER = *pulIPAddress;
 1814              		.loc 1 1094 0
 1815 0014 FB68     		ldr	r3, [r7, #12]
 1816 0016 1B68     		ldr	r3, [r3]
 1817 0018 0D4A     		ldr	r2, .L116
 1818 001a 5361     		str	r3, [r2, #20]
 1819              	.L112:
1095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulNetMask != NULL )
 1820              		.loc 1 1097 0
 1821 001c BB68     		ldr	r3, [r7, #8]
 1822 001e 002B     		cmp	r3, #0
 1823 0020 03D0     		beq	.L113
1098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulNetMask = *pulNetMask;
 1824              		.loc 1 1099 0
 1825 0022 BB68     		ldr	r3, [r7, #8]
 1826 0024 1B68     		ldr	r3, [r3]
 1827 0026 0B4A     		ldr	r2, .L116+4
 1828 0028 5360     		str	r3, [r2, #4]
 1829              	.L113:
1100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulGatewayAddress != NULL )
 1830              		.loc 1 1102 0
 1831 002a 7B68     		ldr	r3, [r7, #4]
 1832 002c 002B     		cmp	r3, #0
ARM GAS  /tmp/cc3wfdLm.s 			page 56


 1833 002e 03D0     		beq	.L114
1103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulGatewayAddress = *pulGatewayAddress;
 1834              		.loc 1 1104 0
 1835 0030 7B68     		ldr	r3, [r7, #4]
 1836 0032 1B68     		ldr	r3, [r3]
 1837 0034 074A     		ldr	r2, .L116+4
 1838 0036 9360     		str	r3, [r2, #8]
 1839              	.L114:
1105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulDNSServerAddress != NULL )
 1840              		.loc 1 1107 0
 1841 0038 3B68     		ldr	r3, [r7]
 1842 003a 002B     		cmp	r3, #0
 1843 003c 03D0     		beq	.L111
1108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulDNSServerAddress = *pulDNSServerAddress;
 1844              		.loc 1 1109 0
 1845 003e 3B68     		ldr	r3, [r7]
 1846 0040 1B68     		ldr	r3, [r3]
 1847 0042 044A     		ldr	r2, .L116+4
 1848 0044 D360     		str	r3, [r2, #12]
 1849              	.L111:
1110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1850              		.loc 1 1111 0
 1851 0046 1437     		adds	r7, r7, #20
 1852              	.LCFI90:
 1853              		.cfi_def_cfa_offset 4
 1854 0048 BD46     		mov	sp, r7
 1855              	.LCFI91:
 1856              		.cfi_def_cfa_register 13
 1857              		@ sp needed
 1858 004a 5DF8047B 		ldr	r7, [sp], #4
 1859              	.LCFI92:
 1860              		.cfi_restore 7
 1861              		.cfi_def_cfa_offset 0
 1862 004e 7047     		bx	lr
 1863              	.L117:
 1864              		.align	2
 1865              	.L116:
 1866 0050 00000000 		.word	xDefaultPartUDPPacketHeader
 1867 0054 00000000 		.word	xNetworkAddressing
 1868              		.cfi_endproc
 1869              	.LFE46:
 1871              		.section	.text.FreeRTOS_SendPingRequest,"ax",%progbits
 1872              		.align	2
 1873              		.global	FreeRTOS_SendPingRequest
 1874              		.thumb
 1875              		.thumb_func
 1877              	FreeRTOS_SendPingRequest:
 1878              	.LFB47:
1112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc3wfdLm.s 			page 57


1116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t FreeRTOS_SendPingRequest( uint32_t ulIPAddress, size_t xNumberOfBytesToSend, TickType_t
1117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1879              		.loc 1 1117 0
 1880              		.cfi_startproc
 1881              		@ args = 0, pretend = 0, frame = 40
 1882              		@ frame_needed = 1, uses_anonymous_args = 0
 1883 0000 80B5     		push	{r7, lr}
 1884              	.LCFI93:
 1885              		.cfi_def_cfa_offset 8
 1886              		.cfi_offset 7, -8
 1887              		.cfi_offset 14, -4
 1888 0002 8AB0     		sub	sp, sp, #40
 1889              	.LCFI94:
 1890              		.cfi_def_cfa_offset 48
 1891 0004 00AF     		add	r7, sp, #0
 1892              	.LCFI95:
 1893              		.cfi_def_cfa_register 7
 1894 0006 F860     		str	r0, [r7, #12]
 1895 0008 B960     		str	r1, [r7, #8]
 1896 000a 7A60     		str	r2, [r7, #4]
1118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer;
1119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ICMPHeader_t *pxICMPHeader;
1120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xReturn = pdFAIL;
 1897              		.loc 1 1120 0
 1898 000c 0023     		movs	r3, #0
 1899 000e 7B62     		str	r3, [r7, #36]
1121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static uint16_t usSequenceNumber = 0;
1122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *pucChar;
1123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 1900              		.loc 1 1123 0
 1901 0010 0323     		movs	r3, #3
 1902 0012 3B74     		strb	r3, [r7, #16]
 1903 0014 0023     		movs	r3, #0
 1904 0016 7B61     		str	r3, [r7, #20]
1124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xNumberOfBytesToSend < ( ( ipconfigNETWORK_MTU - sizeof( IPHeader_t ) ) - sizeof( ICMPHeader_
 1905              		.loc 1 1125 0
 1906 0018 BB68     		ldr	r3, [r7, #8]
 1907 001a B3F5B86F 		cmp	r3, #1472
 1908 001e 4DD2     		bcs	.L119
1126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xNumberOfBytesToSend + sizeof( ICMPPacket_t 
 1909              		.loc 1 1127 0
 1910 0020 BB68     		ldr	r3, [r7, #8]
 1911 0022 2A33     		adds	r3, r3, #42
 1912 0024 1846     		mov	r0, r3
 1913 0026 7968     		ldr	r1, [r7, #4]
 1914 0028 FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 1915 002c 3862     		str	r0, [r7, #32]
1128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( pxNetworkBuffer != NULL )
 1916              		.loc 1 1129 0
 1917 002e 3B6A     		ldr	r3, [r7, #32]
 1918 0030 002B     		cmp	r3, #0
 1919 0032 43D0     		beq	.L119
1130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader = ( ICMPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipIP_PAYLOAD_OFFSET ] 
ARM GAS  /tmp/cc3wfdLm.s 			page 58


 1920              		.loc 1 1131 0
 1921 0034 3B6A     		ldr	r3, [r7, #32]
 1922 0036 9B69     		ldr	r3, [r3, #24]
 1923 0038 2233     		adds	r3, r3, #34
 1924 003a FB61     		str	r3, [r7, #28]
1132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usSequenceNumber++;
 1925              		.loc 1 1132 0
 1926 003c 224B     		ldr	r3, .L123
 1927 003e 1B88     		ldrh	r3, [r3]
 1928 0040 0133     		adds	r3, r3, #1
 1929 0042 9AB2     		uxth	r2, r3
 1930 0044 204B     		ldr	r3, .L123
 1931 0046 1A80     		strh	r2, [r3]	@ movhi
1133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Fill in the basic header information. */
1135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->ucTypeOfMessage = ipICMP_ECHO_REQUEST;
 1932              		.loc 1 1135 0
 1933 0048 FB69     		ldr	r3, [r7, #28]
 1934 004a 0822     		movs	r2, #8
 1935 004c 1A70     		strb	r2, [r3]
1136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->ucTypeOfService = 0;
 1936              		.loc 1 1136 0
 1937 004e FB69     		ldr	r3, [r7, #28]
 1938 0050 0022     		movs	r2, #0
 1939 0052 5A70     		strb	r2, [r3, #1]
1137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->usIdentifier = usSequenceNumber;
 1940              		.loc 1 1137 0
 1941 0054 1C4B     		ldr	r3, .L123
 1942 0056 1A88     		ldrh	r2, [r3]
 1943 0058 FB69     		ldr	r3, [r7, #28]
 1944 005a 9A80     		strh	r2, [r3, #4]	@ unaligned
1138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->usSequenceNumber = usSequenceNumber;
 1945              		.loc 1 1138 0
 1946 005c 1A4B     		ldr	r3, .L123
 1947 005e 1A88     		ldrh	r2, [r3]
 1948 0060 FB69     		ldr	r3, [r7, #28]
 1949 0062 DA80     		strh	r2, [r3, #6]	@ unaligned
1139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Find the start of the data. */
1141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pucChar = ( uint8_t * ) pxICMPHeader;
 1950              		.loc 1 1141 0
 1951 0064 FB69     		ldr	r3, [r7, #28]
 1952 0066 BB61     		str	r3, [r7, #24]
1142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pucChar += sizeof( ICMPHeader_t );
 1953              		.loc 1 1142 0
 1954 0068 BB69     		ldr	r3, [r7, #24]
 1955 006a 0833     		adds	r3, r3, #8
 1956 006c BB61     		str	r3, [r7, #24]
1143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Just memset the data to a fixed value. */
1145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				memset( ( void * ) pucChar, ( int ) ipECHO_DATA_FILL_BYTE, xNumberOfBytesToSend );
 1957              		.loc 1 1145 0
 1958 006e B869     		ldr	r0, [r7, #24]
 1959 0070 7821     		movs	r1, #120
 1960 0072 BA68     		ldr	r2, [r7, #8]
 1961 0074 FFF7FEFF 		bl	memset
1146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc3wfdLm.s 			page 59


1147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The message is complete, IP and checksum's are handled by
1148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vProcessGeneratedUDPPacket */
1149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = FREERTOS_SO_UDPCKSUM_OUT;
 1962              		.loc 1 1149 0
 1963 0078 3B6A     		ldr	r3, [r7, #32]
 1964 007a 9B69     		ldr	r3, [r3, #24]
 1965 007c 0633     		adds	r3, r3, #6
 1966 007e 0222     		movs	r2, #2
 1967 0080 1A70     		strb	r2, [r3]
1150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->ulIPAddress = ulIPAddress;
 1968              		.loc 1 1150 0
 1969 0082 3B6A     		ldr	r3, [r7, #32]
 1970 0084 FA68     		ldr	r2, [r7, #12]
 1971 0086 5A61     		str	r2, [r3, #20]
1151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->usPort = ipPACKET_CONTAINS_ICMP_DATA;
 1972              		.loc 1 1151 0
 1973 0088 3B6A     		ldr	r3, [r7, #32]
 1974 008a 0022     		movs	r2, #0
 1975 008c 1A84     		strh	r2, [r3, #32]	@ movhi
1152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->xDataLength = xNumberOfBytesToSend + sizeof( ICMPHeader_t );
 1976              		.loc 1 1152 0
 1977 008e BB68     		ldr	r3, [r7, #8]
 1978 0090 03F10802 		add	r2, r3, #8
 1979 0094 3B6A     		ldr	r3, [r7, #32]
 1980 0096 DA61     		str	r2, [r3, #28]
1153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Send to the stack. */
1155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xStackTxEvent.pvData = pxNetworkBuffer;
 1981              		.loc 1 1155 0
 1982 0098 3B6A     		ldr	r3, [r7, #32]
 1983 009a 7B61     		str	r3, [r7, #20]
1156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( xSendEventStructToIPTask( &xStackTxEvent, xBlockTimeTicks) != pdPASS )
 1984              		.loc 1 1157 0
 1985 009c 07F11003 		add	r3, r7, #16
 1986 00a0 1846     		mov	r0, r3
 1987 00a2 7968     		ldr	r1, [r7, #4]
 1988 00a4 FFF7FEFF 		bl	xSendEventStructToIPTask
 1989 00a8 0346     		mov	r3, r0
 1990 00aa 012B     		cmp	r3, #1
 1991 00ac 03D0     		beq	.L121
1158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 1992              		.loc 1 1159 0
 1993 00ae 386A     		ldr	r0, [r7, #32]
 1994 00b0 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 1995 00b4 02E0     		b	.L119
 1996              	.L121:
1160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
1161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				else
1163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xReturn = usSequenceNumber;
 1997              		.loc 1 1164 0
 1998 00b6 044B     		ldr	r3, .L123
 1999 00b8 1B88     		ldrh	r3, [r3]
 2000 00ba 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/cc3wfdLm.s 			page 60


 2001              	.L119:
1165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The requested number of bytes will not fit in the available space
1171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			in the network buffer. */
1172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return xReturn;
 2002              		.loc 1 1174 0
 2003 00bc 7B6A     		ldr	r3, [r7, #36]
1175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 2004              		.loc 1 1175 0
 2005 00be 1846     		mov	r0, r3
 2006 00c0 2837     		adds	r7, r7, #40
 2007              	.LCFI96:
 2008              		.cfi_def_cfa_offset 8
 2009 00c2 BD46     		mov	sp, r7
 2010              	.LCFI97:
 2011              		.cfi_def_cfa_register 13
 2012              		@ sp needed
 2013 00c4 80BD     		pop	{r7, pc}
 2014              	.L124:
 2015 00c6 00BF     		.align	2
 2016              	.L123:
 2017 00c8 00000000 		.word	usSequenceNumber.7323
 2018              		.cfi_endproc
 2019              	.LFE47:
 2021              		.section	.text.xSendEventToIPTask,"ax",%progbits
 2022              		.align	2
 2023              		.global	xSendEventToIPTask
 2024              		.thumb
 2025              		.thumb_func
 2027              	xSendEventToIPTask:
 2028              	.LFB48:
1176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
1178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
1181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2029              		.loc 1 1181 0
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 24
 2032              		@ frame_needed = 1, uses_anonymous_args = 0
 2033 0000 80B5     		push	{r7, lr}
 2034              	.LCFI98:
 2035              		.cfi_def_cfa_offset 8
 2036              		.cfi_offset 7, -8
 2037              		.cfi_offset 14, -4
 2038 0002 86B0     		sub	sp, sp, #24
 2039              	.LCFI99:
 2040              		.cfi_def_cfa_offset 32
 2041 0004 00AF     		add	r7, sp, #0
 2042              	.LCFI100:
ARM GAS  /tmp/cc3wfdLm.s 			page 61


 2043              		.cfi_def_cfa_register 7
 2044 0006 0346     		mov	r3, r0
 2045 0008 FB71     		strb	r3, [r7, #7]
1182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPStackEvent_t xEventMessage;
1183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const TickType_t xDontBlock = ( TickType_t ) 0;
 2046              		.loc 1 1183 0
 2047 000a 0023     		movs	r3, #0
 2048 000c 7B61     		str	r3, [r7, #20]
1184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xEventMessage.eEventType = eEvent;
 2049              		.loc 1 1185 0
 2050 000e FB79     		ldrb	r3, [r7, #7]
 2051 0010 3B73     		strb	r3, [r7, #12]
1186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xEventMessage.pvData = ( void* )NULL;
 2052              		.loc 1 1186 0
 2053 0012 0023     		movs	r3, #0
 2054 0014 3B61     		str	r3, [r7, #16]
1187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 2055              		.loc 1 1188 0
 2056 0016 07F10C03 		add	r3, r7, #12
 2057 001a 1846     		mov	r0, r3
 2058 001c 7969     		ldr	r1, [r7, #20]
 2059 001e FFF7FEFF 		bl	xSendEventStructToIPTask
 2060 0022 0346     		mov	r3, r0
1189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2061              		.loc 1 1189 0
 2062 0024 1846     		mov	r0, r3
 2063 0026 1837     		adds	r7, r7, #24
 2064              	.LCFI101:
 2065              		.cfi_def_cfa_offset 8
 2066 0028 BD46     		mov	sp, r7
 2067              	.LCFI102:
 2068              		.cfi_def_cfa_register 13
 2069              		@ sp needed
 2070 002a 80BD     		pop	{r7, pc}
 2071              		.cfi_endproc
 2072              	.LFE48:
 2074              		.section	.text.xSendEventStructToIPTask,"ax",%progbits
 2075              		.align	2
 2076              		.global	xSendEventStructToIPTask
 2077              		.thumb
 2078              		.thumb_func
 2080              	xSendEventStructToIPTask:
 2081              	.LFB49:
1190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
1193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2082              		.loc 1 1193 0
 2083              		.cfi_startproc
 2084              		@ args = 0, pretend = 0, frame = 16
 2085              		@ frame_needed = 1, uses_anonymous_args = 0
 2086 0000 80B5     		push	{r7, lr}
 2087              	.LCFI103:
 2088              		.cfi_def_cfa_offset 8
 2089              		.cfi_offset 7, -8
ARM GAS  /tmp/cc3wfdLm.s 			page 62


 2090              		.cfi_offset 14, -4
 2091 0002 84B0     		sub	sp, sp, #16
 2092              	.LCFI104:
 2093              		.cfi_def_cfa_offset 24
 2094 0004 00AF     		add	r7, sp, #0
 2095              	.LCFI105:
 2096              		.cfi_def_cfa_register 7
 2097 0006 7860     		str	r0, [r7, #4]
 2098 0008 3960     		str	r1, [r7]
1194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn, xSendMessage;
1195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 2099              		.loc 1 1196 0
 2100 000a FFF7FEFF 		bl	xIPIsNetworkTaskReady
 2101 000e 0346     		mov	r3, r0
 2102 0010 002B     		cmp	r3, #0
 2103 0012 06D1     		bne	.L128
 2104              		.loc 1 1196 0 is_stmt 0 discriminator 1
 2105 0014 7B68     		ldr	r3, [r7, #4]
 2106 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2107 0018 002B     		cmp	r3, #0
 2108 001a 02D0     		beq	.L128
1197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Only allow eNetworkDownEvent events if the IP task is not ready
1199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		yet.  Not going to attempt to send the message so the send failed. */
1200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFAIL;
 2109              		.loc 1 1200 0 is_stmt 1
 2110 001c 0023     		movs	r3, #0
 2111 001e FB60     		str	r3, [r7, #12]
 2112 0020 2EE0     		b	.L129
 2113              	.L128:
1201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSendMessage = pdTRUE;
 2114              		.loc 1 1204 0
 2115 0022 0123     		movs	r3, #1
 2116 0024 BB60     		str	r3, [r7, #8]
1205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigUSE_TCP == 1 )
1207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( pxEvent->eEventType == eTCPTimerEvent )
 2117              		.loc 1 1208 0
 2118 0026 7B68     		ldr	r3, [r7, #4]
 2119 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2120 002a 5BB2     		sxtb	r3, r3
 2121 002c 052B     		cmp	r3, #5
 2122 002e 0ED1     		bne	.L130
1209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* TCP timer events are sent to wake the timer task when
1211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xTCPTimer has expired, but there is no point sending them if the
1212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				IP task is already awake processing other message. */
1213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 2123              		.loc 1 1213 0
 2124 0030 164A     		ldr	r2, .L134
 2125 0032 1378     		ldrb	r3, [r2]
 2126 0034 43F00203 		orr	r3, r3, #2
ARM GAS  /tmp/cc3wfdLm.s 			page 63


 2127 0038 1370     		strb	r3, [r2]
1214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 2128              		.loc 1 1215 0
 2129 003a 154B     		ldr	r3, .L134+4
 2130 003c 1B68     		ldr	r3, [r3]
 2131 003e 1846     		mov	r0, r3
 2132 0040 FFF7FEFF 		bl	uxQueueMessagesWaiting
 2133 0044 0346     		mov	r3, r0
 2134 0046 002B     		cmp	r3, #0
 2135 0048 01D0     		beq	.L130
1216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Not actually going to send the message but this is not a
1218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					failure as the message didn't need to be sent. */
1219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xSendMessage = pdFALSE;
 2136              		.loc 1 1219 0
 2137 004a 0023     		movs	r3, #0
 2138 004c BB60     		str	r3, [r7, #8]
 2139              	.L130:
1220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* ipconfigUSE_TCP */
1224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSendMessage != pdFALSE )
 2140              		.loc 1 1225 0
 2141 004e BB68     		ldr	r3, [r7, #8]
 2142 0050 002B     		cmp	r3, #0
 2143 0052 13D0     		beq	.L131
1226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The IP task cannot block itself while waiting for itself to
1228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			respond. */
1229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 2144              		.loc 1 1229 0
 2145 0054 FFF7FEFF 		bl	xIsCallingFromIPTask
 2146 0058 0346     		mov	r3, r0
 2147 005a 012B     		cmp	r3, #1
 2148 005c 04D1     		bne	.L132
 2149              		.loc 1 1229 0 is_stmt 0 discriminator 1
 2150 005e 3B68     		ldr	r3, [r7]
 2151 0060 002B     		cmp	r3, #0
 2152 0062 01D0     		beq	.L132
1230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xTimeout = ( TickType_t ) 0;
 2153              		.loc 1 1231 0 is_stmt 1
 2154 0064 0023     		movs	r3, #0
 2155 0066 3B60     		str	r3, [r7]
 2156              	.L132:
1232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 2157              		.loc 1 1234 0
 2158 0068 094B     		ldr	r3, .L134+4
 2159 006a 1B68     		ldr	r3, [r3]
 2160 006c 1846     		mov	r0, r3
 2161 006e 7968     		ldr	r1, [r7, #4]
 2162 0070 3A68     		ldr	r2, [r7]
ARM GAS  /tmp/cc3wfdLm.s 			page 64


 2163 0072 0023     		movs	r3, #0
 2164 0074 FFF7FEFF 		bl	xQueueGenericSend
 2165 0078 F860     		str	r0, [r7, #12]
 2166 007a 01E0     		b	.L129
 2167              	.L131:
1235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xReturn == pdFAIL )
1237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* A message should have been sent to the IP task, but wasn't. */
1239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
1240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				iptraceSTACK_TX_EVENT_LOST( pxEvent->eEventType );
1241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* It was not necessary to send the message to process the event so
1246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			even though the message was not sent the call was successful. */
1247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdPASS;
 2168              		.loc 1 1247 0
 2169 007c 0123     		movs	r3, #1
 2170 007e FB60     		str	r3, [r7, #12]
 2171              	.L129:
1248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 2172              		.loc 1 1251 0
 2173 0080 FB68     		ldr	r3, [r7, #12]
1252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2174              		.loc 1 1252 0
 2175 0082 1846     		mov	r0, r3
 2176 0084 1037     		adds	r7, r7, #16
 2177              	.LCFI106:
 2178              		.cfi_def_cfa_offset 8
 2179 0086 BD46     		mov	sp, r7
 2180              	.LCFI107:
 2181              		.cfi_def_cfa_register 13
 2182              		@ sp needed
 2183 0088 80BD     		pop	{r7, pc}
 2184              	.L135:
 2185 008a 00BF     		.align	2
 2186              	.L134:
 2187 008c 00000000 		.word	xTCPTimer
 2188 0090 00000000 		.word	xNetworkEventQueue
 2189              		.cfi_endproc
 2190              	.LFE49:
 2192              		.section	.text.eConsiderFrameForProcessing,"ax",%progbits
 2193              		.align	2
 2194              		.global	eConsiderFrameForProcessing
 2195              		.thumb
 2196              		.thumb_func
 2198              	eConsiderFrameForProcessing:
 2199              	.LFB50:
1253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
1256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
ARM GAS  /tmp/cc3wfdLm.s 			page 65


 2200              		.loc 1 1256 0
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 24
 2203              		@ frame_needed = 1, uses_anonymous_args = 0
 2204 0000 80B5     		push	{r7, lr}
 2205              	.LCFI108:
 2206              		.cfi_def_cfa_offset 8
 2207              		.cfi_offset 7, -8
 2208              		.cfi_offset 14, -4
 2209 0002 86B0     		sub	sp, sp, #24
 2210              	.LCFI109:
 2211              		.cfi_def_cfa_offset 32
 2212 0004 00AF     		add	r7, sp, #0
 2213              	.LCFI110:
 2214              		.cfi_def_cfa_register 7
 2215 0006 7860     		str	r0, [r7, #4]
1257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn;
1258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const EthernetHeader_t *pxEthernetHeader;
1259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxEthernetHeader = ( const EthernetHeader_t * ) pucEthernetBuffer;
 2216              		.loc 1 1260 0
 2217 0008 7B68     		ldr	r3, [r7, #4]
 2218 000a 3B61     		str	r3, [r7, #16]
1261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ),
 2219              		.loc 1 1262 0
 2220 000c 3B69     		ldr	r3, [r7, #16]
 2221 000e 2148     		ldr	r0, .L143
 2222 0010 1946     		mov	r1, r3
 2223 0012 0622     		movs	r2, #6
 2224 0014 FFF7FEFF 		bl	memcmp
 2225 0018 0346     		mov	r3, r0
 2226 001a 002B     		cmp	r3, #0
 2227 001c 02D1     		bne	.L137
1263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was directed to this node directly - process it. */
1265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
 2228              		.loc 1 1265 0
 2229 001e 0123     		movs	r3, #1
 2230 0020 FB75     		strb	r3, [r7, #23]
 2231 0022 19E0     		b	.L138
 2232              	.L137:
1266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( memcmp( ( void * ) xBroadcastMACAddress.ucBytes, ( void * ) pxEthernetHeader->xDestinatio
 2233              		.loc 1 1267 0
 2234 0024 3B69     		ldr	r3, [r7, #16]
 2235 0026 1C48     		ldr	r0, .L143+4
 2236 0028 1946     		mov	r1, r3
 2237 002a 0622     		movs	r2, #6
 2238 002c FFF7FEFF 		bl	memcmp
 2239 0030 0346     		mov	r3, r0
 2240 0032 002B     		cmp	r3, #0
 2241 0034 02D1     		bne	.L139
1268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was a broadcast - process it. */
1270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
 2242              		.loc 1 1270 0
ARM GAS  /tmp/cc3wfdLm.s 			page 66


 2243 0036 0123     		movs	r3, #1
 2244 0038 FB75     		strb	r3, [r7, #23]
 2245 003a 0DE0     		b	.L138
 2246              	.L139:
1271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_LLMNR == 1 )
1274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( memcmp( ( void * ) xLLMNR_MacAdress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.
 2247              		.loc 1 1274 0
 2248 003c 3B69     		ldr	r3, [r7, #16]
 2249 003e 1748     		ldr	r0, .L143+8
 2250 0040 1946     		mov	r1, r3
 2251 0042 0622     		movs	r2, #6
 2252 0044 FFF7FEFF 		bl	memcmp
 2253 0048 0346     		mov	r3, r0
 2254 004a 002B     		cmp	r3, #0
 2255 004c 02D1     		bne	.L140
1275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet is a request for LLMNR - process it. */
1277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
 2256              		.loc 1 1277 0
 2257 004e 0123     		movs	r3, #1
 2258 0050 FB75     		strb	r3, [r7, #23]
 2259 0052 01E0     		b	.L138
 2260              	.L140:
1278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_LLMNR */
1281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was not a broadcast, or for this node, just release
1283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the buffer without taking any other action. */
1284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eReleaseBuffer;
 2261              		.loc 1 1284 0
 2262 0054 0023     		movs	r3, #0
 2263 0056 FB75     		strb	r3, [r7, #23]
 2264              	.L138:
 2265              	.LBB22:
1285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
1288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usFrameType;
1290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( eReturn == eProcessBuffer )
 2266              		.loc 1 1291 0
 2267 0058 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2268 005a 012B     		cmp	r3, #1
 2269 005c 15D1     		bne	.L141
1292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usFrameType = pxEthernetHeader->usFrameType;
 2270              		.loc 1 1293 0
 2271 005e 3B69     		ldr	r3, [r7, #16]
 2272 0060 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 2273 0062 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 2274 0064 1B02     		lsls	r3, r3, #8
 2275 0066 1343     		orrs	r3, r3, r2
 2276 0068 FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/cc3wfdLm.s 			page 67


1294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usFrameType = FreeRTOS_ntohs( usFrameType );
 2277              		.loc 1 1294 0
 2278 006a FB89     		ldrh	r3, [r7, #14]
 2279 006c 1B02     		lsls	r3, r3, #8
 2280 006e 9AB2     		uxth	r2, r3
 2281 0070 FB89     		ldrh	r3, [r7, #14]
 2282 0072 1B0A     		lsrs	r3, r3, #8
 2283 0074 9BB2     		uxth	r3, r3
 2284 0076 9BB2     		uxth	r3, r3
 2285 0078 1343     		orrs	r3, r3, r2
 2286 007a 9BB2     		uxth	r3, r3
 2287 007c FB81     		strh	r3, [r7, #14]	@ movhi
1295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( usFrameType <= 0x600U )
 2288              		.loc 1 1296 0
 2289 007e FB89     		ldrh	r3, [r7, #14]
 2290 0080 B3F5C06F 		cmp	r3, #1536
 2291 0084 01D8     		bhi	.L141
1297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Not an Ethernet II frame. */
1299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
 2292              		.loc 1 1299 0
 2293 0086 0023     		movs	r3, #0
 2294 0088 FB75     		strb	r3, [r7, #23]
 2295              	.L141:
 2296              	.LBE22:
1300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */
1304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
 2297              		.loc 1 1305 0
 2298 008a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2299              		.loc 1 1306 0
 2300 008c 1846     		mov	r0, r3
 2301 008e 1837     		adds	r7, r7, #24
 2302              	.LCFI111:
 2303              		.cfi_def_cfa_offset 8
 2304 0090 BD46     		mov	sp, r7
 2305              	.LCFI112:
 2306              		.cfi_def_cfa_register 13
 2307              		@ sp needed
 2308 0092 80BD     		pop	{r7, pc}
 2309              	.L144:
 2310              		.align	2
 2311              	.L143:
 2312 0094 00000000 		.word	xDefaultPartUDPPacketHeader
 2313 0098 00000000 		.word	xBroadcastMACAddress
 2314 009c 00000000 		.word	xLLMNR_MacAdress
 2315              		.cfi_endproc
 2316              	.LFE50:
 2318              		.section	.text.prvProcessNetworkDownEvent,"ax",%progbits
 2319              		.align	2
 2320              		.thumb
 2321              		.thumb_func
ARM GAS  /tmp/cc3wfdLm.s 			page 68


 2323              	prvProcessNetworkDownEvent:
 2324              	.LFB51:
1307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessNetworkDownEvent( void )
1310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2325              		.loc 1 1310 0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 0
 2328              		@ frame_needed = 1, uses_anonymous_args = 0
 2329 0000 80B5     		push	{r7, lr}
 2330              	.LCFI113:
 2331              		.cfi_def_cfa_offset 8
 2332              		.cfi_offset 7, -8
 2333              		.cfi_offset 14, -4
 2334 0002 00AF     		add	r7, sp, #0
 2335              	.LCFI114:
 2336              		.cfi_def_cfa_register 7
1311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Stop the ARP timer while there is no network. */
1312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xARPTimer.bActive = pdFALSE_UNSIGNED;
 2337              		.loc 1 1312 0
 2338 0004 104A     		ldr	r2, .L149
 2339 0006 1378     		ldrb	r3, [r2]
 2340 0008 6FF30003 		bfc	r3, #0, #1
 2341 000c 1370     		strb	r3, [r2]
 2342              	.LBB23:
1313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if ipconfigUSE_NETWORK_EVENT_HOOK == 1
1315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		static BaseType_t xCallEventHook = pdFALSE;
1317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The first network down event is generated by the IP stack itself to
1319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		initialise the network hardware, so do not call the network down event
1320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the first time through. */
1321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xCallEventHook == pdTRUE )
 2343              		.loc 1 1321 0
 2344 000e 0F4B     		ldr	r3, .L149+4
 2345 0010 1B68     		ldr	r3, [r3]
 2346 0012 012B     		cmp	r3, #1
 2347 0014 02D1     		bne	.L146
1322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vApplicationIPNetworkEventHook( eNetworkDown );
 2348              		.loc 1 1323 0
 2349 0016 0120     		movs	r0, #1
 2350 0018 FFF7FEFF 		bl	vApplicationIPNetworkEventHook
 2351              	.L146:
1324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xCallEventHook = pdTRUE;
 2352              		.loc 1 1325 0
 2353 001c 0B4B     		ldr	r3, .L149+4
 2354 001e 0122     		movs	r2, #1
 2355 0020 1A60     		str	r2, [r3]
 2356              	.LBE23:
1326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
1328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The network has been disconnected (or is being initialised for the first
ARM GAS  /tmp/cc3wfdLm.s 			page 69


1330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	time).  Perform whatever hardware processing is necessary to bring it up
1331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	again, or wait for it to be available again.  This is hardware dependent. */
1332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xNetworkInterfaceInitialise() != pdPASS )
 2357              		.loc 1 1332 0
 2358 0022 FFF7FEFF 		bl	xNetworkInterfaceInitialise
 2359 0026 0346     		mov	r3, r0
 2360 0028 012B     		cmp	r3, #1
 2361 002a 06D0     		beq	.L147
1333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Ideally the network interface initialisation function will only
1335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return when the network is available.  In case this is not the case,
1336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		wait a while before retrying the initialisation. */
1337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 2362              		.loc 1 1337 0
 2363 002c 40F6B830 		movw	r0, #3000
 2364 0030 FFF7FEFF 		bl	vTaskDelay
1338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_NetworkDown();
 2365              		.loc 1 1338 0
 2366 0034 FFF7FEFF 		bl	FreeRTOS_NetworkDown
 2367 0038 05E0     		b	.L145
 2368              	.L147:
1339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Set remaining time to 0 so it will become active immediately. */
1343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if ipconfigUSE_DHCP == 1
1344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The network is not up until DHCP has completed. */
1346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vDHCPProcess( pdTRUE );
 2369              		.loc 1 1346 0
 2370 003a 0120     		movs	r0, #1
 2371 003c FFF7FEFF 		bl	vDHCPProcess
1347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xSendEventToIPTask( eDHCPEvent );
 2372              		.loc 1 1347 0
 2373 0040 0420     		movs	r0, #4
 2374 0042 FFF7FEFF 		bl	xSendEventToIPTask
 2375              	.L145:
1348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#else
1350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Perform any necessary 'network up' processing. */
1352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vIPNetworkUpCalls();
1353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif
1355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2376              		.loc 1 1356 0
 2377 0046 80BD     		pop	{r7, pc}
 2378              	.L150:
 2379              		.align	2
 2380              	.L149:
 2381 0048 00000000 		.word	xARPTimer
 2382 004c 00000000 		.word	xCallEventHook.7346
 2383              		.cfi_endproc
 2384              	.LFE51:
 2386              		.section	.text.vIPNetworkUpCalls,"ax",%progbits
 2387              		.align	2
ARM GAS  /tmp/cc3wfdLm.s 			page 70


 2388              		.global	vIPNetworkUpCalls
 2389              		.thumb
 2390              		.thumb_func
 2392              	vIPNetworkUpCalls:
 2393              	.LFB52:
1357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void vIPNetworkUpCalls( void )
1360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2394              		.loc 1 1360 0
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 0
 2397              		@ frame_needed = 1, uses_anonymous_args = 0
 2398 0000 80B5     		push	{r7, lr}
 2399              	.LCFI115:
 2400              		.cfi_def_cfa_offset 8
 2401              		.cfi_offset 7, -8
 2402              		.cfi_offset 14, -4
 2403 0002 00AF     		add	r7, sp, #0
 2404              	.LCFI116:
 2405              		.cfi_def_cfa_register 7
1361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkUp = pdTRUE;
 2406              		.loc 1 1361 0
 2407 0004 064B     		ldr	r3, .L152
 2408 0006 0122     		movs	r2, #1
 2409 0008 1A60     		str	r2, [r3]
1362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
1364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vApplicationIPNetworkEventHook( eNetworkUp );
 2410              		.loc 1 1365 0
 2411 000a 0020     		movs	r0, #0
 2412 000c FFF7FEFF 		bl	vApplicationIPNetworkEventHook
 2413              	.LBB24:
1366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_NETWORK_EVENT_HOOK */
1368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
1370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The following function is declared in FreeRTOS_DNS.c	and 'private' to
1372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		this library */
1373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		extern void vDNSInitialise( void );
1374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vDNSInitialise();
 2414              		.loc 1 1374 0
 2415 0010 FFF7FEFF 		bl	vDNSInitialise
 2416              	.LBE24:
1375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
1377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Set remaining time to 0 so it will become active immediately. */
1379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 2417              		.loc 1 1379 0
 2418 0014 0348     		ldr	r0, .L152+4
 2419 0016 42F21071 		movw	r1, #10000
 2420 001a FFF7FEFF 		bl	prvIPTimerReload
1380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2421              		.loc 1 1380 0
ARM GAS  /tmp/cc3wfdLm.s 			page 71


 2422 001e 80BD     		pop	{r7, pc}
 2423              	.L153:
 2424              		.align	2
 2425              	.L152:
 2426 0020 00000000 		.word	xNetworkUp
 2427 0024 00000000 		.word	xARPTimer
 2428              		.cfi_endproc
 2429              	.LFE52:
 2431              		.section	.text.prvProcessEthernetPacket,"ax",%progbits
 2432              		.align	2
 2433              		.thumb
 2434              		.thumb_func
 2436              	prvProcessEthernetPacket:
 2437              	.LFB53:
1381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
1384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2438              		.loc 1 1384 0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 24
 2441              		@ frame_needed = 1, uses_anonymous_args = 0
 2442 0000 80B5     		push	{r7, lr}
 2443              	.LCFI117:
 2444              		.cfi_def_cfa_offset 8
 2445              		.cfi_offset 7, -8
 2446              		.cfi_offset 14, -4
 2447 0002 86B0     		sub	sp, sp, #24
 2448              	.LCFI118:
 2449              		.cfi_def_cfa_offset 32
 2450 0004 00AF     		add	r7, sp, #0
 2451              	.LCFI119:
 2452              		.cfi_def_cfa_register 7
 2453 0006 7860     		str	r0, [r7, #4]
1385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** EthernetHeader_t *pxEthernetHeader;
1386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** volatile eFrameProcessingResult_t eReturned; /* Volatile to prevent complier warnings when ipCONSID
1387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( pxNetworkBuffer );
 2454              		.loc 1 1388 0
 2455 0008 7B68     		ldr	r3, [r7, #4]
 2456 000a 002B     		cmp	r3, #0
 2457 000c 09D1     		bne	.L155
 2458              	.LBB25:
 2459              	.LBB26:
 2460              		.loc 2 237 0 discriminator 1
 2461              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2462 000e 4FF05003 			mov r3, #80												
 2463 0012 83F31188 		msr basepri, r3											
 2464 0016 BFF36F8F 		isb														
 2465 001a BFF34F8F 		dsb														
 2466              	
 2467              	@ 0 "" 2
 2468              		.thumb
 2469 001e 3B61     		str	r3, [r7, #16]
 2470              	.L156:
 2471              	.LBE26:
 2472              	.LBE25:
ARM GAS  /tmp/cc3wfdLm.s 			page 72


 2473              		.loc 1 1388 0 discriminator 1
 2474 0020 FEE7     		b	.L156
 2475              	.L155:
1389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Interpret the Ethernet frame. */
1391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 2476              		.loc 1 1391 0
 2477 0022 0123     		movs	r3, #1
 2478 0024 FB73     		strb	r3, [r7, #15]
1392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 2479              		.loc 1 1392 0
 2480 0026 7B68     		ldr	r3, [r7, #4]
 2481 0028 9B69     		ldr	r3, [r3, #24]
 2482 002a 7B61     		str	r3, [r7, #20]
1393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( eReturned == eProcessBuffer )
 2483              		.loc 1 1394 0
 2484 002c FB7B     		ldrb	r3, [r7, #15]
 2485 002e DBB2     		uxtb	r3, r3
 2486 0030 012B     		cmp	r3, #1
 2487 0032 1BD1     		bne	.L157
1395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Interpret the received Ethernet packet. */
1397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( pxEthernetHeader->usFrameType )
 2488              		.loc 1 1397 0
 2489 0034 7B69     		ldr	r3, [r7, #20]
 2490 0036 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 2491 0038 9BB2     		uxth	r3, r3
 2492 003a 082B     		cmp	r3, #8
 2493 003c 0AD0     		beq	.L159
 2494 003e B3F5C16F 		cmp	r3, #1544
 2495 0042 10D1     		bne	.L165
1398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipARP_FRAME_TYPE :
1400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The Ethernet frame contains an ARP packet. */
1401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturned = eARPProcessPacket( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 2496              		.loc 1 1401 0
 2497 0044 7B68     		ldr	r3, [r7, #4]
 2498 0046 9B69     		ldr	r3, [r3, #24]
 2499 0048 1846     		mov	r0, r3
 2500 004a FFF7FEFF 		bl	eARPProcessPacket
 2501 004e 0346     		mov	r3, r0
 2502 0050 FB73     		strb	r3, [r7, #15]
1402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2503              		.loc 1 1402 0
 2504 0052 0BE0     		b	.L157
 2505              	.L159:
1403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipIPv4_FRAME_TYPE :
1405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The Ethernet frame contains an IP packet. */
1406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturned = prvProcessIPPacket( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer, pxNetworkB
 2506              		.loc 1 1406 0
 2507 0054 7B68     		ldr	r3, [r7, #4]
 2508 0056 9B69     		ldr	r3, [r3, #24]
 2509 0058 1846     		mov	r0, r3
 2510 005a 7968     		ldr	r1, [r7, #4]
 2511 005c FFF7FEFF 		bl	prvProcessIPPacket
ARM GAS  /tmp/cc3wfdLm.s 			page 73


 2512 0060 0346     		mov	r3, r0
 2513 0062 FB73     		strb	r3, [r7, #15]
1407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2514              		.loc 1 1407 0
 2515 0064 02E0     		b	.L157
 2516              	.L165:
1408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default :
1410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* No other packet types are handled.  Nothing to do. */
1411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturned = eReleaseBuffer;
 2517              		.loc 1 1411 0
 2518 0066 0023     		movs	r3, #0
 2519 0068 FB73     		strb	r3, [r7, #15]
1412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2520              		.loc 1 1412 0
 2521 006a 00BF     		nop
 2522              	.L157:
1413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Perform any actions that resulted from processing the Ethernet frame. */
1417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	switch( eReturned )
 2523              		.loc 1 1417 0
 2524 006c FB7B     		ldrb	r3, [r7, #15]
 2525 006e DBB2     		uxtb	r3, r3
 2526 0070 022B     		cmp	r3, #2
 2527 0072 02D0     		beq	.L162
 2528 0074 032B     		cmp	r3, #3
 2529 0076 0AD0     		beq	.L167
 2530 0078 04E0     		b	.L166
 2531              	.L162:
1418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case eReturnEthernetFrame :
1420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The Ethernet frame will have been updated (maybe it was
1421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			an ARP request or a PING request?) and should be sent back to
1422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			its source. */
1423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 2532              		.loc 1 1423 0
 2533 007a 7868     		ldr	r0, [r7, #4]
 2534 007c 0121     		movs	r1, #1
 2535 007e FFF7FEFF 		bl	vReturnEthernetFrame
1424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* parameter pdTRUE: the buffer must be released once
1425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			the frame has been transmitted */
1426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
 2536              		.loc 1 1426 0
 2537 0082 05E0     		b	.L154
 2538              	.L166:
1427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case eFrameConsumed :
1429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The frame is in use somewhere, don't release the buffer
1430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			yet. */
1431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
1432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		default :
1434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The frame is not being used anywhere, and the
1435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			NetworkBufferDescriptor_t structure containing the frame should
1436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			just be	released back to the list of free buffers. */
ARM GAS  /tmp/cc3wfdLm.s 			page 74


1437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 2539              		.loc 1 1437 0
 2540 0084 7868     		ldr	r0, [r7, #4]
 2541 0086 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
1438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
 2542              		.loc 1 1438 0
 2543 008a 00BF     		nop
 2544 008c 00E0     		b	.L154
 2545              	.L167:
1431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2546              		.loc 1 1431 0
 2547 008e 00BF     		nop
 2548              	.L154:
1439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2549              		.loc 1 1440 0
 2550 0090 1837     		adds	r7, r7, #24
 2551              	.LCFI120:
 2552              		.cfi_def_cfa_offset 8
 2553 0092 BD46     		mov	sp, r7
 2554              	.LCFI121:
 2555              		.cfi_def_cfa_register 13
 2556              		@ sp needed
 2557 0094 80BD     		pop	{r7, pc}
 2558              		.cfi_endproc
 2559              	.LFE53:
 2561 0096 00BF     		.section	.text.prvAllowIPPacket,"ax",%progbits
 2562              		.align	2
 2563              		.thumb
 2564              		.thumb_func
 2566              	prvAllowIPPacket:
 2567              	.LFB54:
1441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
1444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
1445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2568              		.loc 1 1445 0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 32
 2571              		@ frame_needed = 1, uses_anonymous_args = 0
 2572              		@ link register save eliminated.
 2573 0000 80B4     		push	{r7}
 2574              	.LCFI122:
 2575              		.cfi_def_cfa_offset 4
 2576              		.cfi_offset 7, -4
 2577 0002 89B0     		sub	sp, sp, #36
 2578              	.LCFI123:
 2579              		.cfi_def_cfa_offset 40
 2580 0004 00AF     		add	r7, sp, #0
 2581              	.LCFI124:
 2582              		.cfi_def_cfa_register 7
 2583 0006 F860     		str	r0, [r7, #12]
 2584 0008 B960     		str	r1, [r7, #8]
 2585 000a 7A60     		str	r2, [r7, #4]
1446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn = eProcessBuffer;
 2586              		.loc 1 1446 0
ARM GAS  /tmp/cc3wfdLm.s 			page 75


 2587 000c 0123     		movs	r3, #1
 2588 000e FB77     		strb	r3, [r7, #31]
1447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM =
1449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 2589              		.loc 1 1449 0
 2590 0010 FB68     		ldr	r3, [r7, #12]
 2591 0012 0E33     		adds	r3, r3, #14
 2592 0014 BB61     		str	r3, [r7, #24]
 2593              	.LBB27:
1450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #else
1451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* or else, the parameter won't be used and the function will be optimised
1452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	away */
1453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	( void ) pxIPPacket;
1454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
1457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* In systems with a very small amount of RAM, it might be advantageous
1459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		to have incoming messages checked earlier, by the network card driver.
1460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		This method may decrease the usage of sparse network buffers. */
1461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 2594              		.loc 1 1461 0
 2595 0016 BB69     		ldr	r3, [r7, #24]
 2596 0018 1B69     		ldr	r3, [r3, #16]	@ unaligned
 2597 001a 7B61     		str	r3, [r7, #20]
1462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Ensure that the incoming packet is not fragmented (only outgoing
1464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			packets can be fragmented) as these are the only handled IP frames
1465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			currently. */
1466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 2598              		.loc 1 1466 0
 2599 001c BB69     		ldr	r3, [r7, #24]
 2600 001e DB88     		ldrh	r3, [r3, #6]	@ unaligned
 2601 0020 9BB2     		uxth	r3, r3
 2602 0022 1A46     		mov	r2, r3
 2603 0024 4FF60F73 		movw	r3, #65295
 2604 0028 1340     		ands	r3, r3, r2
 2605 002a 002B     		cmp	r3, #0
 2606 002c 02D0     		beq	.L169
1467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Can not handle, fragmented packet. */
1469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
 2607              		.loc 1 1469 0
 2608 002e 0023     		movs	r3, #0
 2609 0030 FB77     		strb	r3, [r7, #31]
 2610 0032 22E0     		b	.L170
 2611              	.L169:
1470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
1472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
1473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 
 2612              		.loc 1 1473 0
 2613 0034 BB69     		ldr	r3, [r7, #24]
 2614 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2615 0038 442B     		cmp	r3, #68
 2616 003a 03D9     		bls	.L171
ARM GAS  /tmp/cc3wfdLm.s 			page 76


 2617              		.loc 1 1473 0 is_stmt 0 discriminator 1
 2618 003c BB69     		ldr	r3, [r7, #24]
 2619 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2620 0040 4F2B     		cmp	r3, #79
 2621 0042 02D9     		bls	.L172
 2622              	.L171:
1474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Can not handle, unknown or invalid header version. */
1476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
 2623              		.loc 1 1476 0 is_stmt 1
 2624 0044 0023     		movs	r3, #0
 2625 0046 FB77     		strb	r3, [r7, #31]
 2626 0048 17E0     		b	.L170
 2627              	.L172:
1477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is the packet for this IP address? */
1479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 2628              		.loc 1 1479 0
 2629 004a 0F4B     		ldr	r3, .L174
 2630 004c 5A69     		ldr	r2, [r3, #20]
 2631 004e 7B69     		ldr	r3, [r7, #20]
 2632 0050 9A42     		cmp	r2, r3
 2633 0052 12D0     		beq	.L170
 2634              		.loc 1 1479 0 is_stmt 0 discriminator 1
 2635 0054 7B69     		ldr	r3, [r7, #20]
 2636 0056 B3F1FF3F 		cmp	r3, #-1
 2637 005a 0ED0     		beq	.L170
1480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it the global broadcast address 255.255.255.255 ? */
1481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
1482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it a specific broadcast address 192.168.1.255 ? */
1483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 2638              		.loc 1 1483 0 is_stmt 1
 2639 005c 0B4B     		ldr	r3, .L174+4
 2640 005e 1A69     		ldr	r2, [r3, #16]
1481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it a specific broadcast address 192.168.1.255 ? */
 2641              		.loc 1 1481 0
 2642 0060 7B69     		ldr	r3, [r7, #20]
 2643 0062 9A42     		cmp	r2, r3
 2644 0064 09D0     		beq	.L170
 2645              		.loc 1 1483 0
 2646 0066 7B69     		ldr	r3, [r7, #20]
 2647 0068 094A     		ldr	r2, .L174+8
 2648 006a 9342     		cmp	r3, r2
 2649 006c 05D0     		beq	.L170
1484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigUSE_LLMNR == 1 )
1485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it the LLMNR multicast address? */
1486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
1487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif
1488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Or (during DHCP negotiation) we have no IP-address yet? */
1489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 2650              		.loc 1 1489 0
 2651 006e 064B     		ldr	r3, .L174
 2652 0070 5B69     		ldr	r3, [r3, #20]
1486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif
 2653              		.loc 1 1486 0
 2654 0072 002B     		cmp	r3, #0
 2655 0074 01D0     		beq	.L170
ARM GAS  /tmp/cc3wfdLm.s 			page 77


1490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Packet is not for this node, release it */
1492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
 2656              		.loc 1 1492 0
 2657 0076 0023     		movs	r3, #0
 2658 0078 FB77     		strb	r3, [r7, #31]
 2659              	.L170:
 2660              	.LBE27:
1493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
1496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 )
1498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Some drivers of NIC's with checksum-offloading will enable the above
1500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		define, so that the checksum won't be checked again here */
1501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if (eReturn == eProcessBuffer )
1502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Is the IP header checksum correct? */
1504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( pxIPHeader->ucProtocol != ( uint8_t ) ipPROTOCOL_ICMP ) &&
1505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ( size_t ) uxH
1506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Check sum in IP-header not correct. */
1508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Is the upper-layer checksum (TCP/UDP/ICMP) correct? */
1511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( usGenerateProtocolChecksum( ( uint8_t * )( pxNetworkBuffer->pucEthernetBuffer ), pdFALS
1512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Protocol checksum not accepted. */
1514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else
1519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* to avoid warning unused parameters */
1521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) pxNetworkBuffer;
1522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) uxHeaderLength;
1523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
1525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
 2661              		.loc 1 1526 0
 2662 007a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2663              		.loc 1 1527 0
 2664 007c 1846     		mov	r0, r3
 2665 007e 2437     		adds	r7, r7, #36
 2666              	.LCFI125:
 2667              		.cfi_def_cfa_offset 4
 2668 0080 BD46     		mov	sp, r7
 2669              	.LCFI126:
 2670              		.cfi_def_cfa_register 13
 2671              		@ sp needed
 2672 0082 5DF8047B 		ldr	r7, [sp], #4
 2673              	.LCFI127:
 2674              		.cfi_restore 7
ARM GAS  /tmp/cc3wfdLm.s 			page 78


 2675              		.cfi_def_cfa_offset 0
 2676 0086 7047     		bx	lr
 2677              	.L175:
 2678              		.align	2
 2679              	.L174:
 2680 0088 00000000 		.word	xDefaultPartUDPPacketHeader
 2681 008c 00000000 		.word	xNetworkAddressing
 2682 0090 E00000FC 		.word	-67108640
 2683              		.cfi_endproc
 2684              	.LFE54:
 2686              		.section	.text.prvProcessIPPacket,"ax",%progbits
 2687              		.align	2
 2688              		.thumb
 2689              		.thumb_func
 2691              	prvProcessIPPacket:
 2692              	.LFB55:
1528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * const pxIPPacket, NetworkBuf
1531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2693              		.loc 1 1531 0
 2694              		.cfi_startproc
 2695              		@ args = 0, pretend = 0, frame = 48
 2696              		@ frame_needed = 1, uses_anonymous_args = 0
 2697 0000 80B5     		push	{r7, lr}
 2698              	.LCFI128:
 2699              		.cfi_def_cfa_offset 8
 2700              		.cfi_offset 7, -8
 2701              		.cfi_offset 14, -4
 2702 0002 8CB0     		sub	sp, sp, #48
 2703              	.LCFI129:
 2704              		.cfi_def_cfa_offset 56
 2705 0004 00AF     		add	r7, sp, #0
 2706              	.LCFI130:
 2707              		.cfi_def_cfa_register 7
 2708 0006 7860     		str	r0, [r7, #4]
 2709 0008 3960     		str	r1, [r7]
1532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn;
1533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 2710              		.loc 1 1533 0
 2711 000a 7B68     		ldr	r3, [r7, #4]
 2712 000c 0E33     		adds	r3, r3, #14
 2713 000e BB62     		str	r3, [r7, #40]
1534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 )
 2714              		.loc 1 1534 0
 2715 0010 BB6A     		ldr	r3, [r7, #40]
 2716 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2717 0014 03F00F03 		and	r3, r3, #15
 2718 0018 9B00     		lsls	r3, r3, #2
 2719 001a 7B62     		str	r3, [r7, #36]
1535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t ucProtocol;
1536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 2720              		.loc 1 1537 0
 2721 001c 7B68     		ldr	r3, [r7, #4]
 2722 001e DB7D     		ldrb	r3, [r3, #23]
 2723 0020 87F82330 		strb	r3, [r7, #35]
ARM GAS  /tmp/cc3wfdLm.s 			page 79


1538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Check if the IP headers are acceptable and if it has our destination. */
1539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 2724              		.loc 1 1539 0
 2725 0024 7868     		ldr	r0, [r7, #4]
 2726 0026 3968     		ldr	r1, [r7]
 2727 0028 7A6A     		ldr	r2, [r7, #36]
 2728 002a FFF7FEFF 		bl	prvAllowIPPacket
 2729 002e 0346     		mov	r3, r0
 2730 0030 87F82F30 		strb	r3, [r7, #47]
1540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( eReturn == eProcessBuffer )
 2731              		.loc 1 1541 0
 2732 0034 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2733 0038 012B     		cmp	r3, #1
 2734 003a 40F08180 		bne	.L177
1542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 2735              		.loc 1 1543 0
 2736 003e 7B6A     		ldr	r3, [r7, #36]
 2737 0040 142B     		cmp	r3, #20
 2738 0042 1AD9     		bls	.L178
 2739              	.LBB28:
1544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* All structs of headers expect a IP header size of 20 bytes
1546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * IP header options were included, we'll ignore them and cut them out
1547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * Note: IP options are mostly use in Multi-cast protocols */
1548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 2740              		.loc 1 1548 0
 2741 0044 7B6A     		ldr	r3, [r7, #36]
 2742 0046 143B     		subs	r3, r3, #20
 2743 0048 FB61     		str	r3, [r7, #28]
1549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* From: the previous start of UDP/ICMP/TCP data */
1550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uint8_t *pucSource = ( ( uint8_t * ) pxIPHeader ) + uxHeaderLength;
 2744              		.loc 1 1550 0
 2745 004a BA6A     		ldr	r2, [r7, #40]
 2746 004c 7B6A     		ldr	r3, [r7, #36]
 2747 004e 1344     		add	r3, r3, r2
 2748 0050 BB61     		str	r3, [r7, #24]
1551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* To: the usual start of UDP/ICMP/TCP data at offset 20 from IP header */
1552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uint8_t *pucTarget = ( ( uint8_t * ) pxIPHeader ) + ipSIZE_OF_IPv4_HEADER;
 2749              		.loc 1 1552 0
 2750 0052 BB6A     		ldr	r3, [r7, #40]
 2751 0054 1433     		adds	r3, r3, #20
 2752 0056 7B61     		str	r3, [r7, #20]
1553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* How many: total length minus the options and the lower headers */
1554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_
 2753              		.loc 1 1554 0
 2754 0058 3B68     		ldr	r3, [r7]
 2755 005a DA69     		ldr	r2, [r3, #28]
 2756 005c FB69     		ldr	r3, [r7, #28]
 2757 005e D31A     		subs	r3, r2, r3
 2758 0060 223B     		subs	r3, r3, #34
 2759 0062 3B61     		str	r3, [r7, #16]
1555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			memmove( pucTarget, pucSource, xMoveLen );
 2760              		.loc 1 1556 0
 2761 0064 7869     		ldr	r0, [r7, #20]
ARM GAS  /tmp/cc3wfdLm.s 			page 80


 2762 0066 B969     		ldr	r1, [r7, #24]
 2763 0068 3A69     		ldr	r2, [r7, #16]
 2764 006a FFF7FEFF 		bl	memmove
1557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNetworkBuffer->xDataLength -= optlen;
 2765              		.loc 1 1557 0
 2766 006e 3B68     		ldr	r3, [r7]
 2767 0070 DA69     		ldr	r2, [r3, #28]
 2768 0072 FB69     		ldr	r3, [r7, #28]
 2769 0074 D21A     		subs	r2, r2, r3
 2770 0076 3B68     		ldr	r3, [r7]
 2771 0078 DA61     		str	r2, [r3, #28]
 2772              	.L178:
 2773              	.LBE28:
1558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Add the IP and MAC addresses to the ARP table if they are not
1560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		already there - otherwise refresh the age of the existing
1561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		entry. */
1562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 2774              		.loc 1 1562 0
 2775 007a 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 2776 007e 112B     		cmp	r3, #17
 2777 0080 07D0     		beq	.L179
1563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Refresh the ARP cache with the IP/MAC-address of the received packet
1565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * For UDP packets, this will be done later in xProcessReceivedUDPPacket()
1566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * as soon as know that the message will be handled by someone
1567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * This will prevent that the ARP cache will get overwritten
1568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * with the IP-address of useless broadcast packets
1569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 */
1570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAd
 2778              		.loc 1 1570 0
 2779 0082 7B68     		ldr	r3, [r7, #4]
 2780 0084 9A1D     		adds	r2, r3, #6
 2781 0086 BB6A     		ldr	r3, [r7, #40]
 2782 0088 DB68     		ldr	r3, [r3, #12]	@ unaligned
 2783 008a 1046     		mov	r0, r2
 2784 008c 1946     		mov	r1, r3
 2785 008e FFF7FEFF 		bl	vARPRefreshCacheEntry
 2786              	.L179:
1571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( ucProtocol )
 2787              		.loc 1 1572 0
 2788 0092 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 2789 0096 062B     		cmp	r3, #6
 2790 0098 43D0     		beq	.L181
 2791 009a 112B     		cmp	r3, #17
 2792 009c 13D0     		beq	.L182
 2793 009e 012B     		cmp	r3, #1
 2794 00a0 00D0     		beq	.L183
1573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipPROTOCOL_ICMP :
1575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The IP packet contained an ICMP frame.  Don't bother
1576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				checking the ICMP checksum, as if it is wrong then the
1577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				wrong data will also be returned, and the source of the
1578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				ping will know something went wrong because it will not
1579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				be able to validate what it receives. */
1580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
ARM GAS  /tmp/cc3wfdLm.s 			page 81


1581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
1583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
1584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
1585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						eReturn = prvProcessICMPPacket( pxICMPPacket );
1586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
1587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) *
1589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipPROTOCOL_UDP :
1592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* The IP packet contained a UDP frame. */
1594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
1595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Note the header values required prior to the
1597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					checksum generation as the checksum pseudo header
1598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					may clobber some of these values. */
1599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UD
1600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* HT:endian: fields in pxNetworkBuffer (usPort, ulIPAddress) were network order */
1601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
1602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
1603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM:
1605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 * In some cases, the upper-layer checksum has been calculated
1606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 * by the NIC driver */
1607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Pass the packet payload to the UDP sockets implementation. */
1608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* HT:endian: xProcessReceivedUDPPacket wanted network order */
1609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xProcessReceivedUDPPacket( pxNetworkBuffer, pxUDPPacket->xUDPHeader.usDestinationPort ) ==
1610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
1611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						eReturn = eFrameConsumed;
1612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
1613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ipconfigUSE_TCP == 1
1617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipPROTOCOL_TCP :
1618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
1621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
1622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						eReturn = eFrameConsumed;
1623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
1624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Setting this variable will cause xTCPTimerCheck()
1626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					to be called just before the IP-task blocks. */
1627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xProcessedTCPMessage++;
1628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default	:
1632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Not a supported frame type. */
1633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2795              		.loc 1 1633 0
 2796 00a2 4DE0     		b	.L177
 2797              	.L183:
 2798              	.LBB29:
ARM GAS  /tmp/cc3wfdLm.s 			page 82


1582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 2799              		.loc 1 1582 0
 2800 00a4 3B68     		ldr	r3, [r7]
 2801 00a6 9B69     		ldr	r3, [r3, #24]
 2802 00a8 FB60     		str	r3, [r7, #12]
1583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 2803              		.loc 1 1583 0
 2804 00aa BB6A     		ldr	r3, [r7, #40]
 2805 00ac 1A69     		ldr	r2, [r3, #16]	@ unaligned
 2806 00ae 274B     		ldr	r3, .L188
 2807 00b0 5B69     		ldr	r3, [r3, #20]
 2808 00b2 9A42     		cmp	r2, r3
 2809 00b4 06D1     		bne	.L184
1585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2810              		.loc 1 1585 0
 2811 00b6 F868     		ldr	r0, [r7, #12]
 2812 00b8 FFF7FEFF 		bl	prvProcessICMPPacket
 2813 00bc 0346     		mov	r3, r0
 2814 00be 87F82F30 		strb	r3, [r7, #47]
 2815              	.LBE29:
1589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2816              		.loc 1 1589 0
 2817 00c2 3DE0     		b	.L177
 2818              	.L184:
 2819 00c4 3CE0     		b	.L177
 2820              	.L182:
 2821              	.LBB30:
1594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2822              		.loc 1 1594 0
 2823 00c6 3B68     		ldr	r3, [r7]
 2824 00c8 9B69     		ldr	r3, [r3, #24]
 2825 00ca BB60     		str	r3, [r7, #8]
1599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* HT:endian: fields in pxNetworkBuffer (usPort, ulIPAddress) were network order */
 2826              		.loc 1 1599 0
 2827 00cc BB68     		ldr	r3, [r7, #8]
 2828 00ce DB8C     		ldrh	r3, [r3, #38]	@ unaligned
 2829 00d0 9BB2     		uxth	r3, r3
 2830 00d2 1B02     		lsls	r3, r3, #8
 2831 00d4 9AB2     		uxth	r2, r3
 2832 00d6 BB68     		ldr	r3, [r7, #8]
 2833 00d8 DB8C     		ldrh	r3, [r3, #38]	@ unaligned
 2834 00da 9BB2     		uxth	r3, r3
 2835 00dc 1B0A     		lsrs	r3, r3, #8
 2836 00de 9BB2     		uxth	r3, r3
 2837 00e0 9BB2     		uxth	r3, r3
 2838 00e2 1343     		orrs	r3, r3, r2
 2839 00e4 9BB2     		uxth	r3, r3
 2840 00e6 9BB2     		uxth	r3, r3
 2841 00e8 A3F10802 		sub	r2, r3, #8
 2842 00ec 3B68     		ldr	r3, [r7]
 2843 00ee DA61     		str	r2, [r3, #28]
1601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 2844              		.loc 1 1601 0
 2845 00f0 BB68     		ldr	r3, [r7, #8]
 2846 00f2 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 2847 00f4 9AB2     		uxth	r2, r3
 2848 00f6 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc3wfdLm.s 			page 83


 2849 00f8 1A84     		strh	r2, [r3, #32]	@ movhi
1602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2850              		.loc 1 1602 0
 2851 00fa BB68     		ldr	r3, [r7, #8]
 2852 00fc D3F81A20 		ldr	r2, [r3, #26]	@ unaligned
 2853 0100 3B68     		ldr	r3, [r7]
 2854 0102 5A61     		str	r2, [r3, #20]
1609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 2855              		.loc 1 1609 0
 2856 0104 BB68     		ldr	r3, [r7, #8]
 2857 0106 9B8C     		ldrh	r3, [r3, #36]	@ unaligned
 2858 0108 9BB2     		uxth	r3, r3
 2859 010a 3868     		ldr	r0, [r7]
 2860 010c 1946     		mov	r1, r3
 2861 010e FFF7FEFF 		bl	xProcessReceivedUDPPacket
 2862 0112 0346     		mov	r3, r0
 2863 0114 012B     		cmp	r3, #1
 2864 0116 03D1     		bne	.L185
1611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2865              		.loc 1 1611 0
 2866 0118 0323     		movs	r3, #3
 2867 011a 87F82F30 		strb	r3, [r7, #47]
 2868              	.LBE30:
1614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2869              		.loc 1 1614 0
 2870 011e 0FE0     		b	.L177
 2871              	.L185:
 2872 0120 0EE0     		b	.L177
 2873              	.L181:
1620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 2874              		.loc 1 1620 0
 2875 0122 3868     		ldr	r0, [r7]
 2876 0124 FFF7FEFF 		bl	xProcessReceivedTCPPacket
 2877 0128 0346     		mov	r3, r0
 2878 012a 012B     		cmp	r3, #1
 2879 012c 02D1     		bne	.L186
1622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2880              		.loc 1 1622 0
 2881 012e 0323     		movs	r3, #3
 2882 0130 87F82F30 		strb	r3, [r7, #47]
 2883              	.L186:
1627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 2884              		.loc 1 1627 0
 2885 0134 064B     		ldr	r3, .L188+4
 2886 0136 1B68     		ldr	r3, [r3]
 2887 0138 0133     		adds	r3, r3, #1
 2888 013a 054A     		ldr	r2, .L188+4
 2889 013c 1360     		str	r3, [r2]
1629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 2890              		.loc 1 1629 0
 2891 013e 00BF     		nop
 2892              	.L177:
1634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
 2893              		.loc 1 1637 0
ARM GAS  /tmp/cc3wfdLm.s 			page 84


 2894 0140 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
1638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2895              		.loc 1 1638 0
 2896 0144 1846     		mov	r0, r3
 2897 0146 3037     		adds	r7, r7, #48
 2898              	.LCFI131:
 2899              		.cfi_def_cfa_offset 8
 2900 0148 BD46     		mov	sp, r7
 2901              	.LCFI132:
 2902              		.cfi_def_cfa_register 13
 2903              		@ sp needed
 2904 014a 80BD     		pop	{r7, pc}
 2905              	.L189:
 2906              		.align	2
 2907              	.L188:
 2908 014c 00000000 		.word	xDefaultPartUDPPacketHeader
 2909 0150 00000000 		.word	xProcessedTCPMessage
 2910              		.cfi_endproc
 2911              	.LFE55:
 2913              		.section	.text.prvProcessICMPEchoReply,"ax",%progbits
 2914              		.align	2
 2915              		.thumb
 2916              		.thumb_func
 2918              	prvProcessICMPEchoReply:
 2919              	.LFB56:
1639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
1644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 2920              		.loc 1 1644 0
 2921              		.cfi_startproc
 2922              		@ args = 0, pretend = 0, frame = 24
 2923              		@ frame_needed = 1, uses_anonymous_args = 0
 2924 0000 80B5     		push	{r7, lr}
 2925              	.LCFI133:
 2926              		.cfi_def_cfa_offset 8
 2927              		.cfi_offset 7, -8
 2928              		.cfi_offset 14, -4
 2929 0002 86B0     		sub	sp, sp, #24
 2930              	.LCFI134:
 2931              		.cfi_def_cfa_offset 32
 2932 0004 00AF     		add	r7, sp, #0
 2933              	.LCFI135:
 2934              		.cfi_def_cfa_register 7
 2935 0006 7860     		str	r0, [r7, #4]
1645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ePingReplyStatus_t eStatus = eSuccess;
 2936              		.loc 1 1645 0
 2937 0008 0023     		movs	r3, #0
 2938 000a FB75     		strb	r3, [r7, #23]
1646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usDataLength, usCount;
1647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *pucByte;
1648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Find the total length of the IP packet. */
1650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = pxICMPPacket->xIPHeader.usLength;
 2939              		.loc 1 1650 0
ARM GAS  /tmp/cc3wfdLm.s 			page 85


 2940 000c 7B68     		ldr	r3, [r7, #4]
 2941 000e 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 2942 0010 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2943 0012 1B02     		lsls	r3, r3, #8
 2944 0014 1343     		orrs	r3, r3, r2
 2945 0016 FB81     		strh	r3, [r7, #14]	@ movhi
1651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = FreeRTOS_ntohs( usDataLength );
 2946              		.loc 1 1651 0
 2947 0018 FB89     		ldrh	r3, [r7, #14]
 2948 001a 1B02     		lsls	r3, r3, #8
 2949 001c 9AB2     		uxth	r2, r3
 2950 001e FB89     		ldrh	r3, [r7, #14]
 2951 0020 1B0A     		lsrs	r3, r3, #8
 2952 0022 9BB2     		uxth	r3, r3
 2953 0024 9BB2     		uxth	r3, r3
 2954 0026 1343     		orrs	r3, r3, r2
 2955 0028 9BB2     		uxth	r3, r3
 2956 002a FB81     		strh	r3, [r7, #14]	@ movhi
1652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Remove the length of the IP headers to obtain the length of the ICMP
1654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		message itself. */
1655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 2957              		.loc 1 1655 0
 2958 002c FB89     		ldrh	r3, [r7, #14]	@ movhi
 2959 002e 143B     		subs	r3, r3, #20
 2960 0030 FB81     		strh	r3, [r7, #14]	@ movhi
1656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Remove the length of the ICMP header, to obtain the length of
1658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		data contained in the ping. */
1659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 2961              		.loc 1 1659 0
 2962 0032 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2963 0034 083B     		subs	r3, r3, #8
 2964 0036 FB81     		strh	r3, [r7, #14]	@ movhi
1660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Checksum has already been checked before in prvProcessIPPacket */
1662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Find the first byte of the data within the ICMP packet. */
1664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucByte = ( uint8_t * ) pxICMPPacket;
 2965              		.loc 1 1664 0
 2966 0038 7B68     		ldr	r3, [r7, #4]
 2967 003a 3B61     		str	r3, [r7, #16]
1665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucByte += sizeof( ICMPPacket_t );
 2968              		.loc 1 1665 0
 2969 003c 3B69     		ldr	r3, [r7, #16]
 2970 003e 2A33     		adds	r3, r3, #42
 2971 0040 3B61     		str	r3, [r7, #16]
1666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check each byte. */
1668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		for( usCount = 0; usCount < usDataLength; usCount++ )
 2972              		.loc 1 1668 0
 2973 0042 0023     		movs	r3, #0
 2974 0044 BB82     		strh	r3, [r7, #20]	@ movhi
 2975 0046 0CE0     		b	.L191
 2976              	.L194:
1669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( *pucByte != ipECHO_DATA_FILL_BYTE )
ARM GAS  /tmp/cc3wfdLm.s 			page 86


 2977              		.loc 1 1670 0
 2978 0048 3B69     		ldr	r3, [r7, #16]
 2979 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2980 004c 782B     		cmp	r3, #120
 2981 004e 02D0     		beq	.L192
1671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eStatus = eInvalidData;
 2982              		.loc 1 1672 0
 2983 0050 0223     		movs	r3, #2
 2984 0052 FB75     		strb	r3, [r7, #23]
1673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2985              		.loc 1 1673 0
 2986 0054 09E0     		b	.L193
 2987              	.L192:
1674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucByte++;
 2988              		.loc 1 1676 0 discriminator 2
 2989 0056 3B69     		ldr	r3, [r7, #16]
 2990 0058 0133     		adds	r3, r3, #1
 2991 005a 3B61     		str	r3, [r7, #16]
1668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2992              		.loc 1 1668 0 discriminator 2
 2993 005c BB8A     		ldrh	r3, [r7, #20]
 2994 005e 0133     		adds	r3, r3, #1
 2995 0060 BB82     		strh	r3, [r7, #20]	@ movhi
 2996              	.L191:
1668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2997              		.loc 1 1668 0 is_stmt 0 discriminator 1
 2998 0062 BA8A     		ldrh	r2, [r7, #20]
 2999 0064 FB89     		ldrh	r3, [r7, #14]
 3000 0066 9A42     		cmp	r2, r3
 3001 0068 EED3     		bcc	.L194
 3002              	.L193:
1677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Call back into the application to pass it the result. */
1680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 3003              		.loc 1 1680 0 is_stmt 1
 3004 006a 7B68     		ldr	r3, [r7, #4]
 3005 006c DB8C     		ldrh	r3, [r3, #38]	@ unaligned
 3006 006e 9BB2     		uxth	r3, r3
 3007 0070 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 3008 0072 1046     		mov	r0, r2
 3009 0074 1946     		mov	r1, r3
 3010 0076 FFF7FEFF 		bl	vApplicationPingReplyHook
1681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 3011              		.loc 1 1681 0
 3012 007a 1837     		adds	r7, r7, #24
 3013              	.LCFI136:
 3014              		.cfi_def_cfa_offset 8
 3015 007c BD46     		mov	sp, r7
 3016              	.LCFI137:
 3017              		.cfi_def_cfa_register 13
 3018              		@ sp needed
 3019 007e 80BD     		pop	{r7, pc}
 3020              		.cfi_endproc
ARM GAS  /tmp/cc3wfdLm.s 			page 87


 3021              	.LFE56:
 3023              		.section	.text.prvProcessICMPEchoRequest,"ax",%progbits
 3024              		.align	2
 3025              		.thumb
 3026              		.thumb_func
 3028              	prvProcessICMPEchoRequest:
 3029              	.LFB57:
1682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
1687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
1689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3030              		.loc 1 1689 0
 3031              		.cfi_startproc
 3032              		@ args = 0, pretend = 0, frame = 24
 3033              		@ frame_needed = 1, uses_anonymous_args = 0
 3034              		@ link register save eliminated.
 3035 0000 80B4     		push	{r7}
 3036              	.LCFI138:
 3037              		.cfi_def_cfa_offset 4
 3038              		.cfi_offset 7, -4
 3039 0002 87B0     		sub	sp, sp, #28
 3040              	.LCFI139:
 3041              		.cfi_def_cfa_offset 32
 3042 0004 00AF     		add	r7, sp, #0
 3043              	.LCFI140:
 3044              		.cfi_def_cfa_register 7
 3045 0006 7860     		str	r0, [r7, #4]
1690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ICMPHeader_t *pxICMPHeader;
1691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	IPHeader_t *pxIPHeader;
1692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usRequest;
1693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 3046              		.loc 1 1694 0
 3047 0008 7B68     		ldr	r3, [r7, #4]
 3048 000a 2233     		adds	r3, r3, #34
 3049 000c 7B61     		str	r3, [r7, #20]
1695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader = &( pxICMPPacket->xIPHeader );
 3050              		.loc 1 1695 0
 3051 000e 7B68     		ldr	r3, [r7, #4]
 3052 0010 0E33     		adds	r3, r3, #14
 3053 0012 3B61     		str	r3, [r7, #16]
1696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* HT:endian: changed back */
1698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceSENDING_PING_REPLY( pxIPHeader->ulSourceIPAddress );
1699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The checksum can be checked here - but a ping reply should be
1701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		returned even if the checksum is incorrect so the other end can
1702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		tell that the ping was received - even if the ping reply contains
1703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		invalid data. */
1704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 3054              		.loc 1 1704 0
 3055 0014 7B69     		ldr	r3, [r7, #20]
 3056 0016 0022     		movs	r2, #0
ARM GAS  /tmp/cc3wfdLm.s 			page 88


 3057 0018 1A70     		strb	r2, [r3]
1705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 3058              		.loc 1 1705 0
 3059 001a 3B69     		ldr	r3, [r7, #16]
 3060 001c DA68     		ldr	r2, [r3, #12]	@ unaligned
 3061 001e 3B69     		ldr	r3, [r7, #16]
 3062 0020 1A61     		str	r2, [r3, #16]	@ unaligned
1706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 3063              		.loc 1 1706 0
 3064 0022 224B     		ldr	r3, .L199
 3065 0024 5A69     		ldr	r2, [r3, #20]
 3066 0026 3B69     		ldr	r3, [r7, #16]
 3067 0028 DA60     		str	r2, [r3, #12]	@ unaligned
1707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Update the checksum because the ucTypeOfMessage member in the header
1709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
1710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usGenerateChecksum(). */
1711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* due to compiler warning "integer operation result is out of range" */
1713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 3068              		.loc 1 1714 0
 3069 002a 4FF40063 		mov	r3, #2048
 3070 002e FB81     		strh	r3, [r7, #14]	@ movhi
1715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 3071              		.loc 1 1716 0
 3072 0030 7B69     		ldr	r3, [r7, #20]
 3073 0032 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 3074 0034 9AB2     		uxth	r2, r3
 3075 0036 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3076 0038 DB43     		mvns	r3, r3
 3077 003a 9BB2     		uxth	r3, r3
 3078 003c 1B02     		lsls	r3, r3, #8
 3079 003e 99B2     		uxth	r1, r3
 3080 0040 F889     		ldrh	r0, [r7, #14]
 3081 0042 4FF6FF73 		movw	r3, #65535
 3082 0046 1B1A     		subs	r3, r3, r0
 3083 0048 1B0A     		lsrs	r3, r3, #8
 3084 004a 9BB2     		uxth	r3, r3
 3085 004c 0B43     		orrs	r3, r3, r1
 3086 004e 9BB2     		uxth	r3, r3
 3087 0050 9A42     		cmp	r2, r3
 3088 0052 12D3     		bcc	.L196
1717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxICMPHeader->usChecksum = ( uint16_t )
1719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 3089              		.loc 1 1719 0
 3090 0054 7B69     		ldr	r3, [r7, #20]
 3091 0056 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 3092 0058 9AB2     		uxth	r2, r3
1720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					FreeRTOS_htons( usRequest + 1UL ) );
 3093              		.loc 1 1720 0
 3094 005a FB89     		ldrh	r3, [r7, #14]	@ movhi
 3095 005c 0133     		adds	r3, r3, #1
 3096 005e 9BB2     		uxth	r3, r3
 3097 0060 1B02     		lsls	r3, r3, #8
ARM GAS  /tmp/cc3wfdLm.s 			page 89


 3098 0062 99B2     		uxth	r1, r3
 3099 0064 FB89     		ldrh	r3, [r7, #14]
 3100 0066 0133     		adds	r3, r3, #1
 3101 0068 1B0A     		lsrs	r3, r3, #8
 3102 006a 9BB2     		uxth	r3, r3
 3103 006c 0B43     		orrs	r3, r3, r1
 3104 006e 9BB2     		uxth	r3, r3
1718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 3105              		.loc 1 1718 0
 3106 0070 1344     		add	r3, r3, r2
 3107 0072 9AB2     		uxth	r2, r3
 3108 0074 7B69     		ldr	r3, [r7, #20]
 3109 0076 5A80     		strh	r2, [r3, #2]	@ unaligned
 3110 0078 10E0     		b	.L197
 3111              	.L196:
1721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxICMPHeader->usChecksum = ( uint16_t )
1725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 3112              		.loc 1 1725 0
 3113 007a 7B69     		ldr	r3, [r7, #20]
 3114 007c 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 3115 007e 9AB2     		uxth	r2, r3
1726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					FreeRTOS_htons( usRequest ) );
 3116              		.loc 1 1726 0
 3117 0080 FB89     		ldrh	r3, [r7, #14]
 3118 0082 1B02     		lsls	r3, r3, #8
 3119 0084 99B2     		uxth	r1, r3
 3120 0086 FB89     		ldrh	r3, [r7, #14]
 3121 0088 1B0A     		lsrs	r3, r3, #8
 3122 008a 9BB2     		uxth	r3, r3
 3123 008c 9BB2     		uxth	r3, r3
 3124 008e 0B43     		orrs	r3, r3, r1
 3125 0090 9BB2     		uxth	r3, r3
 3126 0092 9BB2     		uxth	r3, r3
1724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 3127              		.loc 1 1724 0
 3128 0094 1344     		add	r3, r3, r2
 3129 0096 9AB2     		uxth	r2, r3
 3130 0098 7B69     		ldr	r3, [r7, #20]
 3131 009a 5A80     		strh	r2, [r3, #2]	@ unaligned
 3132              	.L197:
1727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return eReturnEthernetFrame;
 3133              		.loc 1 1728 0
 3134 009c 0223     		movs	r3, #2
1729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 3135              		.loc 1 1729 0
 3136 009e 1846     		mov	r0, r3
 3137 00a0 1C37     		adds	r7, r7, #28
 3138              	.LCFI141:
 3139              		.cfi_def_cfa_offset 4
 3140 00a2 BD46     		mov	sp, r7
 3141              	.LCFI142:
 3142              		.cfi_def_cfa_register 13
 3143              		@ sp needed
ARM GAS  /tmp/cc3wfdLm.s 			page 90


 3144 00a4 5DF8047B 		ldr	r7, [sp], #4
 3145              	.LCFI143:
 3146              		.cfi_restore 7
 3147              		.cfi_def_cfa_offset 0
 3148 00a8 7047     		bx	lr
 3149              	.L200:
 3150 00aa 00BF     		.align	2
 3151              	.L199:
 3152 00ac 00000000 		.word	xDefaultPartUDPPacketHeader
 3153              		.cfi_endproc
 3154              	.LFE57:
 3156              		.section	.text.prvProcessICMPPacket,"ax",%progbits
 3157              		.align	2
 3158              		.thumb
 3159              		.thumb_func
 3161              	prvProcessICMPPacket:
 3162              	.LFB58:
1730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigREPLY_TO_INCOMING_PINGS == 1 */
1732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
1737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3163              		.loc 1 1737 0
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 16
 3166              		@ frame_needed = 1, uses_anonymous_args = 0
 3167 0000 80B5     		push	{r7, lr}
 3168              	.LCFI144:
 3169              		.cfi_def_cfa_offset 8
 3170              		.cfi_offset 7, -8
 3171              		.cfi_offset 14, -4
 3172 0002 84B0     		sub	sp, sp, #16
 3173              	.LCFI145:
 3174              		.cfi_def_cfa_offset 24
 3175 0004 00AF     		add	r7, sp, #0
 3176              	.LCFI146:
 3177              		.cfi_def_cfa_register 7
 3178 0006 7860     		str	r0, [r7, #4]
1738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 3179              		.loc 1 1738 0
 3180 0008 0023     		movs	r3, #0
 3181 000a FB73     		strb	r3, [r7, #15]
1739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceICMP_PACKET_RECEIVED();
1741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 3182              		.loc 1 1741 0
 3183 000c 7B68     		ldr	r3, [r7, #4]
 3184 000e 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 3185 0012 002B     		cmp	r3, #0
 3186 0014 08D0     		beq	.L203
 3187 0016 082B     		cmp	r3, #8
 3188 0018 00D0     		beq	.L204
1742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipICMP_ECHO_REQUEST	:
ARM GAS  /tmp/cc3wfdLm.s 			page 91


1744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
1745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
1747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
1749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipICMP_ECHO_REPLY		:
1752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					prvProcessICMPEchoReply( pxICMPPacket );
1755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
1757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default	:
1760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 3189              		.loc 1 1760 0
 3190 001a 09E0     		b	.L205
 3191              	.L204:
1746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 3192              		.loc 1 1746 0
 3193 001c 7868     		ldr	r0, [r7, #4]
 3194 001e FFF7FEFF 		bl	prvProcessICMPEchoRequest
 3195 0022 0346     		mov	r3, r0
 3196 0024 FB73     		strb	r3, [r7, #15]
1749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 3197              		.loc 1 1749 0
 3198 0026 03E0     		b	.L205
 3199              	.L203:
1754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 3200              		.loc 1 1754 0
 3201 0028 7868     		ldr	r0, [r7, #4]
 3202 002a FFF7FEFF 		bl	prvProcessICMPEchoReply
1757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 3203              		.loc 1 1757 0
 3204 002e 00BF     		nop
 3205              	.L205:
1761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return eReturn;
 3206              		.loc 1 1763 0
 3207 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 3208              		.loc 1 1764 0
 3209 0032 1846     		mov	r0, r3
 3210 0034 1037     		adds	r7, r7, #16
 3211              	.LCFI147:
 3212              		.cfi_def_cfa_offset 8
 3213 0036 BD46     		mov	sp, r7
 3214              	.LCFI148:
 3215              		.cfi_def_cfa_register 13
 3216              		@ sp needed
 3217 0038 80BD     		pop	{r7, pc}
 3218              		.cfi_endproc
 3219              	.LFE58:
 3221 003a 00BF     		.section	.text.usGenerateProtocolChecksum,"ax",%progbits
ARM GAS  /tmp/cc3wfdLm.s 			page 92


 3222              		.align	2
 3223              		.global	usGenerateProtocolChecksum
 3224              		.thumb
 3225              		.thumb_func
 3227              	usGenerateProtocolChecksum:
 3228              	.LFB59:
1765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
1767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, BaseType_t xOutgoingP
1770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3229              		.loc 1 1770 0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 40
 3232              		@ frame_needed = 1, uses_anonymous_args = 0
 3233 0000 80B5     		push	{r7, lr}
 3234              	.LCFI149:
 3235              		.cfi_def_cfa_offset 8
 3236              		.cfi_offset 7, -8
 3237              		.cfi_offset 14, -4
 3238 0002 8AB0     		sub	sp, sp, #40
 3239              	.LCFI150:
 3240              		.cfi_def_cfa_offset 48
 3241 0004 00AF     		add	r7, sp, #0
 3242              	.LCFI151:
 3243              		.cfi_def_cfa_register 7
 3244 0006 7860     		str	r0, [r7, #4]
 3245 0008 3960     		str	r1, [r7]
1771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulLength;
1772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usChecksum, *pusChecksum;
1773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const IPPacket_t * pxIPPacket;
1774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** UBaseType_t uxIPHeaderLength;
1775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** ProtocolPacket_t *pxProtPack;
1776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t ucProtocol;
1777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
1778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const char *pcType;
1779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxIPPacket = ( const IPPacket_t * ) pucEthernetBuffer;
 3246              		.loc 1 1781 0
 3247 000a 7B68     		ldr	r3, [r7, #4]
 3248 000c FB61     		str	r3, [r7, #28]
1782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uxIPHeaderLength = ( UBaseType_t ) ( 4u * ( pxIPPacket->xIPHeader.ucVersionHeaderLength & 0x0Fu ) 
 3249              		.loc 1 1782 0
 3250 000e FB69     		ldr	r3, [r7, #28]
 3251 0010 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 3252 0012 03F00F03 		and	r3, r3, #15
 3253 0016 9B00     		lsls	r3, r3, #2
 3254 0018 BB61     		str	r3, [r7, #24]
1783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxProtPack = ( ProtocolPacket_t * ) ( pucEthernetBuffer + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEAD
 3255              		.loc 1 1783 0
 3256 001a BB69     		ldr	r3, [r7, #24]
 3257 001c 143B     		subs	r3, r3, #20
 3258 001e 7A68     		ldr	r2, [r7, #4]
 3259 0020 1344     		add	r3, r3, r2
 3260 0022 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/cc3wfdLm.s 			page 93


1784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 3261              		.loc 1 1784 0
 3262 0024 FB69     		ldr	r3, [r7, #28]
 3263 0026 DB7D     		ldrb	r3, [r3, #23]
 3264 0028 FB74     		strb	r3, [r7, #19]
1785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 3265              		.loc 1 1786 0
 3266 002a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3267 002c 112B     		cmp	r3, #17
 3268 002e 03D1     		bne	.L208
1787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 3269              		.loc 1 1788 0
 3270 0030 7B69     		ldr	r3, [r7, #20]
 3271 0032 2833     		adds	r3, r3, #40
 3272 0034 3B62     		str	r3, [r7, #32]
 3273 0036 13E0     		b	.L209
 3274              	.L208:
1789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pcType = "UDP";
1792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 3275              		.loc 1 1795 0
 3276 0038 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3277 003a 062B     		cmp	r3, #6
 3278 003c 03D1     		bne	.L210
1796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
 3279              		.loc 1 1797 0
 3280 003e 7B69     		ldr	r3, [r7, #20]
 3281 0040 3233     		adds	r3, r3, #50
 3282 0042 3B62     		str	r3, [r7, #32]
 3283 0044 0CE0     		b	.L209
 3284              	.L210:
1798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pcType = "TCP";
1801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 3285              		.loc 1 1804 0
 3286 0046 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3287 0048 012B     		cmp	r3, #1
 3288 004a 02D0     		beq	.L211
 3289              		.loc 1 1804 0 is_stmt 0 discriminator 1
 3290 004c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3291 004e 022B     		cmp	r3, #2
 3292 0050 03D1     		bne	.L212
 3293              	.L211:
1805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
1806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
ARM GAS  /tmp/cc3wfdLm.s 			page 94


 3294              		.loc 1 1807 0 is_stmt 1
 3295 0052 7B69     		ldr	r3, [r7, #20]
 3296 0054 2433     		adds	r3, r3, #36
 3297 0056 3B62     		str	r3, [r7, #32]
 3298 0058 02E0     		b	.L209
 3299              	.L212:
1808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP )
1812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pcType = "ICMP";
1814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
1816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pcType = "IGMP";
1818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
1825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return ipUNHANDLED_PROTOCOL;
 3300              		.loc 1 1825 0
 3301 005a 44F22133 		movw	r3, #17185
 3302 005e 67E0     		b	.L213
 3303              	.L209:
1826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xOutgoingPacket != pdFALSE )
 3304              		.loc 1 1828 0
 3305 0060 3B68     		ldr	r3, [r7]
 3306 0062 002B     		cmp	r3, #0
 3307 0064 03D0     		beq	.L214
1829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* This is an outgoing packet. Before calculating the checksum, set it
1831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		to zero. */
1832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*( pusChecksum ) = 0u;
 3308              		.loc 1 1832 0
 3309 0066 3B6A     		ldr	r3, [r7, #32]
 3310 0068 0022     		movs	r2, #0
 3311 006a 1A80     		strh	r2, [r3]	@ movhi
 3312 006c 06E0     		b	.L215
 3313              	.L214:
1833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if ( *pusChecksum == 0u )
 3314              		.loc 1 1834 0
 3315 006e 3B6A     		ldr	r3, [r7, #32]
 3316 0070 1B88     		ldrh	r3, [r3]
 3317 0072 002B     		cmp	r3, #0
 3318 0074 02D1     		bne	.L215
1835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sender hasn't set the checksum, no use to calculate it. */
1837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return ipCORRECT_CRC;
 3319              		.loc 1 1837 0
 3320 0076 4FF6FF73 		movw	r3, #65535
ARM GAS  /tmp/cc3wfdLm.s 			page 95


 3321 007a 59E0     		b	.L213
 3322              	.L215:
1838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ulLength = ( uint32_t )
1841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) - ( ( uint16_t ) uxIPHeaderLength ) ); /* norm
 3323              		.loc 1 1841 0
 3324 007c FB69     		ldr	r3, [r7, #28]
 3325 007e 1B8A     		ldrh	r3, [r3, #16]	@ unaligned
 3326 0080 9BB2     		uxth	r3, r3
 3327 0082 1B02     		lsls	r3, r3, #8
 3328 0084 9AB2     		uxth	r2, r3
 3329 0086 FB69     		ldr	r3, [r7, #28]
 3330 0088 1B8A     		ldrh	r3, [r3, #16]	@ unaligned
 3331 008a 9BB2     		uxth	r3, r3
 3332 008c 1B0A     		lsrs	r3, r3, #8
 3333 008e 9BB2     		uxth	r3, r3
 3334 0090 9BB2     		uxth	r3, r3
 3335 0092 1343     		orrs	r3, r3, r2
 3336 0094 9BB2     		uxth	r3, r3
 3337 0096 9BB2     		uxth	r3, r3
 3338 0098 1A46     		mov	r2, r3
 3339 009a BB69     		ldr	r3, [r7, #24]
 3340 009c 9BB2     		uxth	r3, r3
 3341 009e D31A     		subs	r3, r2, r3
1840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) - ( ( uint16_t ) uxIPHeaderLength ) ); /* norm
 3342              		.loc 1 1840 0
 3343 00a0 FB60     		str	r3, [r7, #12]
1842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
 3344              		.loc 1 1843 0
 3345 00a2 FB68     		ldr	r3, [r7, #12]
 3346 00a4 072B     		cmp	r3, #7
 3347 00a6 06D9     		bls	.L216
1844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( ulLength > ( uint32_t )( ipconfigNETWORK_MTU - uxIPHeaderLength ) ) )
 3348              		.loc 1 1844 0 discriminator 1
 3349 00a8 BA69     		ldr	r2, [r7, #24]
 3350 00aa 40F2DC53 		movw	r3, #1500
 3351 00ae 9B1A     		subs	r3, r3, r2
1843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( ulLength > ( uint32_t )( ipconfigNETWORK_MTU - uxIPHeaderLength ) ) )
 3352              		.loc 1 1843 0 discriminator 1
 3353 00b0 FA68     		ldr	r2, [r7, #12]
 3354 00b2 9342     		cmp	r3, r2
 3355 00b4 02D2     		bcs	.L217
 3356              	.L216:
1845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: len invalid: %lu\n", pcType, ulLength 
1849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Again, in a 16-bit return value there is no space to indicate an
1853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		error.  For incoming packets, 0x1234 will cause dropping of the packet.
1854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		For outgoing packets, there is a serious problem with the
1855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		format/length */
1856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return ipINVALID_LENGTH;
ARM GAS  /tmp/cc3wfdLm.s 			page 96


 3357              		.loc 1 1856 0
 3358 00b6 41F23423 		movw	r3, #4660
 3359 00ba 39E0     		b	.L213
 3360              	.L217:
1857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 3361              		.loc 1 1858 0
 3362 00bc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3363 00be 022B     		cmp	r3, #2
 3364 00c0 0AD8     		bhi	.L218
1859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
1861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = ( uint16_t )
1862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ~usGenerateChecksum( 0UL,
1863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 3365              		.loc 1 1863 0
 3366 00c2 7B69     		ldr	r3, [r7, #20]
 3367 00c4 2233     		adds	r3, r3, #34
1862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 3368              		.loc 1 1862 0
 3369 00c6 0020     		movs	r0, #0
 3370 00c8 1946     		mov	r1, r3
 3371 00ca FA68     		ldr	r2, [r7, #12]
 3372 00cc FFF7FEFF 		bl	usGenerateChecksum
 3373 00d0 0346     		mov	r3, r0
1861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ~usGenerateChecksum( 0UL,
 3374              		.loc 1 1861 0
 3375 00d2 DB43     		mvns	r3, r3
 3376 00d4 FB84     		strh	r3, [r7, #38]	@ movhi
 3377 00d6 13E0     		b	.L219
 3378              	.L218:
1864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
1868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		fields */
1869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 3379              		.loc 1 1869 0
 3380 00d8 FB68     		ldr	r3, [r7, #12]
 3381 00da 9AB2     		uxth	r2, r3
 3382 00dc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3383 00de 9BB2     		uxth	r3, r3
 3384 00e0 1344     		add	r3, r3, r2
 3385 00e2 FB84     		strh	r3, [r7, #38]	@ movhi
1870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* And then continue at the IPv4 source and destination addresses. */
1872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = ( uint16_t )
1873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIP
 3386              		.loc 1 1873 0
 3387 00e4 F98C     		ldrh	r1, [r7, #38]
 3388 00e6 FB69     		ldr	r3, [r7, #28]
 3389 00e8 03F11A02 		add	r2, r3, #26
1874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( 2u * sizeof( pxIPPacket->xIPHeader.ulSourceIPAddress ) + ulLength ) ) );
 3390              		.loc 1 1874 0
 3391 00ec FB68     		ldr	r3, [r7, #12]
 3392 00ee 0833     		adds	r3, r3, #8
1873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( 2u * sizeof( pxIPPacket->xIPHeader.ulSourceIPAddress ) + ulLength ) ) );
ARM GAS  /tmp/cc3wfdLm.s 			page 97


 3393              		.loc 1 1873 0
 3394 00f0 0846     		mov	r0, r1
 3395 00f2 1146     		mov	r1, r2
 3396 00f4 1A46     		mov	r2, r3
 3397 00f6 FFF7FEFF 		bl	usGenerateChecksum
 3398 00fa 0346     		mov	r3, r0
1872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIP
 3399              		.loc 1 1872 0
 3400 00fc DB43     		mvns	r3, r3
 3401 00fe FB84     		strh	r3, [r7, #38]	@ movhi
 3402              	.L219:
1875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sum TCP header and data. */
1877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( usChecksum == 0u )
 3403              		.loc 1 1879 0
 3404 0100 FB8C     		ldrh	r3, [r7, #38]
 3405 0102 002B     		cmp	r3, #0
 3406 0104 03D1     		bne	.L220
1880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xOutgoingPacket != pdFALSE )
1884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecksum
1886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = ipCORRECT_CRC;
 3407              		.loc 1 1890 0
 3408 0106 4FF6FF73 		movw	r3, #65535
 3409 010a FB84     		strh	r3, [r7, #38]	@ movhi
 3410 010c 09E0     		b	.L221
 3411              	.L220:
1891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = FreeRTOS_htons( usChecksum );
 3412              		.loc 1 1894 0
 3413 010e FB8C     		ldrh	r3, [r7, #38]
 3414 0110 1B02     		lsls	r3, r3, #8
 3415 0112 9AB2     		uxth	r2, r3
 3416 0114 FB8C     		ldrh	r3, [r7, #38]
 3417 0116 1B0A     		lsrs	r3, r3, #8
 3418 0118 9BB2     		uxth	r3, r3
 3419 011a 9BB2     		uxth	r3, r3
 3420 011c 1343     		orrs	r3, r3, r2
 3421 011e 9BB2     		uxth	r3, r3
 3422 0120 FB84     		strh	r3, [r7, #38]	@ movhi
 3423              	.L221:
1895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xOutgoingPacket != pdFALSE )
 3424              		.loc 1 1897 0
 3425 0122 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc3wfdLm.s 			page 98


 3426 0124 002B     		cmp	r3, #0
 3427 0126 02D0     		beq	.L222
1898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*( pusChecksum ) = usChecksum;
 3428              		.loc 1 1899 0
 3429 0128 3B6A     		ldr	r3, [r7, #32]
 3430 012a FA8C     		ldrh	r2, [r7, #38]	@ movhi
 3431 012c 1A80     		strh	r2, [r3]	@ movhi
 3432              	.L222:
1900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( usChecksum != ipCORRECT_CRC )
1903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: ID %04X: from %lxip to %lxip bad crc: %
1905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pcType,
1906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_ntohs( pxIPPacket->xIPHeader.usIdentification ),
1907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ),
1908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ),
1909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_ntohs( *pusChecksum ) ) );
1910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return usChecksum;
 3433              		.loc 1 1913 0
 3434 012e FB8C     		ldrh	r3, [r7, #38]
 3435              	.L213:
1914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3436              		.loc 1 1914 0
 3437 0130 1846     		mov	r0, r3
 3438 0132 2837     		adds	r7, r7, #40
 3439              	.LCFI152:
 3440              		.cfi_def_cfa_offset 8
 3441 0134 BD46     		mov	sp, r7
 3442              	.LCFI153:
 3443              		.cfi_def_cfa_register 13
 3444              		@ sp needed
 3445 0136 80BD     		pop	{r7, pc}
 3446              		.cfi_endproc
 3447              	.LFE59:
 3449              		.section	.text.usGenerateChecksum,"ax",%progbits
 3450              		.align	2
 3451              		.global	usGenerateChecksum
 3452              		.thumb
 3453              		.thumb_func
 3455              	usGenerateChecksum:
 3456              	.LFB60:
1915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usGenerateChecksum( uint32_t ulSum, const uint8_t * pucNextData, size_t uxDataLengthBytes 
1918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3457              		.loc 1 1918 0
 3458              		.cfi_startproc
 3459              		@ args = 0, pretend = 0, frame = 48
 3460              		@ frame_needed = 1, uses_anonymous_args = 0
 3461              		@ link register save eliminated.
 3462 0000 80B4     		push	{r7}
 3463              	.LCFI154:
ARM GAS  /tmp/cc3wfdLm.s 			page 99


 3464              		.cfi_def_cfa_offset 4
 3465              		.cfi_offset 7, -4
 3466 0002 8DB0     		sub	sp, sp, #52
 3467              	.LCFI155:
 3468              		.cfi_def_cfa_offset 56
 3469 0004 00AF     		add	r7, sp, #0
 3470              	.LCFI156:
 3471              		.cfi_def_cfa_register 7
 3472 0006 F860     		str	r0, [r7, #12]
 3473 0008 B960     		str	r1, [r7, #8]
 3474 000a 7A60     		str	r2, [r7, #4]
1919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnion32 xSum2, xSum, xTerm;
1920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnionPtr xSource;		/* Points to first byte */
1921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnionPtr xLastSource;	/* Points to last byte plus one */
1922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulAlignBits, ulCarry = 0ul;
 3475              		.loc 1 1922 0
 3476 000c 0023     		movs	r3, #0
 3477 000e FB62     		str	r3, [r7, #44]
1923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Small MCUs often spend up to 30% of the time doing checksum calculations
1925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	This function is optimised for 32-bit CPUs; Each time it will try to fetch
1926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	32-bits, sums it with an accumulator and counts the number of carries. */
1927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Swap the input (little endian platform only). */
1929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = FreeRTOS_ntohs( ulSum );
 3478              		.loc 1 1929 0
 3479 0010 FB68     		ldr	r3, [r7, #12]
 3480 0012 9BB2     		uxth	r3, r3
 3481 0014 1B02     		lsls	r3, r3, #8
 3482 0016 9AB2     		uxth	r2, r3
 3483 0018 FB68     		ldr	r3, [r7, #12]
 3484 001a 1B0A     		lsrs	r3, r3, #8
 3485 001c 9BB2     		uxth	r3, r3
 3486 001e 1343     		orrs	r3, r3, r2
 3487 0020 9BB2     		uxth	r3, r3
 3488 0022 3B62     		str	r3, [r7, #32]
1930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xTerm.u32 = 0ul;
 3489              		.loc 1 1930 0
 3490 0024 0023     		movs	r3, #0
 3491 0026 FB61     		str	r3, [r7, #28]
1931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSource.u8ptr = ( uint8_t * ) pucNextData;
 3492              		.loc 1 1932 0
 3493 0028 BB68     		ldr	r3, [r7, #8]
 3494 002a BB61     		str	r3, [r7, #24]
1933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ulAlignBits = ( ( ( uint32_t ) pucNextData ) & 0x03u ); /* gives 0, 1, 2, or 3 */
 3495              		.loc 1 1933 0
 3496 002c BB68     		ldr	r3, [r7, #8]
 3497 002e 03F00303 		and	r3, r3, #3
 3498 0032 BB62     		str	r3, [r7, #40]
1934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* If byte (8-bit) aligned... */
1936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ( ulAlignBits & 1ul ) != 0ul ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 3499              		.loc 1 1936 0
 3500 0034 BB6A     		ldr	r3, [r7, #40]
 3501 0036 03F00103 		and	r3, r3, #1
 3502 003a 002B     		cmp	r3, #0
ARM GAS  /tmp/cc3wfdLm.s 			page 100


 3503 003c 0BD0     		beq	.L224
 3504              		.loc 1 1936 0 is_stmt 0 discriminator 1
 3505 003e 7B68     		ldr	r3, [r7, #4]
 3506 0040 002B     		cmp	r3, #0
 3507 0042 08D0     		beq	.L224
1937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xTerm.u8[ 1 ] = *( xSource.u8ptr );
 3508              		.loc 1 1938 0 is_stmt 1
 3509 0044 BB69     		ldr	r3, [r7, #24]
 3510 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3511 0048 7B77     		strb	r3, [r7, #29]
1939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( xSource.u8ptr )++;
 3512              		.loc 1 1939 0
 3513 004a BB69     		ldr	r3, [r7, #24]
 3514 004c 0133     		adds	r3, r3, #1
 3515 004e BB61     		str	r3, [r7, #24]
1940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxDataLengthBytes--;
 3516              		.loc 1 1940 0
 3517 0050 7B68     		ldr	r3, [r7, #4]
 3518 0052 013B     		subs	r3, r3, #1
 3519 0054 7B60     		str	r3, [r7, #4]
 3520              	.L224:
1941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now xSource is word (16-bit) aligned. */
1942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* If half-word (16-bit) aligned... */
1945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ( ulAlignBits == 1u ) || ( ulAlignBits == 2u ) ) && ( uxDataLengthBytes >= 2u ) )
 3521              		.loc 1 1945 0
 3522 0056 BB6A     		ldr	r3, [r7, #40]
 3523 0058 012B     		cmp	r3, #1
 3524 005a 02D0     		beq	.L225
 3525              		.loc 1 1945 0 is_stmt 0 discriminator 2
 3526 005c BB6A     		ldr	r3, [r7, #40]
 3527 005e 022B     		cmp	r3, #2
 3528 0060 0DD1     		bne	.L226
 3529              	.L225:
 3530              		.loc 1 1945 0 discriminator 3
 3531 0062 7B68     		ldr	r3, [r7, #4]
 3532 0064 012B     		cmp	r3, #1
 3533 0066 0AD9     		bls	.L226
1946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 += *(xSource.u16ptr);
 3534              		.loc 1 1947 0 is_stmt 1
 3535 0068 3B6A     		ldr	r3, [r7, #32]
 3536 006a BA69     		ldr	r2, [r7, #24]
 3537 006c 1288     		ldrh	r2, [r2]
 3538 006e 1344     		add	r3, r3, r2
 3539 0070 3B62     		str	r3, [r7, #32]
1948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( xSource.u16ptr )++;
 3540              		.loc 1 1948 0
 3541 0072 BB69     		ldr	r3, [r7, #24]
 3542 0074 0233     		adds	r3, r3, #2
 3543 0076 BB61     		str	r3, [r7, #24]
1949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxDataLengthBytes -= 2u;
 3544              		.loc 1 1949 0
 3545 0078 7B68     		ldr	r3, [r7, #4]
 3546 007a 023B     		subs	r3, r3, #2
ARM GAS  /tmp/cc3wfdLm.s 			page 101


 3547 007c 7B60     		str	r3, [r7, #4]
 3548              	.L226:
1950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now xSource is word (32-bit) aligned. */
1951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Word (32-bit) aligned, do the most part. */
1954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4u ) ) - 3u;
 3549              		.loc 1 1954 0
 3550 007e BA69     		ldr	r2, [r7, #24]
 3551 0080 7B68     		ldr	r3, [r7, #4]
 3552 0082 9908     		lsrs	r1, r3, #2
 3553 0084 494B     		ldr	r3, .L238
 3554 0086 0B44     		add	r3, r3, r1
 3555 0088 9B00     		lsls	r3, r3, #2
 3556 008a 1344     		add	r3, r3, r2
 3557 008c 7B61     		str	r3, [r7, #20]
1955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* In this loop, four 32-bit additions will be done, in total 16 bytes.
1957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	Indexing with constants (0,1,2,3) gives faster code than using
1958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	post-increments. */
1959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	while( xSource.u32ptr < xLastSource.u32ptr )
 3558              		.loc 1 1959 0
 3559 008e 35E0     		b	.L227
 3560              	.L232:
1960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Use a secondary Sum2, just to see if the addition produced an
1962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		overflow. */
1963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 3561              		.loc 1 1963 0
 3562 0090 3A6A     		ldr	r2, [r7, #32]
 3563 0092 BB69     		ldr	r3, [r7, #24]
 3564 0094 1B68     		ldr	r3, [r3]
 3565 0096 1344     		add	r3, r3, r2
 3566 0098 7B62     		str	r3, [r7, #36]
1964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 < xSum.u32 )
 3567              		.loc 1 1964 0
 3568 009a 7A6A     		ldr	r2, [r7, #36]
 3569 009c 3B6A     		ldr	r3, [r7, #32]
 3570 009e 9A42     		cmp	r2, r3
 3571 00a0 02D2     		bcs	.L228
1965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
 3572              		.loc 1 1966 0
 3573 00a2 FB6A     		ldr	r3, [r7, #44]
 3574 00a4 0133     		adds	r3, r3, #1
 3575 00a6 FB62     		str	r3, [r7, #44]
 3576              	.L228:
1967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now add the secondary sum to the major sum, and remember if there was
1970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		a carry. */
1971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
 3577              		.loc 1 1971 0
 3578 00a8 7A6A     		ldr	r2, [r7, #36]
 3579 00aa BB69     		ldr	r3, [r7, #24]
 3580 00ac 0433     		adds	r3, r3, #4
 3581 00ae 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc3wfdLm.s 			page 102


 3582 00b0 1344     		add	r3, r3, r2
 3583 00b2 3B62     		str	r3, [r7, #32]
1972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 > xSum.u32 )
 3584              		.loc 1 1972 0
 3585 00b4 7A6A     		ldr	r2, [r7, #36]
 3586 00b6 3B6A     		ldr	r3, [r7, #32]
 3587 00b8 9A42     		cmp	r2, r3
 3588 00ba 02D9     		bls	.L229
1973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
 3589              		.loc 1 1974 0
 3590 00bc FB6A     		ldr	r3, [r7, #44]
 3591 00be 0133     		adds	r3, r3, #1
 3592 00c0 FB62     		str	r3, [r7, #44]
 3593              	.L229:
1975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* And do the same trick once again for indexes 2 and 3 */
1978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 3594              		.loc 1 1978 0
 3595 00c2 3A6A     		ldr	r2, [r7, #32]
 3596 00c4 BB69     		ldr	r3, [r7, #24]
 3597 00c6 0833     		adds	r3, r3, #8
 3598 00c8 1B68     		ldr	r3, [r3]
 3599 00ca 1344     		add	r3, r3, r2
 3600 00cc 7B62     		str	r3, [r7, #36]
1979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 < xSum.u32 )
 3601              		.loc 1 1979 0
 3602 00ce 7A6A     		ldr	r2, [r7, #36]
 3603 00d0 3B6A     		ldr	r3, [r7, #32]
 3604 00d2 9A42     		cmp	r2, r3
 3605 00d4 02D2     		bcs	.L230
1980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
 3606              		.loc 1 1981 0
 3607 00d6 FB6A     		ldr	r3, [r7, #44]
 3608 00d8 0133     		adds	r3, r3, #1
 3609 00da FB62     		str	r3, [r7, #44]
 3610              	.L230:
1982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 3611              		.loc 1 1984 0
 3612 00dc 7A6A     		ldr	r2, [r7, #36]
 3613 00de BB69     		ldr	r3, [r7, #24]
 3614 00e0 0C33     		adds	r3, r3, #12
 3615 00e2 1B68     		ldr	r3, [r3]
 3616 00e4 1344     		add	r3, r3, r2
 3617 00e6 3B62     		str	r3, [r7, #32]
1985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 > xSum.u32 )
 3618              		.loc 1 1986 0
 3619 00e8 7A6A     		ldr	r2, [r7, #36]
 3620 00ea 3B6A     		ldr	r3, [r7, #32]
 3621 00ec 9A42     		cmp	r2, r3
 3622 00ee 02D9     		bls	.L231
1987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
ARM GAS  /tmp/cc3wfdLm.s 			page 103


1988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
 3623              		.loc 1 1988 0
 3624 00f0 FB6A     		ldr	r3, [r7, #44]
 3625 00f2 0133     		adds	r3, r3, #1
 3626 00f4 FB62     		str	r3, [r7, #44]
 3627              	.L231:
1989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* And finally advance the pointer 4 * 4 = 16 bytes. */
1992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u32ptr += 4;
 3628              		.loc 1 1992 0
 3629 00f6 BB69     		ldr	r3, [r7, #24]
 3630 00f8 1033     		adds	r3, r3, #16
 3631 00fa BB61     		str	r3, [r7, #24]
 3632              	.L227:
1959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3633              		.loc 1 1959 0
 3634 00fc BA69     		ldr	r2, [r7, #24]
 3635 00fe 7B69     		ldr	r3, [r7, #20]
 3636 0100 9A42     		cmp	r2, r3
 3637 0102 C5D3     		bcc	.L232
1993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Now add all carries. */
1996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 3638              		.loc 1 1996 0
 3639 0104 3B8C     		ldrh	r3, [r7, #32]
 3640 0106 1A46     		mov	r2, r3
 3641 0108 7B8C     		ldrh	r3, [r7, #34]
 3642 010a 1A44     		add	r2, r2, r3
 3643 010c FB6A     		ldr	r3, [r7, #44]
 3644 010e 1344     		add	r3, r3, r2
 3645 0110 3B62     		str	r3, [r7, #32]
1997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uxDataLengthBytes %= 16u;
 3646              		.loc 1 1998 0
 3647 0112 7B68     		ldr	r3, [r7, #4]
 3648 0114 03F00F03 		and	r3, r3, #15
 3649 0118 7B60     		str	r3, [r7, #4]
1999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 3650              		.loc 1 1999 0
 3651 011a BA69     		ldr	r2, [r7, #24]
 3652 011c 7B68     		ldr	r3, [r7, #4]
 3653 011e 23F00103 		bic	r3, r3, #1
 3654 0122 1344     		add	r3, r3, r2
 3655 0124 7B61     		str	r3, [r7, #20]
2000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Half-word aligned. */
2002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	while( xSource.u16ptr < xLastSource.u16ptr )
 3656              		.loc 1 2002 0
 3657 0126 07E0     		b	.L233
 3658              	.L234:
2003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* At least one more short. */
2005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 += xSource.u16ptr[ 0 ];
 3659              		.loc 1 2005 0
 3660 0128 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/cc3wfdLm.s 			page 104


 3661 012a BA69     		ldr	r2, [r7, #24]
 3662 012c 1288     		ldrh	r2, [r2]
 3663 012e 1344     		add	r3, r3, r2
 3664 0130 3B62     		str	r3, [r7, #32]
2006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u16ptr++;
 3665              		.loc 1 2006 0
 3666 0132 BB69     		ldr	r3, [r7, #24]
 3667 0134 0233     		adds	r3, r3, #2
 3668 0136 BB61     		str	r3, [r7, #24]
 3669              	.L233:
2002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3670              		.loc 1 2002 0
 3671 0138 BA69     		ldr	r2, [r7, #24]
 3672 013a 7B69     		ldr	r3, [r7, #20]
 3673 013c 9A42     		cmp	r2, r3
 3674 013e F3D3     		bcc	.L234
2007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0u )	/* Maybe one more ? */
 3675              		.loc 1 2009 0
 3676 0140 7B68     		ldr	r3, [r7, #4]
 3677 0142 03F00103 		and	r3, r3, #1
 3678 0146 002B     		cmp	r3, #0
 3679 0148 02D0     		beq	.L235
2010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 3680              		.loc 1 2011 0
 3681 014a BB69     		ldr	r3, [r7, #24]
 3682 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3683 014e 3B77     		strb	r3, [r7, #28]
 3684              	.L235:
2012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 += xTerm.u32;
 3685              		.loc 1 2013 0
 3686 0150 3A6A     		ldr	r2, [r7, #32]
 3687 0152 FB69     		ldr	r3, [r7, #28]
 3688 0154 1344     		add	r3, r3, r2
 3689 0156 3B62     		str	r3, [r7, #32]
2014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Now add all carries again. */
2016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 3690              		.loc 1 2016 0
 3691 0158 3B8C     		ldrh	r3, [r7, #32]
 3692 015a 1A46     		mov	r2, r3
 3693 015c 7B8C     		ldrh	r3, [r7, #34]
 3694 015e 1344     		add	r3, r3, r2
 3695 0160 3B62     		str	r3, [r7, #32]
2017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The previous summation might have given a 16-bit carry. */
2019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 3696              		.loc 1 2019 0
 3697 0162 3B8C     		ldrh	r3, [r7, #32]
 3698 0164 1A46     		mov	r2, r3
 3699 0166 7B8C     		ldrh	r3, [r7, #34]
 3700 0168 1344     		add	r3, r3, r2
 3701 016a 3B62     		str	r3, [r7, #32]
2020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc3wfdLm.s 			page 105


2021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ulAlignBits & 1u ) != 0u )
 3702              		.loc 1 2021 0
 3703 016c BB6A     		ldr	r3, [r7, #40]
 3704 016e 03F00103 		and	r3, r3, #1
 3705 0172 002B     		cmp	r3, #0
 3706 0174 08D0     		beq	.L236
2022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Quite unlikely, but pucNextData might be non-aligned, which would
2024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		 mean that a checksum is calculated starting at an odd position. */
2025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = ( ( xSum.u32 & 0xffu ) << 8 ) | ( ( xSum.u32 & 0xff00u ) >> 8 );
 3707              		.loc 1 2025 0
 3708 0176 3B6A     		ldr	r3, [r7, #32]
 3709 0178 1B02     		lsls	r3, r3, #8
 3710 017a 9AB2     		uxth	r2, r3
 3711 017c 3B6A     		ldr	r3, [r7, #32]
 3712 017e 03F47F43 		and	r3, r3, #65280
 3713 0182 1B0A     		lsrs	r3, r3, #8
 3714 0184 1343     		orrs	r3, r3, r2
 3715 0186 3B62     		str	r3, [r7, #32]
 3716              	.L236:
2026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* swap the output (little endian platform only). */
2029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
 3717              		.loc 1 2029 0
 3718 0188 3B6A     		ldr	r3, [r7, #32]
 3719 018a 9BB2     		uxth	r3, r3
 3720 018c 1B02     		lsls	r3, r3, #8
 3721 018e 9AB2     		uxth	r2, r3
 3722 0190 3B6A     		ldr	r3, [r7, #32]
 3723 0192 9BB2     		uxth	r3, r3
 3724 0194 1B0A     		lsrs	r3, r3, #8
 3725 0196 9BB2     		uxth	r3, r3
 3726 0198 9BB2     		uxth	r3, r3
 3727 019a 1343     		orrs	r3, r3, r2
 3728 019c 9BB2     		uxth	r3, r3
 3729 019e 9BB2     		uxth	r3, r3
2030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3730              		.loc 1 2030 0
 3731 01a0 1846     		mov	r0, r3
 3732 01a2 3437     		adds	r7, r7, #52
 3733              	.LCFI157:
 3734              		.cfi_def_cfa_offset 4
 3735 01a4 BD46     		mov	sp, r7
 3736              	.LCFI158:
 3737              		.cfi_def_cfa_register 13
 3738              		@ sp needed
 3739 01a6 5DF8047B 		ldr	r7, [sp], #4
 3740              	.LCFI159:
 3741              		.cfi_restore 7
 3742              		.cfi_def_cfa_offset 0
 3743 01aa 7047     		bx	lr
 3744              	.L239:
 3745              		.align	2
 3746              	.L238:
 3747 01ac FDFFFF3F 		.word	1073741821
 3748              		.cfi_endproc
ARM GAS  /tmp/cc3wfdLm.s 			page 106


 3749              	.LFE60:
 3751              		.section	.text.vReturnEthernetFrame,"ax",%progbits
 3752              		.align	2
 3753              		.global	vReturnEthernetFrame
 3754              		.thumb
 3755              		.thumb_func
 3757              	vReturnEthernetFrame:
 3758              	.LFB61:
2031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSen
2034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3759              		.loc 1 2034 0
 3760              		.cfi_startproc
 3761              		@ args = 0, pretend = 0, frame = 16
 3762              		@ frame_needed = 1, uses_anonymous_args = 0
 3763 0000 80B5     		push	{r7, lr}
 3764              	.LCFI160:
 3765              		.cfi_def_cfa_offset 8
 3766              		.cfi_offset 7, -8
 3767              		.cfi_offset 14, -4
 3768 0002 84B0     		sub	sp, sp, #16
 3769              	.LCFI161:
 3770              		.cfi_def_cfa_offset 24
 3771 0004 00AF     		add	r7, sp, #0
 3772              	.LCFI162:
 3773              		.cfi_def_cfa_register 7
 3774 0006 7860     		str	r0, [r7, #4]
 3775 0008 3960     		str	r1, [r7]
2035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** EthernetHeader_t *pxEthernetHeader;
2036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 )
2038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNewBuffer;
2039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
2040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
2042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
2044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		BaseType_t xIndex;
2046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_printf( ( "vReturnEthernetFrame: length %lu\n", pxNetworkBuffer->xDataLength ) );
2048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHER
2049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0u;
2051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
2053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
2056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 )
2058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xReleaseAfterSend == pdFALSE )
 3776              		.loc 1 2059 0
 3777 000a 3B68     		ldr	r3, [r7]
 3778 000c 002B     		cmp	r3, #0
ARM GAS  /tmp/cc3wfdLm.s 			page 107


 3779 000e 0AD1     		bne	.L241
2060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( BaseType_t ) pxNetworkBu
 3780              		.loc 1 2061 0
 3781 0010 7B68     		ldr	r3, [r7, #4]
 3782 0012 DB69     		ldr	r3, [r3, #28]
 3783 0014 7868     		ldr	r0, [r7, #4]
 3784 0016 1946     		mov	r1, r3
 3785 0018 FFF7FEFF 		bl	pxDuplicateNetworkBufferWithDescriptor
 3786 001c F860     		str	r0, [r7, #12]
2062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReleaseAfterSend = pdTRUE;
 3787              		.loc 1 2062 0
 3788 001e 0123     		movs	r3, #1
 3789 0020 3B60     		str	r3, [r7]
2063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNetworkBuffer = pxNewBuffer;
 3790              		.loc 1 2063 0
 3791 0022 FB68     		ldr	r3, [r7, #12]
 3792 0024 7B60     		str	r3, [r7, #4]
 3793              	.L241:
2064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNetworkBuffer != NULL )
 3794              		.loc 1 2066 0
 3795 0026 7B68     		ldr	r3, [r7, #4]
 3796 0028 002B     		cmp	r3, #0
 3797 002a 15D0     		beq	.L240
2067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
2068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 3798              		.loc 1 2069 0
 3799 002c 7B68     		ldr	r3, [r7, #4]
 3800 002e 9B69     		ldr	r3, [r3, #24]
 3801 0030 BB60     		str	r3, [r7, #8]
2070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Swap source and destination MAC addresses. */
2072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xS
 3802              		.loc 1 2072 0
 3803 0032 BA68     		ldr	r2, [r7, #8]
 3804 0034 BB68     		ldr	r3, [r7, #8]
 3805 0036 0633     		adds	r3, r3, #6
 3806 0038 1046     		mov	r0, r2
 3807 003a 1946     		mov	r1, r3
 3808 003c 0622     		movs	r2, #6
 3809 003e FFF7FEFF 		bl	memcpy
2073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_
 3810              		.loc 1 2073 0
 3811 0042 BB68     		ldr	r3, [r7, #8]
 3812 0044 0633     		adds	r3, r3, #6
 3813 0046 1846     		mov	r0, r3
 3814 0048 0549     		ldr	r1, .L243
 3815 004a 0622     		movs	r2, #6
 3816 004c FFF7FEFF 		bl	memcpy
2074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Send! */
2076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 3817              		.loc 1 2076 0
 3818 0050 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/cc3wfdLm.s 			page 108


 3819 0052 3968     		ldr	r1, [r7]
 3820 0054 FFF7FEFF 		bl	xNetworkInterfaceOutput
 3821              	.L240:
2077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3822              		.loc 1 2078 0
 3823 0058 1037     		adds	r7, r7, #16
 3824              	.LCFI163:
 3825              		.cfi_def_cfa_offset 8
 3826 005a BD46     		mov	sp, r7
 3827              	.LCFI164:
 3828              		.cfi_def_cfa_register 13
 3829              		@ sp needed
 3830 005c 80BD     		pop	{r7, pc}
 3831              	.L244:
 3832 005e 00BF     		.align	2
 3833              	.L243:
 3834 0060 00000000 		.word	xDefaultPartUDPPacketHeader
 3835              		.cfi_endproc
 3836              	.LFE61:
 3838              		.section	.text.FreeRTOS_GetIPAddress,"ax",%progbits
 3839              		.align	2
 3840              		.global	FreeRTOS_GetIPAddress
 3841              		.thumb
 3842              		.thumb_func
 3844              	FreeRTOS_GetIPAddress:
 3845              	.LFB62:
2079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetIPAddress( void )
2082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3846              		.loc 1 2082 0
 3847              		.cfi_startproc
 3848              		@ args = 0, pretend = 0, frame = 0
 3849              		@ frame_needed = 1, uses_anonymous_args = 0
 3850              		@ link register save eliminated.
 3851 0000 80B4     		push	{r7}
 3852              	.LCFI165:
 3853              		.cfi_def_cfa_offset 4
 3854              		.cfi_offset 7, -4
 3855 0002 00AF     		add	r7, sp, #0
 3856              	.LCFI166:
 3857              		.cfi_def_cfa_register 7
2083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Returns the IP address of the NIC. */
2084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return *ipLOCAL_IP_ADDRESS_POINTER;
 3858              		.loc 1 2084 0
 3859 0004 034B     		ldr	r3, .L247
 3860 0006 5B69     		ldr	r3, [r3, #20]
2085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3861              		.loc 1 2085 0
 3862 0008 1846     		mov	r0, r3
 3863 000a BD46     		mov	sp, r7
 3864              	.LCFI167:
 3865              		.cfi_def_cfa_register 13
 3866              		@ sp needed
 3867 000c 5DF8047B 		ldr	r7, [sp], #4
 3868              	.LCFI168:
ARM GAS  /tmp/cc3wfdLm.s 			page 109


 3869              		.cfi_restore 7
 3870              		.cfi_def_cfa_offset 0
 3871 0010 7047     		bx	lr
 3872              	.L248:
 3873 0012 00BF     		.align	2
 3874              	.L247:
 3875 0014 00000000 		.word	xDefaultPartUDPPacketHeader
 3876              		.cfi_endproc
 3877              	.LFE62:
 3879              		.section	.text.FreeRTOS_SetIPAddress,"ax",%progbits
 3880              		.align	2
 3881              		.global	FreeRTOS_SetIPAddress
 3882              		.thumb
 3883              		.thumb_func
 3885              	FreeRTOS_SetIPAddress:
 3886              	.LFB63:
2086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetIPAddress( uint32_t ulIPAddress )
2089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3887              		.loc 1 2089 0
 3888              		.cfi_startproc
 3889              		@ args = 0, pretend = 0, frame = 8
 3890              		@ frame_needed = 1, uses_anonymous_args = 0
 3891              		@ link register save eliminated.
 3892 0000 80B4     		push	{r7}
 3893              	.LCFI169:
 3894              		.cfi_def_cfa_offset 4
 3895              		.cfi_offset 7, -4
 3896 0002 83B0     		sub	sp, sp, #12
 3897              	.LCFI170:
 3898              		.cfi_def_cfa_offset 16
 3899 0004 00AF     		add	r7, sp, #0
 3900              	.LCFI171:
 3901              		.cfi_def_cfa_register 7
 3902 0006 7860     		str	r0, [r7, #4]
2090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Sets the IP address of the NIC. */
2091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	*ipLOCAL_IP_ADDRESS_POINTER = ulIPAddress;
 3903              		.loc 1 2091 0
 3904 0008 034A     		ldr	r2, .L250
 3905 000a 7B68     		ldr	r3, [r7, #4]
 3906 000c 5361     		str	r3, [r2, #20]
2092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3907              		.loc 1 2092 0
 3908 000e 0C37     		adds	r7, r7, #12
 3909              	.LCFI172:
 3910              		.cfi_def_cfa_offset 4
 3911 0010 BD46     		mov	sp, r7
 3912              	.LCFI173:
 3913              		.cfi_def_cfa_register 13
 3914              		@ sp needed
 3915 0012 5DF8047B 		ldr	r7, [sp], #4
 3916              	.LCFI174:
 3917              		.cfi_restore 7
 3918              		.cfi_def_cfa_offset 0
 3919 0016 7047     		bx	lr
 3920              	.L251:
ARM GAS  /tmp/cc3wfdLm.s 			page 110


 3921              		.align	2
 3922              	.L250:
 3923 0018 00000000 		.word	xDefaultPartUDPPacketHeader
 3924              		.cfi_endproc
 3925              	.LFE63:
 3927              		.section	.text.FreeRTOS_GetGatewayAddress,"ax",%progbits
 3928              		.align	2
 3929              		.global	FreeRTOS_GetGatewayAddress
 3930              		.thumb
 3931              		.thumb_func
 3933              	FreeRTOS_GetGatewayAddress:
 3934              	.LFB64:
2093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetGatewayAddress( void )
2096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3935              		.loc 1 2096 0
 3936              		.cfi_startproc
 3937              		@ args = 0, pretend = 0, frame = 0
 3938              		@ frame_needed = 1, uses_anonymous_args = 0
 3939              		@ link register save eliminated.
 3940 0000 80B4     		push	{r7}
 3941              	.LCFI175:
 3942              		.cfi_def_cfa_offset 4
 3943              		.cfi_offset 7, -4
 3944 0002 00AF     		add	r7, sp, #0
 3945              	.LCFI176:
 3946              		.cfi_def_cfa_register 7
2097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulGatewayAddress;
 3947              		.loc 1 2097 0
 3948 0004 034B     		ldr	r3, .L254
 3949 0006 9B68     		ldr	r3, [r3, #8]
2098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3950              		.loc 1 2098 0
 3951 0008 1846     		mov	r0, r3
 3952 000a BD46     		mov	sp, r7
 3953              	.LCFI177:
 3954              		.cfi_def_cfa_register 13
 3955              		@ sp needed
 3956 000c 5DF8047B 		ldr	r7, [sp], #4
 3957              	.LCFI178:
 3958              		.cfi_restore 7
 3959              		.cfi_def_cfa_offset 0
 3960 0010 7047     		bx	lr
 3961              	.L255:
 3962 0012 00BF     		.align	2
 3963              	.L254:
 3964 0014 00000000 		.word	xNetworkAddressing
 3965              		.cfi_endproc
 3966              	.LFE64:
 3968              		.section	.text.FreeRTOS_GetDNSServerAddress,"ax",%progbits
 3969              		.align	2
 3970              		.global	FreeRTOS_GetDNSServerAddress
 3971              		.thumb
 3972              		.thumb_func
 3974              	FreeRTOS_GetDNSServerAddress:
 3975              	.LFB65:
ARM GAS  /tmp/cc3wfdLm.s 			page 111


2099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetDNSServerAddress( void )
2102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3976              		.loc 1 2102 0
 3977              		.cfi_startproc
 3978              		@ args = 0, pretend = 0, frame = 0
 3979              		@ frame_needed = 1, uses_anonymous_args = 0
 3980              		@ link register save eliminated.
 3981 0000 80B4     		push	{r7}
 3982              	.LCFI179:
 3983              		.cfi_def_cfa_offset 4
 3984              		.cfi_offset 7, -4
 3985 0002 00AF     		add	r7, sp, #0
 3986              	.LCFI180:
 3987              		.cfi_def_cfa_register 7
2103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulDNSServerAddress;
 3988              		.loc 1 2103 0
 3989 0004 034B     		ldr	r3, .L258
 3990 0006 DB68     		ldr	r3, [r3, #12]
2104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3991              		.loc 1 2104 0
 3992 0008 1846     		mov	r0, r3
 3993 000a BD46     		mov	sp, r7
 3994              	.LCFI181:
 3995              		.cfi_def_cfa_register 13
 3996              		@ sp needed
 3997 000c 5DF8047B 		ldr	r7, [sp], #4
 3998              	.LCFI182:
 3999              		.cfi_restore 7
 4000              		.cfi_def_cfa_offset 0
 4001 0010 7047     		bx	lr
 4002              	.L259:
 4003 0012 00BF     		.align	2
 4004              	.L258:
 4005 0014 00000000 		.word	xNetworkAddressing
 4006              		.cfi_endproc
 4007              	.LFE65:
 4009              		.section	.text.FreeRTOS_GetNetmask,"ax",%progbits
 4010              		.align	2
 4011              		.global	FreeRTOS_GetNetmask
 4012              		.thumb
 4013              		.thumb_func
 4015              	FreeRTOS_GetNetmask:
 4016              	.LFB66:
2105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetNetmask( void )
2108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4017              		.loc 1 2108 0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 1, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 4022 0000 80B4     		push	{r7}
 4023              	.LCFI183:
 4024              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc3wfdLm.s 			page 112


 4025              		.cfi_offset 7, -4
 4026 0002 00AF     		add	r7, sp, #0
 4027              	.LCFI184:
 4028              		.cfi_def_cfa_register 7
2109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulNetMask;
 4029              		.loc 1 2109 0
 4030 0004 034B     		ldr	r3, .L262
 4031 0006 5B68     		ldr	r3, [r3, #4]
2110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4032              		.loc 1 2110 0
 4033 0008 1846     		mov	r0, r3
 4034 000a BD46     		mov	sp, r7
 4035              	.LCFI185:
 4036              		.cfi_def_cfa_register 13
 4037              		@ sp needed
 4038 000c 5DF8047B 		ldr	r7, [sp], #4
 4039              	.LCFI186:
 4040              		.cfi_restore 7
 4041              		.cfi_def_cfa_offset 0
 4042 0010 7047     		bx	lr
 4043              	.L263:
 4044 0012 00BF     		.align	2
 4045              	.L262:
 4046 0014 00000000 		.word	xNetworkAddressing
 4047              		.cfi_endproc
 4048              	.LFE66:
 4050              		.section	.text.FreeRTOS_GetMACAddress,"ax",%progbits
 4051              		.align	2
 4052              		.global	FreeRTOS_GetMACAddress
 4053              		.thumb
 4054              		.thumb_func
 4056              	FreeRTOS_GetMACAddress:
 4057              	.LFB67:
2111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const uint8_t * FreeRTOS_GetMACAddress( void )
2114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4058              		.loc 1 2114 0
 4059              		.cfi_startproc
 4060              		@ args = 0, pretend = 0, frame = 0
 4061              		@ frame_needed = 1, uses_anonymous_args = 0
 4062              		@ link register save eliminated.
 4063 0000 80B4     		push	{r7}
 4064              	.LCFI187:
 4065              		.cfi_def_cfa_offset 4
 4066              		.cfi_offset 7, -4
 4067 0002 00AF     		add	r7, sp, #0
 4068              	.LCFI188:
 4069              		.cfi_def_cfa_register 7
2115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return ipLOCAL_MAC_ADDRESS;
 4070              		.loc 1 2115 0
 4071 0004 024B     		ldr	r3, .L266
2116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4072              		.loc 1 2116 0
 4073 0006 1846     		mov	r0, r3
 4074 0008 BD46     		mov	sp, r7
 4075              	.LCFI189:
ARM GAS  /tmp/cc3wfdLm.s 			page 113


 4076              		.cfi_def_cfa_register 13
 4077              		@ sp needed
 4078 000a 5DF8047B 		ldr	r7, [sp], #4
 4079              	.LCFI190:
 4080              		.cfi_restore 7
 4081              		.cfi_def_cfa_offset 0
 4082 000e 7047     		bx	lr
 4083              	.L267:
 4084              		.align	2
 4085              	.L266:
 4086 0010 00000000 		.word	xDefaultPartUDPPacketHeader
 4087              		.cfi_endproc
 4088              	.LFE67:
 4090              		.section	.text.FreeRTOS_SetNetmask,"ax",%progbits
 4091              		.align	2
 4092              		.global	FreeRTOS_SetNetmask
 4093              		.thumb
 4094              		.thumb_func
 4096              	FreeRTOS_SetNetmask:
 4097              	.LFB68:
2117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetNetmask ( uint32_t ulNetmask )
2120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4098              		.loc 1 2120 0
 4099              		.cfi_startproc
 4100              		@ args = 0, pretend = 0, frame = 8
 4101              		@ frame_needed = 1, uses_anonymous_args = 0
 4102              		@ link register save eliminated.
 4103 0000 80B4     		push	{r7}
 4104              	.LCFI191:
 4105              		.cfi_def_cfa_offset 4
 4106              		.cfi_offset 7, -4
 4107 0002 83B0     		sub	sp, sp, #12
 4108              	.LCFI192:
 4109              		.cfi_def_cfa_offset 16
 4110 0004 00AF     		add	r7, sp, #0
 4111              	.LCFI193:
 4112              		.cfi_def_cfa_register 7
 4113 0006 7860     		str	r0, [r7, #4]
2121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkAddressing.ulNetMask = ulNetmask;
 4114              		.loc 1 2121 0
 4115 0008 034A     		ldr	r2, .L269
 4116 000a 7B68     		ldr	r3, [r7, #4]
 4117 000c 5360     		str	r3, [r2, #4]
2122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4118              		.loc 1 2122 0
 4119 000e 0C37     		adds	r7, r7, #12
 4120              	.LCFI194:
 4121              		.cfi_def_cfa_offset 4
 4122 0010 BD46     		mov	sp, r7
 4123              	.LCFI195:
 4124              		.cfi_def_cfa_register 13
 4125              		@ sp needed
 4126 0012 5DF8047B 		ldr	r7, [sp], #4
 4127              	.LCFI196:
 4128              		.cfi_restore 7
ARM GAS  /tmp/cc3wfdLm.s 			page 114


 4129              		.cfi_def_cfa_offset 0
 4130 0016 7047     		bx	lr
 4131              	.L270:
 4132              		.align	2
 4133              	.L269:
 4134 0018 00000000 		.word	xNetworkAddressing
 4135              		.cfi_endproc
 4136              	.LFE68:
 4138              		.section	.text.FreeRTOS_SetGatewayAddress,"ax",%progbits
 4139              		.align	2
 4140              		.global	FreeRTOS_SetGatewayAddress
 4141              		.thumb
 4142              		.thumb_func
 4144              	FreeRTOS_SetGatewayAddress:
 4145              	.LFB69:
2123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetGatewayAddress ( uint32_t ulGatewayAddress )
2126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4146              		.loc 1 2126 0
 4147              		.cfi_startproc
 4148              		@ args = 0, pretend = 0, frame = 8
 4149              		@ frame_needed = 1, uses_anonymous_args = 0
 4150              		@ link register save eliminated.
 4151 0000 80B4     		push	{r7}
 4152              	.LCFI197:
 4153              		.cfi_def_cfa_offset 4
 4154              		.cfi_offset 7, -4
 4155 0002 83B0     		sub	sp, sp, #12
 4156              	.LCFI198:
 4157              		.cfi_def_cfa_offset 16
 4158 0004 00AF     		add	r7, sp, #0
 4159              	.LCFI199:
 4160              		.cfi_def_cfa_register 7
 4161 0006 7860     		str	r0, [r7, #4]
2127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkAddressing.ulGatewayAddress = ulGatewayAddress;
 4162              		.loc 1 2127 0
 4163 0008 034A     		ldr	r2, .L272
 4164 000a 7B68     		ldr	r3, [r7, #4]
 4165 000c 9360     		str	r3, [r2, #8]
2128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4166              		.loc 1 2128 0
 4167 000e 0C37     		adds	r7, r7, #12
 4168              	.LCFI200:
 4169              		.cfi_def_cfa_offset 4
 4170 0010 BD46     		mov	sp, r7
 4171              	.LCFI201:
 4172              		.cfi_def_cfa_register 13
 4173              		@ sp needed
 4174 0012 5DF8047B 		ldr	r7, [sp], #4
 4175              	.LCFI202:
 4176              		.cfi_restore 7
 4177              		.cfi_def_cfa_offset 0
 4178 0016 7047     		bx	lr
 4179              	.L273:
 4180              		.align	2
 4181              	.L272:
ARM GAS  /tmp/cc3wfdLm.s 			page 115


 4182 0018 00000000 		.word	xNetworkAddressing
 4183              		.cfi_endproc
 4184              	.LFE69:
 4186              		.section	.text.vIPSetDHCPTimerEnableState,"ax",%progbits
 4187              		.align	2
 4188              		.global	vIPSetDHCPTimerEnableState
 4189              		.thumb
 4190              		.thumb_func
 4192              	vIPSetDHCPTimerEnableState:
 4193              	.LFB70:
2129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP == 1 )
2132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
2133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 4194              		.loc 1 2133 0
 4195              		.cfi_startproc
 4196              		@ args = 0, pretend = 0, frame = 8
 4197              		@ frame_needed = 1, uses_anonymous_args = 0
 4198              		@ link register save eliminated.
 4199 0000 80B4     		push	{r7}
 4200              	.LCFI203:
 4201              		.cfi_def_cfa_offset 4
 4202              		.cfi_offset 7, -4
 4203 0002 83B0     		sub	sp, sp, #12
 4204              	.LCFI204:
 4205              		.cfi_def_cfa_offset 16
 4206 0004 00AF     		add	r7, sp, #0
 4207              	.LCFI205:
 4208              		.cfi_def_cfa_register 7
 4209 0006 7860     		str	r0, [r7, #4]
2134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xEnableState != pdFALSE )
 4210              		.loc 1 2134 0
 4211 0008 7B68     		ldr	r3, [r7, #4]
 4212 000a 002B     		cmp	r3, #0
 4213 000c 05D0     		beq	.L275
2135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 4214              		.loc 1 2136 0
 4215 000e 084A     		ldr	r2, .L277
 4216 0010 1378     		ldrb	r3, [r2]
 4217 0012 43F00103 		orr	r3, r3, #1
 4218 0016 1370     		strb	r3, [r2]
 4219 0018 04E0     		b	.L274
 4220              	.L275:
2137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 4221              		.loc 1 2140 0
 4222 001a 054A     		ldr	r2, .L277
 4223 001c 1378     		ldrb	r3, [r2]
 4224 001e 6FF30003 		bfc	r3, #0, #1
 4225 0022 1370     		strb	r3, [r2]
 4226              	.L274:
2141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
ARM GAS  /tmp/cc3wfdLm.s 			page 116


 4227              		.loc 1 2142 0
 4228 0024 0C37     		adds	r7, r7, #12
 4229              	.LCFI206:
 4230              		.cfi_def_cfa_offset 4
 4231 0026 BD46     		mov	sp, r7
 4232              	.LCFI207:
 4233              		.cfi_def_cfa_register 13
 4234              		@ sp needed
 4235 0028 5DF8047B 		ldr	r7, [sp], #4
 4236              	.LCFI208:
 4237              		.cfi_restore 7
 4238              		.cfi_def_cfa_offset 0
 4239 002c 7047     		bx	lr
 4240              	.L278:
 4241 002e 00BF     		.align	2
 4242              	.L277:
 4243 0030 00000000 		.word	xDHCPTimer
 4244              		.cfi_endproc
 4245              	.LFE70:
 4247              		.section	.text.vIPReloadDHCPTimer,"ax",%progbits
 4248              		.align	2
 4249              		.global	vIPReloadDHCPTimer
 4250              		.thumb
 4251              		.thumb_func
 4253              	vIPReloadDHCPTimer:
 4254              	.LFB71:
2143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP == 1 )
2147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
2148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 4255              		.loc 1 2148 0
 4256              		.cfi_startproc
 4257              		@ args = 0, pretend = 0, frame = 8
 4258              		@ frame_needed = 1, uses_anonymous_args = 0
 4259 0000 80B5     		push	{r7, lr}
 4260              	.LCFI209:
 4261              		.cfi_def_cfa_offset 8
 4262              		.cfi_offset 7, -8
 4263              		.cfi_offset 14, -4
 4264 0002 82B0     		sub	sp, sp, #8
 4265              	.LCFI210:
 4266              		.cfi_def_cfa_offset 16
 4267 0004 00AF     		add	r7, sp, #0
 4268              	.LCFI211:
 4269              		.cfi_def_cfa_register 7
 4270 0006 7860     		str	r0, [r7, #4]
2149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
 4271              		.loc 1 2149 0
 4272 0008 0348     		ldr	r0, .L280
 4273 000a 7968     		ldr	r1, [r7, #4]
 4274 000c FFF7FEFF 		bl	prvIPTimerReload
2150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 4275              		.loc 1 2150 0
 4276 0010 0837     		adds	r7, r7, #8
 4277              	.LCFI212:
ARM GAS  /tmp/cc3wfdLm.s 			page 117


 4278              		.cfi_def_cfa_offset 8
 4279 0012 BD46     		mov	sp, r7
 4280              	.LCFI213:
 4281              		.cfi_def_cfa_register 13
 4282              		@ sp needed
 4283 0014 80BD     		pop	{r7, pc}
 4284              	.L281:
 4285 0016 00BF     		.align	2
 4286              	.L280:
 4287 0018 00000000 		.word	xDHCPTimer
 4288              		.cfi_endproc
 4289              	.LFE71:
 4291              		.section	.text.vIPSetDnsTimerEnableState,"ax",%progbits
 4292              		.align	2
 4293              		.global	vIPSetDnsTimerEnableState
 4294              		.thumb
 4295              		.thumb_func
 4297              	vIPSetDnsTimerEnableState:
 4298              	.LFB72:
2151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS == 1 )
2155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPSetDnsTimerEnableState( BaseType_t xEnableState )
2156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 4299              		.loc 1 2156 0
 4300              		.cfi_startproc
 4301              		@ args = 0, pretend = 0, frame = 8
 4302              		@ frame_needed = 1, uses_anonymous_args = 0
 4303              		@ link register save eliminated.
 4304 0000 80B4     		push	{r7}
 4305              	.LCFI214:
 4306              		.cfi_def_cfa_offset 4
 4307              		.cfi_offset 7, -4
 4308 0002 83B0     		sub	sp, sp, #12
 4309              	.LCFI215:
 4310              		.cfi_def_cfa_offset 16
 4311 0004 00AF     		add	r7, sp, #0
 4312              	.LCFI216:
 4313              		.cfi_def_cfa_register 7
 4314 0006 7860     		str	r0, [r7, #4]
2157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xEnableState != 0 )
 4315              		.loc 1 2157 0
 4316 0008 7B68     		ldr	r3, [r7, #4]
 4317 000a 002B     		cmp	r3, #0
 4318 000c 05D0     		beq	.L283
2158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDNSTimer.bActive = pdTRUE;
 4319              		.loc 1 2159 0
 4320 000e 084A     		ldr	r2, .L285
 4321 0010 1378     		ldrb	r3, [r2]
 4322 0012 43F00103 		orr	r3, r3, #1
 4323 0016 1370     		strb	r3, [r2]
 4324 0018 04E0     		b	.L282
 4325              	.L283:
2160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
ARM GAS  /tmp/cc3wfdLm.s 			page 118


2162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDNSTimer.bActive = pdFALSE;
 4326              		.loc 1 2163 0
 4327 001a 054A     		ldr	r2, .L285
 4328 001c 1378     		ldrb	r3, [r2]
 4329 001e 6FF30003 		bfc	r3, #0, #1
 4330 0022 1370     		strb	r3, [r2]
 4331              	.L282:
2164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 4332              		.loc 1 2165 0
 4333 0024 0C37     		adds	r7, r7, #12
 4334              	.LCFI217:
 4335              		.cfi_def_cfa_offset 4
 4336 0026 BD46     		mov	sp, r7
 4337              	.LCFI218:
 4338              		.cfi_def_cfa_register 13
 4339              		@ sp needed
 4340 0028 5DF8047B 		ldr	r7, [sp], #4
 4341              	.LCFI219:
 4342              		.cfi_restore 7
 4343              		.cfi_def_cfa_offset 0
 4344 002c 7047     		bx	lr
 4345              	.L286:
 4346 002e 00BF     		.align	2
 4347              	.L285:
 4348 0030 00000000 		.word	xDNSTimer
 4349              		.cfi_endproc
 4350              	.LFE72:
 4352              		.section	.text.vIPReloadDNSTimer,"ax",%progbits
 4353              		.align	2
 4354              		.global	vIPReloadDNSTimer
 4355              		.thumb
 4356              		.thumb_func
 4358              	vIPReloadDNSTimer:
 4359              	.LFB73:
2166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS != 0 )
2170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPReloadDNSTimer( uint32_t ulCheckTime )
2171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 4360              		.loc 1 2171 0
 4361              		.cfi_startproc
 4362              		@ args = 0, pretend = 0, frame = 8
 4363              		@ frame_needed = 1, uses_anonymous_args = 0
 4364 0000 80B5     		push	{r7, lr}
 4365              	.LCFI220:
 4366              		.cfi_def_cfa_offset 8
 4367              		.cfi_offset 7, -8
 4368              		.cfi_offset 14, -4
 4369 0002 82B0     		sub	sp, sp, #8
 4370              	.LCFI221:
 4371              		.cfi_def_cfa_offset 16
 4372 0004 00AF     		add	r7, sp, #0
 4373              	.LCFI222:
 4374              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc3wfdLm.s 			page 119


 4375 0006 7860     		str	r0, [r7, #4]
2172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xDNSTimer, ulCheckTime );
 4376              		.loc 1 2172 0
 4377 0008 0348     		ldr	r0, .L288
 4378 000a 7968     		ldr	r1, [r7, #4]
 4379 000c FFF7FEFF 		bl	prvIPTimerReload
2173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 4380              		.loc 1 2173 0
 4381 0010 0837     		adds	r7, r7, #8
 4382              	.LCFI223:
 4383              		.cfi_def_cfa_offset 8
 4384 0012 BD46     		mov	sp, r7
 4385              	.LCFI224:
 4386              		.cfi_def_cfa_register 13
 4387              		@ sp needed
 4388 0014 80BD     		pop	{r7, pc}
 4389              	.L289:
 4390 0016 00BF     		.align	2
 4391              	.L288:
 4392 0018 00000000 		.word	xDNSTimer
 4393              		.cfi_endproc
 4394              	.LFE73:
 4396              		.section	.text.xIPIsNetworkTaskReady,"ax",%progbits
 4397              		.align	2
 4398              		.global	xIPIsNetworkTaskReady
 4399              		.thumb
 4400              		.thumb_func
 4402              	xIPIsNetworkTaskReady:
 4403              	.LFB74:
2174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigDNS_USE_CALLBACKS != 0 */
2175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xIPIsNetworkTaskReady( void )
2178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4404              		.loc 1 2178 0
 4405              		.cfi_startproc
 4406              		@ args = 0, pretend = 0, frame = 0
 4407              		@ frame_needed = 1, uses_anonymous_args = 0
 4408              		@ link register save eliminated.
 4409 0000 80B4     		push	{r7}
 4410              	.LCFI225:
 4411              		.cfi_def_cfa_offset 4
 4412              		.cfi_offset 7, -4
 4413 0002 00AF     		add	r7, sp, #0
 4414              	.LCFI226:
 4415              		.cfi_def_cfa_register 7
2179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xIPTaskInitialised;
 4416              		.loc 1 2179 0
 4417 0004 034B     		ldr	r3, .L292
 4418 0006 1B68     		ldr	r3, [r3]
2180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4419              		.loc 1 2180 0
 4420 0008 1846     		mov	r0, r3
 4421 000a BD46     		mov	sp, r7
 4422              	.LCFI227:
 4423              		.cfi_def_cfa_register 13
 4424              		@ sp needed
ARM GAS  /tmp/cc3wfdLm.s 			page 120


 4425 000c 5DF8047B 		ldr	r7, [sp], #4
 4426              	.LCFI228:
 4427              		.cfi_restore 7
 4428              		.cfi_def_cfa_offset 0
 4429 0010 7047     		bx	lr
 4430              	.L293:
 4431 0012 00BF     		.align	2
 4432              	.L292:
 4433 0014 00000000 		.word	xIPTaskInitialised
 4434              		.cfi_endproc
 4435              	.LFE74:
 4437              		.section	.text.FreeRTOS_IsNetworkUp,"ax",%progbits
 4438              		.align	2
 4439              		.global	FreeRTOS_IsNetworkUp
 4440              		.thumb
 4441              		.thumb_func
 4443              	FreeRTOS_IsNetworkUp:
 4444              	.LFB75:
2181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_IsNetworkUp( void )
2184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4445              		.loc 1 2184 0
 4446              		.cfi_startproc
 4447              		@ args = 0, pretend = 0, frame = 0
 4448              		@ frame_needed = 1, uses_anonymous_args = 0
 4449              		@ link register save eliminated.
 4450 0000 80B4     		push	{r7}
 4451              	.LCFI229:
 4452              		.cfi_def_cfa_offset 4
 4453              		.cfi_offset 7, -4
 4454 0002 00AF     		add	r7, sp, #0
 4455              	.LCFI230:
 4456              		.cfi_def_cfa_register 7
2185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkUp;
 4457              		.loc 1 2185 0
 4458 0004 034B     		ldr	r3, .L296
 4459 0006 1B68     		ldr	r3, [r3]
2186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4460              		.loc 1 2186 0
 4461 0008 1846     		mov	r0, r3
 4462 000a BD46     		mov	sp, r7
 4463              	.LCFI231:
 4464              		.cfi_def_cfa_register 13
 4465              		@ sp needed
 4466 000c 5DF8047B 		ldr	r7, [sp], #4
 4467              	.LCFI232:
 4468              		.cfi_restore 7
 4469              		.cfi_def_cfa_offset 0
 4470 0010 7047     		bx	lr
 4471              	.L297:
 4472 0012 00BF     		.align	2
 4473              	.L296:
 4474 0014 00000000 		.word	xNetworkUp
 4475              		.cfi_endproc
 4476              	.LFE75:
 4478              		.section	.bss.xStart.7234,"aw",%nobits
ARM GAS  /tmp/cc3wfdLm.s 			page 121


 4479              		.align	2
 4482              	xStart.7234:
 4483 0000 00000000 		.space	4
 4484              		.section	.rodata.xNetworkDownEvent.7255,"a",%progbits
 4485              		.align	2
 4488              	xNetworkDownEvent.7255:
 4489 0000 00000000 		.space	8
 4489      00000000 
 4490              		.section	.rodata.xNetworkDownEvent.7260,"a",%progbits
 4491              		.align	2
 4494              	xNetworkDownEvent.7260:
 4495 0000 00000000 		.space	8
 4495      00000000 
 4496              		.section	.bss.usSequenceNumber.7323,"aw",%nobits
 4497              		.align	1
 4500              	usSequenceNumber.7323:
 4501 0000 0000     		.space	2
 4502              		.section	.bss.xCallEventHook.7346,"aw",%nobits
 4503              		.align	2
 4506              	xCallEventHook.7346:
 4507 0000 00000000 		.space	4
 4508              		.text
 4509              	.Letext0:
 4510              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 4511              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 4512              		.file 5 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 4513              		.file 6 "../../../FreeRTOS_9_0/Source/include/list.h"
 4514              		.file 7 "../../../FreeRTOS_9_0/Source/include/task.h"
 4515              		.file 8 "../../../FreeRTOS_9_0/Source/include/queue.h"
 4516              		.file 9 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
 4517              		.file 10 "../../../FreeRTOS_9_0/Source/include/event_groups.h"
 4518              		.file 11 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Sockets.h"
 4519              		.file 12 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h"
 4520              		.file 13 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_TCP_WIN.h"
 4521              		.file 14 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
 4522              		.file 15 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_DNS.h"
ARM GAS  /tmp/cc3wfdLm.s 			page 122


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FreeRTOS_IP.c
     /tmp/cc3wfdLm.s:25     .bss.xNetworkEventQueue:0000000000000000 xNetworkEventQueue
     /tmp/cc3wfdLm.s:22     .bss.xNetworkEventQueue:0000000000000000 $d
     /tmp/cc3wfdLm.s:32     .bss.usPacketIdentifier:0000000000000000 usPacketIdentifier
     /tmp/cc3wfdLm.s:29     .bss.usPacketIdentifier:0000000000000000 $d
     /tmp/cc3wfdLm.s:39     .rodata.xBroadcastMACAddress:0000000000000000 xBroadcastMACAddress
     /tmp/cc3wfdLm.s:36     .rodata.xBroadcastMACAddress:0000000000000000 $d
     /tmp/cc3wfdLm.s:51     .bss.xNetworkAddressing:0000000000000000 xNetworkAddressing
     /tmp/cc3wfdLm.s:48     .bss.xNetworkAddressing:0000000000000000 $d
     /tmp/cc3wfdLm.s:58     .bss.xDefaultAddressing:0000000000000000 xDefaultAddressing
     /tmp/cc3wfdLm.s:55     .bss.xDefaultAddressing:0000000000000000 $d
     /tmp/cc3wfdLm.s:61     .bss.xNetworkDownEventPending:0000000000000000 $d
     /tmp/cc3wfdLm.s:64     .bss.xNetworkDownEventPending:0000000000000000 xNetworkDownEventPending
     /tmp/cc3wfdLm.s:67     .bss.xIPTaskHandle:0000000000000000 $d
     /tmp/cc3wfdLm.s:70     .bss.xIPTaskHandle:0000000000000000 xIPTaskHandle
     /tmp/cc3wfdLm.s:73     .bss.xProcessedTCPMessage:0000000000000000 $d
     /tmp/cc3wfdLm.s:76     .bss.xProcessedTCPMessage:0000000000000000 xProcessedTCPMessage
     /tmp/cc3wfdLm.s:79     .bss.xNetworkUp:0000000000000000 $d
     /tmp/cc3wfdLm.s:82     .bss.xNetworkUp:0000000000000000 xNetworkUp
     /tmp/cc3wfdLm.s:85     .bss.xARPTimer:0000000000000000 $d
     /tmp/cc3wfdLm.s:88     .bss.xARPTimer:0000000000000000 xARPTimer
     /tmp/cc3wfdLm.s:91     .bss.xDHCPTimer:0000000000000000 $d
     /tmp/cc3wfdLm.s:94     .bss.xDHCPTimer:0000000000000000 xDHCPTimer
     /tmp/cc3wfdLm.s:97     .bss.xTCPTimer:0000000000000000 $d
     /tmp/cc3wfdLm.s:100    .bss.xTCPTimer:0000000000000000 xTCPTimer
     /tmp/cc3wfdLm.s:103    .bss.xDNSTimer:0000000000000000 $d
     /tmp/cc3wfdLm.s:106    .bss.xDNSTimer:0000000000000000 xDNSTimer
     /tmp/cc3wfdLm.s:109    .bss.xIPTaskInitialised:0000000000000000 $d
     /tmp/cc3wfdLm.s:112    .bss.xIPTaskInitialised:0000000000000000 xIPTaskInitialised
     /tmp/cc3wfdLm.s:115    .text.prvIPTask:0000000000000000 $t
     /tmp/cc3wfdLm.s:119    .text.prvIPTask:0000000000000000 prvIPTask
     /tmp/cc3wfdLm.s:915    .text.FreeRTOS_NetworkDown:0000000000000000 FreeRTOS_NetworkDown
     /tmp/cc3wfdLm.s:785    .text.prvIPTimerReload:0000000000000000 prvIPTimerReload
     /tmp/cc3wfdLm.s:564    .text.prvCheckNetworkTimers:0000000000000000 prvCheckNetworkTimers
     /tmp/cc3wfdLm.s:448    .text.prvCalculateSleepTime:0000000000000000 prvCalculateSleepTime
     /tmp/cc3wfdLm.s:175    .text.prvIPTask:0000000000000050 $d
     /tmp/cc3wfdLm.s:187    .text.prvIPTask:0000000000000080 $t
     /tmp/cc3wfdLm.s:2323   .text.prvProcessNetworkDownEvent:0000000000000000 prvProcessNetworkDownEvent
     /tmp/cc3wfdLm.s:410    .text.prvHandleEthernetPacket:0000000000000000 prvHandleEthernetPacket
     /tmp/cc3wfdLm.s:339    .text.prvIPTask:0000000000000160 $d
     /tmp/cc3wfdLm.s:348    .text.xIsCallingFromIPTask:0000000000000000 $t
     /tmp/cc3wfdLm.s:353    .text.xIsCallingFromIPTask:0000000000000000 xIsCallingFromIPTask
     /tmp/cc3wfdLm.s:401    .text.xIsCallingFromIPTask:0000000000000028 $d
     /tmp/cc3wfdLm.s:406    .text.prvHandleEthernetPacket:0000000000000000 $t
     /tmp/cc3wfdLm.s:2436   .text.prvProcessEthernetPacket:0000000000000000 prvProcessEthernetPacket
     /tmp/cc3wfdLm.s:444    .text.prvCalculateSleepTime:0000000000000000 $t
     /tmp/cc3wfdLm.s:552    .text.prvCalculateSleepTime:0000000000000084 $d
     /tmp/cc3wfdLm.s:560    .text.prvCheckNetworkTimers:0000000000000000 $t
     /tmp/cc3wfdLm.s:829    .text.prvIPTimerCheck:0000000000000000 prvIPTimerCheck
     /tmp/cc3wfdLm.s:2027   .text.xSendEventToIPTask:0000000000000000 xSendEventToIPTask
     /tmp/cc3wfdLm.s:718    .text.prvIPTimerStart:0000000000000000 prvIPTimerStart
     /tmp/cc3wfdLm.s:702    .text.prvCheckNetworkTimers:00000000000000bc $d
     /tmp/cc3wfdLm.s:4482   .bss.xStart.7234:0000000000000000 xStart.7234
     /tmp/cc3wfdLm.s:714    .text.prvIPTimerStart:0000000000000000 $t
     /tmp/cc3wfdLm.s:781    .text.prvIPTimerReload:0000000000000000 $t
     /tmp/cc3wfdLm.s:825    .text.prvIPTimerCheck:0000000000000000 $t
ARM GAS  /tmp/cc3wfdLm.s 			page 123


     /tmp/cc3wfdLm.s:910    .text.FreeRTOS_NetworkDown:0000000000000000 $t
     /tmp/cc3wfdLm.s:2080   .text.xSendEventStructToIPTask:0000000000000000 xSendEventStructToIPTask
     /tmp/cc3wfdLm.s:965    .text.FreeRTOS_NetworkDown:000000000000002c $d
     /tmp/cc3wfdLm.s:4488   .rodata.xNetworkDownEvent.7255:0000000000000000 xNetworkDownEvent.7255
     /tmp/cc3wfdLm.s:971    .text.FreeRTOS_NetworkDownFromISR:0000000000000000 $t
     /tmp/cc3wfdLm.s:976    .text.FreeRTOS_NetworkDownFromISR:0000000000000000 FreeRTOS_NetworkDownFromISR
     /tmp/cc3wfdLm.s:1034   .text.FreeRTOS_NetworkDownFromISR:000000000000003c $d
     /tmp/cc3wfdLm.s:4494   .rodata.xNetworkDownEvent.7260:0000000000000000 xNetworkDownEvent.7260
     /tmp/cc3wfdLm.s:1041   .text.FreeRTOS_GetUDPPayloadBuffer:0000000000000000 $t
     /tmp/cc3wfdLm.s:1046   .text.FreeRTOS_GetUDPPayloadBuffer:0000000000000000 FreeRTOS_GetUDPPayloadBuffer
     /tmp/cc3wfdLm.s:1112   .text.pxDuplicateNetworkBufferWithDescriptor:0000000000000000 $t
     /tmp/cc3wfdLm.s:1117   .text.pxDuplicateNetworkBufferWithDescriptor:0000000000000000 pxDuplicateNetworkBufferWithDescriptor
     /tmp/cc3wfdLm.s:1189   .text.pxPacketBuffer_to_NetworkBuffer:0000000000000000 $t
     /tmp/cc3wfdLm.s:1194   .text.pxPacketBuffer_to_NetworkBuffer:0000000000000000 pxPacketBuffer_to_NetworkBuffer
     /tmp/cc3wfdLm.s:1263   .text.pxUDPPayloadBuffer_to_NetworkBuffer:0000000000000000 $t
     /tmp/cc3wfdLm.s:1268   .text.pxUDPPayloadBuffer_to_NetworkBuffer:0000000000000000 pxUDPPayloadBuffer_to_NetworkBuffer
     /tmp/cc3wfdLm.s:1337   .text.FreeRTOS_ReleaseUDPPayloadBuffer:0000000000000000 $t
     /tmp/cc3wfdLm.s:1342   .text.FreeRTOS_ReleaseUDPPayloadBuffer:0000000000000000 FreeRTOS_ReleaseUDPPayloadBuffer
     /tmp/cc3wfdLm.s:1379   .rodata:0000000000000000 $d
     /tmp/cc3wfdLm.s:1386   .text.FreeRTOS_IPInit:0000000000000000 $t
     /tmp/cc3wfdLm.s:1391   .text.FreeRTOS_IPInit:0000000000000000 FreeRTOS_IPInit
     /tmp/cc3wfdLm.s:4402   .text.xIPIsNetworkTaskReady:0000000000000000 xIPIsNetworkTaskReady
     /tmp/cc3wfdLm.s:1684   .text.FreeRTOS_IPInit:00000000000001bc $d
     /tmp/cc3wfdLm.s:1696   .text.FreeRTOS_GetAddressConfiguration:0000000000000000 $t
     /tmp/cc3wfdLm.s:1701   .text.FreeRTOS_GetAddressConfiguration:0000000000000000 FreeRTOS_GetAddressConfiguration
     /tmp/cc3wfdLm.s:1778   .text.FreeRTOS_GetAddressConfiguration:0000000000000050 $d
     /tmp/cc3wfdLm.s:1784   .text.FreeRTOS_SetAddressConfiguration:0000000000000000 $t
     /tmp/cc3wfdLm.s:1789   .text.FreeRTOS_SetAddressConfiguration:0000000000000000 FreeRTOS_SetAddressConfiguration
     /tmp/cc3wfdLm.s:1866   .text.FreeRTOS_SetAddressConfiguration:0000000000000050 $d
     /tmp/cc3wfdLm.s:1872   .text.FreeRTOS_SendPingRequest:0000000000000000 $t
     /tmp/cc3wfdLm.s:1877   .text.FreeRTOS_SendPingRequest:0000000000000000 FreeRTOS_SendPingRequest
     /tmp/cc3wfdLm.s:2017   .text.FreeRTOS_SendPingRequest:00000000000000c8 $d
     /tmp/cc3wfdLm.s:4500   .bss.usSequenceNumber.7323:0000000000000000 usSequenceNumber.7323
     /tmp/cc3wfdLm.s:2022   .text.xSendEventToIPTask:0000000000000000 $t
     /tmp/cc3wfdLm.s:2075   .text.xSendEventStructToIPTask:0000000000000000 $t
     /tmp/cc3wfdLm.s:2187   .text.xSendEventStructToIPTask:000000000000008c $d
     /tmp/cc3wfdLm.s:2193   .text.eConsiderFrameForProcessing:0000000000000000 $t
     /tmp/cc3wfdLm.s:2198   .text.eConsiderFrameForProcessing:0000000000000000 eConsiderFrameForProcessing
     /tmp/cc3wfdLm.s:2312   .text.eConsiderFrameForProcessing:0000000000000094 $d
     /tmp/cc3wfdLm.s:2319   .text.prvProcessNetworkDownEvent:0000000000000000 $t
     /tmp/cc3wfdLm.s:2381   .text.prvProcessNetworkDownEvent:0000000000000048 $d
     /tmp/cc3wfdLm.s:4506   .bss.xCallEventHook.7346:0000000000000000 xCallEventHook.7346
     /tmp/cc3wfdLm.s:2387   .text.vIPNetworkUpCalls:0000000000000000 $t
     /tmp/cc3wfdLm.s:2392   .text.vIPNetworkUpCalls:0000000000000000 vIPNetworkUpCalls
     /tmp/cc3wfdLm.s:2426   .text.vIPNetworkUpCalls:0000000000000020 $d
     /tmp/cc3wfdLm.s:2432   .text.prvProcessEthernetPacket:0000000000000000 $t
     /tmp/cc3wfdLm.s:2691   .text.prvProcessIPPacket:0000000000000000 prvProcessIPPacket
     /tmp/cc3wfdLm.s:3757   .text.vReturnEthernetFrame:0000000000000000 vReturnEthernetFrame
     /tmp/cc3wfdLm.s:2562   .text.prvAllowIPPacket:0000000000000000 $t
     /tmp/cc3wfdLm.s:2566   .text.prvAllowIPPacket:0000000000000000 prvAllowIPPacket
     /tmp/cc3wfdLm.s:2680   .text.prvAllowIPPacket:0000000000000088 $d
     /tmp/cc3wfdLm.s:2687   .text.prvProcessIPPacket:0000000000000000 $t
     /tmp/cc3wfdLm.s:3161   .text.prvProcessICMPPacket:0000000000000000 prvProcessICMPPacket
     /tmp/cc3wfdLm.s:2908   .text.prvProcessIPPacket:000000000000014c $d
     /tmp/cc3wfdLm.s:2914   .text.prvProcessICMPEchoReply:0000000000000000 $t
     /tmp/cc3wfdLm.s:2918   .text.prvProcessICMPEchoReply:0000000000000000 prvProcessICMPEchoReply
     /tmp/cc3wfdLm.s:3024   .text.prvProcessICMPEchoRequest:0000000000000000 $t
ARM GAS  /tmp/cc3wfdLm.s 			page 124


     /tmp/cc3wfdLm.s:3028   .text.prvProcessICMPEchoRequest:0000000000000000 prvProcessICMPEchoRequest
     /tmp/cc3wfdLm.s:3152   .text.prvProcessICMPEchoRequest:00000000000000ac $d
     /tmp/cc3wfdLm.s:3157   .text.prvProcessICMPPacket:0000000000000000 $t
     /tmp/cc3wfdLm.s:3222   .text.usGenerateProtocolChecksum:0000000000000000 $t
     /tmp/cc3wfdLm.s:3227   .text.usGenerateProtocolChecksum:0000000000000000 usGenerateProtocolChecksum
     /tmp/cc3wfdLm.s:3455   .text.usGenerateChecksum:0000000000000000 usGenerateChecksum
     /tmp/cc3wfdLm.s:3450   .text.usGenerateChecksum:0000000000000000 $t
     /tmp/cc3wfdLm.s:3747   .text.usGenerateChecksum:00000000000001ac $d
     /tmp/cc3wfdLm.s:3752   .text.vReturnEthernetFrame:0000000000000000 $t
     /tmp/cc3wfdLm.s:3834   .text.vReturnEthernetFrame:0000000000000060 $d
     /tmp/cc3wfdLm.s:3839   .text.FreeRTOS_GetIPAddress:0000000000000000 $t
     /tmp/cc3wfdLm.s:3844   .text.FreeRTOS_GetIPAddress:0000000000000000 FreeRTOS_GetIPAddress
     /tmp/cc3wfdLm.s:3875   .text.FreeRTOS_GetIPAddress:0000000000000014 $d
     /tmp/cc3wfdLm.s:3880   .text.FreeRTOS_SetIPAddress:0000000000000000 $t
     /tmp/cc3wfdLm.s:3885   .text.FreeRTOS_SetIPAddress:0000000000000000 FreeRTOS_SetIPAddress
     /tmp/cc3wfdLm.s:3923   .text.FreeRTOS_SetIPAddress:0000000000000018 $d
     /tmp/cc3wfdLm.s:3928   .text.FreeRTOS_GetGatewayAddress:0000000000000000 $t
     /tmp/cc3wfdLm.s:3933   .text.FreeRTOS_GetGatewayAddress:0000000000000000 FreeRTOS_GetGatewayAddress
     /tmp/cc3wfdLm.s:3964   .text.FreeRTOS_GetGatewayAddress:0000000000000014 $d
     /tmp/cc3wfdLm.s:3969   .text.FreeRTOS_GetDNSServerAddress:0000000000000000 $t
     /tmp/cc3wfdLm.s:3974   .text.FreeRTOS_GetDNSServerAddress:0000000000000000 FreeRTOS_GetDNSServerAddress
     /tmp/cc3wfdLm.s:4005   .text.FreeRTOS_GetDNSServerAddress:0000000000000014 $d
     /tmp/cc3wfdLm.s:4010   .text.FreeRTOS_GetNetmask:0000000000000000 $t
     /tmp/cc3wfdLm.s:4015   .text.FreeRTOS_GetNetmask:0000000000000000 FreeRTOS_GetNetmask
     /tmp/cc3wfdLm.s:4046   .text.FreeRTOS_GetNetmask:0000000000000014 $d
     /tmp/cc3wfdLm.s:4051   .text.FreeRTOS_GetMACAddress:0000000000000000 $t
     /tmp/cc3wfdLm.s:4056   .text.FreeRTOS_GetMACAddress:0000000000000000 FreeRTOS_GetMACAddress
     /tmp/cc3wfdLm.s:4086   .text.FreeRTOS_GetMACAddress:0000000000000010 $d
     /tmp/cc3wfdLm.s:4091   .text.FreeRTOS_SetNetmask:0000000000000000 $t
     /tmp/cc3wfdLm.s:4096   .text.FreeRTOS_SetNetmask:0000000000000000 FreeRTOS_SetNetmask
     /tmp/cc3wfdLm.s:4134   .text.FreeRTOS_SetNetmask:0000000000000018 $d
     /tmp/cc3wfdLm.s:4139   .text.FreeRTOS_SetGatewayAddress:0000000000000000 $t
     /tmp/cc3wfdLm.s:4144   .text.FreeRTOS_SetGatewayAddress:0000000000000000 FreeRTOS_SetGatewayAddress
     /tmp/cc3wfdLm.s:4182   .text.FreeRTOS_SetGatewayAddress:0000000000000018 $d
     /tmp/cc3wfdLm.s:4187   .text.vIPSetDHCPTimerEnableState:0000000000000000 $t
     /tmp/cc3wfdLm.s:4192   .text.vIPSetDHCPTimerEnableState:0000000000000000 vIPSetDHCPTimerEnableState
     /tmp/cc3wfdLm.s:4243   .text.vIPSetDHCPTimerEnableState:0000000000000030 $d
     /tmp/cc3wfdLm.s:4248   .text.vIPReloadDHCPTimer:0000000000000000 $t
     /tmp/cc3wfdLm.s:4253   .text.vIPReloadDHCPTimer:0000000000000000 vIPReloadDHCPTimer
     /tmp/cc3wfdLm.s:4287   .text.vIPReloadDHCPTimer:0000000000000018 $d
     /tmp/cc3wfdLm.s:4292   .text.vIPSetDnsTimerEnableState:0000000000000000 $t
     /tmp/cc3wfdLm.s:4297   .text.vIPSetDnsTimerEnableState:0000000000000000 vIPSetDnsTimerEnableState
     /tmp/cc3wfdLm.s:4348   .text.vIPSetDnsTimerEnableState:0000000000000030 $d
     /tmp/cc3wfdLm.s:4353   .text.vIPReloadDNSTimer:0000000000000000 $t
     /tmp/cc3wfdLm.s:4358   .text.vIPReloadDNSTimer:0000000000000000 vIPReloadDNSTimer
     /tmp/cc3wfdLm.s:4392   .text.vIPReloadDNSTimer:0000000000000018 $d
     /tmp/cc3wfdLm.s:4397   .text.xIPIsNetworkTaskReady:0000000000000000 $t
     /tmp/cc3wfdLm.s:4433   .text.xIPIsNetworkTaskReady:0000000000000014 $d
     /tmp/cc3wfdLm.s:4438   .text.FreeRTOS_IsNetworkUp:0000000000000000 $t
     /tmp/cc3wfdLm.s:4443   .text.FreeRTOS_IsNetworkUp:0000000000000000 FreeRTOS_IsNetworkUp
     /tmp/cc3wfdLm.s:4474   .text.FreeRTOS_IsNetworkUp:0000000000000014 $d
     /tmp/cc3wfdLm.s:4479   .bss.xStart.7234:0000000000000000 $d
     /tmp/cc3wfdLm.s:4485   .rodata.xNetworkDownEvent.7255:0000000000000000 $d
     /tmp/cc3wfdLm.s:4491   .rodata.xNetworkDownEvent.7260:0000000000000000 $d
     /tmp/cc3wfdLm.s:4497   .bss.usSequenceNumber.7323:0000000000000000 $d
     /tmp/cc3wfdLm.s:4503   .bss.xCallEventHook.7346:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
ARM GAS  /tmp/cc3wfdLm.s 			page 125



UNDEFINED SYMBOLS
xQueueGenericReceive
vARPAgeCache
vSocketBind
vSocketWakeUpUser
vSocketClose
vProcessGeneratedUDPPacket
vDHCPProcess
vSocketSelect
FreeRTOS_SignalSocket
xTCPCheckNewClient
vTCPNetStat
xTaskGetCurrentTaskHandle
vDNSCheckCallBack
uxQueueMessagesWaiting
xTaskGetTickCount
xTCPTimerCheck
ulNextInitialSequenceNumber
vTaskSetTimeOutState
xTaskCheckForTimeOut
xQueueGenericSendFromISR
pxGetNetworkBufferWithDescriptor
memcpy
vReleaseNetworkBufferAndDescriptor
xQueueGenericCreate
vQueueAddToRegistry
xNetworkBuffersInitialise
vNetworkSocketsInit
xTaskCreate
vQueueDelete
xDefaultPartUDPPacketHeader
memset
xQueueGenericSend
memcmp
xLLMNR_MacAdress
vApplicationIPNetworkEventHook
xNetworkInterfaceInitialise
vTaskDelay
vDNSInitialise
eARPProcessPacket
memmove
vARPRefreshCacheEntry
xProcessReceivedUDPPacket
xProcessReceivedTCPPacket
vApplicationPingReplyHook
xNetworkInterfaceOutput

ARM GAS  /tmp/cc946aYs.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"FreeRTOS_IP.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	xNetworkEventQueue
  21              		.section	.bss.xNetworkEventQueue,"aw",%nobits
  22              		.align	2
  25              	xNetworkEventQueue:
  26 0000 00000000 		.space	4
  27              		.global	usPacketIdentifier
  28              		.section	.bss.usPacketIdentifier,"aw",%nobits
  29              		.align	1
  32              	usPacketIdentifier:
  33 0000 0000     		.space	2
  34              		.global	xBroadcastMACAddress
  35              		.section	.rodata.xBroadcastMACAddress,"a",%progbits
  36              		.align	2
  39              	xBroadcastMACAddress:
  40 0000 FF       		.byte	-1
  41 0001 FF       		.byte	-1
  42 0002 FF       		.byte	-1
  43 0003 FF       		.byte	-1
  44 0004 FF       		.byte	-1
  45 0005 FF       		.byte	-1
  46              		.global	xNetworkAddressing
  47              		.section	.bss.xNetworkAddressing,"aw",%nobits
  48              		.align	2
  51              	xNetworkAddressing:
  52 0000 00000000 		.space	20
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              		.global	xDefaultAddressing
  54              		.section	.bss.xDefaultAddressing,"aw",%nobits
  55              		.align	2
  58              	xDefaultAddressing:
  59 0000 00000000 		.space	20
  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
ARM GAS  /tmp/cc946aYs.s 			page 2


  60              		.section	.bss.xNetworkDownEventPending,"aw",%nobits
  61              		.align	2
  64              	xNetworkDownEventPending:
  65 0000 00000000 		.space	4
  66              		.section	.bss.xIPTaskHandle,"aw",%nobits
  67              		.align	2
  70              	xIPTaskHandle:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xProcessedTCPMessage,"aw",%nobits
  73              		.align	2
  76              	xProcessedTCPMessage:
  77 0000 00000000 		.space	4
  78              		.section	.bss.xNetworkUp,"aw",%nobits
  79              		.align	2
  82              	xNetworkUp:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xARPTimer,"aw",%nobits
  85              		.align	2
  88              	xARPTimer:
  89 0000 00000000 		.space	20
  89      00000000 
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.section	.bss.xTCPTimer,"aw",%nobits
  91              		.align	2
  94              	xTCPTimer:
  95 0000 00000000 		.space	20
  95      00000000 
  95      00000000 
  95      00000000 
  95      00000000 
  96              		.section	.bss.xDNSTimer,"aw",%nobits
  97              		.align	2
 100              	xDNSTimer:
 101 0000 00000000 		.space	20
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.section	.bss.xIPTaskInitialised,"aw",%nobits
 103              		.align	2
 106              	xIPTaskInitialised:
 107 0000 00000000 		.space	4
 108              		.section	.text.prvIPTask,"ax",%progbits
 109              		.align	2
 110              		.thumb
 111              		.thumb_func
 113              	prvIPTask:
 114              	.LFB29:
 115              		.file 1 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
ARM GAS  /tmp/cc946aYs.s 			page 3


   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Standard includes. */
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <stdint.h>
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <stdio.h>
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include <string.h>
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* FreeRTOS includes. */
ARM GAS  /tmp/cc946aYs.s 			page 4


  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS.h"
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "task.h"
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "queue.h"
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "semphr.h"
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* FreeRTOS+TCP includes. */
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_IP.h"
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_Sockets.h"
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_IP_Private.h"
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_ARP.h"
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_UDP_IP.h"
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_TCP_IP.h"
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_DHCP.h"
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "NetworkInterface.h"
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "NetworkBufferManagement.h"
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #include "FreeRTOS_DNS.h"
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used to ensure the structure packing is having the desired effect.  The
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 'volatile' is used to prevent compiler warnings about comparing a constant with
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** a constant. */
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_EthernetHeader_t_SIZE	( ( size_t ) 14 )
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_ARPHeader_t_SIZE			( ( size_t ) 28 )
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_IPHeader_t_SIZE			( ( size_t ) 20 )
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_IGMPHeader__SIZE			( ( size_t ) 8 )
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_ICMPHeader_t_SIZE		( ( size_t ) 8 )
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_UDPHeader_t_SIZE			( ( size_t ) 8 )
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipEXPECTED_TCPHeader_t_SIZE			( ( size_t ) 20 )
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* ICMP protocol definitions. */
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipICMP_ECHO_REQUEST				( ( uint8_t ) 8 )
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipICMP_ECHO_REPLY				( ( uint8_t ) 0 )
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Time delay between repeated attempts to initialise the network hardware. */
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipINITIALISATION_RETRY_DELAY	( pdMS_TO_TICKS( 3000 ) )
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Defines how often the ARP timer callback function is executed.  The time is
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** shorted in the Windows simulator as simulated time is not real time. */
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef	ipARP_TIMER_PERIOD_MS
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#ifdef _WINDOWS_
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipARP_TIMER_PERIOD_MS	( 500 ) /* For windows simulator builds. */
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#define ipARP_TIMER_PERIOD_MS	( 10000 )
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef iptraceIP_TASK_STARTING
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define	iptraceIP_TASK_STARTING()	do {} while( 0 )
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ( ipconfigUSE_TCP == 1 ) && !defined( ipTCP_TIMER_PERIOD_MS ) )
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* When initialising the TCP timer,
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	give it an initial time-out of 1 second. */
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipTCP_TIMER_PERIOD_MS	( 1000 )
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
ARM GAS  /tmp/cc946aYs.s 			page 5


 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the Ethernet
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** driver will filter incoming packets and only pass the stack those packets it
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** considers need processing.  In this case ipCONSIDER_FRAME_FOR_PROCESSING() can
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** be #defined away.  If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 0
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** then the Ethernet driver will pass all received packets to the stack, and the
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** stack must do the filtering itself.  In this case ipCONSIDER_FRAME_FOR_PROCESSING
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** needs to call eConsiderFrameForProcessing. */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipCONSIDER_FRAME_FOR_PROCESSING( pucEthernetBuffer ) eConsiderFrameForProcessing( ( pucEth
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #else
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipCONSIDER_FRAME_FOR_PROCESSING( pucEthernetBuffer ) eProcessBuffer
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The character used to fill ICMP echo requests, and therefore also the
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** character expected to fill ICMP echo replies. */
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipECHO_DATA_FILL_BYTE						'x'
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The bits in the two byte IP header field that make up the fragment offset value. */
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipFRAGMENT_OFFSET_BIT_MASK				( ( uint16_t ) 0xff0f )
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #else
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The bits in the two byte IP header field that make up the fragment offset value. */
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipFRAGMENT_OFFSET_BIT_MASK				( ( uint16_t ) 0x0fff )
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigBYTE_ORDER */
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The maximum time the IP task is allowed to remain in the Blocked state if no
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** events are posted to the network event queue. */
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #ifndef	ipconfigMAX_IP_TASK_SLEEP_TIME
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#define ipconfigMAX_IP_TASK_SLEEP_TIME ( pdMS_TO_TICKS( 10000UL ) )
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* When a new TCP connection is established, the value of
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 'ulNextInitialSequenceNumber' will be used as the initial sequence number.  It
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** is very important that at start-up, 'ulNextInitialSequenceNumber' contains a
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** random value.  Also its value must be increased continuously in time, to prevent
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** a third party guessing the next sequence number and take-over a TCP connection.
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** It is advised to increment it by 1 ever 4us, which makes about 256 times
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** per ms: */
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipINITIAL_SEQUENCE_NUMBER_FACTOR	256UL
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned as the (invalid) checksum when the protocol being checked is not
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** handled.  The value is chosen simply to be easy to spot when debugging. */
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipUNHANDLED_PROTOCOL		0x4321u
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned to indicate a valid checksum when the checksum does not need to be
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** calculated. */
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipCORRECT_CRC				0xffffu
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Returned as the (invalid) checksum when the length of the data being checked
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** had an invalid length. */
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #define ipINVALID_LENGTH			0x1234u
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** typedef struct xIP_TIMER
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
ARM GAS  /tmp/cc946aYs.s 			page 6


 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint32_t
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		bActive : 1,	/* This timer is running and must be processed. */
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		bExpired : 1;	/* Timer has expired and a task must be processed. */
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TimeOut_t xTimeOut;
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TickType_t ulRemainingTime;
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TickType_t ulReloadTime;
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** } IPTimer_t;
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used in checksum calculation. */
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** typedef union _xUnion32
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint32_t u32;
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t u16[ 2 ];
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t u8[ 4 ];
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** } xUnion32;
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used in checksum calculation. */
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** typedef union _xUnionPtr
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint32_t *u32ptr;
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t *u16ptr;
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *u8ptr;
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** } xUnionPtr;
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The main TCP/IP stack processing task.  This task receives commands/events
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * from the network hardware drivers and tasks that are using sockets.  It also
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * maintains a set of protocol timers.
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTask( void *pvParameters );
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Called when new data is available from the network interface.
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer );
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Process incoming IP packets.
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * const pxIPPacket, NetworkBuf
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/*
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 * Process incoming ICMP packets.
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	 */
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket );
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Turns around an incoming ping request to convert it into a ping reply.
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket );
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigREPLY_TO_INCOMING_PINGS */
 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc946aYs.s 			page 7


 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Processes incoming ping replies.  The application callback function
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * vApplicationPingReplyHook() is called with the results.
 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket );
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Called to create a network connection when the stack is first started, or
 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * when the network connection is lost.
 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessNetworkDownEvent( void );
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Checks the ARP, DHCP and TCP timers to see if any periodic or timeout
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * processing is required.
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvCheckNetworkTimers( void );
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Determine how long the IP task can sleep for, which depends on when the next
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * periodic or timeout processing must be performed.
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TickType_t prvCalculateSleepTime( void );
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * The network card driver has received a packet.  In the case that it is part
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * of a linked packet chain, walk through it to handle every message.
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer );
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  * Utility functions for the light weight IP timers.
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime );
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer );
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime );
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength );
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* The queue used to pass events into the IP-task for processing. */
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** QueueHandle_t xNetworkEventQueue = NULL;
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_RB_ Requires comment. */
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usPacketIdentifier = 0U;
 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* For convenience, a MAC address of all 0xffs is defined const for quick
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** reference. */
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const MACAddress_t xBroadcastMACAddress = { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Structure that stores the netmask, gateway address and DNS server addresses. */
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkAddressingParameters_t xNetworkAddressing = { 0, 0, 0, 0, 0 };
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc946aYs.s 			page 8


 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Default values for the above struct in case DHCP
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** does not lead to a confirmed request. */
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkAddressingParameters_t xDefaultAddressing = { 0, 0, 0, 0, 0 };
 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Used to ensure network down events cannot be missed when they cannot be
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** posted to the network event queue because the network event queue is already
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** full. */
 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t xNetworkDownEventPending = pdFALSE;
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Stores the handle of the task that handles the stack.  The handle is used
 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** (indirectly) by some utility function to determine if the utility function is
 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** being called by a task (in which case it is ok to block) or by the IP task
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** itself (in which case it is not ok to block). */
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TaskHandle_t xIPTaskHandle = NULL;
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_TCP != 0 )
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Set to a non-zero value if one or more TCP message have been processed
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	within the last round. */
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static BaseType_t xProcessedTCPMessage;
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Simple set to pdTRUE or pdFALSE depending on whether the network is up or
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** down (connected, not connected) respectively. */
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t xNetworkUp = pdFALSE;
 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** A timer for each of the following processes, all of which need attention on a
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** regular basis:
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	1. ARP, to check its table entries
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	2. DPHC, to send requests and to renew a reservation
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	3. TCP, to check for timeouts, resends
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	4. DNS, to check for timeouts when looking-up a domain.
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  */
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static IPTimer_t xARPTimer;
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP != 0 )
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xDHCPTimer;
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_TCP != 0 )
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xTCPTimer;
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS != 0 )
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static IPTimer_t xDNSTimer;
 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /* Set to pdTRUE when the IP task is ready to start processing packets. */
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t xIPTaskInitialised = pdFALSE;
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Keep track of the lowest amount of space in 'xNetworkEventQueue'. */
 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static UBaseType_t uxQueueMinimumSpace = ipconfigEVENT_QUEUE_LENGTH;
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTask( void *pvParameters )
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 116              		.loc 1 347 0
ARM GAS  /tmp/cc946aYs.s 			page 9


 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 32
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120 0000 80B5     		push	{r7, lr}
 121              	.LCFI0:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 7, -8
 124              		.cfi_offset 14, -4
 125 0002 88B0     		sub	sp, sp, #32
 126              	.LCFI1:
 127              		.cfi_def_cfa_offset 40
 128 0004 00AF     		add	r7, sp, #0
 129              	.LCFI2:
 130              		.cfi_def_cfa_register 7
 131 0006 7860     		str	r0, [r7, #4]
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPStackEvent_t xReceivedEvent;
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** TickType_t xNextIPSleep;
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** FreeRTOS_Socket_t *pxSocket;
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** struct freertos_sockaddr xAddress;
 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Just to prevent compiler warnings about unused parameters. */
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	( void ) pvParameters;
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* A possibility to set some additional task properties. */
 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceIP_TASK_STARTING();
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Generate a dummy message to say that the network connection has gone
 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	down.  This will cause this task to initialise the network interface.  After
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	this it is the responsibility of the network interface hardware driver to
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	send this message if a previously connected network is disconnected. */
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOS_NetworkDown();
 132              		.loc 1 363 0
 133 0008 FFF7FEFF 		bl	FreeRTOS_NetworkDown
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Initialise the TCP timer. */
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 134              		.loc 1 368 0
 135 000c 5148     		ldr	r0, .L21
 136 000e 4FF47A71 		mov	r1, #1000
 137 0012 FFF7FEFF 		bl	prvIPTimerReload
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Initialisation is complete and events can now be processed. */
 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xIPTaskInitialised = pdTRUE;
 138              		.loc 1 373 0
 139 0016 504B     		ldr	r3, .L21+4
 140 0018 0122     		movs	r2, #1
 141 001a 1A60     		str	r2, [r3]
 142              	.L19:
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Loop, processing IP events. */
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	for( ;; )
ARM GAS  /tmp/cc946aYs.s 			page 10


 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		ipconfigWATCHDOG_TIMER();
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		or timeout processing to perform. */
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvCheckNetworkTimers();
 143              		.loc 1 384 0
 144 001c FFF7FEFF 		bl	prvCheckNetworkTimers
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Calculate the acceptable maximum sleep time. */
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNextIPSleep = prvCalculateSleepTime();
 145              		.loc 1 387 0
 146 0020 FFF7FEFF 		bl	prvCalculateSleepTime
 147 0024 F861     		str	r0, [r7, #28]
 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Wait until there is something to do.  The event is initialised to "no
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		event" in case the following call exits due to a time out rather than a
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		message being received. */
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReceivedEvent.eEventType = eNoEvent;
 148              		.loc 1 392 0
 149 0026 FF23     		movs	r3, #255
 150 0028 3B74     		strb	r3, [r7, #16]
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep );
 151              		.loc 1 393 0
 152 002a 4C4B     		ldr	r3, .L21+8
 153 002c 1A68     		ldr	r2, [r3]
 154 002e 07F11003 		add	r3, r7, #16
 155 0032 1046     		mov	r0, r2
 156 0034 1946     		mov	r1, r3
 157 0036 FA69     		ldr	r2, [r7, #28]
 158 0038 0023     		movs	r3, #0
 159 003a FFF7FEFF 		bl	xQueueGenericReceive
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xReceivedEvent.eEventType != eNoEvent )
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			UBaseType_t uxCount;
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( uxQueueMinimumSpace > uxCount )
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					uxQueueMinimumSpace = uxCount;
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */
 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );
 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( xReceivedEvent.eEventType )
 160              		.loc 1 412 0
 161 003e 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 162 0040 5BB2     		sxtb	r3, r3
 163 0042 0B2B     		cmp	r3, #11
 164 0044 7ED8     		bhi	.L20
 165 0046 01A2     		adr	r2, .L4
ARM GAS  /tmp/cc946aYs.s 			page 11


 166 0048 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 167              		.p2align 2
 168              	.L4:
 169 004c 7D000000 		.word	.L3+1
 170 0050 89000000 		.word	.L5+1
 171 0054 93000000 		.word	.L6+1
 172 0058 EF000000 		.word	.L7+1
 173 005c 45010000 		.word	.L20+1
 174 0060 0D010000 		.word	.L9+1
 175 0064 19010000 		.word	.L10+1
 176 0068 3F010000 		.word	.L11+1
 177 006c 99000000 		.word	.L12+1
 178 0070 E5000000 		.word	.L13+1
 179 0074 F9000000 		.word	.L14+1
 180 0078 03010000 		.word	.L15+1
 181              		.p2align 1
 182              	.L3:
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eNetworkDownEvent :
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Attempt to establish a connection. */
 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xNetworkUp = pdFALSE;
 183              		.loc 1 416 0
 184 007c 384B     		ldr	r3, .L21+12
 185 007e 0022     		movs	r2, #0
 186 0080 1A60     		str	r2, [r3]
 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				prvProcessNetworkDownEvent();
 187              		.loc 1 417 0
 188 0082 FFF7FEFF 		bl	prvProcessNetworkDownEvent
 418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 189              		.loc 1 418 0
 190 0086 5EE0     		b	.L16
 191              	.L5:
 419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eNetworkRxEvent:
 421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The network hardware driver has received a new packet.  A
 422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pointer to the received buffer is located in the pvData member
 423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				of the received event structure. */
 424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 192              		.loc 1 424 0
 193 0088 7B69     		ldr	r3, [r7, #20]
 194 008a 1846     		mov	r0, r3
 195 008c FFF7FEFF 		bl	prvHandleEthernetPacket
 425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 196              		.loc 1 425 0
 197 0090 59E0     		b	.L16
 198              	.L6:
 426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eARPTimerEvent :
 428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The ARP timer has expired, process the ARP cache. */
 429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vARPAgeCache();
 199              		.loc 1 429 0
 200 0092 FFF7FEFF 		bl	vARPAgeCache
 430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 201              		.loc 1 430 0
 202 0096 56E0     		b	.L16
 203              	.L12:
 431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc946aYs.s 			page 12


 432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketBindEvent:
 433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
 434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				to a port. The port number is communicated in the socket field
 435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usLocalPort. vSocketBind() will actually bind the socket and the
 436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				API will unblock as soon as the eSOCKET_BOUND event is
 437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				triggered. */
 438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 204              		.loc 1 438 0
 205 0098 7B69     		ldr	r3, [r7, #20]
 206 009a BB61     		str	r3, [r7, #24]
 439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xAddress.sin_addr = 0u;	/* For the moment. */
 207              		.loc 1 439 0
 208 009c 0023     		movs	r3, #0
 209 009e FB60     		str	r3, [r7, #12]
 440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 210              		.loc 1 440 0
 211 00a0 BB69     		ldr	r3, [r7, #24]
 212 00a2 9B8C     		ldrh	r3, [r3, #36]
 213 00a4 1B02     		lsls	r3, r3, #8
 214 00a6 9AB2     		uxth	r2, r3
 215 00a8 BB69     		ldr	r3, [r7, #24]
 216 00aa 9B8C     		ldrh	r3, [r3, #36]
 217 00ac 1B0A     		lsrs	r3, r3, #8
 218 00ae 9BB2     		uxth	r3, r3
 219 00b0 9BB2     		uxth	r3, r3
 220 00b2 1343     		orrs	r3, r3, r2
 221 00b4 9BB2     		uxth	r3, r3
 222 00b6 9BB2     		uxth	r3, r3
 223 00b8 7B81     		strh	r3, [r7, #10]	@ movhi
 441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket->usLocalPort = 0u;
 224              		.loc 1 441 0
 225 00ba BB69     		ldr	r3, [r7, #24]
 226 00bc 0022     		movs	r2, #0
 227 00be 9A84     		strh	r2, [r3, #36]	@ movhi
 442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 228              		.loc 1 442 0
 229 00c0 07F10803 		add	r3, r7, #8
 230 00c4 B869     		ldr	r0, [r7, #24]
 231 00c6 1946     		mov	r1, r3
 232 00c8 0822     		movs	r2, #8
 233 00ca 0023     		movs	r3, #0
 234 00cc FFF7FEFF 		bl	vSocketBind
 443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Before 'eSocketBindEvent' was sent it was tested that
 445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( xEventGroup != NULL ) so it can be used now to wake up the
 446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				user. */
 447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxSocket->xEventBits |= eSOCKET_BOUND;
 235              		.loc 1 447 0
 236 00d0 BB69     		ldr	r3, [r7, #24]
 237 00d2 1B68     		ldr	r3, [r3]
 238 00d4 43F01002 		orr	r2, r3, #16
 239 00d8 BB69     		ldr	r3, [r7, #24]
 240 00da 1A60     		str	r2, [r3]
 448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketWakeUpUser( pxSocket );
 241              		.loc 1 448 0
 242 00dc B869     		ldr	r0, [r7, #24]
 243 00de FFF7FEFF 		bl	vSocketWakeUpUser
ARM GAS  /tmp/cc946aYs.s 			page 13


 449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 244              		.loc 1 449 0
 245 00e2 30E0     		b	.L16
 246              	.L13:
 450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketCloseEvent :
 452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The user API FreeRTOS_closesocket() has sent a message to the
 453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				IP-task to actually close a socket. This is handled in
 454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketClose().  As the socket gets closed, there is no way to
 455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				report back to the API, so the API won't wait for the result */
 456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 247              		.loc 1 456 0
 248 00e4 7B69     		ldr	r3, [r7, #20]
 249 00e6 1846     		mov	r0, r3
 250 00e8 FFF7FEFF 		bl	vSocketClose
 457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 251              		.loc 1 457 0
 252 00ec 2BE0     		b	.L16
 253              	.L7:
 458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eStackTxEvent :
 460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The network stack has generated a packet to send.  A
 461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pointer to the generated buffer is located in the pvData
 462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				member of the received event structure. */
 463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 254              		.loc 1 463 0
 255 00ee 7B69     		ldr	r3, [r7, #20]
 256 00f0 1846     		mov	r0, r3
 257 00f2 FFF7FEFF 		bl	vProcessGeneratedUDPPacket
 464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 258              		.loc 1 464 0
 259 00f6 26E0     		b	.L16
 260              	.L14:
 465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eDHCPEvent:
 467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The DHCP state machine needs processing. */
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_DHCP == 1 )
 469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vDHCPProcess( pdFALSE );
 471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_DHCP */
 473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketSelectEvent :
 476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_select() has got unblocked by a socket event,
 477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vSocketSelect() will check which sockets actually have an event
 478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				and update the socket field xSocketBits. */
 479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 261              		.loc 1 481 0
 262 00f8 7B69     		ldr	r3, [r7, #20]
 263 00fa 1846     		mov	r0, r3
 264 00fc FFF7FEFF 		bl	vSocketSelect
 482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
ARM GAS  /tmp/cc946aYs.s 			page 14


 265              		.loc 1 484 0
 266 0100 21E0     		b	.L16
 267              	.L15:
 485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eSocketSignalEvent :
 487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigSUPPORT_SIGNALS != 0 )
 488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Some task wants to signal the user of this socket in
 490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					order to interrupt a call to recv() or a call to select(). */
 491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					FreeRTOS_SignalSocket( ( Socket_t ) xReceivedEvent.pvData );
 268              		.loc 1 491 0
 269 0102 7B69     		ldr	r3, [r7, #20]
 270 0104 1846     		mov	r0, r3
 271 0106 FFF7FEFF 		bl	FreeRTOS_SignalSocket
 492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_SIGNALS */
 494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 272              		.loc 1 494 0
 273 010a 1CE0     		b	.L16
 274              	.L9:
 495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPTimerEvent :
 497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_TCP == 1 )
 498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Simply mark the TCP timer as expired so it gets processed
 500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					the next time prvCheckNetworkTimers() is called. */
 501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 275              		.loc 1 501 0
 276 010c 114A     		ldr	r2, .L21
 277 010e 1378     		ldrb	r3, [r2]
 278 0110 43F00203 		orr	r3, r3, #2
 279 0114 1370     		strb	r3, [r2]
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 280              		.loc 1 504 0
 281 0116 16E0     		b	.L16
 282              	.L10:
 505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPAcceptEvent:
 507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The API FreeRTOS_accept() was called, the IP-task will now
 508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				check if the listening socket (communicated in pvData) actually
 509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				received a new connection. */
 510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ipconfigUSE_TCP == 1 )
 511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 283              		.loc 1 512 0
 284 0118 7B69     		ldr	r3, [r7, #20]
 285 011a BB61     		str	r3, [r7, #24]
 513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 286              		.loc 1 514 0
 287 011c B869     		ldr	r0, [r7, #24]
 288 011e FFF7FEFF 		bl	xTCPCheckNewClient
 289 0122 0346     		mov	r3, r0
 290 0124 002B     		cmp	r3, #0
 291 0126 09D0     		beq	.L17
ARM GAS  /tmp/cc946aYs.s 			page 15


 515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 292              		.loc 1 516 0
 293 0128 BB69     		ldr	r3, [r7, #24]
 294 012a 1B68     		ldr	r3, [r3]
 295 012c 43F00402 		orr	r2, r3, #4
 296 0130 BB69     		ldr	r3, [r7, #24]
 297 0132 1A60     		str	r2, [r3]
 517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						vSocketWakeUpUser( pxSocket );
 298              		.loc 1 517 0
 299 0134 B869     		ldr	r0, [r7, #24]
 300 0136 FFF7FEFF 		bl	vSocketWakeUpUser
 518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 301              		.loc 1 521 0
 302 013a 04E0     		b	.L16
 303              	.L17:
 304 013c 03E0     		b	.L16
 305              	.L11:
 522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case eTCPNetStat:
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* FreeRTOS_netstat() was called to have the IP-task print an
 525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				overview of all sockets and their connections */
 526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
 527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
 528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vTCPNetStat();
 306              		.loc 1 528 0
 307 013e FFF7FEFF 		bl	vTCPNetStat
 529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigUSE_TCP */
 531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 308              		.loc 1 531 0
 309 0142 00E0     		b	.L16
 310              	.L20:
 532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default :
 534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Should not get here. */
 535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 311              		.loc 1 535 0
 312 0144 00BF     		nop
 313              	.L16:
 536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xNetworkDownEventPending != pdFALSE )
 314              		.loc 1 538 0
 315 0146 074B     		ldr	r3, .L21+16
 316 0148 1B68     		ldr	r3, [r3]
 317 014a 002B     		cmp	r3, #0
 318 014c 01D0     		beq	.L18
 539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* A network down event could not be posted to the network event
 541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			queue because the queue was full.  Try posting again. */
 542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_NetworkDown();
 319              		.loc 1 542 0
 320 014e FFF7FEFF 		bl	FreeRTOS_NetworkDown
ARM GAS  /tmp/cc946aYs.s 			page 16


 321              	.L18:
 543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 322              		.loc 1 544 0
 323 0152 63E7     		b	.L19
 324              	.L22:
 325              		.align	2
 326              	.L21:
 327 0154 00000000 		.word	xTCPTimer
 328 0158 00000000 		.word	xIPTaskInitialised
 329 015c 00000000 		.word	xNetworkEventQueue
 330 0160 00000000 		.word	xNetworkUp
 331 0164 00000000 		.word	xNetworkDownEventPending
 332              		.cfi_endproc
 333              	.LFE29:
 335              		.section	.text.xIsCallingFromIPTask,"ax",%progbits
 336              		.align	2
 337              		.global	xIsCallingFromIPTask
 338              		.thumb
 339              		.thumb_func
 341              	xIsCallingFromIPTask:
 342              	.LFB30:
 545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xIsCallingFromIPTask( void )
 549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 343              		.loc 1 549 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 8
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347 0000 80B5     		push	{r7, lr}
 348              	.LCFI3:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 7, -8
 351              		.cfi_offset 14, -4
 352 0002 82B0     		sub	sp, sp, #8
 353              	.LCFI4:
 354              		.cfi_def_cfa_offset 16
 355 0004 00AF     		add	r7, sp, #0
 356              	.LCFI5:
 357              		.cfi_def_cfa_register 7
 550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
 551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 358              		.loc 1 552 0
 359 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 360 000a 0246     		mov	r2, r0
 361 000c 064B     		ldr	r3, .L27
 362 000e 1B68     		ldr	r3, [r3]
 363 0010 9A42     		cmp	r2, r3
 364 0012 02D1     		bne	.L24
 553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdTRUE;
 365              		.loc 1 554 0
 366 0014 0123     		movs	r3, #1
 367 0016 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/cc946aYs.s 			page 17


 368 0018 01E0     		b	.L25
 369              	.L24:
 555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFALSE;
 370              		.loc 1 558 0
 371 001a 0023     		movs	r3, #0
 372 001c 7B60     		str	r3, [r7, #4]
 373              	.L25:
 559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 374              		.loc 1 561 0
 375 001e 7B68     		ldr	r3, [r7, #4]
 562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 376              		.loc 1 562 0
 377 0020 1846     		mov	r0, r3
 378 0022 0837     		adds	r7, r7, #8
 379              	.LCFI6:
 380              		.cfi_def_cfa_offset 8
 381 0024 BD46     		mov	sp, r7
 382              	.LCFI7:
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 0026 80BD     		pop	{r7, pc}
 386              	.L28:
 387              		.align	2
 388              	.L27:
 389 0028 00000000 		.word	xIPTaskHandle
 390              		.cfi_endproc
 391              	.LFE30:
 393              		.section	.text.prvHandleEthernetPacket,"ax",%progbits
 394              		.align	2
 395              		.thumb
 396              		.thumb_func
 398              	prvHandleEthernetPacket:
 399              	.LFB31:
 563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
 566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 400              		.loc 1 566 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 8
 403              		@ frame_needed = 1, uses_anonymous_args = 0
 404 0000 80B5     		push	{r7, lr}
 405              	.LCFI8:
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 82B0     		sub	sp, sp, #8
 410              	.LCFI9:
 411              		.cfi_def_cfa_offset 16
 412 0004 00AF     		add	r7, sp, #0
 413              	.LCFI10:
 414              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc946aYs.s 			page 18


 415 0006 7860     		str	r0, [r7, #4]
 567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
 568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
 570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		buffer will be sent at a time.  This is the default way for +TCP to pass
 571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		messages from the MAC to the TCP/IP stack. */
 572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvProcessEthernetPacket( pxBuffer );
 416              		.loc 1 572 0
 417 0008 7868     		ldr	r0, [r7, #4]
 418 000a FFF7FEFF 		bl	prvProcessEthernetPacket
 573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else /* ipconfigUSE_LINKED_RX_MESSAGES */
 575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNextBuffer;
 577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* An optimisation that is useful when there is high network traffic.
 579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		Instead of passing received packets into the IP task one at a time the
 580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		network interface can chain received packets together and pass them into
 581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the IP task in one go.  The packets are chained using the pxNextBuffer
 582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		member.  The loop below walks through the chain processing each packet
 583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		in the chain in turn. */
 584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		do
 585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Store a pointer to the buffer after pxBuffer for use later on. */
 587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNextBuffer = pxBuffer->pxNextBuffer;
 588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Make it NULL to avoid using it later on. */
 590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxBuffer->pxNextBuffer = NULL;
 591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvProcessEthernetPacket( pxBuffer );
 593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxBuffer = pxNextBuffer;
 594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* While there is another packet in the chain. */
 596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		} while( pxBuffer != NULL );
 597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
 599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 419              		.loc 1 599 0
 420 000e 0837     		adds	r7, r7, #8
 421              	.LCFI11:
 422              		.cfi_def_cfa_offset 8
 423 0010 BD46     		mov	sp, r7
 424              	.LCFI12:
 425              		.cfi_def_cfa_register 13
 426              		@ sp needed
 427 0012 80BD     		pop	{r7, pc}
 428              		.cfi_endproc
 429              	.LFE31:
 431              		.section	.text.prvCalculateSleepTime,"ax",%progbits
 432              		.align	2
 433              		.thumb
 434              		.thumb_func
 436              	prvCalculateSleepTime:
 437              	.LFB32:
 600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static TickType_t prvCalculateSleepTime( void )
ARM GAS  /tmp/cc946aYs.s 			page 19


 603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 438              		.loc 1 603 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 8
 441              		@ frame_needed = 1, uses_anonymous_args = 0
 442              		@ link register save eliminated.
 443 0000 80B4     		push	{r7}
 444              	.LCFI13:
 445              		.cfi_def_cfa_offset 4
 446              		.cfi_offset 7, -4
 447 0002 83B0     		sub	sp, sp, #12
 448              	.LCFI14:
 449              		.cfi_def_cfa_offset 16
 450 0004 00AF     		add	r7, sp, #0
 451              	.LCFI15:
 452              		.cfi_def_cfa_register 7
 604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** TickType_t xMaximumSleepTime;
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Start with the maximum sleep time, then check this against the remaining
 607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	time in any other timers that are active. */
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 453              		.loc 1 608 0
 454 0006 42F21073 		movw	r3, #10000
 455 000a 7B60     		str	r3, [r7, #4]
 609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 456              		.loc 1 610 0
 457 000c 164B     		ldr	r3, .L35
 458 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 459 0010 03F00103 		and	r3, r3, #1
 460 0014 DBB2     		uxtb	r3, r3
 461 0016 002B     		cmp	r3, #0
 462 0018 07D0     		beq	.L31
 611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 463              		.loc 1 612 0
 464 001a 134B     		ldr	r3, .L35
 465 001c DA68     		ldr	r2, [r3, #12]
 466 001e 7B68     		ldr	r3, [r7, #4]
 467 0020 9A42     		cmp	r2, r3
 468 0022 02D2     		bcs	.L31
 613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xMaximumSleepTime = xARPTimer.ulReloadTime;
 469              		.loc 1 614 0
 470 0024 104B     		ldr	r3, .L35
 471 0026 1B69     		ldr	r3, [r3, #16]
 472 0028 7B60     		str	r3, [r7, #4]
 473              	.L31:
 615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_DHCP == 1 )
 619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
ARM GAS  /tmp/cc946aYs.s 			page 20


 624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_DHCP */
 629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 474              		.loc 1 632 0
 475 002a 104B     		ldr	r3, .L35+4
 476 002c DA68     		ldr	r2, [r3, #12]
 477 002e 7B68     		ldr	r3, [r7, #4]
 478 0030 9A42     		cmp	r2, r3
 479 0032 02D2     		bcs	.L32
 633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 480              		.loc 1 634 0
 481 0034 0D4B     		ldr	r3, .L35+4
 482 0036 DB68     		ldr	r3, [r3, #12]
 483 0038 7B60     		str	r3, [r7, #4]
 484              	.L32:
 635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
 640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xDNSTimer.bActive != pdFALSE )
 485              		.loc 1 641 0
 486 003a 0D4B     		ldr	r3, .L35+8
 487 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 488 003e 03F00103 		and	r3, r3, #1
 489 0042 DBB2     		uxtb	r3, r3
 490 0044 002B     		cmp	r3, #0
 491 0046 07D0     		beq	.L33
 642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xDNSTimer.ulRemainingTime < xMaximumSleepTime )
 492              		.loc 1 643 0
 493 0048 094B     		ldr	r3, .L35+8
 494 004a DA68     		ldr	r2, [r3, #12]
 495 004c 7B68     		ldr	r3, [r7, #4]
 496 004e 9A42     		cmp	r2, r3
 497 0050 02D2     		bcs	.L33
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xMaximumSleepTime = xDNSTimer.ulRemainingTime;
 498              		.loc 1 645 0
 499 0052 074B     		ldr	r3, .L35+8
 500 0054 DB68     		ldr	r3, [r3, #12]
 501 0056 7B60     		str	r3, [r7, #4]
 502              	.L33:
 646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
 650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xMaximumSleepTime;
ARM GAS  /tmp/cc946aYs.s 			page 21


 503              		.loc 1 651 0
 504 0058 7B68     		ldr	r3, [r7, #4]
 652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 505              		.loc 1 652 0
 506 005a 1846     		mov	r0, r3
 507 005c 0C37     		adds	r7, r7, #12
 508              	.LCFI16:
 509              		.cfi_def_cfa_offset 4
 510 005e BD46     		mov	sp, r7
 511              	.LCFI17:
 512              		.cfi_def_cfa_register 13
 513              		@ sp needed
 514 0060 5DF8047B 		ldr	r7, [sp], #4
 515              	.LCFI18:
 516              		.cfi_restore 7
 517              		.cfi_def_cfa_offset 0
 518 0064 7047     		bx	lr
 519              	.L36:
 520 0066 00BF     		.align	2
 521              	.L35:
 522 0068 00000000 		.word	xARPTimer
 523 006c 00000000 		.word	xTCPTimer
 524 0070 00000000 		.word	xDNSTimer
 525              		.cfi_endproc
 526              	.LFE32:
 528              		.section	.text.prvCheckNetworkTimers,"ax",%progbits
 529              		.align	2
 530              		.thumb
 531              		.thumb_func
 533              	prvCheckNetworkTimers:
 534              	.LFB33:
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvCheckNetworkTimers( void )
 656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 535              		.loc 1 656 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 16
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539 0000 80B5     		push	{r7, lr}
 540              	.LCFI19:
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 0002 84B0     		sub	sp, sp, #16
 545              	.LCFI20:
 546              		.cfi_def_cfa_offset 24
 547 0004 00AF     		add	r7, sp, #0
 548              	.LCFI21:
 549              		.cfi_def_cfa_register 7
 657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Is it time for ARP processing? */
 658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 550              		.loc 1 658 0
 551 0006 2848     		ldr	r0, .L45
 552 0008 FFF7FEFF 		bl	prvIPTimerCheck
 553 000c 0346     		mov	r3, r0
 554 000e 002B     		cmp	r3, #0
ARM GAS  /tmp/cc946aYs.s 			page 22


 555 0010 02D0     		beq	.L38
 659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSendEventToIPTask( eARPTimerEvent );
 556              		.loc 1 660 0
 557 0012 0220     		movs	r0, #2
 558 0014 FFF7FEFF 		bl	xSendEventToIPTask
 559              	.L38:
 560              	.LBB14:
 661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_DHCP == 1 )
 664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Is it time for DHCP processing? */
 666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xSendEventToIPTask( eDHCPEvent );
 669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_DHCP */
 672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
 674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	extern void vDNSCheckCallBack( void *pvSearchID );
 676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Is it time for DNS processing? */
 678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 561              		.loc 1 678 0
 562 0018 2448     		ldr	r0, .L45+4
 563 001a FFF7FEFF 		bl	prvIPTimerCheck
 564 001e 0346     		mov	r3, r0
 565 0020 002B     		cmp	r3, #0
 566 0022 02D0     		beq	.L39
 679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vDNSCheckCallBack( NULL );
 567              		.loc 1 680 0
 568 0024 0020     		movs	r0, #0
 569 0026 FFF7FEFF 		bl	vDNSCheckCallBack
 570              	.L39:
 571              	.LBE14:
 572              	.LBB15:
 681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDNS_USE_CALLBACKS */
 684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_TCP == 1 )
 686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xWillSleep;
 688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* xStart keeps a copy of the last time this function was active,
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	and during every call it will be updated with xTaskGetTickCount()
 690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	'0' means: not yet initialised (although later '0' might be returned
 691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	by xTaskGetTickCount(), which is no problem). */
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static TickType_t xStart = ( TickType_t ) 0;
 693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	TickType_t xTimeNow, xNextTime;
 694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xCheckTCPSockets;
 695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	extern uint32_t ulNextInitialSequenceNumber;
 696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
ARM GAS  /tmp/cc946aYs.s 			page 23


 573              		.loc 1 697 0
 574 002a 214B     		ldr	r3, .L45+8
 575 002c 1B68     		ldr	r3, [r3]
 576 002e 1846     		mov	r0, r3
 577 0030 FFF7FEFF 		bl	uxQueueMessagesWaiting
 578 0034 0346     		mov	r3, r0
 579 0036 002B     		cmp	r3, #0
 580 0038 02D1     		bne	.L40
 698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xWillSleep = pdTRUE;
 581              		.loc 1 699 0
 582 003a 0123     		movs	r3, #1
 583 003c FB60     		str	r3, [r7, #12]
 584 003e 01E0     		b	.L41
 585              	.L40:
 700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xWillSleep = pdFALSE;
 586              		.loc 1 703 0
 587 0040 0023     		movs	r3, #0
 588 0042 FB60     		str	r3, [r7, #12]
 589              	.L41:
 704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xTimeNow = xTaskGetTickCount();
 590              		.loc 1 706 0
 591 0044 FFF7FEFF 		bl	xTaskGetTickCount
 592 0048 7860     		str	r0, [r7, #4]
 707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xStart != ( TickType_t ) 0 )
 593              		.loc 1 708 0
 594 004a 1A4B     		ldr	r3, .L45+12
 595 004c 1B68     		ldr	r3, [r3]
 596 004e 002B     		cmp	r3, #0
 597 0050 09D0     		beq	.L42
 709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* It is advised to increment the Initial Sequence Number every 4
 711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			microseconds which makes 250 times per ms.  This will make it harder
 712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			for a third party to 'guess' our sequence number and 'take over'
 713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			a TCP connection */
 714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulNextInitialSequenceNumber += ipINITIAL_SEQUENCE_NUMBER_FACTOR * ( ( xTimeNow - xStart ) * port
 598              		.loc 1 714 0
 599 0052 184B     		ldr	r3, .L45+12
 600 0054 1B68     		ldr	r3, [r3]
 601 0056 7A68     		ldr	r2, [r7, #4]
 602 0058 D31A     		subs	r3, r2, r3
 603 005a 1A02     		lsls	r2, r3, #8
 604 005c 164B     		ldr	r3, .L45+16
 605 005e 1B68     		ldr	r3, [r3]
 606 0060 1344     		add	r3, r3, r2
 607 0062 154A     		ldr	r2, .L45+16
 608 0064 1360     		str	r3, [r2]
 609              	.L42:
 715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xStart = xTimeNow;
ARM GAS  /tmp/cc946aYs.s 			page 24


 610              		.loc 1 717 0
 611 0066 134A     		ldr	r2, .L45+12
 612 0068 7B68     		ldr	r3, [r7, #4]
 613 006a 1360     		str	r3, [r2]
 718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sockets need to be checked if the TCP timer has expired. */
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 614              		.loc 1 720 0
 615 006c 1348     		ldr	r0, .L45+20
 616 006e FFF7FEFF 		bl	prvIPTimerCheck
 617 0072 B860     		str	r0, [r7, #8]
 721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sockets will also be checked if there are TCP messages but the
 723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		message queue is empty (indicated by xWillSleep being true). */
 724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 618              		.loc 1 724 0
 619 0074 124B     		ldr	r3, .L45+24
 620 0076 1B68     		ldr	r3, [r3]
 621 0078 002B     		cmp	r3, #0
 622 007a 04D0     		beq	.L43
 623              		.loc 1 724 0 is_stmt 0 discriminator 1
 624 007c FB68     		ldr	r3, [r7, #12]
 625 007e 002B     		cmp	r3, #0
 626 0080 01D0     		beq	.L43
 725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xCheckTCPSockets = pdTRUE;
 627              		.loc 1 726 0 is_stmt 1
 628 0082 0123     		movs	r3, #1
 629 0084 BB60     		str	r3, [r7, #8]
 630              	.L43:
 727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xCheckTCPSockets != pdFALSE )
 631              		.loc 1 729 0
 632 0086 BB68     		ldr	r3, [r7, #8]
 633 0088 002B     		cmp	r3, #0
 634 008a 0AD0     		beq	.L37
 730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Attend to the sockets, returning the period after which the
 732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			check must be repeated. */
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNextTime = xTCPTimerCheck( xWillSleep );
 635              		.loc 1 733 0
 636 008c F868     		ldr	r0, [r7, #12]
 637 008e FFF7FEFF 		bl	xTCPTimerCheck
 638 0092 3860     		str	r0, [r7]
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvIPTimerStart( &xTCPTimer, xNextTime );
 639              		.loc 1 734 0
 640 0094 0948     		ldr	r0, .L45+20
 641 0096 3968     		ldr	r1, [r7]
 642 0098 FFF7FEFF 		bl	prvIPTimerStart
 735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xProcessedTCPMessage = 0;
 643              		.loc 1 735 0
 644 009c 084B     		ldr	r3, .L45+24
 645 009e 0022     		movs	r2, #0
 646 00a0 1A60     		str	r2, [r3]
 647              	.L37:
 648              	.LBE15:
ARM GAS  /tmp/cc946aYs.s 			page 25


 736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_TCP == 1 */
 739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 649              		.loc 1 739 0
 650 00a2 1037     		adds	r7, r7, #16
 651              	.LCFI22:
 652              		.cfi_def_cfa_offset 8
 653 00a4 BD46     		mov	sp, r7
 654              	.LCFI23:
 655              		.cfi_def_cfa_register 13
 656              		@ sp needed
 657 00a6 80BD     		pop	{r7, pc}
 658              	.L46:
 659              		.align	2
 660              	.L45:
 661 00a8 00000000 		.word	xARPTimer
 662 00ac 00000000 		.word	xDNSTimer
 663 00b0 00000000 		.word	xNetworkEventQueue
 664 00b4 00000000 		.word	xStart.6785
 665 00b8 00000000 		.word	ulNextInitialSequenceNumber
 666 00bc 00000000 		.word	xTCPTimer
 667 00c0 00000000 		.word	xProcessedTCPMessage
 668              		.cfi_endproc
 669              	.LFE33:
 671              		.section	.text.prvIPTimerStart,"ax",%progbits
 672              		.align	2
 673              		.thumb
 674              		.thumb_func
 676              	prvIPTimerStart:
 677              	.LFB34:
 740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
 743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 678              		.loc 1 743 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 8
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682 0000 80B5     		push	{r7, lr}
 683              	.LCFI24:
 684              		.cfi_def_cfa_offset 8
 685              		.cfi_offset 7, -8
 686              		.cfi_offset 14, -4
 687 0002 82B0     		sub	sp, sp, #8
 688              	.LCFI25:
 689              		.cfi_def_cfa_offset 16
 690 0004 00AF     		add	r7, sp, #0
 691              	.LCFI26:
 692              		.cfi_def_cfa_register 7
 693 0006 7860     		str	r0, [r7, #4]
 694 0008 3960     		str	r1, [r7]
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 695              		.loc 1 744 0
 696 000a 7B68     		ldr	r3, [r7, #4]
 697 000c 0433     		adds	r3, r3, #4
 698 000e 1846     		mov	r0, r3
ARM GAS  /tmp/cc946aYs.s 			page 26


 699 0010 FFF7FEFF 		bl	vTaskSetTimeOutState
 745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulRemainingTime = xTime;
 700              		.loc 1 745 0
 701 0014 7B68     		ldr	r3, [r7, #4]
 702 0016 3A68     		ldr	r2, [r7]
 703 0018 DA60     		str	r2, [r3, #12]
 746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xTime == ( TickType_t ) 0 )
 704              		.loc 1 747 0
 705 001a 3B68     		ldr	r3, [r7]
 706 001c 002B     		cmp	r3, #0
 707 001e 05D1     		bne	.L48
 748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxTimer->bExpired = pdTRUE_UNSIGNED;
 708              		.loc 1 749 0
 709 0020 7A68     		ldr	r2, [r7, #4]
 710 0022 1378     		ldrb	r3, [r2]
 711 0024 43F00203 		orr	r3, r3, #2
 712 0028 1370     		strb	r3, [r2]
 713 002a 04E0     		b	.L49
 714              	.L48:
 750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxTimer->bExpired = pdFALSE_UNSIGNED;
 715              		.loc 1 753 0
 716 002c 7A68     		ldr	r2, [r7, #4]
 717 002e 1378     		ldrb	r3, [r2]
 718 0030 6FF34103 		bfc	r3, #1, #1
 719 0034 1370     		strb	r3, [r2]
 720              	.L49:
 754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->bActive = pdTRUE_UNSIGNED;
 721              		.loc 1 756 0
 722 0036 7A68     		ldr	r2, [r7, #4]
 723 0038 1378     		ldrb	r3, [r2]
 724 003a 43F00103 		orr	r3, r3, #1
 725 003e 1370     		strb	r3, [r2]
 757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 726              		.loc 1 757 0
 727 0040 0837     		adds	r7, r7, #8
 728              	.LCFI27:
 729              		.cfi_def_cfa_offset 8
 730 0042 BD46     		mov	sp, r7
 731              	.LCFI28:
 732              		.cfi_def_cfa_register 13
 733              		@ sp needed
 734 0044 80BD     		pop	{r7, pc}
 735              		.cfi_endproc
 736              	.LFE34:
 738 0046 00BF     		.section	.text.prvIPTimerReload,"ax",%progbits
 739              		.align	2
 740              		.thumb
 741              		.thumb_func
 743              	prvIPTimerReload:
 744              	.LFB35:
ARM GAS  /tmp/cc946aYs.s 			page 27


 758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
 761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 745              		.loc 1 761 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 8
 748              		@ frame_needed = 1, uses_anonymous_args = 0
 749 0000 80B5     		push	{r7, lr}
 750              	.LCFI29:
 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 82B0     		sub	sp, sp, #8
 755              	.LCFI30:
 756              		.cfi_def_cfa_offset 16
 757 0004 00AF     		add	r7, sp, #0
 758              	.LCFI31:
 759              		.cfi_def_cfa_register 7
 760 0006 7860     		str	r0, [r7, #4]
 761 0008 3960     		str	r1, [r7]
 762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxTimer->ulReloadTime = xTime;
 762              		.loc 1 762 0
 763 000a 7B68     		ldr	r3, [r7, #4]
 764 000c 3A68     		ldr	r2, [r7]
 765 000e 1A61     		str	r2, [r3, #16]
 763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerStart( pxTimer, xTime );
 766              		.loc 1 763 0
 767 0010 7868     		ldr	r0, [r7, #4]
 768 0012 3968     		ldr	r1, [r7]
 769 0014 FFF7FEFF 		bl	prvIPTimerStart
 764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 770              		.loc 1 764 0
 771 0018 0837     		adds	r7, r7, #8
 772              	.LCFI32:
 773              		.cfi_def_cfa_offset 8
 774 001a BD46     		mov	sp, r7
 775              	.LCFI33:
 776              		.cfi_def_cfa_register 13
 777              		@ sp needed
 778 001c 80BD     		pop	{r7, pc}
 779              		.cfi_endproc
 780              	.LFE35:
 782 001e 00BF     		.section	.text.prvIPTimerCheck,"ax",%progbits
 783              		.align	2
 784              		.thumb
 785              		.thumb_func
 787              	prvIPTimerCheck:
 788              	.LFB36:
 765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
 768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 789              		.loc 1 768 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
 792              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc946aYs.s 			page 28


 793 0000 80B5     		push	{r7, lr}
 794              	.LCFI34:
 795              		.cfi_def_cfa_offset 8
 796              		.cfi_offset 7, -8
 797              		.cfi_offset 14, -4
 798 0002 84B0     		sub	sp, sp, #16
 799              	.LCFI35:
 800              		.cfi_def_cfa_offset 24
 801 0004 00AF     		add	r7, sp, #0
 802              	.LCFI36:
 803              		.cfi_def_cfa_register 7
 804 0006 7860     		str	r0, [r7, #4]
 769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn;
 770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 805              		.loc 1 771 0
 806 0008 7B68     		ldr	r3, [r7, #4]
 807 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 808 000c 03F00103 		and	r3, r3, #1
 809 0010 DBB2     		uxtb	r3, r3
 810 0012 002B     		cmp	r3, #0
 811 0014 02D1     		bne	.L52
 772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The timer is not enabled. */
 774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFALSE;
 812              		.loc 1 774 0
 813 0016 0023     		movs	r3, #0
 814 0018 FB60     		str	r3, [r7, #12]
 815 001a 1CE0     		b	.L53
 816              	.L52:
 775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The timer might have set the bExpired flag already, if not, check the
 779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		value of xTimeOut against ulRemainingTime. */
 780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 817              		.loc 1 780 0
 818 001c 7B68     		ldr	r3, [r7, #4]
 819 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 820 0020 03F00203 		and	r3, r3, #2
 821 0024 DBB2     		uxtb	r3, r3
 822 0026 002B     		cmp	r3, #0
 823 0028 0AD1     		bne	.L54
 781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 824              		.loc 1 781 0 discriminator 1
 825 002a 7B68     		ldr	r3, [r7, #4]
 826 002c 1A1D     		adds	r2, r3, #4
 827 002e 7B68     		ldr	r3, [r7, #4]
 828 0030 0C33     		adds	r3, r3, #12
 829 0032 1046     		mov	r0, r2
 830 0034 1946     		mov	r1, r3
 831 0036 FFF7FEFF 		bl	xTaskCheckForTimeOut
 832 003a 0346     		mov	r3, r0
 780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 833              		.loc 1 780 0 discriminator 1
 834 003c 002B     		cmp	r3, #0
 835 003e 08D0     		beq	.L55
ARM GAS  /tmp/cc946aYs.s 			page 29


 836              	.L54:
 782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 837              		.loc 1 783 0
 838 0040 7B68     		ldr	r3, [r7, #4]
 839 0042 1B69     		ldr	r3, [r3, #16]
 840 0044 7868     		ldr	r0, [r7, #4]
 841 0046 1946     		mov	r1, r3
 842 0048 FFF7FEFF 		bl	prvIPTimerStart
 784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdTRUE;
 843              		.loc 1 784 0
 844 004c 0123     		movs	r3, #1
 845 004e FB60     		str	r3, [r7, #12]
 846 0050 01E0     		b	.L53
 847              	.L55:
 785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdFALSE;
 848              		.loc 1 788 0
 849 0052 0023     		movs	r3, #0
 850 0054 FB60     		str	r3, [r7, #12]
 851              	.L53:
 789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 852              		.loc 1 792 0
 853 0056 FB68     		ldr	r3, [r7, #12]
 793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 854              		.loc 1 793 0
 855 0058 1846     		mov	r0, r3
 856 005a 1037     		adds	r7, r7, #16
 857              	.LCFI37:
 858              		.cfi_def_cfa_offset 8
 859 005c BD46     		mov	sp, r7
 860              	.LCFI38:
 861              		.cfi_def_cfa_register 13
 862              		@ sp needed
 863 005e 80BD     		pop	{r7, pc}
 864              		.cfi_endproc
 865              	.LFE36:
 867              		.section	.text.FreeRTOS_NetworkDown,"ax",%progbits
 868              		.align	2
 869              		.global	FreeRTOS_NetworkDown
 870              		.thumb
 871              		.thumb_func
 873              	FreeRTOS_NetworkDown:
 874              	.LFB37:
 794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_NetworkDown( void )
 797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 875              		.loc 1 797 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 8
 878              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc946aYs.s 			page 30


 879 0000 80B5     		push	{r7, lr}
 880              	.LCFI39:
 881              		.cfi_def_cfa_offset 8
 882              		.cfi_offset 7, -8
 883              		.cfi_offset 14, -4
 884 0002 82B0     		sub	sp, sp, #8
 885              	.LCFI40:
 886              		.cfi_def_cfa_offset 16
 887 0004 00AF     		add	r7, sp, #0
 888              	.LCFI41:
 889              		.cfi_def_cfa_register 7
 798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
 799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const TickType_t xDontBlock = ( TickType_t ) 0;
 890              		.loc 1 799 0
 891 0006 0023     		movs	r3, #0
 892 0008 7B60     		str	r3, [r7, #4]
 800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Simply send the network task the appropriate event. */
 802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 893              		.loc 1 802 0
 894 000a 0848     		ldr	r0, .L60
 895 000c 7968     		ldr	r1, [r7, #4]
 896 000e FFF7FEFF 		bl	xSendEventStructToIPTask
 897 0012 0346     		mov	r3, r0
 898 0014 012B     		cmp	r3, #1
 899 0016 03D0     		beq	.L58
 803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Could not send the message, so it is still pending. */
 805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdTRUE;
 900              		.loc 1 805 0
 901 0018 054B     		ldr	r3, .L60+4
 902 001a 0122     		movs	r2, #1
 903 001c 1A60     		str	r2, [r3]
 904 001e 02E0     		b	.L57
 905              	.L58:
 806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Message was sent so it is not pending. */
 810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdFALSE;
 906              		.loc 1 810 0
 907 0020 034B     		ldr	r3, .L60+4
 908 0022 0022     		movs	r2, #0
 909 0024 1A60     		str	r2, [r3]
 910              	.L57:
 811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceNETWORK_DOWN();
 814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 911              		.loc 1 814 0
 912 0026 0837     		adds	r7, r7, #8
 913              	.LCFI42:
 914              		.cfi_def_cfa_offset 8
 915 0028 BD46     		mov	sp, r7
 916              	.LCFI43:
 917              		.cfi_def_cfa_register 13
 918              		@ sp needed
ARM GAS  /tmp/cc946aYs.s 			page 31


 919 002a 80BD     		pop	{r7, pc}
 920              	.L61:
 921              		.align	2
 922              	.L60:
 923 002c 00000000 		.word	xNetworkDownEvent.6806
 924 0030 00000000 		.word	xNetworkDownEventPending
 925              		.cfi_endproc
 926              	.LFE37:
 928              		.section	.text.FreeRTOS_NetworkDownFromISR,"ax",%progbits
 929              		.align	2
 930              		.global	FreeRTOS_NetworkDownFromISR
 931              		.thumb
 932              		.thumb_func
 934              	FreeRTOS_NetworkDownFromISR:
 935              	.LFB38:
 815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_NetworkDownFromISR( void )
 818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 936              		.loc 1 818 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 8
 939              		@ frame_needed = 1, uses_anonymous_args = 0
 940 0000 80B5     		push	{r7, lr}
 941              	.LCFI44:
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 7, -8
 944              		.cfi_offset 14, -4
 945 0002 82B0     		sub	sp, sp, #8
 946              	.LCFI45:
 947              		.cfi_def_cfa_offset 16
 948 0004 00AF     		add	r7, sp, #0
 949              	.LCFI46:
 950              		.cfi_def_cfa_register 7
 819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
 820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 951              		.loc 1 820 0
 952 0006 0023     		movs	r3, #0
 953 0008 7B60     		str	r3, [r7, #4]
 821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Simply send the network task the appropriate event. */
 823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) !
 954              		.loc 1 823 0
 955 000a 0C4B     		ldr	r3, .L66
 956 000c 1A68     		ldr	r2, [r3]
 957 000e 3B1D     		adds	r3, r7, #4
 958 0010 1046     		mov	r0, r2
 959 0012 0B49     		ldr	r1, .L66+4
 960 0014 1A46     		mov	r2, r3
 961 0016 0023     		movs	r3, #0
 962 0018 FFF7FEFF 		bl	xQueueGenericSendFromISR
 963 001c 0346     		mov	r3, r0
 964 001e 012B     		cmp	r3, #1
 965 0020 03D0     		beq	.L63
 824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdTRUE;
 966              		.loc 1 825 0
ARM GAS  /tmp/cc946aYs.s 			page 32


 967 0022 084B     		ldr	r3, .L66+8
 968 0024 0122     		movs	r2, #1
 969 0026 1A60     		str	r2, [r3]
 970 0028 02E0     		b	.L64
 971              	.L63:
 826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkDownEventPending = pdFALSE;
 972              		.loc 1 829 0
 973 002a 064B     		ldr	r3, .L66+8
 974 002c 0022     		movs	r2, #0
 975 002e 1A60     		str	r2, [r3]
 976              	.L64:
 830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	iptraceNETWORK_DOWN();
 833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xHigherPriorityTaskWoken;
 977              		.loc 1 834 0
 978 0030 7B68     		ldr	r3, [r7, #4]
 835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 979              		.loc 1 835 0
 980 0032 1846     		mov	r0, r3
 981 0034 0837     		adds	r7, r7, #8
 982              	.LCFI47:
 983              		.cfi_def_cfa_offset 8
 984 0036 BD46     		mov	sp, r7
 985              	.LCFI48:
 986              		.cfi_def_cfa_register 13
 987              		@ sp needed
 988 0038 80BD     		pop	{r7, pc}
 989              	.L67:
 990 003a 00BF     		.align	2
 991              	.L66:
 992 003c 00000000 		.word	xNetworkEventQueue
 993 0040 00000000 		.word	xNetworkDownEvent.6811
 994 0044 00000000 		.word	xNetworkDownEventPending
 995              		.cfi_endproc
 996              	.LFE38:
 998              		.section	.text.FreeRTOS_GetUDPPayloadBuffer,"ax",%progbits
 999              		.align	2
 1000              		.global	FreeRTOS_GetUDPPayloadBuffer
 1001              		.thumb
 1002              		.thumb_func
 1004              	FreeRTOS_GetUDPPayloadBuffer:
 1005              	.LFB39:
 836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
 839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1006              		.loc 1 839 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 16
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              	.LCFI49:
ARM GAS  /tmp/cc946aYs.s 			page 33


 1012              		.cfi_def_cfa_offset 8
 1013              		.cfi_offset 7, -8
 1014              		.cfi_offset 14, -4
 1015 0002 84B0     		sub	sp, sp, #16
 1016              	.LCFI50:
 1017              		.cfi_def_cfa_offset 24
 1018 0004 00AF     		add	r7, sp, #0
 1019              	.LCFI51:
 1020              		.cfi_def_cfa_register 7
 1021 0006 7860     		str	r0, [r7, #4]
 1022 0008 3960     		str	r1, [r7]
 840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void *pvReturn;
 842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Cap the block time.  The reason for this is explained where
 844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined (assuming an official
 845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	FreeRTOSIPConfig.h header file is being used). */
 846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xBlockTimeTicks > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 1023              		.loc 1 846 0
 1024 000a 3B68     		ldr	r3, [r7]
 1025 000c 41F28832 		movw	r2, #5000
 1026 0010 9342     		cmp	r3, r2
 1027 0012 02D9     		bls	.L69
 847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 1028              		.loc 1 848 0
 1029 0014 41F28833 		movw	r3, #5000
 1030 0018 3B60     		str	r3, [r7]
 1031              	.L69:
 849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Obtain a network buffer with the required amount of storage. */
 852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, x
 1032              		.loc 1 852 0
 1033 001a 7B68     		ldr	r3, [r7, #4]
 1034 001c 2A33     		adds	r3, r3, #42
 1035 001e 1846     		mov	r0, r3
 1036 0020 3968     		ldr	r1, [r7]
 1037 0022 FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 1038 0026 B860     		str	r0, [r7, #8]
 853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNetworkBuffer != NULL )
 1039              		.loc 1 854 0
 1040 0028 BB68     		ldr	r3, [r7, #8]
 1041 002a 002B     		cmp	r3, #0
 1042 002c 04D0     		beq	.L70
 855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Leave space for the UPD header. */
 857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 1043              		.loc 1 857 0
 1044 002e BB68     		ldr	r3, [r7, #8]
 1045 0030 9B69     		ldr	r3, [r3, #24]
 1046 0032 2A33     		adds	r3, r3, #42
 1047 0034 FB60     		str	r3, [r7, #12]
 1048 0036 01E0     		b	.L71
 1049              	.L70:
 858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
ARM GAS  /tmp/cc946aYs.s 			page 34


 859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pvReturn = NULL;
 1050              		.loc 1 861 0
 1051 0038 0023     		movs	r3, #0
 1052 003a FB60     		str	r3, [r7, #12]
 1053              	.L71:
 862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return ( void * ) pvReturn;
 1054              		.loc 1 864 0
 1055 003c FB68     		ldr	r3, [r7, #12]
 865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1056              		.loc 1 865 0
 1057 003e 1846     		mov	r0, r3
 1058 0040 1037     		adds	r7, r7, #16
 1059              	.LCFI52:
 1060              		.cfi_def_cfa_offset 8
 1061 0042 BD46     		mov	sp, r7
 1062              	.LCFI53:
 1063              		.cfi_def_cfa_register 13
 1064              		@ sp needed
 1065 0044 80BD     		pop	{r7, pc}
 1066              		.cfi_endproc
 1067              	.LFE39:
 1069 0046 00BF     		.section	.text.pxDuplicateNetworkBufferWithDescriptor,"ax",%progbits
 1070              		.align	2
 1071              		.global	pxDuplicateNetworkBufferWithDescriptor
 1072              		.thumb
 1073              		.thumb_func
 1075              	pxDuplicateNetworkBufferWithDescriptor:
 1076              	.LFB40:
 866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * cons
 869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xNewLength )
 870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1077              		.loc 1 870 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 16
 1080              		@ frame_needed = 1, uses_anonymous_args = 0
 1081 0000 80B5     		push	{r7, lr}
 1082              	.LCFI54:
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 7, -8
 1085              		.cfi_offset 14, -4
 1086 0002 84B0     		sub	sp, sp, #16
 1087              	.LCFI55:
 1088              		.cfi_def_cfa_offset 24
 1089 0004 00AF     		add	r7, sp, #0
 1090              	.LCFI56:
 1091              		.cfi_def_cfa_register 7
 1092 0006 7860     		str	r0, [r7, #4]
 1093 0008 3960     		str	r1, [r7]
 871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t * pxNewBuffer;
 872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
ARM GAS  /tmp/cc946aYs.s 			page 35


 874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	The transmit routine wants to have ownership of the network buffer
 875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	descriptor, because it will pass the buffer straight to DMA. */
 876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 1094              		.loc 1 876 0
 1095 000a 3B68     		ldr	r3, [r7]
 1096 000c 1846     		mov	r0, r3
 1097 000e 0021     		movs	r1, #0
 1098 0010 FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 1099 0014 F860     		str	r0, [r7, #12]
 877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNewBuffer != NULL )
 1100              		.loc 1 878 0
 1101 0016 FB68     		ldr	r3, [r7, #12]
 1102 0018 002B     		cmp	r3, #0
 1103 001a 16D0     		beq	.L74
 879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 1104              		.loc 1 880 0
 1105 001c 7B68     		ldr	r3, [r7, #4]
 1106 001e 5A69     		ldr	r2, [r3, #20]
 1107 0020 FB68     		ldr	r3, [r7, #12]
 1108 0022 5A61     		str	r2, [r3, #20]
 881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 1109              		.loc 1 881 0
 1110 0024 7B68     		ldr	r3, [r7, #4]
 1111 0026 1A8C     		ldrh	r2, [r3, #32]
 1112 0028 FB68     		ldr	r3, [r7, #12]
 1113 002a 1A84     		strh	r2, [r3, #32]	@ movhi
 882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 1114              		.loc 1 882 0
 1115 002c 7B68     		ldr	r3, [r7, #4]
 1116 002e 5A8C     		ldrh	r2, [r3, #34]
 1117 0030 FB68     		ldr	r3, [r7, #12]
 1118 0032 5A84     		strh	r2, [r3, #34]	@ movhi
 883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDat
 1119              		.loc 1 883 0
 1120 0034 FB68     		ldr	r3, [r7, #12]
 1121 0036 9969     		ldr	r1, [r3, #24]
 1122 0038 7B68     		ldr	r3, [r7, #4]
 1123 003a 9A69     		ldr	r2, [r3, #24]
 1124 003c 7B68     		ldr	r3, [r7, #4]
 1125 003e DB69     		ldr	r3, [r3, #28]
 1126 0040 0846     		mov	r0, r1
 1127 0042 1146     		mov	r1, r2
 1128 0044 1A46     		mov	r2, r3
 1129 0046 FFF7FEFF 		bl	memcpy
 1130              	.L74:
 884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return pxNewBuffer;
 1131              		.loc 1 886 0
 1132 004a FB68     		ldr	r3, [r7, #12]
 887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1133              		.loc 1 887 0
 1134 004c 1846     		mov	r0, r3
 1135 004e 1037     		adds	r7, r7, #16
 1136              	.LCFI57:
ARM GAS  /tmp/cc946aYs.s 			page 36


 1137              		.cfi_def_cfa_offset 8
 1138 0050 BD46     		mov	sp, r7
 1139              	.LCFI58:
 1140              		.cfi_def_cfa_register 13
 1141              		@ sp needed
 1142 0052 80BD     		pop	{r7, pc}
 1143              		.cfi_endproc
 1144              	.LFE40:
 1146              		.section	.text.pxPacketBuffer_to_NetworkBuffer,"ax",%progbits
 1147              		.align	2
 1148              		.global	pxPacketBuffer_to_NetworkBuffer
 1149              		.thumb
 1150              		.thumb_func
 1152              	pxPacketBuffer_to_NetworkBuffer:
 1153              	.LFB41:
 888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 ) || ( ipconfigZERO_COPY_RX_DRIVER != 0 )
 891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxPacketBuffer_to_NetworkBuffer( void *pvBuffer )
 893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1154              		.loc 1 893 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 16
 1157              		@ frame_needed = 1, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
 1159 0000 80B4     		push	{r7}
 1160              	.LCFI59:
 1161              		.cfi_def_cfa_offset 4
 1162              		.cfi_offset 7, -4
 1163 0002 85B0     		sub	sp, sp, #20
 1164              	.LCFI60:
 1165              		.cfi_def_cfa_offset 24
 1166 0004 00AF     		add	r7, sp, #0
 1167              	.LCFI61:
 1168              		.cfi_def_cfa_register 7
 1169 0006 7860     		str	r0, [r7, #4]
 894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *pucBuffer;
 895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxResult;
 896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pvBuffer == NULL )
 1170              		.loc 1 897 0
 1171 0008 7B68     		ldr	r3, [r7, #4]
 1172 000a 002B     		cmp	r3, #0
 1173 000c 02D1     		bne	.L77
 898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = NULL;
 1174              		.loc 1 899 0
 1175 000e 0023     		movs	r3, #0
 1176 0010 FB60     		str	r3, [r7, #12]
 1177 0012 0FE0     		b	.L78
 1178              	.L77:
 900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Obtain the network buffer from the zero copy pointer. */
 904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucBuffer = ( uint8_t * ) pvBuffer;
ARM GAS  /tmp/cc946aYs.s 			page 37


 1179              		.loc 1 904 0
 1180 0014 7B68     		ldr	r3, [r7, #4]
 1181 0016 BB60     		str	r3, [r7, #8]
 905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The input here is a pointer to a payload buffer.  Subtract the
 907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			size of the header in the network buffer, usually 8 + 2 bytes. */
 908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucBuffer -= ipBUFFER_PADDING;
 1182              		.loc 1 908 0
 1183 0018 BB68     		ldr	r3, [r7, #8]
 1184 001a 0A3B     		subs	r3, r3, #10
 1185 001c BB60     		str	r3, [r7, #8]
 909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Here a pointer was placed to the network descriptor.  As a
 911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pointer is dereferenced, make sure it is well aligned. */
 912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - ( size_t ) 1 ) ) == ( uint32_t ) 0 )
 1186              		.loc 1 912 0
 1187 001e BB68     		ldr	r3, [r7, #8]
 1188 0020 03F00303 		and	r3, r3, #3
 1189 0024 002B     		cmp	r3, #0
 1190 0026 03D1     		bne	.L79
 913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 1191              		.loc 1 914 0
 1192 0028 BB68     		ldr	r3, [r7, #8]
 1193 002a 1B68     		ldr	r3, [r3]
 1194 002c FB60     		str	r3, [r7, #12]
 1195 002e 01E0     		b	.L78
 1196              	.L79:
 915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
 917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
 918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxResult = NULL;
 1197              		.loc 1 918 0
 1198 0030 0023     		movs	r3, #0
 1199 0032 FB60     		str	r3, [r7, #12]
 1200              	.L78:
 919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
 920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return pxResult;
 1201              		.loc 1 922 0
 1202 0034 FB68     		ldr	r3, [r7, #12]
 923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1203              		.loc 1 923 0
 1204 0036 1846     		mov	r0, r3
 1205 0038 1437     		adds	r7, r7, #20
 1206              	.LCFI62:
 1207              		.cfi_def_cfa_offset 4
 1208 003a BD46     		mov	sp, r7
 1209              	.LCFI63:
 1210              		.cfi_def_cfa_register 13
 1211              		@ sp needed
 1212 003c 5DF8047B 		ldr	r7, [sp], #4
 1213              	.LCFI64:
 1214              		.cfi_restore 7
 1215              		.cfi_def_cfa_offset 0
 1216 0040 7047     		bx	lr
ARM GAS  /tmp/cc946aYs.s 			page 38


 1217              		.cfi_endproc
 1218              	.LFE41:
 1220 0042 00BF     		.section	.text.pxUDPPayloadBuffer_to_NetworkBuffer,"ax",%progbits
 1221              		.align	2
 1222              		.global	pxUDPPayloadBuffer_to_NetworkBuffer
 1223              		.thumb
 1224              		.thumb_func
 1226              	pxUDPPayloadBuffer_to_NetworkBuffer:
 1227              	.LFB42:
 924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
 926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
 929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1228              		.loc 1 929 0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 16
 1231              		@ frame_needed = 1, uses_anonymous_args = 0
 1232              		@ link register save eliminated.
 1233 0000 80B4     		push	{r7}
 1234              	.LCFI65:
 1235              		.cfi_def_cfa_offset 4
 1236              		.cfi_offset 7, -4
 1237 0002 85B0     		sub	sp, sp, #20
 1238              	.LCFI66:
 1239              		.cfi_def_cfa_offset 24
 1240 0004 00AF     		add	r7, sp, #0
 1241              	.LCFI67:
 1242              		.cfi_def_cfa_register 7
 1243 0006 7860     		str	r0, [r7, #4]
 930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t *pucBuffer;
 931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** NetworkBufferDescriptor_t *pxResult;
 932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pvBuffer == NULL )
 1244              		.loc 1 933 0
 1245 0008 7B68     		ldr	r3, [r7, #4]
 1246 000a 002B     		cmp	r3, #0
 1247 000c 02D1     		bne	.L82
 934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxResult = NULL;
 1248              		.loc 1 935 0
 1249 000e 0023     		movs	r3, #0
 1250 0010 FB60     		str	r3, [r7, #12]
 1251 0012 0FE0     		b	.L83
 1252              	.L82:
 936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
 938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Obtain the network buffer from the zero copy pointer. */
 940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucBuffer = ( uint8_t * ) pvBuffer;
 1253              		.loc 1 940 0
 1254 0014 7B68     		ldr	r3, [r7, #4]
 1255 0016 BB60     		str	r3, [r7, #8]
 941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The input here is a pointer to a payload buffer.  Subtract
 943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the total size of a UDP/IP header plus the size of the header in
ARM GAS  /tmp/cc946aYs.s 			page 39


 944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the network buffer, usually 8 + 2 bytes. */
 945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );
 1256              		.loc 1 945 0
 1257 0018 BB68     		ldr	r3, [r7, #8]
 1258 001a 343B     		subs	r3, r3, #52
 1259 001c BB60     		str	r3, [r7, #8]
 946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Here a pointer was placed to the network descriptor,
 948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		As a pointer is dereferenced, make sure it is well aligned */
 949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 1260              		.loc 1 949 0
 1261 001e BB68     		ldr	r3, [r7, #8]
 1262 0020 03F00303 		and	r3, r3, #3
 1263 0024 002B     		cmp	r3, #0
 1264 0026 03D1     		bne	.L84
 950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The following statement may trigger a:
 952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			warning: cast increases required alignment of target type [-Wcast-align].
 953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			It has been confirmed though that the alignment is suitable. */
 954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 1265              		.loc 1 954 0
 1266 0028 BB68     		ldr	r3, [r7, #8]
 1267 002a 1B68     		ldr	r3, [r3]
 1268 002c FB60     		str	r3, [r7, #12]
 1269 002e 01E0     		b	.L83
 1270              	.L84:
 955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
 957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxResult = NULL;
 1271              		.loc 1 958 0
 1272 0030 0023     		movs	r3, #0
 1273 0032 FB60     		str	r3, [r7, #12]
 1274              	.L83:
 959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
 960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return pxResult;
 1275              		.loc 1 962 0
 1276 0034 FB68     		ldr	r3, [r7, #12]
 963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1277              		.loc 1 963 0
 1278 0036 1846     		mov	r0, r3
 1279 0038 1437     		adds	r7, r7, #20
 1280              	.LCFI68:
 1281              		.cfi_def_cfa_offset 4
 1282 003a BD46     		mov	sp, r7
 1283              	.LCFI69:
 1284              		.cfi_def_cfa_register 13
 1285              		@ sp needed
 1286 003c 5DF8047B 		ldr	r7, [sp], #4
 1287              	.LCFI70:
 1288              		.cfi_restore 7
 1289              		.cfi_def_cfa_offset 0
 1290 0040 7047     		bx	lr
 1291              		.cfi_endproc
 1292              	.LFE42:
ARM GAS  /tmp/cc946aYs.s 			page 40


 1294 0042 00BF     		.section	.text.FreeRTOS_ReleaseUDPPayloadBuffer,"ax",%progbits
 1295              		.align	2
 1296              		.global	FreeRTOS_ReleaseUDPPayloadBuffer
 1297              		.thumb
 1298              		.thumb_func
 1300              	FreeRTOS_ReleaseUDPPayloadBuffer:
 1301              	.LFB43:
 964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
 967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1302              		.loc 1 967 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 8
 1305              		@ frame_needed = 1, uses_anonymous_args = 0
 1306 0000 80B5     		push	{r7, lr}
 1307              	.LCFI71:
 1308              		.cfi_def_cfa_offset 8
 1309              		.cfi_offset 7, -8
 1310              		.cfi_offset 14, -4
 1311 0002 82B0     		sub	sp, sp, #8
 1312              	.LCFI72:
 1313              		.cfi_def_cfa_offset 16
 1314 0004 00AF     		add	r7, sp, #0
 1315              	.LCFI73:
 1316              		.cfi_def_cfa_register 7
 1317 0006 7860     		str	r0, [r7, #4]
 968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 1318              		.loc 1 968 0
 1319 0008 7868     		ldr	r0, [r7, #4]
 1320 000a FFF7FEFF 		bl	pxUDPPayloadBuffer_to_NetworkBuffer
 1321 000e 0346     		mov	r3, r0
 1322 0010 1846     		mov	r0, r3
 1323 0012 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1324              		.loc 1 969 0
 1325 0016 0837     		adds	r7, r7, #8
 1326              	.LCFI74:
 1327              		.cfi_def_cfa_offset 8
 1328 0018 BD46     		mov	sp, r7
 1329              	.LCFI75:
 1330              		.cfi_def_cfa_register 13
 1331              		@ sp needed
 1332 001a 80BD     		pop	{r7, pc}
 1333              		.cfi_endproc
 1334              	.LFE43:
 1336              		.section	.rodata
 1337              		.align	2
 1338              	.LC0:
 1339 0000 4E657445 		.ascii	"NetEvnt\000"
 1339      766E7400 
 1340              		.align	2
 1341              	.LC1:
 1342 0008 49502D74 		.ascii	"IP-task\000"
 1342      61736B00 
 1343              		.section	.text.FreeRTOS_IPInit,"ax",%progbits
 1344              		.align	2
ARM GAS  /tmp/cc946aYs.s 			page 41


 1345              		.global	FreeRTOS_IPInit
 1346              		.thumb
 1347              		.thumb_func
 1349              	FreeRTOS_IPInit:
 1350              	.LFB44:
 970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
 971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't 
 973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was 
 974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  As that bug has been repaired, there is not an urgent reason to warn.
 975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c ****  It is better though to use the advised priority scheme. */
 976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t u
 977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1351              		.loc 1 977 0
 1352              		.cfi_startproc
 1353              		@ args = 4, pretend = 0, frame = 40
 1354              		@ frame_needed = 1, uses_anonymous_args = 0
 1355 0000 80B5     		push	{r7, lr}
 1356              	.LCFI76:
 1357              		.cfi_def_cfa_offset 8
 1358              		.cfi_offset 7, -8
 1359              		.cfi_offset 14, -4
 1360 0002 8CB0     		sub	sp, sp, #48
 1361              	.LCFI77:
 1362              		.cfi_def_cfa_offset 56
 1363 0004 02AF     		add	r7, sp, #8
 1364              	.LCFI78:
 1365              		.cfi_def_cfa 7, 48
 1366 0006 F860     		str	r0, [r7, #12]
 1367 0008 B960     		str	r1, [r7, #8]
 1368 000a 7A60     		str	r2, [r7, #4]
 1369 000c 3B60     		str	r3, [r7]
 978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn = pdFALSE;
 1370              		.loc 1 978 0
 1371 000e 0023     		movs	r3, #0
 1372 0010 7B62     		str	r3, [r7, #36]
 979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* This function should only be called once. */
 981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 1373              		.loc 1 981 0
 1374 0012 FFF7FEFF 		bl	xIPIsNetworkTaskReady
 1375 0016 0346     		mov	r3, r0
 1376 0018 002B     		cmp	r3, #0
 1377 001a 09D0     		beq	.L88
 1378              	.LBB16:
 1379              	.LBB17:
 1380              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
ARM GAS  /tmp/cc946aYs.s 			page 42


  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
ARM GAS  /tmp/cc946aYs.s 			page 43


  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
ARM GAS  /tmp/cc946aYs.s 			page 44


 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
ARM GAS  /tmp/cc946aYs.s 			page 45


 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1381              		.loc 2 237 0 discriminator 1
ARM GAS  /tmp/cc946aYs.s 			page 46


 1382              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1383 001c 4FF05003 			mov r3, #80												
 1384 0020 83F31188 		msr basepri, r3											
 1385 0024 BFF36F8F 		isb														
 1386 0028 BFF34F8F 		dsb														
 1387              	
 1388              	@ 0 "" 2
 1389              		.thumb
 1390 002c 3B62     		str	r3, [r7, #32]
 1391              	.L89:
 1392              	.LBE17:
 1393              	.LBE16:
 1394              		.loc 1 981 0 discriminator 1
 1395 002e FEE7     		b	.L89
 1396              	.L88:
 982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue == NULL );
 1397              		.loc 1 982 0
 1398 0030 6B4B     		ldr	r3, .L102
 1399 0032 1B68     		ldr	r3, [r3]
 1400 0034 002B     		cmp	r3, #0
 1401 0036 09D0     		beq	.L90
 1402              	.LBB18:
 1403              	.LBB19:
 1404              		.loc 2 237 0 discriminator 1
 1405              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1406 0038 4FF05003 			mov r3, #80												
 1407 003c 83F31188 		msr basepri, r3											
 1408 0040 BFF36F8F 		isb														
 1409 0044 BFF34F8F 		dsb														
 1410              	
 1411              	@ 0 "" 2
 1412              		.thumb
 1413 0048 FB61     		str	r3, [r7, #28]
 1414              	.L91:
 1415              	.LBE19:
 1416              	.LBE18:
 1417              		.loc 1 982 0 discriminator 2
 1418 004a FEE7     		b	.L91
 1419              	.L90:
 983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xIPTaskHandle == NULL );
 1420              		.loc 1 983 0
 1421 004c 654B     		ldr	r3, .L102+4
 1422 004e 1B68     		ldr	r3, [r3]
 1423 0050 002B     		cmp	r3, #0
 1424 0052 09D0     		beq	.L92
 1425              	.LBB20:
 1426              	.LBB21:
 1427              		.loc 2 237 0 discriminator 1
 1428              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1429 0054 4FF05003 			mov r3, #80												
 1430 0058 83F31188 		msr basepri, r3											
 1431 005c BFF36F8F 		isb														
 1432 0060 BFF34F8F 		dsb														
 1433              	
 1434              	@ 0 "" 2
 1435              		.thumb
 1436 0064 BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/cc946aYs.s 			page 47


 1437              	.L93:
 1438              	.LBE21:
 1439              	.LBE20:
 1440              		.loc 1 983 0 discriminator 3
 1441 0066 FEE7     		b	.L93
 1442              	.L92:
 984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Check structure packing is correct. */
 986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( EthernetHeader_t ) == ipEXPECTED_EthernetHeader_t_SIZE );
 987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( ARPHeader_t ) == ipEXPECTED_ARPHeader_t_SIZE );
 988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
 989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
 990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
 991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Attempt to create the queue used to communicate with the IP task. */
 993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) siz
 1443              		.loc 1 993 0
 1444 0068 2420     		movs	r0, #36
 1445 006a 0821     		movs	r1, #8
 1446 006c 0022     		movs	r2, #0
 1447 006e FFF7FEFF 		bl	xQueueGenericCreate
 1448 0072 0246     		mov	r2, r0
 1449 0074 5A4B     		ldr	r3, .L102
 1450 0076 1A60     		str	r2, [r3]
 994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( xNetworkEventQueue );
 1451              		.loc 1 994 0
 1452 0078 594B     		ldr	r3, .L102
 1453 007a 1B68     		ldr	r3, [r3]
 1454 007c 002B     		cmp	r3, #0
 1455 007e 09D1     		bne	.L94
 1456              	.LBB22:
 1457              	.LBB23:
 1458              		.loc 2 237 0 discriminator 1
 1459              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1460 0080 4FF05003 			mov r3, #80												
 1461 0084 83F31188 		msr basepri, r3											
 1462 0088 BFF36F8F 		isb														
 1463 008c BFF34F8F 		dsb														
 1464              	
 1465              	@ 0 "" 2
 1466              		.thumb
 1467 0090 7B61     		str	r3, [r7, #20]
 1468              	.L95:
 1469              	.LBE23:
 1470              	.LBE22:
 1471              		.loc 1 994 0 discriminator 9
 1472 0092 FEE7     		b	.L95
 1473              	.L94:
 995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xNetworkEventQueue != NULL )
 1474              		.loc 1 996 0
 1475 0094 524B     		ldr	r3, .L102
 1476 0096 1B68     		ldr	r3, [r3]
 1477 0098 002B     		cmp	r3, #0
 1478 009a 00F09C80 		beq	.L96
 997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if ( configQUEUE_REGISTRY_SIZE > 0 )
ARM GAS  /tmp/cc946aYs.s 			page 48


 999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* A queue registry is normally used to assist a kernel aware
1001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			debugger.  If one is in use then it will be helpful for the debugger
1002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			to show information about the network event queue. */
1003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 1479              		.loc 1 1003 0
 1480 009e 504B     		ldr	r3, .L102
 1481 00a0 1B68     		ldr	r3, [r3]
 1482 00a2 1846     		mov	r0, r3
 1483 00a4 5049     		ldr	r1, .L102+8
 1484 00a6 FFF7FEFF 		bl	vQueueAddToRegistry
1004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* configQUEUE_REGISTRY_SIZE */
1006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xNetworkBuffersInitialise() == pdPASS )
 1485              		.loc 1 1007 0
 1486 00aa FFF7FEFF 		bl	xNetworkBuffersInitialise
 1487 00ae 0346     		mov	r3, r0
 1488 00b0 012B     		cmp	r3, #1
 1489 00b2 40F08880 		bne	.L97
1008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Store the local IP and MAC address. */
1010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[
 1490              		.loc 1 1010 0
 1491 00b6 FB68     		ldr	r3, [r7, #12]
 1492 00b8 0333     		adds	r3, r3, #3
 1493 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1494 00bc 1A06     		lsls	r2, r3, #24
 1495 00be FB68     		ldr	r3, [r7, #12]
 1496 00c0 0233     		adds	r3, r3, #2
 1497 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1498 00c4 1B04     		lsls	r3, r3, #16
 1499 00c6 1A43     		orrs	r2, r2, r3
 1500 00c8 FB68     		ldr	r3, [r7, #12]
 1501 00ca 0133     		adds	r3, r3, #1
 1502 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1503 00ce 1B02     		lsls	r3, r3, #8
 1504 00d0 1343     		orrs	r3, r3, r2
 1505 00d2 FA68     		ldr	r2, [r7, #12]
 1506 00d4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1507 00d6 1343     		orrs	r3, r3, r2
 1508 00d8 444A     		ldr	r2, .L102+12
 1509 00da 1360     		str	r3, [r2]
1011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMa
 1510              		.loc 1 1011 0
 1511 00dc BB68     		ldr	r3, [r7, #8]
 1512 00de 0333     		adds	r3, r3, #3
 1513 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1514 00e2 1A06     		lsls	r2, r3, #24
 1515 00e4 BB68     		ldr	r3, [r7, #8]
 1516 00e6 0233     		adds	r3, r3, #2
 1517 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1518 00ea 1B04     		lsls	r3, r3, #16
 1519 00ec 1A43     		orrs	r2, r2, r3
 1520 00ee BB68     		ldr	r3, [r7, #8]
 1521 00f0 0133     		adds	r3, r3, #1
 1522 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc946aYs.s 			page 49


 1523 00f4 1B02     		lsls	r3, r3, #8
 1524 00f6 1343     		orrs	r3, r3, r2
 1525 00f8 BA68     		ldr	r2, [r7, #8]
 1526 00fa 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1527 00fc 1343     		orrs	r3, r3, r2
 1528 00fe 3B4A     		ldr	r2, .L102+12
 1529 0100 5360     		str	r3, [r2, #4]
1012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGateway
 1530              		.loc 1 1012 0
 1531 0102 7B68     		ldr	r3, [r7, #4]
 1532 0104 0333     		adds	r3, r3, #3
 1533 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1534 0108 1A06     		lsls	r2, r3, #24
 1535 010a 7B68     		ldr	r3, [r7, #4]
 1536 010c 0233     		adds	r3, r3, #2
 1537 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1538 0110 1B04     		lsls	r3, r3, #16
 1539 0112 1A43     		orrs	r2, r2, r3
 1540 0114 7B68     		ldr	r3, [r7, #4]
 1541 0116 0133     		adds	r3, r3, #1
 1542 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1543 011a 1B02     		lsls	r3, r3, #8
 1544 011c 1343     		orrs	r3, r3, r2
 1545 011e 7A68     		ldr	r2, [r7, #4]
 1546 0120 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1547 0122 1343     		orrs	r3, r3, r2
 1548 0124 314A     		ldr	r2, .L102+12
 1549 0126 9360     		str	r3, [r2, #8]
1013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNS
 1550              		.loc 1 1013 0
 1551 0128 3B68     		ldr	r3, [r7]
 1552 012a 0333     		adds	r3, r3, #3
 1553 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1554 012e 1A06     		lsls	r2, r3, #24
 1555 0130 3B68     		ldr	r3, [r7]
 1556 0132 0233     		adds	r3, r3, #2
 1557 0134 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1558 0136 1B04     		lsls	r3, r3, #16
 1559 0138 1A43     		orrs	r2, r2, r3
 1560 013a 3B68     		ldr	r3, [r7]
 1561 013c 0133     		adds	r3, r3, #1
 1562 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1563 0140 1B02     		lsls	r3, r3, #8
 1564 0142 1343     		orrs	r3, r3, r2
 1565 0144 3A68     		ldr	r2, [r7]
 1566 0146 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1567 0148 1343     		orrs	r3, r3, r2
 1568 014a 284A     		ldr	r2, .L102+12
 1569 014c D360     		str	r3, [r2, #12]
1014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddres
 1570              		.loc 1 1014 0
 1571 014e 274B     		ldr	r3, .L102+12
 1572 0150 1A68     		ldr	r2, [r3]
 1573 0152 264B     		ldr	r3, .L102+12
 1574 0154 5B68     		ldr	r3, [r3, #4]
 1575 0156 1A40     		ands	r2, r2, r3
 1576 0158 244B     		ldr	r3, .L102+12
ARM GAS  /tmp/cc946aYs.s 			page 50


 1577 015a 5B68     		ldr	r3, [r3, #4]
 1578 015c DB43     		mvns	r3, r3
 1579 015e 1343     		orrs	r3, r3, r2
 1580 0160 224A     		ldr	r2, .L102+12
 1581 0162 1361     		str	r3, [r2, #16]
1015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 1582              		.loc 1 1016 0
 1583 0164 2248     		ldr	r0, .L102+16
 1584 0166 2149     		ldr	r1, .L102+12
 1585 0168 1422     		movs	r2, #20
 1586 016a FFF7FEFF 		bl	memcpy
1017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if ipconfigUSE_DHCP == 1
1019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The IP address is not set until DHCP completes. */
1021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
1022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#else
1024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The IP address is set from the value passed in. */
1026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 1587              		.loc 1 1026 0
 1588 016e 1F4B     		ldr	r3, .L102+12
 1589 0170 1B68     		ldr	r3, [r3]
 1590 0172 204A     		ldr	r2, .L102+20
 1591 0174 5361     		str	r3, [r2, #20]
1027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Added to prevent ARP flood to gateway.  Ensure the
1029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				gateway is on the same subnet as the IP	address. */
1030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkA
 1592              		.loc 1 1030 0
 1593 0176 1F4B     		ldr	r3, .L102+20
 1594 0178 5A69     		ldr	r2, [r3, #20]
 1595 017a 1C4B     		ldr	r3, .L102+12
 1596 017c 9B68     		ldr	r3, [r3, #8]
 1597 017e 5A40     		eors	r2, r2, r3
 1598 0180 1A4B     		ldr	r3, .L102+12
 1599 0182 5B68     		ldr	r3, [r3, #4]
 1600 0184 1340     		ands	r3, r3, r2
 1601 0186 002B     		cmp	r3, #0
 1602 0188 09D0     		beq	.L98
 1603              	.LBB24:
 1604              	.LBB25:
 1605              		.loc 2 237 0 discriminator 1
 1606              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1607 018a 4FF05003 			mov r3, #80												
 1608 018e 83F31188 		msr basepri, r3											
 1609 0192 BFF36F8F 		isb														
 1610 0196 BFF34F8F 		dsb														
 1611              	
 1612              	@ 0 "" 2
 1613              		.thumb
 1614 019a 3B61     		str	r3, [r7, #16]
 1615              	.L99:
 1616              	.LBE25:
 1617              	.LBE24:
ARM GAS  /tmp/cc946aYs.s 			page 51


 1618              		.loc 1 1030 0 discriminator 10
 1619 019c FEE7     		b	.L99
 1620              	.L98:
1031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif /* ipconfigUSE_DHCP == 1 */
1033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The MAC address is stored in the start of the default packet
1035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			header fragment, which is used when sending UDP packets. */
1036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH
 1621              		.loc 1 1036 0
 1622 019e 1548     		ldr	r0, .L102+20
 1623 01a0 396B     		ldr	r1, [r7, #48]
 1624 01a2 0622     		movs	r2, #6
 1625 01a4 FFF7FEFF 		bl	memcpy
1037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Prepare the sockets interface. */
1039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vNetworkSocketsInit();
 1626              		.loc 1 1039 0
 1627 01a8 FFF7FEFF 		bl	vNetworkSocketsInit
1040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Create the task that processes Ethernet and stack events. */
1042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t ) ipconfigIP_TASK_STACK_SIZE_WORDS, NULL
 1628              		.loc 1 1042 0
 1629 01ac 0523     		movs	r3, #5
 1630 01ae 0093     		str	r3, [sp]
 1631 01b0 0C4B     		ldr	r3, .L102+4
 1632 01b2 0193     		str	r3, [sp, #4]
 1633 01b4 1048     		ldr	r0, .L102+24
 1634 01b6 1149     		ldr	r1, .L102+28
 1635 01b8 4FF42072 		mov	r2, #640
 1636 01bc 0023     		movs	r3, #0
 1637 01be FFF7FEFF 		bl	xTaskCreate
 1638 01c2 7862     		str	r0, [r7, #36]
 1639 01c4 07E0     		b	.L96
 1640              	.L97:
1043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );
1047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Clean up. */
1049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vQueueDelete( xNetworkEventQueue );
 1641              		.loc 1 1049 0
 1642 01c6 064B     		ldr	r3, .L102
 1643 01c8 1B68     		ldr	r3, [r3]
 1644 01ca 1846     		mov	r0, r3
 1645 01cc FFF7FEFF 		bl	vQueueDelete
1050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xNetworkEventQueue = NULL;
 1646              		.loc 1 1050 0
 1647 01d0 034B     		ldr	r3, .L102
 1648 01d2 0022     		movs	r2, #0
 1649 01d4 1A60     		str	r2, [r3]
 1650              	.L96:
1051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
ARM GAS  /tmp/cc946aYs.s 			page 52


1055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
1056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 1651              		.loc 1 1058 0
 1652 01d6 7B6A     		ldr	r3, [r7, #36]
1059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1653              		.loc 1 1059 0
 1654 01d8 1846     		mov	r0, r3
 1655 01da 2837     		adds	r7, r7, #40
 1656              	.LCFI79:
 1657              		.cfi_def_cfa_offset 8
 1658 01dc BD46     		mov	sp, r7
 1659              	.LCFI80:
 1660              		.cfi_def_cfa_register 13
 1661              		@ sp needed
 1662 01de 80BD     		pop	{r7, pc}
 1663              	.L103:
 1664              		.align	2
 1665              	.L102:
 1666 01e0 00000000 		.word	xNetworkEventQueue
 1667 01e4 00000000 		.word	xIPTaskHandle
 1668 01e8 00000000 		.word	.LC0
 1669 01ec 00000000 		.word	xNetworkAddressing
 1670 01f0 00000000 		.word	xDefaultAddressing
 1671 01f4 00000000 		.word	xDefaultPartUDPPacketHeader
 1672 01f8 00000000 		.word	prvIPTask
 1673 01fc 08000000 		.word	.LC1
 1674              		.cfi_endproc
 1675              	.LFE44:
 1677              		.section	.text.FreeRTOS_GetAddressConfiguration,"ax",%progbits
 1678              		.align	2
 1679              		.global	FreeRTOS_GetAddressConfiguration
 1680              		.thumb
 1681              		.thumb_func
 1683              	FreeRTOS_GetAddressConfiguration:
 1684              	.LFB45:
1060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_GetAddressConfiguration( uint32_t *pulIPAddress, uint32_t *pulNetMask, uint32_t *pulG
1063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1685              		.loc 1 1063 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 16
 1688              		@ frame_needed = 1, uses_anonymous_args = 0
 1689              		@ link register save eliminated.
 1690 0000 80B4     		push	{r7}
 1691              	.LCFI81:
 1692              		.cfi_def_cfa_offset 4
 1693              		.cfi_offset 7, -4
 1694 0002 85B0     		sub	sp, sp, #20
 1695              	.LCFI82:
 1696              		.cfi_def_cfa_offset 24
 1697 0004 00AF     		add	r7, sp, #0
 1698              	.LCFI83:
 1699              		.cfi_def_cfa_register 7
 1700 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/cc946aYs.s 			page 53


 1701 0008 B960     		str	r1, [r7, #8]
 1702 000a 7A60     		str	r2, [r7, #4]
 1703 000c 3B60     		str	r3, [r7]
1064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Return the address configuration to the caller. */
1065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulIPAddress != NULL )
 1704              		.loc 1 1066 0
 1705 000e FB68     		ldr	r3, [r7, #12]
 1706 0010 002B     		cmp	r3, #0
 1707 0012 03D0     		beq	.L105
1067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 1708              		.loc 1 1068 0
 1709 0014 0E4B     		ldr	r3, .L109
 1710 0016 5A69     		ldr	r2, [r3, #20]
 1711 0018 FB68     		ldr	r3, [r7, #12]
 1712 001a 1A60     		str	r2, [r3]
 1713              	.L105:
1069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulNetMask != NULL )
 1714              		.loc 1 1071 0
 1715 001c BB68     		ldr	r3, [r7, #8]
 1716 001e 002B     		cmp	r3, #0
 1717 0020 03D0     		beq	.L106
1072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulNetMask = xNetworkAddressing.ulNetMask;
 1718              		.loc 1 1073 0
 1719 0022 0C4B     		ldr	r3, .L109+4
 1720 0024 5A68     		ldr	r2, [r3, #4]
 1721 0026 BB68     		ldr	r3, [r7, #8]
 1722 0028 1A60     		str	r2, [r3]
 1723              	.L106:
1074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulGatewayAddress != NULL )
 1724              		.loc 1 1076 0
 1725 002a 7B68     		ldr	r3, [r7, #4]
 1726 002c 002B     		cmp	r3, #0
 1727 002e 03D0     		beq	.L107
1077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
 1728              		.loc 1 1078 0
 1729 0030 084B     		ldr	r3, .L109+4
 1730 0032 9A68     		ldr	r2, [r3, #8]
 1731 0034 7B68     		ldr	r3, [r7, #4]
 1732 0036 1A60     		str	r2, [r3]
 1733              	.L107:
1079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulDNSServerAddress != NULL )
 1734              		.loc 1 1081 0
 1735 0038 3B68     		ldr	r3, [r7]
 1736 003a 002B     		cmp	r3, #0
 1737 003c 03D0     		beq	.L104
1082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
ARM GAS  /tmp/cc946aYs.s 			page 54


 1738              		.loc 1 1083 0
 1739 003e 054B     		ldr	r3, .L109+4
 1740 0040 DA68     		ldr	r2, [r3, #12]
 1741 0042 3B68     		ldr	r3, [r7]
 1742 0044 1A60     		str	r2, [r3]
 1743              	.L104:
1084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1744              		.loc 1 1085 0
 1745 0046 1437     		adds	r7, r7, #20
 1746              	.LCFI84:
 1747              		.cfi_def_cfa_offset 4
 1748 0048 BD46     		mov	sp, r7
 1749              	.LCFI85:
 1750              		.cfi_def_cfa_register 13
 1751              		@ sp needed
 1752 004a 5DF8047B 		ldr	r7, [sp], #4
 1753              	.LCFI86:
 1754              		.cfi_restore 7
 1755              		.cfi_def_cfa_offset 0
 1756 004e 7047     		bx	lr
 1757              	.L110:
 1758              		.align	2
 1759              	.L109:
 1760 0050 00000000 		.word	xDefaultPartUDPPacketHeader
 1761 0054 00000000 		.word	xNetworkAddressing
 1762              		.cfi_endproc
 1763              	.LFE45:
 1765              		.section	.text.FreeRTOS_SetAddressConfiguration,"ax",%progbits
 1766              		.align	2
 1767              		.global	FreeRTOS_SetAddressConfiguration
 1768              		.thumb
 1769              		.thumb_func
 1771              	FreeRTOS_SetAddressConfiguration:
 1772              	.LFB46:
1086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetAddressConfiguration( const uint32_t *pulIPAddress, const uint32_t *pulNetMask, co
1089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 1773              		.loc 1 1089 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 16
 1776              		@ frame_needed = 1, uses_anonymous_args = 0
 1777              		@ link register save eliminated.
 1778 0000 80B4     		push	{r7}
 1779              	.LCFI87:
 1780              		.cfi_def_cfa_offset 4
 1781              		.cfi_offset 7, -4
 1782 0002 85B0     		sub	sp, sp, #20
 1783              	.LCFI88:
 1784              		.cfi_def_cfa_offset 24
 1785 0004 00AF     		add	r7, sp, #0
 1786              	.LCFI89:
 1787              		.cfi_def_cfa_register 7
 1788 0006 F860     		str	r0, [r7, #12]
 1789 0008 B960     		str	r1, [r7, #8]
 1790 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/cc946aYs.s 			page 55


 1791 000c 3B60     		str	r3, [r7]
1090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Update the address configuration. */
1091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulIPAddress != NULL )
 1792              		.loc 1 1092 0
 1793 000e FB68     		ldr	r3, [r7, #12]
 1794 0010 002B     		cmp	r3, #0
 1795 0012 03D0     		beq	.L112
1093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*ipLOCAL_IP_ADDRESS_POINTER = *pulIPAddress;
 1796              		.loc 1 1094 0
 1797 0014 FB68     		ldr	r3, [r7, #12]
 1798 0016 1B68     		ldr	r3, [r3]
 1799 0018 0D4A     		ldr	r2, .L116
 1800 001a 5361     		str	r3, [r2, #20]
 1801              	.L112:
1095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulNetMask != NULL )
 1802              		.loc 1 1097 0
 1803 001c BB68     		ldr	r3, [r7, #8]
 1804 001e 002B     		cmp	r3, #0
 1805 0020 03D0     		beq	.L113
1098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulNetMask = *pulNetMask;
 1806              		.loc 1 1099 0
 1807 0022 BB68     		ldr	r3, [r7, #8]
 1808 0024 1B68     		ldr	r3, [r3]
 1809 0026 0B4A     		ldr	r2, .L116+4
 1810 0028 5360     		str	r3, [r2, #4]
 1811              	.L113:
1100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulGatewayAddress != NULL )
 1812              		.loc 1 1102 0
 1813 002a 7B68     		ldr	r3, [r7, #4]
 1814 002c 002B     		cmp	r3, #0
 1815 002e 03D0     		beq	.L114
1103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulGatewayAddress = *pulGatewayAddress;
 1816              		.loc 1 1104 0
 1817 0030 7B68     		ldr	r3, [r7, #4]
 1818 0032 1B68     		ldr	r3, [r3]
 1819 0034 074A     		ldr	r2, .L116+4
 1820 0036 9360     		str	r3, [r2, #8]
 1821              	.L114:
1105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pulDNSServerAddress != NULL )
 1822              		.loc 1 1107 0
 1823 0038 3B68     		ldr	r3, [r7]
 1824 003a 002B     		cmp	r3, #0
 1825 003c 03D0     		beq	.L111
1108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkAddressing.ulDNSServerAddress = *pulDNSServerAddress;
 1826              		.loc 1 1109 0
 1827 003e 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc946aYs.s 			page 56


 1828 0040 1B68     		ldr	r3, [r3]
 1829 0042 044A     		ldr	r2, .L116+4
 1830 0044 D360     		str	r3, [r2, #12]
 1831              	.L111:
1110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 1832              		.loc 1 1111 0
 1833 0046 1437     		adds	r7, r7, #20
 1834              	.LCFI90:
 1835              		.cfi_def_cfa_offset 4
 1836 0048 BD46     		mov	sp, r7
 1837              	.LCFI91:
 1838              		.cfi_def_cfa_register 13
 1839              		@ sp needed
 1840 004a 5DF8047B 		ldr	r7, [sp], #4
 1841              	.LCFI92:
 1842              		.cfi_restore 7
 1843              		.cfi_def_cfa_offset 0
 1844 004e 7047     		bx	lr
 1845              	.L117:
 1846              		.align	2
 1847              	.L116:
 1848 0050 00000000 		.word	xDefaultPartUDPPacketHeader
 1849 0054 00000000 		.word	xNetworkAddressing
 1850              		.cfi_endproc
 1851              	.LFE46:
 1853              		.section	.text.FreeRTOS_SendPingRequest,"ax",%progbits
 1854              		.align	2
 1855              		.global	FreeRTOS_SendPingRequest
 1856              		.thumb
 1857              		.thumb_func
 1859              	FreeRTOS_SendPingRequest:
 1860              	.LFB47:
1112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t FreeRTOS_SendPingRequest( uint32_t ulIPAddress, size_t xNumberOfBytesToSend, TickType_t
1117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 1861              		.loc 1 1117 0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 40
 1864              		@ frame_needed = 1, uses_anonymous_args = 0
 1865 0000 80B5     		push	{r7, lr}
 1866              	.LCFI93:
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 7, -8
 1869              		.cfi_offset 14, -4
 1870 0002 8AB0     		sub	sp, sp, #40
 1871              	.LCFI94:
 1872              		.cfi_def_cfa_offset 48
 1873 0004 00AF     		add	r7, sp, #0
 1874              	.LCFI95:
 1875              		.cfi_def_cfa_register 7
 1876 0006 F860     		str	r0, [r7, #12]
 1877 0008 B960     		str	r1, [r7, #8]
 1878 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/cc946aYs.s 			page 57


1118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer;
1119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ICMPHeader_t *pxICMPHeader;
1120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	BaseType_t xReturn = pdFAIL;
 1879              		.loc 1 1120 0
 1880 000c 0023     		movs	r3, #0
 1881 000e 7B62     		str	r3, [r7, #36]
1121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static uint16_t usSequenceNumber = 0;
1122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *pucChar;
1123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 1882              		.loc 1 1123 0
 1883 0010 0323     		movs	r3, #3
 1884 0012 3B74     		strb	r3, [r7, #16]
 1885 0014 0023     		movs	r3, #0
 1886 0016 7B61     		str	r3, [r7, #20]
1124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xNumberOfBytesToSend < ( ( ipconfigNETWORK_MTU - sizeof( IPHeader_t ) ) - sizeof( ICMPHeader_
 1887              		.loc 1 1125 0
 1888 0018 BB68     		ldr	r3, [r7, #8]
 1889 001a B3F5B86F 		cmp	r3, #1472
 1890 001e 4DD2     		bcs	.L119
1126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xNumberOfBytesToSend + sizeof( ICMPPacket_t 
 1891              		.loc 1 1127 0
 1892 0020 BB68     		ldr	r3, [r7, #8]
 1893 0022 2A33     		adds	r3, r3, #42
 1894 0024 1846     		mov	r0, r3
 1895 0026 7968     		ldr	r1, [r7, #4]
 1896 0028 FFF7FEFF 		bl	pxGetNetworkBufferWithDescriptor
 1897 002c 3862     		str	r0, [r7, #32]
1128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( pxNetworkBuffer != NULL )
 1898              		.loc 1 1129 0
 1899 002e 3B6A     		ldr	r3, [r7, #32]
 1900 0030 002B     		cmp	r3, #0
 1901 0032 43D0     		beq	.L119
1130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader = ( ICMPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipIP_PAYLOAD_OFFSET ] 
 1902              		.loc 1 1131 0
 1903 0034 3B6A     		ldr	r3, [r7, #32]
 1904 0036 9B69     		ldr	r3, [r3, #24]
 1905 0038 2233     		adds	r3, r3, #34
 1906 003a FB61     		str	r3, [r7, #28]
1132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				usSequenceNumber++;
 1907              		.loc 1 1132 0
 1908 003c 224B     		ldr	r3, .L123
 1909 003e 1B88     		ldrh	r3, [r3]
 1910 0040 0133     		adds	r3, r3, #1
 1911 0042 9AB2     		uxth	r2, r3
 1912 0044 204B     		ldr	r3, .L123
 1913 0046 1A80     		strh	r2, [r3]	@ movhi
1133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Fill in the basic header information. */
1135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->ucTypeOfMessage = ipICMP_ECHO_REQUEST;
 1914              		.loc 1 1135 0
 1915 0048 FB69     		ldr	r3, [r7, #28]
 1916 004a 0822     		movs	r2, #8
 1917 004c 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc946aYs.s 			page 58


1136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->ucTypeOfService = 0;
 1918              		.loc 1 1136 0
 1919 004e FB69     		ldr	r3, [r7, #28]
 1920 0050 0022     		movs	r2, #0
 1921 0052 5A70     		strb	r2, [r3, #1]
1137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->usIdentifier = usSequenceNumber;
 1922              		.loc 1 1137 0
 1923 0054 1C4B     		ldr	r3, .L123
 1924 0056 1A88     		ldrh	r2, [r3]
 1925 0058 FB69     		ldr	r3, [r7, #28]
 1926 005a 9A80     		strh	r2, [r3, #4]	@ unaligned
1138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxICMPHeader->usSequenceNumber = usSequenceNumber;
 1927              		.loc 1 1138 0
 1928 005c 1A4B     		ldr	r3, .L123
 1929 005e 1A88     		ldrh	r2, [r3]
 1930 0060 FB69     		ldr	r3, [r7, #28]
 1931 0062 DA80     		strh	r2, [r3, #6]	@ unaligned
1139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Find the start of the data. */
1141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pucChar = ( uint8_t * ) pxICMPHeader;
 1932              		.loc 1 1141 0
 1933 0064 FB69     		ldr	r3, [r7, #28]
 1934 0066 BB61     		str	r3, [r7, #24]
1142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pucChar += sizeof( ICMPHeader_t );
 1935              		.loc 1 1142 0
 1936 0068 BB69     		ldr	r3, [r7, #24]
 1937 006a 0833     		adds	r3, r3, #8
 1938 006c BB61     		str	r3, [r7, #24]
1143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Just memset the data to a fixed value. */
1145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				memset( ( void * ) pucChar, ( int ) ipECHO_DATA_FILL_BYTE, xNumberOfBytesToSend );
 1939              		.loc 1 1145 0
 1940 006e B869     		ldr	r0, [r7, #24]
 1941 0070 7821     		movs	r1, #120
 1942 0072 BA68     		ldr	r2, [r7, #8]
 1943 0074 FFF7FEFF 		bl	memset
1146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The message is complete, IP and checksum's are handled by
1148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				vProcessGeneratedUDPPacket */
1149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = FREERTOS_SO_UDPCKSUM_OUT;
 1944              		.loc 1 1149 0
 1945 0078 3B6A     		ldr	r3, [r7, #32]
 1946 007a 9B69     		ldr	r3, [r3, #24]
 1947 007c 0633     		adds	r3, r3, #6
 1948 007e 0222     		movs	r2, #2
 1949 0080 1A70     		strb	r2, [r3]
1150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->ulIPAddress = ulIPAddress;
 1950              		.loc 1 1150 0
 1951 0082 3B6A     		ldr	r3, [r7, #32]
 1952 0084 FA68     		ldr	r2, [r7, #12]
 1953 0086 5A61     		str	r2, [r3, #20]
1151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->usPort = ipPACKET_CONTAINS_ICMP_DATA;
 1954              		.loc 1 1151 0
 1955 0088 3B6A     		ldr	r3, [r7, #32]
 1956 008a 0022     		movs	r2, #0
 1957 008c 1A84     		strh	r2, [r3, #32]	@ movhi
1152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->xDataLength = xNumberOfBytesToSend + sizeof( ICMPHeader_t );
ARM GAS  /tmp/cc946aYs.s 			page 59


 1958              		.loc 1 1152 0
 1959 008e BB68     		ldr	r3, [r7, #8]
 1960 0090 03F10802 		add	r2, r3, #8
 1961 0094 3B6A     		ldr	r3, [r7, #32]
 1962 0096 DA61     		str	r2, [r3, #28]
1153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Send to the stack. */
1155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xStackTxEvent.pvData = pxNetworkBuffer;
 1963              		.loc 1 1155 0
 1964 0098 3B6A     		ldr	r3, [r7, #32]
 1965 009a 7B61     		str	r3, [r7, #20]
1156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( xSendEventStructToIPTask( &xStackTxEvent, xBlockTimeTicks) != pdPASS )
 1966              		.loc 1 1157 0
 1967 009c 07F11003 		add	r3, r7, #16
 1968 00a0 1846     		mov	r0, r3
 1969 00a2 7968     		ldr	r1, [r7, #4]
 1970 00a4 FFF7FEFF 		bl	xSendEventStructToIPTask
 1971 00a8 0346     		mov	r3, r0
 1972 00aa 012B     		cmp	r3, #1
 1973 00ac 03D0     		beq	.L121
1158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 1974              		.loc 1 1159 0
 1975 00ae 386A     		ldr	r0, [r7, #32]
 1976 00b0 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 1977 00b4 02E0     		b	.L119
 1978              	.L121:
1160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
1161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				else
1163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xReturn = usSequenceNumber;
 1979              		.loc 1 1164 0
 1980 00b6 044B     		ldr	r3, .L123
 1981 00b8 1B88     		ldrh	r3, [r3]
 1982 00ba 7B62     		str	r3, [r7, #36]
 1983              	.L119:
1165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The requested number of bytes will not fit in the available space
1171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			in the network buffer. */
1172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return xReturn;
 1984              		.loc 1 1174 0
 1985 00bc 7B6A     		ldr	r3, [r7, #36]
1175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 1986              		.loc 1 1175 0
 1987 00be 1846     		mov	r0, r3
 1988 00c0 2837     		adds	r7, r7, #40
 1989              	.LCFI96:
 1990              		.cfi_def_cfa_offset 8
 1991 00c2 BD46     		mov	sp, r7
ARM GAS  /tmp/cc946aYs.s 			page 60


 1992              	.LCFI97:
 1993              		.cfi_def_cfa_register 13
 1994              		@ sp needed
 1995 00c4 80BD     		pop	{r7, pc}
 1996              	.L124:
 1997 00c6 00BF     		.align	2
 1998              	.L123:
 1999 00c8 00000000 		.word	usSequenceNumber.6875
 2000              		.cfi_endproc
 2001              	.LFE47:
 2003              		.section	.text.xSendEventToIPTask,"ax",%progbits
 2004              		.align	2
 2005              		.global	xSendEventToIPTask
 2006              		.thumb
 2007              		.thumb_func
 2009              	xSendEventToIPTask:
 2010              	.LFB48:
1176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
1178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
1181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2011              		.loc 1 1181 0
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 24
 2014              		@ frame_needed = 1, uses_anonymous_args = 0
 2015 0000 80B5     		push	{r7, lr}
 2016              	.LCFI98:
 2017              		.cfi_def_cfa_offset 8
 2018              		.cfi_offset 7, -8
 2019              		.cfi_offset 14, -4
 2020 0002 86B0     		sub	sp, sp, #24
 2021              	.LCFI99:
 2022              		.cfi_def_cfa_offset 32
 2023 0004 00AF     		add	r7, sp, #0
 2024              	.LCFI100:
 2025              		.cfi_def_cfa_register 7
 2026 0006 0346     		mov	r3, r0
 2027 0008 FB71     		strb	r3, [r7, #7]
1182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** IPStackEvent_t xEventMessage;
1183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const TickType_t xDontBlock = ( TickType_t ) 0;
 2028              		.loc 1 1183 0
 2029 000a 0023     		movs	r3, #0
 2030 000c 7B61     		str	r3, [r7, #20]
1184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xEventMessage.eEventType = eEvent;
 2031              		.loc 1 1185 0
 2032 000e FB79     		ldrb	r3, [r7, #7]
 2033 0010 3B73     		strb	r3, [r7, #12]
1186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xEventMessage.pvData = ( void* )NULL;
 2034              		.loc 1 1186 0
 2035 0012 0023     		movs	r3, #0
 2036 0014 3B61     		str	r3, [r7, #16]
1187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 2037              		.loc 1 1188 0
ARM GAS  /tmp/cc946aYs.s 			page 61


 2038 0016 07F10C03 		add	r3, r7, #12
 2039 001a 1846     		mov	r0, r3
 2040 001c 7969     		ldr	r1, [r7, #20]
 2041 001e FFF7FEFF 		bl	xSendEventStructToIPTask
 2042 0022 0346     		mov	r3, r0
1189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2043              		.loc 1 1189 0
 2044 0024 1846     		mov	r0, r3
 2045 0026 1837     		adds	r7, r7, #24
 2046              	.LCFI101:
 2047              		.cfi_def_cfa_offset 8
 2048 0028 BD46     		mov	sp, r7
 2049              	.LCFI102:
 2050              		.cfi_def_cfa_register 13
 2051              		@ sp needed
 2052 002a 80BD     		pop	{r7, pc}
 2053              		.cfi_endproc
 2054              	.LFE48:
 2056              		.section	.text.xSendEventStructToIPTask,"ax",%progbits
 2057              		.align	2
 2058              		.global	xSendEventStructToIPTask
 2059              		.thumb
 2060              		.thumb_func
 2062              	xSendEventStructToIPTask:
 2063              	.LFB49:
1190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
1193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2064              		.loc 1 1193 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 16
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068 0000 80B5     		push	{r7, lr}
 2069              	.LCFI103:
 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
 2073 0002 84B0     		sub	sp, sp, #16
 2074              	.LCFI104:
 2075              		.cfi_def_cfa_offset 24
 2076 0004 00AF     		add	r7, sp, #0
 2077              	.LCFI105:
 2078              		.cfi_def_cfa_register 7
 2079 0006 7860     		str	r0, [r7, #4]
 2080 0008 3960     		str	r1, [r7]
1194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xReturn, xSendMessage;
1195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 2081              		.loc 1 1196 0
 2082 000a FFF7FEFF 		bl	xIPIsNetworkTaskReady
 2083 000e 0346     		mov	r3, r0
 2084 0010 002B     		cmp	r3, #0
 2085 0012 06D1     		bne	.L128
 2086              		.loc 1 1196 0 is_stmt 0 discriminator 1
 2087 0014 7B68     		ldr	r3, [r7, #4]
 2088 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc946aYs.s 			page 62


 2089 0018 002B     		cmp	r3, #0
 2090 001a 02D0     		beq	.L128
1197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Only allow eNetworkDownEvent events if the IP task is not ready
1199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		yet.  Not going to attempt to send the message so the send failed. */
1200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReturn = pdFAIL;
 2091              		.loc 1 1200 0 is_stmt 1
 2092 001c 0023     		movs	r3, #0
 2093 001e FB60     		str	r3, [r7, #12]
 2094 0020 2EE0     		b	.L129
 2095              	.L128:
1201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSendMessage = pdTRUE;
 2096              		.loc 1 1204 0
 2097 0022 0123     		movs	r3, #1
 2098 0024 BB60     		str	r3, [r7, #8]
1205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigUSE_TCP == 1 )
1207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( pxEvent->eEventType == eTCPTimerEvent )
 2099              		.loc 1 1208 0
 2100 0026 7B68     		ldr	r3, [r7, #4]
 2101 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2102 002a 5BB2     		sxtb	r3, r3
 2103 002c 052B     		cmp	r3, #5
 2104 002e 0ED1     		bne	.L130
1209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* TCP timer events are sent to wake the timer task when
1211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xTCPTimer has expired, but there is no point sending them if the
1212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				IP task is already awake processing other message. */
1213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 2105              		.loc 1 1213 0
 2106 0030 164A     		ldr	r2, .L134
 2107 0032 1378     		ldrb	r3, [r2]
 2108 0034 43F00203 		orr	r3, r3, #2
 2109 0038 1370     		strb	r3, [r2]
1214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 2110              		.loc 1 1215 0
 2111 003a 154B     		ldr	r3, .L134+4
 2112 003c 1B68     		ldr	r3, [r3]
 2113 003e 1846     		mov	r0, r3
 2114 0040 FFF7FEFF 		bl	uxQueueMessagesWaiting
 2115 0044 0346     		mov	r3, r0
 2116 0046 002B     		cmp	r3, #0
 2117 0048 01D0     		beq	.L130
1216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Not actually going to send the message but this is not a
1218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					failure as the message didn't need to be sent. */
1219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xSendMessage = pdFALSE;
 2118              		.loc 1 1219 0
 2119 004a 0023     		movs	r3, #0
 2120 004c BB60     		str	r3, [r7, #8]
 2121              	.L130:
1220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
ARM GAS  /tmp/cc946aYs.s 			page 63


1221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif /* ipconfigUSE_TCP */
1224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSendMessage != pdFALSE )
 2122              		.loc 1 1225 0
 2123 004e BB68     		ldr	r3, [r7, #8]
 2124 0050 002B     		cmp	r3, #0
 2125 0052 13D0     		beq	.L131
1226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The IP task cannot block itself while waiting for itself to
1228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			respond. */
1229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 2126              		.loc 1 1229 0
 2127 0054 FFF7FEFF 		bl	xIsCallingFromIPTask
 2128 0058 0346     		mov	r3, r0
 2129 005a 012B     		cmp	r3, #1
 2130 005c 04D1     		bne	.L132
 2131              		.loc 1 1229 0 is_stmt 0 discriminator 1
 2132 005e 3B68     		ldr	r3, [r7]
 2133 0060 002B     		cmp	r3, #0
 2134 0062 01D0     		beq	.L132
1230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				xTimeout = ( TickType_t ) 0;
 2135              		.loc 1 1231 0 is_stmt 1
 2136 0064 0023     		movs	r3, #0
 2137 0066 3B60     		str	r3, [r7]
 2138              	.L132:
1232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 2139              		.loc 1 1234 0
 2140 0068 094B     		ldr	r3, .L134+4
 2141 006a 1B68     		ldr	r3, [r3]
 2142 006c 1846     		mov	r0, r3
 2143 006e 7968     		ldr	r1, [r7, #4]
 2144 0070 3A68     		ldr	r2, [r7]
 2145 0072 0023     		movs	r3, #0
 2146 0074 FFF7FEFF 		bl	xQueueGenericSend
 2147 0078 F860     		str	r0, [r7, #12]
 2148 007a 01E0     		b	.L129
 2149              	.L131:
1235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xReturn == pdFAIL )
1237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* A message should have been sent to the IP task, but wasn't. */
1239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
1240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				iptraceSTACK_TX_EVENT_LOST( pxEvent->eEventType );
1241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* It was not necessary to send the message to process the event so
1246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			even though the message was not sent the call was successful. */
1247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xReturn = pdPASS;
 2150              		.loc 1 1247 0
 2151 007c 0123     		movs	r3, #1
ARM GAS  /tmp/cc946aYs.s 			page 64


 2152 007e FB60     		str	r3, [r7, #12]
 2153              	.L129:
1248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xReturn;
 2154              		.loc 1 1251 0
 2155 0080 FB68     		ldr	r3, [r7, #12]
1252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2156              		.loc 1 1252 0
 2157 0082 1846     		mov	r0, r3
 2158 0084 1037     		adds	r7, r7, #16
 2159              	.LCFI106:
 2160              		.cfi_def_cfa_offset 8
 2161 0086 BD46     		mov	sp, r7
 2162              	.LCFI107:
 2163              		.cfi_def_cfa_register 13
 2164              		@ sp needed
 2165 0088 80BD     		pop	{r7, pc}
 2166              	.L135:
 2167 008a 00BF     		.align	2
 2168              	.L134:
 2169 008c 00000000 		.word	xTCPTimer
 2170 0090 00000000 		.word	xNetworkEventQueue
 2171              		.cfi_endproc
 2172              	.LFE49:
 2174              		.section	.text.eConsiderFrameForProcessing,"ax",%progbits
 2175              		.align	2
 2176              		.global	eConsiderFrameForProcessing
 2177              		.thumb
 2178              		.thumb_func
 2180              	eConsiderFrameForProcessing:
 2181              	.LFB50:
1253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
1256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2182              		.loc 1 1256 0
 2183              		.cfi_startproc
 2184              		@ args = 0, pretend = 0, frame = 24
 2185              		@ frame_needed = 1, uses_anonymous_args = 0
 2186 0000 80B5     		push	{r7, lr}
 2187              	.LCFI108:
 2188              		.cfi_def_cfa_offset 8
 2189              		.cfi_offset 7, -8
 2190              		.cfi_offset 14, -4
 2191 0002 86B0     		sub	sp, sp, #24
 2192              	.LCFI109:
 2193              		.cfi_def_cfa_offset 32
 2194 0004 00AF     		add	r7, sp, #0
 2195              	.LCFI110:
 2196              		.cfi_def_cfa_register 7
 2197 0006 7860     		str	r0, [r7, #4]
1257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn;
1258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const EthernetHeader_t *pxEthernetHeader;
1259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxEthernetHeader = ( const EthernetHeader_t * ) pucEthernetBuffer;
ARM GAS  /tmp/cc946aYs.s 			page 65


 2198              		.loc 1 1260 0
 2199 0008 7B68     		ldr	r3, [r7, #4]
 2200 000a 3B61     		str	r3, [r7, #16]
1261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ),
 2201              		.loc 1 1262 0
 2202 000c 3B69     		ldr	r3, [r7, #16]
 2203 000e 2148     		ldr	r0, .L143
 2204 0010 1946     		mov	r1, r3
 2205 0012 0622     		movs	r2, #6
 2206 0014 FFF7FEFF 		bl	memcmp
 2207 0018 0346     		mov	r3, r0
 2208 001a 002B     		cmp	r3, #0
 2209 001c 02D1     		bne	.L137
1263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was directed to this node directly - process it. */
1265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
 2210              		.loc 1 1265 0
 2211 001e 0123     		movs	r3, #1
 2212 0020 FB75     		strb	r3, [r7, #23]
 2213 0022 19E0     		b	.L138
 2214              	.L137:
1266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( memcmp( ( void * ) xBroadcastMACAddress.ucBytes, ( void * ) pxEthernetHeader->xDestinatio
 2215              		.loc 1 1267 0
 2216 0024 3B69     		ldr	r3, [r7, #16]
 2217 0026 1C48     		ldr	r0, .L143+4
 2218 0028 1946     		mov	r1, r3
 2219 002a 0622     		movs	r2, #6
 2220 002c FFF7FEFF 		bl	memcmp
 2221 0030 0346     		mov	r3, r0
 2222 0032 002B     		cmp	r3, #0
 2223 0034 02D1     		bne	.L139
1268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was a broadcast - process it. */
1270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
 2224              		.loc 1 1270 0
 2225 0036 0123     		movs	r3, #1
 2226 0038 FB75     		strb	r3, [r7, #23]
 2227 003a 0DE0     		b	.L138
 2228              	.L139:
1271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_LLMNR == 1 )
1274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( memcmp( ( void * ) xLLMNR_MacAdress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.
 2229              		.loc 1 1274 0
 2230 003c 3B69     		ldr	r3, [r7, #16]
 2231 003e 1748     		ldr	r0, .L143+8
 2232 0040 1946     		mov	r1, r3
 2233 0042 0622     		movs	r2, #6
 2234 0044 FFF7FEFF 		bl	memcmp
 2235 0048 0346     		mov	r3, r0
 2236 004a 002B     		cmp	r3, #0
 2237 004c 02D1     		bne	.L140
1275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet is a request for LLMNR - process it. */
1277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eProcessBuffer;
ARM GAS  /tmp/cc946aYs.s 			page 66


 2238              		.loc 1 1277 0
 2239 004e 0123     		movs	r3, #1
 2240 0050 FB75     		strb	r3, [r7, #23]
 2241 0052 01E0     		b	.L138
 2242              	.L140:
1278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_LLMNR */
1281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The packet was not a broadcast, or for this node, just release
1283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the buffer without taking any other action. */
1284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		eReturn = eReleaseBuffer;
 2243              		.loc 1 1284 0
 2244 0054 0023     		movs	r3, #0
 2245 0056 FB75     		strb	r3, [r7, #23]
 2246              	.L138:
 2247              	.LBB26:
1285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
1288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usFrameType;
1290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( eReturn == eProcessBuffer )
 2248              		.loc 1 1291 0
 2249 0058 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2250 005a 012B     		cmp	r3, #1
 2251 005c 15D1     		bne	.L141
1292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usFrameType = pxEthernetHeader->usFrameType;
 2252              		.loc 1 1293 0
 2253 005e 3B69     		ldr	r3, [r7, #16]
 2254 0060 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 2255 0062 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 2256 0064 1B02     		lsls	r3, r3, #8
 2257 0066 1343     		orrs	r3, r3, r2
 2258 0068 FB81     		strh	r3, [r7, #14]	@ movhi
1294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			usFrameType = FreeRTOS_ntohs( usFrameType );
 2259              		.loc 1 1294 0
 2260 006a FB89     		ldrh	r3, [r7, #14]
 2261 006c 1B02     		lsls	r3, r3, #8
 2262 006e 9AB2     		uxth	r2, r3
 2263 0070 FB89     		ldrh	r3, [r7, #14]
 2264 0072 1B0A     		lsrs	r3, r3, #8
 2265 0074 9BB2     		uxth	r3, r3
 2266 0076 9BB2     		uxth	r3, r3
 2267 0078 1343     		orrs	r3, r3, r2
 2268 007a 9BB2     		uxth	r3, r3
 2269 007c FB81     		strh	r3, [r7, #14]	@ movhi
1295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( usFrameType <= 0x600U )
 2270              		.loc 1 1296 0
 2271 007e FB89     		ldrh	r3, [r7, #14]
 2272 0080 B3F5C06F 		cmp	r3, #1536
 2273 0084 01D8     		bhi	.L141
1297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Not an Ethernet II frame. */
ARM GAS  /tmp/cc946aYs.s 			page 67


1299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
 2274              		.loc 1 1299 0
 2275 0086 0023     		movs	r3, #0
 2276 0088 FB75     		strb	r3, [r7, #23]
 2277              	.L141:
 2278              	.LBE26:
1300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */
1304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
 2279              		.loc 1 1305 0
 2280 008a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2281              		.loc 1 1306 0
 2282 008c 1846     		mov	r0, r3
 2283 008e 1837     		adds	r7, r7, #24
 2284              	.LCFI111:
 2285              		.cfi_def_cfa_offset 8
 2286 0090 BD46     		mov	sp, r7
 2287              	.LCFI112:
 2288              		.cfi_def_cfa_register 13
 2289              		@ sp needed
 2290 0092 80BD     		pop	{r7, pc}
 2291              	.L144:
 2292              		.align	2
 2293              	.L143:
 2294 0094 00000000 		.word	xDefaultPartUDPPacketHeader
 2295 0098 00000000 		.word	xBroadcastMACAddress
 2296 009c 00000000 		.word	xLLMNR_MacAdress
 2297              		.cfi_endproc
 2298              	.LFE50:
 2300              		.section	.text.prvProcessNetworkDownEvent,"ax",%progbits
 2301              		.align	2
 2302              		.thumb
 2303              		.thumb_func
 2305              	prvProcessNetworkDownEvent:
 2306              	.LFB51:
1307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessNetworkDownEvent( void )
1310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2307              		.loc 1 1310 0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 0
 2310              		@ frame_needed = 1, uses_anonymous_args = 0
 2311 0000 80B5     		push	{r7, lr}
 2312              	.LCFI113:
 2313              		.cfi_def_cfa_offset 8
 2314              		.cfi_offset 7, -8
 2315              		.cfi_offset 14, -4
 2316 0002 00AF     		add	r7, sp, #0
 2317              	.LCFI114:
 2318              		.cfi_def_cfa_register 7
1311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Stop the ARP timer while there is no network. */
1312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xARPTimer.bActive = pdFALSE_UNSIGNED;
ARM GAS  /tmp/cc946aYs.s 			page 68


 2319              		.loc 1 1312 0
 2320 0004 0E4A     		ldr	r2, .L149
 2321 0006 1378     		ldrb	r3, [r2]
 2322 0008 6FF30003 		bfc	r3, #0, #1
 2323 000c 1370     		strb	r3, [r2]
 2324              	.LBB27:
1313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if ipconfigUSE_NETWORK_EVENT_HOOK == 1
1315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		static BaseType_t xCallEventHook = pdFALSE;
1317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The first network down event is generated by the IP stack itself to
1319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		initialise the network hardware, so do not call the network down event
1320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		the first time through. */
1321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xCallEventHook == pdTRUE )
 2325              		.loc 1 1321 0
 2326 000e 0D4B     		ldr	r3, .L149+4
 2327 0010 1B68     		ldr	r3, [r3]
 2328 0012 012B     		cmp	r3, #1
 2329 0014 02D1     		bne	.L146
1322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vApplicationIPNetworkEventHook( eNetworkDown );
 2330              		.loc 1 1323 0
 2331 0016 0120     		movs	r0, #1
 2332 0018 FFF7FEFF 		bl	vApplicationIPNetworkEventHook
 2333              	.L146:
1324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xCallEventHook = pdTRUE;
 2334              		.loc 1 1325 0
 2335 001c 094B     		ldr	r3, .L149+4
 2336 001e 0122     		movs	r2, #1
 2337 0020 1A60     		str	r2, [r3]
 2338              	.LBE27:
1326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
1328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The network has been disconnected (or is being initialised for the first
1330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	time).  Perform whatever hardware processing is necessary to bring it up
1331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	again, or wait for it to be available again.  This is hardware dependent. */
1332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xNetworkInterfaceInitialise() != pdPASS )
 2339              		.loc 1 1332 0
 2340 0022 FFF7FEFF 		bl	xNetworkInterfaceInitialise
 2341 0026 0346     		mov	r3, r0
 2342 0028 012B     		cmp	r3, #1
 2343 002a 06D0     		beq	.L147
1333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Ideally the network interface initialisation function will only
1335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return when the network is available.  In case this is not the case,
1336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		wait a while before retrying the initialisation. */
1337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 2344              		.loc 1 1337 0
 2345 002c 40F6B830 		movw	r0, #3000
 2346 0030 FFF7FEFF 		bl	vTaskDelay
1338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_NetworkDown();
 2347              		.loc 1 1338 0
 2348 0034 FFF7FEFF 		bl	FreeRTOS_NetworkDown
 2349 0038 01E0     		b	.L145
ARM GAS  /tmp/cc946aYs.s 			page 69


 2350              	.L147:
1339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Set remaining time to 0 so it will become active immediately. */
1343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if ipconfigUSE_DHCP == 1
1344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The network is not up until DHCP has completed. */
1346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vDHCPProcess( pdTRUE );
1347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xSendEventToIPTask( eDHCPEvent );
1348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#else
1350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Perform any necessary 'network up' processing. */
1352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vIPNetworkUpCalls();
 2351              		.loc 1 1352 0
 2352 003a FFF7FEFF 		bl	vIPNetworkUpCalls
 2353              	.L145:
1353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif
1355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2354              		.loc 1 1356 0
 2355 003e 80BD     		pop	{r7, pc}
 2356              	.L150:
 2357              		.align	2
 2358              	.L149:
 2359 0040 00000000 		.word	xARPTimer
 2360 0044 00000000 		.word	xCallEventHook.6898
 2361              		.cfi_endproc
 2362              	.LFE51:
 2364              		.section	.text.vIPNetworkUpCalls,"ax",%progbits
 2365              		.align	2
 2366              		.global	vIPNetworkUpCalls
 2367              		.thumb
 2368              		.thumb_func
 2370              	vIPNetworkUpCalls:
 2371              	.LFB52:
1357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void vIPNetworkUpCalls( void )
1360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2372              		.loc 1 1360 0
 2373              		.cfi_startproc
 2374              		@ args = 0, pretend = 0, frame = 0
 2375              		@ frame_needed = 1, uses_anonymous_args = 0
 2376 0000 80B5     		push	{r7, lr}
 2377              	.LCFI115:
 2378              		.cfi_def_cfa_offset 8
 2379              		.cfi_offset 7, -8
 2380              		.cfi_offset 14, -4
 2381 0002 00AF     		add	r7, sp, #0
 2382              	.LCFI116:
 2383              		.cfi_def_cfa_register 7
1361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkUp = pdTRUE;
 2384              		.loc 1 1361 0
 2385 0004 064B     		ldr	r3, .L152
ARM GAS  /tmp/cc946aYs.s 			page 70


 2386 0006 0122     		movs	r2, #1
 2387 0008 1A60     		str	r2, [r3]
1362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
1364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vApplicationIPNetworkEventHook( eNetworkUp );
 2388              		.loc 1 1365 0
 2389 000a 0020     		movs	r0, #0
 2390 000c FFF7FEFF 		bl	vApplicationIPNetworkEventHook
 2391              	.LBB28:
1366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigUSE_NETWORK_EVENT_HOOK */
1368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
1370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The following function is declared in FreeRTOS_DNS.c	and 'private' to
1372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		this library */
1373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		extern void vDNSInitialise( void );
1374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vDNSInitialise();
 2392              		.loc 1 1374 0
 2393 0010 FFF7FEFF 		bl	vDNSInitialise
 2394              	.LBE28:
1375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
1377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Set remaining time to 0 so it will become active immediately. */
1379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 2395              		.loc 1 1379 0
 2396 0014 0348     		ldr	r0, .L152+4
 2397 0016 42F21071 		movw	r1, #10000
 2398 001a FFF7FEFF 		bl	prvIPTimerReload
1380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2399              		.loc 1 1380 0
 2400 001e 80BD     		pop	{r7, pc}
 2401              	.L153:
 2402              		.align	2
 2403              	.L152:
 2404 0020 00000000 		.word	xNetworkUp
 2405 0024 00000000 		.word	xARPTimer
 2406              		.cfi_endproc
 2407              	.LFE52:
 2409              		.section	.text.prvProcessEthernetPacket,"ax",%progbits
 2410              		.align	2
 2411              		.thumb
 2412              		.thumb_func
 2414              	prvProcessEthernetPacket:
 2415              	.LFB53:
1381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
1384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2416              		.loc 1 1384 0
 2417              		.cfi_startproc
 2418              		@ args = 0, pretend = 0, frame = 24
 2419              		@ frame_needed = 1, uses_anonymous_args = 0
 2420 0000 80B5     		push	{r7, lr}
 2421              	.LCFI117:
ARM GAS  /tmp/cc946aYs.s 			page 71


 2422              		.cfi_def_cfa_offset 8
 2423              		.cfi_offset 7, -8
 2424              		.cfi_offset 14, -4
 2425 0002 86B0     		sub	sp, sp, #24
 2426              	.LCFI118:
 2427              		.cfi_def_cfa_offset 32
 2428 0004 00AF     		add	r7, sp, #0
 2429              	.LCFI119:
 2430              		.cfi_def_cfa_register 7
 2431 0006 7860     		str	r0, [r7, #4]
1385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** EthernetHeader_t *pxEthernetHeader;
1386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** volatile eFrameProcessingResult_t eReturned; /* Volatile to prevent complier warnings when ipCONSID
1387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	configASSERT( pxNetworkBuffer );
 2432              		.loc 1 1388 0
 2433 0008 7B68     		ldr	r3, [r7, #4]
 2434 000a 002B     		cmp	r3, #0
 2435 000c 09D1     		bne	.L155
 2436              	.LBB29:
 2437              	.LBB30:
 2438              		.loc 2 237 0 discriminator 1
 2439              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2440 000e 4FF05003 			mov r3, #80												
 2441 0012 83F31188 		msr basepri, r3											
 2442 0016 BFF36F8F 		isb														
 2443 001a BFF34F8F 		dsb														
 2444              	
 2445              	@ 0 "" 2
 2446              		.thumb
 2447 001e 3B61     		str	r3, [r7, #16]
 2448              	.L156:
 2449              	.LBE30:
 2450              	.LBE29:
 2451              		.loc 1 1388 0 discriminator 1
 2452 0020 FEE7     		b	.L156
 2453              	.L155:
1389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Interpret the Ethernet frame. */
1391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 2454              		.loc 1 1391 0
 2455 0022 0123     		movs	r3, #1
 2456 0024 FB73     		strb	r3, [r7, #15]
1392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 2457              		.loc 1 1392 0
 2458 0026 7B68     		ldr	r3, [r7, #4]
 2459 0028 9B69     		ldr	r3, [r3, #24]
 2460 002a 7B61     		str	r3, [r7, #20]
1393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( eReturned == eProcessBuffer )
 2461              		.loc 1 1394 0
 2462 002c FB7B     		ldrb	r3, [r7, #15]
 2463 002e DBB2     		uxtb	r3, r3
 2464 0030 012B     		cmp	r3, #1
 2465 0032 1BD1     		bne	.L157
1395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Interpret the received Ethernet packet. */
1397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( pxEthernetHeader->usFrameType )
ARM GAS  /tmp/cc946aYs.s 			page 72


 2466              		.loc 1 1397 0
 2467 0034 7B69     		ldr	r3, [r7, #20]
 2468 0036 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 2469 0038 9BB2     		uxth	r3, r3
 2470 003a 082B     		cmp	r3, #8
 2471 003c 0AD0     		beq	.L159
 2472 003e B3F5C16F 		cmp	r3, #1544
 2473 0042 10D1     		bne	.L165
1398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipARP_FRAME_TYPE :
1400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The Ethernet frame contains an ARP packet. */
1401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturned = eARPProcessPacket( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 2474              		.loc 1 1401 0
 2475 0044 7B68     		ldr	r3, [r7, #4]
 2476 0046 9B69     		ldr	r3, [r3, #24]
 2477 0048 1846     		mov	r0, r3
 2478 004a FFF7FEFF 		bl	eARPProcessPacket
 2479 004e 0346     		mov	r3, r0
 2480 0050 FB73     		strb	r3, [r7, #15]
1402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2481              		.loc 1 1402 0
 2482 0052 0BE0     		b	.L157
 2483              	.L159:
1403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipIPv4_FRAME_TYPE :
1405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The Ethernet frame contains an IP packet. */
1406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturned = prvProcessIPPacket( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer, pxNetworkB
 2484              		.loc 1 1406 0
 2485 0054 7B68     		ldr	r3, [r7, #4]
 2486 0056 9B69     		ldr	r3, [r3, #24]
 2487 0058 1846     		mov	r0, r3
 2488 005a 7968     		ldr	r1, [r7, #4]
 2489 005c FFF7FEFF 		bl	prvProcessIPPacket
 2490 0060 0346     		mov	r3, r0
 2491 0062 FB73     		strb	r3, [r7, #15]
1407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2492              		.loc 1 1407 0
 2493 0064 02E0     		b	.L157
 2494              	.L165:
1408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default :
1410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* No other packet types are handled.  Nothing to do. */
1411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturned = eReleaseBuffer;
 2495              		.loc 1 1411 0
 2496 0066 0023     		movs	r3, #0
 2497 0068 FB73     		strb	r3, [r7, #15]
1412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2498              		.loc 1 1412 0
 2499 006a 00BF     		nop
 2500              	.L157:
1413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Perform any actions that resulted from processing the Ethernet frame. */
1417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	switch( eReturned )
 2501              		.loc 1 1417 0
 2502 006c FB7B     		ldrb	r3, [r7, #15]
ARM GAS  /tmp/cc946aYs.s 			page 73


 2503 006e DBB2     		uxtb	r3, r3
 2504 0070 022B     		cmp	r3, #2
 2505 0072 02D0     		beq	.L162
 2506 0074 032B     		cmp	r3, #3
 2507 0076 0AD0     		beq	.L167
 2508 0078 04E0     		b	.L166
 2509              	.L162:
1418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case eReturnEthernetFrame :
1420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The Ethernet frame will have been updated (maybe it was
1421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			an ARP request or a PING request?) and should be sent back to
1422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			its source. */
1423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 2510              		.loc 1 1423 0
 2511 007a 7868     		ldr	r0, [r7, #4]
 2512 007c 0121     		movs	r1, #1
 2513 007e FFF7FEFF 		bl	vReturnEthernetFrame
1424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* parameter pdTRUE: the buffer must be released once
1425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			the frame has been transmitted */
1426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
 2514              		.loc 1 1426 0
 2515 0082 05E0     		b	.L154
 2516              	.L166:
1427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		case eFrameConsumed :
1429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The frame is in use somewhere, don't release the buffer
1430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			yet. */
1431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
1432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		default :
1434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* The frame is not being used anywhere, and the
1435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			NetworkBufferDescriptor_t structure containing the frame should
1436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			just be	released back to the list of free buffers. */
1437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 2517              		.loc 1 1437 0
 2518 0084 7868     		ldr	r0, [r7, #4]
 2519 0086 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
1438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			break;
 2520              		.loc 1 1438 0
 2521 008a 00BF     		nop
 2522 008c 00E0     		b	.L154
 2523              	.L167:
1431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2524              		.loc 1 1431 0
 2525 008e 00BF     		nop
 2526              	.L154:
1439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2527              		.loc 1 1440 0
 2528 0090 1837     		adds	r7, r7, #24
 2529              	.LCFI120:
 2530              		.cfi_def_cfa_offset 8
 2531 0092 BD46     		mov	sp, r7
 2532              	.LCFI121:
 2533              		.cfi_def_cfa_register 13
 2534              		@ sp needed
 2535 0094 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cc946aYs.s 			page 74


 2536              		.cfi_endproc
 2537              	.LFE53:
 2539 0096 00BF     		.section	.text.prvAllowIPPacket,"ax",%progbits
 2540              		.align	2
 2541              		.thumb
 2542              		.thumb_func
 2544              	prvAllowIPPacket:
 2545              	.LFB54:
1441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
1444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
1445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2546              		.loc 1 1445 0
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 32
 2549              		@ frame_needed = 1, uses_anonymous_args = 0
 2550              		@ link register save eliminated.
 2551 0000 80B4     		push	{r7}
 2552              	.LCFI122:
 2553              		.cfi_def_cfa_offset 4
 2554              		.cfi_offset 7, -4
 2555 0002 89B0     		sub	sp, sp, #36
 2556              	.LCFI123:
 2557              		.cfi_def_cfa_offset 40
 2558 0004 00AF     		add	r7, sp, #0
 2559              	.LCFI124:
 2560              		.cfi_def_cfa_register 7
 2561 0006 F860     		str	r0, [r7, #12]
 2562 0008 B960     		str	r1, [r7, #8]
 2563 000a 7A60     		str	r2, [r7, #4]
1446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn = eProcessBuffer;
 2564              		.loc 1 1446 0
 2565 000c 0123     		movs	r3, #1
 2566 000e FB77     		strb	r3, [r7, #31]
1447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM =
1449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 2567              		.loc 1 1449 0
 2568 0010 FB68     		ldr	r3, [r7, #12]
 2569 0012 0E33     		adds	r3, r3, #14
 2570 0014 BB61     		str	r3, [r7, #24]
 2571              	.LBB31:
1450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #else
1451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* or else, the parameter won't be used and the function will be optimised
1452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	away */
1453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	( void ) pxIPPacket;
1454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
1457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* In systems with a very small amount of RAM, it might be advantageous
1459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		to have incoming messages checked earlier, by the network card driver.
1460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		This method may decrease the usage of sparse network buffers. */
1461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 2572              		.loc 1 1461 0
 2573 0016 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cc946aYs.s 			page 75


 2574 0018 1B69     		ldr	r3, [r3, #16]	@ unaligned
 2575 001a 7B61     		str	r3, [r7, #20]
1462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Ensure that the incoming packet is not fragmented (only outgoing
1464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			packets can be fragmented) as these are the only handled IP frames
1465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			currently. */
1466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 2576              		.loc 1 1466 0
 2577 001c BB69     		ldr	r3, [r7, #24]
 2578 001e DB88     		ldrh	r3, [r3, #6]	@ unaligned
 2579 0020 9BB2     		uxth	r3, r3
 2580 0022 1A46     		mov	r2, r3
 2581 0024 4FF60F73 		movw	r3, #65295
 2582 0028 1340     		ands	r3, r3, r2
 2583 002a 002B     		cmp	r3, #0
 2584 002c 02D0     		beq	.L169
1467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Can not handle, fragmented packet. */
1469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
 2585              		.loc 1 1469 0
 2586 002e 0023     		movs	r3, #0
 2587 0030 FB77     		strb	r3, [r7, #31]
 2588 0032 22E0     		b	.L170
 2589              	.L169:
1470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
1472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
1473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 
 2590              		.loc 1 1473 0
 2591 0034 BB69     		ldr	r3, [r7, #24]
 2592 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2593 0038 442B     		cmp	r3, #68
 2594 003a 03D9     		bls	.L171
 2595              		.loc 1 1473 0 is_stmt 0 discriminator 1
 2596 003c BB69     		ldr	r3, [r7, #24]
 2597 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2598 0040 4F2B     		cmp	r3, #79
 2599 0042 02D9     		bls	.L172
 2600              	.L171:
1474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Can not handle, unknown or invalid header version. */
1476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
 2601              		.loc 1 1476 0 is_stmt 1
 2602 0044 0023     		movs	r3, #0
 2603 0046 FB77     		strb	r3, [r7, #31]
 2604 0048 17E0     		b	.L170
 2605              	.L172:
1477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is the packet for this IP address? */
1479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 2606              		.loc 1 1479 0
 2607 004a 0F4B     		ldr	r3, .L174
 2608 004c 5A69     		ldr	r2, [r3, #20]
 2609 004e 7B69     		ldr	r3, [r7, #20]
 2610 0050 9A42     		cmp	r2, r3
 2611 0052 12D0     		beq	.L170
 2612              		.loc 1 1479 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc946aYs.s 			page 76


 2613 0054 7B69     		ldr	r3, [r7, #20]
 2614 0056 B3F1FF3F 		cmp	r3, #-1
 2615 005a 0ED0     		beq	.L170
1480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it the global broadcast address 255.255.255.255 ? */
1481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
1482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it a specific broadcast address 192.168.1.255 ? */
1483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 2616              		.loc 1 1483 0 is_stmt 1
 2617 005c 0B4B     		ldr	r3, .L174+4
 2618 005e 1A69     		ldr	r2, [r3, #16]
1481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it a specific broadcast address 192.168.1.255 ? */
 2619              		.loc 1 1481 0
 2620 0060 7B69     		ldr	r3, [r7, #20]
 2621 0062 9A42     		cmp	r2, r3
 2622 0064 09D0     		beq	.L170
 2623              		.loc 1 1483 0
 2624 0066 7B69     		ldr	r3, [r7, #20]
 2625 0068 094A     		ldr	r2, .L174+8
 2626 006a 9342     		cmp	r3, r2
 2627 006c 05D0     		beq	.L170
1484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#if( ipconfigUSE_LLMNR == 1 )
1485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Is it the LLMNR multicast address? */
1486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
1487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif
1488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Or (during DHCP negotiation) we have no IP-address yet? */
1489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 2628              		.loc 1 1489 0
 2629 006e 064B     		ldr	r3, .L174
 2630 0070 5B69     		ldr	r3, [r3, #20]
1486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			#endif
 2631              		.loc 1 1486 0
 2632 0072 002B     		cmp	r3, #0
 2633 0074 01D0     		beq	.L170
1490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Packet is not for this node, release it */
1492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
 2634              		.loc 1 1492 0
 2635 0076 0023     		movs	r3, #0
 2636 0078 FB77     		strb	r3, [r7, #31]
 2637              	.L170:
 2638              	.LBE31:
1493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
1496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 )
1498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Some drivers of NIC's with checksum-offloading will enable the above
1500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		define, so that the checksum won't be checked again here */
1501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if (eReturn == eProcessBuffer )
1502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Is the IP header checksum correct? */
1504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ( pxIPHeader->ucProtocol != ( uint8_t ) ipPROTOCOL_ICMP ) &&
1505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ( size_t ) uxH
1506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Check sum in IP-header not correct. */
1508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
ARM GAS  /tmp/cc946aYs.s 			page 77


1509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Is the upper-layer checksum (TCP/UDP/ICMP) correct? */
1511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else if( usGenerateProtocolChecksum( ( uint8_t * )( pxNetworkBuffer->pucEthernetBuffer ), pdFALS
1512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Protocol checksum not accepted. */
1514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eReturn = eReleaseBuffer;
1515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#else
1519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* to avoid warning unused parameters */
1521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) pxNetworkBuffer;
1522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( void ) uxHeaderLength;
1523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
1525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
 2639              		.loc 1 1526 0
 2640 007a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2641              		.loc 1 1527 0
 2642 007c 1846     		mov	r0, r3
 2643 007e 2437     		adds	r7, r7, #36
 2644              	.LCFI125:
 2645              		.cfi_def_cfa_offset 4
 2646 0080 BD46     		mov	sp, r7
 2647              	.LCFI126:
 2648              		.cfi_def_cfa_register 13
 2649              		@ sp needed
 2650 0082 5DF8047B 		ldr	r7, [sp], #4
 2651              	.LCFI127:
 2652              		.cfi_restore 7
 2653              		.cfi_def_cfa_offset 0
 2654 0086 7047     		bx	lr
 2655              	.L175:
 2656              		.align	2
 2657              	.L174:
 2658 0088 00000000 		.word	xDefaultPartUDPPacketHeader
 2659 008c 00000000 		.word	xNetworkAddressing
 2660 0090 E00000FC 		.word	-67108640
 2661              		.cfi_endproc
 2662              	.LFE54:
 2664              		.section	.text.prvProcessIPPacket,"ax",%progbits
 2665              		.align	2
 2666              		.thumb
 2667              		.thumb_func
 2669              	prvProcessIPPacket:
 2670              	.LFB55:
1528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * const pxIPPacket, NetworkBuf
1531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 2671              		.loc 1 1531 0
 2672              		.cfi_startproc
 2673              		@ args = 0, pretend = 0, frame = 48
 2674              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc946aYs.s 			page 78


 2675 0000 80B5     		push	{r7, lr}
 2676              	.LCFI128:
 2677              		.cfi_def_cfa_offset 8
 2678              		.cfi_offset 7, -8
 2679              		.cfi_offset 14, -4
 2680 0002 8CB0     		sub	sp, sp, #48
 2681              	.LCFI129:
 2682              		.cfi_def_cfa_offset 56
 2683 0004 00AF     		add	r7, sp, #0
 2684              	.LCFI130:
 2685              		.cfi_def_cfa_register 7
 2686 0006 7860     		str	r0, [r7, #4]
 2687 0008 3960     		str	r1, [r7]
1532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** eFrameProcessingResult_t eReturn;
1533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 2688              		.loc 1 1533 0
 2689 000a 7B68     		ldr	r3, [r7, #4]
 2690 000c 0E33     		adds	r3, r3, #14
 2691 000e BB62     		str	r3, [r7, #40]
1534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 )
 2692              		.loc 1 1534 0
 2693 0010 BB6A     		ldr	r3, [r7, #40]
 2694 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2695 0014 03F00F03 		and	r3, r3, #15
 2696 0018 9B00     		lsls	r3, r3, #2
 2697 001a 7B62     		str	r3, [r7, #36]
1535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t ucProtocol;
1536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 2698              		.loc 1 1537 0
 2699 001c 7B68     		ldr	r3, [r7, #4]
 2700 001e DB7D     		ldrb	r3, [r3, #23]
 2701 0020 87F82330 		strb	r3, [r7, #35]
1538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Check if the IP headers are acceptable and if it has our destination. */
1539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 2702              		.loc 1 1539 0
 2703 0024 7868     		ldr	r0, [r7, #4]
 2704 0026 3968     		ldr	r1, [r7]
 2705 0028 7A6A     		ldr	r2, [r7, #36]
 2706 002a FFF7FEFF 		bl	prvAllowIPPacket
 2707 002e 0346     		mov	r3, r0
 2708 0030 87F82F30 		strb	r3, [r7, #47]
1540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( eReturn == eProcessBuffer )
 2709              		.loc 1 1541 0
 2710 0034 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2711 0038 012B     		cmp	r3, #1
 2712 003a 40F08180 		bne	.L177
1542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 2713              		.loc 1 1543 0
 2714 003e 7B6A     		ldr	r3, [r7, #36]
 2715 0040 142B     		cmp	r3, #20
 2716 0042 1AD9     		bls	.L178
 2717              	.LBB32:
1544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* All structs of headers expect a IP header size of 20 bytes
ARM GAS  /tmp/cc946aYs.s 			page 79


1546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * IP header options were included, we'll ignore them and cut them out
1547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * Note: IP options are mostly use in Multi-cast protocols */
1548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 2718              		.loc 1 1548 0
 2719 0044 7B6A     		ldr	r3, [r7, #36]
 2720 0046 143B     		subs	r3, r3, #20
 2721 0048 FB61     		str	r3, [r7, #28]
1549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* From: the previous start of UDP/ICMP/TCP data */
1550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uint8_t *pucSource = ( ( uint8_t * ) pxIPHeader ) + uxHeaderLength;
 2722              		.loc 1 1550 0
 2723 004a BA6A     		ldr	r2, [r7, #40]
 2724 004c 7B6A     		ldr	r3, [r7, #36]
 2725 004e 1344     		add	r3, r3, r2
 2726 0050 BB61     		str	r3, [r7, #24]
1551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* To: the usual start of UDP/ICMP/TCP data at offset 20 from IP header */
1552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			uint8_t *pucTarget = ( ( uint8_t * ) pxIPHeader ) + ipSIZE_OF_IPv4_HEADER;
 2727              		.loc 1 1552 0
 2728 0052 BB6A     		ldr	r3, [r7, #40]
 2729 0054 1433     		adds	r3, r3, #20
 2730 0056 7B61     		str	r3, [r7, #20]
1553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* How many: total length minus the options and the lower headers */
1554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_
 2731              		.loc 1 1554 0
 2732 0058 3B68     		ldr	r3, [r7]
 2733 005a DA69     		ldr	r2, [r3, #28]
 2734 005c FB69     		ldr	r3, [r7, #28]
 2735 005e D31A     		subs	r3, r2, r3
 2736 0060 223B     		subs	r3, r3, #34
 2737 0062 3B61     		str	r3, [r7, #16]
1555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			memmove( pucTarget, pucSource, xMoveLen );
 2738              		.loc 1 1556 0
 2739 0064 7869     		ldr	r0, [r7, #20]
 2740 0066 B969     		ldr	r1, [r7, #24]
 2741 0068 3A69     		ldr	r2, [r7, #16]
 2742 006a FFF7FEFF 		bl	memmove
1557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNetworkBuffer->xDataLength -= optlen;
 2743              		.loc 1 1557 0
 2744 006e 3B68     		ldr	r3, [r7]
 2745 0070 DA69     		ldr	r2, [r3, #28]
 2746 0072 FB69     		ldr	r3, [r7, #28]
 2747 0074 D21A     		subs	r2, r2, r3
 2748 0076 3B68     		ldr	r3, [r7]
 2749 0078 DA61     		str	r2, [r3, #28]
 2750              	.L178:
 2751              	.LBE32:
1558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Add the IP and MAC addresses to the ARP table if they are not
1560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		already there - otherwise refresh the age of the existing
1561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		entry. */
1562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 2752              		.loc 1 1562 0
 2753 007a 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 2754 007e 112B     		cmp	r3, #17
 2755 0080 07D0     		beq	.L179
1563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			/* Refresh the ARP cache with the IP/MAC-address of the received packet
ARM GAS  /tmp/cc946aYs.s 			page 80


1565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * For UDP packets, this will be done later in xProcessReceivedUDPPacket()
1566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * as soon as know that the message will be handled by someone
1567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * This will prevent that the ARP cache will get overwritten
1568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 * with the IP-address of useless broadcast packets
1569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			 */
1570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAd
 2756              		.loc 1 1570 0
 2757 0082 7B68     		ldr	r3, [r7, #4]
 2758 0084 9A1D     		adds	r2, r3, #6
 2759 0086 BB6A     		ldr	r3, [r7, #40]
 2760 0088 DB68     		ldr	r3, [r3, #12]	@ unaligned
 2761 008a 1046     		mov	r0, r2
 2762 008c 1946     		mov	r1, r3
 2763 008e FFF7FEFF 		bl	vARPRefreshCacheEntry
 2764              	.L179:
1571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( ucProtocol )
 2765              		.loc 1 1572 0
 2766 0092 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 2767 0096 062B     		cmp	r3, #6
 2768 0098 43D0     		beq	.L181
 2769 009a 112B     		cmp	r3, #17
 2770 009c 13D0     		beq	.L182
 2771 009e 012B     		cmp	r3, #1
 2772 00a0 00D0     		beq	.L183
1573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipPROTOCOL_ICMP :
1575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* The IP packet contained an ICMP frame.  Don't bother
1576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				checking the ICMP checksum, as if it is wrong then the
1577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				wrong data will also be returned, and the source of the
1578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				ping will know something went wrong because it will not
1579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				be able to validate what it receives. */
1580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
1583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
1584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
1585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						eReturn = prvProcessICMPPacket( pxICMPPacket );
1586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
1587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) *
1589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipPROTOCOL_UDP :
1592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* The IP packet contained a UDP frame. */
1594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
1595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Note the header values required prior to the
1597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					checksum generation as the checksum pseudo header
1598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					may clobber some of these values. */
1599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UD
1600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* HT:endian: fields in pxNetworkBuffer (usPort, ulIPAddress) were network order */
1601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
1602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
1603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM:
ARM GAS  /tmp/cc946aYs.s 			page 81


1605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 * In some cases, the upper-layer checksum has been calculated
1606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					 * by the NIC driver */
1607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Pass the packet payload to the UDP sockets implementation. */
1608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* HT:endian: xProcessReceivedUDPPacket wanted network order */
1609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xProcessReceivedUDPPacket( pxNetworkBuffer, pxUDPPacket->xUDPHeader.usDestinationPort ) ==
1610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
1611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						eReturn = eFrameConsumed;
1612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
1613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ipconfigUSE_TCP == 1
1617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipPROTOCOL_TCP :
1618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
1621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
1622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 						eReturn = eFrameConsumed;
1623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
1624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* Setting this variable will cause xTCPTimerCheck()
1626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					to be called just before the IP-task blocks. */
1627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					xProcessedTCPMessage++;
1628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default	:
1632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				/* Not a supported frame type. */
1633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2773              		.loc 1 1633 0
 2774 00a2 4DE0     		b	.L177
 2775              	.L183:
 2776              	.LBB33:
1582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 2777              		.loc 1 1582 0
 2778 00a4 3B68     		ldr	r3, [r7]
 2779 00a6 9B69     		ldr	r3, [r3, #24]
 2780 00a8 FB60     		str	r3, [r7, #12]
1583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 2781              		.loc 1 1583 0
 2782 00aa BB6A     		ldr	r3, [r7, #40]
 2783 00ac 1A69     		ldr	r2, [r3, #16]	@ unaligned
 2784 00ae 274B     		ldr	r3, .L188
 2785 00b0 5B69     		ldr	r3, [r3, #20]
 2786 00b2 9A42     		cmp	r2, r3
 2787 00b4 06D1     		bne	.L184
1585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2788              		.loc 1 1585 0
 2789 00b6 F868     		ldr	r0, [r7, #12]
 2790 00b8 FFF7FEFF 		bl	prvProcessICMPPacket
 2791 00bc 0346     		mov	r3, r0
 2792 00be 87F82F30 		strb	r3, [r7, #47]
 2793              	.LBE33:
1589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2794              		.loc 1 1589 0
 2795 00c2 3DE0     		b	.L177
 2796              	.L184:
ARM GAS  /tmp/cc946aYs.s 			page 82


 2797 00c4 3CE0     		b	.L177
 2798              	.L182:
 2799              	.LBB34:
1594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2800              		.loc 1 1594 0
 2801 00c6 3B68     		ldr	r3, [r7]
 2802 00c8 9B69     		ldr	r3, [r3, #24]
 2803 00ca BB60     		str	r3, [r7, #8]
1599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					/* HT:endian: fields in pxNetworkBuffer (usPort, ulIPAddress) were network order */
 2804              		.loc 1 1599 0
 2805 00cc BB68     		ldr	r3, [r7, #8]
 2806 00ce DB8C     		ldrh	r3, [r3, #38]	@ unaligned
 2807 00d0 9BB2     		uxth	r3, r3
 2808 00d2 1B02     		lsls	r3, r3, #8
 2809 00d4 9AB2     		uxth	r2, r3
 2810 00d6 BB68     		ldr	r3, [r7, #8]
 2811 00d8 DB8C     		ldrh	r3, [r3, #38]	@ unaligned
 2812 00da 9BB2     		uxth	r3, r3
 2813 00dc 1B0A     		lsrs	r3, r3, #8
 2814 00de 9BB2     		uxth	r3, r3
 2815 00e0 9BB2     		uxth	r3, r3
 2816 00e2 1343     		orrs	r3, r3, r2
 2817 00e4 9BB2     		uxth	r3, r3
 2818 00e6 9BB2     		uxth	r3, r3
 2819 00e8 A3F10802 		sub	r2, r3, #8
 2820 00ec 3B68     		ldr	r3, [r7]
 2821 00ee DA61     		str	r2, [r3, #28]
1601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 2822              		.loc 1 1601 0
 2823 00f0 BB68     		ldr	r3, [r7, #8]
 2824 00f2 5B8C     		ldrh	r3, [r3, #34]	@ unaligned
 2825 00f4 9AB2     		uxth	r2, r3
 2826 00f6 3B68     		ldr	r3, [r7]
 2827 00f8 1A84     		strh	r2, [r3, #32]	@ movhi
1602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 2828              		.loc 1 1602 0
 2829 00fa BB68     		ldr	r3, [r7, #8]
 2830 00fc D3F81A20 		ldr	r2, [r3, #26]	@ unaligned
 2831 0100 3B68     		ldr	r3, [r7]
 2832 0102 5A61     		str	r2, [r3, #20]
1609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 2833              		.loc 1 1609 0
 2834 0104 BB68     		ldr	r3, [r7, #8]
 2835 0106 9B8C     		ldrh	r3, [r3, #36]	@ unaligned
 2836 0108 9BB2     		uxth	r3, r3
 2837 010a 3868     		ldr	r0, [r7]
 2838 010c 1946     		mov	r1, r3
 2839 010e FFF7FEFF 		bl	xProcessReceivedUDPPacket
 2840 0112 0346     		mov	r3, r0
 2841 0114 012B     		cmp	r3, #1
 2842 0116 03D1     		bne	.L185
1611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2843              		.loc 1 1611 0
 2844 0118 0323     		movs	r3, #3
 2845 011a 87F82F30 		strb	r3, [r7, #47]
 2846              	.LBE34:
1614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
ARM GAS  /tmp/cc946aYs.s 			page 83


 2847              		.loc 1 1614 0
 2848 011e 0FE0     		b	.L177
 2849              	.L185:
 2850 0120 0EE0     		b	.L177
 2851              	.L181:
1620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					{
 2852              		.loc 1 1620 0
 2853 0122 3868     		ldr	r0, [r7]
 2854 0124 FFF7FEFF 		bl	xProcessReceivedTCPPacket
 2855 0128 0346     		mov	r3, r0
 2856 012a 012B     		cmp	r3, #1
 2857 012c 02D1     		bne	.L186
1622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					}
 2858              		.loc 1 1622 0
 2859 012e 0323     		movs	r3, #3
 2860 0130 87F82F30 		strb	r3, [r7, #47]
 2861              	.L186:
1627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 2862              		.loc 1 1627 0
 2863 0134 064B     		ldr	r3, .L188+4
 2864 0136 1B68     		ldr	r3, [r3]
 2865 0138 0133     		adds	r3, r3, #1
 2866 013a 054A     		ldr	r2, .L188+4
 2867 013c 1360     		str	r3, [r2]
1629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
 2868              		.loc 1 1629 0
 2869 013e 00BF     		nop
 2870              	.L177:
1634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return eReturn;
 2871              		.loc 1 1637 0
 2872 0140 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
1638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 2873              		.loc 1 1638 0
 2874 0144 1846     		mov	r0, r3
 2875 0146 3037     		adds	r7, r7, #48
 2876              	.LCFI131:
 2877              		.cfi_def_cfa_offset 8
 2878 0148 BD46     		mov	sp, r7
 2879              	.LCFI132:
 2880              		.cfi_def_cfa_register 13
 2881              		@ sp needed
 2882 014a 80BD     		pop	{r7, pc}
 2883              	.L189:
 2884              		.align	2
 2885              	.L188:
 2886 014c 00000000 		.word	xDefaultPartUDPPacketHeader
 2887 0150 00000000 		.word	xProcessedTCPMessage
 2888              		.cfi_endproc
 2889              	.LFE55:
 2891              		.section	.text.prvProcessICMPEchoReply,"ax",%progbits
 2892              		.align	2
 2893              		.thumb
 2894              		.thumb_func
 2896              	prvProcessICMPEchoReply:
ARM GAS  /tmp/cc946aYs.s 			page 84


 2897              	.LFB56:
1639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
1644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 2898              		.loc 1 1644 0
 2899              		.cfi_startproc
 2900              		@ args = 0, pretend = 0, frame = 24
 2901              		@ frame_needed = 1, uses_anonymous_args = 0
 2902 0000 80B5     		push	{r7, lr}
 2903              	.LCFI133:
 2904              		.cfi_def_cfa_offset 8
 2905              		.cfi_offset 7, -8
 2906              		.cfi_offset 14, -4
 2907 0002 86B0     		sub	sp, sp, #24
 2908              	.LCFI134:
 2909              		.cfi_def_cfa_offset 32
 2910 0004 00AF     		add	r7, sp, #0
 2911              	.LCFI135:
 2912              		.cfi_def_cfa_register 7
 2913 0006 7860     		str	r0, [r7, #4]
1645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ePingReplyStatus_t eStatus = eSuccess;
 2914              		.loc 1 1645 0
 2915 0008 0023     		movs	r3, #0
 2916 000a FB75     		strb	r3, [r7, #23]
1646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usDataLength, usCount;
1647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint8_t *pucByte;
1648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Find the total length of the IP packet. */
1650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = pxICMPPacket->xIPHeader.usLength;
 2917              		.loc 1 1650 0
 2918 000c 7B68     		ldr	r3, [r7, #4]
 2919 000e 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 2920 0010 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2921 0012 1B02     		lsls	r3, r3, #8
 2922 0014 1343     		orrs	r3, r3, r2
 2923 0016 FB81     		strh	r3, [r7, #14]	@ movhi
1651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = FreeRTOS_ntohs( usDataLength );
 2924              		.loc 1 1651 0
 2925 0018 FB89     		ldrh	r3, [r7, #14]
 2926 001a 1B02     		lsls	r3, r3, #8
 2927 001c 9AB2     		uxth	r2, r3
 2928 001e FB89     		ldrh	r3, [r7, #14]
 2929 0020 1B0A     		lsrs	r3, r3, #8
 2930 0022 9BB2     		uxth	r3, r3
 2931 0024 9BB2     		uxth	r3, r3
 2932 0026 1343     		orrs	r3, r3, r2
 2933 0028 9BB2     		uxth	r3, r3
 2934 002a FB81     		strh	r3, [r7, #14]	@ movhi
1652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Remove the length of the IP headers to obtain the length of the ICMP
1654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		message itself. */
1655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 2935              		.loc 1 1655 0
 2936 002c FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/cc946aYs.s 			page 85


 2937 002e 143B     		subs	r3, r3, #20
 2938 0030 FB81     		strh	r3, [r7, #14]	@ movhi
1656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Remove the length of the ICMP header, to obtain the length of
1658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		data contained in the ping. */
1659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 2939              		.loc 1 1659 0
 2940 0032 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2941 0034 083B     		subs	r3, r3, #8
 2942 0036 FB81     		strh	r3, [r7, #14]	@ movhi
1660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Checksum has already been checked before in prvProcessIPPacket */
1662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Find the first byte of the data within the ICMP packet. */
1664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucByte = ( uint8_t * ) pxICMPPacket;
 2943              		.loc 1 1664 0
 2944 0038 7B68     		ldr	r3, [r7, #4]
 2945 003a 3B61     		str	r3, [r7, #16]
1665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pucByte += sizeof( ICMPPacket_t );
 2946              		.loc 1 1665 0
 2947 003c 3B69     		ldr	r3, [r7, #16]
 2948 003e 2A33     		adds	r3, r3, #42
 2949 0040 3B61     		str	r3, [r7, #16]
1666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Check each byte. */
1668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		for( usCount = 0; usCount < usDataLength; usCount++ )
 2950              		.loc 1 1668 0
 2951 0042 0023     		movs	r3, #0
 2952 0044 BB82     		strh	r3, [r7, #20]	@ movhi
 2953 0046 0CE0     		b	.L191
 2954              	.L194:
1669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( *pucByte != ipECHO_DATA_FILL_BYTE )
 2955              		.loc 1 1670 0
 2956 0048 3B69     		ldr	r3, [r7, #16]
 2957 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2958 004c 782B     		cmp	r3, #120
 2959 004e 02D0     		beq	.L192
1671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				eStatus = eInvalidData;
 2960              		.loc 1 1672 0
 2961 0050 0223     		movs	r3, #2
 2962 0052 FB75     		strb	r3, [r7, #23]
1673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 2963              		.loc 1 1673 0
 2964 0054 09E0     		b	.L193
 2965              	.L192:
1674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pucByte++;
 2966              		.loc 1 1676 0 discriminator 2
 2967 0056 3B69     		ldr	r3, [r7, #16]
 2968 0058 0133     		adds	r3, r3, #1
 2969 005a 3B61     		str	r3, [r7, #16]
1668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2970              		.loc 1 1668 0 discriminator 2
 2971 005c BB8A     		ldrh	r3, [r7, #20]
ARM GAS  /tmp/cc946aYs.s 			page 86


 2972 005e 0133     		adds	r3, r3, #1
 2973 0060 BB82     		strh	r3, [r7, #20]	@ movhi
 2974              	.L191:
1668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
 2975              		.loc 1 1668 0 is_stmt 0 discriminator 1
 2976 0062 BA8A     		ldrh	r2, [r7, #20]
 2977 0064 FB89     		ldrh	r3, [r7, #14]
 2978 0066 9A42     		cmp	r2, r3
 2979 0068 EED3     		bcc	.L194
 2980              	.L193:
1677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Call back into the application to pass it the result. */
1680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 2981              		.loc 1 1680 0 is_stmt 1
 2982 006a 7B68     		ldr	r3, [r7, #4]
 2983 006c DB8C     		ldrh	r3, [r3, #38]	@ unaligned
 2984 006e 9BB2     		uxth	r3, r3
 2985 0070 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2986 0072 1046     		mov	r0, r2
 2987 0074 1946     		mov	r1, r3
 2988 0076 FFF7FEFF 		bl	vApplicationPingReplyHook
1681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 2989              		.loc 1 1681 0
 2990 007a 1837     		adds	r7, r7, #24
 2991              	.LCFI136:
 2992              		.cfi_def_cfa_offset 8
 2993 007c BD46     		mov	sp, r7
 2994              	.LCFI137:
 2995              		.cfi_def_cfa_register 13
 2996              		@ sp needed
 2997 007e 80BD     		pop	{r7, pc}
 2998              		.cfi_endproc
 2999              	.LFE56:
 3001              		.section	.text.prvProcessICMPEchoRequest,"ax",%progbits
 3002              		.align	2
 3003              		.thumb
 3004              		.thumb_func
 3006              	prvProcessICMPEchoRequest:
 3007              	.LFB57:
1682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
1687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
1689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3008              		.loc 1 1689 0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 24
 3011              		@ frame_needed = 1, uses_anonymous_args = 0
 3012              		@ link register save eliminated.
 3013 0000 80B4     		push	{r7}
 3014              	.LCFI138:
 3015              		.cfi_def_cfa_offset 4
 3016              		.cfi_offset 7, -4
ARM GAS  /tmp/cc946aYs.s 			page 87


 3017 0002 87B0     		sub	sp, sp, #28
 3018              	.LCFI139:
 3019              		.cfi_def_cfa_offset 32
 3020 0004 00AF     		add	r7, sp, #0
 3021              	.LCFI140:
 3022              		.cfi_def_cfa_register 7
 3023 0006 7860     		str	r0, [r7, #4]
1690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ICMPHeader_t *pxICMPHeader;
1691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	IPHeader_t *pxIPHeader;
1692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uint16_t usRequest;
1693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 3024              		.loc 1 1694 0
 3025 0008 7B68     		ldr	r3, [r7, #4]
 3026 000a 2233     		adds	r3, r3, #34
 3027 000c 7B61     		str	r3, [r7, #20]
1695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader = &( pxICMPPacket->xIPHeader );
 3028              		.loc 1 1695 0
 3029 000e 7B68     		ldr	r3, [r7, #4]
 3030 0010 0E33     		adds	r3, r3, #14
 3031 0012 3B61     		str	r3, [r7, #16]
1696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* HT:endian: changed back */
1698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceSENDING_PING_REPLY( pxIPHeader->ulSourceIPAddress );
1699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* The checksum can be checked here - but a ping reply should be
1701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		returned even if the checksum is incorrect so the other end can
1702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		tell that the ping was received - even if the ping reply contains
1703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		invalid data. */
1704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 3032              		.loc 1 1704 0
 3033 0014 7B69     		ldr	r3, [r7, #20]
 3034 0016 0022     		movs	r2, #0
 3035 0018 1A70     		strb	r2, [r3]
1705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 3036              		.loc 1 1705 0
 3037 001a 3B69     		ldr	r3, [r7, #16]
 3038 001c DA68     		ldr	r2, [r3, #12]	@ unaligned
 3039 001e 3B69     		ldr	r3, [r7, #16]
 3040 0020 1A61     		str	r2, [r3, #16]	@ unaligned
1706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 3041              		.loc 1 1706 0
 3042 0022 224B     		ldr	r3, .L199
 3043 0024 5A69     		ldr	r2, [r3, #20]
 3044 0026 3B69     		ldr	r3, [r7, #16]
 3045 0028 DA60     		str	r2, [r3, #12]	@ unaligned
1707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Update the checksum because the ucTypeOfMessage member in the header
1709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
1710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usGenerateChecksum(). */
1711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* due to compiler warning "integer operation result is out of range" */
1713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 3046              		.loc 1 1714 0
 3047 002a 4FF40063 		mov	r3, #2048
 3048 002e FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/cc946aYs.s 			page 88


1715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 3049              		.loc 1 1716 0
 3050 0030 7B69     		ldr	r3, [r7, #20]
 3051 0032 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 3052 0034 9AB2     		uxth	r2, r3
 3053 0036 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3054 0038 DB43     		mvns	r3, r3
 3055 003a 9BB2     		uxth	r3, r3
 3056 003c 1B02     		lsls	r3, r3, #8
 3057 003e 99B2     		uxth	r1, r3
 3058 0040 F889     		ldrh	r0, [r7, #14]
 3059 0042 4FF6FF73 		movw	r3, #65535
 3060 0046 1B1A     		subs	r3, r3, r0
 3061 0048 1B0A     		lsrs	r3, r3, #8
 3062 004a 9BB2     		uxth	r3, r3
 3063 004c 0B43     		orrs	r3, r3, r1
 3064 004e 9BB2     		uxth	r3, r3
 3065 0050 9A42     		cmp	r2, r3
 3066 0052 12D3     		bcc	.L196
1717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxICMPHeader->usChecksum = ( uint16_t )
1719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 3067              		.loc 1 1719 0
 3068 0054 7B69     		ldr	r3, [r7, #20]
 3069 0056 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 3070 0058 9AB2     		uxth	r2, r3
1720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					FreeRTOS_htons( usRequest + 1UL ) );
 3071              		.loc 1 1720 0
 3072 005a FB89     		ldrh	r3, [r7, #14]	@ movhi
 3073 005c 0133     		adds	r3, r3, #1
 3074 005e 9BB2     		uxth	r3, r3
 3075 0060 1B02     		lsls	r3, r3, #8
 3076 0062 99B2     		uxth	r1, r3
 3077 0064 FB89     		ldrh	r3, [r7, #14]
 3078 0066 0133     		adds	r3, r3, #1
 3079 0068 1B0A     		lsrs	r3, r3, #8
 3080 006a 9BB2     		uxth	r3, r3
 3081 006c 0B43     		orrs	r3, r3, r1
 3082 006e 9BB2     		uxth	r3, r3
1718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 3083              		.loc 1 1718 0
 3084 0070 1344     		add	r3, r3, r2
 3085 0072 9AB2     		uxth	r2, r3
 3086 0074 7B69     		ldr	r3, [r7, #20]
 3087 0076 5A80     		strh	r2, [r3, #2]	@ unaligned
 3088 0078 10E0     		b	.L197
 3089              	.L196:
1721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
1723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxICMPHeader->usChecksum = ( uint16_t )
1725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 3090              		.loc 1 1725 0
 3091 007a 7B69     		ldr	r3, [r7, #20]
 3092 007c 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 3093 007e 9AB2     		uxth	r2, r3
ARM GAS  /tmp/cc946aYs.s 			page 89


1726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					FreeRTOS_htons( usRequest ) );
 3094              		.loc 1 1726 0
 3095 0080 FB89     		ldrh	r3, [r7, #14]
 3096 0082 1B02     		lsls	r3, r3, #8
 3097 0084 99B2     		uxth	r1, r3
 3098 0086 FB89     		ldrh	r3, [r7, #14]
 3099 0088 1B0A     		lsrs	r3, r3, #8
 3100 008a 9BB2     		uxth	r3, r3
 3101 008c 9BB2     		uxth	r3, r3
 3102 008e 0B43     		orrs	r3, r3, r1
 3103 0090 9BB2     		uxth	r3, r3
 3104 0092 9BB2     		uxth	r3, r3
1724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 3105              		.loc 1 1724 0
 3106 0094 1344     		add	r3, r3, r2
 3107 0096 9AB2     		uxth	r2, r3
 3108 0098 7B69     		ldr	r3, [r7, #20]
 3109 009a 5A80     		strh	r2, [r3, #2]	@ unaligned
 3110              	.L197:
1727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return eReturnEthernetFrame;
 3111              		.loc 1 1728 0
 3112 009c 0223     		movs	r3, #2
1729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 3113              		.loc 1 1729 0
 3114 009e 1846     		mov	r0, r3
 3115 00a0 1C37     		adds	r7, r7, #28
 3116              	.LCFI141:
 3117              		.cfi_def_cfa_offset 4
 3118 00a2 BD46     		mov	sp, r7
 3119              	.LCFI142:
 3120              		.cfi_def_cfa_register 13
 3121              		@ sp needed
 3122 00a4 5DF8047B 		ldr	r7, [sp], #4
 3123              	.LCFI143:
 3124              		.cfi_restore 7
 3125              		.cfi_def_cfa_offset 0
 3126 00a8 7047     		bx	lr
 3127              	.L200:
 3128 00aa 00BF     		.align	2
 3129              	.L199:
 3130 00ac 00000000 		.word	xDefaultPartUDPPacketHeader
 3131              		.cfi_endproc
 3132              	.LFE57:
 3134              		.section	.text.prvProcessICMPPacket,"ax",%progbits
 3135              		.align	2
 3136              		.thumb
 3137              		.thumb_func
 3139              	prvProcessICMPPacket:
 3140              	.LFB58:
1730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigREPLY_TO_INCOMING_PINGS == 1 */
1732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
ARM GAS  /tmp/cc946aYs.s 			page 90


1737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3141              		.loc 1 1737 0
 3142              		.cfi_startproc
 3143              		@ args = 0, pretend = 0, frame = 16
 3144              		@ frame_needed = 1, uses_anonymous_args = 0
 3145 0000 80B5     		push	{r7, lr}
 3146              	.LCFI144:
 3147              		.cfi_def_cfa_offset 8
 3148              		.cfi_offset 7, -8
 3149              		.cfi_offset 14, -4
 3150 0002 84B0     		sub	sp, sp, #16
 3151              	.LCFI145:
 3152              		.cfi_def_cfa_offset 24
 3153 0004 00AF     		add	r7, sp, #0
 3154              	.LCFI146:
 3155              		.cfi_def_cfa_register 7
 3156 0006 7860     		str	r0, [r7, #4]
1738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 3157              		.loc 1 1738 0
 3158 0008 0023     		movs	r3, #0
 3159 000a FB73     		strb	r3, [r7, #15]
1739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		iptraceICMP_PACKET_RECEIVED();
1741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 3160              		.loc 1 1741 0
 3161 000c 7B68     		ldr	r3, [r7, #4]
 3162 000e 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 3163 0012 002B     		cmp	r3, #0
 3164 0014 08D0     		beq	.L203
 3165 0016 082B     		cmp	r3, #8
 3166 0018 00D0     		beq	.L204
1742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipICMP_ECHO_REQUEST	:
1744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
1745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
1747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
1749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			case ipICMP_ECHO_REPLY		:
1752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
1753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				{
1754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 					prvProcessICMPEchoReply( pxICMPPacket );
1755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
1756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
1757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
1758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			default	:
1760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				break;
 3167              		.loc 1 1760 0
 3168 001a 09E0     		b	.L205
 3169              	.L204:
1746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 3170              		.loc 1 1746 0
 3171 001c 7868     		ldr	r0, [r7, #4]
 3172 001e FFF7FEFF 		bl	prvProcessICMPEchoRequest
ARM GAS  /tmp/cc946aYs.s 			page 91


 3173 0022 0346     		mov	r3, r0
 3174 0024 FB73     		strb	r3, [r7, #15]
1749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 3175              		.loc 1 1749 0
 3176 0026 03E0     		b	.L205
 3177              	.L203:
1754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				}
 3178              		.loc 1 1754 0
 3179 0028 7868     		ldr	r0, [r7, #4]
 3180 002a FFF7FEFF 		bl	prvProcessICMPEchoReply
1757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
 3181              		.loc 1 1757 0
 3182 002e 00BF     		nop
 3183              	.L205:
1761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return eReturn;
 3184              		.loc 1 1763 0
 3185 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 3186              		.loc 1 1764 0
 3187 0032 1846     		mov	r0, r3
 3188 0034 1037     		adds	r7, r7, #16
 3189              	.LCFI147:
 3190              		.cfi_def_cfa_offset 8
 3191 0036 BD46     		mov	sp, r7
 3192              	.LCFI148:
 3193              		.cfi_def_cfa_register 13
 3194              		@ sp needed
 3195 0038 80BD     		pop	{r7, pc}
 3196              		.cfi_endproc
 3197              	.LFE58:
 3199 003a 00BF     		.section	.text.usGenerateProtocolChecksum,"ax",%progbits
 3200              		.align	2
 3201              		.global	usGenerateProtocolChecksum
 3202              		.thumb
 3203              		.thumb_func
 3205              	usGenerateProtocolChecksum:
 3206              	.LFB59:
1765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
1767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, BaseType_t xOutgoingP
1770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3207              		.loc 1 1770 0
 3208              		.cfi_startproc
 3209              		@ args = 0, pretend = 0, frame = 40
 3210              		@ frame_needed = 1, uses_anonymous_args = 0
 3211 0000 80B5     		push	{r7, lr}
 3212              	.LCFI149:
 3213              		.cfi_def_cfa_offset 8
 3214              		.cfi_offset 7, -8
 3215              		.cfi_offset 14, -4
 3216 0002 8AB0     		sub	sp, sp, #40
 3217              	.LCFI150:
 3218              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/cc946aYs.s 			page 92


 3219 0004 00AF     		add	r7, sp, #0
 3220              	.LCFI151:
 3221              		.cfi_def_cfa_register 7
 3222 0006 7860     		str	r0, [r7, #4]
 3223 0008 3960     		str	r1, [r7]
1771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulLength;
1772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usChecksum, *pusChecksum;
1773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const IPPacket_t * pxIPPacket;
1774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** UBaseType_t uxIPHeaderLength;
1775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** ProtocolPacket_t *pxProtPack;
1776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint8_t ucProtocol;
1777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
1778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	const char *pcType;
1779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
1780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxIPPacket = ( const IPPacket_t * ) pucEthernetBuffer;
 3224              		.loc 1 1781 0
 3225 000a 7B68     		ldr	r3, [r7, #4]
 3226 000c FB61     		str	r3, [r7, #28]
1782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uxIPHeaderLength = ( UBaseType_t ) ( 4u * ( pxIPPacket->xIPHeader.ucVersionHeaderLength & 0x0Fu ) 
 3227              		.loc 1 1782 0
 3228 000e FB69     		ldr	r3, [r7, #28]
 3229 0010 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 3230 0012 03F00F03 		and	r3, r3, #15
 3231 0016 9B00     		lsls	r3, r3, #2
 3232 0018 BB61     		str	r3, [r7, #24]
1783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	pxProtPack = ( ProtocolPacket_t * ) ( pucEthernetBuffer + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEAD
 3233              		.loc 1 1783 0
 3234 001a BB69     		ldr	r3, [r7, #24]
 3235 001c 143B     		subs	r3, r3, #20
 3236 001e 7A68     		ldr	r2, [r7, #4]
 3237 0020 1344     		add	r3, r3, r2
 3238 0022 7B61     		str	r3, [r7, #20]
1784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 3239              		.loc 1 1784 0
 3240 0024 FB69     		ldr	r3, [r7, #28]
 3241 0026 DB7D     		ldrb	r3, [r3, #23]
 3242 0028 FB74     		strb	r3, [r7, #19]
1785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 3243              		.loc 1 1786 0
 3244 002a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3245 002c 112B     		cmp	r3, #17
 3246 002e 03D1     		bne	.L208
1787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 3247              		.loc 1 1788 0
 3248 0030 7B69     		ldr	r3, [r7, #20]
 3249 0032 2833     		adds	r3, r3, #40
 3250 0034 3B62     		str	r3, [r7, #32]
 3251 0036 13E0     		b	.L209
 3252              	.L208:
1789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pcType = "UDP";
1792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
ARM GAS  /tmp/cc946aYs.s 			page 93


1794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 3253              		.loc 1 1795 0
 3254 0038 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3255 003a 062B     		cmp	r3, #6
 3256 003c 03D1     		bne	.L210
1796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
 3257              		.loc 1 1797 0
 3258 003e 7B69     		ldr	r3, [r7, #20]
 3259 0040 3233     		adds	r3, r3, #50
 3260 0042 3B62     		str	r3, [r7, #32]
 3261 0044 0CE0     		b	.L209
 3262              	.L210:
1798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pcType = "TCP";
1801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 3263              		.loc 1 1804 0
 3264 0046 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3265 0048 012B     		cmp	r3, #1
 3266 004a 02D0     		beq	.L211
 3267              		.loc 1 1804 0 is_stmt 0 discriminator 1
 3268 004c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3269 004e 022B     		cmp	r3, #2
 3270 0050 03D1     		bne	.L212
 3271              	.L211:
1805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
1806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
 3272              		.loc 1 1807 0 is_stmt 1
 3273 0052 7B69     		ldr	r3, [r7, #20]
 3274 0054 2433     		adds	r3, r3, #36
 3275 0056 3B62     		str	r3, [r7, #32]
 3276 0058 02E0     		b	.L209
 3277              	.L212:
1808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP )
1812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pcType = "ICMP";
1814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			else
1816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pcType = "IGMP";
1818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
1825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return ipUNHANDLED_PROTOCOL;
ARM GAS  /tmp/cc946aYs.s 			page 94


 3278              		.loc 1 1825 0
 3279 005a 44F22133 		movw	r3, #17185
 3280 005e 67E0     		b	.L213
 3281              	.L209:
1826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xOutgoingPacket != pdFALSE )
 3282              		.loc 1 1828 0
 3283 0060 3B68     		ldr	r3, [r7]
 3284 0062 002B     		cmp	r3, #0
 3285 0064 03D0     		beq	.L214
1829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* This is an outgoing packet. Before calculating the checksum, set it
1831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		to zero. */
1832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*( pusChecksum ) = 0u;
 3286              		.loc 1 1832 0
 3287 0066 3B6A     		ldr	r3, [r7, #32]
 3288 0068 0022     		movs	r2, #0
 3289 006a 1A80     		strh	r2, [r3]	@ movhi
 3290 006c 06E0     		b	.L215
 3291              	.L214:
1833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if ( *pusChecksum == 0u )
 3292              		.loc 1 1834 0
 3293 006e 3B6A     		ldr	r3, [r7, #32]
 3294 0070 1B88     		ldrh	r3, [r3]
 3295 0072 002B     		cmp	r3, #0
 3296 0074 02D1     		bne	.L215
1835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sender hasn't set the checksum, no use to calculate it. */
1837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return ipCORRECT_CRC;
 3297              		.loc 1 1837 0
 3298 0076 4FF6FF73 		movw	r3, #65535
 3299 007a 59E0     		b	.L213
 3300              	.L215:
1838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ulLength = ( uint32_t )
1841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) - ( ( uint16_t ) uxIPHeaderLength ) ); /* norm
 3301              		.loc 1 1841 0
 3302 007c FB69     		ldr	r3, [r7, #28]
 3303 007e 1B8A     		ldrh	r3, [r3, #16]	@ unaligned
 3304 0080 9BB2     		uxth	r3, r3
 3305 0082 1B02     		lsls	r3, r3, #8
 3306 0084 9AB2     		uxth	r2, r3
 3307 0086 FB69     		ldr	r3, [r7, #28]
 3308 0088 1B8A     		ldrh	r3, [r3, #16]	@ unaligned
 3309 008a 9BB2     		uxth	r3, r3
 3310 008c 1B0A     		lsrs	r3, r3, #8
 3311 008e 9BB2     		uxth	r3, r3
 3312 0090 9BB2     		uxth	r3, r3
 3313 0092 1343     		orrs	r3, r3, r2
 3314 0094 9BB2     		uxth	r3, r3
 3315 0096 9BB2     		uxth	r3, r3
 3316 0098 1A46     		mov	r2, r3
 3317 009a BB69     		ldr	r3, [r7, #24]
 3318 009c 9BB2     		uxth	r3, r3
ARM GAS  /tmp/cc946aYs.s 			page 95


 3319 009e D31A     		subs	r3, r2, r3
1840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) - ( ( uint16_t ) uxIPHeaderLength ) ); /* norm
 3320              		.loc 1 1840 0
 3321 00a0 FB60     		str	r3, [r7, #12]
1842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
 3322              		.loc 1 1843 0
 3323 00a2 FB68     		ldr	r3, [r7, #12]
 3324 00a4 072B     		cmp	r3, #7
 3325 00a6 06D9     		bls	.L216
1844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( ulLength > ( uint32_t )( ipconfigNETWORK_MTU - uxIPHeaderLength ) ) )
 3326              		.loc 1 1844 0 discriminator 1
 3327 00a8 BA69     		ldr	r2, [r7, #24]
 3328 00aa 40F2DC53 		movw	r3, #1500
 3329 00ae 9B1A     		subs	r3, r3, r2
1843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( ulLength > ( uint32_t )( ipconfigNETWORK_MTU - uxIPHeaderLength ) ) )
 3330              		.loc 1 1843 0 discriminator 1
 3331 00b0 FA68     		ldr	r2, [r7, #12]
 3332 00b2 9342     		cmp	r3, r2
 3333 00b4 02D2     		bcs	.L217
 3334              	.L216:
1845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: len invalid: %lu\n", pcType, ulLength 
1849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Again, in a 16-bit return value there is no space to indicate an
1853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		error.  For incoming packets, 0x1234 will cause dropping of the packet.
1854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		For outgoing packets, there is a serious problem with the
1855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		format/length */
1856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		return ipINVALID_LENGTH;
 3335              		.loc 1 1856 0
 3336 00b6 41F23423 		movw	r3, #4660
 3337 00ba 39E0     		b	.L213
 3338              	.L217:
1857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 3339              		.loc 1 1858 0
 3340 00bc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3341 00be 022B     		cmp	r3, #2
 3342 00c0 0AD8     		bhi	.L218
1859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
1861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = ( uint16_t )
1862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ~usGenerateChecksum( 0UL,
1863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 3343              		.loc 1 1863 0
 3344 00c2 7B69     		ldr	r3, [r7, #20]
 3345 00c4 2233     		adds	r3, r3, #34
1862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 3346              		.loc 1 1862 0
 3347 00c6 0020     		movs	r0, #0
 3348 00c8 1946     		mov	r1, r3
 3349 00ca FA68     		ldr	r2, [r7, #12]
 3350 00cc FFF7FEFF 		bl	usGenerateChecksum
ARM GAS  /tmp/cc946aYs.s 			page 96


 3351 00d0 0346     		mov	r3, r0
1861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ~usGenerateChecksum( 0UL,
 3352              		.loc 1 1861 0
 3353 00d2 DB43     		mvns	r3, r3
 3354 00d4 FB84     		strh	r3, [r7, #38]	@ movhi
 3355 00d6 13E0     		b	.L219
 3356              	.L218:
1864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
1868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		fields */
1869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 3357              		.loc 1 1869 0
 3358 00d8 FB68     		ldr	r3, [r7, #12]
 3359 00da 9AB2     		uxth	r2, r3
 3360 00dc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3361 00de 9BB2     		uxth	r3, r3
 3362 00e0 1344     		add	r3, r3, r2
 3363 00e2 FB84     		strh	r3, [r7, #38]	@ movhi
1870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* And then continue at the IPv4 source and destination addresses. */
1872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = ( uint16_t )
1873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIP
 3364              		.loc 1 1873 0
 3365 00e4 F98C     		ldrh	r1, [r7, #38]
 3366 00e6 FB69     		ldr	r3, [r7, #28]
 3367 00e8 03F11A02 		add	r2, r3, #26
1874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( 2u * sizeof( pxIPPacket->xIPHeader.ulSourceIPAddress ) + ulLength ) ) );
 3368              		.loc 1 1874 0
 3369 00ec FB68     		ldr	r3, [r7, #12]
 3370 00ee 0833     		adds	r3, r3, #8
1873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				( 2u * sizeof( pxIPPacket->xIPHeader.ulSourceIPAddress ) + ulLength ) ) );
 3371              		.loc 1 1873 0
 3372 00f0 0846     		mov	r0, r1
 3373 00f2 1146     		mov	r1, r2
 3374 00f4 1A46     		mov	r2, r3
 3375 00f6 FFF7FEFF 		bl	usGenerateChecksum
 3376 00fa 0346     		mov	r3, r0
1872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIP
 3377              		.loc 1 1872 0
 3378 00fc DB43     		mvns	r3, r3
 3379 00fe FB84     		strh	r3, [r7, #38]	@ movhi
 3380              	.L219:
1875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Sum TCP header and data. */
1877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( usChecksum == 0u )
 3381              		.loc 1 1879 0
 3382 0100 FB8C     		ldrh	r3, [r7, #38]
 3383 0102 002B     		cmp	r3, #0
 3384 0104 03D1     		bne	.L220
1880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			if( xOutgoingPacket != pdFALSE )
ARM GAS  /tmp/cc946aYs.s 			page 97


1884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
1885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecksum
1886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
1887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = ipCORRECT_CRC;
 3385              		.loc 1 1890 0
 3386 0106 4FF6FF73 		movw	r3, #65535
 3387 010a FB84     		strh	r3, [r7, #38]	@ movhi
 3388 010c 09E0     		b	.L221
 3389              	.L220:
1891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else
1893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		usChecksum = FreeRTOS_htons( usChecksum );
 3390              		.loc 1 1894 0
 3391 010e FB8C     		ldrh	r3, [r7, #38]
 3392 0110 1B02     		lsls	r3, r3, #8
 3393 0112 9AB2     		uxth	r2, r3
 3394 0114 FB8C     		ldrh	r3, [r7, #38]
 3395 0116 1B0A     		lsrs	r3, r3, #8
 3396 0118 9BB2     		uxth	r3, r3
 3397 011a 9BB2     		uxth	r3, r3
 3398 011c 1343     		orrs	r3, r3, r2
 3399 011e 9BB2     		uxth	r3, r3
 3400 0120 FB84     		strh	r3, [r7, #38]	@ movhi
 3401              	.L221:
1895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xOutgoingPacket != pdFALSE )
 3402              		.loc 1 1897 0
 3403 0122 3B68     		ldr	r3, [r7]
 3404 0124 002B     		cmp	r3, #0
 3405 0126 02D0     		beq	.L222
1898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		*( pusChecksum ) = usChecksum;
 3406              		.loc 1 1899 0
 3407 0128 3B6A     		ldr	r3, [r7, #32]
 3408 012a FA8C     		ldrh	r2, [r7, #38]	@ movhi
 3409 012c 1A80     		strh	r2, [r3]	@ movhi
 3410              	.L222:
1900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	else if( usChecksum != ipCORRECT_CRC )
1903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: ID %04X: from %lxip to %lxip bad crc: %
1905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pcType,
1906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_ntohs( pxIPPacket->xIPHeader.usIdentification ),
1907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ),
1908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ),
1909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_ntohs( *pusChecksum ) ) );
1910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
1912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return usChecksum;
 3411              		.loc 1 1913 0
ARM GAS  /tmp/cc946aYs.s 			page 98


 3412 012e FB8C     		ldrh	r3, [r7, #38]
 3413              	.L213:
1914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3414              		.loc 1 1914 0
 3415 0130 1846     		mov	r0, r3
 3416 0132 2837     		adds	r7, r7, #40
 3417              	.LCFI152:
 3418              		.cfi_def_cfa_offset 8
 3419 0134 BD46     		mov	sp, r7
 3420              	.LCFI153:
 3421              		.cfi_def_cfa_register 13
 3422              		@ sp needed
 3423 0136 80BD     		pop	{r7, pc}
 3424              		.cfi_endproc
 3425              	.LFE59:
 3427              		.section	.text.usGenerateChecksum,"ax",%progbits
 3428              		.align	2
 3429              		.global	usGenerateChecksum
 3430              		.thumb
 3431              		.thumb_func
 3433              	usGenerateChecksum:
 3434              	.LFB60:
1915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
1916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint16_t usGenerateChecksum( uint32_t ulSum, const uint8_t * pucNextData, size_t uxDataLengthBytes 
1918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3435              		.loc 1 1918 0
 3436              		.cfi_startproc
 3437              		@ args = 0, pretend = 0, frame = 48
 3438              		@ frame_needed = 1, uses_anonymous_args = 0
 3439              		@ link register save eliminated.
 3440 0000 80B4     		push	{r7}
 3441              	.LCFI154:
 3442              		.cfi_def_cfa_offset 4
 3443              		.cfi_offset 7, -4
 3444 0002 8DB0     		sub	sp, sp, #52
 3445              	.LCFI155:
 3446              		.cfi_def_cfa_offset 56
 3447 0004 00AF     		add	r7, sp, #0
 3448              	.LCFI156:
 3449              		.cfi_def_cfa_register 7
 3450 0006 F860     		str	r0, [r7, #12]
 3451 0008 B960     		str	r1, [r7, #8]
 3452 000a 7A60     		str	r2, [r7, #4]
1919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnion32 xSum2, xSum, xTerm;
1920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnionPtr xSource;		/* Points to first byte */
1921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** xUnionPtr xLastSource;	/* Points to last byte plus one */
1922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t ulAlignBits, ulCarry = 0ul;
 3453              		.loc 1 1922 0
 3454 000c 0023     		movs	r3, #0
 3455 000e FB62     		str	r3, [r7, #44]
1923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Small MCUs often spend up to 30% of the time doing checksum calculations
1925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	This function is optimised for 32-bit CPUs; Each time it will try to fetch
1926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	32-bits, sums it with an accumulator and counts the number of carries. */
1927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Swap the input (little endian platform only). */
ARM GAS  /tmp/cc946aYs.s 			page 99


1929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = FreeRTOS_ntohs( ulSum );
 3456              		.loc 1 1929 0
 3457 0010 FB68     		ldr	r3, [r7, #12]
 3458 0012 9BB2     		uxth	r3, r3
 3459 0014 1B02     		lsls	r3, r3, #8
 3460 0016 9AB2     		uxth	r2, r3
 3461 0018 FB68     		ldr	r3, [r7, #12]
 3462 001a 1B0A     		lsrs	r3, r3, #8
 3463 001c 9BB2     		uxth	r3, r3
 3464 001e 1343     		orrs	r3, r3, r2
 3465 0020 9BB2     		uxth	r3, r3
 3466 0022 3B62     		str	r3, [r7, #32]
1930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xTerm.u32 = 0ul;
 3467              		.loc 1 1930 0
 3468 0024 0023     		movs	r3, #0
 3469 0026 FB61     		str	r3, [r7, #28]
1931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSource.u8ptr = ( uint8_t * ) pucNextData;
 3470              		.loc 1 1932 0
 3471 0028 BB68     		ldr	r3, [r7, #8]
 3472 002a BB61     		str	r3, [r7, #24]
1933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	ulAlignBits = ( ( ( uint32_t ) pucNextData ) & 0x03u ); /* gives 0, 1, 2, or 3 */
 3473              		.loc 1 1933 0
 3474 002c BB68     		ldr	r3, [r7, #8]
 3475 002e 03F00303 		and	r3, r3, #3
 3476 0032 BB62     		str	r3, [r7, #40]
1934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* If byte (8-bit) aligned... */
1936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ( ulAlignBits & 1ul ) != 0ul ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 3477              		.loc 1 1936 0
 3478 0034 BB6A     		ldr	r3, [r7, #40]
 3479 0036 03F00103 		and	r3, r3, #1
 3480 003a 002B     		cmp	r3, #0
 3481 003c 0BD0     		beq	.L224
 3482              		.loc 1 1936 0 is_stmt 0 discriminator 1
 3483 003e 7B68     		ldr	r3, [r7, #4]
 3484 0040 002B     		cmp	r3, #0
 3485 0042 08D0     		beq	.L224
1937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xTerm.u8[ 1 ] = *( xSource.u8ptr );
 3486              		.loc 1 1938 0 is_stmt 1
 3487 0044 BB69     		ldr	r3, [r7, #24]
 3488 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3489 0048 7B77     		strb	r3, [r7, #29]
1939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( xSource.u8ptr )++;
 3490              		.loc 1 1939 0
 3491 004a BB69     		ldr	r3, [r7, #24]
 3492 004c 0133     		adds	r3, r3, #1
 3493 004e BB61     		str	r3, [r7, #24]
1940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxDataLengthBytes--;
 3494              		.loc 1 1940 0
 3495 0050 7B68     		ldr	r3, [r7, #4]
 3496 0052 013B     		subs	r3, r3, #1
 3497 0054 7B60     		str	r3, [r7, #4]
 3498              	.L224:
1941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now xSource is word (16-bit) aligned. */
1942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
ARM GAS  /tmp/cc946aYs.s 			page 100


1943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* If half-word (16-bit) aligned... */
1945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ( ulAlignBits == 1u ) || ( ulAlignBits == 2u ) ) && ( uxDataLengthBytes >= 2u ) )
 3499              		.loc 1 1945 0
 3500 0056 BB6A     		ldr	r3, [r7, #40]
 3501 0058 012B     		cmp	r3, #1
 3502 005a 02D0     		beq	.L225
 3503              		.loc 1 1945 0 is_stmt 0 discriminator 2
 3504 005c BB6A     		ldr	r3, [r7, #40]
 3505 005e 022B     		cmp	r3, #2
 3506 0060 0DD1     		bne	.L226
 3507              	.L225:
 3508              		.loc 1 1945 0 discriminator 3
 3509 0062 7B68     		ldr	r3, [r7, #4]
 3510 0064 012B     		cmp	r3, #1
 3511 0066 0AD9     		bls	.L226
1946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 += *(xSource.u16ptr);
 3512              		.loc 1 1947 0 is_stmt 1
 3513 0068 3B6A     		ldr	r3, [r7, #32]
 3514 006a BA69     		ldr	r2, [r7, #24]
 3515 006c 1288     		ldrh	r2, [r2]
 3516 006e 1344     		add	r3, r3, r2
 3517 0070 3B62     		str	r3, [r7, #32]
1948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		( xSource.u16ptr )++;
 3518              		.loc 1 1948 0
 3519 0072 BB69     		ldr	r3, [r7, #24]
 3520 0074 0233     		adds	r3, r3, #2
 3521 0076 BB61     		str	r3, [r7, #24]
1949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		uxDataLengthBytes -= 2u;
 3522              		.loc 1 1949 0
 3523 0078 7B68     		ldr	r3, [r7, #4]
 3524 007a 023B     		subs	r3, r3, #2
 3525 007c 7B60     		str	r3, [r7, #4]
 3526              	.L226:
1950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now xSource is word (32-bit) aligned. */
1951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Word (32-bit) aligned, do the most part. */
1954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4u ) ) - 3u;
 3527              		.loc 1 1954 0
 3528 007e BA69     		ldr	r2, [r7, #24]
 3529 0080 7B68     		ldr	r3, [r7, #4]
 3530 0082 9908     		lsrs	r1, r3, #2
 3531 0084 494B     		ldr	r3, .L238
 3532 0086 0B44     		add	r3, r3, r1
 3533 0088 9B00     		lsls	r3, r3, #2
 3534 008a 1344     		add	r3, r3, r2
 3535 008c 7B61     		str	r3, [r7, #20]
1955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* In this loop, four 32-bit additions will be done, in total 16 bytes.
1957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	Indexing with constants (0,1,2,3) gives faster code than using
1958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	post-increments. */
1959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	while( xSource.u32ptr < xLastSource.u32ptr )
 3536              		.loc 1 1959 0
 3537 008e 35E0     		b	.L227
 3538              	.L232:
ARM GAS  /tmp/cc946aYs.s 			page 101


1960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
1961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Use a secondary Sum2, just to see if the addition produced an
1962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		overflow. */
1963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 3539              		.loc 1 1963 0
 3540 0090 3A6A     		ldr	r2, [r7, #32]
 3541 0092 BB69     		ldr	r3, [r7, #24]
 3542 0094 1B68     		ldr	r3, [r3]
 3543 0096 1344     		add	r3, r3, r2
 3544 0098 7B62     		str	r3, [r7, #36]
1964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 < xSum.u32 )
 3545              		.loc 1 1964 0
 3546 009a 7A6A     		ldr	r2, [r7, #36]
 3547 009c 3B6A     		ldr	r3, [r7, #32]
 3548 009e 9A42     		cmp	r2, r3
 3549 00a0 02D2     		bcs	.L228
1965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
 3550              		.loc 1 1966 0
 3551 00a2 FB6A     		ldr	r3, [r7, #44]
 3552 00a4 0133     		adds	r3, r3, #1
 3553 00a6 FB62     		str	r3, [r7, #44]
 3554              	.L228:
1967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Now add the secondary sum to the major sum, and remember if there was
1970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		a carry. */
1971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
 3555              		.loc 1 1971 0
 3556 00a8 7A6A     		ldr	r2, [r7, #36]
 3557 00aa BB69     		ldr	r3, [r7, #24]
 3558 00ac 0433     		adds	r3, r3, #4
 3559 00ae 1B68     		ldr	r3, [r3]
 3560 00b0 1344     		add	r3, r3, r2
 3561 00b2 3B62     		str	r3, [r7, #32]
1972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 > xSum.u32 )
 3562              		.loc 1 1972 0
 3563 00b4 7A6A     		ldr	r2, [r7, #36]
 3564 00b6 3B6A     		ldr	r3, [r7, #32]
 3565 00b8 9A42     		cmp	r2, r3
 3566 00ba 02D9     		bls	.L229
1973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
 3567              		.loc 1 1974 0
 3568 00bc FB6A     		ldr	r3, [r7, #44]
 3569 00be 0133     		adds	r3, r3, #1
 3570 00c0 FB62     		str	r3, [r7, #44]
 3571              	.L229:
1975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* And do the same trick once again for indexes 2 and 3 */
1978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 3572              		.loc 1 1978 0
 3573 00c2 3A6A     		ldr	r2, [r7, #32]
 3574 00c4 BB69     		ldr	r3, [r7, #24]
 3575 00c6 0833     		adds	r3, r3, #8
 3576 00c8 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc946aYs.s 			page 102


 3577 00ca 1344     		add	r3, r3, r2
 3578 00cc 7B62     		str	r3, [r7, #36]
1979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 < xSum.u32 )
 3579              		.loc 1 1979 0
 3580 00ce 7A6A     		ldr	r2, [r7, #36]
 3581 00d0 3B6A     		ldr	r3, [r7, #32]
 3582 00d2 9A42     		cmp	r2, r3
 3583 00d4 02D2     		bcs	.L230
1980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
 3584              		.loc 1 1981 0
 3585 00d6 FB6A     		ldr	r3, [r7, #44]
 3586 00d8 0133     		adds	r3, r3, #1
 3587 00da FB62     		str	r3, [r7, #44]
 3588              	.L230:
1982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 3589              		.loc 1 1984 0
 3590 00dc 7A6A     		ldr	r2, [r7, #36]
 3591 00de BB69     		ldr	r3, [r7, #24]
 3592 00e0 0C33     		adds	r3, r3, #12
 3593 00e2 1B68     		ldr	r3, [r3]
 3594 00e4 1344     		add	r3, r3, r2
 3595 00e6 3B62     		str	r3, [r7, #32]
1985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xSum2.u32 > xSum.u32 )
 3596              		.loc 1 1986 0
 3597 00e8 7A6A     		ldr	r2, [r7, #36]
 3598 00ea 3B6A     		ldr	r3, [r7, #32]
 3599 00ec 9A42     		cmp	r2, r3
 3600 00ee 02D9     		bls	.L231
1987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
1988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			ulCarry++;
 3601              		.loc 1 1988 0
 3602 00f0 FB6A     		ldr	r3, [r7, #44]
 3603 00f2 0133     		adds	r3, r3, #1
 3604 00f4 FB62     		str	r3, [r7, #44]
 3605              	.L231:
1989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
1990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* And finally advance the pointer 4 * 4 = 16 bytes. */
1992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u32ptr += 4;
 3606              		.loc 1 1992 0
 3607 00f6 BB69     		ldr	r3, [r7, #24]
 3608 00f8 1033     		adds	r3, r3, #16
 3609 00fa BB61     		str	r3, [r7, #24]
 3610              	.L227:
1959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3611              		.loc 1 1959 0
 3612 00fc BA69     		ldr	r2, [r7, #24]
 3613 00fe 7B69     		ldr	r3, [r7, #20]
 3614 0100 9A42     		cmp	r2, r3
 3615 0102 C5D3     		bcc	.L232
1993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
1994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Now add all carries. */
ARM GAS  /tmp/cc946aYs.s 			page 103


1996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 3616              		.loc 1 1996 0
 3617 0104 3B8C     		ldrh	r3, [r7, #32]
 3618 0106 1A46     		mov	r2, r3
 3619 0108 7B8C     		ldrh	r3, [r7, #34]
 3620 010a 1A44     		add	r2, r2, r3
 3621 010c FB6A     		ldr	r3, [r7, #44]
 3622 010e 1344     		add	r3, r3, r2
 3623 0110 3B62     		str	r3, [r7, #32]
1997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
1998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	uxDataLengthBytes %= 16u;
 3624              		.loc 1 1998 0
 3625 0112 7B68     		ldr	r3, [r7, #4]
 3626 0114 03F00F03 		and	r3, r3, #15
 3627 0118 7B60     		str	r3, [r7, #4]
1999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 3628              		.loc 1 1999 0
 3629 011a BA69     		ldr	r2, [r7, #24]
 3630 011c 7B68     		ldr	r3, [r7, #4]
 3631 011e 23F00103 		bic	r3, r3, #1
 3632 0122 1344     		add	r3, r3, r2
 3633 0124 7B61     		str	r3, [r7, #20]
2000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Half-word aligned. */
2002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	while( xSource.u16ptr < xLastSource.u16ptr )
 3634              		.loc 1 2002 0
 3635 0126 07E0     		b	.L233
 3636              	.L234:
2003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* At least one more short. */
2005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 += xSource.u16ptr[ 0 ];
 3637              		.loc 1 2005 0
 3638 0128 3B6A     		ldr	r3, [r7, #32]
 3639 012a BA69     		ldr	r2, [r7, #24]
 3640 012c 1288     		ldrh	r2, [r2]
 3641 012e 1344     		add	r3, r3, r2
 3642 0130 3B62     		str	r3, [r7, #32]
2006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSource.u16ptr++;
 3643              		.loc 1 2006 0
 3644 0132 BB69     		ldr	r3, [r7, #24]
 3645 0134 0233     		adds	r3, r3, #2
 3646 0136 BB61     		str	r3, [r7, #24]
 3647              	.L233:
2002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 3648              		.loc 1 2002 0
 3649 0138 BA69     		ldr	r2, [r7, #24]
 3650 013a 7B69     		ldr	r3, [r7, #20]
 3651 013c 9A42     		cmp	r2, r3
 3652 013e F3D3     		bcc	.L234
2007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0u )	/* Maybe one more ? */
 3653              		.loc 1 2009 0
 3654 0140 7B68     		ldr	r3, [r7, #4]
 3655 0142 03F00103 		and	r3, r3, #1
 3656 0146 002B     		cmp	r3, #0
 3657 0148 02D0     		beq	.L235
ARM GAS  /tmp/cc946aYs.s 			page 104


2010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 3658              		.loc 1 2011 0
 3659 014a BB69     		ldr	r3, [r7, #24]
 3660 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3661 014e 3B77     		strb	r3, [r7, #28]
 3662              	.L235:
2012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 += xTerm.u32;
 3663              		.loc 1 2013 0
 3664 0150 3A6A     		ldr	r2, [r7, #32]
 3665 0152 FB69     		ldr	r3, [r7, #28]
 3666 0154 1344     		add	r3, r3, r2
 3667 0156 3B62     		str	r3, [r7, #32]
2014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Now add all carries again. */
2016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 3668              		.loc 1 2016 0
 3669 0158 3B8C     		ldrh	r3, [r7, #32]
 3670 015a 1A46     		mov	r2, r3
 3671 015c 7B8C     		ldrh	r3, [r7, #34]
 3672 015e 1344     		add	r3, r3, r2
 3673 0160 3B62     		str	r3, [r7, #32]
2017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* The previous summation might have given a 16-bit carry. */
2019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 3674              		.loc 1 2019 0
 3675 0162 3B8C     		ldrh	r3, [r7, #32]
 3676 0164 1A46     		mov	r2, r3
 3677 0166 7B8C     		ldrh	r3, [r7, #34]
 3678 0168 1344     		add	r3, r3, r2
 3679 016a 3B62     		str	r3, [r7, #32]
2020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( ( ulAlignBits & 1u ) != 0u )
 3680              		.loc 1 2021 0
 3681 016c BB6A     		ldr	r3, [r7, #40]
 3682 016e 03F00103 		and	r3, r3, #1
 3683 0172 002B     		cmp	r3, #0
 3684 0174 08D0     		beq	.L236
2022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Quite unlikely, but pucNextData might be non-aligned, which would
2024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		 mean that a checksum is calculated starting at an odd position. */
2025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xSum.u32 = ( ( xSum.u32 & 0xffu ) << 8 ) | ( ( xSum.u32 & 0xff00u ) >> 8 );
 3685              		.loc 1 2025 0
 3686 0176 3B6A     		ldr	r3, [r7, #32]
 3687 0178 1B02     		lsls	r3, r3, #8
 3688 017a 9AB2     		uxth	r2, r3
 3689 017c 3B6A     		ldr	r3, [r7, #32]
 3690 017e 03F47F43 		and	r3, r3, #65280
 3691 0182 1B0A     		lsrs	r3, r3, #8
 3692 0184 1343     		orrs	r3, r3, r2
 3693 0186 3B62     		str	r3, [r7, #32]
 3694              	.L236:
2026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* swap the output (little endian platform only). */
2029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
ARM GAS  /tmp/cc946aYs.s 			page 105


 3695              		.loc 1 2029 0
 3696 0188 3B6A     		ldr	r3, [r7, #32]
 3697 018a 9BB2     		uxth	r3, r3
 3698 018c 1B02     		lsls	r3, r3, #8
 3699 018e 9AB2     		uxth	r2, r3
 3700 0190 3B6A     		ldr	r3, [r7, #32]
 3701 0192 9BB2     		uxth	r3, r3
 3702 0194 1B0A     		lsrs	r3, r3, #8
 3703 0196 9BB2     		uxth	r3, r3
 3704 0198 9BB2     		uxth	r3, r3
 3705 019a 1343     		orrs	r3, r3, r2
 3706 019c 9BB2     		uxth	r3, r3
 3707 019e 9BB2     		uxth	r3, r3
2030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3708              		.loc 1 2030 0
 3709 01a0 1846     		mov	r0, r3
 3710 01a2 3437     		adds	r7, r7, #52
 3711              	.LCFI157:
 3712              		.cfi_def_cfa_offset 4
 3713 01a4 BD46     		mov	sp, r7
 3714              	.LCFI158:
 3715              		.cfi_def_cfa_register 13
 3716              		@ sp needed
 3717 01a6 5DF8047B 		ldr	r7, [sp], #4
 3718              	.LCFI159:
 3719              		.cfi_restore 7
 3720              		.cfi_def_cfa_offset 0
 3721 01aa 7047     		bx	lr
 3722              	.L239:
 3723              		.align	2
 3724              	.L238:
 3725 01ac FDFFFF3F 		.word	1073741821
 3726              		.cfi_endproc
 3727              	.LFE60:
 3729              		.section	.text.vReturnEthernetFrame,"ax",%progbits
 3730              		.align	2
 3731              		.global	vReturnEthernetFrame
 3732              		.thumb
 3733              		.thumb_func
 3735              	vReturnEthernetFrame:
 3736              	.LFB61:
2031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSen
2034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3737              		.loc 1 2034 0
 3738              		.cfi_startproc
 3739              		@ args = 0, pretend = 0, frame = 16
 3740              		@ frame_needed = 1, uses_anonymous_args = 0
 3741 0000 80B5     		push	{r7, lr}
 3742              	.LCFI160:
 3743              		.cfi_def_cfa_offset 8
 3744              		.cfi_offset 7, -8
 3745              		.cfi_offset 14, -4
 3746 0002 84B0     		sub	sp, sp, #16
 3747              	.LCFI161:
 3748              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc946aYs.s 			page 106


 3749 0004 00AF     		add	r7, sp, #0
 3750              	.LCFI162:
 3751              		.cfi_def_cfa_register 7
 3752 0006 7860     		str	r0, [r7, #4]
 3753 0008 3960     		str	r1, [r7]
2035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** EthernetHeader_t *pxEthernetHeader;
2036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 )
2038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	NetworkBufferDescriptor_t *pxNewBuffer;
2039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
2040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
2042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
2044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		BaseType_t xIndex;
2046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			FreeRTOS_printf( ( "vReturnEthernetFrame: length %lu\n", pxNetworkBuffer->xDataLength ) );
2048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHER
2049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			{
2050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 				pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0u;
2051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			}
2052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
2053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	#endif
2056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigZERO_COPY_TX_DRIVER != 0 )
2058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( xReleaseAfterSend == pdFALSE )
 3754              		.loc 1 2059 0
 3755 000a 3B68     		ldr	r3, [r7]
 3756 000c 002B     		cmp	r3, #0
 3757 000e 0AD1     		bne	.L241
2060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( BaseType_t ) pxNetworkBu
 3758              		.loc 1 2061 0
 3759 0010 7B68     		ldr	r3, [r7, #4]
 3760 0012 DB69     		ldr	r3, [r3, #28]
 3761 0014 7868     		ldr	r0, [r7, #4]
 3762 0016 1946     		mov	r1, r3
 3763 0018 FFF7FEFF 		bl	pxDuplicateNetworkBufferWithDescriptor
 3764 001c F860     		str	r0, [r7, #12]
2062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xReleaseAfterSend = pdTRUE;
 3765              		.loc 1 2062 0
 3766 001e 0123     		movs	r3, #1
 3767 0020 3B60     		str	r3, [r7]
2063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxNetworkBuffer = pxNewBuffer;
 3768              		.loc 1 2063 0
 3769 0022 FB68     		ldr	r3, [r7, #12]
 3770 0024 7B60     		str	r3, [r7, #4]
 3771              	.L241:
2064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	if( pxNetworkBuffer != NULL )
 3772              		.loc 1 2066 0
 3773 0026 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc946aYs.s 			page 107


 3774 0028 002B     		cmp	r3, #0
 3775 002a 15D0     		beq	.L240
2067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif
2068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 3776              		.loc 1 2069 0
 3777 002c 7B68     		ldr	r3, [r7, #4]
 3778 002e 9B69     		ldr	r3, [r3, #24]
 3779 0030 BB60     		str	r3, [r7, #8]
2070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Swap source and destination MAC addresses. */
2072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xS
 3780              		.loc 1 2072 0
 3781 0032 BA68     		ldr	r2, [r7, #8]
 3782 0034 BB68     		ldr	r3, [r7, #8]
 3783 0036 0633     		adds	r3, r3, #6
 3784 0038 1046     		mov	r0, r2
 3785 003a 1946     		mov	r1, r3
 3786 003c 0622     		movs	r2, #6
 3787 003e FFF7FEFF 		bl	memcpy
2073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_
 3788              		.loc 1 2073 0
 3789 0042 BB68     		ldr	r3, [r7, #8]
 3790 0044 0633     		adds	r3, r3, #6
 3791 0046 1846     		mov	r0, r3
 3792 0048 0549     		ldr	r1, .L243
 3793 004a 0622     		movs	r2, #6
 3794 004c FFF7FEFF 		bl	memcpy
2074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		/* Send! */
2076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 3795              		.loc 1 2076 0
 3796 0050 7868     		ldr	r0, [r7, #4]
 3797 0052 3968     		ldr	r1, [r7]
 3798 0054 FFF7FEFF 		bl	xNetworkInterfaceOutput
 3799              	.L240:
2077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3800              		.loc 1 2078 0
 3801 0058 1037     		adds	r7, r7, #16
 3802              	.LCFI163:
 3803              		.cfi_def_cfa_offset 8
 3804 005a BD46     		mov	sp, r7
 3805              	.LCFI164:
 3806              		.cfi_def_cfa_register 13
 3807              		@ sp needed
 3808 005c 80BD     		pop	{r7, pc}
 3809              	.L244:
 3810 005e 00BF     		.align	2
 3811              	.L243:
 3812 0060 00000000 		.word	xDefaultPartUDPPacketHeader
 3813              		.cfi_endproc
 3814              	.LFE61:
 3816              		.section	.text.FreeRTOS_GetIPAddress,"ax",%progbits
 3817              		.align	2
 3818              		.global	FreeRTOS_GetIPAddress
 3819              		.thumb
ARM GAS  /tmp/cc946aYs.s 			page 108


 3820              		.thumb_func
 3822              	FreeRTOS_GetIPAddress:
 3823              	.LFB62:
2079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetIPAddress( void )
2082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3824              		.loc 1 2082 0
 3825              		.cfi_startproc
 3826              		@ args = 0, pretend = 0, frame = 0
 3827              		@ frame_needed = 1, uses_anonymous_args = 0
 3828              		@ link register save eliminated.
 3829 0000 80B4     		push	{r7}
 3830              	.LCFI165:
 3831              		.cfi_def_cfa_offset 4
 3832              		.cfi_offset 7, -4
 3833 0002 00AF     		add	r7, sp, #0
 3834              	.LCFI166:
 3835              		.cfi_def_cfa_register 7
2083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Returns the IP address of the NIC. */
2084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return *ipLOCAL_IP_ADDRESS_POINTER;
 3836              		.loc 1 2084 0
 3837 0004 034B     		ldr	r3, .L247
 3838 0006 5B69     		ldr	r3, [r3, #20]
2085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3839              		.loc 1 2085 0
 3840 0008 1846     		mov	r0, r3
 3841 000a BD46     		mov	sp, r7
 3842              	.LCFI167:
 3843              		.cfi_def_cfa_register 13
 3844              		@ sp needed
 3845 000c 5DF8047B 		ldr	r7, [sp], #4
 3846              	.LCFI168:
 3847              		.cfi_restore 7
 3848              		.cfi_def_cfa_offset 0
 3849 0010 7047     		bx	lr
 3850              	.L248:
 3851 0012 00BF     		.align	2
 3852              	.L247:
 3853 0014 00000000 		.word	xDefaultPartUDPPacketHeader
 3854              		.cfi_endproc
 3855              	.LFE62:
 3857              		.section	.text.FreeRTOS_SetIPAddress,"ax",%progbits
 3858              		.align	2
 3859              		.global	FreeRTOS_SetIPAddress
 3860              		.thumb
 3861              		.thumb_func
 3863              	FreeRTOS_SetIPAddress:
 3864              	.LFB63:
2086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetIPAddress( uint32_t ulIPAddress )
2089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3865              		.loc 1 2089 0
 3866              		.cfi_startproc
 3867              		@ args = 0, pretend = 0, frame = 8
 3868              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc946aYs.s 			page 109


 3869              		@ link register save eliminated.
 3870 0000 80B4     		push	{r7}
 3871              	.LCFI169:
 3872              		.cfi_def_cfa_offset 4
 3873              		.cfi_offset 7, -4
 3874 0002 83B0     		sub	sp, sp, #12
 3875              	.LCFI170:
 3876              		.cfi_def_cfa_offset 16
 3877 0004 00AF     		add	r7, sp, #0
 3878              	.LCFI171:
 3879              		.cfi_def_cfa_register 7
 3880 0006 7860     		str	r0, [r7, #4]
2090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	/* Sets the IP address of the NIC. */
2091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	*ipLOCAL_IP_ADDRESS_POINTER = ulIPAddress;
 3881              		.loc 1 2091 0
 3882 0008 034A     		ldr	r2, .L250
 3883 000a 7B68     		ldr	r3, [r7, #4]
 3884 000c 5361     		str	r3, [r2, #20]
2092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3885              		.loc 1 2092 0
 3886 000e 0C37     		adds	r7, r7, #12
 3887              	.LCFI172:
 3888              		.cfi_def_cfa_offset 4
 3889 0010 BD46     		mov	sp, r7
 3890              	.LCFI173:
 3891              		.cfi_def_cfa_register 13
 3892              		@ sp needed
 3893 0012 5DF8047B 		ldr	r7, [sp], #4
 3894              	.LCFI174:
 3895              		.cfi_restore 7
 3896              		.cfi_def_cfa_offset 0
 3897 0016 7047     		bx	lr
 3898              	.L251:
 3899              		.align	2
 3900              	.L250:
 3901 0018 00000000 		.word	xDefaultPartUDPPacketHeader
 3902              		.cfi_endproc
 3903              	.LFE63:
 3905              		.section	.text.FreeRTOS_GetGatewayAddress,"ax",%progbits
 3906              		.align	2
 3907              		.global	FreeRTOS_GetGatewayAddress
 3908              		.thumb
 3909              		.thumb_func
 3911              	FreeRTOS_GetGatewayAddress:
 3912              	.LFB64:
2093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetGatewayAddress( void )
2096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3913              		.loc 1 2096 0
 3914              		.cfi_startproc
 3915              		@ args = 0, pretend = 0, frame = 0
 3916              		@ frame_needed = 1, uses_anonymous_args = 0
 3917              		@ link register save eliminated.
 3918 0000 80B4     		push	{r7}
 3919              	.LCFI175:
 3920              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc946aYs.s 			page 110


 3921              		.cfi_offset 7, -4
 3922 0002 00AF     		add	r7, sp, #0
 3923              	.LCFI176:
 3924              		.cfi_def_cfa_register 7
2097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulGatewayAddress;
 3925              		.loc 1 2097 0
 3926 0004 034B     		ldr	r3, .L254
 3927 0006 9B68     		ldr	r3, [r3, #8]
2098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3928              		.loc 1 2098 0
 3929 0008 1846     		mov	r0, r3
 3930 000a BD46     		mov	sp, r7
 3931              	.LCFI177:
 3932              		.cfi_def_cfa_register 13
 3933              		@ sp needed
 3934 000c 5DF8047B 		ldr	r7, [sp], #4
 3935              	.LCFI178:
 3936              		.cfi_restore 7
 3937              		.cfi_def_cfa_offset 0
 3938 0010 7047     		bx	lr
 3939              	.L255:
 3940 0012 00BF     		.align	2
 3941              	.L254:
 3942 0014 00000000 		.word	xNetworkAddressing
 3943              		.cfi_endproc
 3944              	.LFE64:
 3946              		.section	.text.FreeRTOS_GetDNSServerAddress,"ax",%progbits
 3947              		.align	2
 3948              		.global	FreeRTOS_GetDNSServerAddress
 3949              		.thumb
 3950              		.thumb_func
 3952              	FreeRTOS_GetDNSServerAddress:
 3953              	.LFB65:
2099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetDNSServerAddress( void )
2102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3954              		.loc 1 2102 0
 3955              		.cfi_startproc
 3956              		@ args = 0, pretend = 0, frame = 0
 3957              		@ frame_needed = 1, uses_anonymous_args = 0
 3958              		@ link register save eliminated.
 3959 0000 80B4     		push	{r7}
 3960              	.LCFI179:
 3961              		.cfi_def_cfa_offset 4
 3962              		.cfi_offset 7, -4
 3963 0002 00AF     		add	r7, sp, #0
 3964              	.LCFI180:
 3965              		.cfi_def_cfa_register 7
2103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulDNSServerAddress;
 3966              		.loc 1 2103 0
 3967 0004 034B     		ldr	r3, .L258
 3968 0006 DB68     		ldr	r3, [r3, #12]
2104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 3969              		.loc 1 2104 0
 3970 0008 1846     		mov	r0, r3
 3971 000a BD46     		mov	sp, r7
ARM GAS  /tmp/cc946aYs.s 			page 111


 3972              	.LCFI181:
 3973              		.cfi_def_cfa_register 13
 3974              		@ sp needed
 3975 000c 5DF8047B 		ldr	r7, [sp], #4
 3976              	.LCFI182:
 3977              		.cfi_restore 7
 3978              		.cfi_def_cfa_offset 0
 3979 0010 7047     		bx	lr
 3980              	.L259:
 3981 0012 00BF     		.align	2
 3982              	.L258:
 3983 0014 00000000 		.word	xNetworkAddressing
 3984              		.cfi_endproc
 3985              	.LFE65:
 3987              		.section	.text.FreeRTOS_GetNetmask,"ax",%progbits
 3988              		.align	2
 3989              		.global	FreeRTOS_GetNetmask
 3990              		.thumb
 3991              		.thumb_func
 3993              	FreeRTOS_GetNetmask:
 3994              	.LFB66:
2105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** uint32_t FreeRTOS_GetNetmask( void )
2108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 3995              		.loc 1 2108 0
 3996              		.cfi_startproc
 3997              		@ args = 0, pretend = 0, frame = 0
 3998              		@ frame_needed = 1, uses_anonymous_args = 0
 3999              		@ link register save eliminated.
 4000 0000 80B4     		push	{r7}
 4001              	.LCFI183:
 4002              		.cfi_def_cfa_offset 4
 4003              		.cfi_offset 7, -4
 4004 0002 00AF     		add	r7, sp, #0
 4005              	.LCFI184:
 4006              		.cfi_def_cfa_register 7
2109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkAddressing.ulNetMask;
 4007              		.loc 1 2109 0
 4008 0004 034B     		ldr	r3, .L262
 4009 0006 5B68     		ldr	r3, [r3, #4]
2110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4010              		.loc 1 2110 0
 4011 0008 1846     		mov	r0, r3
 4012 000a BD46     		mov	sp, r7
 4013              	.LCFI185:
 4014              		.cfi_def_cfa_register 13
 4015              		@ sp needed
 4016 000c 5DF8047B 		ldr	r7, [sp], #4
 4017              	.LCFI186:
 4018              		.cfi_restore 7
 4019              		.cfi_def_cfa_offset 0
 4020 0010 7047     		bx	lr
 4021              	.L263:
 4022 0012 00BF     		.align	2
 4023              	.L262:
 4024 0014 00000000 		.word	xNetworkAddressing
ARM GAS  /tmp/cc946aYs.s 			page 112


 4025              		.cfi_endproc
 4026              	.LFE66:
 4028              		.section	.text.FreeRTOS_GetMACAddress,"ax",%progbits
 4029              		.align	2
 4030              		.global	FreeRTOS_GetMACAddress
 4031              		.thumb
 4032              		.thumb_func
 4034              	FreeRTOS_GetMACAddress:
 4035              	.LFB67:
2111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** const uint8_t * FreeRTOS_GetMACAddress( void )
2114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4036              		.loc 1 2114 0
 4037              		.cfi_startproc
 4038              		@ args = 0, pretend = 0, frame = 0
 4039              		@ frame_needed = 1, uses_anonymous_args = 0
 4040              		@ link register save eliminated.
 4041 0000 80B4     		push	{r7}
 4042              	.LCFI187:
 4043              		.cfi_def_cfa_offset 4
 4044              		.cfi_offset 7, -4
 4045 0002 00AF     		add	r7, sp, #0
 4046              	.LCFI188:
 4047              		.cfi_def_cfa_register 7
2115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return ipLOCAL_MAC_ADDRESS;
 4048              		.loc 1 2115 0
 4049 0004 024B     		ldr	r3, .L266
2116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4050              		.loc 1 2116 0
 4051 0006 1846     		mov	r0, r3
 4052 0008 BD46     		mov	sp, r7
 4053              	.LCFI189:
 4054              		.cfi_def_cfa_register 13
 4055              		@ sp needed
 4056 000a 5DF8047B 		ldr	r7, [sp], #4
 4057              	.LCFI190:
 4058              		.cfi_restore 7
 4059              		.cfi_def_cfa_offset 0
 4060 000e 7047     		bx	lr
 4061              	.L267:
 4062              		.align	2
 4063              	.L266:
 4064 0010 00000000 		.word	xDefaultPartUDPPacketHeader
 4065              		.cfi_endproc
 4066              	.LFE67:
 4068              		.section	.text.FreeRTOS_SetNetmask,"ax",%progbits
 4069              		.align	2
 4070              		.global	FreeRTOS_SetNetmask
 4071              		.thumb
 4072              		.thumb_func
 4074              	FreeRTOS_SetNetmask:
 4075              	.LFB68:
2117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetNetmask ( uint32_t ulNetmask )
2120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
ARM GAS  /tmp/cc946aYs.s 			page 113


 4076              		.loc 1 2120 0
 4077              		.cfi_startproc
 4078              		@ args = 0, pretend = 0, frame = 8
 4079              		@ frame_needed = 1, uses_anonymous_args = 0
 4080              		@ link register save eliminated.
 4081 0000 80B4     		push	{r7}
 4082              	.LCFI191:
 4083              		.cfi_def_cfa_offset 4
 4084              		.cfi_offset 7, -4
 4085 0002 83B0     		sub	sp, sp, #12
 4086              	.LCFI192:
 4087              		.cfi_def_cfa_offset 16
 4088 0004 00AF     		add	r7, sp, #0
 4089              	.LCFI193:
 4090              		.cfi_def_cfa_register 7
 4091 0006 7860     		str	r0, [r7, #4]
2121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkAddressing.ulNetMask = ulNetmask;
 4092              		.loc 1 2121 0
 4093 0008 034A     		ldr	r2, .L269
 4094 000a 7B68     		ldr	r3, [r7, #4]
 4095 000c 5360     		str	r3, [r2, #4]
2122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4096              		.loc 1 2122 0
 4097 000e 0C37     		adds	r7, r7, #12
 4098              	.LCFI194:
 4099              		.cfi_def_cfa_offset 4
 4100 0010 BD46     		mov	sp, r7
 4101              	.LCFI195:
 4102              		.cfi_def_cfa_register 13
 4103              		@ sp needed
 4104 0012 5DF8047B 		ldr	r7, [sp], #4
 4105              	.LCFI196:
 4106              		.cfi_restore 7
 4107              		.cfi_def_cfa_offset 0
 4108 0016 7047     		bx	lr
 4109              	.L270:
 4110              		.align	2
 4111              	.L269:
 4112 0018 00000000 		.word	xNetworkAddressing
 4113              		.cfi_endproc
 4114              	.LFE68:
 4116              		.section	.text.FreeRTOS_SetGatewayAddress,"ax",%progbits
 4117              		.align	2
 4118              		.global	FreeRTOS_SetGatewayAddress
 4119              		.thumb
 4120              		.thumb_func
 4122              	FreeRTOS_SetGatewayAddress:
 4123              	.LFB69:
2123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** void FreeRTOS_SetGatewayAddress ( uint32_t ulGatewayAddress )
2126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4124              		.loc 1 2126 0
 4125              		.cfi_startproc
 4126              		@ args = 0, pretend = 0, frame = 8
 4127              		@ frame_needed = 1, uses_anonymous_args = 0
 4128              		@ link register save eliminated.
ARM GAS  /tmp/cc946aYs.s 			page 114


 4129 0000 80B4     		push	{r7}
 4130              	.LCFI197:
 4131              		.cfi_def_cfa_offset 4
 4132              		.cfi_offset 7, -4
 4133 0002 83B0     		sub	sp, sp, #12
 4134              	.LCFI198:
 4135              		.cfi_def_cfa_offset 16
 4136 0004 00AF     		add	r7, sp, #0
 4137              	.LCFI199:
 4138              		.cfi_def_cfa_register 7
 4139 0006 7860     		str	r0, [r7, #4]
2127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	xNetworkAddressing.ulGatewayAddress = ulGatewayAddress;
 4140              		.loc 1 2127 0
 4141 0008 034A     		ldr	r2, .L272
 4142 000a 7B68     		ldr	r3, [r7, #4]
 4143 000c 9360     		str	r3, [r2, #8]
2128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4144              		.loc 1 2128 0
 4145 000e 0C37     		adds	r7, r7, #12
 4146              	.LCFI200:
 4147              		.cfi_def_cfa_offset 4
 4148 0010 BD46     		mov	sp, r7
 4149              	.LCFI201:
 4150              		.cfi_def_cfa_register 13
 4151              		@ sp needed
 4152 0012 5DF8047B 		ldr	r7, [sp], #4
 4153              	.LCFI202:
 4154              		.cfi_restore 7
 4155              		.cfi_def_cfa_offset 0
 4156 0016 7047     		bx	lr
 4157              	.L273:
 4158              		.align	2
 4159              	.L272:
 4160 0018 00000000 		.word	xNetworkAddressing
 4161              		.cfi_endproc
 4162              	.LFE69:
 4164              		.section	.text.vIPSetDnsTimerEnableState,"ax",%progbits
 4165              		.align	2
 4166              		.global	vIPSetDnsTimerEnableState
 4167              		.thumb
 4168              		.thumb_func
 4170              	vIPSetDnsTimerEnableState:
 4171              	.LFB70:
2129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP == 1 )
2132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
2133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xEnableState != pdFALSE )
2135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
2137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
2141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
ARM GAS  /tmp/cc946aYs.s 			page 115


2143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigUSE_DHCP == 1 )
2147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
2148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
2149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
2150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
2151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS == 1 )
2155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPSetDnsTimerEnableState( BaseType_t xEnableState )
2156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 4172              		.loc 1 2156 0
 4173              		.cfi_startproc
 4174              		@ args = 0, pretend = 0, frame = 8
 4175              		@ frame_needed = 1, uses_anonymous_args = 0
 4176              		@ link register save eliminated.
 4177 0000 80B4     		push	{r7}
 4178              	.LCFI203:
 4179              		.cfi_def_cfa_offset 4
 4180              		.cfi_offset 7, -4
 4181 0002 83B0     		sub	sp, sp, #12
 4182              	.LCFI204:
 4183              		.cfi_def_cfa_offset 16
 4184 0004 00AF     		add	r7, sp, #0
 4185              	.LCFI205:
 4186              		.cfi_def_cfa_register 7
 4187 0006 7860     		str	r0, [r7, #4]
2157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		if( xEnableState != 0 )
 4188              		.loc 1 2157 0
 4189 0008 7B68     		ldr	r3, [r7, #4]
 4190 000a 002B     		cmp	r3, #0
 4191 000c 05D0     		beq	.L275
2158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDNSTimer.bActive = pdTRUE;
 4192              		.loc 1 2159 0
 4193 000e 084A     		ldr	r2, .L277
 4194 0010 1378     		ldrb	r3, [r2]
 4195 0012 43F00103 		orr	r3, r3, #1
 4196 0016 1370     		strb	r3, [r2]
 4197 0018 04E0     		b	.L274
 4198              	.L275:
2160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		else
2162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		{
2163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 			xDNSTimer.bActive = pdFALSE;
 4199              		.loc 1 2163 0
 4200 001a 054A     		ldr	r2, .L277
 4201 001c 1378     		ldrb	r3, [r2]
 4202 001e 6FF30003 		bfc	r3, #0, #1
 4203 0022 1370     		strb	r3, [r2]
 4204              	.L274:
2164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		}
2165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 4205              		.loc 1 2165 0
ARM GAS  /tmp/cc946aYs.s 			page 116


 4206 0024 0C37     		adds	r7, r7, #12
 4207              	.LCFI206:
 4208              		.cfi_def_cfa_offset 4
 4209 0026 BD46     		mov	sp, r7
 4210              	.LCFI207:
 4211              		.cfi_def_cfa_register 13
 4212              		@ sp needed
 4213 0028 5DF8047B 		ldr	r7, [sp], #4
 4214              	.LCFI208:
 4215              		.cfi_restore 7
 4216              		.cfi_def_cfa_offset 0
 4217 002c 7047     		bx	lr
 4218              	.L278:
 4219 002e 00BF     		.align	2
 4220              	.L277:
 4221 0030 00000000 		.word	xDNSTimer
 4222              		.cfi_endproc
 4223              	.LFE70:
 4225              		.section	.text.vIPReloadDNSTimer,"ax",%progbits
 4226              		.align	2
 4227              		.global	vIPReloadDNSTimer
 4228              		.thumb
 4229              		.thumb_func
 4231              	vIPReloadDNSTimer:
 4232              	.LFB71:
2166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigUSE_DHCP */
2167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #if( ipconfigDNS_USE_CALLBACKS != 0 )
2170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	void vIPReloadDNSTimer( uint32_t ulCheckTime )
2171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	{
 4233              		.loc 1 2171 0
 4234              		.cfi_startproc
 4235              		@ args = 0, pretend = 0, frame = 8
 4236              		@ frame_needed = 1, uses_anonymous_args = 0
 4237 0000 80B5     		push	{r7, lr}
 4238              	.LCFI209:
 4239              		.cfi_def_cfa_offset 8
 4240              		.cfi_offset 7, -8
 4241              		.cfi_offset 14, -4
 4242 0002 82B0     		sub	sp, sp, #8
 4243              	.LCFI210:
 4244              		.cfi_def_cfa_offset 16
 4245 0004 00AF     		add	r7, sp, #0
 4246              	.LCFI211:
 4247              		.cfi_def_cfa_register 7
 4248 0006 7860     		str	r0, [r7, #4]
2172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 		prvIPTimerReload( &xDNSTimer, ulCheckTime );
 4249              		.loc 1 2172 0
 4250 0008 0348     		ldr	r0, .L280
 4251 000a 7968     		ldr	r1, [r7, #4]
 4252 000c FFF7FEFF 		bl	prvIPTimerReload
2173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	}
 4253              		.loc 1 2173 0
 4254 0010 0837     		adds	r7, r7, #8
 4255              	.LCFI212:
 4256              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc946aYs.s 			page 117


 4257 0012 BD46     		mov	sp, r7
 4258              	.LCFI213:
 4259              		.cfi_def_cfa_register 13
 4260              		@ sp needed
 4261 0014 80BD     		pop	{r7, pc}
 4262              	.L281:
 4263 0016 00BF     		.align	2
 4264              	.L280:
 4265 0018 00000000 		.word	xDNSTimer
 4266              		.cfi_endproc
 4267              	.LFE71:
 4269              		.section	.text.xIPIsNetworkTaskReady,"ax",%progbits
 4270              		.align	2
 4271              		.global	xIPIsNetworkTaskReady
 4272              		.thumb
 4273              		.thumb_func
 4275              	xIPIsNetworkTaskReady:
 4276              	.LFB72:
2174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** #endif /* ipconfigDNS_USE_CALLBACKS != 0 */
2175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t xIPIsNetworkTaskReady( void )
2178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4277              		.loc 1 2178 0
 4278              		.cfi_startproc
 4279              		@ args = 0, pretend = 0, frame = 0
 4280              		@ frame_needed = 1, uses_anonymous_args = 0
 4281              		@ link register save eliminated.
 4282 0000 80B4     		push	{r7}
 4283              	.LCFI214:
 4284              		.cfi_def_cfa_offset 4
 4285              		.cfi_offset 7, -4
 4286 0002 00AF     		add	r7, sp, #0
 4287              	.LCFI215:
 4288              		.cfi_def_cfa_register 7
2179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xIPTaskInitialised;
 4289              		.loc 1 2179 0
 4290 0004 034B     		ldr	r3, .L284
 4291 0006 1B68     		ldr	r3, [r3]
2180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4292              		.loc 1 2180 0
 4293 0008 1846     		mov	r0, r3
 4294 000a BD46     		mov	sp, r7
 4295              	.LCFI216:
 4296              		.cfi_def_cfa_register 13
 4297              		@ sp needed
 4298 000c 5DF8047B 		ldr	r7, [sp], #4
 4299              	.LCFI217:
 4300              		.cfi_restore 7
 4301              		.cfi_def_cfa_offset 0
 4302 0010 7047     		bx	lr
 4303              	.L285:
 4304 0012 00BF     		.align	2
 4305              	.L284:
 4306 0014 00000000 		.word	xIPTaskInitialised
 4307              		.cfi_endproc
 4308              	.LFE72:
ARM GAS  /tmp/cc946aYs.s 			page 118


 4310              		.section	.text.FreeRTOS_IsNetworkUp,"ax",%progbits
 4311              		.align	2
 4312              		.global	FreeRTOS_IsNetworkUp
 4313              		.thumb
 4314              		.thumb_func
 4316              	FreeRTOS_IsNetworkUp:
 4317              	.LFB73:
2181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** /*-----------------------------------------------------------*/
2182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 
2183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** BaseType_t FreeRTOS_IsNetworkUp( void )
2184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** {
 4318              		.loc 1 2184 0
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 0
 4321              		@ frame_needed = 1, uses_anonymous_args = 0
 4322              		@ link register save eliminated.
 4323 0000 80B4     		push	{r7}
 4324              	.LCFI218:
 4325              		.cfi_def_cfa_offset 4
 4326              		.cfi_offset 7, -4
 4327 0002 00AF     		add	r7, sp, #0
 4328              	.LCFI219:
 4329              		.cfi_def_cfa_register 7
2185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** 	return xNetworkUp;
 4330              		.loc 1 2185 0
 4331 0004 034B     		ldr	r3, .L288
 4332 0006 1B68     		ldr	r3, [r3]
2186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_IP.c **** }
 4333              		.loc 1 2186 0
 4334 0008 1846     		mov	r0, r3
 4335 000a BD46     		mov	sp, r7
 4336              	.LCFI220:
 4337              		.cfi_def_cfa_register 13
 4338              		@ sp needed
 4339 000c 5DF8047B 		ldr	r7, [sp], #4
 4340              	.LCFI221:
 4341              		.cfi_restore 7
 4342              		.cfi_def_cfa_offset 0
 4343 0010 7047     		bx	lr
 4344              	.L289:
 4345 0012 00BF     		.align	2
 4346              	.L288:
 4347 0014 00000000 		.word	xNetworkUp
 4348              		.cfi_endproc
 4349              	.LFE73:
 4351              		.section	.bss.xStart.6785,"aw",%nobits
 4352              		.align	2
 4355              	xStart.6785:
 4356 0000 00000000 		.space	4
 4357              		.section	.rodata.xNetworkDownEvent.6806,"a",%progbits
 4358              		.align	2
 4361              	xNetworkDownEvent.6806:
 4362 0000 00000000 		.space	8
 4362      00000000 
 4363              		.section	.rodata.xNetworkDownEvent.6811,"a",%progbits
 4364              		.align	2
 4367              	xNetworkDownEvent.6811:
ARM GAS  /tmp/cc946aYs.s 			page 119


 4368 0000 00000000 		.space	8
 4368      00000000 
 4369              		.section	.bss.usSequenceNumber.6875,"aw",%nobits
 4370              		.align	1
 4373              	usSequenceNumber.6875:
 4374 0000 0000     		.space	2
 4375              		.section	.bss.xCallEventHook.6898,"aw",%nobits
 4376              		.align	2
 4379              	xCallEventHook.6898:
 4380 0000 00000000 		.space	4
 4381              		.text
 4382              	.Letext0:
 4383              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 4384              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 4385              		.file 5 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 4386              		.file 6 "../../../FreeRTOS_9_0/Source/include/list.h"
 4387              		.file 7 "../../../FreeRTOS_9_0/Source/include/task.h"
 4388              		.file 8 "../../../FreeRTOS_9_0/Source/include/queue.h"
 4389              		.file 9 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
 4390              		.file 10 "../../../FreeRTOS_9_0/Source/include/event_groups.h"
 4391              		.file 11 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Sockets.h"
 4392              		.file 12 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Stream_Buffer.h"
 4393              		.file 13 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_TCP_WIN.h"
 4394              		.file 14 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
 4395              		.file 15 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_DNS.h"
ARM GAS  /tmp/cc946aYs.s 			page 120


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FreeRTOS_IP.c
     /tmp/cc946aYs.s:25     .bss.xNetworkEventQueue:0000000000000000 xNetworkEventQueue
     /tmp/cc946aYs.s:22     .bss.xNetworkEventQueue:0000000000000000 $d
     /tmp/cc946aYs.s:32     .bss.usPacketIdentifier:0000000000000000 usPacketIdentifier
     /tmp/cc946aYs.s:29     .bss.usPacketIdentifier:0000000000000000 $d
     /tmp/cc946aYs.s:39     .rodata.xBroadcastMACAddress:0000000000000000 xBroadcastMACAddress
     /tmp/cc946aYs.s:36     .rodata.xBroadcastMACAddress:0000000000000000 $d
     /tmp/cc946aYs.s:51     .bss.xNetworkAddressing:0000000000000000 xNetworkAddressing
     /tmp/cc946aYs.s:48     .bss.xNetworkAddressing:0000000000000000 $d
     /tmp/cc946aYs.s:58     .bss.xDefaultAddressing:0000000000000000 xDefaultAddressing
     /tmp/cc946aYs.s:55     .bss.xDefaultAddressing:0000000000000000 $d
     /tmp/cc946aYs.s:61     .bss.xNetworkDownEventPending:0000000000000000 $d
     /tmp/cc946aYs.s:64     .bss.xNetworkDownEventPending:0000000000000000 xNetworkDownEventPending
     /tmp/cc946aYs.s:67     .bss.xIPTaskHandle:0000000000000000 $d
     /tmp/cc946aYs.s:70     .bss.xIPTaskHandle:0000000000000000 xIPTaskHandle
     /tmp/cc946aYs.s:73     .bss.xProcessedTCPMessage:0000000000000000 $d
     /tmp/cc946aYs.s:76     .bss.xProcessedTCPMessage:0000000000000000 xProcessedTCPMessage
     /tmp/cc946aYs.s:79     .bss.xNetworkUp:0000000000000000 $d
     /tmp/cc946aYs.s:82     .bss.xNetworkUp:0000000000000000 xNetworkUp
     /tmp/cc946aYs.s:85     .bss.xARPTimer:0000000000000000 $d
     /tmp/cc946aYs.s:88     .bss.xARPTimer:0000000000000000 xARPTimer
     /tmp/cc946aYs.s:91     .bss.xTCPTimer:0000000000000000 $d
     /tmp/cc946aYs.s:94     .bss.xTCPTimer:0000000000000000 xTCPTimer
     /tmp/cc946aYs.s:97     .bss.xDNSTimer:0000000000000000 $d
     /tmp/cc946aYs.s:100    .bss.xDNSTimer:0000000000000000 xDNSTimer
     /tmp/cc946aYs.s:103    .bss.xIPTaskInitialised:0000000000000000 $d
     /tmp/cc946aYs.s:106    .bss.xIPTaskInitialised:0000000000000000 xIPTaskInitialised
     /tmp/cc946aYs.s:109    .text.prvIPTask:0000000000000000 $t
     /tmp/cc946aYs.s:113    .text.prvIPTask:0000000000000000 prvIPTask
     /tmp/cc946aYs.s:873    .text.FreeRTOS_NetworkDown:0000000000000000 FreeRTOS_NetworkDown
     /tmp/cc946aYs.s:743    .text.prvIPTimerReload:0000000000000000 prvIPTimerReload
     /tmp/cc946aYs.s:533    .text.prvCheckNetworkTimers:0000000000000000 prvCheckNetworkTimers
     /tmp/cc946aYs.s:436    .text.prvCalculateSleepTime:0000000000000000 prvCalculateSleepTime
     /tmp/cc946aYs.s:169    .text.prvIPTask:000000000000004c $d
     /tmp/cc946aYs.s:181    .text.prvIPTask:000000000000007c $t
     /tmp/cc946aYs.s:2305   .text.prvProcessNetworkDownEvent:0000000000000000 prvProcessNetworkDownEvent
     /tmp/cc946aYs.s:398    .text.prvHandleEthernetPacket:0000000000000000 prvHandleEthernetPacket
     /tmp/cc946aYs.s:327    .text.prvIPTask:0000000000000154 $d
     /tmp/cc946aYs.s:336    .text.xIsCallingFromIPTask:0000000000000000 $t
     /tmp/cc946aYs.s:341    .text.xIsCallingFromIPTask:0000000000000000 xIsCallingFromIPTask
     /tmp/cc946aYs.s:389    .text.xIsCallingFromIPTask:0000000000000028 $d
     /tmp/cc946aYs.s:394    .text.prvHandleEthernetPacket:0000000000000000 $t
     /tmp/cc946aYs.s:2414   .text.prvProcessEthernetPacket:0000000000000000 prvProcessEthernetPacket
     /tmp/cc946aYs.s:432    .text.prvCalculateSleepTime:0000000000000000 $t
     /tmp/cc946aYs.s:522    .text.prvCalculateSleepTime:0000000000000068 $d
     /tmp/cc946aYs.s:529    .text.prvCheckNetworkTimers:0000000000000000 $t
     /tmp/cc946aYs.s:787    .text.prvIPTimerCheck:0000000000000000 prvIPTimerCheck
     /tmp/cc946aYs.s:2009   .text.xSendEventToIPTask:0000000000000000 xSendEventToIPTask
     /tmp/cc946aYs.s:676    .text.prvIPTimerStart:0000000000000000 prvIPTimerStart
     /tmp/cc946aYs.s:661    .text.prvCheckNetworkTimers:00000000000000a8 $d
     /tmp/cc946aYs.s:4355   .bss.xStart.6785:0000000000000000 xStart.6785
     /tmp/cc946aYs.s:672    .text.prvIPTimerStart:0000000000000000 $t
     /tmp/cc946aYs.s:739    .text.prvIPTimerReload:0000000000000000 $t
     /tmp/cc946aYs.s:783    .text.prvIPTimerCheck:0000000000000000 $t
     /tmp/cc946aYs.s:868    .text.FreeRTOS_NetworkDown:0000000000000000 $t
     /tmp/cc946aYs.s:2062   .text.xSendEventStructToIPTask:0000000000000000 xSendEventStructToIPTask
ARM GAS  /tmp/cc946aYs.s 			page 121


     /tmp/cc946aYs.s:923    .text.FreeRTOS_NetworkDown:000000000000002c $d
     /tmp/cc946aYs.s:4361   .rodata.xNetworkDownEvent.6806:0000000000000000 xNetworkDownEvent.6806
     /tmp/cc946aYs.s:929    .text.FreeRTOS_NetworkDownFromISR:0000000000000000 $t
     /tmp/cc946aYs.s:934    .text.FreeRTOS_NetworkDownFromISR:0000000000000000 FreeRTOS_NetworkDownFromISR
     /tmp/cc946aYs.s:992    .text.FreeRTOS_NetworkDownFromISR:000000000000003c $d
     /tmp/cc946aYs.s:4367   .rodata.xNetworkDownEvent.6811:0000000000000000 xNetworkDownEvent.6811
     /tmp/cc946aYs.s:999    .text.FreeRTOS_GetUDPPayloadBuffer:0000000000000000 $t
     /tmp/cc946aYs.s:1004   .text.FreeRTOS_GetUDPPayloadBuffer:0000000000000000 FreeRTOS_GetUDPPayloadBuffer
     /tmp/cc946aYs.s:1070   .text.pxDuplicateNetworkBufferWithDescriptor:0000000000000000 $t
     /tmp/cc946aYs.s:1075   .text.pxDuplicateNetworkBufferWithDescriptor:0000000000000000 pxDuplicateNetworkBufferWithDescriptor
     /tmp/cc946aYs.s:1147   .text.pxPacketBuffer_to_NetworkBuffer:0000000000000000 $t
     /tmp/cc946aYs.s:1152   .text.pxPacketBuffer_to_NetworkBuffer:0000000000000000 pxPacketBuffer_to_NetworkBuffer
     /tmp/cc946aYs.s:1221   .text.pxUDPPayloadBuffer_to_NetworkBuffer:0000000000000000 $t
     /tmp/cc946aYs.s:1226   .text.pxUDPPayloadBuffer_to_NetworkBuffer:0000000000000000 pxUDPPayloadBuffer_to_NetworkBuffer
     /tmp/cc946aYs.s:1295   .text.FreeRTOS_ReleaseUDPPayloadBuffer:0000000000000000 $t
     /tmp/cc946aYs.s:1300   .text.FreeRTOS_ReleaseUDPPayloadBuffer:0000000000000000 FreeRTOS_ReleaseUDPPayloadBuffer
     /tmp/cc946aYs.s:1337   .rodata:0000000000000000 $d
     /tmp/cc946aYs.s:1344   .text.FreeRTOS_IPInit:0000000000000000 $t
     /tmp/cc946aYs.s:1349   .text.FreeRTOS_IPInit:0000000000000000 FreeRTOS_IPInit
     /tmp/cc946aYs.s:4275   .text.xIPIsNetworkTaskReady:0000000000000000 xIPIsNetworkTaskReady
     /tmp/cc946aYs.s:1666   .text.FreeRTOS_IPInit:00000000000001e0 $d
     /tmp/cc946aYs.s:1678   .text.FreeRTOS_GetAddressConfiguration:0000000000000000 $t
     /tmp/cc946aYs.s:1683   .text.FreeRTOS_GetAddressConfiguration:0000000000000000 FreeRTOS_GetAddressConfiguration
     /tmp/cc946aYs.s:1760   .text.FreeRTOS_GetAddressConfiguration:0000000000000050 $d
     /tmp/cc946aYs.s:1766   .text.FreeRTOS_SetAddressConfiguration:0000000000000000 $t
     /tmp/cc946aYs.s:1771   .text.FreeRTOS_SetAddressConfiguration:0000000000000000 FreeRTOS_SetAddressConfiguration
     /tmp/cc946aYs.s:1848   .text.FreeRTOS_SetAddressConfiguration:0000000000000050 $d
     /tmp/cc946aYs.s:1854   .text.FreeRTOS_SendPingRequest:0000000000000000 $t
     /tmp/cc946aYs.s:1859   .text.FreeRTOS_SendPingRequest:0000000000000000 FreeRTOS_SendPingRequest
     /tmp/cc946aYs.s:1999   .text.FreeRTOS_SendPingRequest:00000000000000c8 $d
     /tmp/cc946aYs.s:4373   .bss.usSequenceNumber.6875:0000000000000000 usSequenceNumber.6875
     /tmp/cc946aYs.s:2004   .text.xSendEventToIPTask:0000000000000000 $t
     /tmp/cc946aYs.s:2057   .text.xSendEventStructToIPTask:0000000000000000 $t
     /tmp/cc946aYs.s:2169   .text.xSendEventStructToIPTask:000000000000008c $d
     /tmp/cc946aYs.s:2175   .text.eConsiderFrameForProcessing:0000000000000000 $t
     /tmp/cc946aYs.s:2180   .text.eConsiderFrameForProcessing:0000000000000000 eConsiderFrameForProcessing
     /tmp/cc946aYs.s:2294   .text.eConsiderFrameForProcessing:0000000000000094 $d
     /tmp/cc946aYs.s:2301   .text.prvProcessNetworkDownEvent:0000000000000000 $t
     /tmp/cc946aYs.s:2370   .text.vIPNetworkUpCalls:0000000000000000 vIPNetworkUpCalls
     /tmp/cc946aYs.s:2359   .text.prvProcessNetworkDownEvent:0000000000000040 $d
     /tmp/cc946aYs.s:4379   .bss.xCallEventHook.6898:0000000000000000 xCallEventHook.6898
     /tmp/cc946aYs.s:2365   .text.vIPNetworkUpCalls:0000000000000000 $t
     /tmp/cc946aYs.s:2404   .text.vIPNetworkUpCalls:0000000000000020 $d
     /tmp/cc946aYs.s:2410   .text.prvProcessEthernetPacket:0000000000000000 $t
     /tmp/cc946aYs.s:2669   .text.prvProcessIPPacket:0000000000000000 prvProcessIPPacket
     /tmp/cc946aYs.s:3735   .text.vReturnEthernetFrame:0000000000000000 vReturnEthernetFrame
     /tmp/cc946aYs.s:2540   .text.prvAllowIPPacket:0000000000000000 $t
     /tmp/cc946aYs.s:2544   .text.prvAllowIPPacket:0000000000000000 prvAllowIPPacket
     /tmp/cc946aYs.s:2658   .text.prvAllowIPPacket:0000000000000088 $d
     /tmp/cc946aYs.s:2665   .text.prvProcessIPPacket:0000000000000000 $t
     /tmp/cc946aYs.s:3139   .text.prvProcessICMPPacket:0000000000000000 prvProcessICMPPacket
     /tmp/cc946aYs.s:2886   .text.prvProcessIPPacket:000000000000014c $d
     /tmp/cc946aYs.s:2892   .text.prvProcessICMPEchoReply:0000000000000000 $t
     /tmp/cc946aYs.s:2896   .text.prvProcessICMPEchoReply:0000000000000000 prvProcessICMPEchoReply
     /tmp/cc946aYs.s:3002   .text.prvProcessICMPEchoRequest:0000000000000000 $t
     /tmp/cc946aYs.s:3006   .text.prvProcessICMPEchoRequest:0000000000000000 prvProcessICMPEchoRequest
     /tmp/cc946aYs.s:3130   .text.prvProcessICMPEchoRequest:00000000000000ac $d
ARM GAS  /tmp/cc946aYs.s 			page 122


     /tmp/cc946aYs.s:3135   .text.prvProcessICMPPacket:0000000000000000 $t
     /tmp/cc946aYs.s:3200   .text.usGenerateProtocolChecksum:0000000000000000 $t
     /tmp/cc946aYs.s:3205   .text.usGenerateProtocolChecksum:0000000000000000 usGenerateProtocolChecksum
     /tmp/cc946aYs.s:3433   .text.usGenerateChecksum:0000000000000000 usGenerateChecksum
     /tmp/cc946aYs.s:3428   .text.usGenerateChecksum:0000000000000000 $t
     /tmp/cc946aYs.s:3725   .text.usGenerateChecksum:00000000000001ac $d
     /tmp/cc946aYs.s:3730   .text.vReturnEthernetFrame:0000000000000000 $t
     /tmp/cc946aYs.s:3812   .text.vReturnEthernetFrame:0000000000000060 $d
     /tmp/cc946aYs.s:3817   .text.FreeRTOS_GetIPAddress:0000000000000000 $t
     /tmp/cc946aYs.s:3822   .text.FreeRTOS_GetIPAddress:0000000000000000 FreeRTOS_GetIPAddress
     /tmp/cc946aYs.s:3853   .text.FreeRTOS_GetIPAddress:0000000000000014 $d
     /tmp/cc946aYs.s:3858   .text.FreeRTOS_SetIPAddress:0000000000000000 $t
     /tmp/cc946aYs.s:3863   .text.FreeRTOS_SetIPAddress:0000000000000000 FreeRTOS_SetIPAddress
     /tmp/cc946aYs.s:3901   .text.FreeRTOS_SetIPAddress:0000000000000018 $d
     /tmp/cc946aYs.s:3906   .text.FreeRTOS_GetGatewayAddress:0000000000000000 $t
     /tmp/cc946aYs.s:3911   .text.FreeRTOS_GetGatewayAddress:0000000000000000 FreeRTOS_GetGatewayAddress
     /tmp/cc946aYs.s:3942   .text.FreeRTOS_GetGatewayAddress:0000000000000014 $d
     /tmp/cc946aYs.s:3947   .text.FreeRTOS_GetDNSServerAddress:0000000000000000 $t
     /tmp/cc946aYs.s:3952   .text.FreeRTOS_GetDNSServerAddress:0000000000000000 FreeRTOS_GetDNSServerAddress
     /tmp/cc946aYs.s:3983   .text.FreeRTOS_GetDNSServerAddress:0000000000000014 $d
     /tmp/cc946aYs.s:3988   .text.FreeRTOS_GetNetmask:0000000000000000 $t
     /tmp/cc946aYs.s:3993   .text.FreeRTOS_GetNetmask:0000000000000000 FreeRTOS_GetNetmask
     /tmp/cc946aYs.s:4024   .text.FreeRTOS_GetNetmask:0000000000000014 $d
     /tmp/cc946aYs.s:4029   .text.FreeRTOS_GetMACAddress:0000000000000000 $t
     /tmp/cc946aYs.s:4034   .text.FreeRTOS_GetMACAddress:0000000000000000 FreeRTOS_GetMACAddress
     /tmp/cc946aYs.s:4064   .text.FreeRTOS_GetMACAddress:0000000000000010 $d
     /tmp/cc946aYs.s:4069   .text.FreeRTOS_SetNetmask:0000000000000000 $t
     /tmp/cc946aYs.s:4074   .text.FreeRTOS_SetNetmask:0000000000000000 FreeRTOS_SetNetmask
     /tmp/cc946aYs.s:4112   .text.FreeRTOS_SetNetmask:0000000000000018 $d
     /tmp/cc946aYs.s:4117   .text.FreeRTOS_SetGatewayAddress:0000000000000000 $t
     /tmp/cc946aYs.s:4122   .text.FreeRTOS_SetGatewayAddress:0000000000000000 FreeRTOS_SetGatewayAddress
     /tmp/cc946aYs.s:4160   .text.FreeRTOS_SetGatewayAddress:0000000000000018 $d
     /tmp/cc946aYs.s:4165   .text.vIPSetDnsTimerEnableState:0000000000000000 $t
     /tmp/cc946aYs.s:4170   .text.vIPSetDnsTimerEnableState:0000000000000000 vIPSetDnsTimerEnableState
     /tmp/cc946aYs.s:4221   .text.vIPSetDnsTimerEnableState:0000000000000030 $d
     /tmp/cc946aYs.s:4226   .text.vIPReloadDNSTimer:0000000000000000 $t
     /tmp/cc946aYs.s:4231   .text.vIPReloadDNSTimer:0000000000000000 vIPReloadDNSTimer
     /tmp/cc946aYs.s:4265   .text.vIPReloadDNSTimer:0000000000000018 $d
     /tmp/cc946aYs.s:4270   .text.xIPIsNetworkTaskReady:0000000000000000 $t
     /tmp/cc946aYs.s:4306   .text.xIPIsNetworkTaskReady:0000000000000014 $d
     /tmp/cc946aYs.s:4311   .text.FreeRTOS_IsNetworkUp:0000000000000000 $t
     /tmp/cc946aYs.s:4316   .text.FreeRTOS_IsNetworkUp:0000000000000000 FreeRTOS_IsNetworkUp
     /tmp/cc946aYs.s:4347   .text.FreeRTOS_IsNetworkUp:0000000000000014 $d
     /tmp/cc946aYs.s:4352   .bss.xStart.6785:0000000000000000 $d
     /tmp/cc946aYs.s:4358   .rodata.xNetworkDownEvent.6806:0000000000000000 $d
     /tmp/cc946aYs.s:4364   .rodata.xNetworkDownEvent.6811:0000000000000000 $d
     /tmp/cc946aYs.s:4370   .bss.usSequenceNumber.6875:0000000000000000 $d
     /tmp/cc946aYs.s:4376   .bss.xCallEventHook.6898:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xQueueGenericReceive
vARPAgeCache
vSocketBind
vSocketWakeUpUser
vSocketClose
vProcessGeneratedUDPPacket
ARM GAS  /tmp/cc946aYs.s 			page 123


vSocketSelect
FreeRTOS_SignalSocket
xTCPCheckNewClient
vTCPNetStat
xTaskGetCurrentTaskHandle
vDNSCheckCallBack
uxQueueMessagesWaiting
xTaskGetTickCount
xTCPTimerCheck
ulNextInitialSequenceNumber
vTaskSetTimeOutState
xTaskCheckForTimeOut
xQueueGenericSendFromISR
pxGetNetworkBufferWithDescriptor
memcpy
vReleaseNetworkBufferAndDescriptor
xQueueGenericCreate
vQueueAddToRegistry
xNetworkBuffersInitialise
vNetworkSocketsInit
xTaskCreate
vQueueDelete
xDefaultPartUDPPacketHeader
memset
xQueueGenericSend
memcmp
xLLMNR_MacAdress
vApplicationIPNetworkEventHook
xNetworkInterfaceInitialise
vTaskDelay
vDNSInitialise
eARPProcessPacket
memmove
vARPRefreshCacheEntry
xProcessReceivedUDPPacket
xProcessReceivedTCPPacket
vApplicationPingReplyHook
xNetworkInterfaceOutput

ARM GAS  /tmp/cc1MosAC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f7xx_hal_flash_ex.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_FLASHEx_Erase,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_FLASHEx_Erase
  23              		.thumb
  24              		.thumb_func
  26              	HAL_FLASHEx_Erase:
  27              	.LFB135:
  28              		.file 1 "../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c"
   1:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
   2:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   ******************************************************************************
   3:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @file    stm32f7xx_hal_flash_ex.c
   4:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @author  MCD Application Team
   5:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @version V1.1.2
   6:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @date    23-September-2016 
   7:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief   Extended FLASH HAL module driver.
   8:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This file provides firmware functions to manage the following 
   9:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          functionalities of the FLASH extension peripheral:
  10:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *           + Extended programming operations functions
  11:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *  
  12:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   @verbatim
  13:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   ==============================================================================
  14:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                    ##### Flash Extension features #####
  15:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   ==============================================================================
  16:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            
  17:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   [..] Comparing to other previous devices, the FLASH interface for STM32F76xx/STM32F77xx 
  18:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****        devices contains the following additional features 
  19:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****        
  20:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****        (+) Capacity up to 2 Mbyte with dual bank architecture supporting read-while-write
  21:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            capability (RWW)
  22:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****        (+) Dual bank memory organization       
  23:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****        (+) Dual boot mode
  24:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****    
  25:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                       ##### How to use this driver #####
  26:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   ==============================================================================
  27:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   [..] This driver provides functions to configure and program the FLASH memory 
  28:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****        of all STM32F7xx devices. It includes
  29:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       (#) FLASH Memory Erase functions: 
  30:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and 
ARM GAS  /tmp/cc1MosAC.s 			page 2


  31:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                 HAL_FLASH_Lock() functions
  32:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            (++) Erase function: Erase sector, erase all sectors
  33:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            (++) There are two modes of erase :
  34:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****              (+++) Polling Mode using HAL_FLASHEx_Erase()
  35:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****              (+++) Interrupt Mode using HAL_FLASHEx_Erase_IT()
  36:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****              
  37:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       (#) Option Bytes Programming functions: Use HAL_FLASHEx_OBProgram() to :
  38:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            (++) Set/Reset the write protection
  39:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            (++) Set the Read protection Level
  40:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            (++) Set the BOR level
  41:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****            (++) Program the user Option Bytes
  42:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
  43:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   @endverbatim
  44:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   ******************************************************************************
  45:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @attention
  46:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
  47:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  48:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
  49:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  50:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * are permitted provided that the following conditions are met:
  51:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  52:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *      this list of conditions and the following disclaimer.
  53:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  54:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  55:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *      and/or other materials provided with the distribution.
  56:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  57:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *      may be used to endorse or promote products derived from this software
  58:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *      without specific prior written permission.
  59:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
  60:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  61:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  62:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  63:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  64:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  65:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  66:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  67:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  68:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  69:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  70:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
  71:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   ******************************************************************************
  72:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */ 
  73:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
  74:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /* Includes ------------------------------------------------------------------*/
  75:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #include "stm32f7xx_hal.h"
  76:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
  77:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /** @addtogroup STM32F7xx_HAL_Driver
  78:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @{
  79:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
  80:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
  81:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /** @defgroup FLASHEx FLASHEx
  82:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief FLASH HAL Extension module driver
  83:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @{
  84:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
  85:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
  86:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  87:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cc1MosAC.s 			page 3


  88:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /* Private typedef -----------------------------------------------------------*/
  89:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /* Private define ------------------------------------------------------------*/
  90:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Constants
  91:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @{
  92:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */    
  93:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #define SECTOR_MASK               0xFFFFFF07U
  94:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #define FLASH_TIMEOUT_VALUE       50000U/* 50 s */
  95:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
  96:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @}
  97:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
  98:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     
  99:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /* Private macro -------------------------------------------------------------*/
 100:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /* Private variables ---------------------------------------------------------*/
 101:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Variables
 102:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @{
 103:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */    
 104:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** extern FLASH_ProcessTypeDef pFlash;
 105:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 106:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @}
 107:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 108:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 109:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /* Private function prototypes -----------------------------------------------*/
 110:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Functions
 111:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @{
 112:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 113:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /* Option bytes control */
 114:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_EnableWRP(uint32_t WRPSector);
 115:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_DisableWRP(uint32_t WRPSector);
 116:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_RDP_LevelConfig(uint8_t Level);
 117:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BOR_LevelConfig(uint8_t Level);
 118:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address);
 119:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetUser(void);
 120:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetWRP(void);
 121:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetRDP(void);
 122:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetBOR(void);
 123:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetBootAddress(uint32_t BootOption);
 124:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 125:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)
 126:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static void               FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks);
 127:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t
 128:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                               uint32_t Iwdgstdby, uint32_t NDBank, uint32_t NDBoot)
 129:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #else
 130:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static void               FLASH_MassErase(uint8_t VoltageRange);
 131:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t
 132:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */
 133:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 134:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** extern HAL_StatusTypeDef  FLASH_WaitForLastOperation(uint32_t Timeout);
 135:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 136:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @}
 137:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 138:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 139:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /* Exported functions --------------------------------------------------------*/
 140:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions FLASHEx Exported Functions
 141:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @{
 142:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 143:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 144:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group1 Extended IO operation functions
ARM GAS  /tmp/cc1MosAC.s 			page 4


 145:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****  *  @brief   Extended IO operation functions 
 146:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****  *
 147:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** @verbatim   
 148:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****  ===============================================================================
 149:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                 ##### Extended programming operation functions #####
 150:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****  ===============================================================================  
 151:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     [..]
 152:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     This subsection provides a set of functions allowing to manage the Extension FLASH 
 153:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     programming operations Operations.
 154:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 155:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** @endverbatim
 156:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @{
 157:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 158:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 159:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory sectors 
 160:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param[in]  pEraseInit: pointer to an FLASH_EraseInitTypeDef structure that
 161:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 162:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 163:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param[out]  SectorError: pointer to variable  that
 164:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information on faulty sector in case of error 
 165:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         (0xFFFFFFFF means that all the sectors have been correctly erased)
 166:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 167:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 168:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 169:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
 170:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
  29              		.loc 1 170 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 84B0     		sub	sp, sp, #16
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
  45 0008 3960     		str	r1, [r7]
 171:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
  46              		.loc 1 171 0
  47 000a 0123     		movs	r3, #1
  48 000c FB73     		strb	r3, [r7, #15]
 172:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t index = 0;
  49              		.loc 1 172 0
  50 000e 0023     		movs	r3, #0
  51 0010 BB60     		str	r3, [r7, #8]
 173:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 174:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Locked */
 175:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
  52              		.loc 1 175 0
  53 0012 304B     		ldr	r3, .L9
  54 0014 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
ARM GAS  /tmp/cc1MosAC.s 			page 5


  55 0016 012B     		cmp	r3, #1
  56 0018 01D1     		bne	.L2
  57              		.loc 1 175 0 is_stmt 0 discriminator 1
  58 001a 0223     		movs	r3, #2
  59 001c 56E0     		b	.L3
  60              	.L2:
  61              		.loc 1 175 0 discriminator 2
  62 001e 2D4B     		ldr	r3, .L9
  63 0020 0122     		movs	r2, #1
  64 0022 1A75     		strb	r2, [r3, #20]
 176:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 177:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 178:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 179:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 180:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 181:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  65              		.loc 1 181 0 is_stmt 1 discriminator 2
  66 0024 4CF25030 		movw	r0, #50000
  67 0028 FFF7FEFF 		bl	FLASH_WaitForLastOperation
  68 002c 0346     		mov	r3, r0
  69 002e FB73     		strb	r3, [r7, #15]
 182:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 183:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
  70              		.loc 1 183 0 discriminator 2
  71 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  72 0032 002B     		cmp	r3, #0
  73 0034 46D1     		bne	.L4
 184:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 185:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /*Initialization of SectorError variable*/
 186:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     *SectorError = 0xFFFFFFFFU;
  74              		.loc 1 186 0
  75 0036 3B68     		ldr	r3, [r7]
  76 0038 4FF0FF32 		mov	r2, #-1
  77 003c 1A60     		str	r2, [r3]
 187:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     
 188:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
  78              		.loc 1 188 0
  79 003e 7B68     		ldr	r3, [r7, #4]
  80 0040 1B68     		ldr	r3, [r3]
  81 0042 012B     		cmp	r3, #1
  82 0044 15D1     		bne	.L5
 189:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     {
 190:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       /*Mass erase to be done*/
 191:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)      
 192:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
  83              		.loc 1 192 0
  84 0046 7B68     		ldr	r3, [r7, #4]
  85 0048 1B69     		ldr	r3, [r3, #16]
  86 004a DAB2     		uxtb	r2, r3
  87 004c 7B68     		ldr	r3, [r7, #4]
  88 004e 5B68     		ldr	r3, [r3, #4]
  89 0050 1046     		mov	r0, r2
  90 0052 1946     		mov	r1, r3
  91 0054 FFF7FEFF 		bl	FLASH_MassErase
 193:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #else
 194:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 195:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */
ARM GAS  /tmp/cc1MosAC.s 			page 6


 196:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                       
 197:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 198:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  92              		.loc 1 198 0
  93 0058 4CF25030 		movw	r0, #50000
  94 005c FFF7FEFF 		bl	FLASH_WaitForLastOperation
  95 0060 0346     		mov	r3, r0
  96 0062 FB73     		strb	r3, [r7, #15]
 199:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       
 200:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       /* if the erase operation is completed, disable the MER Bit */
 201:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       FLASH->CR &= (~FLASH_MER_BIT);
  97              		.loc 1 201 0
  98 0064 1C49     		ldr	r1, .L9+4
  99 0066 1C4B     		ldr	r3, .L9+4
 100 0068 1A69     		ldr	r2, [r3, #16]
 101 006a 1C4B     		ldr	r3, .L9+8
 102 006c 1340     		ands	r3, r3, r2
 103 006e 0B61     		str	r3, [r1, #16]
 104 0070 28E0     		b	.L4
 105              	.L5:
 202:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     }
 203:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     else
 204:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     {
 205:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       /* Check the parameters */
 206:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 207:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 208:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       /* Erase by sector by sector to be done*/
 209:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++
 106              		.loc 1 209 0
 107 0072 7B68     		ldr	r3, [r7, #4]
 108 0074 9B68     		ldr	r3, [r3, #8]
 109 0076 BB60     		str	r3, [r7, #8]
 110 0078 1CE0     		b	.L6
 111              	.L8:
 210:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       {
 211:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 112              		.loc 1 211 0
 113 007a 7B68     		ldr	r3, [r7, #4]
 114 007c 1B69     		ldr	r3, [r3, #16]
 115 007e DBB2     		uxtb	r3, r3
 116 0080 B868     		ldr	r0, [r7, #8]
 117 0082 1946     		mov	r1, r3
 118 0084 FFF7FEFF 		bl	FLASH_Erase_Sector
 212:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 213:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 214:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 119              		.loc 1 214 0
 120 0088 4CF25030 		movw	r0, #50000
 121 008c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 122 0090 0346     		mov	r3, r0
 123 0092 FB73     		strb	r3, [r7, #15]
 215:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         
 216:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         /* If the erase operation is completed, disable the SER Bit and SNB Bits */
 217:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 124              		.loc 1 217 0
 125 0094 104A     		ldr	r2, .L9+4
 126 0096 104B     		ldr	r3, .L9+4
ARM GAS  /tmp/cc1MosAC.s 			page 7


 127 0098 1B69     		ldr	r3, [r3, #16]
 128 009a 23F0FA03 		bic	r3, r3, #250
 129 009e 1361     		str	r3, [r2, #16]
 218:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 219:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         if(status != HAL_OK) 
 130              		.loc 1 219 0
 131 00a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 132 00a2 002B     		cmp	r3, #0
 133 00a4 03D0     		beq	.L7
 220:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         {
 221:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****           /* In case of error, stop erase procedure and return the faulty sector*/
 222:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****           *SectorError = index;
 134              		.loc 1 222 0
 135 00a6 3B68     		ldr	r3, [r7]
 136 00a8 BA68     		ldr	r2, [r7, #8]
 137 00aa 1A60     		str	r2, [r3]
 223:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****           break;
 138              		.loc 1 223 0
 139 00ac 0AE0     		b	.L4
 140              	.L7:
 209:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       {
 141              		.loc 1 209 0 discriminator 2
 142 00ae BB68     		ldr	r3, [r7, #8]
 143 00b0 0133     		adds	r3, r3, #1
 144 00b2 BB60     		str	r3, [r7, #8]
 145              	.L6:
 209:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       {
 146              		.loc 1 209 0 is_stmt 0 discriminator 1
 147 00b4 7B68     		ldr	r3, [r7, #4]
 148 00b6 DA68     		ldr	r2, [r3, #12]
 149 00b8 7B68     		ldr	r3, [r7, #4]
 150 00ba 9B68     		ldr	r3, [r3, #8]
 151 00bc 1A44     		add	r2, r2, r3
 152 00be BB68     		ldr	r3, [r7, #8]
 153 00c0 9A42     		cmp	r2, r3
 154 00c2 DAD8     		bhi	.L8
 155              	.L4:
 224:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         }
 225:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       }
 226:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     }
 227:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 228:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 229:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Unlocked */
 230:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 156              		.loc 1 230 0 is_stmt 1
 157 00c4 034B     		ldr	r3, .L9
 158 00c6 0022     		movs	r2, #0
 159 00c8 1A75     		strb	r2, [r3, #20]
 231:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 232:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 160              		.loc 1 232 0
 161 00ca FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 162              	.L3:
 233:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 163              		.loc 1 233 0
 164 00cc 1846     		mov	r0, r3
 165 00ce 1037     		adds	r7, r7, #16
ARM GAS  /tmp/cc1MosAC.s 			page 8


 166              	.LCFI3:
 167              		.cfi_def_cfa_offset 8
 168 00d0 BD46     		mov	sp, r7
 169              	.LCFI4:
 170              		.cfi_def_cfa_register 13
 171              		@ sp needed
 172 00d2 80BD     		pop	{r7, pc}
 173              	.L10:
 174              		.align	2
 175              	.L9:
 176 00d4 00000000 		.word	pFlash
 177 00d8 003C0240 		.word	1073888256
 178 00dc FB7FFFFF 		.word	-32773
 179              		.cfi_endproc
 180              	.LFE135:
 182              		.section	.text.HAL_FLASHEx_Erase_IT,"ax",%progbits
 183              		.align	2
 184              		.global	HAL_FLASHEx_Erase_IT
 185              		.thumb
 186              		.thumb_func
 188              	HAL_FLASHEx_Erase_IT:
 189              	.LFB136:
 234:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 235:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 236:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory sectors  with interrupt enable
 237:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  pEraseInit: pointer to an FLASH_EraseInitTypeDef structure that
 238:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 239:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 240:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 241:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 242:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
 243:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 190              		.loc 1 243 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 16
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              	.LCFI5:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 0002 84B0     		sub	sp, sp, #16
 200              	.LCFI6:
 201              		.cfi_def_cfa_offset 24
 202 0004 00AF     		add	r7, sp, #0
 203              	.LCFI7:
 204              		.cfi_def_cfa_register 7
 205 0006 7860     		str	r0, [r7, #4]
 244:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 206              		.loc 1 244 0
 207 0008 0023     		movs	r3, #0
 208 000a FB73     		strb	r3, [r7, #15]
 245:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 246:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Locked */
 247:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 209              		.loc 1 247 0
 210 000c 234B     		ldr	r3, .L16
ARM GAS  /tmp/cc1MosAC.s 			page 9


 211 000e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 212 0010 012B     		cmp	r3, #1
 213 0012 01D1     		bne	.L12
 214              		.loc 1 247 0 is_stmt 0 discriminator 1
 215 0014 0223     		movs	r3, #2
 216 0016 3CE0     		b	.L13
 217              	.L12:
 218              		.loc 1 247 0 discriminator 2
 219 0018 204B     		ldr	r3, .L16
 220 001a 0122     		movs	r2, #1
 221 001c 1A75     		strb	r2, [r3, #20]
 248:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 249:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 250:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 251:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 252:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Enable End of FLASH Operation interrupt */
 253:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 222              		.loc 1 253 0 is_stmt 1 discriminator 2
 223 001e 204A     		ldr	r2, .L16+4
 224 0020 1F4B     		ldr	r3, .L16+4
 225 0022 1B69     		ldr	r3, [r3, #16]
 226 0024 43F08073 		orr	r3, r3, #16777216
 227 0028 1361     		str	r3, [r2, #16]
 254:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 255:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Enable Error source interrupt */
 256:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 228              		.loc 1 256 0 discriminator 2
 229 002a 1D4A     		ldr	r2, .L16+4
 230 002c 1C4B     		ldr	r3, .L16+4
 231 002e 1B69     		ldr	r3, [r3, #16]
 232 0030 43F00073 		orr	r3, r3, #33554432
 233 0034 1361     		str	r3, [r2, #16]
 257:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 258:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Clear pending flags (if any) */  
 259:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 234              		.loc 1 259 0 discriminator 2
 235 0036 1A4B     		ldr	r3, .L16+4
 236 0038 F322     		movs	r2, #243
 237 003a DA60     		str	r2, [r3, #12]
 260:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  
 261:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 262:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 238              		.loc 1 262 0 discriminator 2
 239 003c 7B68     		ldr	r3, [r7, #4]
 240 003e 1B68     		ldr	r3, [r3]
 241 0040 012B     		cmp	r3, #1
 242 0042 0CD1     		bne	.L14
 263:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 264:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /*Mass erase to be done*/
 265:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 243              		.loc 1 265 0
 244 0044 154B     		ldr	r3, .L16
 245 0046 0222     		movs	r2, #2
 246 0048 1A70     		strb	r2, [r3]
 266:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)    
 267:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 247              		.loc 1 267 0
ARM GAS  /tmp/cc1MosAC.s 			page 10


 248 004a 7B68     		ldr	r3, [r7, #4]
 249 004c 1B69     		ldr	r3, [r3, #16]
 250 004e DAB2     		uxtb	r2, r3
 251 0050 7B68     		ldr	r3, [r7, #4]
 252 0052 5B68     		ldr	r3, [r3, #4]
 253 0054 1046     		mov	r0, r2
 254 0056 1946     		mov	r1, r3
 255 0058 FFF7FEFF 		bl	FLASH_MassErase
 256 005c 18E0     		b	.L15
 257              	.L14:
 268:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #else
 269:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 270:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */    
 271:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 272:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else
 273:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 274:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /* Erase by sector to be done*/
 275:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 276:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /* Check the parameters */
 277:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 278:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 279:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 258              		.loc 1 279 0
 259 005e 0F4B     		ldr	r3, .L16
 260 0060 0122     		movs	r2, #1
 261 0062 1A70     		strb	r2, [r3]
 280:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 262              		.loc 1 280 0
 263 0064 7B68     		ldr	r3, [r7, #4]
 264 0066 DB68     		ldr	r3, [r3, #12]
 265 0068 0C4A     		ldr	r2, .L16
 266 006a 5360     		str	r3, [r2, #4]
 281:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.Sector = pEraseInit->Sector;
 267              		.loc 1 281 0
 268 006c 7B68     		ldr	r3, [r7, #4]
 269 006e 9B68     		ldr	r3, [r3, #8]
 270 0070 0A4A     		ldr	r2, .L16
 271 0072 D360     		str	r3, [r2, #12]
 282:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 272              		.loc 1 282 0
 273 0074 7B68     		ldr	r3, [r7, #4]
 274 0076 1B69     		ldr	r3, [r3, #16]
 275 0078 DAB2     		uxtb	r2, r3
 276 007a 084B     		ldr	r3, .L16
 277 007c 1A72     		strb	r2, [r3, #8]
 283:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 284:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /*Erase 1st sector and wait for IT*/
 285:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 278              		.loc 1 285 0
 279 007e 7B68     		ldr	r3, [r7, #4]
 280 0080 9A68     		ldr	r2, [r3, #8]
 281 0082 7B68     		ldr	r3, [r7, #4]
 282 0084 1B69     		ldr	r3, [r3, #16]
 283 0086 DBB2     		uxtb	r3, r3
 284 0088 1046     		mov	r0, r2
 285 008a 1946     		mov	r1, r3
 286 008c FFF7FEFF 		bl	FLASH_Erase_Sector
ARM GAS  /tmp/cc1MosAC.s 			page 11


 287              	.L15:
 286:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 287:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 288:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 288              		.loc 1 288 0
 289 0090 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 290              	.L13:
 289:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 291              		.loc 1 289 0
 292 0092 1846     		mov	r0, r3
 293 0094 1037     		adds	r7, r7, #16
 294              	.LCFI8:
 295              		.cfi_def_cfa_offset 8
 296 0096 BD46     		mov	sp, r7
 297              	.LCFI9:
 298              		.cfi_def_cfa_register 13
 299              		@ sp needed
 300 0098 80BD     		pop	{r7, pc}
 301              	.L17:
 302 009a 00BF     		.align	2
 303              	.L16:
 304 009c 00000000 		.word	pFlash
 305 00a0 003C0240 		.word	1073888256
 306              		.cfi_endproc
 307              	.LFE136:
 309              		.section	.text.HAL_FLASHEx_OBProgram,"ax",%progbits
 310              		.align	2
 311              		.global	HAL_FLASHEx_OBProgram
 312              		.thumb
 313              		.thumb_func
 315              	HAL_FLASHEx_OBProgram:
 316              	.LFB137:
 290:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 291:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 292:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Program option bytes
 293:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  pOBInit: pointer to an FLASH_OBInitStruct structure that
 294:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 295:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 296:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 297:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 298:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
 299:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 317              		.loc 1 299 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 16
 320              		@ frame_needed = 1, uses_anonymous_args = 0
 321 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 322              	.LCFI10:
 323              		.cfi_def_cfa_offset 20
 324              		.cfi_offset 4, -20
 325              		.cfi_offset 5, -16
 326              		.cfi_offset 6, -12
 327              		.cfi_offset 7, -8
 328              		.cfi_offset 14, -4
 329 0002 89B0     		sub	sp, sp, #36
 330              	.LCFI11:
 331              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/cc1MosAC.s 			page 12


 332 0004 04AF     		add	r7, sp, #16
 333              	.LCFI12:
 334              		.cfi_def_cfa 7, 40
 335 0006 7860     		str	r0, [r7, #4]
 300:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 336              		.loc 1 300 0
 337 0008 0123     		movs	r3, #1
 338 000a FB73     		strb	r3, [r7, #15]
 301:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 302:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Locked */
 303:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 339              		.loc 1 303 0
 340 000c 494B     		ldr	r3, .L28
 341 000e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 342 0010 012B     		cmp	r3, #1
 343 0012 01D1     		bne	.L19
 344              		.loc 1 303 0 is_stmt 0 discriminator 1
 345 0014 0223     		movs	r3, #2
 346 0016 89E0     		b	.L20
 347              	.L19:
 348              		.loc 1 303 0 discriminator 2
 349 0018 464B     		ldr	r3, .L28
 350 001a 0122     		movs	r2, #1
 351 001c 1A75     		strb	r2, [r3, #20]
 304:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 305:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 306:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 307:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 308:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Write protection configuration */
 309:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 352              		.loc 1 309 0 is_stmt 1 discriminator 2
 353 001e 7B68     		ldr	r3, [r7, #4]
 354 0020 1B68     		ldr	r3, [r3]
 355 0022 03F00103 		and	r3, r3, #1
 356 0026 002B     		cmp	r3, #0
 357 0028 12D0     		beq	.L21
 310:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 311:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     assert_param(IS_WRPSTATE(pOBInit->WRPState));
 312:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 358              		.loc 1 312 0
 359 002a 7B68     		ldr	r3, [r7, #4]
 360 002c 5B68     		ldr	r3, [r3, #4]
 361 002e 012B     		cmp	r3, #1
 362 0030 07D1     		bne	.L22
 313:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     {
 314:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       /*Enable of Write protection on the selected Sector*/
 315:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 363              		.loc 1 315 0
 364 0032 7B68     		ldr	r3, [r7, #4]
 365 0034 9B68     		ldr	r3, [r3, #8]
 366 0036 1846     		mov	r0, r3
 367 0038 FFF7FEFF 		bl	FLASH_OB_EnableWRP
 368 003c 0346     		mov	r3, r0
 369 003e FB73     		strb	r3, [r7, #15]
 370 0040 06E0     		b	.L21
 371              	.L22:
 316:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     }
ARM GAS  /tmp/cc1MosAC.s 			page 13


 317:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     else
 318:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     {
 319:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       /*Disable of Write protection on the selected Sector*/
 320:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       status = FLASH_OB_DisableWRP(pOBInit->WRPSector);
 372              		.loc 1 320 0
 373 0042 7B68     		ldr	r3, [r7, #4]
 374 0044 9B68     		ldr	r3, [r3, #8]
 375 0046 1846     		mov	r0, r3
 376 0048 FFF7FEFF 		bl	FLASH_OB_DisableWRP
 377 004c 0346     		mov	r3, r0
 378 004e FB73     		strb	r3, [r7, #15]
 379              	.L21:
 321:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     }
 322:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 323:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 324:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Read protection configuration */
 325:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 380              		.loc 1 325 0
 381 0050 7B68     		ldr	r3, [r7, #4]
 382 0052 1B68     		ldr	r3, [r3]
 383 0054 03F00203 		and	r3, r3, #2
 384 0058 002B     		cmp	r3, #0
 385 005a 07D0     		beq	.L23
 326:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 327:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 386              		.loc 1 327 0
 387 005c 7B68     		ldr	r3, [r7, #4]
 388 005e DB68     		ldr	r3, [r3, #12]
 389 0060 DBB2     		uxtb	r3, r3
 390 0062 1846     		mov	r0, r3
 391 0064 FFF7FEFF 		bl	FLASH_OB_RDP_LevelConfig
 392 0068 0346     		mov	r3, r0
 393 006a FB73     		strb	r3, [r7, #15]
 394              	.L23:
 328:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 329:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 330:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* USER  configuration */
 331:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 395              		.loc 1 331 0
 396 006c 7B68     		ldr	r3, [r7, #4]
 397 006e 1B68     		ldr	r3, [r3]
 398 0070 03F00403 		and	r3, r3, #4
 399 0074 002B     		cmp	r3, #0
 400 0076 2BD0     		beq	.L24
 332:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 333:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 401              		.loc 1 334 0
 402 0078 7B68     		ldr	r3, [r7, #4]
 403 007a 5B69     		ldr	r3, [r3, #20]
 404 007c 03F0100E 		and	lr, r3, #16
 335:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 405              		.loc 1 335 0
 406 0080 7B68     		ldr	r3, [r7, #4]
 407 0082 5B69     		ldr	r3, [r3, #20]
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 408              		.loc 1 334 0
ARM GAS  /tmp/cc1MosAC.s 			page 14


 409 0084 03F02006 		and	r6, r3, #32
 336:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STOP_NO_RST,
 410              		.loc 1 336 0
 411 0088 7B68     		ldr	r3, [r7, #4]
 412 008a 5B69     		ldr	r3, [r3, #20]
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 413              		.loc 1 334 0
 414 008c 03F04005 		and	r5, r3, #64
 337:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STDBY_NO_RST, 
 415              		.loc 1 337 0
 416 0090 7B68     		ldr	r3, [r7, #4]
 417 0092 5B69     		ldr	r3, [r3, #20]
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 418              		.loc 1 334 0
 419 0094 03F08004 		and	r4, r3, #128
 338:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_STOP_ACTIVE,
 420              		.loc 1 338 0
 421 0098 7B68     		ldr	r3, [r7, #4]
 422 009a 5B69     		ldr	r3, [r3, #20]
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 423              		.loc 1 334 0
 424 009c 03F00040 		and	r0, r3, #-2147483648
 339:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE,
 425              		.loc 1 339 0
 426 00a0 7B68     		ldr	r3, [r7, #4]
 427 00a2 5B69     		ldr	r3, [r3, #20]
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 428              		.loc 1 334 0
 429 00a4 03F08041 		and	r1, r3, #1073741824
 340:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_NDBANK_SINGLE_BANK,
 430              		.loc 1 340 0
 431 00a8 7B68     		ldr	r3, [r7, #4]
 432 00aa 5B69     		ldr	r3, [r3, #20]
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 433              		.loc 1 334 0
 434 00ac 03F00052 		and	r2, r3, #536870912
 341:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_DUAL_BOOT_DISABLE);
 435              		.loc 1 341 0
 436 00b0 7B68     		ldr	r3, [r7, #4]
 437 00b2 5B69     		ldr	r3, [r3, #20]
 334:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 438              		.loc 1 334 0
 439 00b4 03F08053 		and	r3, r3, #268435456
 440 00b8 0090     		str	r0, [sp]
 441 00ba 0191     		str	r1, [sp, #4]
 442 00bc 0292     		str	r2, [sp, #8]
 443 00be 0393     		str	r3, [sp, #12]
 444 00c0 7046     		mov	r0, lr
 445 00c2 3146     		mov	r1, r6
 446 00c4 2A46     		mov	r2, r5
 447 00c6 2346     		mov	r3, r4
 448 00c8 FFF7FEFF 		bl	FLASH_OB_UserConfig
 449 00cc 0346     		mov	r3, r0
 450 00ce FB73     		strb	r3, [r7, #15]
 451              	.L24:
 342:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #else
 343:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
ARM GAS  /tmp/cc1MosAC.s 			page 15


 344:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 345:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STOP_NO_RST,
 346:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STDBY_NO_RST, 
 347:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_STOP_ACTIVE,
 348:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE);    
 349:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */
 350:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 351:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 352:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* BOR Level  configuration */
 353:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 452              		.loc 1 353 0
 453 00d0 7B68     		ldr	r3, [r7, #4]
 454 00d2 1B68     		ldr	r3, [r3]
 455 00d4 03F00803 		and	r3, r3, #8
 456 00d8 002B     		cmp	r3, #0
 457 00da 07D0     		beq	.L25
 354:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 355:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 458              		.loc 1 355 0
 459 00dc 7B68     		ldr	r3, [r7, #4]
 460 00de 1B69     		ldr	r3, [r3, #16]
 461 00e0 DBB2     		uxtb	r3, r3
 462 00e2 1846     		mov	r0, r3
 463 00e4 FFF7FEFF 		bl	FLASH_OB_BOR_LevelConfig
 464 00e8 0346     		mov	r3, r0
 465 00ea FB73     		strb	r3, [r7, #15]
 466              	.L25:
 356:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 357:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 358:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Boot 0 Address configuration */
 359:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 467              		.loc 1 359 0
 468 00ec 7B68     		ldr	r3, [r7, #4]
 469 00ee 1B68     		ldr	r3, [r3]
 470 00f0 03F01003 		and	r3, r3, #16
 471 00f4 002B     		cmp	r3, #0
 472 00f6 07D0     		beq	.L26
 360:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 361:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 473              		.loc 1 361 0
 474 00f8 7B68     		ldr	r3, [r7, #4]
 475 00fa 9B69     		ldr	r3, [r3, #24]
 476 00fc 1020     		movs	r0, #16
 477 00fe 1946     		mov	r1, r3
 478 0100 FFF7FEFF 		bl	FLASH_OB_BootAddressConfig
 479 0104 0346     		mov	r3, r0
 480 0106 FB73     		strb	r3, [r7, #15]
 481              	.L26:
 362:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 363:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 364:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Boot 1 Address configuration */
 365:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 482              		.loc 1 365 0
 483 0108 7B68     		ldr	r3, [r7, #4]
 484 010a 1B68     		ldr	r3, [r3]
 485 010c 03F02003 		and	r3, r3, #32
 486 0110 002B     		cmp	r3, #0
ARM GAS  /tmp/cc1MosAC.s 			page 16


 487 0112 07D0     		beq	.L27
 366:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 367:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 488              		.loc 1 367 0
 489 0114 7B68     		ldr	r3, [r7, #4]
 490 0116 DB69     		ldr	r3, [r3, #28]
 491 0118 2020     		movs	r0, #32
 492 011a 1946     		mov	r1, r3
 493 011c FFF7FEFF 		bl	FLASH_OB_BootAddressConfig
 494 0120 0346     		mov	r3, r0
 495 0122 FB73     		strb	r3, [r7, #15]
 496              	.L27:
 368:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 369:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 370:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Unlocked */
 371:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 497              		.loc 1 371 0
 498 0124 034B     		ldr	r3, .L28
 499 0126 0022     		movs	r2, #0
 500 0128 1A75     		strb	r2, [r3, #20]
 372:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 373:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 501              		.loc 1 373 0
 502 012a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 503              	.L20:
 374:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 504              		.loc 1 374 0
 505 012c 1846     		mov	r0, r3
 506 012e 1437     		adds	r7, r7, #20
 507              	.LCFI13:
 508              		.cfi_def_cfa_offset 20
 509 0130 BD46     		mov	sp, r7
 510              	.LCFI14:
 511              		.cfi_def_cfa_register 13
 512              		@ sp needed
 513 0132 F0BD     		pop	{r4, r5, r6, r7, pc}
 514              	.L29:
 515              		.align	2
 516              	.L28:
 517 0134 00000000 		.word	pFlash
 518              		.cfi_endproc
 519              	.LFE137:
 521              		.section	.text.HAL_FLASHEx_OBGetConfig,"ax",%progbits
 522              		.align	2
 523              		.global	HAL_FLASHEx_OBGetConfig
 524              		.thumb
 525              		.thumb_func
 527              	HAL_FLASHEx_OBGetConfig:
 528              	.LFB138:
 375:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 376:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 377:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Get the Option byte configuration
 378:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  pOBInit: pointer to an FLASH_OBInitStruct structure that
 379:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 380:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 381:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval None
 382:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
ARM GAS  /tmp/cc1MosAC.s 			page 17


 383:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
 384:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 529              		.loc 1 384 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 8
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533 0000 80B5     		push	{r7, lr}
 534              	.LCFI15:
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 7, -8
 537              		.cfi_offset 14, -4
 538 0002 82B0     		sub	sp, sp, #8
 539              	.LCFI16:
 540              		.cfi_def_cfa_offset 16
 541 0004 00AF     		add	r7, sp, #0
 542              	.LCFI17:
 543              		.cfi_def_cfa_register 7
 544 0006 7860     		str	r0, [r7, #4]
 385:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 545              		.loc 1 385 0
 546 0008 7B68     		ldr	r3, [r7, #4]
 547 000a 3F22     		movs	r2, #63
 548 000c 1A60     		str	r2, [r3]
 386:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;
 387:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 388:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /*Get WRP*/
 389:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->WRPSector = FLASH_OB_GetWRP();
 549              		.loc 1 389 0
 550 000e FFF7FEFF 		bl	FLASH_OB_GetWRP
 551 0012 0246     		mov	r2, r0
 552 0014 7B68     		ldr	r3, [r7, #4]
 553 0016 9A60     		str	r2, [r3, #8]
 390:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 391:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /*Get RDP Level*/
 392:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->RDPLevel = FLASH_OB_GetRDP();
 554              		.loc 1 392 0
 555 0018 FFF7FEFF 		bl	FLASH_OB_GetRDP
 556 001c 0346     		mov	r3, r0
 557 001e 1A46     		mov	r2, r3
 558 0020 7B68     		ldr	r3, [r7, #4]
 559 0022 DA60     		str	r2, [r3, #12]
 393:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 394:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /*Get USER*/
 395:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->USERConfig = FLASH_OB_GetUser();
 560              		.loc 1 395 0
 561 0024 FFF7FEFF 		bl	FLASH_OB_GetUser
 562 0028 0246     		mov	r2, r0
 563 002a 7B68     		ldr	r3, [r7, #4]
 564 002c 5A61     		str	r2, [r3, #20]
 396:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 397:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /*Get BOR Level*/
 398:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->BORLevel = FLASH_OB_GetBOR();
 565              		.loc 1 398 0
 566 002e FFF7FEFF 		bl	FLASH_OB_GetBOR
 567 0032 0246     		mov	r2, r0
 568 0034 7B68     		ldr	r3, [r7, #4]
 569 0036 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/cc1MosAC.s 			page 18


 399:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 400:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /*Get Boot Address when Boot pin = 0 */
 401:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 570              		.loc 1 401 0
 571 0038 1020     		movs	r0, #16
 572 003a FFF7FEFF 		bl	FLASH_OB_GetBootAddress
 573 003e 0246     		mov	r2, r0
 574 0040 7B68     		ldr	r3, [r7, #4]
 575 0042 9A61     		str	r2, [r3, #24]
 402:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 403:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /*Get Boot Address when Boot pin = 1 */
 404:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 576              		.loc 1 404 0
 577 0044 2020     		movs	r0, #32
 578 0046 FFF7FEFF 		bl	FLASH_OB_GetBootAddress
 579 004a 0246     		mov	r2, r0
 580 004c 7B68     		ldr	r3, [r7, #4]
 581 004e DA61     		str	r2, [r3, #28]
 405:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 582              		.loc 1 405 0
 583 0050 0837     		adds	r7, r7, #8
 584              	.LCFI18:
 585              		.cfi_def_cfa_offset 8
 586 0052 BD46     		mov	sp, r7
 587              	.LCFI19:
 588              		.cfi_def_cfa_register 13
 589              		@ sp needed
 590 0054 80BD     		pop	{r7, pc}
 591              		.cfi_endproc
 592              	.LFE138:
 594 0056 00BF     		.section	.text.FLASH_MassErase,"ax",%progbits
 595              		.align	2
 596              		.thumb
 597              		.thumb_func
 599              	FLASH_MassErase:
 600              	.LFB139:
 406:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 407:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @}
 408:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 409:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 410:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)
 411:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 412:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Full erase of FLASH memory sectors 
 413:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 414:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 415:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 416:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 417:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 418:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 419:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 420:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 421:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 422:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 423:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Banks: Banks to be erased
 424:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 425:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: Bank1 to be erased
 426:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: Bank2 to be erased
ARM GAS  /tmp/cc1MosAC.s 			page 19


 427:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
 428:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
 429:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 430:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 431:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
 432:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 601              		.loc 1 432 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 8
 604              		@ frame_needed = 1, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 606 0000 80B4     		push	{r7}
 607              	.LCFI20:
 608              		.cfi_def_cfa_offset 4
 609              		.cfi_offset 7, -4
 610 0002 83B0     		sub	sp, sp, #12
 611              	.LCFI21:
 612              		.cfi_def_cfa_offset 16
 613 0004 00AF     		add	r7, sp, #0
 614              	.LCFI22:
 615              		.cfi_def_cfa_register 7
 616 0006 0346     		mov	r3, r0
 617 0008 3960     		str	r1, [r7]
 618 000a FB71     		strb	r3, [r7, #7]
 433:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 434:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 435:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 436:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 437:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* if the previous operation is completed, proceed to erase all sectors */
 438:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 619              		.loc 1 438 0
 620 000c 184A     		ldr	r2, .L35
 621 000e 184B     		ldr	r3, .L35
 622 0010 1B69     		ldr	r3, [r3, #16]
 623 0012 23F44073 		bic	r3, r3, #768
 624 0016 1361     		str	r3, [r2, #16]
 439:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(Banks == FLASH_BANK_BOTH)
 625              		.loc 1 439 0
 626 0018 3B68     		ldr	r3, [r7]
 627 001a 032B     		cmp	r3, #3
 628 001c 07D1     		bne	.L32
 440:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 441:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /* bank1 & bank2 will be erased*/
 442:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_MER_BIT;
 629              		.loc 1 442 0
 630 001e 1449     		ldr	r1, .L35
 631 0020 134B     		ldr	r3, .L35
 632 0022 1A69     		ldr	r2, [r3, #16]
 633 0024 48F20403 		movw	r3, #32772
 634 0028 1343     		orrs	r3, r3, r2
 635 002a 0B61     		str	r3, [r1, #16]
 636 002c 0FE0     		b	.L33
 637              	.L32:
 443:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 444:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else if(Banks == FLASH_BANK_2)
 638              		.loc 1 444 0
 639 002e 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc1MosAC.s 			page 20


 640 0030 022B     		cmp	r3, #2
 641 0032 06D1     		bne	.L34
 445:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 446:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /*Only bank2 will be erased*/
 447:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_CR_MER2;
 642              		.loc 1 447 0
 643 0034 0E4A     		ldr	r2, .L35
 644 0036 0E4B     		ldr	r3, .L35
 645 0038 1B69     		ldr	r3, [r3, #16]
 646 003a 43F40043 		orr	r3, r3, #32768
 647 003e 1361     		str	r3, [r2, #16]
 648 0040 05E0     		b	.L33
 649              	.L34:
 448:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 449:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else
 450:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 451:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /*Only bank1 will be erased*/
 452:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_CR_MER1;    
 650              		.loc 1 452 0
 651 0042 0B4A     		ldr	r2, .L35
 652 0044 0A4B     		ldr	r3, .L35
 653 0046 1B69     		ldr	r3, [r3, #16]
 654 0048 43F00403 		orr	r3, r3, #4
 655 004c 1361     		str	r3, [r2, #16]
 656              	.L33:
 453:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 454:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 657              		.loc 1 454 0
 658 004e 0849     		ldr	r1, .L35
 659 0050 074B     		ldr	r3, .L35
 660 0052 1A69     		ldr	r2, [r3, #16]
 661 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 662 0056 1B02     		lsls	r3, r3, #8
 663 0058 1343     		orrs	r3, r3, r2
 664 005a 43F48033 		orr	r3, r3, #65536
 665 005e 0B61     		str	r3, [r1, #16]
 666              	.LBB8:
 667              	.LBB9:
 668              		.file 2 "../../Drivers/CMSIS/Include/cmsis_gcc.h"
   1:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
ARM GAS  /tmp/cc1MosAC.s 			page 21


  19:../../Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc1MosAC.s 			page 22


  76:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
ARM GAS  /tmp/cc1MosAC.s 			page 23


 133:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc1MosAC.s 			page 24


 190:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
ARM GAS  /tmp/cc1MosAC.s 			page 25


 247:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc1MosAC.s 			page 26


 304:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:../../Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
ARM GAS  /tmp/cc1MosAC.s 			page 27


 361:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc1MosAC.s 			page 28


 418:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 669              		.loc 2 429 0
 670              	@ 429 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 671 0060 BFF34F8F 		dsb 0xF
 672              	@ 0 "" 2
 673              		.thumb
 674              	.LBE9:
 675              	.LBE8:
 455:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 456:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 457:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __DSB();
 458:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 676              		.loc 1 458 0
 677 0064 0C37     		adds	r7, r7, #12
 678              	.LCFI23:
 679              		.cfi_def_cfa_offset 4
 680 0066 BD46     		mov	sp, r7
 681              	.LCFI24:
 682              		.cfi_def_cfa_register 13
 683              		@ sp needed
 684 0068 5DF8047B 		ldr	r7, [sp], #4
 685              	.LCFI25:
 686              		.cfi_restore 7
 687              		.cfi_def_cfa_offset 0
 688 006c 7047     		bx	lr
 689              	.L36:
 690 006e 00BF     		.align	2
 691              	.L35:
 692 0070 003C0240 		.word	1073888256
 693              		.cfi_endproc
 694              	.LFE139:
 696              		.section	.text.FLASH_Erase_Sector,"ax",%progbits
 697              		.align	2
 698              		.global	FLASH_Erase_Sector
 699              		.thumb
 700              		.thumb_func
 702              	FLASH_Erase_Sector:
 703              	.LFB140:
 459:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 460:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 461:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory sector
 462:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Sector: FLASH sector to erase
 463:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
 464:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 465:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 466:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
ARM GAS  /tmp/cc1MosAC.s 			page 29


 467:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 468:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 469:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 470:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 471:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 472:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External
 473:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 474:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 475:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval None
 476:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 477:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
 478:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 704              		.loc 1 478 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 24
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709 0000 80B4     		push	{r7}
 710              	.LCFI26:
 711              		.cfi_def_cfa_offset 4
 712              		.cfi_offset 7, -4
 713 0002 87B0     		sub	sp, sp, #28
 714              	.LCFI27:
 715              		.cfi_def_cfa_offset 32
 716 0004 00AF     		add	r7, sp, #0
 717              	.LCFI28:
 718              		.cfi_def_cfa_register 7
 719 0006 7860     		str	r0, [r7, #4]
 720 0008 0B46     		mov	r3, r1
 721 000a FB70     		strb	r3, [r7, #3]
 479:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 722              		.loc 1 479 0
 723 000c 0023     		movs	r3, #0
 724 000e 7B61     		str	r3, [r7, #20]
 480:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 481:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 482:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_SECTOR(Sector));
 483:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 484:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 485:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 725              		.loc 1 485 0
 726 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 727 0012 002B     		cmp	r3, #0
 728 0014 02D1     		bne	.L38
 486:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 487:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 729              		.loc 1 487 0
 730 0016 0023     		movs	r3, #0
 731 0018 7B61     		str	r3, [r7, #20]
 732 001a 10E0     		b	.L39
 733              	.L38:
 488:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 489:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 734              		.loc 1 489 0
 735 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 736 001e 012B     		cmp	r3, #1
 737 0020 03D1     		bne	.L40
ARM GAS  /tmp/cc1MosAC.s 			page 30


 490:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 491:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 738              		.loc 1 491 0
 739 0022 4FF48073 		mov	r3, #256
 740 0026 7B61     		str	r3, [r7, #20]
 741 0028 09E0     		b	.L39
 742              	.L40:
 492:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 493:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 743              		.loc 1 493 0
 744 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 745 002c 022B     		cmp	r3, #2
 746 002e 03D1     		bne	.L41
 494:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 495:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_WORD;
 747              		.loc 1 495 0
 748 0030 4FF40073 		mov	r3, #512
 749 0034 7B61     		str	r3, [r7, #20]
 750 0036 02E0     		b	.L39
 751              	.L41:
 496:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 497:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else
 498:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 499:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 752              		.loc 1 499 0
 753 0038 4FF44073 		mov	r3, #768
 754 003c 7B61     		str	r3, [r7, #20]
 755              	.L39:
 500:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 501:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 502:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
 503:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(Sector > FLASH_SECTOR_11) 
 756              		.loc 1 503 0
 757 003e 7B68     		ldr	r3, [r7, #4]
 758 0040 0B2B     		cmp	r3, #11
 759 0042 02D9     		bls	.L42
 504:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 505:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     Sector += 4;
 760              		.loc 1 505 0
 761 0044 7B68     		ldr	r3, [r7, #4]
 762 0046 0433     		adds	r3, r3, #4
 763 0048 7B60     		str	r3, [r7, #4]
 764              	.L42:
 506:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }  
 507:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 508:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase the sector */
 509:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 765              		.loc 1 509 0
 766 004a 194A     		ldr	r2, .L44
 767 004c 184B     		ldr	r3, .L44
 768 004e 1B69     		ldr	r3, [r3, #16]
 769 0050 23F44073 		bic	r3, r3, #768
 770 0054 1361     		str	r3, [r2, #16]
 510:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 771              		.loc 1 510 0
 772 0056 1649     		ldr	r1, .L44
 773 0058 154B     		ldr	r3, .L44
ARM GAS  /tmp/cc1MosAC.s 			page 31


 774 005a 1A69     		ldr	r2, [r3, #16]
 775 005c 7B69     		ldr	r3, [r7, #20]
 776 005e 1343     		orrs	r3, r3, r2
 777 0060 0B61     		str	r3, [r1, #16]
 511:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 778              		.loc 1 511 0
 779 0062 134A     		ldr	r2, .L44
 780 0064 124B     		ldr	r3, .L44
 781 0066 1B69     		ldr	r3, [r3, #16]
 782 0068 23F0F803 		bic	r3, r3, #248
 783 006c 1361     		str	r3, [r2, #16]
 784 006e F823     		movs	r3, #248
 785 0070 3B61     		str	r3, [r7, #16]
 786              	.LBB10:
 787              	.LBB11:
 430:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/cc1MosAC.s 			page 32


 472:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:../../Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:../../Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:../../Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:../../Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:../../Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:../../Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/cc1MosAC.s 			page 33


 529:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:../../Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 788              		.loc 2 531 0
 789 0072 3B69     		ldr	r3, [r7, #16]
 790              	@ 531 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 791 0074 93FAA3F3 		rbit r3, r3
 792              	@ 0 "" 2
 793              		.thumb
 794 0078 FB60     		str	r3, [r7, #12]
 532:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:../../Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:../../Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:../../Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:../../Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 795              		.loc 2 544 0
 796 007a FB68     		ldr	r3, [r7, #12]
 797              	.LBE11:
 798              	.LBE10:
 512:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 799              		.loc 1 512 0
 800 007c B3FA83F3 		clz	r3, r3
 801 0080 7A68     		ldr	r2, [r7, #4]
 802 0082 02FA03F3 		lsl	r3, r2, r3
 803 0086 43F00203 		orr	r3, r3, #2
 804 008a 0949     		ldr	r1, .L44
 805 008c 084A     		ldr	r2, .L44
 806 008e 1269     		ldr	r2, [r2, #16]
 807 0090 1343     		orrs	r3, r3, r2
 808 0092 0B61     		str	r3, [r1, #16]
 513:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 809              		.loc 1 513 0
 810 0094 064A     		ldr	r2, .L44
 811 0096 064B     		ldr	r3, .L44
 812 0098 1B69     		ldr	r3, [r3, #16]
 813 009a 43F48033 		orr	r3, r3, #65536
 814 009e 1361     		str	r3, [r2, #16]
 815              	.LBB12:
 816              	.LBB13:
 429:../../Drivers/CMSIS/Include/cmsis_gcc.h **** }
 817              		.loc 2 429 0
 818              	@ 429 "../../Drivers/CMSIS/Include/cmsis_gcc.h" 1
 819 00a0 BFF34F8F 		dsb 0xF
 820              	@ 0 "" 2
 821              		.thumb
 822              	.LBE13:
 823              	.LBE12:
 514:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 515:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
ARM GAS  /tmp/cc1MosAC.s 			page 34


 516:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 517:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __DSB();
 518:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 824              		.loc 1 518 0
 825 00a4 1C37     		adds	r7, r7, #28
 826              	.LCFI29:
 827              		.cfi_def_cfa_offset 4
 828 00a6 BD46     		mov	sp, r7
 829              	.LCFI30:
 830              		.cfi_def_cfa_register 13
 831              		@ sp needed
 832 00a8 5DF8047B 		ldr	r7, [sp], #4
 833              	.LCFI31:
 834              		.cfi_restore 7
 835              		.cfi_def_cfa_offset 0
 836 00ac 7047     		bx	lr
 837              	.L45:
 838 00ae 00BF     		.align	2
 839              	.L44:
 840 00b0 003C0240 		.word	1073888256
 841              		.cfi_endproc
 842              	.LFE140:
 844              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 845              		.align	2
 846              		.thumb
 847              		.thumb_func
 849              	FLASH_OB_GetWRP:
 850              	.LFB141:
 519:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 520:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 521:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Return the FLASH Write Protection Option Bytes value.
 522:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t FLASH Write Protection Option Bytes value
 523:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 524:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetWRP(void)
 525:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 851              		.loc 1 525 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 0
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855              		@ link register save eliminated.
 856 0000 80B4     		push	{r7}
 857              	.LCFI32:
 858              		.cfi_def_cfa_offset 4
 859              		.cfi_offset 7, -4
 860 0002 00AF     		add	r7, sp, #0
 861              	.LCFI33:
 862              		.cfi_def_cfa_register 7
 526:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
 527:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 863              		.loc 1 527 0
 864 0004 044B     		ldr	r3, .L48
 865 0006 5A69     		ldr	r2, [r3, #20]
 866 0008 044B     		ldr	r3, .L48+4
 867 000a 1340     		ands	r3, r3, r2
 528:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 868              		.loc 1 528 0
 869 000c 1846     		mov	r0, r3
ARM GAS  /tmp/cc1MosAC.s 			page 35


 870 000e BD46     		mov	sp, r7
 871              	.LCFI34:
 872              		.cfi_def_cfa_register 13
 873              		@ sp needed
 874 0010 5DF8047B 		ldr	r7, [sp], #4
 875              	.LCFI35:
 876              		.cfi_restore 7
 877              		.cfi_def_cfa_offset 0
 878 0014 7047     		bx	lr
 879              	.L49:
 880 0016 00BF     		.align	2
 881              	.L48:
 882 0018 003C0240 		.word	1073888256
 883 001c 0000FF0F 		.word	268369920
 884              		.cfi_endproc
 885              	.LFE141:
 887              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 888              		.align	2
 889              		.thumb
 890              		.thumb_func
 892              	FLASH_OB_UserConfig:
 893              	.LFB142:
 529:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 530:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 531:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Program the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
 532:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Wwdg: Selects the IWDG mode
 533:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 534:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WWDG_SW: Software WWDG selected
 535:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WWDG_HW: Hardware WWDG selected
 536:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdg: Selects the WWDG mode
 537:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 538:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
 539:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
 540:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Stop: Reset event when entering STOP mode.
 541:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 542:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STOP_NO_RST: No reset generated when entering in STOP
 543:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
 544:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Stdby: Reset event when entering Standby mode.
 545:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 546:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
 547:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
 548:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdgstop: Independent watchdog counter freeze in Stop mode.
 549:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 550:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STOP_FREEZE: Freeze IWDG counter in STOP
 551:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STOP_ACTIVE: IWDG counter active in STOP
 552:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdgstdby: Independent watchdog counter freeze in standby mode.
 553:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 554:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STDBY_FREEZE: Freeze IWDG counter in STANDBY
 555:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STDBY_ACTIVE: IWDG counter active in STANDBY
 556:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  NDBank: Flash Single Bank mode enabled.
 557:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 558:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_NDBANK_SINGLE_BANK: enable 256 bits mode (Flash is a single bank)
 559:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_NDBANK_DUAL_BANK: disable 256 bits mode (Flash is a dual bank in 128 bits mo
 560:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  NDBoot: Flash Dual boot mode disable.
 561:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 562:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_DUAL_BOOT_DISABLE: Disable Dual Boot
 563:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_DUAL_BOOT_ENABLE: Enable Dual Boot
ARM GAS  /tmp/cc1MosAC.s 			page 36


 564:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 565:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 566:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 567:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t 
 568:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                                              uint32_t Iwdgstdby, uint32_t NDBank, uint32_t NDBoot)
 569:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 894              		.loc 1 569 0
 895              		.cfi_startproc
 896              		@ args = 16, pretend = 0, frame = 32
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898 0000 80B5     		push	{r7, lr}
 899              	.LCFI36:
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 7, -8
 902              		.cfi_offset 14, -4
 903 0002 88B0     		sub	sp, sp, #32
 904              	.LCFI37:
 905              		.cfi_def_cfa_offset 40
 906 0004 00AF     		add	r7, sp, #0
 907              	.LCFI38:
 908              		.cfi_def_cfa_register 7
 909 0006 F860     		str	r0, [r7, #12]
 910 0008 B960     		str	r1, [r7, #8]
 911 000a 7A60     		str	r2, [r7, #4]
 912 000c 3B60     		str	r3, [r7]
 570:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionmask = 0x00;
 913              		.loc 1 570 0
 914 000e 0023     		movs	r3, #0
 915 0010 FB61     		str	r3, [r7, #28]
 571:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionvalue = 0x00;
 916              		.loc 1 571 0
 917 0012 0023     		movs	r3, #0
 918 0014 BB61     		str	r3, [r7, #24]
 572:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 573:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 919              		.loc 1 573 0
 920 0016 0023     		movs	r3, #0
 921 0018 FB75     		strb	r3, [r7, #23]
 574:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 575:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 576:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_WWDG_SOURCE(Wwdg));
 577:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 578:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE(Stop));
 579:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE(Stdby));
 580:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_STOP_FREEZE(Iwdgstop));
 581:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_STDBY_FREEZE(Iwdgstdby));
 582:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_NDBANK(NDBank));
 583:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_NDBOOT(NDBoot));
 584:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 585:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 586:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 922              		.loc 1 586 0
 923 001a 4CF25030 		movw	r0, #50000
 924 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 925 0022 0346     		mov	r3, r0
 926 0024 FB75     		strb	r3, [r7, #23]
 587:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
ARM GAS  /tmp/cc1MosAC.s 			page 37


 588:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 927              		.loc 1 588 0
 928 0026 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 929 0028 002B     		cmp	r3, #0
 930 002a 1AD1     		bne	.L51
 589:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 590:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     useroptionmask = (FLASH_OPTCR_WWDG_SW | FLASH_OPTCR_IWDG_SW | FLASH_OPTCR_nRST_STOP | \
 931              		.loc 1 590 0
 932 002c 0F4B     		ldr	r3, .L53
 933 002e FB61     		str	r3, [r7, #28]
 591:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                       FLASH_OPTCR_nRST_STDBY | FLASH_OPTCR_IWDG_STOP | FLASH_OPTCR_IWDG_STDBY | \
 592:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                       FLASH_OPTCR_nDBOOT | FLASH_OPTCR_nDBANK);
 593:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                       
 594:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 934              		.loc 1 594 0
 935 0030 BA68     		ldr	r2, [r7, #8]
 936 0032 FB68     		ldr	r3, [r7, #12]
 937 0034 1A43     		orrs	r2, r2, r3
 938 0036 7B68     		ldr	r3, [r7, #4]
 939 0038 1A43     		orrs	r2, r2, r3
 940 003a 3B68     		ldr	r3, [r7]
 941 003c 1A43     		orrs	r2, r2, r3
 942 003e BB6A     		ldr	r3, [r7, #40]
 943 0040 1A43     		orrs	r2, r2, r3
 944 0042 FB6A     		ldr	r3, [r7, #44]
 945 0044 1A43     		orrs	r2, r2, r3
 946 0046 7B6B     		ldr	r3, [r7, #52]
 947 0048 1A43     		orrs	r2, r2, r3
 948 004a 3B6B     		ldr	r3, [r7, #48]
 949 004c 1343     		orrs	r3, r3, r2
 950 004e BB61     		str	r3, [r7, #24]
 595:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         
 596:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /* Update User Option Byte */               
 597:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 951              		.loc 1 597 0
 952 0050 0749     		ldr	r1, .L53+4
 953 0052 074B     		ldr	r3, .L53+4
 954 0054 5A69     		ldr	r2, [r3, #20]
 955 0056 FB69     		ldr	r3, [r7, #28]
 956 0058 DB43     		mvns	r3, r3
 957 005a 1A40     		ands	r2, r2, r3
 958 005c BB69     		ldr	r3, [r7, #24]
 959 005e 1343     		orrs	r3, r3, r2
 960 0060 4B61     		str	r3, [r1, #20]
 961              	.L51:
 598:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 599:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 600:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status; 
 962              		.loc 1 600 0
 963 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 601:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 964              		.loc 1 601 0
 965 0064 1846     		mov	r0, r3
 966 0066 2037     		adds	r7, r7, #32
 967              	.LCFI39:
 968              		.cfi_def_cfa_offset 8
 969 0068 BD46     		mov	sp, r7
ARM GAS  /tmp/cc1MosAC.s 			page 38


 970              	.LCFI40:
 971              		.cfi_def_cfa_register 13
 972              		@ sp needed
 973 006a 80BD     		pop	{r7, pc}
 974              	.L54:
 975              		.align	2
 976              	.L53:
 977 006c F00000F0 		.word	-268435216
 978 0070 003C0240 		.word	1073888256
 979              		.cfi_endproc
 980              	.LFE142:
 982              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 983              		.align	2
 984              		.thumb
 985              		.thumb_func
 987              	FLASH_OB_GetUser:
 988              	.LFB143:
 602:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 603:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 604:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Return the FLASH User Option Byte value.
 605:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6),
 606:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         nRST_STDBY(Bit7), nDBOOT(Bit28), nDBANK(Bit29), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
 607:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 608:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetUser(void)
 609:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 989              		.loc 1 609 0
 990              		.cfi_startproc
 991              		@ args = 0, pretend = 0, frame = 0
 992              		@ frame_needed = 1, uses_anonymous_args = 0
 993              		@ link register save eliminated.
 994 0000 80B4     		push	{r7}
 995              	.LCFI41:
 996              		.cfi_def_cfa_offset 4
 997              		.cfi_offset 7, -4
 998 0002 00AF     		add	r7, sp, #0
 999              	.LCFI42:
 1000              		.cfi_def_cfa_register 7
 610:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the User Option Byte */
 611:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 1001              		.loc 1 611 0
 1002 0004 044B     		ldr	r3, .L57
 1003 0006 5A69     		ldr	r2, [r3, #20]
 1004 0008 044B     		ldr	r3, .L57+4
 1005 000a 1340     		ands	r3, r3, r2
 612:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1006              		.loc 1 612 0
 1007 000c 1846     		mov	r0, r3
 1008 000e BD46     		mov	sp, r7
 1009              	.LCFI43:
 1010              		.cfi_def_cfa_register 13
 1011              		@ sp needed
 1012 0010 5DF8047B 		ldr	r7, [sp], #4
 1013              	.LCFI44:
 1014              		.cfi_restore 7
 1015              		.cfi_def_cfa_offset 0
 1016 0014 7047     		bx	lr
 1017              	.L58:
ARM GAS  /tmp/cc1MosAC.s 			page 39


 1018 0016 00BF     		.align	2
 1019              	.L57:
 1020 0018 003C0240 		.word	1073888256
 1021 001c F00000F0 		.word	-268435216
 1022              		.cfi_endproc
 1023              	.LFE143:
 1025              		.section	.text.FLASH_OB_EnableWRP,"ax",%progbits
 1026              		.align	2
 1027              		.thumb
 1028              		.thumb_func
 1030              	FLASH_OB_EnableWRP:
 1031              	.LFB144:
 613:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #else
 614:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 615:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 616:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Full erase of FLASH memory sectors 
 617:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 618:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 619:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 620:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 621:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 622:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 623:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 624:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 625:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 626:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 627:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
 628:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 629:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 630:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static void FLASH_MassErase(uint8_t VoltageRange)
 631:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 632:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 633:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 634:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 635:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* if the previous operation is completed, proceed to erase all sectors */
 636:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 637:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_MER;
 638:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 639:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 640:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 641:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __DSB();
 642:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 643:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 644:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 645:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory sector
 646:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Sector: FLASH sector to erase
 647:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
 648:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 649:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 650:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 651:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 652:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 653:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 654:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 655:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 656:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External
 657:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
ARM GAS  /tmp/cc1MosAC.s 			page 40


 658:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 659:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval None
 660:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 661:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
 662:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 663:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 664:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 665:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 666:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_SECTOR(Sector));
 667:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 668:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 669:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 670:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 671:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 672:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 673:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 674:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 675:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 676:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 677:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 678:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 679:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_WORD;
 680:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 681:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else
 682:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 683:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 684:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 685:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 686:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase the sector */
 687:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 688:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 689:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= SECTOR_MASK;
 690:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 691:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 692:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 693:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 694:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 695:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   __DSB();
 696:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 697:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 698:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 699:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Return the FLASH Write Protection Option Bytes value.
 700:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t FLASH Write Protection Option Bytes value
 701:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 702:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetWRP(void)
 703:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 704:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
 705:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0x00FF0000));
 706:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 707:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 708:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 709:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Program the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
 710:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Wwdg: Selects the IWDG mode
 711:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 712:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WWDG_SW: Software WWDG selected
 713:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WWDG_HW: Hardware WWDG selected
 714:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdg: Selects the WWDG mode
ARM GAS  /tmp/cc1MosAC.s 			page 41


 715:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 716:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
 717:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
 718:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Stop: Reset event when entering STOP mode.
 719:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 720:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STOP_NO_RST: No reset generated when entering in STOP
 721:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
 722:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Stdby: Reset event when entering Standby mode.
 723:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 724:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
 725:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
 726:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdgstop: Independent watchdog counter freeze in Stop mode.
 727:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 728:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STOP_FREEZE: Freeze IWDG counter in STOP
 729:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STOP_ACTIVE: IWDG counter active in STOP
 730:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdgstdby: Independent watchdog counter freeze in standby mode.
 731:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 732:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STDBY_FREEZE: Freeze IWDG counter in STANDBY
 733:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STDBY_ACTIVE: IWDG counter active in STANDBY           
 734:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 735:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 736:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t 
 737:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 738:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionmask = 0x00;
 739:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionvalue = 0x00;
 740:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 741:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 742:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 743:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 744:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_WWDG_SOURCE(Wwdg));
 745:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 746:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE(Stop));
 747:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE(Stdby));
 748:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_STOP_FREEZE(Iwdgstop));
 749:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_STDBY_FREEZE(Iwdgstdby));
 750:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 751:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 752:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 753:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 754:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 755:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 756:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     useroptionmask = (FLASH_OPTCR_WWDG_SW | FLASH_OPTCR_IWDG_SW | FLASH_OPTCR_nRST_STOP | \
 757:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                       FLASH_OPTCR_nRST_STDBY | FLASH_OPTCR_IWDG_STOP | FLASH_OPTCR_IWDG_STDBY);
 758:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****                       
 759:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby);
 760:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****         
 761:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /* Update User Option Byte */               
 762:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 763:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 764:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 765:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status; 
 766:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 767:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 768:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 769:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 770:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Return the FLASH User Option Byte value.
 771:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6),
ARM GAS  /tmp/cc1MosAC.s 			page 42


 772:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         nRST_STDBY(Bit7), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
 773:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 774:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetUser(void)
 775:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 776:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the User Option Byte */
 777:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0xC00000F0U));
 778:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 779:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */
 780:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 781:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 782:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Enable the write protection of the desired bank1 or bank2 sectors
 783:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
 784:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 785:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM7  
 786:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1    
 787:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 788:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
 789:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 790:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg WRPSector: A value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_7 (for STM32F74xxx
 791:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *              or a value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_11 (in Single Bank mode for S
 792:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *              or a value between OB_WRP_DB_SECTOR_0 and OB_WRP_DB_SECTOR_23 (in Dual Bank mode f
 793:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WRP_SECTOR_All
 794:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
 795:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL FLASH State   
 796:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 797:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
 798:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 1032              		.loc 1 798 0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 16
 1035              		@ frame_needed = 1, uses_anonymous_args = 0
 1036 0000 80B5     		push	{r7, lr}
 1037              	.LCFI45:
 1038              		.cfi_def_cfa_offset 8
 1039              		.cfi_offset 7, -8
 1040              		.cfi_offset 14, -4
 1041 0002 84B0     		sub	sp, sp, #16
 1042              	.LCFI46:
 1043              		.cfi_def_cfa_offset 24
 1044 0004 00AF     		add	r7, sp, #0
 1045              	.LCFI47:
 1046              		.cfi_def_cfa_register 7
 1047 0006 7860     		str	r0, [r7, #4]
 799:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1048              		.loc 1 799 0
 1049 0008 0023     		movs	r3, #0
 1050 000a FB73     		strb	r3, [r7, #15]
 800:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 801:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 802:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
 803:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     
 804:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 805:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1051              		.loc 1 805 0
 1052 000c 4CF25030 		movw	r0, #50000
 1053 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1054 0014 0346     		mov	r3, r0
ARM GAS  /tmp/cc1MosAC.s 			page 43


 1055 0016 FB73     		strb	r3, [r7, #15]
 806:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 807:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1056              		.loc 1 807 0
 1057 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1058 001a 002B     		cmp	r3, #0
 1059 001c 06D1     		bne	.L60
 808:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 809:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /*Write protection enabled on sectors */
 810:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->OPTCR &= (~WRPSector);  
 1060              		.loc 1 810 0
 1061 001e 0649     		ldr	r1, .L62
 1062 0020 054B     		ldr	r3, .L62
 1063 0022 5A69     		ldr	r2, [r3, #20]
 1064 0024 7B68     		ldr	r3, [r7, #4]
 1065 0026 DB43     		mvns	r3, r3
 1066 0028 1340     		ands	r3, r3, r2
 1067 002a 4B61     		str	r3, [r1, #20]
 1068              	.L60:
 811:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 812:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 813:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 1069              		.loc 1 813 0
 1070 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 814:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1071              		.loc 1 814 0
 1072 002e 1846     		mov	r0, r3
 1073 0030 1037     		adds	r7, r7, #16
 1074              	.LCFI48:
 1075              		.cfi_def_cfa_offset 8
 1076 0032 BD46     		mov	sp, r7
 1077              	.LCFI49:
 1078              		.cfi_def_cfa_register 13
 1079              		@ sp needed
 1080 0034 80BD     		pop	{r7, pc}
 1081              	.L63:
 1082 0036 00BF     		.align	2
 1083              	.L62:
 1084 0038 003C0240 		.word	1073888256
 1085              		.cfi_endproc
 1086              	.LFE144:
 1088              		.section	.text.FLASH_OB_DisableWRP,"ax",%progbits
 1089              		.align	2
 1090              		.thumb
 1091              		.thumb_func
 1093              	FLASH_OB_DisableWRP:
 1094              	.LFB145:
 815:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 816:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 817:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Disable the write protection of the desired bank1 or bank 2 sectors
 818:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
 819:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 820:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 821:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1  
 822:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 823:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
 824:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/cc1MosAC.s 			page 44


 825:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg WRPSector: A value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_7 (for STM32F74xxx
 826:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *              or a value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_11 (in Single Bank mode for S
 827:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *              or a value between OB_WRP_DB_SECTOR_0 and OB_WRP_DB_SECTOR_23 (in Dual Bank mode f
 828:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WRP_Sector_All
 829:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
 830:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *
 831:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status   
 832:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 833:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
 834:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 1095              		.loc 1 834 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 16
 1098              		@ frame_needed = 1, uses_anonymous_args = 0
 1099 0000 80B5     		push	{r7, lr}
 1100              	.LCFI50:
 1101              		.cfi_def_cfa_offset 8
 1102              		.cfi_offset 7, -8
 1103              		.cfi_offset 14, -4
 1104 0002 84B0     		sub	sp, sp, #16
 1105              	.LCFI51:
 1106              		.cfi_def_cfa_offset 24
 1107 0004 00AF     		add	r7, sp, #0
 1108              	.LCFI52:
 1109              		.cfi_def_cfa_register 7
 1110 0006 7860     		str	r0, [r7, #4]
 835:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1111              		.loc 1 835 0
 1112 0008 0023     		movs	r3, #0
 1113 000a FB73     		strb	r3, [r7, #15]
 836:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 837:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 838:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
 839:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     
 840:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 841:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1114              		.loc 1 841 0
 1115 000c 4CF25030 		movw	r0, #50000
 1116 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1117 0014 0346     		mov	r3, r0
 1118 0016 FB73     		strb	r3, [r7, #15]
 842:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 843:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1119              		.loc 1 843 0
 1120 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1121 001a 002B     		cmp	r3, #0
 1122 001c 05D1     		bne	.L65
 844:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 845:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     /* Write protection disabled on sectors */
 846:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->OPTCR |= (WRPSector); 
 1123              		.loc 1 846 0
 1124 001e 0549     		ldr	r1, .L67
 1125 0020 044B     		ldr	r3, .L67
 1126 0022 5A69     		ldr	r2, [r3, #20]
 1127 0024 7B68     		ldr	r3, [r7, #4]
 1128 0026 1343     		orrs	r3, r3, r2
 1129 0028 4B61     		str	r3, [r1, #20]
ARM GAS  /tmp/cc1MosAC.s 			page 45


 1130              	.L65:
 847:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 848:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 849:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 1131              		.loc 1 849 0
 1132 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 850:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1133              		.loc 1 850 0
 1134 002c 1846     		mov	r0, r3
 1135 002e 1037     		adds	r7, r7, #16
 1136              	.LCFI53:
 1137              		.cfi_def_cfa_offset 8
 1138 0030 BD46     		mov	sp, r7
 1139              	.LCFI54:
 1140              		.cfi_def_cfa_register 13
 1141              		@ sp needed
 1142 0032 80BD     		pop	{r7, pc}
 1143              	.L68:
 1144              		.align	2
 1145              	.L67:
 1146 0034 003C0240 		.word	1073888256
 1147              		.cfi_endproc
 1148              	.LFE145:
 1150              		.section	.text.FLASH_OB_RDP_LevelConfig,"ax",%progbits
 1151              		.align	2
 1152              		.thumb
 1153              		.thumb_func
 1155              	FLASH_OB_RDP_LevelConfig:
 1156              	.LFB146:
 851:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 852:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 853:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Set the read protection level.
 854:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Level: specifies the read protection level.
 855:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 856:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_0: No protection
 857:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_1: Read protection of the memory
 858:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_2: Full chip protection
 859:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *   
 860:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
 861:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *    
 862:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 863:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 864:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
 865:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 1157              		.loc 1 865 0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 16
 1160              		@ frame_needed = 1, uses_anonymous_args = 0
 1161 0000 80B5     		push	{r7, lr}
 1162              	.LCFI55:
 1163              		.cfi_def_cfa_offset 8
 1164              		.cfi_offset 7, -8
 1165              		.cfi_offset 14, -4
 1166 0002 84B0     		sub	sp, sp, #16
 1167              	.LCFI56:
 1168              		.cfi_def_cfa_offset 24
 1169 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc1MosAC.s 			page 46


 1170              	.LCFI57:
 1171              		.cfi_def_cfa_register 7
 1172 0006 0346     		mov	r3, r0
 1173 0008 FB71     		strb	r3, [r7, #7]
 866:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1174              		.loc 1 866 0
 1175 000a 0023     		movs	r3, #0
 1176 000c FB73     		strb	r3, [r7, #15]
 867:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 868:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 869:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_RDP_LEVEL(Level));
 870:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     
 871:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 872:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1177              		.loc 1 872 0
 1178 000e 4CF25030 		movw	r0, #50000
 1179 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1180 0016 0346     		mov	r3, r0
 1181 0018 FB73     		strb	r3, [r7, #15]
 873:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 874:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1182              		.loc 1 874 0
 1183 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1184 001c 002B     		cmp	r3, #0
 1185 001e 02D1     		bne	.L70
 875:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   { 
 876:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 1186              		.loc 1 876 0
 1187 0020 034A     		ldr	r2, .L72
 1188 0022 FB79     		ldrb	r3, [r7, #7]
 1189 0024 1370     		strb	r3, [r2]
 1190              	.L70:
 877:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 878:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 879:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 1191              		.loc 1 879 0
 1192 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 880:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1193              		.loc 1 880 0
 1194 0028 1846     		mov	r0, r3
 1195 002a 1037     		adds	r7, r7, #16
 1196              	.LCFI58:
 1197              		.cfi_def_cfa_offset 8
 1198 002c BD46     		mov	sp, r7
 1199              	.LCFI59:
 1200              		.cfi_def_cfa_register 13
 1201              		@ sp needed
 1202 002e 80BD     		pop	{r7, pc}
 1203              	.L73:
 1204              		.align	2
 1205              	.L72:
 1206 0030 153C0240 		.word	1073888277
 1207              		.cfi_endproc
 1208              	.LFE146:
 1210              		.section	.text.FLASH_OB_BOR_LevelConfig,"ax",%progbits
 1211              		.align	2
 1212              		.thumb
ARM GAS  /tmp/cc1MosAC.s 			page 47


 1213              		.thumb_func
 1215              	FLASH_OB_BOR_LevelConfig:
 1216              	.LFB147:
 881:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 882:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 883:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Set the BOR Level. 
 884:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Level: specifies the Option Bytes BOR Reset Level.
 885:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 886:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
 887:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
 888:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
 889:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
 890:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 891:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 892:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
 893:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 1217              		.loc 1 893 0
 1218              		.cfi_startproc
 1219              		@ args = 0, pretend = 0, frame = 8
 1220              		@ frame_needed = 1, uses_anonymous_args = 0
 1221              		@ link register save eliminated.
 1222 0000 80B4     		push	{r7}
 1223              	.LCFI60:
 1224              		.cfi_def_cfa_offset 4
 1225              		.cfi_offset 7, -4
 1226 0002 83B0     		sub	sp, sp, #12
 1227              	.LCFI61:
 1228              		.cfi_def_cfa_offset 16
 1229 0004 00AF     		add	r7, sp, #0
 1230              	.LCFI62:
 1231              		.cfi_def_cfa_register 7
 1232 0006 0346     		mov	r3, r0
 1233 0008 FB71     		strb	r3, [r7, #7]
 894:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 895:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_BOR_LEVEL(Level));
 896:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 897:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Set the BOR Level */
 898:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 1234              		.loc 1 898 0
 1235 000a 0749     		ldr	r1, .L76
 1236 000c 064B     		ldr	r3, .L76
 1237 000e 5B69     		ldr	r3, [r3, #20]
 1238 0010 23F00C02 		bic	r2, r3, #12
 1239 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1240 0016 1343     		orrs	r3, r3, r2
 1241 0018 4B61     		str	r3, [r1, #20]
 899:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 900:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return HAL_OK;
 1242              		.loc 1 900 0
 1243 001a 0023     		movs	r3, #0
 901:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 902:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1244              		.loc 1 902 0
 1245 001c 1846     		mov	r0, r3
 1246 001e 0C37     		adds	r7, r7, #12
 1247              	.LCFI63:
 1248              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc1MosAC.s 			page 48


 1249 0020 BD46     		mov	sp, r7
 1250              	.LCFI64:
 1251              		.cfi_def_cfa_register 13
 1252              		@ sp needed
 1253 0022 5DF8047B 		ldr	r7, [sp], #4
 1254              	.LCFI65:
 1255              		.cfi_restore 7
 1256              		.cfi_def_cfa_offset 0
 1257 0026 7047     		bx	lr
 1258              	.L77:
 1259              		.align	2
 1260              	.L76:
 1261 0028 003C0240 		.word	1073888256
 1262              		.cfi_endproc
 1263              	.LFE147:
 1265              		.section	.text.FLASH_OB_BootAddressConfig,"ax",%progbits
 1266              		.align	2
 1267              		.thumb
 1268              		.thumb_func
 1270              	FLASH_OB_BootAddressConfig:
 1271              	.LFB148:
 903:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 904:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 905:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Configure Boot base address.
 906:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 907:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param   BootOption : specifies Boot base address depending from Boot pin = 0 or pin = 1
 908:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 909:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OPTIONBYTE_BOOTADDR_0 : Boot address based when Boot pin = 0                 
 910:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OPTIONBYTE_BOOTADDR_1 : Boot address based when Boot pin = 1  
 911:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param   Address: specifies Boot base address
 912:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 913:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_ITCM_RAM : Boot from ITCM RAM (0x00000000)                 
 914:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_SYSTEM : Boot from System memory bootloader (0x00100000) 
 915:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_ITCM_FLASH : Boot from Flash on ITCM interface (0x00200000)  
 916:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_AXIM_FLASH : Boot from Flash on AXIM interface (0x08000000)  
 917:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
 918:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
 919:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000)              
 920:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *    
 921:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 922:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 923:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
 924:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 1272              		.loc 1 924 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 16
 1275              		@ frame_needed = 1, uses_anonymous_args = 0
 1276 0000 80B5     		push	{r7, lr}
 1277              	.LCFI66:
 1278              		.cfi_def_cfa_offset 8
 1279              		.cfi_offset 7, -8
 1280              		.cfi_offset 14, -4
 1281 0002 84B0     		sub	sp, sp, #16
 1282              	.LCFI67:
 1283              		.cfi_def_cfa_offset 24
 1284 0004 00AF     		add	r7, sp, #0
 1285              	.LCFI68:
ARM GAS  /tmp/cc1MosAC.s 			page 49


 1286              		.cfi_def_cfa_register 7
 1287 0006 7860     		str	r0, [r7, #4]
 1288 0008 3960     		str	r1, [r7]
 925:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1289              		.loc 1 925 0
 1290 000a 0023     		movs	r3, #0
 1291 000c FB73     		strb	r3, [r7, #15]
 926:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 927:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 928:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_BOOT_ADDRESS(Address));
 929:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     
 930:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 931:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1292              		.loc 1 931 0
 1293 000e 4CF25030 		movw	r0, #50000
 1294 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1295 0016 0346     		mov	r3, r0
 1296 0018 FB73     		strb	r3, [r7, #15]
 932:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 933:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1297              		.loc 1 933 0
 1298 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1299 001c 002B     		cmp	r3, #0
 1300 001e 13D1     		bne	.L79
 934:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 935:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     if(BootOption == OPTIONBYTE_BOOTADDR_0)
 1301              		.loc 1 935 0
 1302 0020 7B68     		ldr	r3, [r7, #4]
 1303 0022 102B     		cmp	r3, #16
 1304 0024 08D1     		bne	.L80
 936:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     {			
 937:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 1305              		.loc 1 937 0
 1306 0026 0B49     		ldr	r1, .L82
 1307 0028 0A4B     		ldr	r3, .L82
 1308 002a 9A69     		ldr	r2, [r3, #24]
 1309 002c 0A4B     		ldr	r3, .L82+4
 1310 002e 1340     		ands	r3, r3, r2
 1311 0030 3A68     		ldr	r2, [r7]
 1312 0032 1343     		orrs	r3, r3, r2
 1313 0034 8B61     		str	r3, [r1, #24]
 1314 0036 07E0     		b	.L79
 1315              	.L80:
 938:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     }
 939:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     else
 940:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     {
 941:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****       MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 1316              		.loc 1 941 0
 1317 0038 0649     		ldr	r1, .L82
 1318 003a 064B     		ldr	r3, .L82
 1319 003c 9B69     		ldr	r3, [r3, #24]
 1320 003e 9AB2     		uxth	r2, r3
 1321 0040 3B68     		ldr	r3, [r7]
 1322 0042 1B04     		lsls	r3, r3, #16
 1323 0044 1343     		orrs	r3, r3, r2
 1324 0046 8B61     		str	r3, [r1, #24]
 1325              	.L79:
ARM GAS  /tmp/cc1MosAC.s 			page 50


 942:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     }
 943:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 944:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 945:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 1326              		.loc 1 945 0
 1327 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 946:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1328              		.loc 1 946 0
 1329 004a 1846     		mov	r0, r3
 1330 004c 1037     		adds	r7, r7, #16
 1331              	.LCFI69:
 1332              		.cfi_def_cfa_offset 8
 1333 004e BD46     		mov	sp, r7
 1334              	.LCFI70:
 1335              		.cfi_def_cfa_register 13
 1336              		@ sp needed
 1337 0050 80BD     		pop	{r7, pc}
 1338              	.L83:
 1339 0052 00BF     		.align	2
 1340              	.L82:
 1341 0054 003C0240 		.word	1073888256
 1342 0058 0000FFFF 		.word	-65536
 1343              		.cfi_endproc
 1344              	.LFE148:
 1346              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 1347              		.align	2
 1348              		.thumb
 1349              		.thumb_func
 1351              	FLASH_OB_GetRDP:
 1352              	.LFB149:
 947:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 948:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 949:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Read Protection level.
 950:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval FlagStatus FLASH ReadOut Protection Status:
 951:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *         This parameter can be one of the following values:
 952:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_0: No protection
 953:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_1: Read protection of the memory
 954:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_2: Full chip protection
 955:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 956:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetRDP(void)
 957:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 1353              		.loc 1 957 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 8
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358 0000 80B4     		push	{r7}
 1359              	.LCFI71:
 1360              		.cfi_def_cfa_offset 4
 1361              		.cfi_offset 7, -4
 1362 0002 83B0     		sub	sp, sp, #12
 1363              	.LCFI72:
 1364              		.cfi_def_cfa_offset 16
 1365 0004 00AF     		add	r7, sp, #0
 1366              	.LCFI73:
 1367              		.cfi_def_cfa_register 7
 958:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint8_t readstatus = OB_RDP_LEVEL_0;
ARM GAS  /tmp/cc1MosAC.s 			page 51


 1368              		.loc 1 958 0
 1369 0006 AA23     		movs	r3, #170
 1370 0008 FB71     		strb	r3, [r7, #7]
 959:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   
 960:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 1371              		.loc 1 960 0
 1372 000a 0C4B     		ldr	r3, .L89
 1373 000c 1B78     		ldrb	r3, [r3]
 1374 000e DBB2     		uxtb	r3, r3
 1375 0010 AA2B     		cmp	r3, #170
 1376 0012 02D1     		bne	.L85
 961:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 962:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_0;
 1377              		.loc 1 962 0
 1378 0014 AA23     		movs	r3, #170
 1379 0016 FB71     		strb	r3, [r7, #7]
 1380 0018 09E0     		b	.L86
 1381              	.L85:
 963:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 964:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 1382              		.loc 1 964 0
 1383 001a 084B     		ldr	r3, .L89
 1384 001c 1B78     		ldrb	r3, [r3]
 1385 001e DBB2     		uxtb	r3, r3
 1386 0020 CC2B     		cmp	r3, #204
 1387 0022 02D1     		bne	.L87
 965:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 966:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_2;
 1388              		.loc 1 966 0
 1389 0024 CC23     		movs	r3, #204
 1390 0026 FB71     		strb	r3, [r7, #7]
 1391 0028 01E0     		b	.L86
 1392              	.L87:
 967:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 968:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else 
 969:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {
 970:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_1;
 1393              		.loc 1 970 0
 1394 002a 5523     		movs	r3, #85
 1395 002c FB71     		strb	r3, [r7, #7]
 1396              	.L86:
 971:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   }
 972:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 973:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return readstatus;
 1397              		.loc 1 973 0
 1398 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 974:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1399              		.loc 1 974 0
 1400 0030 1846     		mov	r0, r3
 1401 0032 0C37     		adds	r7, r7, #12
 1402              	.LCFI74:
 1403              		.cfi_def_cfa_offset 4
 1404 0034 BD46     		mov	sp, r7
 1405              	.LCFI75:
 1406              		.cfi_def_cfa_register 13
 1407              		@ sp needed
 1408 0036 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cc1MosAC.s 			page 52


 1409              	.LCFI76:
 1410              		.cfi_restore 7
 1411              		.cfi_def_cfa_offset 0
 1412 003a 7047     		bx	lr
 1413              	.L90:
 1414              		.align	2
 1415              	.L89:
 1416 003c 153C0240 		.word	1073888277
 1417              		.cfi_endproc
 1418              	.LFE149:
 1420              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 1421              		.align	2
 1422              		.thumb
 1423              		.thumb_func
 1425              	FLASH_OB_GetBOR:
 1426              	.LFB150:
 975:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 976:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 977:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Returns the FLASH BOR level.
 978:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t The FLASH BOR level:
 979:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
 980:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
 981:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
 982:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
 983:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
 984:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetBOR(void)
 985:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {
 1427              		.loc 1 985 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 1, uses_anonymous_args = 0
 1431              		@ link register save eliminated.
 1432 0000 80B4     		push	{r7}
 1433              	.LCFI77:
 1434              		.cfi_def_cfa_offset 4
 1435              		.cfi_offset 7, -4
 1436 0002 00AF     		add	r7, sp, #0
 1437              	.LCFI78:
 1438              		.cfi_def_cfa_register 7
 986:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the FLASH BOR level */
 987:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0x0C));
 1439              		.loc 1 987 0
 1440 0004 044B     		ldr	r3, .L93
 1441 0006 5B69     		ldr	r3, [r3, #20]
 1442 0008 03F00C03 		and	r3, r3, #12
 988:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1443              		.loc 1 988 0
 1444 000c 1846     		mov	r0, r3
 1445 000e BD46     		mov	sp, r7
 1446              	.LCFI79:
 1447              		.cfi_def_cfa_register 13
 1448              		@ sp needed
 1449 0010 5DF8047B 		ldr	r7, [sp], #4
 1450              	.LCFI80:
 1451              		.cfi_restore 7
 1452              		.cfi_def_cfa_offset 0
 1453 0014 7047     		bx	lr
ARM GAS  /tmp/cc1MosAC.s 			page 53


 1454              	.L94:
 1455 0016 00BF     		.align	2
 1456              	.L93:
 1457 0018 003C0240 		.word	1073888256
 1458              		.cfi_endproc
 1459              	.LFE150:
 1461              		.section	.text.FLASH_OB_GetBootAddress,"ax",%progbits
 1462              		.align	2
 1463              		.thumb
 1464              		.thumb_func
 1466              	FLASH_OB_GetBootAddress:
 1467              	.LFB151:
 989:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
 990:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** /**
 991:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Configure Boot base address.
 992:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * 
 993:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @param   BootOption : specifies Boot base address depending from Boot pin = 0 or pin = 1
 994:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 995:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OPTIONBYTE_BOOTADDR_0 : Boot address based when Boot pin = 0                 
 996:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OPTIONBYTE_BOOTADDR_1 : Boot address based when Boot pin = 1       
 997:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *    
 998:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t Boot Base Address:
 999:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_ITCM_RAM : Boot from ITCM RAM (0x00000000)                 
1000:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_SYSTEM : Boot from System memory bootloader (0x00100000) 
1001:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_ITCM_FLASH : Boot from Flash on ITCM interface (0x00200000)  
1002:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_AXIM_FLASH : Boot from Flash on AXIM interface (0x08000000)  
1003:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
1004:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
1005:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000) 
1006:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   */
1007:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetBootAddress(uint32_t BootOption)
1008:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** {  
 1468              		.loc 1 1008 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 16
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472              		@ link register save eliminated.
 1473 0000 80B4     		push	{r7}
 1474              	.LCFI81:
 1475              		.cfi_def_cfa_offset 4
 1476              		.cfi_offset 7, -4
 1477 0002 85B0     		sub	sp, sp, #20
 1478              	.LCFI82:
 1479              		.cfi_def_cfa_offset 24
 1480 0004 00AF     		add	r7, sp, #0
 1481              	.LCFI83:
 1482              		.cfi_def_cfa_register 7
 1483 0006 7860     		str	r0, [r7, #4]
1009:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t Address = 0;
 1484              		.loc 1 1009 0
 1485 0008 0023     		movs	r3, #0
 1486 000a FB60     		str	r3, [r7, #12]
1010:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     
1011:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 	/* Return the Boot base Address */
1012:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   if(BootOption == OPTIONBYTE_BOOTADDR_0)
 1487              		.loc 1 1012 0
 1488 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc1MosAC.s 			page 54


 1489 000e 102B     		cmp	r3, #16
 1490 0010 04D1     		bne	.L96
1013:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   {			
1014:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****     Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 1491              		.loc 1 1014 0
 1492 0012 084B     		ldr	r3, .L99
 1493 0014 9B69     		ldr	r3, [r3, #24]
 1494 0016 9BB2     		uxth	r3, r3
 1495 0018 FB60     		str	r3, [r7, #12]
 1496 001a 03E0     		b	.L97
 1497              	.L96:
1015:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 	}
1016:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   else
1017:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 	{
1018:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 1498              		.loc 1 1018 0
 1499 001c 054B     		ldr	r3, .L99
 1500 001e 9B69     		ldr	r3, [r3, #24]
 1501 0020 1B0C     		lsrs	r3, r3, #16
 1502 0022 FB60     		str	r3, [r7, #12]
 1503              	.L97:
1019:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 	}
1020:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** 
1021:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c ****   return Address;
 1504              		.loc 1 1021 0
 1505 0024 FB68     		ldr	r3, [r7, #12]
1022:../../Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_flash_ex.c **** }
 1506              		.loc 1 1022 0
 1507 0026 1846     		mov	r0, r3
 1508 0028 1437     		adds	r7, r7, #20
 1509              	.LCFI84:
 1510              		.cfi_def_cfa_offset 4
 1511 002a BD46     		mov	sp, r7
 1512              	.LCFI85:
 1513              		.cfi_def_cfa_register 13
 1514              		@ sp needed
 1515 002c 5DF8047B 		ldr	r7, [sp], #4
 1516              	.LCFI86:
 1517              		.cfi_restore 7
 1518              		.cfi_def_cfa_offset 0
 1519 0030 7047     		bx	lr
 1520              	.L100:
 1521 0032 00BF     		.align	2
 1522              	.L99:
 1523 0034 003C0240 		.word	1073888256
 1524              		.cfi_endproc
 1525              	.LFE151:
 1527              		.text
 1528              	.Letext0:
 1529              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1530              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1531              		.file 5 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f769xx.h"
 1532              		.file 6 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1533              		.file 7 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_flash.h"
 1534              		.file 8 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_flash_ex.h"
 1535              		.file 9 "../../Drivers/CMSIS/Include/core_cm7.h"
ARM GAS  /tmp/cc1MosAC.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_flash_ex.c
     /tmp/cc1MosAC.s:21     .text.HAL_FLASHEx_Erase:0000000000000000 $t
     /tmp/cc1MosAC.s:26     .text.HAL_FLASHEx_Erase:0000000000000000 HAL_FLASHEx_Erase
     /tmp/cc1MosAC.s:599    .text.FLASH_MassErase:0000000000000000 FLASH_MassErase
     /tmp/cc1MosAC.s:702    .text.FLASH_Erase_Sector:0000000000000000 FLASH_Erase_Sector
     /tmp/cc1MosAC.s:176    .text.HAL_FLASHEx_Erase:00000000000000d4 $d
     /tmp/cc1MosAC.s:183    .text.HAL_FLASHEx_Erase_IT:0000000000000000 $t
     /tmp/cc1MosAC.s:188    .text.HAL_FLASHEx_Erase_IT:0000000000000000 HAL_FLASHEx_Erase_IT
     /tmp/cc1MosAC.s:304    .text.HAL_FLASHEx_Erase_IT:000000000000009c $d
     /tmp/cc1MosAC.s:310    .text.HAL_FLASHEx_OBProgram:0000000000000000 $t
     /tmp/cc1MosAC.s:315    .text.HAL_FLASHEx_OBProgram:0000000000000000 HAL_FLASHEx_OBProgram
     /tmp/cc1MosAC.s:1030   .text.FLASH_OB_EnableWRP:0000000000000000 FLASH_OB_EnableWRP
     /tmp/cc1MosAC.s:1093   .text.FLASH_OB_DisableWRP:0000000000000000 FLASH_OB_DisableWRP
     /tmp/cc1MosAC.s:1155   .text.FLASH_OB_RDP_LevelConfig:0000000000000000 FLASH_OB_RDP_LevelConfig
     /tmp/cc1MosAC.s:892    .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
     /tmp/cc1MosAC.s:1215   .text.FLASH_OB_BOR_LevelConfig:0000000000000000 FLASH_OB_BOR_LevelConfig
     /tmp/cc1MosAC.s:1270   .text.FLASH_OB_BootAddressConfig:0000000000000000 FLASH_OB_BootAddressConfig
     /tmp/cc1MosAC.s:517    .text.HAL_FLASHEx_OBProgram:0000000000000134 $d
     /tmp/cc1MosAC.s:522    .text.HAL_FLASHEx_OBGetConfig:0000000000000000 $t
     /tmp/cc1MosAC.s:527    .text.HAL_FLASHEx_OBGetConfig:0000000000000000 HAL_FLASHEx_OBGetConfig
     /tmp/cc1MosAC.s:849    .text.FLASH_OB_GetWRP:0000000000000000 FLASH_OB_GetWRP
     /tmp/cc1MosAC.s:1351   .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
     /tmp/cc1MosAC.s:987    .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
     /tmp/cc1MosAC.s:1425   .text.FLASH_OB_GetBOR:0000000000000000 FLASH_OB_GetBOR
     /tmp/cc1MosAC.s:1466   .text.FLASH_OB_GetBootAddress:0000000000000000 FLASH_OB_GetBootAddress
     /tmp/cc1MosAC.s:595    .text.FLASH_MassErase:0000000000000000 $t
     /tmp/cc1MosAC.s:692    .text.FLASH_MassErase:0000000000000070 $d
     /tmp/cc1MosAC.s:697    .text.FLASH_Erase_Sector:0000000000000000 $t
     /tmp/cc1MosAC.s:840    .text.FLASH_Erase_Sector:00000000000000b0 $d
     /tmp/cc1MosAC.s:845    .text.FLASH_OB_GetWRP:0000000000000000 $t
     /tmp/cc1MosAC.s:882    .text.FLASH_OB_GetWRP:0000000000000018 $d
     /tmp/cc1MosAC.s:888    .text.FLASH_OB_UserConfig:0000000000000000 $t
     /tmp/cc1MosAC.s:977    .text.FLASH_OB_UserConfig:000000000000006c $d
     /tmp/cc1MosAC.s:983    .text.FLASH_OB_GetUser:0000000000000000 $t
     /tmp/cc1MosAC.s:1020   .text.FLASH_OB_GetUser:0000000000000018 $d
     /tmp/cc1MosAC.s:1026   .text.FLASH_OB_EnableWRP:0000000000000000 $t
     /tmp/cc1MosAC.s:1084   .text.FLASH_OB_EnableWRP:0000000000000038 $d
     /tmp/cc1MosAC.s:1089   .text.FLASH_OB_DisableWRP:0000000000000000 $t
     /tmp/cc1MosAC.s:1146   .text.FLASH_OB_DisableWRP:0000000000000034 $d
     /tmp/cc1MosAC.s:1151   .text.FLASH_OB_RDP_LevelConfig:0000000000000000 $t
     /tmp/cc1MosAC.s:1206   .text.FLASH_OB_RDP_LevelConfig:0000000000000030 $d
     /tmp/cc1MosAC.s:1211   .text.FLASH_OB_BOR_LevelConfig:0000000000000000 $t
     /tmp/cc1MosAC.s:1261   .text.FLASH_OB_BOR_LevelConfig:0000000000000028 $d
     /tmp/cc1MosAC.s:1266   .text.FLASH_OB_BootAddressConfig:0000000000000000 $t
     /tmp/cc1MosAC.s:1341   .text.FLASH_OB_BootAddressConfig:0000000000000054 $d
     /tmp/cc1MosAC.s:1347   .text.FLASH_OB_GetRDP:0000000000000000 $t
     /tmp/cc1MosAC.s:1416   .text.FLASH_OB_GetRDP:000000000000003c $d
     /tmp/cc1MosAC.s:1421   .text.FLASH_OB_GetBOR:0000000000000000 $t
     /tmp/cc1MosAC.s:1457   .text.FLASH_OB_GetBOR:0000000000000018 $d
     /tmp/cc1MosAC.s:1462   .text.FLASH_OB_GetBootAddress:0000000000000000 $t
     /tmp/cc1MosAC.s:1523   .text.FLASH_OB_GetBootAddress:0000000000000034 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
FLASH_WaitForLastOperation
pFlash
ARM GAS  /tmp/cc1MosAC.s 			page 56



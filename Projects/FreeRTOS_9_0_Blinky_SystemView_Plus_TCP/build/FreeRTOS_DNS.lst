ARM GAS  /tmp/ccRjHDdd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"FreeRTOS_DNS.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.FreeRTOS_min_uint32,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	FreeRTOS_min_uint32:
  26              	.LFB8:
  27              		.file 1 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
ARM GAS  /tmp/ccRjHDdd.s 			page 2


  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #ifndef FREERTOS_IP_H
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FREERTOS_IP_H
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #ifdef __cplusplus
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** extern "C" {
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Application level configuration options. */
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "FreeRTOSIPConfig.h"
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "FreeRTOSIPConfigDefaults.h"
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "IPTraceMacroDefaults.h"
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Some constants defining the sizes of several parts of a packet */
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_HEADER			14u
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_IPv4_HEADER			20u
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_IGMP_HEADER			8u
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ICMP_HEADER			8u
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_UDP_HEADER			8u
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_TCP_HEADER			20u
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* The number of octets in the MAC and IP addresses respectively. */
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipMAC_ADDRESS_LENGTH_BYTES ( 6 )
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipIP_ADDRESS_LENGTH_BYTES ( 4 )
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* IP protocol definitions. */
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_ICMP			( 1 )
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_IGMP         ( 2 )
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_TCP			( 6 )
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipPROTOCOL_UDP			( 17 )
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
ARM GAS  /tmp/ccRjHDdd.s 			page 3


  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Dimensions the buffers that are filled by received Ethernet frames. */
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_CRC_BYTES					( 4UL )
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_OPTIONAL_802_1Q_TAG_BYTES	( 4UL )
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define ipTOTAL_ETHERNET_FRAME_SIZE				( ( ( uint32_t ) ipconfigNETWORK_MTU ) + ( ( uint32_t ) ipSI
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /*_RB_ Comment may need updating. */
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Space left at the beginning of a network buffer storage area to store a
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** pointer back to the network buffer.  Should be a multiple of 8 to ensure 8 byte
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** alignment is maintained on architectures that require it.
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** In order to get a 32-bit alignment of network packets, an offset of 2 bytes
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** would be desirable, as defined by ipconfigPACKET_FILLER_SIZE.  So the malloc'd
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** buffer will have the following contents:
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint32_t pointer;	// word-aligned
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 filler[6];
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	<< ETH-header >>	// half-word-aligned
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 dest[6];    // start of pucEthernetBuffer
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar_8 dest[6];
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uchar16_t type;
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	<< IP-header >>		// word-aligned
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t ucVersionHeaderLength;
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	etc
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****  */
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigBUFFER_PADDING != 0 )
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ipconfigBUFFER_PADDING
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #else
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ( 8u + ipconfigPACKET_FILLER_SIZE )
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* The structure used to store buffers and pass them around the network stack.
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** Buffers can be in use by the stack, in use by the network interface hardware
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** driver, or free (not in use). */
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef struct xNETWORK_BUFFER
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	ListItem_t xBufferListItem; 	/* Used to reference the buffer form the free buffer list or a socket
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint32_t ulIPAddress;			/* Source or destination IP address, depending on usage scenario. */
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t *pucEthernetBuffer; 	/* Pointer to the start of the Ethernet frame. */
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	size_t xDataLength; 			/* Starts by holding the total Ethernet frame length, then the UDP/TCP payl
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint16_t usPort;				/* Source or destination port, depending on usage scenario. */
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint16_t usBoundPort;			/* The port to which a transmitting socket is bound. */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		struct xNETWORK_BUFFER *pxNextBuffer; /* Possible optimisation for expert users - requires networ
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } NetworkBufferDescriptor_t;
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "pack_struct_start.h"
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** struct xMAC_ADDRESS
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	uint8_t ucBytes[ ipMAC_ADDRESS_LENGTH_BYTES ];
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** }
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #include "pack_struct_end.h"
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef struct xMAC_ADDRESS MACAddress_t;
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef enum eNETWORK_EVENTS
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eNetworkUp,		/* The network is configured. */
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eNetworkDown	/* The network connection has been lost. */
ARM GAS  /tmp/ccRjHDdd.s 			page 4


 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } eIPCallbackEvent_t;
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** typedef enum ePING_REPLY_STATUS
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** {
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eSuccess = 0,		/* A correct reply has been received for an outgoing ping. */
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eInvalidChecksum,	/* A reply was received for an outgoing ping but the checksum of the reply was i
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	eInvalidData		/* A reply was received to an outgoing ping but the payload of the reply was not cor
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** } ePingReplyStatus_t;
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** /* Endian related definitions. */
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	/* FreeRTOS_htons / FreeRTOS_htonl: some platforms might have built-in versions
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	using a single instruction so allow these versions to be overridden. */
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#ifndef FreeRTOS_htons
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		#define FreeRTOS_htons( usIn ) ( (uint16_t) ( ( ( usIn ) << 8U ) | ( ( usIn ) >> 8U ) ) )
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#ifndef	FreeRTOS_htonl
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 		#define FreeRTOS_htonl( ulIn ) 											\
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 			(																	\
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				( uint32_t ) 													\
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				( 																\
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) << 24  ) | 	\
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x0000ff00UL ) <<  8  ) | 	\
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x00ff0000UL ) >>  8  ) | 	\
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) >> 24  )  	\
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 				) 																\
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 			)
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#endif
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #else /* ipconfigBYTE_ORDER */
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#define FreeRTOS_htons( x ) ( ( uint16_t ) ( x ) )
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	#define FreeRTOS_htonl( x ) ( ( uint32_t ) ( x ) )
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #endif /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FreeRTOS_ntohs( x ) FreeRTOS_htons( x )
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #define FreeRTOS_ntohl( x ) FreeRTOS_htonl( x )
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** #if( ipconfigHAS_INLINE_FUNCTIONS == 1 )
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b);
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b);
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b);
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b);
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d);
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_down (uint32_t a, uint32_t d);
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_max_BaseType  (BaseType_t  a, BaseType_t  b);
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE UBaseType_t FreeRTOS_max_UBaseTyp (UBaseType_t a, UBaseType_t b);
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE BaseType_t  	FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
ARM GAS  /tmp/ccRjHDdd.s 			page 5


 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
  28              		.loc 1 205 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7]
  45              		.loc 1 205 0
  46 000a 7A68     		ldr	r2, [r7, #4]
  47 000c 3B68     		ldr	r3, [r7]
  48 000e 9342     		cmp	r3, r2
  49 0010 28BF     		it	cs
  50 0012 1346     		movcs	r3, r2
  51 0014 1846     		mov	r0, r3
  52 0016 0C37     		adds	r7, r7, #12
  53              	.LCFI3:
  54              		.cfi_def_cfa_offset 4
  55 0018 BD46     		mov	sp, r7
  56              	.LCFI4:
  57              		.cfi_def_cfa_register 13
  58              		@ sp needed
  59 001a 5DF8047B 		ldr	r7, [sp], #4
  60              	.LCFI5:
  61              		.cfi_restore 7
  62              		.cfi_def_cfa_offset 0
  63 001e 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE8:
  67              		.section	.text.usChar2u16,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  72              	usChar2u16:
  73              	.LFB28:
  74              		.file 2 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
ARM GAS  /tmp/ccRjHDdd.s 			page 6


  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #ifndef FREERTOS_IP_PRIVATE_H
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define FREERTOS_IP_PRIVATE_H
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #ifdef __cplusplus
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern "C" {
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Application level configuration options. */
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "FreeRTOSIPConfig.h"
ARM GAS  /tmp/ccRjHDdd.s 			page 7


  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "FreeRTOSIPConfigDefaults.h"
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "FreeRTOS_Sockets.h"
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "IPTraceMacroDefaults.h"
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "FreeRTOS_Stream_Buffer.h"
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#include "FreeRTOS_TCP_WIN.h"
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#include "FreeRTOS_TCP_IP.h"
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "event_groups.h"
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xNetworkAddressingParameters
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulDefaultIPAddress;
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulNetMask;
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulGatewayAddress;
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulDNSServerAddress;
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulBroadcastAddress;
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } NetworkAddressingParameters_t;
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern BaseType_t xTCPWindowLoggingLevel;
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Protocol headers.                                         */
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xETH_HEADER
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	MACAddress_t xDestinationAddress; /*  0 + 6 = 6  */
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	MACAddress_t xSourceAddress;      /*  6 + 6 = 12 */
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usFrameType;              /* 12 + 2 = 14 */
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xETH_HEADER EthernetHeader_t;
 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xARP_HEADER
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usHardwareType;				/*  0 +  2 =  2 */
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usProtocolType;				/*  2 +  2 =  4 */
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucHardwareAddressLength;		/*  4 +  1 =  5 */
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucProtocolAddressLength;		/*  5 +  1 =  6 */
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usOperation;					/*  6 +  2 =  8 */
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	MACAddress_t xSenderHardwareAddress;	/*  8 +  6 = 14 */
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulSenderProtocolAddress;		/* 14 +  4 = 18  */
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	MACAddress_t xTargetHardwareAddress;	/* 18 +  6 = 24  */
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulTargetProtocolAddress;		/* 24 +  4 = 28  */
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xARP_HEADER ARPHeader_t;
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xIP_HEADER
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucVersionHeaderLength;        /*  0 + 1 =  1 */
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucDifferentiatedServicesCode; /*  1 + 1 =  2 */
ARM GAS  /tmp/ccRjHDdd.s 			page 8


 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usLength;                    /*  2 + 2 =  4 */
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usIdentification;            /*  4 + 2 =  6 */
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usFragmentOffset;            /*  6 + 2 =  8 */
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucTimeToLive;                 /*  8 + 1 =  9 */
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol;                   /*  9 + 1 = 10 */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usHeaderChecksum;            /* 10 + 2 = 12 */
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulSourceIPAddress;           /* 12 + 4 = 16 */
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulDestinationIPAddress;      /* 16 + 4 = 20 */
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xIP_HEADER IPHeader_t;
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xIGMP_HEADER
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucVersionType;     /* 0 + 1 = 1 */
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucMaxResponseTime; /* 1 + 1 = 2 */
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;       /* 2 + 2 = 4 */
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t usGroupAddress;   /* 4 + 4 = 8 */
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xIGMP_HEADER IGMPHeader_t;
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xICMP_HEADER
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucTypeOfMessage;   /* 0 + 1 = 1 */
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucTypeOfService;   /* 1 + 1 = 2 */
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;       /* 2 + 2 = 4 */
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usIdentifier;     /* 4 + 2 = 6 */
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usSequenceNumber; /* 6 + 2 = 8 */
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xICMP_HEADER ICMPHeader_t;
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xUDP_HEADER
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usSourcePort;      /* 0 + 2 = 2 */
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usDestinationPort; /* 2 + 2 = 4 */
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usLength;          /* 4 + 2 = 6 */
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;        /* 6 + 2 = 8 */
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xUDP_HEADER UDPHeader_t;
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xTCP_HEADER
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usSourcePort;		/* +  2 =  2 */
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usDestinationPort;	/* +  2 =  4 */
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulSequenceNumber;	/* +  4 =  8 */
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulAckNr;   	 	/* +  4 = 12 */
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t  ucTCPOffset;		/* +  1 = 13 */
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t  ucTCPFlags;		/* +  1 = 14 */
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usWindow;			/* +  2 = 15 */
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;		/* +  2 = 18 */
ARM GAS  /tmp/ccRjHDdd.s 			page 9


 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usUrgent;			/* +  2 = 20 */
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if ipconfigUSE_TCP == 1
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* the option data is not a part of the TCP header */
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t  ucOptdata[ipSIZE_TCP_OPTIONS];		/* + 12 = 32 */
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xTCP_HEADER TCPHeader_t;
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xPSEUDO_HEADER
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulSourceAddress;
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulDestinationAddress;
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucZeros;
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol;
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usUDPLength;
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xPSEUDO_HEADER PseudoHeader_t;
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Nested protocol packets.                                  */
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xARP_PACKET
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;	/*  0 + 14 = 14 */
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ARPHeader_t xARPHeader;			/* 14 + 28 = 42 */
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xARP_PACKET ARPPacket_t;
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xIP_PACKET
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xIP_PACKET IPPacket_t;
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xICMP_PACKET
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ICMPHeader_t xICMPHeader;
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xICMP_PACKET ICMPPacket_t;
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xUDP_PACKET
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader; /*  0 + 14 = 14 */
ARM GAS  /tmp/ccRjHDdd.s 			page 10


 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;             /* 14 + 20 = 34 */
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	UDPHeader_t xUDPHeader;           /* 34 +  8 = 42 */
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xUDP_PACKET UDPPacket_t;
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xTCP_PACKET
 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader; /*  0 + 14 = 14 */
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;             /* 14 + 20 = 34 */
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TCPHeader_t xTCPHeader;           /* 34 + 32 = 66 */
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xTCP_PACKET TCPPacket_t;
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef union XPROT_PACKET
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ARPPacket_t xARPPacket;
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TCPPacket_t xTCPPacket;
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	UDPPacket_t xUDPPacket;
 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ICMPPacket_t xICMPPacket;
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } ProtocolPacket_t;
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The maximum UDP payload length. */
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipMAX_UDP_PAYLOAD_LENGTH ( ( ipconfigNETWORK_MTU - ipSIZE_OF_IPv4_HEADER ) - ipSIZE_OF_UDP_
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef enum
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eReleaseBuffer = 0,		/* Processing the frame did not find anything to do - just release the buffer
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eProcessBuffer,			/* An Ethernet frame has a valid address - continue process its contents. */
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eReturnEthernetFrame,	/* The Ethernet frame contains an ARP or ICMP packet that can be returned to
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eFrameConsumed			/* Processing the Ethernet packet contents resulted in the payload being sent to 
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } eFrameProcessingResult_t;
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef enum
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eNoEvent = -1,
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eNetworkDownEvent,		/* 0: The network interface has been lost and/or needs [re]connecting. */
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eNetworkRxEvent,		/* 1: The network interface has queued a received Ethernet frame. */
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eARPTimerEvent,			/* 2: The ARP timer expired. */
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eStackTxEvent,			/* 3: The software stack has queued a packet to transmit. */
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eDHCPEvent,				/* 4: Process the DHCP state machine. */
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eTCPTimerEvent,			/* 5: See if any TCP socket needs attention. */
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eTCPAcceptEvent,		/* 6: Client API FreeRTOS_accept() waiting for client connections. */
 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eTCPNetStat,			/* 7: IP-task is asked to produce a netstat listing. */
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSocketBindEvent,		/* 8: Send a message to the IP-task to bind a socket to a port. */
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSocketCloseEvent,		/* 9: Send a message to the IP-task to close a socket. */
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSocketSelectEvent,		/*10: Send a message to the IP-task for select(). */
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSocketSignalEvent,		/*11: A socket must be signalled. */
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } eIPEvent_t;
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct IP_TASK_COMMANDS
 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eIPEvent_t eEventType;
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	void *pvData;
ARM GAS  /tmp/ccRjHDdd.s 			page 11


 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } IPStackEvent_t;
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipBROADCAST_IP_ADDRESS 0xffffffffUL
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Offset into the Ethernet frame that is used to temporarily store information
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** on the fragmentation status of the packet being sent.  The value is important,
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** as it is past the location into which the destination address will get placed. */
 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipFRAGMENTATION_PARAMETERS_OFFSET		( 6 )
 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipSOCKET_OPTIONS_OFFSET					( 6 )
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Only used when outgoing fragmentation is being used (FreeRTOSIPConfig.h
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** setting. */
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipGET_UDP_PAYLOAD_OFFSET_FOR_FRAGMENT( usFragmentOffset ) ( ( ( usFragmentOffset ) == 0 ) ?
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The offset into a UDP packet at which the UDP data (payload) starts. */
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipUDP_PAYLOAD_OFFSET_IPv4	( sizeof( UDPPacket_t ) )
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The offset into an IP packet into which the IP data (payload) starts. */
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipIP_PAYLOAD_OFFSET		( sizeof( IPPacket_t ) )
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** struct xUDP_IP_FRAGMENT_PARAMETERS
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucSocketOptions;
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucPadFor16BitAlignment;
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usFragmentedPacketOffset;
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usFragmentLength;
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usPayloadChecksum;
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct xUDP_IP_FRAGMENT_PARAMETERS IPFragmentParameters_t;
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* Ethernet frame types. */
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_FRAME_TYPE	( 0x0608U )
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipIPv4_FRAME_TYPE	( 0x0008U )
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* ARP related definitions. */
 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_PROTOCOL_TYPE				( 0x0008U )
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_HARDWARE_TYPE_ETHERNET	( 0x0100U )
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_REQUEST					( 0x0100U )
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_REPLY						( 0x0200U )
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #else
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* Ethernet frame types. */
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_FRAME_TYPE	( 0x0806U )
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipIPv4_FRAME_TYPE	( 0x0800U )
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* ARP related definitions. */
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_PROTOCOL_TYPE ( 0x0800U )
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_HARDWARE_TYPE_ETHERNET ( 0x0001U )
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_REQUEST ( 0x0001 )
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ipARP_REPLY ( 0x0002 )
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
ARM GAS  /tmp/ccRjHDdd.s 			page 12


 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* For convenience, a MAC address of all zeros and another of all 0xffs are
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** defined const for quick reference. */
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern const MACAddress_t xBroadcastMACAddress; /* all 0xff's */
 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern uint16_t usPacketIdentifier;
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Define a default UDP packet header (declared in FreeRTOS_UDP_IP.c) */
 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef union xUDPPacketHeader
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucBytes[24];
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint32_t ulWords[6];
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } UDPPacketHeader_t;
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern UDPPacketHeader_t xDefaultPartUDPPacketHeader;
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Structure that stores the netmask, gateway address and DNS server addresses. */
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern NetworkAddressingParameters_t xNetworkAddressing;
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Structure that stores the defaults for netmask, gateway address and DNS.
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** These values will be copied to 'xNetworkAddressing' in case DHCP is not used,
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** and also in case DHCP does not lead to a confirmed request. */
 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern NetworkAddressingParameters_t xDefaultAddressing;
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* True when BufferAllocation_1.c was included, false for BufferAllocation_2.c */
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** extern const BaseType_t xBufferAllocFixedSize;
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Defined in FreeRTOS_Sockets.c */
 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if ( ipconfigUSE_TCP == 1 )
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	extern List_t xBoundTCPSocketsList;
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The local IP address is accessed from within xDefaultPartUDPPacketHeader,
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** rather than duplicated in its own variable. */
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipLOCAL_IP_ADDRESS_POINTER ( ( uint32_t * ) &( xDefaultPartUDPPacketHeader.ulWords[ 20u / s
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* The local MAC address is accessed from within xDefaultPartUDPPacketHeader,
 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** rather than duplicated in its own variable. */
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipLOCAL_MAC_ADDRESS ( &xDefaultPartUDPPacketHeader.ucBytes[0] )
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* ICMP packets are sent using the same function as UDP packets.  The port
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** number is used to distinguish between the two, as 0 is an invalid UDP port. */
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define ipPACKET_CONTAINS_ICMP_DATA					( 0 )
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* For now, the lower 8 bits in 'xEventBits' will be reserved for the above
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** socket events. */
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define SOCKET_EVENT_BIT_COUNT   8
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define vSetField16( pxBase, xType, xField, usValue ) \
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** { \
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( ( uint8_t* )( pxBase ) ) [ offsetof( xType, xField ) + 0 ] = ( uint8_t ) ( ( usValue ) >> 8 ); \
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( ( uint8_t* )( pxBase ) ) [ offsetof( xType, xField ) + 1 ] = ( uint8_t ) ( ( usValue ) & 0xff );
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define vSetField32( pxBase, xType, xField, ulValue ) \
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** { \
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 0 ] = ( uint8_t )   ( ( ulValue ) >> 24 ); 
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 1 ] = ( uint8_t ) ( ( ( ulValue ) >> 16 ) &
ARM GAS  /tmp/ccRjHDdd.s 			page 13


 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 2 ] = ( uint8_t ) ( ( ( ulValue ) >> 8 ) & 
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 3 ] = ( uint8_t )   ( ( ulValue ) & 0xff );
 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define vFlip_16( left, right ) \
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	do { \
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t tmp = (left); \
 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		(left) = (right); \
 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		(right) = tmp; \
 418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} while (0)
 419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #define vFlip_32( left, right ) \
 421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	do { \
 422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t tmp = (left); \
 423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		(left) = (right); \
 424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		(right) = tmp; \
 425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} while (0)
 426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #ifndef ARRAY_SIZE
 428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#define ARRAY_SIZE(x)	(BaseType_t)(sizeof(x)/sizeof(x)[0])
 429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif
 430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * A version of FreeRTOS_GetReleaseNetworkBuffer() that can be called from an
 433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * interrupt.  If a non zero value is returned, then the calling ISR should
 434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * perform a context switch before exiting the ISR.
 435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t FreeRTOS_ReleaseFreeNetworkBufferFromISR( void );
 437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Create a message that contains a command to initialise the network interface.
 440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * This is used during initialisation, and at any time the network interface
 441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * goes down thereafter.  The network interface hardware driver is responsible
 442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * for sending the message that contains the network interface down command/
 443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * event.
 444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *
 445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Only use the FreeRTOS_NetworkDownFromISR() version if the function is to be
 446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * called from an interrupt service routine.  If FreeRTOS_NetworkDownFromISR()
 447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * returns a non-zero value then a context switch should be performed ebfore
 448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * the interrupt is exited.
 449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void FreeRTOS_NetworkDown( void );
 451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t FreeRTOS_NetworkDownFromISR( void );
 452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Processes incoming ARP packets.
 455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame );
 457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Inspect an Ethernet frame to see if it contains data that the stack needs to
 460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * process.  eProcessBuffer is returned if the frame should be processed by the
 461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * stack.  eReleaseBuffer is returned if the frame should be discarded.
 462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer );
 464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
ARM GAS  /tmp/ccRjHDdd.s 			page 14


 466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Return the checksum generated over xDataLengthBytes from pucNextData.
 467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** uint16_t usGenerateChecksum( uint32_t ulSum, const uint8_t * pucNextData, size_t uxDataLengthBytes 
 469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /* Socket related private functions. */
 471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
 472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void vNetworkSocketsInit( void );
 473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Returns pdTRUE if the IP task has been created and is initialised.  Otherwise
 476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * returns pdFALSE.
 477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t xIPIsNetworkTaskReady( void );
 479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
 481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/*
 483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * Actually a user thing, but because xBoundTCPSocketsList, let it do by the
 484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * IP-task
 485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 */
 486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	void vTCPNetStat( void );
 487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/*
 489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * At least one socket needs to check for timeouts
 490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 */
 491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TickType_t xTCPTimerCheck( BaseType_t xWillSleep );
 492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* Every TCP socket has a buffer space just big enough to store
 494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	the last TCP header received.
 495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	As a reference of this field may be passed to DMA, force the
 496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	alignment to 8 bytes. */
 497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	typedef union
 498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	{
 499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct
 500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		{
 501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			/* Increase the alignment of this union by adding a 64-bit variable. */
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint64_t ullAlignmentWord;
 503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		} a;
 504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct
 505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		{
 506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			/* The next field only serves to give 'ucLastPacket' a correct
 507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			alignment of 8 + 2.  See comments in FreeRTOS_IP.h */
 508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucFillPacket[ ipconfigPACKET_FILLER_SIZE ];
 509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucLastPacket[ sizeof( TCPPacket_t ) ];
 510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		} u;
 511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} LastTCPPacket_t;
 512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/*
 514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * Note that the values of all short and long integers in these structs
 515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * are being stored in the native-endian way
 516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * Translation should take place when accessing any structure which defines
 517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * network packets, such as IPHeader_t and TCPHeader_t
 518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 */
 519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	typedef struct TCPSOCKET
 520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	{
 521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t ulRemoteIP;		/* IP address of remote machine */
 522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usRemotePort;		/* Port on remote machine */
ARM GAS  /tmp/ccRjHDdd.s 			page 15


 523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct {
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			/* Most compilers do like bit-flags */
 525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint32_t
 526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bMssChange : 1,		/* This socket has seen a change in MSS */
 527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bPassAccept : 1,	/* when true, this socket may be returned in a call to accept() */
 528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bPassQueued : 1,	/* when true, this socket is an orphan until it gets connected
 529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 									 * Why an orphan? Because it may not be returned in a accept() call until it
 530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 									 * gets the state eESTABLISHED */
 531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bReuseSocket : 1,	/* When a listening socket gets a connection, do not create a new instance bu
 532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bCloseAfterSend : 1,/* As soon as the last byte has been transmitted, finalise the connection
 533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 									 * Useful in e.g. FTP connections, where the last data bytes are sent along with the FIN f
 534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bUserShutdown : 1,	/* User requesting a graceful shutdown */
 535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bCloseRequested : 1,/* Request to finalise the connection */
 536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bLowWater : 1,		/* high-water level has been reached. Cleared as soon as 'rx-count < lo-water' 
 537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bWinChange : 1,		/* The value of bLowWater has changed, must send a window update */
 538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bSendKeepAlive : 1,	/* When this flag is true, a TCP keep-alive message must be send */
 539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bWaitKeepAlive : 1,	/* When this flag is true, a TCP keep-alive reply is expected */
 540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bConnPrepared : 1,	/* Connecting socket: Message has been prepared */
 541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 					bConnPassed : 1,	/* Connecting socket: Socket has been passed in a successful select()  */
 543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
 544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinAccepted : 1,	/* This socket has received (or sent) a FIN and accepted it */
 545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinSent : 1,		/* We've sent out a FIN */
 546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinRecv : 1,		/* We've received a FIN from our peer */
 547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinAcked : 1,		/* Our FIN packet has been acked */
 548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bFinLast : 1,		/* The last ACK (after FIN and FIN+ACK) has been sent or will be sent by the pee
 549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bRxStopped : 1,		/* Application asked to temporarily stop reception */
 550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bMallocError : 1,	/* There was an error allocating a stream */
 551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 				bWinScaling : 1;	/* A TCP-Window Scaling option was offered and accepted in the SYN phase. */
 552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		} bits;
 553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t ulHighestRxAllowed;
 554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 								/* The highest sequence number that we can receive at any moment */
 555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usTimeout;		/* Time (in ticks) after which this socket needs attention */
 556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usCurMSS;		/* Current Maximum Segment Size */
 557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usInitMSS;		/* Initial maximum segment Size */
 558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usChildCount;	/* In case of a listening socket: number of connections on this port numbe
 559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint16_t usBacklog;		/* In case of a listening socket: maximum number of concurrent connections o
 560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint8_t ucRepCount;		/* Send repeat count, for retransmissions
 561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 								 * This counter is separate from the xmitCount in the
 562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 								 * TCP win segments */
 563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint8_t ucTCPState;		/* TCP state: see eTCP_STATE */
 564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct XSOCKET *pxPeerSocket;	/* for server socket: child, for child socket: parent */
 565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigTCP_KEEP_ALIVE == 1 )
 566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucKeepRepCount;
 567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			TickType_t xLastAliveTime;
 568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigTCP_KEEP_ALIVE */
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigTCP_HANG_PROTECTION == 1 )
 570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			TickType_t xLastActTime;
 571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigTCP_HANG_PROTECTION */
 572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxLittleSpace;
 573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxEnoughSpace;
 574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxRxStreamSize;
 575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxTxStreamSize;
 576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		StreamBuffer_t *rxStream;
 577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		StreamBuffer_t *txStream;
 578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP_WIN == 1 )
 579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			NetworkBufferDescriptor_t *pxAckMessage;
ARM GAS  /tmp/ccRjHDdd.s 			page 16


 580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_TCP_WIN */
 581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		/* Buffer space to store the last TCP header received. */
 582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		LastTCPPacket_t xPacket;
 583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint8_t tcpflags;		/* TCP flags */
 584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP_WIN != 0 )
 585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucMyWinScaleFactor;
 586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint8_t ucPeerWinScaleFactor;
 587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif
 588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_CALLBACKS == 1 )
 589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			FOnTCPReceive_t pxHandleReceive;	/*
 590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 										 		 * In case of a TCP socket:
 591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 										 		 * typedef void (* FOnTCPReceive_t) (Socket_t xSocket, void *pData, size_t xLength );
 592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 										 		 */
 593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			FOnTCPSent_t pxHandleSent;
 594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			FOnConnected_t pxHandleConnected;	/* Actually type: typedef void (* FOnConnected_t) (Socket_t xS
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_CALLBACKS */
 596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t ulWindowSize;		/* Current Window size advertised by peer */
 597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		uint32_t ulRxCurWinSize;	/* Constantly changing: this is the current size available for data rece
 598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxRxWinSize;	/* Fixed value: size of the TCP reception window */
 599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		size_t uxTxWinSize;	/* Fixed value: size of the TCP transmit window */
 600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		TCPWindow_t xTCPWindow;
 602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} IPTCPSocket_t;
 603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif /* ipconfigUSE_TCP */
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct UDPSOCKET
 607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	List_t xWaitingPacketsList;	/* Incoming packets */
 609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#if( ipconfigUDP_MAX_RX_PACKETS > 0 )
 610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		UBaseType_t uxMaxPackets; /* Protection: limits the number of packets buffered per socket */
 611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#endif /* ipconfigUDP_MAX_RX_PACKETS */
 612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#if( ipconfigUSE_CALLBACKS == 1 )
 613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		FOnUDPReceive_t pxHandleReceive;	/*
 614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 											 * In case of a UDP socket:
 615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 											 * typedef void (* FOnUDPReceive_t) (Socket_t xSocket, void *pData, size_t xLength, stru
 616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 											 */
 617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		FOnUDPSent_t pxHandleSent;
 618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#endif /* ipconfigUSE_CALLBACKS */
 619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } IPUDPSocket_t;
 620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef enum eSOCKET_EVENT {
 622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_RECEIVE = 0x0001,
 623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_SEND    = 0x0002,
 624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_ACCEPT  = 0x0004,
 625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_CONNECT = 0x0008,
 626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_BOUND   = 0x0010,
 627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_CLOSED	= 0x0020,
 628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_INTR	= 0x0040,
 629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	eSOCKET_ALL		= 0x007F,
 630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } eSocketEvent_t;
 631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** typedef struct XSOCKET
 633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EventBits_t xEventBits;
 635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	EventGroupHandle_t xEventGroup;
 636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
ARM GAS  /tmp/ccRjHDdd.s 			page 17


 637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	ListItem_t xBoundSocketListItem; /* Used to reference the socket from a bound sockets list. */
 638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TickType_t xReceiveBlockTime; /* if recv[to] is called while no data is available, wait this amoun
 639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	TickType_t xSendBlockTime; /* if send[to] is called while there is not enough space to send, wait 
 640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint16_t usLocalPort;		/* Local port on this machine */
 642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucSocketOptions;
 643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol; /* choice of FREERTOS_IPPROTO_UDP/TCP */
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#if( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
 645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		SemaphoreHandle_t pxUserSemaphore;
 646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
 647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		struct xSOCKET_SET *pxSocketSet;
 649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		/* User may indicate which bits are interesting for this socket. */
 650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		EventBits_t xSelectBits;
 651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		/* These bits indicate the events which have actually occurred.
 652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		They are maintained by the IP-task */
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		EventBits_t xSocketBits;
 654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
 655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* TCP/UDP specific fields: */
 656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* Before accessing any member of this structure, it should be confirmed */
 657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/* that the protocol corresponds with the type of structure */
 658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	union
 660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	{
 661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		IPUDPSocket_t xUDP;
 662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP == 1 )
 663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			IPTCPSocket_t xTCP;
 664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			/* Make sure that xTCP is 8-bytes aligned by
 665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			declaring a 64-bit variable in the same union */
 666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			uint64_t ullTCPAlignment;
 667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_TCP */
 668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	} u;
 669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** } FreeRTOS_Socket_t;
 670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
 672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	/*
 673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * Lookup a TCP socket, using a multiple matching: both port numbers and
 674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 * return IP address.
 675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	 */
 676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemo
 677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** #endif /* ipconfigUSE_TCP */
 679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Look up a local socket by finding a match with the local port.
 682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort );
 684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Called when the application has generated a UDP packet to send.
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer );
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Calculate the upper-layer checksum
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Works both for UDP, ICMP and TCP packages
 693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * bOut = true: checksum will be set in outgoing packets
ARM GAS  /tmp/ccRjHDdd.s 			page 18


 694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * bOut = false: checksum will be calculated for incoming packets
 695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  *     returning 0xffff means: checksum was correct
 696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, BaseType_t xOutgoingP
 698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * An Ethernet frame has been updated (maybe it was an ARP request or a PING
 701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * request?) and is to be sent back to its source.
 702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSen
 704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The internal version of bind()
 707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * If 'ulInternal' is true, it is called by the driver
 708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * The TCP driver needs to bind a socket at the moment a listening socket
 709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * creates a new connected socket
 710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t u
 712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Internal function to add streaming data to a TCP socket. If ulIn == true,
 715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * data will be added to the rxStream, otherwise to the tXStream.  Normally data
 716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * will be written with ulOffset == 0, meaning: at the end of the FIFO.  When
 717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * packet come in out-of-order, an offset will be used to put it in front and
 718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * the head will not change yet.
 719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** int32_t lTCPAddRxdata(FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t
 721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Currently called for any important event.
 724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket );
 726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** /*
 728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  * Some helping function, their meaning should be clear
 729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h ****  */
 730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** static portINLINE uint32_t ulChar2u32 (const uint8_t *apChr);
 731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** static portINLINE uint32_t ulChar2u32 (const uint8_t *apChr)
 732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[1] ) << 16) |
 735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[2] ) << 8) |
 736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[3] ) );
 737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 
 739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
 740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
 741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** {
  75              		.loc 2 741 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80 0000 80B4     		push	{r7}
  81              	.LCFI6:
  82              		.cfi_def_cfa_offset 4
  83              		.cfi_offset 7, -4
ARM GAS  /tmp/ccRjHDdd.s 			page 19


  84 0002 83B0     		sub	sp, sp, #12
  85              	.LCFI7:
  86              		.cfi_def_cfa_offset 16
  87 0004 00AF     		add	r7, sp, #0
  88              	.LCFI8:
  89              		.cfi_def_cfa_register 7
  90 0006 7860     		str	r0, [r7, #4]
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return ( uint16_t )
 743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			( ( ( ( uint32_t )apChr[0] ) << 8) |
  91              		.loc 2 743 0
  92 0008 7B68     		ldr	r3, [r7, #4]
  93 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return ( uint16_t )
  94              		.loc 2 742 0
  95 000c 9BB2     		uxth	r3, r3
  96 000e 1B02     		lsls	r3, r3, #8
  97 0010 9AB2     		uxth	r2, r3
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 			  ( ( ( uint32_t )apChr[1] ) ) );
  98              		.loc 2 744 0
  99 0012 7B68     		ldr	r3, [r7, #4]
 100 0014 0133     		adds	r3, r3, #1
 101 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** 	return ( uint16_t )
 102              		.loc 2 742 0
 103 0018 9BB2     		uxth	r3, r3
 104 001a 1343     		orrs	r3, r3, r2
 105 001c 9BB2     		uxth	r3, r3
 745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h **** }
 106              		.loc 2 745 0
 107 001e 1846     		mov	r0, r3
 108 0020 0C37     		adds	r7, r7, #12
 109              	.LCFI9:
 110              		.cfi_def_cfa_offset 4
 111 0022 BD46     		mov	sp, r7
 112              	.LCFI10:
 113              		.cfi_def_cfa_register 13
 114              		@ sp needed
 115 0024 5DF8047B 		ldr	r7, [sp], #4
 116              	.LCFI11:
 117              		.cfi_restore 7
 118              		.cfi_def_cfa_offset 0
 119 0028 7047     		bx	lr
 120              		.cfi_endproc
 121              	.LFE28:
 123 002a 00BF     		.section	.bss.xDNSCache,"aw",%nobits
 124              		.align	2
 127              	xDNSCache:
 128 0000 00000000 		.space	96
 128      00000000 
 128      00000000 
 128      00000000 
 128      00000000 
 129              		.global	xLLMNR_MacAdress
 130              		.section	.rodata.xLLMNR_MacAdress,"a",%progbits
 131              		.align	2
 134              	xLLMNR_MacAdress:
 135 0000 01       		.byte	1
ARM GAS  /tmp/ccRjHDdd.s 			page 20


 136 0001 00       		.byte	0
 137 0002 5E       		.byte	94
 138 0003 00       		.byte	0
 139 0004 00       		.byte	0
 140 0005 FC       		.byte	-4
 141              		.section	.text.FreeRTOS_dnslookup,"ax",%progbits
 142              		.align	2
 143              		.global	FreeRTOS_dnslookup
 144              		.thumb
 145              		.thumb_func
 147              	FreeRTOS_dnslookup:
 148              	.LFB29:
 149              		.file 3 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c"
   1:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*
   2:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
   3:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * Authors include Hein Tibosch and Richard Barry
   4:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *
   5:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *******************************************************************************
   6:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
   7:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***                                                                         ***
   8:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***                                                                         ***
   9:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
  10:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   demos have a dependency on FreeRTOS+FAT, which is only in the Labs    ***
  11:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   download):                                                            ***
  12:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***                                                                         ***
  13:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   FreeRTOS+TCP is functional and has been used in commercial products   ***
  14:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   for some time.  Be aware however that we are still refining its       ***
  15:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   design, the source code does not yet quite conform to the strict      ***
  16:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   coding and style standards mandated by Real Time Engineers ltd., and  ***
  17:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   the documentation and testing is not necessarily complete.            ***
  18:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***                                                                         ***
  19:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   PLEASE REPORT EXPERIENCES USING THE SUPPORT RESOURCES FOUND ON THE    ***
  20:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   URL: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
  21:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   the sole discretion of Real Time Engineers Ltd., be offered versions  ***
  22:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***   under a license other than that described below.                      ***
  23:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***                                                                         ***
  24:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***                                                                         ***
  25:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  ***** NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ******* NOTE ***
  26:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *******************************************************************************
  27:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *
  28:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * FreeRTOS+TCP can be used under two different free open source licenses.  The
  29:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * license that applies is dependent on the processor on which FreeRTOS+TCP is
  30:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * executed, as follows:
  31:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *
  32:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * If FreeRTOS+TCP is executed on one of the processors listed under the Special
  33:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * License Arrangements heading of the FreeRTOS+TCP license information web
  34:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * page, then it can be used under the terms of the FreeRTOS Open Source
  35:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * License.  If FreeRTOS+TCP is used on any other processor, then it can be used
  36:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * under the terms of the GNU General Public License V2.  Links to the relevant
  37:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * licenses follow:
  38:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *
  39:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.org/tcp_license
  40:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * The FreeRTOS Open Source License: http://www.FreeRTOS.org/license
  41:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.txt
  42:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *
  43:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * FreeRTOS+TCP is distributed in the hope that it will be useful.  You cannot
  44:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * use FreeRTOS+TCP unless you agree that you use the software 'as is'.
ARM GAS  /tmp/ccRjHDdd.s 			page 21


  45:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * FreeRTOS+TCP is provided WITHOUT ANY WARRANTY; without even the implied
  46:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * warranties of NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
  47:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * PURPOSE. Real Time Engineers Ltd. disclaims all conditions and terms, be they
  48:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * implied, expressed, or statutory.
  49:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *
  50:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * 1 tab == 4 spaces!
  51:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *
  52:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * http://www.FreeRTOS.org
  53:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * http://www.FreeRTOS.org/plus
  54:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * http://www.FreeRTOS.org/labs
  55:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  *
  56:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  */
  57:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
  58:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* Standard includes. */
  59:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include <stdint.h>
  60:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
  61:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* FreeRTOS includes. */
  62:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "FreeRTOS.h"
  63:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "task.h"
  64:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "queue.h"
  65:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "list.h"
  66:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "semphr.h"
  67:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
  68:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* FreeRTOS+TCP includes. */
  69:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "FreeRTOS_IP.h"
  70:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "FreeRTOS_Sockets.h"
  71:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "FreeRTOS_IP_Private.h"
  72:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "FreeRTOS_UDP_IP.h"
  73:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "FreeRTOS_DNS.h"
  74:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "NetworkBufferManagement.h"
  75:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "NetworkInterface.h"
  76:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "IPTraceMacroDefaults.h"
  77:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
  78:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* Exclude the entire file if DNS is not enabled. */
  79:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_DNS != 0 )
  80:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
  81:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
  82:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsDNS_PORT						0x3500
  83:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsONE_QUESTION					0x0100
  84:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsOUTGOING_FLAGS				0x0001 /* Standard query. */
  85:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsRX_FLAGS_MASK				0x0f80 /* The bits of interest in the flags field of incoming DNS mess
  86:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsEXPECTED_RX_FLAGS			0x0080 /* Should be a response, without any errors. */
  87:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #else
  88:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsDNS_PORT						0x0035
  89:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsONE_QUESTION					0x0001
  90:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsOUTGOING_FLAGS				0x0100 /* Standard query. */
  91:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsRX_FLAGS_MASK				0x800f /* The bits of interest in the flags field of incoming DNS mess
  92:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define dnsEXPECTED_RX_FLAGS			0x8000 /* Should be a response, without any errors. */
  93:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
  94:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigBYTE_ORDER */
  95:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
  96:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* The maximum number of times a DNS request should be sent out if a response
  97:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** is not received, before giving up. */
  98:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #ifndef ipconfigDNS_REQUEST_ATTEMPTS
  99:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#define ipconfigDNS_REQUEST_ATTEMPTS		5
 100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif
 101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
ARM GAS  /tmp/ccRjHDdd.s 			page 22


 102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* If the top two bits in the first character of a name field are set then the
 103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** name field is an offset to the string, rather than the string itself. */
 104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNAME_IS_OFFSET					( ( uint8_t ) 0xc0 )
 105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* NBNS flags. */
 107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_FLAGS_RESPONSE				0x8000
 108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_FLAGS_OPCODE_MASK			0x7800
 109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_FLAGS_OPCODE_QUERY			0x0000
 110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_FLAGS_OPCODE_REGISTRATION	0x2800
 111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* Host types. */
 113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsTYPE_A_HOST						0x01
 114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsCLASS_IN							0x01
 115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* LLMNR constants. */
 117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsLLMNR_TTL_VALUE					300000
 118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsLLMNR_FLAGS_IS_REPONSE  			0x8000
 119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* NBNS constants. */
 121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_TTL_VALUE					3600 /* 1 hour valid */
 122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_TYPE_NET_BIOS				0x0020
 123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_CLASS_IN					0x01
 124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_NAME_FLAGS					0x6000
 125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_ENCODED_NAME_LENGTH			32
 126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* If the queried NBNS name matches with the device's name,
 128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** the query will be responded to with these flags: */
 129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #define dnsNBNS_QUERY_RESPONSE_FLAGS	( 0x8500 )
 130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*
 132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * Create a socket and bind it to the standard DNS port number.  Return the
 133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * the created socket - or NULL if the socket could not be created or bound.
 134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  */
 135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static Socket_t prvCreateDNSSocket( void );
 136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*
 138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * Create the DNS message in the zero copy buffer passed in the first parameter.
 139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  */
 140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static size_t prvCreateDNSMessage( uint8_t *pucUDPPayloadBuffer, const char *pcHostName, TickType_t
 141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*
 143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * Simple routine that jumps over the NAME field of a resource record.
 144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  */
 145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static uint8_t *prvSkipNameField( uint8_t *pucByte );
 146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*
 148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * Process a response packet from a DNS server.
 149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  */
 150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, TickType_t xIdentifier );
 151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*
 153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * Prepare and send a message to a DNS server.  'xReadTimeOut_ms' will be passed as
 154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * zero, in case the user has supplied a call-back function.
 155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  */
 156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static uint32_t prvGetHostByName( const char *pcHostName, TickType_t xIdentifier, TickType_t xReadT
 157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*
ARM GAS  /tmp/ccRjHDdd.s 			page 23


 159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  * The NBNS and the LLMNR protocol share this reply function.
 160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  */
 161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ( ipconfigUSE_NBNS == 1 ) || ( ipconfigUSE_LLMNR == 1 ) )
 162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void prvReplyDNSMessage( NetworkBufferDescriptor_t *pxNetworkBuffer, BaseType_t lNetLength 
 163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif
 164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_NBNS == 1 )
 166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static portINLINE void prvTreatNBNS( uint8_t *pucUDPPayloadBuffer, uint32_t ulIPAddress );
 167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_NBNS */
 168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_DNS_CACHE == 1 )
 170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static uint8_t *prvReadNameField( uint8_t *pucByte, char *pcName, BaseType_t xLen );
 171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, BaseType_t xLookUp );
 172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	typedef struct xDNS_CACHE_TABLE_ROW
 174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint32_t ulIPAddress;		/* The IP address of an ARP cache entry. */
 176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		char pcName[ipconfigDNS_CACHE_NAME_LENGTH];  /* The name of the host */
 177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t ucAge;				/* A value that is periodically decremented but can also be refreshed by active
 178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	} DNSCacheRow_t;
 179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static DNSCacheRow_t xDNSCache[ ipconfigDNS_CACHE_ENTRIES ];
 181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_DNS_CACHE == 1 */
 182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_LLMNR == 1 )
 184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	const MACAddress_t xLLMNR_MacAdress = { { 0x01, 0x00, 0x5e, 0x00, 0x00, 0xfc } };
 185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif	/* ipconfigUSE_LLMNR == 1 */
 186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "pack_struct_start.h"
 190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** struct xDNSMessage
 191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usIdentifier;
 193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usFlags;
 194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usQuestions;
 195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usAnswers;
 196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usAuthorityRRs;
 197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usAdditionalRRs;
 198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "pack_struct_end.h"
 200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** typedef struct xDNSMessage DNSMessage_t;
 201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* A DNS query consists of a header, as described in 'struct xDNSMessage'
 203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** It is followed by 1 or more queries, each one consisting of a name and a tail,
 204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** with two fields: type and class
 205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** */
 206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "pack_struct_start.h"
 207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** struct xDNSTail
 208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usType;
 210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usClass;
 211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #include "pack_struct_end.h"
 213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** typedef struct xDNSTail DNSTail_t;
 214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_LLMNR == 1 )
ARM GAS  /tmp/ccRjHDdd.s 			page 24


 216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#include "pack_struct_start.h"
 218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	struct xLLMNRAnswer
 219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t ucNameCode;
 221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t ucNameOffset;	/* The name is not repeated in the answer, only the offset is given with "0
 222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usType;
 223:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usClass;
 224:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint32_t ulTTL;
 225:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usDataLength;
 226:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint32_t ulIPAddress;
 227:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 228:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#include "pack_struct_end.h"
 229:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	typedef struct xLLMNRAnswer LLMNRAnswer_t;
 230:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 231:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_LLMNR == 1 */
 232:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 233:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_NBNS == 1 )
 234:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 235:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#include "pack_struct_start.h"
 236:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	struct xNBNSRequest
 237:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 238:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usRequestId;
 239:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usFlags;
 240:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t ulRequestCount;
 241:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usAnswerRSS;
 242:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usAuthRSS;
 243:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usAdditionalRSS;
 244:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t ucNameSpace;
 245:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t ucName[ dnsNBNS_ENCODED_NAME_LENGTH ];
 246:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t ucNameZero;
 247:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usType;
 248:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usClass;
 249:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 250:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#include "pack_struct_end.h"
 251:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	typedef struct xNBNSRequest NBNSRequest_t;
 252:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 253:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#include "pack_struct_start.h"
 254:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	struct xNBNSAnswer
 255:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 256:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usType;
 257:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usClass;
 258:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint32_t ulTTL;
 259:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usDataLength;
 260:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usNbFlags;		/* NetBIOS flags 0x6000 : IP-address, big-endian */
 261:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint32_t ulIPAddress;
 262:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 263:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#include "pack_struct_end.h"
 264:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	typedef struct xNBNSAnswer NBNSAnswer_t;
 265:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 266:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_NBNS == 1 */
 267:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 268:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 269:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 270:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_DNS_CACHE == 1 )
 271:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint32_t FreeRTOS_dnslookup( const char *pcHostName )
 272:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
ARM GAS  /tmp/ccRjHDdd.s 			page 25


 150              		.loc 3 272 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 16
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154 0000 80B5     		push	{r7, lr}
 155              	.LCFI12:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 0002 84B0     		sub	sp, sp, #16
 160              	.LCFI13:
 161              		.cfi_def_cfa_offset 24
 162 0004 00AF     		add	r7, sp, #0
 163              	.LCFI14:
 164              		.cfi_def_cfa_register 7
 165 0006 7860     		str	r0, [r7, #4]
 273:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint32_t ulIPAddress = 0UL;
 166              		.loc 3 273 0
 167 0008 0023     		movs	r3, #0
 168 000a FB60     		str	r3, [r7, #12]
 274:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		prvProcessDNSCache( pcHostName, &ulIPAddress, pdTRUE );
 169              		.loc 3 274 0
 170 000c 07F10C03 		add	r3, r7, #12
 171 0010 7868     		ldr	r0, [r7, #4]
 172 0012 1946     		mov	r1, r3
 173 0014 0122     		movs	r2, #1
 174 0016 FFF7FEFF 		bl	prvProcessDNSCache
 275:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		return ulIPAddress;
 175              		.loc 3 275 0
 176 001a FB68     		ldr	r3, [r7, #12]
 276:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 177              		.loc 3 276 0
 178 001c 1846     		mov	r0, r3
 179 001e 1037     		adds	r7, r7, #16
 180              	.LCFI15:
 181              		.cfi_def_cfa_offset 8
 182 0020 BD46     		mov	sp, r7
 183              	.LCFI16:
 184              		.cfi_def_cfa_register 13
 185              		@ sp needed
 186 0022 80BD     		pop	{r7, pc}
 187              		.cfi_endproc
 188              	.LFE29:
 190              		.section	.bss.xCallbackList,"aw",%nobits
 191              		.align	2
 194              	xCallbackList:
 195 0000 00000000 		.space	20
 195      00000000 
 195      00000000 
 195      00000000 
 195      00000000 
 196              		.section	.text.FreeRTOS_gethostbyname,"ax",%progbits
 197              		.align	2
 198              		.global	FreeRTOS_gethostbyname
 199              		.thumb
 200              		.thumb_func
 202              	FreeRTOS_gethostbyname:
ARM GAS  /tmp/ccRjHDdd.s 			page 26


 203              	.LFB30:
 277:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_DNS_CACHE == 1 */
 278:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 279:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 280:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigDNS_USE_CALLBACKS != 0 )
 281:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 282:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	typedef struct xDNS_Callback {
 283:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		TickType_t xRemaningTime;		/* Timeout in ms */
 284:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		FOnDNSEvent pCallbackFunction;	/* Function to be called when the address has been found or when a
 285:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		TimeOut_t xTimeoutState;
 286:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		void *pvSearchID;
 287:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		struct xLIST_ITEM xListItem;
 288:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		char pcName[ 1 ];
 289:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	} DNSCallback_t;
 290:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 291:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static List_t xCallbackList;
 292:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 293:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Define FreeRTOS_gethostbyname() as a normal blocking call. */
 294:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint32_t FreeRTOS_gethostbyname( const char *pcHostName )
 295:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 204              		.loc 3 295 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 8
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208 0000 80B5     		push	{r7, lr}
 209              	.LCFI17:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 0002 82B0     		sub	sp, sp, #8
 214              	.LCFI18:
 215              		.cfi_def_cfa_offset 16
 216 0004 00AF     		add	r7, sp, #0
 217              	.LCFI19:
 218              		.cfi_def_cfa_register 7
 219 0006 7860     		str	r0, [r7, #4]
 296:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		return FreeRTOS_gethostbyname_a( pcHostName, ( FOnDNSEvent ) NULL, ( void* )NULL, 0 );
 220              		.loc 3 296 0
 221 0008 7868     		ldr	r0, [r7, #4]
 222 000a 0021     		movs	r1, #0
 223 000c 0022     		movs	r2, #0
 224 000e 0023     		movs	r3, #0
 225 0010 FFF7FEFF 		bl	FreeRTOS_gethostbyname_a
 226 0014 0346     		mov	r3, r0
 297:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 227              		.loc 3 297 0
 228 0016 1846     		mov	r0, r3
 229 0018 0837     		adds	r7, r7, #8
 230              	.LCFI20:
 231              		.cfi_def_cfa_offset 8
 232 001a BD46     		mov	sp, r7
 233              	.LCFI21:
 234              		.cfi_def_cfa_register 13
 235              		@ sp needed
 236 001c 80BD     		pop	{r7, pc}
 237              		.cfi_endproc
 238              	.LFE30:
ARM GAS  /tmp/ccRjHDdd.s 			page 27


 240 001e 00BF     		.section	.text.vDNSInitialise,"ax",%progbits
 241              		.align	2
 242              		.global	vDNSInitialise
 243              		.thumb
 244              		.thumb_func
 246              	vDNSInitialise:
 247              	.LFB31:
 298:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/*-----------------------------------------------------------*/
 299:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 300:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Initialise the list of call-back structures. */
 301:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	void vDNSInitialise( void );
 302:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	void vDNSInitialise( void )
 303:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 248              		.loc 3 303 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252 0000 80B5     		push	{r7, lr}
 253              	.LCFI22:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 7, -8
 256              		.cfi_offset 14, -4
 257 0002 00AF     		add	r7, sp, #0
 258              	.LCFI23:
 259              		.cfi_def_cfa_register 7
 304:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		vListInitialise( &xCallbackList );
 260              		.loc 3 304 0
 261 0004 0148     		ldr	r0, .L10
 262 0006 FFF7FEFF 		bl	vListInitialise
 305:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 263              		.loc 3 305 0
 264 000a 80BD     		pop	{r7, pc}
 265              	.L11:
 266              		.align	2
 267              	.L10:
 268 000c 00000000 		.word	xCallbackList
 269              		.cfi_endproc
 270              	.LFE31:
 272              		.section	.text.vDNSCheckCallBack,"ax",%progbits
 273              		.align	2
 274              		.global	vDNSCheckCallBack
 275              		.thumb
 276              		.thumb_func
 278              	vDNSCheckCallBack:
 279              	.LFB32:
 306:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/*-----------------------------------------------------------*/
 307:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 308:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Iterate through the list of call-back structures and remove
 309:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	old entries which have reached a timeout.
 310:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	As soon as the list hase become empty, the DNS timer will be stopped
 311:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	In case pvSearchID is supplied, the user wants to cancel a DNS request
 312:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	*/
 313:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	void vDNSCheckCallBack( void *pvSearchID );
 314:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	void vDNSCheckCallBack( void *pvSearchID )
 315:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 280              		.loc 3 315 0
 281              		.cfi_startproc
ARM GAS  /tmp/ccRjHDdd.s 			page 28


 282              		@ args = 0, pretend = 0, frame = 24
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284 0000 80B5     		push	{r7, lr}
 285              	.LCFI24:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
 289 0002 86B0     		sub	sp, sp, #24
 290              	.LCFI25:
 291              		.cfi_def_cfa_offset 32
 292 0004 00AF     		add	r7, sp, #0
 293              	.LCFI26:
 294              		.cfi_def_cfa_register 7
 295 0006 7860     		str	r0, [r7, #4]
 316:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	const ListItem_t *pxIterator;
 317:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 296              		.loc 3 317 0
 297 0008 264B     		ldr	r3, .L17
 298 000a 3B61     		str	r3, [r7, #16]
 318:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 319:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		vTaskSuspendAll();
 299              		.loc 3 319 0
 300 000c FFF7FEFF 		bl	vTaskSuspendAll
 320:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 301              		.loc 3 321 0
 302 0010 3B69     		ldr	r3, [r7, #16]
 303 0012 5B68     		ldr	r3, [r3, #4]
 304 0014 7B61     		str	r3, [r7, #20]
 305 0016 34E0     		b	.L13
 306              	.L15:
 307              	.LBB2:
 322:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				 pxIterator != ( const ListItem_t * ) xEnd;
 323:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				  )
 324:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 325:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 308              		.loc 3 325 0
 309 0018 7B69     		ldr	r3, [r7, #20]
 310 001a DB68     		ldr	r3, [r3, #12]
 311 001c FB60     		str	r3, [r7, #12]
 326:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Move to the next item because we might remove this item */
 327:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 312              		.loc 3 327 0
 313 001e 7B69     		ldr	r3, [r7, #20]
 314 0020 5B68     		ldr	r3, [r3, #4]
 315 0022 7B61     		str	r3, [r7, #20]
 328:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 316              		.loc 3 328 0
 317 0024 7B68     		ldr	r3, [r7, #4]
 318 0026 002B     		cmp	r3, #0
 319 0028 0DD0     		beq	.L14
 320              		.loc 3 328 0 is_stmt 0 discriminator 1
 321 002a FB68     		ldr	r3, [r7, #12]
 322 002c 1A69     		ldr	r2, [r3, #16]
 323 002e 7B68     		ldr	r3, [r7, #4]
 324 0030 9A42     		cmp	r2, r3
 325 0032 08D1     		bne	.L14
ARM GAS  /tmp/ccRjHDdd.s 			page 29


 329:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 330:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					uxListRemove( &pxCallback->xListItem );
 326              		.loc 3 330 0 is_stmt 1
 327 0034 FB68     		ldr	r3, [r7, #12]
 328 0036 1433     		adds	r3, r3, #20
 329 0038 1846     		mov	r0, r3
 330 003a FFF7FEFF 		bl	uxListRemove
 331:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vPortFree( pxCallback );
 331              		.loc 3 331 0
 332 003e F868     		ldr	r0, [r7, #12]
 333 0040 FFF7FEFF 		bl	vPortFree
 334 0044 1DE0     		b	.L13
 335              	.L14:
 332:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 333:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				else if( xTaskCheckForTimeOut( &pxCallback->xTimeoutState, &pxCallback->xRemaningTime ) != pdFA
 336              		.loc 3 333 0
 337 0046 FB68     		ldr	r3, [r7, #12]
 338 0048 03F10802 		add	r2, r3, #8
 339 004c FB68     		ldr	r3, [r7, #12]
 340 004e 1046     		mov	r0, r2
 341 0050 1946     		mov	r1, r3
 342 0052 FFF7FEFF 		bl	xTaskCheckForTimeOut
 343 0056 0346     		mov	r3, r0
 344 0058 002B     		cmp	r3, #0
 345 005a 12D0     		beq	.L13
 334:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 335:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0 );
 346              		.loc 3 335 0
 347 005c FB68     		ldr	r3, [r7, #12]
 348 005e 5B68     		ldr	r3, [r3, #4]
 349 0060 FA68     		ldr	r2, [r7, #12]
 350 0062 02F12801 		add	r1, r2, #40
 351 0066 FA68     		ldr	r2, [r7, #12]
 352 0068 1269     		ldr	r2, [r2, #16]
 353 006a 0846     		mov	r0, r1
 354 006c 1146     		mov	r1, r2
 355 006e 0022     		movs	r2, #0
 356 0070 9847     		blx	r3
 336:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					uxListRemove( &pxCallback->xListItem );
 357              		.loc 3 336 0
 358 0072 FB68     		ldr	r3, [r7, #12]
 359 0074 1433     		adds	r3, r3, #20
 360 0076 1846     		mov	r0, r3
 361 0078 FFF7FEFF 		bl	uxListRemove
 337:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vPortFree( ( void * ) pxCallback );
 362              		.loc 3 337 0
 363 007c F868     		ldr	r0, [r7, #12]
 364 007e FFF7FEFF 		bl	vPortFree
 365              	.L13:
 366              	.LBE2:
 321:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				 pxIterator != ( const ListItem_t * ) xEnd;
 367              		.loc 3 321 0 discriminator 1
 368 0082 7A69     		ldr	r2, [r7, #20]
 369 0084 3B69     		ldr	r3, [r7, #16]
 370 0086 9A42     		cmp	r2, r3
 371 0088 C6D1     		bne	.L15
 338:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
ARM GAS  /tmp/ccRjHDdd.s 			page 30


 339:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 340:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 341:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		xTaskResumeAll();
 372              		.loc 3 341 0
 373 008a FFF7FEFF 		bl	xTaskResumeAll
 342:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 343:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( listLIST_IS_EMPTY( &xCallbackList ) )
 374              		.loc 3 343 0
 375 008e 064B     		ldr	r3, .L17+4
 376 0090 1B68     		ldr	r3, [r3]
 377 0092 002B     		cmp	r3, #0
 378 0094 02D1     		bne	.L12
 344:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 345:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			vIPSetDnsTimerEnableState( pdFALSE );
 379              		.loc 3 345 0
 380 0096 0020     		movs	r0, #0
 381 0098 FFF7FEFF 		bl	vIPSetDnsTimerEnableState
 382              	.L12:
 346:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 347:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 383              		.loc 3 347 0
 384 009c 1837     		adds	r7, r7, #24
 385              	.LCFI27:
 386              		.cfi_def_cfa_offset 8
 387 009e BD46     		mov	sp, r7
 388              	.LCFI28:
 389              		.cfi_def_cfa_register 13
 390              		@ sp needed
 391 00a0 80BD     		pop	{r7, pc}
 392              	.L18:
 393 00a2 00BF     		.align	2
 394              	.L17:
 395 00a4 08000000 		.word	xCallbackList+8
 396 00a8 00000000 		.word	xCallbackList
 397              		.cfi_endproc
 398              	.LFE32:
 400              		.section	.text.FreeRTOS_gethostbyname_cancel,"ax",%progbits
 401              		.align	2
 402              		.global	FreeRTOS_gethostbyname_cancel
 403              		.thumb
 404              		.thumb_func
 406              	FreeRTOS_gethostbyname_cancel:
 407              	.LFB33:
 348:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/*-----------------------------------------------------------*/
 349:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 350:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	void FreeRTOS_gethostbyname_cancel( void *pvSearchID )
 351:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 408              		.loc 3 351 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 8
 411              		@ frame_needed = 1, uses_anonymous_args = 0
 412 0000 80B5     		push	{r7, lr}
 413              	.LCFI29:
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 7, -8
 416              		.cfi_offset 14, -4
 417 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccRjHDdd.s 			page 31


 418              	.LCFI30:
 419              		.cfi_def_cfa_offset 16
 420 0004 00AF     		add	r7, sp, #0
 421              	.LCFI31:
 422              		.cfi_def_cfa_register 7
 423 0006 7860     		str	r0, [r7, #4]
 352:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* _HT_ Should better become a new API call to have the IP-task remove the callback */
 353:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		vDNSCheckCallBack( pvSearchID );
 424              		.loc 3 353 0
 425 0008 7868     		ldr	r0, [r7, #4]
 426 000a FFF7FEFF 		bl	vDNSCheckCallBack
 354:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 427              		.loc 3 354 0
 428 000e 0837     		adds	r7, r7, #8
 429              	.LCFI32:
 430              		.cfi_def_cfa_offset 8
 431 0010 BD46     		mov	sp, r7
 432              	.LCFI33:
 433              		.cfi_def_cfa_register 13
 434              		@ sp needed
 435 0012 80BD     		pop	{r7, pc}
 436              		.cfi_endproc
 437              	.LFE33:
 439              		.section	.text.vDNSSetCallBack,"ax",%progbits
 440              		.align	2
 441              		.thumb
 442              		.thumb_func
 444              	vDNSSetCallBack:
 445              	.LFB34:
 355:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/*-----------------------------------------------------------*/
 356:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 357:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* FreeRTOS_gethostbyname_a() was called along with callback parameters.
 358:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	Store them in a list for later reference. */
 359:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void vDNSSetCallBack( const char *pcHostName, void *pvSearchID, FOnDNSEvent pCallbackFuncti
 360:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void vDNSSetCallBack( const char *pcHostName, void *pvSearchID, FOnDNSEvent pCallbackFuncti
 361:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 446              		.loc 3 361 0
 447              		.cfi_startproc
 448              		@ args = 4, pretend = 0, frame = 24
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450 0000 80B5     		push	{r7, lr}
 451              	.LCFI34:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 0002 86B0     		sub	sp, sp, #24
 456              	.LCFI35:
 457              		.cfi_def_cfa_offset 32
 458 0004 00AF     		add	r7, sp, #0
 459              	.LCFI36:
 460              		.cfi_def_cfa_register 7
 461 0006 F860     		str	r0, [r7, #12]
 462 0008 B960     		str	r1, [r7, #8]
 463 000a 7A60     		str	r2, [r7, #4]
 464 000c 3B60     		str	r3, [r7]
 362:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		size_t lLength = strlen( pcHostName );
 465              		.loc 3 362 0
ARM GAS  /tmp/ccRjHDdd.s 			page 32


 466 000e F868     		ldr	r0, [r7, #12]
 467 0010 FFF7FEFF 		bl	strlen
 468 0014 7861     		str	r0, [r7, #20]
 363:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		DNSCallback_t *pxCallback = ( DNSCallback_t * )pvPortMalloc( sizeof( *pxCallback ) + lLength );
 469              		.loc 3 363 0
 470 0016 7B69     		ldr	r3, [r7, #20]
 471 0018 2C33     		adds	r3, r3, #44
 472 001a 1846     		mov	r0, r3
 473 001c FFF7FEFF 		bl	pvPortMalloc
 474 0020 3861     		str	r0, [r7, #16]
 364:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 365:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Translate from ms to number of clock ticks. */
 366:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		xTimeout /= portTICK_PERIOD_MS;
 367:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( pxCallback != NULL )
 475              		.loc 3 367 0
 476 0022 3B69     		ldr	r3, [r7, #16]
 477 0024 002B     		cmp	r3, #0
 478 0026 30D0     		beq	.L20
 368:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 369:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( listLIST_IS_EMPTY( &xCallbackList ) )
 479              		.loc 3 369 0
 480 0028 194B     		ldr	r3, .L23
 481 002a 1B68     		ldr	r3, [r3]
 482 002c 002B     		cmp	r3, #0
 483 002e 08D1     		bne	.L22
 370:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 371:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* This is the first one, start the DNS timer to check for timeouts */
 372:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				vIPReloadDNSTimer( FreeRTOS_min_uint32( 1000U, xTimeout ) );
 484              		.loc 3 372 0
 485 0030 4FF47A70 		mov	r0, #1000
 486 0034 3968     		ldr	r1, [r7]
 487 0036 FFF7FEFF 		bl	FreeRTOS_min_uint32
 488 003a 0346     		mov	r3, r0
 489 003c 1846     		mov	r0, r3
 490 003e FFF7FEFF 		bl	vIPReloadDNSTimer
 491              	.L22:
 373:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 374:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			strcpy( pxCallback->pcName, pcHostName );
 492              		.loc 3 374 0
 493 0042 3B69     		ldr	r3, [r7, #16]
 494 0044 2833     		adds	r3, r3, #40
 495 0046 1846     		mov	r0, r3
 496 0048 F968     		ldr	r1, [r7, #12]
 497 004a FFF7FEFF 		bl	strcpy
 375:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pxCallback->pCallbackFunction = pCallbackFunction;
 498              		.loc 3 375 0
 499 004e 3B69     		ldr	r3, [r7, #16]
 500 0050 7A68     		ldr	r2, [r7, #4]
 501 0052 5A60     		str	r2, [r3, #4]
 376:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pxCallback->pvSearchID = pvSearchID;
 502              		.loc 3 376 0
 503 0054 3B69     		ldr	r3, [r7, #16]
 504 0056 BA68     		ldr	r2, [r7, #8]
 505 0058 1A61     		str	r2, [r3, #16]
 377:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pxCallback->xRemaningTime = xTimeout;
 506              		.loc 3 377 0
 507 005a 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccRjHDdd.s 			page 33


 508 005c 3A68     		ldr	r2, [r7]
 509 005e 1A60     		str	r2, [r3]
 378:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			vTaskSetTimeOutState( &pxCallback->xTimeoutState );
 510              		.loc 3 378 0
 511 0060 3B69     		ldr	r3, [r7, #16]
 512 0062 0833     		adds	r3, r3, #8
 513 0064 1846     		mov	r0, r3
 514 0066 FFF7FEFF 		bl	vTaskSetTimeOutState
 379:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			listSET_LIST_ITEM_OWNER( &( pxCallback->xListItem ), ( void* ) pxCallback );
 515              		.loc 3 379 0
 516 006a 3B69     		ldr	r3, [r7, #16]
 517 006c 3A69     		ldr	r2, [r7, #16]
 518 006e 1A62     		str	r2, [r3, #32]
 380:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			listSET_LIST_ITEM_VALUE( &( pxCallback->xListItem ), xIdentifier );
 519              		.loc 3 380 0
 520 0070 3B69     		ldr	r3, [r7, #16]
 521 0072 3A6A     		ldr	r2, [r7, #32]
 522 0074 5A61     		str	r2, [r3, #20]
 381:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			vTaskSuspendAll();
 523              		.loc 3 381 0
 524 0076 FFF7FEFF 		bl	vTaskSuspendAll
 382:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 383:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				vListInsertEnd( &xCallbackList, &pxCallback->xListItem );
 525              		.loc 3 383 0
 526 007a 3B69     		ldr	r3, [r7, #16]
 527 007c 1433     		adds	r3, r3, #20
 528 007e 0448     		ldr	r0, .L23
 529 0080 1946     		mov	r1, r3
 530 0082 FFF7FEFF 		bl	vListInsertEnd
 384:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 385:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			xTaskResumeAll();
 531              		.loc 3 385 0
 532 0086 FFF7FEFF 		bl	xTaskResumeAll
 533              	.L20:
 386:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 387:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 534              		.loc 3 387 0
 535 008a 1837     		adds	r7, r7, #24
 536              	.LCFI37:
 537              		.cfi_def_cfa_offset 8
 538 008c BD46     		mov	sp, r7
 539              	.LCFI38:
 540              		.cfi_def_cfa_register 13
 541              		@ sp needed
 542 008e 80BD     		pop	{r7, pc}
 543              	.L24:
 544              		.align	2
 545              	.L23:
 546 0090 00000000 		.word	xCallbackList
 547              		.cfi_endproc
 548              	.LFE34:
 550              		.section	.text.vDNSDoCallback,"ax",%progbits
 551              		.align	2
 552              		.thumb
 553              		.thumb_func
 555              	vDNSDoCallback:
 556              	.LFB35:
ARM GAS  /tmp/ccRjHDdd.s 			page 34


 388:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/*-----------------------------------------------------------*/
 389:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 390:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* A DNS reply was received, see if there is any matching entry and
 391:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	call the handler. */
 392:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress );
 393:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress )
 394:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 557              		.loc 3 394 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 32
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561 0000 80B5     		push	{r7, lr}
 562              	.LCFI39:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 88B0     		sub	sp, sp, #32
 567              	.LCFI40:
 568              		.cfi_def_cfa_offset 40
 569 0004 00AF     		add	r7, sp, #0
 570              	.LCFI41:
 571              		.cfi_def_cfa_register 7
 572 0006 F860     		str	r0, [r7, #12]
 573 0008 B960     		str	r1, [r7, #8]
 574 000a 7A60     		str	r2, [r7, #4]
 395:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		const ListItem_t *pxIterator;
 396:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 575              		.loc 3 396 0
 576 000c 1A4B     		ldr	r3, .L31
 577 000e BB61     		str	r3, [r7, #24]
 397:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 398:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		vTaskSuspendAll();
 578              		.loc 3 398 0
 579 0010 FFF7FEFF 		bl	vTaskSuspendAll
 399:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 580              		.loc 3 400 0
 581 0014 BB69     		ldr	r3, [r7, #24]
 582 0016 5B68     		ldr	r3, [r3, #4]
 583 0018 FB61     		str	r3, [r7, #28]
 584 001a 23E0     		b	.L26
 585              	.L30:
 401:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				 pxIterator != ( const ListItem_t * ) xEnd;
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 403:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 404:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( listGET_LIST_ITEM_VALUE( pxIterator ) == xIdentifier )
 586              		.loc 3 404 0
 587 001c FB69     		ldr	r3, [r7, #28]
 588 001e 1A68     		ldr	r2, [r3]
 589 0020 FB68     		ldr	r3, [r7, #12]
 590 0022 9A42     		cmp	r2, r3
 591 0024 1BD1     		bne	.L27
 592              	.LBB3:
 405:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 406:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 593              		.loc 3 406 0
 594 0026 FB69     		ldr	r3, [r7, #28]
ARM GAS  /tmp/ccRjHDdd.s 			page 35


 595 0028 DB68     		ldr	r3, [r3, #12]
 596 002a 7B61     		str	r3, [r7, #20]
 407:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxCallback->pCallbackFunction( pcName, pxCallback->pvSearchID, ulIPAddress );
 597              		.loc 3 407 0
 598 002c 7B69     		ldr	r3, [r7, #20]
 599 002e 5B68     		ldr	r3, [r3, #4]
 600 0030 7A69     		ldr	r2, [r7, #20]
 601 0032 1269     		ldr	r2, [r2, #16]
 602 0034 B868     		ldr	r0, [r7, #8]
 603 0036 1146     		mov	r1, r2
 604 0038 7A68     		ldr	r2, [r7, #4]
 605 003a 9847     		blx	r3
 408:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					uxListRemove( &pxCallback->xListItem );
 606              		.loc 3 408 0
 607 003c 7B69     		ldr	r3, [r7, #20]
 608 003e 1433     		adds	r3, r3, #20
 609 0040 1846     		mov	r0, r3
 610 0042 FFF7FEFF 		bl	uxListRemove
 409:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vPortFree( pxCallback );
 611              		.loc 3 409 0
 612 0046 7869     		ldr	r0, [r7, #20]
 613 0048 FFF7FEFF 		bl	vPortFree
 410:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					if( listLIST_IS_EMPTY( &xCallbackList ) )
 614              		.loc 3 410 0
 615 004c 0B4B     		ldr	r3, .L31+4
 616 004e 1B68     		ldr	r3, [r3]
 617 0050 002B     		cmp	r3, #0
 618 0052 03D1     		bne	.L28
 411:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					{
 412:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						vIPSetDnsTimerEnableState( pdFALSE );
 619              		.loc 3 412 0
 620 0054 0020     		movs	r0, #0
 621 0056 FFF7FEFF 		bl	vIPSetDnsTimerEnableState
 413:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					}
 414:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					break;
 622              		.loc 3 414 0
 623 005a 07E0     		b	.L29
 624              	.L28:
 625 005c 06E0     		b	.L29
 626              	.L27:
 627              	.LBE3:
 402:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 628              		.loc 3 402 0
 629 005e FB69     		ldr	r3, [r7, #28]
 630 0060 5B68     		ldr	r3, [r3, #4]
 631 0062 FB61     		str	r3, [r7, #28]
 632              	.L26:
 400:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				 pxIterator != ( const ListItem_t * ) xEnd;
 633              		.loc 3 400 0 discriminator 1
 634 0064 FA69     		ldr	r2, [r7, #28]
 635 0066 BB69     		ldr	r3, [r7, #24]
 636 0068 9A42     		cmp	r2, r3
 637 006a D7D1     		bne	.L30
 638              	.L29:
 415:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 416:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 417:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
ARM GAS  /tmp/ccRjHDdd.s 			page 36


 418:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		xTaskResumeAll();
 639              		.loc 3 418 0
 640 006c FFF7FEFF 		bl	xTaskResumeAll
 419:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 641              		.loc 3 419 0
 642 0070 2037     		adds	r7, r7, #32
 643              	.LCFI42:
 644              		.cfi_def_cfa_offset 8
 645 0072 BD46     		mov	sp, r7
 646              	.LCFI43:
 647              		.cfi_def_cfa_register 13
 648              		@ sp needed
 649 0074 80BD     		pop	{r7, pc}
 650              	.L32:
 651 0076 00BF     		.align	2
 652              	.L31:
 653 0078 08000000 		.word	xCallbackList+8
 654 007c 00000000 		.word	xCallbackList
 655              		.cfi_endproc
 656              	.LFE35:
 658              		.section	.text.FreeRTOS_gethostbyname_a,"ax",%progbits
 659              		.align	2
 660              		.global	FreeRTOS_gethostbyname_a
 661              		.thumb
 662              		.thumb_func
 664              	FreeRTOS_gethostbyname_a:
 665              	.LFB36:
 420:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 421:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif	/* ipconfigDNS_USE_CALLBACKS != 0 */
 422:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 423:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 424:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigDNS_USE_CALLBACKS == 0 )
 425:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint32_t FreeRTOS_gethostbyname( const char *pcHostName )
 426:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #else
 427:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint32_t FreeRTOS_gethostbyname_a( const char *pcHostName, FOnDNSEvent pCallback, void *pvSearchID,
 428:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif
 429:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 666              		.loc 3 429 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 32
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670 0000 80B5     		push	{r7, lr}
 671              	.LCFI44:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 7, -8
 674              		.cfi_offset 14, -4
 675 0002 8AB0     		sub	sp, sp, #40
 676              	.LCFI45:
 677              		.cfi_def_cfa_offset 48
 678 0004 02AF     		add	r7, sp, #8
 679              	.LCFI46:
 680              		.cfi_def_cfa 7, 40
 681 0006 F860     		str	r0, [r7, #12]
 682 0008 B960     		str	r1, [r7, #8]
 683 000a 7A60     		str	r2, [r7, #4]
 684 000c 3B60     		str	r3, [r7]
 430:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint32_t ulIPAddress = 0UL;
ARM GAS  /tmp/ccRjHDdd.s 			page 37


 685              		.loc 3 430 0
 686 000e 0023     		movs	r3, #0
 687 0010 FB61     		str	r3, [r7, #28]
 431:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static uint16_t usIdentifier = 0u;
 432:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** TickType_t xReadTimeOut_ms = 1200U;
 688              		.loc 3 432 0
 689 0012 4FF49663 		mov	r3, #1200
 690 0016 BB61     		str	r3, [r7, #24]
 433:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /* Generate a unique identifier for this query. Keep it in a local variable
 434:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c ****  as gethostbyname() may be called from different threads */
 435:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** TickType_t xIdentifier = ( TickType_t )usIdentifier++;
 691              		.loc 3 435 0
 692 0018 174B     		ldr	r3, .L38
 693 001a 1B88     		ldrh	r3, [r3]
 694 001c 5A1C     		adds	r2, r3, #1
 695 001e 91B2     		uxth	r1, r2
 696 0020 154A     		ldr	r2, .L38
 697 0022 1180     		strh	r1, [r2]	@ movhi
 698 0024 7B61     		str	r3, [r7, #20]
 436:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 437:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* If a DNS cache is used then check the cache before issuing another DNS
 438:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	request. */
 439:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#if( ipconfigUSE_DNS_CACHE == 1 )
 440:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 441:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		ulIPAddress = FreeRTOS_dnslookup( pcHostName );
 699              		.loc 3 441 0
 700 0026 F868     		ldr	r0, [r7, #12]
 701 0028 FFF7FEFF 		bl	FreeRTOS_dnslookup
 702 002c F861     		str	r0, [r7, #28]
 442:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( ulIPAddress != 0 )
 443:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 444:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			FreeRTOS_debug_printf( ( "FreeRTOS_gethostbyname: found '%s' in cache: %lxip\n", pcHostName, ulI
 445:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 446:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		else
 447:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 448:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* prvGetHostByName will be called to start a DNS lookup */
 449:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 450:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 451:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#endif /* ipconfigUSE_DNS_CACHE == 1 */
 452:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 453:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#if( ipconfigDNS_USE_CALLBACKS != 0 )
 454:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 455:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( pCallback != NULL )
 703              		.loc 3 455 0
 704 002e BB68     		ldr	r3, [r7, #8]
 705 0030 002B     		cmp	r3, #0
 706 0032 12D0     		beq	.L34
 456:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 457:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( ulIPAddress == 0UL )
 707              		.loc 3 457 0
 708 0034 FB69     		ldr	r3, [r7, #28]
 709 0036 002B     		cmp	r3, #0
 710 0038 0AD1     		bne	.L35
 458:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 459:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* The user has provided a callback function, so do not block on recvfrom() */
 460:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				xReadTimeOut_ms  = 0;
 711              		.loc 3 460 0
ARM GAS  /tmp/ccRjHDdd.s 			page 38


 712 003a 0023     		movs	r3, #0
 713 003c BB61     		str	r3, [r7, #24]
 461:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				vDNSSetCallBack( pcHostName, pvSearchID, pCallback, xTimeout, ( TickType_t ) xIdentifier );
 714              		.loc 3 461 0
 715 003e 7B69     		ldr	r3, [r7, #20]
 716 0040 0093     		str	r3, [sp]
 717 0042 F868     		ldr	r0, [r7, #12]
 718 0044 7968     		ldr	r1, [r7, #4]
 719 0046 BA68     		ldr	r2, [r7, #8]
 720 0048 3B68     		ldr	r3, [r7]
 721 004a FFF7FEFF 		bl	vDNSSetCallBack
 722 004e 04E0     		b	.L34
 723              	.L35:
 462:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 463:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			else
 464:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 465:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* The IP address is known, do the call-back now. */
 466:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				pCallback( pcHostName, pvSearchID, ulIPAddress );
 724              		.loc 3 466 0
 725 0050 BB68     		ldr	r3, [r7, #8]
 726 0052 F868     		ldr	r0, [r7, #12]
 727 0054 7968     		ldr	r1, [r7, #4]
 728 0056 FA69     		ldr	r2, [r7, #28]
 729 0058 9847     		blx	r3
 730              	.L34:
 467:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 468:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 469:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 470:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#endif
 471:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 472:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	if( ulIPAddress == 0UL)
 731              		.loc 3 472 0
 732 005a FB69     		ldr	r3, [r7, #28]
 733 005c 002B     		cmp	r3, #0
 734 005e 05D1     		bne	.L36
 473:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 474:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		ulIPAddress = prvGetHostByName( pcHostName, xIdentifier, xReadTimeOut_ms );
 735              		.loc 3 474 0
 736 0060 F868     		ldr	r0, [r7, #12]
 737 0062 7969     		ldr	r1, [r7, #20]
 738 0064 BA69     		ldr	r2, [r7, #24]
 739 0066 FFF7FEFF 		bl	prvGetHostByName
 740 006a F861     		str	r0, [r7, #28]
 741              	.L36:
 475:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 476:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 477:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	return ulIPAddress;
 742              		.loc 3 477 0
 743 006c FB69     		ldr	r3, [r7, #28]
 478:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 744              		.loc 3 478 0
 745 006e 1846     		mov	r0, r3
 746 0070 2037     		adds	r7, r7, #32
 747              	.LCFI47:
 748              		.cfi_def_cfa_offset 8
 749 0072 BD46     		mov	sp, r7
 750              	.LCFI48:
ARM GAS  /tmp/ccRjHDdd.s 			page 39


 751              		.cfi_def_cfa_register 13
 752              		@ sp needed
 753 0074 80BD     		pop	{r7, pc}
 754              	.L39:
 755 0076 00BF     		.align	2
 756              	.L38:
 757 0078 00000000 		.word	usIdentifier.6436
 758              		.cfi_endproc
 759              	.LFE36:
 761              		.section	.text.prvGetHostByName,"ax",%progbits
 762              		.align	2
 763              		.thumb
 764              		.thumb_func
 766              	prvGetHostByName:
 767              	.LFB37:
 479:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 480:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 481:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static uint32_t prvGetHostByName( const char *pcHostName, TickType_t xIdentifier, TickType_t xReadT
 482:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 768              		.loc 3 482 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 64
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772 0000 90B5     		push	{r4, r7, lr}
 773              	.LCFI49:
 774              		.cfi_def_cfa_offset 12
 775              		.cfi_offset 4, -12
 776              		.cfi_offset 7, -8
 777              		.cfi_offset 14, -4
 778 0002 93B0     		sub	sp, sp, #76
 779              	.LCFI50:
 780              		.cfi_def_cfa_offset 88
 781 0004 02AF     		add	r7, sp, #8
 782              	.LCFI51:
 783              		.cfi_def_cfa 7, 80
 784 0006 F860     		str	r0, [r7, #12]
 785 0008 B960     		str	r1, [r7, #8]
 786 000a 7A60     		str	r2, [r7, #4]
 483:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** struct freertos_sockaddr xAddress;
 484:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** Socket_t xDNSSocket;
 485:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint32_t ulIPAddress = 0UL;
 787              		.loc 3 485 0
 788 000c 0023     		movs	r3, #0
 789 000e BB61     		str	r3, [r7, #24]
 486:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint8_t *pucUDPPayloadBuffer;
 487:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static uint32_t ulAddressLength;
 488:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** BaseType_t xAttempt;
 489:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** int32_t lBytes;
 490:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** size_t xPayloadLength, xExpectedPayloadLength;
 491:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** TickType_t xWriteTimeOut_ms = 100U;
 790              		.loc 3 491 0
 791 0010 6423     		movs	r3, #100
 792 0012 3B61     		str	r3, [r7, #16]
 492:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 493:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_LLMNR == 1 )
 494:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	BaseType_t bHasDot = pdFALSE;
 793              		.loc 3 494 0
ARM GAS  /tmp/ccRjHDdd.s 			page 40


 794 0014 0023     		movs	r3, #0
 795 0016 BB63     		str	r3, [r7, #56]
 796              	.LBB4:
 495:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_LLMNR == 1 */
 496:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 497:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* If LLMNR is being used then determine if the host name includes a '.' -
 498:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	if not then LLMNR can be used as the lookup method. */
 499:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#if( ipconfigUSE_LLMNR == 1 )
 500:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 501:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		const char *pucPtr;
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		for( pucPtr = pcHostName; *pucPtr; pucPtr++ )
 797              		.loc 3 502 0
 798 0018 FB68     		ldr	r3, [r7, #12]
 799 001a 7B63     		str	r3, [r7, #52]
 800 001c 09E0     		b	.L41
 801              	.L44:
 503:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 504:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( *pucPtr == '.' )
 802              		.loc 3 504 0
 803 001e 7B6B     		ldr	r3, [r7, #52]
 804 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 805 0022 2E2B     		cmp	r3, #46
 806 0024 02D1     		bne	.L42
 505:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 506:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				bHasDot = pdTRUE;
 807              		.loc 3 506 0
 808 0026 0123     		movs	r3, #1
 809 0028 BB63     		str	r3, [r7, #56]
 507:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				break;
 810              		.loc 3 507 0
 811 002a 06E0     		b	.L43
 812              	.L42:
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 813              		.loc 3 502 0 discriminator 2
 814 002c 7B6B     		ldr	r3, [r7, #52]
 815 002e 0133     		adds	r3, r3, #1
 816 0030 7B63     		str	r3, [r7, #52]
 817              	.L41:
 502:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 818              		.loc 3 502 0 is_stmt 0 discriminator 1
 819 0032 7B6B     		ldr	r3, [r7, #52]
 820 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 821 0036 002B     		cmp	r3, #0
 822 0038 F1D1     		bne	.L44
 823              	.L43:
 824              	.LBE4:
 508:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 509:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 510:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 511:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	#endif /* ipconfigUSE_LLMNR == 1 */
 512:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 513:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Two is added at the end for the count of characters in the first
 514:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	subdomain part and the string end byte. */
 515:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	xExpectedPayloadLength = sizeof( DNSMessage_t ) + strlen( pcHostName ) + sizeof( uint16_t ) + size
 825              		.loc 3 515 0 is_stmt 1
 826 003a F868     		ldr	r0, [r7, #12]
 827 003c FFF7FEFF 		bl	strlen
ARM GAS  /tmp/ccRjHDdd.s 			page 41


 828 0040 0346     		mov	r3, r0
 829 0042 1233     		adds	r3, r3, #18
 830 0044 3B63     		str	r3, [r7, #48]
 516:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 517:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	xDNSSocket = prvCreateDNSSocket();
 831              		.loc 3 517 0
 832 0046 FFF7FEFF 		bl	prvCreateDNSSocket
 833 004a F862     		str	r0, [r7, #44]
 518:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 519:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	if( xDNSSocket != NULL )
 834              		.loc 3 519 0
 835 004c FB6A     		ldr	r3, [r7, #44]
 836 004e 002B     		cmp	r3, #0
 837 0050 7ED0     		beq	.L45
 520:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 521:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		FreeRTOS_setsockopt( xDNSSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xWriteTimeOut_ms, sizeof( T
 838              		.loc 3 521 0
 839 0052 07F11004 		add	r4, r7, #16
 840 0056 0423     		movs	r3, #4
 841 0058 0093     		str	r3, [sp]
 842 005a F86A     		ldr	r0, [r7, #44]
 843 005c 0021     		movs	r1, #0
 844 005e 0122     		movs	r2, #1
 845 0060 2346     		mov	r3, r4
 846 0062 FFF7FEFF 		bl	FreeRTOS_setsockopt
 522:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		FreeRTOS_setsockopt( xDNSSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xReadTimeOut_ms,  sizeof( T
 847              		.loc 3 522 0
 848 0066 3C1D     		adds	r4, r7, #4
 849 0068 0423     		movs	r3, #4
 850 006a 0093     		str	r3, [sp]
 851 006c F86A     		ldr	r0, [r7, #44]
 852 006e 0021     		movs	r1, #0
 853 0070 0022     		movs	r2, #0
 854 0072 2346     		mov	r3, r4
 855 0074 FFF7FEFF 		bl	FreeRTOS_setsockopt
 523:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		for( xAttempt = 0; xAttempt < ipconfigDNS_REQUEST_ATTEMPTS; xAttempt++ )
 856              		.loc 3 524 0
 857 0078 0023     		movs	r3, #0
 858 007a FB63     		str	r3, [r7, #60]
 859 007c 62E0     		b	.L46
 860              	.L52:
 525:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 526:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* Get a buffer.  This uses a maximum delay, but the delay will be
 527:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			capped to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value
 528:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			still needs to be tested. */
 529:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucUDPPayloadBuffer = ( uint8_t * ) FreeRTOS_GetUDPPayloadBuffer( xExpectedPayloadLength, portMA
 861              		.loc 3 529 0
 862 007e 386B     		ldr	r0, [r7, #48]
 863 0080 4FF0FF31 		mov	r1, #-1
 864 0084 FFF7FEFF 		bl	FreeRTOS_GetUDPPayloadBuffer
 865 0088 0346     		mov	r3, r0
 866 008a 7B61     		str	r3, [r7, #20]
 530:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 531:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( pucUDPPayloadBuffer != NULL )
 867              		.loc 3 531 0
 868 008c 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccRjHDdd.s 			page 42


 869 008e 002B     		cmp	r3, #0
 870 0090 55D0     		beq	.L47
 532:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 533:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Create the message in the obtained buffer. */
 534:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				xPayloadLength = prvCreateDNSMessage( pucUDPPayloadBuffer, pcHostName, xIdentifier );
 871              		.loc 3 534 0
 872 0092 7B69     		ldr	r3, [r7, #20]
 873 0094 1846     		mov	r0, r3
 874 0096 F968     		ldr	r1, [r7, #12]
 875 0098 BA68     		ldr	r2, [r7, #8]
 876 009a FFF7FEFF 		bl	prvCreateDNSMessage
 877 009e B862     		str	r0, [r7, #40]
 535:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 536:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				iptraceSENDING_DNS_REQUEST();
 537:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 538:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Obtain the DNS server address. */
 539:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				FreeRTOS_GetAddressConfiguration( NULL, NULL, NULL, &ulIPAddress );
 878              		.loc 3 539 0
 879 00a0 07F11803 		add	r3, r7, #24
 880 00a4 0020     		movs	r0, #0
 881 00a6 0021     		movs	r1, #0
 882 00a8 0022     		movs	r2, #0
 883 00aa FFF7FEFF 		bl	FreeRTOS_GetAddressConfiguration
 540:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 541:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Send the DNS message. */
 542:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_LLMNR == 1 )
 543:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( bHasDot == pdFALSE )
 884              		.loc 3 543 0
 885 00ae BB6B     		ldr	r3, [r7, #56]
 886 00b0 002B     		cmp	r3, #0
 887 00b2 0AD1     		bne	.L48
 544:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 545:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* Use LLMNR addressing. */
 546:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					( ( DNSMessage_t * ) pucUDPPayloadBuffer) -> usFlags = 0;
 888              		.loc 3 546 0
 889 00b4 7B69     		ldr	r3, [r7, #20]
 890 00b6 0022     		movs	r2, #0
 891 00b8 9A70     		strb	r2, [r3, #2]
 892 00ba 0022     		movs	r2, #0
 893 00bc DA70     		strb	r2, [r3, #3]
 547:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					xAddress.sin_addr = ipLLMNR_IP_ADDR;	/* Is in network byte order. */
 894              		.loc 3 547 0
 895 00be 274B     		ldr	r3, .L54
 896 00c0 3B62     		str	r3, [r7, #32]
 548:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					xAddress.sin_port = FreeRTOS_ntohs( ipLLMNR_PORT );
 897              		.loc 3 548 0
 898 00c2 4EF61433 		movw	r3, #60180
 899 00c6 FB83     		strh	r3, [r7, #30]	@ movhi
 900 00c8 04E0     		b	.L49
 901              	.L48:
 549:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 550:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				else
 551:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif
 552:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 553:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* Use DNS server. */
 554:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					xAddress.sin_addr = ulIPAddress;
 902              		.loc 3 554 0
ARM GAS  /tmp/ccRjHDdd.s 			page 43


 903 00ca BB69     		ldr	r3, [r7, #24]
 904 00cc 3B62     		str	r3, [r7, #32]
 555:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					xAddress.sin_port = dnsDNS_PORT;
 905              		.loc 3 555 0
 906 00ce 4FF45453 		mov	r3, #13568
 907 00d2 FB83     		strh	r3, [r7, #30]	@ movhi
 908              	.L49:
 556:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 557:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 558:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				ulIPAddress = 0UL;
 909              		.loc 3 558 0
 910 00d4 0023     		movs	r3, #0
 911 00d6 BB61     		str	r3, [r7, #24]
 559:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 560:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( FreeRTOS_sendto( xDNSSocket, pucUDPPayloadBuffer, xPayloadLength, FREERTOS_ZERO_COPY, &xAdd
 912              		.loc 3 560 0
 913 00d8 7A69     		ldr	r2, [r7, #20]
 914 00da 07F11C03 		add	r3, r7, #28
 915 00de 0093     		str	r3, [sp]
 916 00e0 0823     		movs	r3, #8
 917 00e2 0193     		str	r3, [sp, #4]
 918 00e4 F86A     		ldr	r0, [r7, #44]
 919 00e6 1146     		mov	r1, r2
 920 00e8 BA6A     		ldr	r2, [r7, #40]
 921 00ea 0123     		movs	r3, #1
 922 00ec FFF7FEFF 		bl	FreeRTOS_sendto
 923 00f0 0346     		mov	r3, r0
 924 00f2 002B     		cmp	r3, #0
 925 00f4 1FD0     		beq	.L50
 561:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 562:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* Wait for the reply. */
 563:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					lBytes = FreeRTOS_recvfrom( xDNSSocket, &pucUDPPayloadBuffer, 0, FREERTOS_ZERO_COPY, &xAddress
 926              		.loc 3 563 0
 927 00f6 07F11402 		add	r2, r7, #20
 928 00fa 07F11C03 		add	r3, r7, #28
 929 00fe 0093     		str	r3, [sp]
 930 0100 174B     		ldr	r3, .L54+4
 931 0102 0193     		str	r3, [sp, #4]
 932 0104 F86A     		ldr	r0, [r7, #44]
 933 0106 1146     		mov	r1, r2
 934 0108 0022     		movs	r2, #0
 935 010a 0123     		movs	r3, #1
 936 010c FFF7FEFF 		bl	FreeRTOS_recvfrom
 937 0110 7862     		str	r0, [r7, #36]
 564:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 565:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					if( lBytes > 0 )
 938              		.loc 3 565 0
 939 0112 7B6A     		ldr	r3, [r7, #36]
 940 0114 002B     		cmp	r3, #0
 941 0116 12DD     		ble	.L47
 566:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					{
 567:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						/* The reply was received.  Process it. */
 568:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						ulIPAddress = prvParseDNSReply( pucUDPPayloadBuffer, xIdentifier );
 942              		.loc 3 568 0
 943 0118 7B69     		ldr	r3, [r7, #20]
 944 011a 1846     		mov	r0, r3
 945 011c B968     		ldr	r1, [r7, #8]
ARM GAS  /tmp/ccRjHDdd.s 			page 44


 946 011e FFF7FEFF 		bl	prvParseDNSReply
 947 0122 0346     		mov	r3, r0
 948 0124 BB61     		str	r3, [r7, #24]
 569:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 570:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						/* Finished with the buffer.  The zero copy interface
 571:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						is being used, so the buffer must be freed by the
 572:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						task. */
 573:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayloadBuffer );
 949              		.loc 3 573 0
 950 0126 7B69     		ldr	r3, [r7, #20]
 951 0128 1846     		mov	r0, r3
 952 012a FFF7FEFF 		bl	FreeRTOS_ReleaseUDPPayloadBuffer
 574:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 575:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						if( ulIPAddress != 0UL )
 953              		.loc 3 575 0
 954 012e BB69     		ldr	r3, [r7, #24]
 955 0130 002B     		cmp	r3, #0
 956 0132 04D0     		beq	.L47
 576:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						{
 577:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 							/* All done. */
 578:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 							break;
 957              		.loc 3 578 0
 958 0134 09E0     		b	.L51
 959              	.L50:
 579:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						}
 580:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					}
 581:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 582:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				else
 583:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 584:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* The message was not sent so the stack will not be
 585:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					releasing the zero copy - it must be released here. */
 586:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayloadBuffer );
 960              		.loc 3 586 0
 961 0136 7B69     		ldr	r3, [r7, #20]
 962 0138 1846     		mov	r0, r3
 963 013a FFF7FEFF 		bl	FreeRTOS_ReleaseUDPPayloadBuffer
 964              	.L47:
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 965              		.loc 3 524 0 discriminator 2
 966 013e FB6B     		ldr	r3, [r7, #60]
 967 0140 0133     		adds	r3, r3, #1
 968 0142 FB63     		str	r3, [r7, #60]
 969              	.L46:
 524:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 970              		.loc 3 524 0 is_stmt 0 discriminator 1
 971 0144 FB6B     		ldr	r3, [r7, #60]
 972 0146 032B     		cmp	r3, #3
 973 0148 99DD     		ble	.L52
 974              	.L51:
 587:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 588:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 589:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 590:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 591:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Finished with the socket. */
 592:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		FreeRTOS_closesocket( xDNSSocket );
 975              		.loc 3 592 0 is_stmt 1
 976 014a F86A     		ldr	r0, [r7, #44]
ARM GAS  /tmp/ccRjHDdd.s 			page 45


 977 014c FFF7FEFF 		bl	FreeRTOS_closesocket
 978              	.L45:
 593:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 594:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 595:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	return ulIPAddress;
 979              		.loc 3 595 0
 980 0150 BB69     		ldr	r3, [r7, #24]
 596:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 981              		.loc 3 596 0
 982 0152 1846     		mov	r0, r3
 983 0154 4437     		adds	r7, r7, #68
 984              	.LCFI52:
 985              		.cfi_def_cfa_offset 12
 986 0156 BD46     		mov	sp, r7
 987              	.LCFI53:
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 0158 90BD     		pop	{r4, r7, pc}
 991              	.L55:
 992 015a 00BF     		.align	2
 993              	.L54:
 994 015c E00000FC 		.word	-67108640
 995 0160 00000000 		.word	ulAddressLength.6448
 996              		.cfi_endproc
 997              	.LFE37:
 999              		.section	.text.prvCreateDNSMessage,"ax",%progbits
 1000              		.align	2
 1001              		.thumb
 1002              		.thumb_func
 1004              	prvCreateDNSMessage:
 1005              	.LFB38:
 597:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 598:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 599:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static size_t prvCreateDNSMessage( uint8_t *pucUDPPayloadBuffer, const char *pcHostName, TickType_t
 600:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 1006              		.loc 3 600 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 32
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 90B5     		push	{r4, r7, lr}
 1011              	.LCFI54:
 1012              		.cfi_def_cfa_offset 12
 1013              		.cfi_offset 4, -12
 1014              		.cfi_offset 7, -8
 1015              		.cfi_offset 14, -4
 1016 0002 89B0     		sub	sp, sp, #36
 1017              	.LCFI55:
 1018              		.cfi_def_cfa_offset 48
 1019 0004 00AF     		add	r7, sp, #0
 1020              	.LCFI56:
 1021              		.cfi_def_cfa_register 7
 1022 0006 F860     		str	r0, [r7, #12]
 1023 0008 B960     		str	r1, [r7, #8]
 1024 000a 7A60     		str	r2, [r7, #4]
 601:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** DNSMessage_t *pxDNSMessageHeader;
 602:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint8_t *pucStart, *pucByte;
 603:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** DNSTail_t *pxTail;
ARM GAS  /tmp/ccRjHDdd.s 			page 46


 604:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static const DNSMessage_t xDefaultPartDNSHeader =
 605:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 606:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	0,					/* The identifier will be overwritten. */
 607:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	dnsOUTGOING_FLAGS,	/* Flags set for standard query. */
 608:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	dnsONE_QUESTION,	/* One question is being asked. */
 609:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	0,					/* No replies are included. */
 610:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	0,					/* No authorities. */
 611:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	0					/* No additional authorities. */
 612:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** };
 613:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 614:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Copy in the const part of the header. */
 615:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	memcpy( ( void * ) pucUDPPayloadBuffer, ( void * ) &xDefaultPartDNSHeader, sizeof( xDefaultPartDNS
 1025              		.loc 3 615 0
 1026 000c FB68     		ldr	r3, [r7, #12]
 1027 000e 2F4A     		ldr	r2, .L62
 1028 0010 1C46     		mov	r4, r3
 1029 0012 1346     		mov	r3, r2
 1030 0014 07CB     		ldmia	r3!, {r0, r1, r2}
 1031 0016 2060     		str	r0, [r4]	@ unaligned
 1032 0018 6160     		str	r1, [r4, #4]	@ unaligned
 1033 001a A260     		str	r2, [r4, #8]	@ unaligned
 616:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 617:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Write in a unique identifier. */
 618:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 1034              		.loc 3 618 0
 1035 001c FB68     		ldr	r3, [r7, #12]
 1036 001e 7B61     		str	r3, [r7, #20]
 619:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pxDNSMessageHeader->usIdentifier = ( uint16_t ) xIdentifier;
 1037              		.loc 3 619 0
 1038 0020 7B68     		ldr	r3, [r7, #4]
 1039 0022 9AB2     		uxth	r2, r3
 1040 0024 7B69     		ldr	r3, [r7, #20]
 1041 0026 1A80     		strh	r2, [r3]	@ unaligned
 620:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 621:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Create the resource record at the end of the header.  First
 622:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	find the end of the header. */
 623:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pucStart = pucUDPPayloadBuffer + sizeof( xDefaultPartDNSHeader );
 1042              		.loc 3 623 0
 1043 0028 FB68     		ldr	r3, [r7, #12]
 1044 002a 0C33     		adds	r3, r3, #12
 1045 002c FB61     		str	r3, [r7, #28]
 624:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 625:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Leave a gap for the first length bytes. */
 626:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pucByte = pucStart + 1;
 1046              		.loc 3 626 0
 1047 002e FB69     		ldr	r3, [r7, #28]
 1048 0030 0133     		adds	r3, r3, #1
 1049 0032 BB61     		str	r3, [r7, #24]
 627:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 628:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Copy in the host name. */
 629:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	strcpy( ( char * ) pucByte, pcHostName );
 1050              		.loc 3 629 0
 1051 0034 B869     		ldr	r0, [r7, #24]
 1052 0036 B968     		ldr	r1, [r7, #8]
 1053 0038 FFF7FEFF 		bl	strcpy
 630:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 631:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Mark the end of the string. */
ARM GAS  /tmp/ccRjHDdd.s 			page 47


 632:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pucByte += strlen( pcHostName );
 1054              		.loc 3 632 0
 1055 003c B868     		ldr	r0, [r7, #8]
 1056 003e FFF7FEFF 		bl	strlen
 1057 0042 0246     		mov	r2, r0
 1058 0044 BB69     		ldr	r3, [r7, #24]
 1059 0046 1344     		add	r3, r3, r2
 1060 0048 BB61     		str	r3, [r7, #24]
 633:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	*pucByte = 0x00u;
 1061              		.loc 3 633 0
 1062 004a BB69     		ldr	r3, [r7, #24]
 1063 004c 0022     		movs	r2, #0
 1064 004e 1A70     		strb	r2, [r3]
 634:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 635:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Walk the string to replace the '.' characters with byte counts.
 636:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pucStart holds the address of the byte count.  Walking the string
 637:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	starts after the byte count position. */
 638:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pucByte = pucStart;
 1065              		.loc 3 638 0
 1066 0050 FB69     		ldr	r3, [r7, #28]
 1067 0052 BB61     		str	r3, [r7, #24]
 1068              	.L60:
 639:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 640:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	do
 641:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 642:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pucByte++;
 1069              		.loc 3 642 0
 1070 0054 BB69     		ldr	r3, [r7, #24]
 1071 0056 0133     		adds	r3, r3, #1
 1072 0058 BB61     		str	r3, [r7, #24]
 643:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		while( ( *pucByte != 0x00 ) && ( *pucByte != '.' ) )
 1073              		.loc 3 644 0
 1074 005a 02E0     		b	.L57
 1075              	.L59:
 645:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 646:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucByte++;
 1076              		.loc 3 646 0
 1077 005c BB69     		ldr	r3, [r7, #24]
 1078 005e 0133     		adds	r3, r3, #1
 1079 0060 BB61     		str	r3, [r7, #24]
 1080              	.L57:
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 1081              		.loc 3 644 0
 1082 0062 BB69     		ldr	r3, [r7, #24]
 1083 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1084 0066 002B     		cmp	r3, #0
 1085 0068 03D0     		beq	.L58
 644:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 1086              		.loc 3 644 0 is_stmt 0 discriminator 1
 1087 006a BB69     		ldr	r3, [r7, #24]
 1088 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1089 006e 2E2B     		cmp	r3, #46
 1090 0070 F4D1     		bne	.L59
 1091              	.L58:
 647:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 648:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
ARM GAS  /tmp/ccRjHDdd.s 			page 48


 649:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Fill in the byte count, then move the pucStart pointer up to
 650:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		the found byte position. */
 651:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		*pucStart = ( uint8_t ) ( ( uint32_t ) pucByte - ( uint32_t ) pucStart );
 1092              		.loc 3 651 0 is_stmt 1
 1093 0072 BA69     		ldr	r2, [r7, #24]
 1094 0074 FB69     		ldr	r3, [r7, #28]
 1095 0076 D31A     		subs	r3, r2, r3
 1096 0078 DAB2     		uxtb	r2, r3
 1097 007a FB69     		ldr	r3, [r7, #28]
 1098 007c 1A70     		strb	r2, [r3]
 652:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		( *pucStart )--;
 1099              		.loc 3 652 0
 1100 007e FB69     		ldr	r3, [r7, #28]
 1101 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1102 0082 013B     		subs	r3, r3, #1
 1103 0084 DAB2     		uxtb	r2, r3
 1104 0086 FB69     		ldr	r3, [r7, #28]
 1105 0088 1A70     		strb	r2, [r3]
 653:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 654:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pucStart = pucByte;
 1106              		.loc 3 654 0
 1107 008a BB69     		ldr	r3, [r7, #24]
 1108 008c FB61     		str	r3, [r7, #28]
 655:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 656:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	} while( *pucByte != 0x00 );
 1109              		.loc 3 656 0
 1110 008e BB69     		ldr	r3, [r7, #24]
 1111 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1112 0092 002B     		cmp	r3, #0
 1113 0094 DED1     		bne	.L60
 657:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 658:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Finish off the record. */
 659:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 660:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pxTail = (DNSTail_t *)( pucByte + 1 );
 1114              		.loc 3 660 0
 1115 0096 BB69     		ldr	r3, [r7, #24]
 1116 0098 0133     		adds	r3, r3, #1
 1117 009a 3B61     		str	r3, [r7, #16]
 661:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 662:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	vSetField16( pxTail, DNSTail_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 1118              		.loc 3 662 0
 1119 009c 3B69     		ldr	r3, [r7, #16]
 1120 009e 0022     		movs	r2, #0
 1121 00a0 1A70     		strb	r2, [r3]
 1122 00a2 3B69     		ldr	r3, [r7, #16]
 1123 00a4 0133     		adds	r3, r3, #1
 1124 00a6 0122     		movs	r2, #1
 1125 00a8 1A70     		strb	r2, [r3]
 663:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	vSetField16( pxTail, DNSTail_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 1126              		.loc 3 663 0
 1127 00aa 3B69     		ldr	r3, [r7, #16]
 1128 00ac 0233     		adds	r3, r3, #2
 1129 00ae 0022     		movs	r2, #0
 1130 00b0 1A70     		strb	r2, [r3]
 1131 00b2 3B69     		ldr	r3, [r7, #16]
 1132 00b4 0333     		adds	r3, r3, #3
 1133 00b6 0122     		movs	r2, #1
ARM GAS  /tmp/ccRjHDdd.s 			page 49


 1134 00b8 1A70     		strb	r2, [r3]
 664:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 665:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Return the total size of the generated message, which is the space from
 666:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	the last written byte to the beginning of the buffer. */
 667:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	return ( ( uint32_t ) pucByte - ( uint32_t ) pucUDPPayloadBuffer + 1 ) + sizeof( *pxTail );
 1135              		.loc 3 667 0
 1136 00ba BA69     		ldr	r2, [r7, #24]
 1137 00bc FB68     		ldr	r3, [r7, #12]
 1138 00be D31A     		subs	r3, r2, r3
 1139 00c0 0533     		adds	r3, r3, #5
 668:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 1140              		.loc 3 668 0
 1141 00c2 1846     		mov	r0, r3
 1142 00c4 2437     		adds	r7, r7, #36
 1143              	.LCFI57:
 1144              		.cfi_def_cfa_offset 12
 1145 00c6 BD46     		mov	sp, r7
 1146              	.LCFI58:
 1147              		.cfi_def_cfa_register 13
 1148              		@ sp needed
 1149 00c8 90BD     		pop	{r4, r7, pc}
 1150              	.L63:
 1151 00ca 00BF     		.align	2
 1152              	.L62:
 1153 00cc 00000000 		.word	xDefaultPartDNSHeader.6471
 1154              		.cfi_endproc
 1155              	.LFE38:
 1157              		.section	.text.prvReadNameField,"ax",%progbits
 1158              		.align	2
 1159              		.thumb
 1160              		.thumb_func
 1162              	prvReadNameField:
 1163              	.LFB39:
 669:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 670:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 671:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_DNS_CACHE == 1 )
 672:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 673:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static uint8_t *prvReadNameField( uint8_t *pucByte, char *pcName, BaseType_t xLen )
 674:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 1164              		.loc 3 674 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 24
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 1169 0000 80B4     		push	{r7}
 1170              	.LCFI59:
 1171              		.cfi_def_cfa_offset 4
 1172              		.cfi_offset 7, -4
 1173 0002 87B0     		sub	sp, sp, #28
 1174              	.LCFI60:
 1175              		.cfi_def_cfa_offset 32
 1176 0004 00AF     		add	r7, sp, #0
 1177              	.LCFI61:
 1178              		.cfi_def_cfa_register 7
 1179 0006 F860     		str	r0, [r7, #12]
 1180 0008 B960     		str	r1, [r7, #8]
 1181 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccRjHDdd.s 			page 50


 675:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	BaseType_t xNameLen = 0;
 1182              		.loc 3 675 0
 1183 000c 0023     		movs	r3, #0
 1184 000e 7B61     		str	r3, [r7, #20]
 676:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Determine if the name is the fully coded name, or an offset to the name
 677:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		elsewhere in the message. */
 678:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 1185              		.loc 3 678 0
 1186 0010 FB68     		ldr	r3, [r7, #12]
 1187 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1188 0014 03F0C003 		and	r3, r3, #192
 1189 0018 C02B     		cmp	r3, #192
 1190 001a 03D1     		bne	.L65
 679:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 680:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* Jump over the two byte offset. */
 681:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucByte += sizeof( uint16_t );
 1191              		.loc 3 681 0
 1192 001c FB68     		ldr	r3, [r7, #12]
 1193 001e 0233     		adds	r3, r3, #2
 1194 0020 FB60     		str	r3, [r7, #12]
 1195 0022 33E0     		b	.L66
 1196              	.L65:
 682:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 683:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 684:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		else
 685:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 686:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* pucByte points to the full name.  Walk over the string. */
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			while( *pucByte != 0x00 )
 1197              		.loc 3 687 0
 1198 0024 2BE0     		b	.L67
 1199              	.L72:
 1200              	.LBB5:
 688:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 689:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				BaseType_t xCount;
 690:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( xNameLen && xNameLen < xLen - 1 )
 1201              		.loc 3 690 0
 1202 0026 7B69     		ldr	r3, [r7, #20]
 1203 0028 002B     		cmp	r3, #0
 1204 002a 0CD0     		beq	.L68
 1205              		.loc 3 690 0 is_stmt 0 discriminator 1
 1206 002c 7B68     		ldr	r3, [r7, #4]
 1207 002e 5A1E     		subs	r2, r3, #1
 1208 0030 7B69     		ldr	r3, [r7, #20]
 1209 0032 9A42     		cmp	r2, r3
 1210 0034 07DD     		ble	.L68
 691:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pcName[xNameLen++] = '.';
 1211              		.loc 3 691 0 is_stmt 1
 1212 0036 7B69     		ldr	r3, [r7, #20]
 1213 0038 5A1C     		adds	r2, r3, #1
 1214 003a 7A61     		str	r2, [r7, #20]
 1215 003c 1A46     		mov	r2, r3
 1216 003e BB68     		ldr	r3, [r7, #8]
 1217 0040 1344     		add	r3, r3, r2
 1218 0042 2E22     		movs	r2, #46
 1219 0044 1A70     		strb	r2, [r3]
 1220              	.L68:
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				for( xCount = *(pucByte++); xCount--; pucByte++ )
ARM GAS  /tmp/ccRjHDdd.s 			page 51


 1221              		.loc 3 692 0
 1222 0046 FB68     		ldr	r3, [r7, #12]
 1223 0048 5A1C     		adds	r2, r3, #1
 1224 004a FA60     		str	r2, [r7, #12]
 1225 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1226 004e 3B61     		str	r3, [r7, #16]
 1227 0050 10E0     		b	.L69
 1228              	.L71:
 693:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 694:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					if( xNameLen < xLen - 1 )
 1229              		.loc 3 694 0
 1230 0052 7B68     		ldr	r3, [r7, #4]
 1231 0054 5A1E     		subs	r2, r3, #1
 1232 0056 7B69     		ldr	r3, [r7, #20]
 1233 0058 9A42     		cmp	r2, r3
 1234 005a 08DD     		ble	.L70
 695:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pcName[xNameLen++] = *( ( char * ) pucByte );
 1235              		.loc 3 695 0
 1236 005c 7B69     		ldr	r3, [r7, #20]
 1237 005e 5A1C     		adds	r2, r3, #1
 1238 0060 7A61     		str	r2, [r7, #20]
 1239 0062 1A46     		mov	r2, r3
 1240 0064 BB68     		ldr	r3, [r7, #8]
 1241 0066 1344     		add	r3, r3, r2
 1242 0068 FA68     		ldr	r2, [r7, #12]
 1243 006a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1244 006c 1A70     		strb	r2, [r3]
 1245              	.L70:
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				for( xCount = *(pucByte++); xCount--; pucByte++ )
 1246              		.loc 3 692 0 discriminator 2
 1247 006e FB68     		ldr	r3, [r7, #12]
 1248 0070 0133     		adds	r3, r3, #1
 1249 0072 FB60     		str	r3, [r7, #12]
 1250              	.L69:
 692:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				for( xCount = *(pucByte++); xCount--; pucByte++ )
 1251              		.loc 3 692 0 is_stmt 0 discriminator 1
 1252 0074 3B69     		ldr	r3, [r7, #16]
 1253 0076 5A1E     		subs	r2, r3, #1
 1254 0078 3A61     		str	r2, [r7, #16]
 1255 007a 002B     		cmp	r3, #0
 1256 007c E9D1     		bne	.L71
 1257              	.L67:
 1258              	.LBE5:
 687:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 1259              		.loc 3 687 0 is_stmt 1
 1260 007e FB68     		ldr	r3, [r7, #12]
 1261 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1262 0082 002B     		cmp	r3, #0
 1263 0084 CFD1     		bne	.L72
 696:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 697:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 698:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 699:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucByte++;
 1264              		.loc 3 699 0
 1265 0086 FB68     		ldr	r3, [r7, #12]
 1266 0088 0133     		adds	r3, r3, #1
 1267 008a FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccRjHDdd.s 			page 52


 1268              	.L66:
 700:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 701:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 702:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		return pucByte;
 1269              		.loc 3 702 0
 1270 008c FB68     		ldr	r3, [r7, #12]
 703:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 1271              		.loc 3 703 0
 1272 008e 1846     		mov	r0, r3
 1273 0090 1C37     		adds	r7, r7, #28
 1274              	.LCFI62:
 1275              		.cfi_def_cfa_offset 4
 1276 0092 BD46     		mov	sp, r7
 1277              	.LCFI63:
 1278              		.cfi_def_cfa_register 13
 1279              		@ sp needed
 1280 0094 5DF8047B 		ldr	r7, [sp], #4
 1281              	.LCFI64:
 1282              		.cfi_restore 7
 1283              		.cfi_def_cfa_offset 0
 1284 0098 7047     		bx	lr
 1285              		.cfi_endproc
 1286              	.LFE39:
 1288 009a 00BF     		.section	.text.prvSkipNameField,"ax",%progbits
 1289              		.align	2
 1290              		.thumb
 1291              		.thumb_func
 1293              	prvSkipNameField:
 1294              	.LFB40:
 704:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif	/* ipconfigUSE_DNS_CACHE == 1 */
 705:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 706:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 707:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static uint8_t *prvSkipNameField( uint8_t *pucByte )
 708:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 1295              		.loc 3 708 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 8
 1298              		@ frame_needed = 1, uses_anonymous_args = 0
 1299              		@ link register save eliminated.
 1300 0000 80B4     		push	{r7}
 1301              	.LCFI65:
 1302              		.cfi_def_cfa_offset 4
 1303              		.cfi_offset 7, -4
 1304 0002 83B0     		sub	sp, sp, #12
 1305              	.LCFI66:
 1306              		.cfi_def_cfa_offset 16
 1307 0004 00AF     		add	r7, sp, #0
 1308              	.LCFI67:
 1309              		.cfi_def_cfa_register 7
 1310 0006 7860     		str	r0, [r7, #4]
 709:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Determine if the name is the fully coded name, or an offset to the name
 710:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	elsewhere in the message. */
 711:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 1311              		.loc 3 711 0
 1312 0008 7B68     		ldr	r3, [r7, #4]
 1313 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1314 000c 03F0C003 		and	r3, r3, #192
ARM GAS  /tmp/ccRjHDdd.s 			page 53


 1315 0010 C02B     		cmp	r3, #192
 1316 0012 03D1     		bne	.L75
 712:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 713:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Jump over the two byte offset. */
 714:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pucByte += sizeof( uint16_t );
 1317              		.loc 3 714 0
 1318 0014 7B68     		ldr	r3, [r7, #4]
 1319 0016 0233     		adds	r3, r3, #2
 1320 0018 7B60     		str	r3, [r7, #4]
 1321 001a 0DE0     		b	.L76
 1322              	.L75:
 715:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 716:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 717:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	else
 718:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 719:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* pucByte points to the full name.  Walk over the string. */
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		while( *pucByte != 0x00 )
 1323              		.loc 3 720 0
 1324 001c 05E0     		b	.L77
 1325              	.L78:
 721:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 722:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* The number of bytes to jump for each name section is stored in the byte
 723:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			before the name section. */
 724:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucByte += ( *pucByte + 1 );
 1326              		.loc 3 724 0
 1327 001e 7B68     		ldr	r3, [r7, #4]
 1328 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1329 0022 0133     		adds	r3, r3, #1
 1330 0024 7A68     		ldr	r2, [r7, #4]
 1331 0026 1344     		add	r3, r3, r2
 1332 0028 7B60     		str	r3, [r7, #4]
 1333              	.L77:
 720:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 1334              		.loc 3 720 0
 1335 002a 7B68     		ldr	r3, [r7, #4]
 1336 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1337 002e 002B     		cmp	r3, #0
 1338 0030 F5D1     		bne	.L78
 725:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 726:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 727:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pucByte++;
 1339              		.loc 3 727 0
 1340 0032 7B68     		ldr	r3, [r7, #4]
 1341 0034 0133     		adds	r3, r3, #1
 1342 0036 7B60     		str	r3, [r7, #4]
 1343              	.L76:
 728:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 729:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 730:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	return pucByte;
 1344              		.loc 3 730 0
 1345 0038 7B68     		ldr	r3, [r7, #4]
 731:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 1346              		.loc 3 731 0
 1347 003a 1846     		mov	r0, r3
 1348 003c 0C37     		adds	r7, r7, #12
 1349              	.LCFI68:
 1350              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRjHDdd.s 			page 54


 1351 003e BD46     		mov	sp, r7
 1352              	.LCFI69:
 1353              		.cfi_def_cfa_register 13
 1354              		@ sp needed
 1355 0040 5DF8047B 		ldr	r7, [sp], #4
 1356              	.LCFI70:
 1357              		.cfi_restore 7
 1358              		.cfi_def_cfa_offset 0
 1359 0044 7047     		bx	lr
 1360              		.cfi_endproc
 1361              	.LFE40:
 1363 0046 00BF     		.section	.text.ulDNSHandlePacket,"ax",%progbits
 1364              		.align	2
 1365              		.global	ulDNSHandlePacket
 1366              		.thumb
 1367              		.thumb_func
 1369              	ulDNSHandlePacket:
 1370              	.LFB41:
 732:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 733:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 734:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint32_t ulDNSHandlePacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
 735:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 1371              		.loc 3 735 0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 16
 1374              		@ frame_needed = 1, uses_anonymous_args = 0
 1375 0000 80B5     		push	{r7, lr}
 1376              	.LCFI71:
 1377              		.cfi_def_cfa_offset 8
 1378              		.cfi_offset 7, -8
 1379              		.cfi_offset 14, -4
 1380 0002 84B0     		sub	sp, sp, #16
 1381              	.LCFI72:
 1382              		.cfi_def_cfa_offset 24
 1383 0004 00AF     		add	r7, sp, #0
 1384              	.LCFI73:
 1385              		.cfi_def_cfa_register 7
 1386 0006 7860     		str	r0, [r7, #4]
 736:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint8_t *pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
 1387              		.loc 3 736 0
 1388 0008 7B68     		ldr	r3, [r7, #4]
 1389 000a 9B69     		ldr	r3, [r3, #24]
 1390 000c 2A33     		adds	r3, r3, #42
 1391 000e FB60     		str	r3, [r7, #12]
 737:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** DNSMessage_t *pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 1392              		.loc 3 737 0
 1393 0010 FB68     		ldr	r3, [r7, #12]
 1394 0012 BB60     		str	r3, [r7, #8]
 738:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 739:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	prvParseDNSReply( pucUDPPayloadBuffer, ( uint32_t ) pxDNSMessageHeader->usIdentifier );
 1395              		.loc 3 739 0
 1396 0014 BB68     		ldr	r3, [r7, #8]
 1397 0016 1B88     		ldrh	r3, [r3]	@ unaligned
 1398 0018 9BB2     		uxth	r3, r3
 1399 001a F868     		ldr	r0, [r7, #12]
 1400 001c 1946     		mov	r1, r3
 1401 001e FFF7FEFF 		bl	prvParseDNSReply
ARM GAS  /tmp/ccRjHDdd.s 			page 55


 740:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 741:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* The packet was not consumed. */
 742:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	return pdFAIL;
 1402              		.loc 3 742 0
 1403 0022 0023     		movs	r3, #0
 743:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 1404              		.loc 3 743 0
 1405 0024 1846     		mov	r0, r3
 1406 0026 1037     		adds	r7, r7, #16
 1407              	.LCFI74:
 1408              		.cfi_def_cfa_offset 8
 1409 0028 BD46     		mov	sp, r7
 1410              	.LCFI75:
 1411              		.cfi_def_cfa_register 13
 1412              		@ sp needed
 1413 002a 80BD     		pop	{r7, pc}
 1414              		.cfi_endproc
 1415              	.LFE41:
 1417              		.section	.text.prvParseDNSReply,"ax",%progbits
 1418              		.align	2
 1419              		.thumb
 1420              		.thumb_func
 1422              	prvParseDNSReply:
 1423              	.LFB42:
 744:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 745:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 746:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_NBNS == 1 )
 747:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 748:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint32_t ulNBNSHandlePacket (NetworkBufferDescriptor_t *pxNetworkBuffer )
 749:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 750:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 751:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint8_t *pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( *pxUDPPacket );
 752:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 753:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		prvTreatNBNS( pucUDPPayloadBuffer, pxUDPPacket->xIPHeader.ulSourceIPAddress );
 754:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 755:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* The packet was not consumed. */
 756:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		return pdFAIL;
 757:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 758:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 759:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_NBNS */
 760:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 761:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 762:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, TickType_t xIdentifier )
 763:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 1424              		.loc 3 763 0
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 200
 1427              		@ frame_needed = 1, uses_anonymous_args = 0
 1428 0000 80B5     		push	{r7, lr}
 1429              	.LCFI76:
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 7, -8
 1432              		.cfi_offset 14, -4
 1433 0002 B2B0     		sub	sp, sp, #200
 1434              	.LCFI77:
 1435              		.cfi_def_cfa_offset 208
 1436 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccRjHDdd.s 			page 56


 1437              	.LCFI78:
 1438              		.cfi_def_cfa_register 7
 1439 0006 7860     		str	r0, [r7, #4]
 1440 0008 3960     		str	r1, [r7]
 764:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** DNSMessage_t *pxDNSMessageHeader;
 765:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint32_t ulIPAddress = 0UL;
 1441              		.loc 3 765 0
 1442 000a 0023     		movs	r3, #0
 1443 000c C7F89030 		str	r3, [r7, #144]
 766:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_LLMNR == 1 )
 767:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	char *pcRequestedName = NULL;
 1444              		.loc 3 767 0
 1445 0010 0023     		movs	r3, #0
 1446 0012 C7F8C030 		str	r3, [r7, #192]
 768:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif
 769:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint8_t *pucByte;
 770:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** uint16_t x, usDataLength, usQuestions;
 771:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_LLMNR == 1 )
 772:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	uint16_t usType = 0, usClass = 0;
 1447              		.loc 3 772 0
 1448 0016 0023     		movs	r3, #0
 1449 0018 A7F8B830 		strh	r3, [r7, #184]	@ movhi
 1450 001c 0023     		movs	r3, #0
 1451 001e A7F8B630 		strh	r3, [r7, #182]	@ movhi
 773:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif
 774:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_DNS_CACHE == 1 )
 775:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	char pcName[128] = ""; /*_RB_ What is the significance of 128?  Probably too big to go on the stac
 1452              		.loc 3 775 0
 1453 0022 0023     		movs	r3, #0
 1454 0024 FB60     		str	r3, [r7, #12]
 1455 0026 07F11003 		add	r3, r7, #16
 1456 002a 7C22     		movs	r2, #124
 1457 002c 1846     		mov	r0, r3
 1458 002e 0021     		movs	r1, #0
 1459 0030 FFF7FEFF 		bl	memset
 776:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif
 777:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 778:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 1460              		.loc 3 778 0
 1461 0034 7B68     		ldr	r3, [r7, #4]
 1462 0036 C7F8C430 		str	r3, [r7, #196]
 779:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 780:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 1463              		.loc 3 780 0
 1464 003a D7F8C430 		ldr	r3, [r7, #196]
 1465 003e 1B88     		ldrh	r3, [r3]	@ unaligned
 1466 0040 9AB2     		uxth	r2, r3
 1467 0042 3B68     		ldr	r3, [r7]
 1468 0044 9BB2     		uxth	r3, r3
 1469 0046 9A42     		cmp	r2, r3
 1470 0048 40F03082 		bne	.L83
 781:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 782:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Start at the first byte after the header. */
 783:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 1471              		.loc 3 783 0
 1472 004c 7B68     		ldr	r3, [r7, #4]
 1473 004e 0C33     		adds	r3, r3, #12
ARM GAS  /tmp/ccRjHDdd.s 			page 57


 1474 0050 C7F8BC30 		str	r3, [r7, #188]
 784:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 785:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Skip any question records. */
 786:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 1475              		.loc 3 786 0
 1476 0054 D7F8C430 		ldr	r3, [r7, #196]
 1477 0058 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1478 005a 9BB2     		uxth	r3, r3
 1479 005c 1B02     		lsls	r3, r3, #8
 1480 005e 9AB2     		uxth	r2, r3
 1481 0060 D7F8C430 		ldr	r3, [r7, #196]
 1482 0064 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1483 0066 9BB2     		uxth	r3, r3
 1484 0068 1B0A     		lsrs	r3, r3, #8
 1485 006a 9BB2     		uxth	r3, r3
 1486 006c 9BB2     		uxth	r3, r3
 1487 006e 1343     		orrs	r3, r3, r2
 1488 0070 9BB2     		uxth	r3, r3
 1489 0072 A7F8AA30 		strh	r3, [r7, #170]	@ movhi
 787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		for( x = 0; x < usQuestions; x++ )
 1490              		.loc 3 787 0
 1491 0076 0023     		movs	r3, #0
 1492 0078 A7F8BA30 		strh	r3, [r7, #186]	@ movhi
 1493 007c 36E0     		b	.L84
 1494              	.L88:
 788:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 789:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			#if( ipconfigUSE_LLMNR == 1 )
 790:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 791:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( x == 0 )
 1495              		.loc 3 791 0
 1496 007e B7F8BA30 		ldrh	r3, [r7, #186]
 1497 0082 002B     		cmp	r3, #0
 1498 0084 03D1     		bne	.L85
 792:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 793:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pcRequestedName = ( char * ) pucByte;
 1499              		.loc 3 793 0
 1500 0086 D7F8BC30 		ldr	r3, [r7, #188]
 1501 008a C7F8C030 		str	r3, [r7, #192]
 1502              	.L85:
 794:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 795:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 796:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			#endif
 797:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 798:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_DNS_CACHE == 1 )
 799:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( x == 0 )
 1503              		.loc 3 799 0
 1504 008e B7F8BA30 		ldrh	r3, [r7, #186]
 1505 0092 002B     		cmp	r3, #0
 1506 0094 0AD1     		bne	.L86
 800:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 801:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				pucByte = prvReadNameField( pucByte, pcName, sizeof( pcName ) );
 1507              		.loc 3 801 0
 1508 0096 07F10C03 		add	r3, r7, #12
 1509 009a D7F8BC00 		ldr	r0, [r7, #188]
 1510 009e 1946     		mov	r1, r3
 1511 00a0 8022     		movs	r2, #128
 1512 00a2 FFF7FEFF 		bl	prvReadNameField
ARM GAS  /tmp/ccRjHDdd.s 			page 58


 1513 00a6 C7F8BC00 		str	r0, [r7, #188]
 1514 00aa 05E0     		b	.L87
 1515              	.L86:
 802:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 803:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			else
 804:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_DNS_CACHE */
 805:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 806:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Skip the variable length pcName field. */
 807:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				pucByte = prvSkipNameField( pucByte );
 1516              		.loc 3 807 0
 1517 00ac D7F8BC00 		ldr	r0, [r7, #188]
 1518 00b0 FFF7FEFF 		bl	prvSkipNameField
 1519 00b4 C7F8BC00 		str	r0, [r7, #188]
 1520              	.L87:
 808:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 809:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 810:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			#if( ipconfigUSE_LLMNR == 1 )
 811:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 812:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* usChar2u16 returns value in host endianness */
 813:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				usType = usChar2u16( pucByte );
 1521              		.loc 3 813 0 discriminator 2
 1522 00b8 D7F8BC00 		ldr	r0, [r7, #188]
 1523 00bc FFF7FEFF 		bl	usChar2u16
 1524 00c0 0346     		mov	r3, r0
 1525 00c2 A7F8B830 		strh	r3, [r7, #184]	@ movhi
 814:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				usClass = usChar2u16( pucByte + 2 );
 1526              		.loc 3 814 0 discriminator 2
 1527 00c6 D7F8BC30 		ldr	r3, [r7, #188]
 1528 00ca 0233     		adds	r3, r3, #2
 1529 00cc 1846     		mov	r0, r3
 1530 00ce FFF7FEFF 		bl	usChar2u16
 1531 00d2 0346     		mov	r3, r0
 1532 00d4 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 815:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 816:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			#endif /* ipconfigUSE_LLMNR */
 817:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 818:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* Skip the type and class fields. */
 819:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucByte += sizeof( uint32_t );
 1533              		.loc 3 819 0 discriminator 2
 1534 00d8 D7F8BC30 		ldr	r3, [r7, #188]
 1535 00dc 0433     		adds	r3, r3, #4
 1536 00de C7F8BC30 		str	r3, [r7, #188]
 787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 1537              		.loc 3 787 0 discriminator 2
 1538 00e2 B7F8BA30 		ldrh	r3, [r7, #186]
 1539 00e6 0133     		adds	r3, r3, #1
 1540 00e8 A7F8BA30 		strh	r3, [r7, #186]	@ movhi
 1541              	.L84:
 787:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 1542              		.loc 3 787 0 is_stmt 0 discriminator 1
 1543 00ec B7F8BA20 		ldrh	r2, [r7, #186]
 1544 00f0 B7F8AA30 		ldrh	r3, [r7, #170]
 1545 00f4 9A42     		cmp	r2, r3
 1546 00f6 C2D3     		bcc	.L88
 820:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 821:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 822:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Search through the answers records. */
ARM GAS  /tmp/ccRjHDdd.s 			page 59


 823:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 1547              		.loc 3 823 0 is_stmt 1
 1548 00f8 D7F8C430 		ldr	r3, [r7, #196]
 1549 00fc DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1550 00fe 9BB2     		uxth	r3, r3
 1551 0100 1B02     		lsls	r3, r3, #8
 1552 0102 9AB2     		uxth	r2, r3
 1553 0104 D7F8C430 		ldr	r3, [r7, #196]
 1554 0108 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1555 010a 9BB2     		uxth	r3, r3
 1556 010c 1B0A     		lsrs	r3, r3, #8
 1557 010e 9BB2     		uxth	r3, r3
 1558 0110 9BB2     		uxth	r3, r3
 1559 0112 1343     		orrs	r3, r3, r2
 1560 0114 9BB2     		uxth	r3, r3
 1561 0116 9AB2     		uxth	r2, r3
 1562 0118 D7F8C430 		ldr	r3, [r7, #196]
 1563 011c DA80     		strh	r2, [r3, #6]	@ unaligned
 824:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 825:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 1564              		.loc 3 825 0
 1565 011e D7F8C430 		ldr	r3, [r7, #196]
 1566 0122 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1567 0124 9BB2     		uxth	r3, r3
 1568 0126 03F47863 		and	r3, r3, #3968
 1569 012a 802B     		cmp	r3, #128
 1570 012c 72D1     		bne	.L89
 826:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 1571              		.loc 3 827 0
 1572 012e 0023     		movs	r3, #0
 1573 0130 A7F8BA30 		strh	r3, [r7, #186]	@ movhi
 1574 0134 64E0     		b	.L90
 1575              	.L94:
 828:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 829:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				pucByte = prvSkipNameField( pucByte );
 1576              		.loc 3 829 0
 1577 0136 D7F8BC00 		ldr	r0, [r7, #188]
 1578 013a FFF7FEFF 		bl	prvSkipNameField
 1579 013e C7F8BC00 		str	r0, [r7, #188]
 830:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 831:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Is the type field that of an A record? */
 832:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 1580              		.loc 3 832 0
 1581 0142 D7F8BC00 		ldr	r0, [r7, #188]
 1582 0146 FFF7FEFF 		bl	usChar2u16
 1583 014a 0346     		mov	r3, r0
 1584 014c 012B     		cmp	r3, #1
 1585 014e 2FD1     		bne	.L91
 833:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 834:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* This is the required record.  Skip the type, class, and
 835:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					time to live fields, plus the first byte of the data
 836:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					length. */
 837:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) + sizeof( uint8_t ) );
 1586              		.loc 3 837 0
 1587 0150 D7F8BC30 		ldr	r3, [r7, #188]
 1588 0154 0933     		adds	r3, r3, #9
ARM GAS  /tmp/ccRjHDdd.s 			page 60


 1589 0156 C7F8BC30 		str	r3, [r7, #188]
 838:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 839:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* Sanity check the data length. */
 840:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					if( ( size_t ) *pucByte == sizeof( uint32_t ) )
 1590              		.loc 3 840 0
 1591 015a D7F8BC30 		ldr	r3, [r7, #188]
 1592 015e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1593 0160 042B     		cmp	r3, #4
 1594 0162 24D1     		bne	.L92
 841:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					{
 842:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						/* Skip the second byte of the length. */
 843:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pucByte++;
 1595              		.loc 3 843 0
 1596 0164 D7F8BC30 		ldr	r3, [r7, #188]
 1597 0168 0133     		adds	r3, r3, #1
 1598 016a C7F8BC30 		str	r3, [r7, #188]
 844:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 845:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						/* Copy the IP address out of the record. */
 846:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						memcpy( ( void * ) &ulIPAddress, ( void * ) pucByte, sizeof( uint32_t ) );
 1599              		.loc 3 846 0
 1600 016e 07F19003 		add	r3, r7, #144
 1601 0172 1846     		mov	r0, r3
 1602 0174 D7F8BC10 		ldr	r1, [r7, #188]
 1603 0178 0422     		movs	r2, #4
 1604 017a FFF7FEFF 		bl	memcpy
 847:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 848:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						#if( ipconfigUSE_DNS_CACHE == 1 )
 849:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						{
 850:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 							prvProcessDNSCache( pcName, &ulIPAddress, pdFALSE );
 1605              		.loc 3 850 0
 1606 017e 07F10C02 		add	r2, r7, #12
 1607 0182 07F19003 		add	r3, r7, #144
 1608 0186 1046     		mov	r0, r2
 1609 0188 1946     		mov	r1, r3
 1610 018a 0022     		movs	r2, #0
 1611 018c FFF7FEFF 		bl	prvProcessDNSCache
 851:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						}
 852:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						#endif /* ipconfigUSE_DNS_CACHE */
 853:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						#if( ipconfigDNS_USE_CALLBACKS != 0 )
 854:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						{
 855:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 							/* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
 856:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
 1612              		.loc 3 856 0
 1613 0190 D7F8C430 		ldr	r3, [r7, #196]
 1614 0194 1B88     		ldrh	r3, [r3]	@ unaligned
 1615 0196 9BB2     		uxth	r3, r3
 1616 0198 1946     		mov	r1, r3
 1617 019a D7F89030 		ldr	r3, [r7, #144]
 1618 019e 07F10C02 		add	r2, r7, #12
 1619 01a2 0846     		mov	r0, r1
 1620 01a4 1146     		mov	r1, r2
 1621 01a6 1A46     		mov	r2, r3
 1622 01a8 FFF7FEFF 		bl	vDNSDoCallback
 857:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						}
 858:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						#endif	/* ipconfigDNS_USE_CALLBACKS != 0 */
 859:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					}
 860:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
ARM GAS  /tmp/ccRjHDdd.s 			page 61


 861:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					break;
 1623              		.loc 3 861 0
 1624 01ac 31E0     		b	.L93
 1625              	.L92:
 1626 01ae 30E0     		b	.L93
 1627              	.L91:
 862:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 863:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				else
 864:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 865:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* Skip the type, class and time to live fields. */
 866:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) );
 1628              		.loc 3 866 0 discriminator 2
 1629 01b0 D7F8BC30 		ldr	r3, [r7, #188]
 1630 01b4 0833     		adds	r3, r3, #8
 1631 01b6 C7F8BC30 		str	r3, [r7, #188]
 867:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 868:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* Determine the length of the data in the field. */
 869:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					memcpy( ( void * ) &usDataLength, ( void * ) pucByte, sizeof( uint16_t ) );
 1632              		.loc 3 869 0 discriminator 2
 1633 01ba 07F18E03 		add	r3, r7, #142
 1634 01be 1846     		mov	r0, r3
 1635 01c0 D7F8BC10 		ldr	r1, [r7, #188]
 1636 01c4 0222     		movs	r2, #2
 1637 01c6 FFF7FEFF 		bl	memcpy
 870:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					usDataLength = FreeRTOS_ntohs( usDataLength );
 1638              		.loc 3 870 0 discriminator 2
 1639 01ca B7F88E30 		ldrh	r3, [r7, #142]
 1640 01ce 1B02     		lsls	r3, r3, #8
 1641 01d0 9AB2     		uxth	r2, r3
 1642 01d2 B7F88E30 		ldrh	r3, [r7, #142]
 1643 01d6 1B0A     		lsrs	r3, r3, #8
 1644 01d8 9BB2     		uxth	r3, r3
 1645 01da 9BB2     		uxth	r3, r3
 1646 01dc 1343     		orrs	r3, r3, r2
 1647 01de 9BB2     		uxth	r3, r3
 1648 01e0 9BB2     		uxth	r3, r3
 1649 01e2 A7F88E30 		strh	r3, [r7, #142]	@ movhi
 871:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 872:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* Jump over the data length bytes, and the data itself. */
 873:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pucByte += usDataLength + sizeof( uint16_t );
 1650              		.loc 3 873 0 discriminator 2
 1651 01e6 B7F88E30 		ldrh	r3, [r7, #142]
 1652 01ea 0233     		adds	r3, r3, #2
 1653 01ec D7F8BC20 		ldr	r2, [r7, #188]
 1654 01f0 1344     		add	r3, r3, r2
 1655 01f2 C7F8BC30 		str	r3, [r7, #188]
 827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 1656              		.loc 3 827 0 discriminator 2
 1657 01f6 B7F8BA30 		ldrh	r3, [r7, #186]
 1658 01fa 0133     		adds	r3, r3, #1
 1659 01fc A7F8BA30 		strh	r3, [r7, #186]	@ movhi
 1660              	.L90:
 827:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 1661              		.loc 3 827 0 is_stmt 0 discriminator 1
 1662 0200 D7F8C430 		ldr	r3, [r7, #196]
 1663 0204 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1664 0206 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccRjHDdd.s 			page 62


 1665 0208 B7F8BA20 		ldrh	r2, [r7, #186]
 1666 020c 9A42     		cmp	r2, r3
 1667 020e 92D3     		bcc	.L94
 1668 0210 4CE1     		b	.L83
 1669              	.L93:
 1670 0212 4BE1     		b	.L83
 1671              	.L89:
 874:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 875:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 876:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 877:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_LLMNR == 1 )
 878:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 1672              		.loc 3 878 0 is_stmt 1
 1673 0214 B7F8AA30 		ldrh	r3, [r7, #170]
 1674 0218 002B     		cmp	r3, #0
 1675 021a 00F04781 		beq	.L83
 1676              		.loc 3 878 0 is_stmt 0 discriminator 1
 1677 021e B7F8B830 		ldrh	r3, [r7, #184]
 1678 0222 012B     		cmp	r3, #1
 1679 0224 40F04281 		bne	.L83
 1680              		.loc 3 878 0 discriminator 2
 1681 0228 B7F8B630 		ldrh	r3, [r7, #182]
 1682 022c 012B     		cmp	r3, #1
 1683 022e 40F03D81 		bne	.L83
 879:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 880:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* If this is not a reply to our DNS request, it might an LLMNR
 881:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			request. */
 882:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 1684              		.loc 3 882 0 is_stmt 1
 1685 0232 D7F8C030 		ldr	r3, [r7, #192]
 1686 0236 0133     		adds	r3, r3, #1
 1687 0238 1846     		mov	r0, r3
 1688 023a FFF7FEFF 		bl	xApplicationDNSQueryHook
 1689 023e 0346     		mov	r3, r0
 1690 0240 002B     		cmp	r3, #0
 1691 0242 00F03381 		beq	.L83
 1692              	.LBB6:
 883:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 884:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			int16_t usLength;
 885:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 1693              		.loc 3 885 0
 1694 0246 0023     		movs	r3, #0
 1695 0248 C7F8B030 		str	r3, [r7, #176]
 886:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadB
 1696              		.loc 3 886 0
 1697 024c 7868     		ldr	r0, [r7, #4]
 1698 024e FFF7FEFF 		bl	pxUDPPayloadBuffer_to_NetworkBuffer
 1699 0252 C7F8AC00 		str	r0, [r7, #172]
 887:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			LLMNRAnswer_t *pxAnswer;
 888:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 889:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 1700              		.loc 3 889 0
 1701 0256 984B     		ldr	r3, .L98
 1702 0258 1B68     		ldr	r3, [r3]
 1703 025a 002B     		cmp	r3, #0
 1704 025c 44D1     		bne	.L95
 1705              		.loc 3 889 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccRjHDdd.s 			page 63


 1706 025e D7F8AC30 		ldr	r3, [r7, #172]
 1707 0262 002B     		cmp	r3, #0
 1708 0264 40D0     		beq	.L95
 1709              	.LBB7:
 890:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 1710              		.loc 3 891 0 is_stmt 1
 1711 0266 D7F8AC30 		ldr	r3, [r7, #172]
 1712 026a DB69     		ldr	r3, [r3, #28]
 892:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 1713              		.loc 3 892 0
 1714 026c 2A33     		adds	r3, r3, #42
 891:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 1715              		.loc 3 891 0
 1716 026e C7F8A430 		str	r3, [r7, #164]
 893:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 894:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* The field xDataLength was set to the length of the UDP payload.
 895:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					The answer (reply) will be longer than the request, so the packet
 896:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					must be duplicaed into a bigger buffer */
 897:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxNetworkBuffer->xDataLength = xDataLength;
 1717              		.loc 3 897 0
 1718 0272 D7F8A420 		ldr	r2, [r7, #164]
 1719 0276 D7F8AC30 		ldr	r3, [r7, #172]
 1720 027a DA61     		str	r2, [r3, #28]
 898:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 1721              		.loc 3 898 0
 1722 027c D7F8A430 		ldr	r3, [r7, #164]
 1723 0280 1033     		adds	r3, r3, #16
 1724 0282 D7F8AC00 		ldr	r0, [r7, #172]
 1725 0286 1946     		mov	r1, r3
 1726 0288 FFF7FEFF 		bl	pxDuplicateNetworkBufferWithDescriptor
 1727 028c C7F8B000 		str	r0, [r7, #176]
 899:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					if( pxNewBuffer != NULL )
 1728              		.loc 3 899 0
 1729 0290 D7F8B030 		ldr	r3, [r7, #176]
 1730 0294 002B     		cmp	r3, #0
 1731 0296 24D0     		beq	.L96
 1732              	.LBB8:
 900:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					{
 901:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					BaseType_t xOffset1, xOffset2;
 902:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 903:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 1733              		.loc 3 903 0
 1734 0298 D7F8BC20 		ldr	r2, [r7, #188]
 1735 029c 7B68     		ldr	r3, [r7, #4]
 1736 029e D31A     		subs	r3, r2, r3
 1737 02a0 C7F8A030 		str	r3, [r7, #160]
 904:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 1738              		.loc 3 904 0
 1739 02a4 D7F8C020 		ldr	r2, [r7, #192]
 1740 02a8 7B68     		ldr	r3, [r7, #4]
 1741 02aa D31A     		subs	r3, r2, r3
 1742 02ac C7F89C30 		str	r3, [r7, #156]
 905:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 906:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pxNetworkBuffer = pxNewBuffer;
 1743              		.loc 3 906 0
 1744 02b0 D7F8B030 		ldr	r3, [r7, #176]
ARM GAS  /tmp/ccRjHDdd.s 			page 64


 1745 02b4 C7F8AC30 		str	r3, [r7, #172]
 907:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 1746              		.loc 3 907 0
 1747 02b8 D7F8AC30 		ldr	r3, [r7, #172]
 1748 02bc 9B69     		ldr	r3, [r3, #24]
 1749 02be 2A33     		adds	r3, r3, #42
 1750 02c0 7B60     		str	r3, [r7, #4]
 908:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 909:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pucByte = pucUDPPayloadBuffer + xOffset1;
 1751              		.loc 3 909 0
 1752 02c2 D7F8A030 		ldr	r3, [r7, #160]
 1753 02c6 7A68     		ldr	r2, [r7, #4]
 1754 02c8 1344     		add	r3, r3, r2
 1755 02ca C7F8BC30 		str	r3, [r7, #188]
 910:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 1756              		.loc 3 910 0
 1757 02ce D7F89C30 		ldr	r3, [r7, #156]
 1758 02d2 7A68     		ldr	r2, [r7, #4]
 1759 02d4 1344     		add	r3, r3, r2
 1760 02d6 C7F8C030 		str	r3, [r7, #192]
 911:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 1761              		.loc 3 911 0
 1762 02da 7B68     		ldr	r3, [r7, #4]
 1763 02dc C7F8C430 		str	r3, [r7, #196]
 1764              	.LBE8:
 1765 02e0 02E0     		b	.L95
 1766              	.L96:
 912:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 913:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					}
 914:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					else
 915:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					{
 916:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						/* Just to indicate that the message may not be answered. */
 917:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pxNetworkBuffer = NULL;
 1767              		.loc 3 917 0
 1768 02e2 0023     		movs	r3, #0
 1769 02e4 C7F8AC30 		str	r3, [r7, #172]
 1770              	.L95:
 1771              	.LBE7:
 918:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					}
 919:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 920:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( pxNetworkBuffer != NULL )
 1772              		.loc 3 920 0
 1773 02e8 D7F8AC30 		ldr	r3, [r7, #172]
 1774 02ec 002B     		cmp	r3, #0
 1775 02ee 00F0DD80 		beq	.L83
 921:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 922:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxAnswer = (LLMNRAnswer_t *)pucByte;
 1776              		.loc 3 922 0
 1777 02f2 D7F8BC30 		ldr	r3, [r7, #188]
 1778 02f6 C7F89830 		str	r3, [r7, #152]
 923:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 924:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* We leave 'usIdentifier' and 'usQuestions' untouched */
 925:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set th
 1779              		.loc 3 925 0
 1780 02fa D7F8C430 		ldr	r3, [r7, #196]
 1781 02fe 0233     		adds	r3, r3, #2
 1782 0300 8022     		movs	r2, #128
ARM GAS  /tmp/ccRjHDdd.s 			page 65


 1783 0302 1A70     		strb	r2, [r3]
 1784 0304 D7F8C430 		ldr	r3, [r7, #196]
 1785 0308 0333     		adds	r3, r3, #3
 1786 030a 0022     		movs	r2, #0
 1787 030c 1A70     		strb	r2, [r3]
 926:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 1788              		.loc 3 926 0
 1789 030e D7F8C430 		ldr	r3, [r7, #196]
 1790 0312 0633     		adds	r3, r3, #6
 1791 0314 0022     		movs	r2, #0
 1792 0316 1A70     		strb	r2, [r3]
 1793 0318 D7F8C430 		ldr	r3, [r7, #196]
 1794 031c 0733     		adds	r3, r3, #7
 1795 031e 0122     		movs	r2, #1
 1796 0320 1A70     		strb	r2, [r3]
 927:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 1797              		.loc 3 927 0
 1798 0322 D7F8C430 		ldr	r3, [r7, #196]
 1799 0326 0833     		adds	r3, r3, #8
 1800 0328 0022     		movs	r2, #0
 1801 032a 1A70     		strb	r2, [r3]
 1802 032c D7F8C430 		ldr	r3, [r7, #196]
 1803 0330 0933     		adds	r3, r3, #9
 1804 0332 0022     		movs	r2, #0
 1805 0334 1A70     		strb	r2, [r3]
 928:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 1806              		.loc 3 928 0
 1807 0336 D7F8C430 		ldr	r3, [r7, #196]
 1808 033a 0A33     		adds	r3, r3, #10
 1809 033c 0022     		movs	r2, #0
 1810 033e 1A70     		strb	r2, [r3]
 1811 0340 D7F8C430 		ldr	r3, [r7, #196]
 1812 0344 0B33     		adds	r3, r3, #11
 1813 0346 0022     		movs	r2, #0
 1814 0348 1A70     		strb	r2, [r3]
 929:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 930:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 1815              		.loc 3 930 0
 1816 034a D7F89830 		ldr	r3, [r7, #152]
 1817 034e C022     		movs	r2, #192
 1818 0350 1A70     		strb	r2, [r3]
 931:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 1819              		.loc 3 931 0
 1820 0352 D7F8C020 		ldr	r2, [r7, #192]
 1821 0356 7B68     		ldr	r3, [r7, #4]
 1822 0358 D31A     		subs	r3, r2, r3
 1823 035a DAB2     		uxtb	r2, r3
 1824 035c D7F89830 		ldr	r3, [r7, #152]
 1825 0360 5A70     		strb	r2, [r3, #1]
 932:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 933:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 1826              		.loc 3 933 0
 1827 0362 D7F89830 		ldr	r3, [r7, #152]
 1828 0366 0233     		adds	r3, r3, #2
 1829 0368 0022     		movs	r2, #0
 1830 036a 1A70     		strb	r2, [r3]
 1831 036c D7F89830 		ldr	r3, [r7, #152]
ARM GAS  /tmp/ccRjHDdd.s 			page 66


 1832 0370 0333     		adds	r3, r3, #3
 1833 0372 0122     		movs	r2, #1
 1834 0374 1A70     		strb	r2, [r3]
 934:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 1835              		.loc 3 934 0
 1836 0376 D7F89830 		ldr	r3, [r7, #152]
 1837 037a 0433     		adds	r3, r3, #4
 1838 037c 0022     		movs	r2, #0
 1839 037e 1A70     		strb	r2, [r3]
 1840 0380 D7F89830 		ldr	r3, [r7, #152]
 1841 0384 0533     		adds	r3, r3, #5
 1842 0386 0122     		movs	r2, #1
 1843 0388 1A70     		strb	r2, [r3]
 935:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 1844              		.loc 3 935 0
 1845 038a D7F89830 		ldr	r3, [r7, #152]
 1846 038e 0633     		adds	r3, r3, #6
 1847 0390 0022     		movs	r2, #0
 1848 0392 1A70     		strb	r2, [r3]
 1849 0394 D7F89830 		ldr	r3, [r7, #152]
 1850 0398 0733     		adds	r3, r3, #7
 1851 039a 0422     		movs	r2, #4
 1852 039c 1A70     		strb	r2, [r3]
 1853 039e D7F89830 		ldr	r3, [r7, #152]
 1854 03a2 0833     		adds	r3, r3, #8
 1855 03a4 9322     		movs	r2, #147
 1856 03a6 1A70     		strb	r2, [r3]
 1857 03a8 D7F89830 		ldr	r3, [r7, #152]
 1858 03ac 0933     		adds	r3, r3, #9
 1859 03ae E022     		movs	r2, #224
 1860 03b0 1A70     		strb	r2, [r3]
 936:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 1861              		.loc 3 936 0
 1862 03b2 D7F89830 		ldr	r3, [r7, #152]
 1863 03b6 0A33     		adds	r3, r3, #10
 1864 03b8 0022     		movs	r2, #0
 1865 03ba 1A70     		strb	r2, [r3]
 1866 03bc D7F89830 		ldr	r3, [r7, #152]
 1867 03c0 0B33     		adds	r3, r3, #11
 1868 03c2 0422     		movs	r2, #4
 1869 03c4 1A70     		strb	r2, [r3]
 937:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER
 1870              		.loc 3 937 0
 1871 03c6 D7F89830 		ldr	r3, [r7, #152]
 1872 03ca 0C33     		adds	r3, r3, #12
 1873 03cc 3B4A     		ldr	r2, .L98+4
 1874 03ce 5269     		ldr	r2, [r2, #20]
 1875 03d0 1106     		lsls	r1, r2, #24
 1876 03d2 3A4A     		ldr	r2, .L98+4
 1877 03d4 5269     		ldr	r2, [r2, #20]
 1878 03d6 02F47F42 		and	r2, r2, #65280
 1879 03da 1202     		lsls	r2, r2, #8
 1880 03dc 1143     		orrs	r1, r1, r2
 1881 03de 374A     		ldr	r2, .L98+4
 1882 03e0 5269     		ldr	r2, [r2, #20]
 1883 03e2 02F47F02 		and	r2, r2, #16711680
 1884 03e6 120A     		lsrs	r2, r2, #8
ARM GAS  /tmp/ccRjHDdd.s 			page 67


 1885 03e8 1143     		orrs	r1, r1, r2
 1886 03ea 344A     		ldr	r2, .L98+4
 1887 03ec 5269     		ldr	r2, [r2, #20]
 1888 03ee 120E     		lsrs	r2, r2, #24
 1889 03f0 0A43     		orrs	r2, r2, r1
 1890 03f2 120E     		lsrs	r2, r2, #24
 1891 03f4 D2B2     		uxtb	r2, r2
 1892 03f6 1A70     		strb	r2, [r3]
 1893 03f8 D7F89830 		ldr	r3, [r7, #152]
 1894 03fc 0D33     		adds	r3, r3, #13
 1895 03fe 2F4A     		ldr	r2, .L98+4
 1896 0400 5269     		ldr	r2, [r2, #20]
 1897 0402 1106     		lsls	r1, r2, #24
 1898 0404 2D4A     		ldr	r2, .L98+4
 1899 0406 5269     		ldr	r2, [r2, #20]
 1900 0408 02F47F42 		and	r2, r2, #65280
 1901 040c 1202     		lsls	r2, r2, #8
 1902 040e 1143     		orrs	r1, r1, r2
 1903 0410 2A4A     		ldr	r2, .L98+4
 1904 0412 5269     		ldr	r2, [r2, #20]
 1905 0414 02F47F02 		and	r2, r2, #16711680
 1906 0418 120A     		lsrs	r2, r2, #8
 1907 041a 1143     		orrs	r1, r1, r2
 1908 041c 274A     		ldr	r2, .L98+4
 1909 041e 5269     		ldr	r2, [r2, #20]
 1910 0420 120E     		lsrs	r2, r2, #24
 1911 0422 0A43     		orrs	r2, r2, r1
 1912 0424 120C     		lsrs	r2, r2, #16
 1913 0426 D2B2     		uxtb	r2, r2
 1914 0428 1A70     		strb	r2, [r3]
 1915 042a D7F89830 		ldr	r3, [r7, #152]
 1916 042e 0E33     		adds	r3, r3, #14
 1917 0430 224A     		ldr	r2, .L98+4
 1918 0432 5269     		ldr	r2, [r2, #20]
 1919 0434 1106     		lsls	r1, r2, #24
 1920 0436 214A     		ldr	r2, .L98+4
 1921 0438 5269     		ldr	r2, [r2, #20]
 1922 043a 02F47F42 		and	r2, r2, #65280
 1923 043e 1202     		lsls	r2, r2, #8
 1924 0440 1143     		orrs	r1, r1, r2
 1925 0442 1E4A     		ldr	r2, .L98+4
 1926 0444 5269     		ldr	r2, [r2, #20]
 1927 0446 02F47F02 		and	r2, r2, #16711680
 1928 044a 120A     		lsrs	r2, r2, #8
 1929 044c 1143     		orrs	r1, r1, r2
 1930 044e 1B4A     		ldr	r2, .L98+4
 1931 0450 5269     		ldr	r2, [r2, #20]
 1932 0452 120E     		lsrs	r2, r2, #24
 1933 0454 0A43     		orrs	r2, r2, r1
 1934 0456 120A     		lsrs	r2, r2, #8
 1935 0458 D2B2     		uxtb	r2, r2
 1936 045a 1A70     		strb	r2, [r3]
 1937 045c D7F89830 		ldr	r3, [r7, #152]
 1938 0460 0F33     		adds	r3, r3, #15
 1939 0462 164A     		ldr	r2, .L98+4
 1940 0464 5269     		ldr	r2, [r2, #20]
 1941 0466 02F47F02 		and	r2, r2, #16711680
ARM GAS  /tmp/ccRjHDdd.s 			page 68


 1942 046a 120A     		lsrs	r2, r2, #8
 1943 046c D1B2     		uxtb	r1, r2
 1944 046e 134A     		ldr	r2, .L98+4
 1945 0470 5269     		ldr	r2, [r2, #20]
 1946 0472 120E     		lsrs	r2, r2, #24
 1947 0474 D2B2     		uxtb	r2, r2
 1948 0476 0A43     		orrs	r2, r2, r1
 1949 0478 D2B2     		uxtb	r2, r2
 1950 047a 1A70     		strb	r2, [r3]
 938:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 939:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 1951              		.loc 3 939 0
 1952 047c D7F8BC20 		ldr	r2, [r7, #188]
 1953 0480 7B68     		ldr	r3, [r7, #4]
 1954 0482 D31A     		subs	r3, r2, r3
 1955 0484 9BB2     		uxth	r3, r3
 1956 0486 1033     		adds	r3, r3, #16
 1957 0488 9BB2     		uxth	r3, r3
 1958 048a A7F89630 		strh	r3, [r7, #150]	@ movhi
 940:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 941:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					prvReplyDNSMessage( pxNetworkBuffer, usLength );
 1959              		.loc 3 941 0
 1960 048e B7F99630 		ldrsh	r3, [r7, #150]
 1961 0492 D7F8AC00 		ldr	r0, [r7, #172]
 1962 0496 1946     		mov	r1, r3
 1963 0498 FFF7FEFF 		bl	prvReplyDNSMessage
 942:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 943:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					if( pxNewBuffer != NULL )
 1964              		.loc 3 943 0
 1965 049c D7F8B030 		ldr	r3, [r7, #176]
 1966 04a0 002B     		cmp	r3, #0
 1967 04a2 03D0     		beq	.L83
 944:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					{
 945:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 1968              		.loc 3 945 0
 1969 04a4 D7F8B000 		ldr	r0, [r7, #176]
 1970 04a8 FFF7FEFF 		bl	vReleaseNetworkBufferAndDescriptor
 1971              	.L83:
 1972              	.LBE6:
 946:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					}
 947:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 948:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
 949:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
 950:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_LLMNR == 1 */
 951:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 952:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 953:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	return ulIPAddress;
 1973              		.loc 3 953 0
 1974 04ac D7F89030 		ldr	r3, [r7, #144]
 954:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 1975              		.loc 3 954 0
 1976 04b0 1846     		mov	r0, r3
 1977 04b2 C837     		adds	r7, r7, #200
 1978              	.LCFI79:
 1979              		.cfi_def_cfa_offset 8
 1980 04b4 BD46     		mov	sp, r7
 1981              	.LCFI80:
ARM GAS  /tmp/ccRjHDdd.s 			page 69


 1982              		.cfi_def_cfa_register 13
 1983              		@ sp needed
 1984 04b6 80BD     		pop	{r7, pc}
 1985              	.L99:
 1986              		.align	2
 1987              	.L98:
 1988 04b8 00000000 		.word	xBufferAllocFixedSize
 1989 04bc 00000000 		.word	xDefaultPartUDPPacketHeader
 1990              		.cfi_endproc
 1991              	.LFE42:
 1993              		.section	.text.prvCreateDNSSocket,"ax",%progbits
 1994              		.align	2
 1995              		.thumb
 1996              		.thumb_func
 1998              	prvCreateDNSSocket:
 1999              	.LFB43:
 955:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
 956:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 957:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_NBNS == 1 )
 958:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 959:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void prvTreatNBNS( uint8_t *pucUDPPayloadBuffer, uint32_t ulIPAddress )
 960:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 961:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint16_t usFlags, usType, usClass;
 962:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t *pucSource, *pucTarget;
 963:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t ucByte;
 964:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		uint8_t ucNBNSName[ 17 ];
 965:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 966:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		usFlags = usChar2u16( pucUDPPayloadBuffer + offsetof( NBNSRequest_t, usFlags ) );
 967:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 968:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( ( usFlags & dnsNBNS_FLAGS_OPCODE_MASK ) == dnsNBNS_FLAGS_OPCODE_QUERY )
 969:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 970:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			usType  = usChar2u16( pucUDPPayloadBuffer + offsetof( NBNSRequest_t, usType ) );
 971:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			usClass = usChar2u16( pucUDPPayloadBuffer + offsetof( NBNSRequest_t, usClass ) );
 972:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 973:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* Not used for now */
 974:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			( void )usClass;
 975:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* For NBNS a name is 16 bytes long, written with capitals only.
 976:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			Make sure that the copy is terminated with a zero. */
 977:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucTarget = ucNBNSName + sizeof(ucNBNSName ) - 2;
 978:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucTarget[ 1 ] = '\0';
 979:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 980:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* Start with decoding the last 2 bytes. */
 981:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pucSource = pucUDPPayloadBuffer + ( offsetof( NBNSRequest_t, ucName ) + ( dnsNBNS_ENCODED_NAME_L
 982:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 983:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			for( ;; )
 984:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
 985:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				ucByte = ( uint8_t ) ( ( ( pucSource[ 0 ] - 0x41 ) << 4 ) | ( pucSource[ 1 ] - 0x41 ) );
 986:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 987:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Make sure there are no trailing spaces in the name. */
 988:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( ( ucByte == ' ' ) && ( pucTarget[ 1 ] == '\0' ) )
 989:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 990:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					ucByte = '\0';
 991:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 992:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 993:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				*pucTarget = ucByte;
 994:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
 995:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( pucTarget == ucNBNSName )
ARM GAS  /tmp/ccRjHDdd.s 			page 70


 996:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
 997:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					break;
 998:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
 999:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1000:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				pucTarget -= 1;
1001:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				pucSource -= 2;
1002:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
1003:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1004:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			#if( ipconfigUSE_DNS_CACHE == 1 )
1005:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
1006:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) != 0 )
1007:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
1008:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* If this is a response from another device,
1009:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					add the name to the DNS cache */
1010:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					prvProcessDNSCache( ( char * ) ucNBNSName, &ulIPAddress, pdFALSE );
1011:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
1012:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
1013:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			#else
1014:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
1015:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Avoid compiler warnings. */
1016:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				( void ) ulIPAddress;
1017:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
1018:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			#endif /* ipconfigUSE_DNS_CACHE */
1019:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1020:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( ( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) == 0 ) &&
1021:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				( usType == dnsNBNS_TYPE_NET_BIOS ) &&
1022:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				( xApplicationDNSQueryHook( ( const char * ) ucNBNSName ) != pdFALSE ) )
1023:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
1024:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			uint16_t usLength;
1025:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			DNSMessage_t *pxMessage;
1026:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			NBNSAnswer_t *pxAnswer;
1027:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1028:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Someone is looking for a device with ucNBNSName,
1029:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				prepare a positive reply. */
1030:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayload
1031:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1032:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
1033:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
1034:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				NetworkBufferDescriptor_t *pxNewBuffer;
1035:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
1036:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1037:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
1038:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1039:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* The field xDataLength was set to the length of the UDP payload.
1040:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					The answer (reply) will be longer than the request, so the packet
1041:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					must be duplicated into a bigger buffer */
1042:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxNetworkBuffer->xDataLength = xDataLength;
1043:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
1044:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					if( pxNewBuffer != NULL )
1045:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					{
1046:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pucUDPPayloadBuffer = pxNewBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
1047:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pxNetworkBuffer = pxNewBuffer;
1048:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					}
1049:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					else
1050:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					{
1051:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						/* Just prevent that a reply will be sent */
1052:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 						pxNetworkBuffer = NULL;
ARM GAS  /tmp/ccRjHDdd.s 			page 71


1053:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					}
1054:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
1055:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1056:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Should not occur: pucUDPPayloadBuffer is part of a xNetworkBufferDescriptor */
1057:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( pxNetworkBuffer != NULL )
1058:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
1059:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxMessage = (DNSMessage_t *)pucUDPPayloadBuffer;
1060:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1061:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					/* As the fields in the structures are not word-aligned, we have to
1062:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					copy the values byte-by-byte using macro's vSetField16() and vSetField32() */
1063:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxMessage, DNSMessage_t, usFlags, dnsNBNS_QUERY_RESPONSE_FLAGS ); /* 0x8500 */
1064:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxMessage, DNSMessage_t, usQuestions, 0 );
1065:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxMessage, DNSMessage_t, usAnswers, 1 );
1066:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxMessage, DNSMessage_t, usAuthorityRRs, 0 );
1067:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxMessage, DNSMessage_t, usAdditionalRRs, 0 );
1068:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1069:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					pxAnswer = (NBNSAnswer_t *)( pucUDPPayloadBuffer + offsetof( NBNSRequest_t, usType ) );
1070:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1071:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxAnswer, NBNSAnswer_t, usType, usType );	/* Type */
1072:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxAnswer, NBNSAnswer_t, usClass, dnsNBNS_CLASS_IN );	/* Class */
1073:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField32( pxAnswer, NBNSAnswer_t, ulTTL, dnsNBNS_TTL_VALUE );
1074:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxAnswer, NBNSAnswer_t, usDataLength, 6 ); /* 6 bytes including the length field 
1075:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField16( pxAnswer, NBNSAnswer_t, usNbFlags, dnsNBNS_NAME_FLAGS );
1076:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					vSetField32( pxAnswer, NBNSAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER 
1077:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1078:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					usLength = ( uint16_t ) ( offsetof( NBNSRequest_t, usType ) + sizeof( NBNSAnswer_t ) );
1079:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1080:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					prvReplyDNSMessage( pxNetworkBuffer, usLength );
1081:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
1082:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
1083:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
1084:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
1085:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1086:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif	/* ipconfigUSE_NBNS */
1087:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
1088:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1089:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static Socket_t prvCreateDNSSocket( void )
1090:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** {
 2000              		.loc 3 1090 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 16
 2003              		@ frame_needed = 1, uses_anonymous_args = 0
 2004 0000 90B5     		push	{r4, r7, lr}
 2005              	.LCFI81:
 2006              		.cfi_def_cfa_offset 12
 2007              		.cfi_offset 4, -12
 2008              		.cfi_offset 7, -8
 2009              		.cfi_offset 14, -4
 2010 0002 87B0     		sub	sp, sp, #28
 2011              	.LCFI82:
 2012              		.cfi_def_cfa_offset 40
 2013 0004 02AF     		add	r7, sp, #8
 2014              	.LCFI83:
 2015              		.cfi_def_cfa 7, 32
1091:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** static Socket_t xSocket = NULL;
1092:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** struct freertos_sockaddr xAddress;
1093:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** BaseType_t xReturn;
ARM GAS  /tmp/ccRjHDdd.s 			page 72


1094:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** TickType_t xTimeoutTime = pdMS_TO_TICKS( 200 );
 2016              		.loc 3 1094 0
 2017 0006 C823     		movs	r3, #200
 2018 0008 3B60     		str	r3, [r7]
1095:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1096:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* This must be the first time this function has been called.  Create
1097:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	the socket. */
1098:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	xSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 2019              		.loc 3 1098 0
 2020 000a 0220     		movs	r0, #2
 2021 000c 0221     		movs	r1, #2
 2022 000e 1122     		movs	r2, #17
 2023 0010 FFF7FEFF 		bl	FreeRTOS_socket
 2024 0014 0246     		mov	r2, r0
 2025 0016 1A4B     		ldr	r3, .L104
 2026 0018 1A60     		str	r2, [r3]
1099:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1100:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Auto bind the port. */
1101:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	xAddress.sin_port = 0u;
 2027              		.loc 3 1101 0
 2028 001a 0023     		movs	r3, #0
 2029 001c FB80     		strh	r3, [r7, #6]	@ movhi
1102:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	xReturn = FreeRTOS_bind( xSocket, &xAddress, sizeof( xAddress ) );
 2030              		.loc 3 1102 0
 2031 001e 184B     		ldr	r3, .L104
 2032 0020 1A68     		ldr	r2, [r3]
 2033 0022 3B1D     		adds	r3, r7, #4
 2034 0024 1046     		mov	r0, r2
 2035 0026 1946     		mov	r1, r3
 2036 0028 0822     		movs	r2, #8
 2037 002a FFF7FEFF 		bl	FreeRTOS_bind
 2038 002e F860     		str	r0, [r7, #12]
1103:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1104:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	/* Check the bind was successful, and clean up if not. */
1105:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	if( xReturn != 0 )
 2039              		.loc 3 1105 0
 2040 0030 FB68     		ldr	r3, [r7, #12]
 2041 0032 002B     		cmp	r3, #0
 2042 0034 08D0     		beq	.L101
1106:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
1107:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		FreeRTOS_closesocket( xSocket );
 2043              		.loc 3 1107 0
 2044 0036 124B     		ldr	r3, .L104
 2045 0038 1B68     		ldr	r3, [r3]
 2046 003a 1846     		mov	r0, r3
 2047 003c FFF7FEFF 		bl	FreeRTOS_closesocket
1108:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		xSocket = NULL;
 2048              		.loc 3 1108 0
 2049 0040 0F4B     		ldr	r3, .L104
 2050 0042 0022     		movs	r2, #0
 2051 0044 1A60     		str	r2, [r3]
 2052 0046 15E0     		b	.L102
 2053              	.L101:
1109:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
1110:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	else
1111:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
1112:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Set the send and receive timeouts. */
ARM GAS  /tmp/ccRjHDdd.s 			page 73


1113:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType
 2054              		.loc 3 1113 0
 2055 0048 0D4B     		ldr	r3, .L104
 2056 004a 1A68     		ldr	r2, [r3]
 2057 004c 3C46     		mov	r4, r7
 2058 004e 0423     		movs	r3, #4
 2059 0050 0093     		str	r3, [sp]
 2060 0052 1046     		mov	r0, r2
 2061 0054 0021     		movs	r1, #0
 2062 0056 0022     		movs	r2, #0
 2063 0058 2346     		mov	r3, r4
 2064 005a FFF7FEFF 		bl	FreeRTOS_setsockopt
1114:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType
 2065              		.loc 3 1114 0
 2066 005e 084B     		ldr	r3, .L104
 2067 0060 1A68     		ldr	r2, [r3]
 2068 0062 3C46     		mov	r4, r7
 2069 0064 0423     		movs	r3, #4
 2070 0066 0093     		str	r3, [sp]
 2071 0068 1046     		mov	r0, r2
 2072 006a 0021     		movs	r1, #0
 2073 006c 0122     		movs	r2, #1
 2074 006e 2346     		mov	r3, r4
 2075 0070 FFF7FEFF 		bl	FreeRTOS_setsockopt
 2076              	.L102:
1115:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
1116:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1117:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	return xSocket;
 2077              		.loc 3 1117 0
 2078 0074 024B     		ldr	r3, .L104
 2079 0076 1B68     		ldr	r3, [r3]
1118:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** }
 2080              		.loc 3 1118 0
 2081 0078 1846     		mov	r0, r3
 2082 007a 1437     		adds	r7, r7, #20
 2083              	.LCFI84:
 2084              		.cfi_def_cfa_offset 12
 2085 007c BD46     		mov	sp, r7
 2086              	.LCFI85:
 2087              		.cfi_def_cfa_register 13
 2088              		@ sp needed
 2089 007e 90BD     		pop	{r4, r7, pc}
 2090              	.L105:
 2091              		.align	2
 2092              	.L104:
 2093 0080 00000000 		.word	xSocket.6531
 2094              		.cfi_endproc
 2095              	.LFE43:
 2097              		.section	.text.prvReplyDNSMessage,"ax",%progbits
 2098              		.align	2
 2099              		.thumb
 2100              		.thumb_func
 2102              	prvReplyDNSMessage:
 2103              	.LFB44:
1119:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
1120:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1121:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ( ipconfigUSE_NBNS == 1 ) || ( ipconfigUSE_LLMNR == 1 ) )
ARM GAS  /tmp/ccRjHDdd.s 			page 74


1122:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1123:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void prvReplyDNSMessage( NetworkBufferDescriptor_t *pxNetworkBuffer, BaseType_t lNetLength 
1124:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 2104              		.loc 3 1124 0
 2105              		.cfi_startproc
 2106              		@ args = 0, pretend = 0, frame = 24
 2107              		@ frame_needed = 1, uses_anonymous_args = 0
 2108 0000 80B5     		push	{r7, lr}
 2109              	.LCFI86:
 2110              		.cfi_def_cfa_offset 8
 2111              		.cfi_offset 7, -8
 2112              		.cfi_offset 14, -4
 2113 0002 86B0     		sub	sp, sp, #24
 2114              	.LCFI87:
 2115              		.cfi_def_cfa_offset 32
 2116 0004 00AF     		add	r7, sp, #0
 2117              	.LCFI88:
 2118              		.cfi_def_cfa_register 7
 2119 0006 7860     		str	r0, [r7, #4]
 2120 0008 3960     		str	r1, [r7]
1125:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	UDPPacket_t *pxUDPPacket;
1126:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	IPHeader_t *pxIPHeader;
1127:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	UDPHeader_t *pxUDPHeader;
1128:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1129:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 2121              		.loc 3 1129 0
 2122 000a 7B68     		ldr	r3, [r7, #4]
 2123 000c 9B69     		ldr	r3, [r3, #24]
 2124 000e 7B61     		str	r3, [r7, #20]
1130:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxIPHeader = &pxUDPPacket->xIPHeader;
 2125              		.loc 3 1130 0
 2126 0010 7B69     		ldr	r3, [r7, #20]
 2127 0012 0E33     		adds	r3, r3, #14
 2128 0014 3B61     		str	r3, [r7, #16]
1131:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxUDPHeader = &pxUDPPacket->xUDPHeader;
 2129              		.loc 3 1131 0
 2130 0016 7B69     		ldr	r3, [r7, #20]
 2131 0018 2233     		adds	r3, r3, #34
 2132 001a FB60     		str	r3, [r7, #12]
1132:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* HT: started using defines like 'ipSIZE_OF_xxx' */
1133:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_
 2133              		.loc 3 1133 0
 2134 001c 3B68     		ldr	r3, [r7]
 2135 001e 9BB2     		uxth	r3, r3
 2136 0020 1C33     		adds	r3, r3, #28
 2137 0022 9BB2     		uxth	r3, r3
 2138 0024 1B02     		lsls	r3, r3, #8
 2139 0026 9AB2     		uxth	r2, r3
 2140 0028 3B68     		ldr	r3, [r7]
 2141 002a 1C33     		adds	r3, r3, #28
 2142 002c 1B0A     		lsrs	r3, r3, #8
 2143 002e 9BB2     		uxth	r3, r3
 2144 0030 1343     		orrs	r3, r3, r2
 2145 0032 9AB2     		uxth	r2, r3
 2146 0034 3B69     		ldr	r3, [r7, #16]
 2147 0036 5A80     		strh	r2, [r3, #2]	@ unaligned
1134:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* HT:endian: should not be translated, copying from packet to packet */
ARM GAS  /tmp/ccRjHDdd.s 			page 75


1135:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 2148              		.loc 3 1135 0
 2149 0038 3B69     		ldr	r3, [r7, #16]
 2150 003a DA68     		ldr	r2, [r3, #12]	@ unaligned
 2151 003c 3B69     		ldr	r3, [r7, #16]
 2152 003e 1A61     		str	r2, [r3, #16]	@ unaligned
1136:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 2153              		.loc 3 1136 0
 2154 0040 224B     		ldr	r3, .L107
 2155 0042 5A69     		ldr	r2, [r3, #20]
 2156 0044 3B69     		ldr	r3, [r7, #16]
 2157 0046 DA60     		str	r2, [r3, #12]	@ unaligned
1137:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 2158              		.loc 3 1137 0
 2159 0048 3B69     		ldr	r3, [r7, #16]
 2160 004a 8022     		movs	r2, #128
 2161 004c 1A72     		strb	r2, [r3, #8]
1138:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 2162              		.loc 3 1138 0
 2163 004e 204B     		ldr	r3, .L107+4
 2164 0050 1B88     		ldrh	r3, [r3]
 2165 0052 1B02     		lsls	r3, r3, #8
 2166 0054 9AB2     		uxth	r2, r3
 2167 0056 1E4B     		ldr	r3, .L107+4
 2168 0058 1B88     		ldrh	r3, [r3]
 2169 005a 1B0A     		lsrs	r3, r3, #8
 2170 005c 9BB2     		uxth	r3, r3
 2171 005e 9BB2     		uxth	r3, r3
 2172 0060 1343     		orrs	r3, r3, r2
 2173 0062 9BB2     		uxth	r3, r3
 2174 0064 9AB2     		uxth	r2, r3
 2175 0066 3B69     		ldr	r3, [r7, #16]
 2176 0068 9A80     		strh	r2, [r3, #4]	@ unaligned
1139:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		usPacketIdentifier++;
 2177              		.loc 3 1139 0
 2178 006a 194B     		ldr	r3, .L107+4
 2179 006c 1B88     		ldrh	r3, [r3]
 2180 006e 0133     		adds	r3, r3, #1
 2181 0070 9AB2     		uxth	r2, r3
 2182 0072 174B     		ldr	r3, .L107+4
 2183 0074 1A80     		strh	r2, [r3]	@ movhi
1140:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 2184              		.loc 3 1140 0
 2185 0076 3B68     		ldr	r3, [r7]
 2186 0078 9BB2     		uxth	r3, r3
 2187 007a 0833     		adds	r3, r3, #8
 2188 007c 9BB2     		uxth	r3, r3
 2189 007e 1B02     		lsls	r3, r3, #8
 2190 0080 9AB2     		uxth	r2, r3
 2191 0082 3B68     		ldr	r3, [r7]
 2192 0084 0833     		adds	r3, r3, #8
 2193 0086 1B0A     		lsrs	r3, r3, #8
 2194 0088 9BB2     		uxth	r3, r3
 2195 008a 1343     		orrs	r3, r3, r2
 2196 008c 9AB2     		uxth	r2, r3
 2197 008e FB68     		ldr	r3, [r7, #12]
 2198 0090 9A80     		strh	r2, [r3, #4]	@ unaligned
ARM GAS  /tmp/ccRjHDdd.s 			page 76


 2199              	.LBB9:
1141:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 2200              		.loc 3 1141 0
 2201 0092 7B69     		ldr	r3, [r7, #20]
 2202 0094 93F82220 		ldrb	r2, [r3, #34]	@ zero_extendqisi2
 2203 0098 93F82330 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 2204 009c 1B02     		lsls	r3, r3, #8
 2205 009e 1343     		orrs	r3, r3, r2
 2206 00a0 7B81     		strh	r3, [r7, #10]	@ movhi
 2207 00a2 7B69     		ldr	r3, [r7, #20]
 2208 00a4 9B8C     		ldrh	r3, [r3, #36]	@ unaligned
 2209 00a6 9AB2     		uxth	r2, r3
 2210 00a8 7B69     		ldr	r3, [r7, #20]
 2211 00aa 5A84     		strh	r2, [r3, #34]	@ unaligned
 2212 00ac 7B69     		ldr	r3, [r7, #20]
 2213 00ae 7A89     		ldrh	r2, [r7, #10]	@ movhi
 2214 00b0 9A84     		strh	r2, [r3, #36]	@ unaligned
 2215              	.LBE9:
1142:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1143:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
1144:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
1145:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* calculate the IP header checksum */
1146:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pxIPHeader->usHeaderChecksum       = 0x00;
1147:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pxIPHeader->usHeaderChecksum       = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVer
1148:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			pxIPHeader->usHeaderChecksum       = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
1149:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1150:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			/* calculate the UDP checksum for outgoing package */
1151:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, pdTRUE );
1152:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
1153:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		#endif
1154:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1155:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* Important: tell NIC driver how many bytes must be sent */
1156:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HE
 2216              		.loc 3 1156 0
 2217 00b2 3B68     		ldr	r3, [r7]
 2218 00b4 03F12A02 		add	r2, r3, #42
 2219 00b8 7B68     		ldr	r3, [r7, #4]
 2220 00ba DA61     		str	r2, [r3, #28]
1157:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1158:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* This function will fill in the eth addresses and send the packet */
1159:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 2221              		.loc 3 1159 0
 2222 00bc 7868     		ldr	r0, [r7, #4]
 2223 00be 0021     		movs	r1, #0
 2224 00c0 FFF7FEFF 		bl	vReturnEthernetFrame
1160:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 2225              		.loc 3 1160 0
 2226 00c4 1837     		adds	r7, r7, #24
 2227              	.LCFI89:
 2228              		.cfi_def_cfa_offset 8
 2229 00c6 BD46     		mov	sp, r7
 2230              	.LCFI90:
 2231              		.cfi_def_cfa_register 13
 2232              		@ sp needed
 2233 00c8 80BD     		pop	{r7, pc}
 2234              	.L108:
 2235 00ca 00BF     		.align	2
ARM GAS  /tmp/ccRjHDdd.s 			page 77


 2236              	.L107:
 2237 00cc 00000000 		.word	xDefaultPartUDPPacketHeader
 2238 00d0 00000000 		.word	usPacketIdentifier
 2239              		.cfi_endproc
 2240              	.LFE44:
 2242              		.section	.text.prvProcessDNSCache,"ax",%progbits
 2243              		.align	2
 2244              		.thumb
 2245              		.thumb_func
 2247              	prvProcessDNSCache:
 2248              	.LFB45:
1161:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1162:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #endif /* ipconfigUSE_NBNS == 1 || ipconfigUSE_LLMNR == 1 */
1163:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** /*-----------------------------------------------------------*/
1164:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1165:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** #if( ipconfigUSE_DNS_CACHE == 1 )
1166:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1167:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, BaseType_t xLookUp )
1168:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	{
 2249              		.loc 3 1168 0
 2250              		.cfi_startproc
 2251              		@ args = 0, pretend = 0, frame = 24
 2252              		@ frame_needed = 1, uses_anonymous_args = 0
 2253 0000 80B5     		push	{r7, lr}
 2254              	.LCFI91:
 2255              		.cfi_def_cfa_offset 8
 2256              		.cfi_offset 7, -8
 2257              		.cfi_offset 14, -4
 2258 0002 86B0     		sub	sp, sp, #24
 2259              	.LCFI92:
 2260              		.cfi_def_cfa_offset 32
 2261 0004 00AF     		add	r7, sp, #0
 2262              	.LCFI93:
 2263              		.cfi_def_cfa_register 7
 2264 0006 F860     		str	r0, [r7, #12]
 2265 0008 B960     		str	r1, [r7, #8]
 2266 000a 7A60     		str	r2, [r7, #4]
1169:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	BaseType_t x;
1170:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	BaseType_t xFound = pdFALSE;
 2267              		.loc 3 1170 0
 2268 000c 0023     		movs	r3, #0
 2269 000e 3B61     		str	r3, [r7, #16]
1171:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	static BaseType_t xFreeEntry = 0;
1172:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1173:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		/* For each entry in the DNS cache table. */
1174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 2270              		.loc 3 1174 0
 2271 0010 0023     		movs	r3, #0
 2272 0012 7B61     		str	r3, [r7, #20]
 2273 0014 38E0     		b	.L110
 2274              	.L116:
1175:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
1176:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 2275              		.loc 3 1176 0
 2276 0016 3849     		ldr	r1, .L120
 2277 0018 7A69     		ldr	r2, [r7, #20]
 2278 001a 1346     		mov	r3, r2
ARM GAS  /tmp/ccRjHDdd.s 			page 78


 2279 001c 5B00     		lsls	r3, r3, #1
 2280 001e 1344     		add	r3, r3, r2
 2281 0020 DB00     		lsls	r3, r3, #3
 2282 0022 0B44     		add	r3, r3, r1
 2283 0024 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2284 0026 002B     		cmp	r3, #0
 2285 0028 00D1     		bne	.L111
1177:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
1178:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				break;
 2286              		.loc 3 1178 0
 2287 002a 30E0     		b	.L112
 2288              	.L111:
1179:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
1180:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1181:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( strncmp( xDNSCache[ x ].pcName, pcName, sizeof( xDNSCache[ x ].pcName ) ) == 0 )
 2289              		.loc 3 1181 0
 2290 002c 7A69     		ldr	r2, [r7, #20]
 2291 002e 1346     		mov	r3, r2
 2292 0030 5B00     		lsls	r3, r3, #1
 2293 0032 1344     		add	r3, r3, r2
 2294 0034 DB00     		lsls	r3, r3, #3
 2295 0036 304A     		ldr	r2, .L120
 2296 0038 1344     		add	r3, r3, r2
 2297 003a 0433     		adds	r3, r3, #4
 2298 003c 1846     		mov	r0, r3
 2299 003e F968     		ldr	r1, [r7, #12]
 2300 0040 1022     		movs	r2, #16
 2301 0042 FFF7FEFF 		bl	strncmp
 2302 0046 0346     		mov	r3, r0
 2303 0048 002B     		cmp	r3, #0
 2304 004a 1AD1     		bne	.L113
1182:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
1183:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Is this function called for a lookup or to add/update an IP address? */
1184:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( xLookUp != pdFALSE )
 2305              		.loc 3 1184 0
 2306 004c 7B68     		ldr	r3, [r7, #4]
 2307 004e 002B     		cmp	r3, #0
 2308 0050 0AD0     		beq	.L114
1185:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
1186:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					*pulIP = xDNSCache[ x ].ulIPAddress;
 2309              		.loc 3 1186 0
 2310 0052 2949     		ldr	r1, .L120
 2311 0054 7A69     		ldr	r2, [r7, #20]
 2312 0056 1346     		mov	r3, r2
 2313 0058 5B00     		lsls	r3, r3, #1
 2314 005a 1344     		add	r3, r3, r2
 2315 005c DB00     		lsls	r3, r3, #3
 2316 005e 0B44     		add	r3, r3, r1
 2317 0060 1A68     		ldr	r2, [r3]
 2318 0062 BB68     		ldr	r3, [r7, #8]
 2319 0064 1A60     		str	r2, [r3]
 2320 0066 09E0     		b	.L115
 2321              	.L114:
1187:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
1188:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				else
1189:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
1190:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					xDNSCache[ x ].ulIPAddress = *pulIP;
ARM GAS  /tmp/ccRjHDdd.s 			page 79


 2322              		.loc 3 1190 0
 2323 0068 BB68     		ldr	r3, [r7, #8]
 2324 006a 1968     		ldr	r1, [r3]
 2325 006c 2248     		ldr	r0, .L120
 2326 006e 7A69     		ldr	r2, [r7, #20]
 2327 0070 1346     		mov	r3, r2
 2328 0072 5B00     		lsls	r3, r3, #1
 2329 0074 1344     		add	r3, r3, r2
 2330 0076 DB00     		lsls	r3, r3, #3
 2331 0078 0344     		add	r3, r3, r0
 2332 007a 1960     		str	r1, [r3]
 2333              	.L115:
1191:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
1192:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1193:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				xFound = pdTRUE;
 2334              		.loc 3 1193 0
 2335 007c 0123     		movs	r3, #1
 2336 007e 3B61     		str	r3, [r7, #16]
1194:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				break;
 2337              		.loc 3 1194 0
 2338 0080 05E0     		b	.L112
 2339              	.L113:
1174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 2340              		.loc 3 1174 0 discriminator 2
 2341 0082 7B69     		ldr	r3, [r7, #20]
 2342 0084 0133     		adds	r3, r3, #1
 2343 0086 7B61     		str	r3, [r7, #20]
 2344              	.L110:
1174:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
 2345              		.loc 3 1174 0 is_stmt 0 discriminator 1
 2346 0088 7B69     		ldr	r3, [r7, #20]
 2347 008a 032B     		cmp	r3, #3
 2348 008c C3DD     		ble	.L116
 2349              	.L112:
1195:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
1196:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
1197:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1198:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( xFound == pdFALSE )
 2350              		.loc 3 1198 0 is_stmt 1
 2351 008e 3B69     		ldr	r3, [r7, #16]
 2352 0090 002B     		cmp	r3, #0
 2353 0092 2BD1     		bne	.L117
1199:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
1200:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			if( xLookUp != pdFALSE )
 2354              		.loc 3 1200 0
 2355 0094 7B68     		ldr	r3, [r7, #4]
 2356 0096 002B     		cmp	r3, #0
 2357 0098 03D0     		beq	.L118
1201:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
1202:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				*pulIP = 0;
 2358              		.loc 3 1202 0
 2359 009a BB68     		ldr	r3, [r7, #8]
 2360 009c 0022     		movs	r2, #0
 2361 009e 1A60     		str	r2, [r3]
 2362 00a0 24E0     		b	.L117
 2363              	.L118:
1203:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
ARM GAS  /tmp/ccRjHDdd.s 			page 80


1204:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			else
1205:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			{
1206:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				/* Called to add or update an item */
1207:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				strncpy( xDNSCache[ xFreeEntry ].pcName, pcName, sizeof( xDNSCache[ xFreeEntry ].pcName ) );
 2364              		.loc 3 1207 0
 2365 00a2 164B     		ldr	r3, .L120+4
 2366 00a4 1A68     		ldr	r2, [r3]
 2367 00a6 1346     		mov	r3, r2
 2368 00a8 5B00     		lsls	r3, r3, #1
 2369 00aa 1344     		add	r3, r3, r2
 2370 00ac DB00     		lsls	r3, r3, #3
 2371 00ae 124A     		ldr	r2, .L120
 2372 00b0 1344     		add	r3, r3, r2
 2373 00b2 0433     		adds	r3, r3, #4
 2374 00b4 1846     		mov	r0, r3
 2375 00b6 F968     		ldr	r1, [r7, #12]
 2376 00b8 1022     		movs	r2, #16
 2377 00ba FFF7FEFF 		bl	strncpy
1208:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 2378              		.loc 3 1208 0
 2379 00be 0F4B     		ldr	r3, .L120+4
 2380 00c0 1A68     		ldr	r2, [r3]
 2381 00c2 BB68     		ldr	r3, [r7, #8]
 2382 00c4 1968     		ldr	r1, [r3]
 2383 00c6 0C48     		ldr	r0, .L120
 2384 00c8 1346     		mov	r3, r2
 2385 00ca 5B00     		lsls	r3, r3, #1
 2386 00cc 1344     		add	r3, r3, r2
 2387 00ce DB00     		lsls	r3, r3, #3
 2388 00d0 0344     		add	r3, r3, r0
 2389 00d2 1960     		str	r1, [r3]
1209:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1210:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				xFreeEntry++;
 2390              		.loc 3 1210 0
 2391 00d4 094B     		ldr	r3, .L120+4
 2392 00d6 1B68     		ldr	r3, [r3]
 2393 00d8 0133     		adds	r3, r3, #1
 2394 00da 084A     		ldr	r2, .L120+4
 2395 00dc 1360     		str	r3, [r2]
1211:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 2396              		.loc 3 1211 0
 2397 00de 074B     		ldr	r3, .L120+4
 2398 00e0 1B68     		ldr	r3, [r3]
 2399 00e2 042B     		cmp	r3, #4
 2400 00e4 02D1     		bne	.L117
1212:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				{
1213:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 					xFreeEntry = 0;
 2401              		.loc 3 1213 0
 2402 00e6 054B     		ldr	r3, .L120+4
 2403 00e8 0022     		movs	r2, #0
 2404 00ea 1A60     		str	r2, [r3]
 2405              	.L117:
1214:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 				}
1215:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			}
1216:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
1217:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 
1218:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
ARM GAS  /tmp/ccRjHDdd.s 			page 81


 2406              		.loc 3 1218 0
 2407 00ec 7B68     		ldr	r3, [r7, #4]
 2408 00ee 002B     		cmp	r3, #0
1219:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		{
1220:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", 
1221:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 		}
1222:../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/FreeRTOS_DNS.c **** 	}
 2409              		.loc 3 1222 0
 2410 00f0 1837     		adds	r7, r7, #24
 2411              	.LCFI94:
 2412              		.cfi_def_cfa_offset 8
 2413 00f2 BD46     		mov	sp, r7
 2414              	.LCFI95:
 2415              		.cfi_def_cfa_register 13
 2416              		@ sp needed
 2417 00f4 80BD     		pop	{r7, pc}
 2418              	.L121:
 2419 00f6 00BF     		.align	2
 2420              	.L120:
 2421 00f8 00000000 		.word	xDNSCache
 2422 00fc 00000000 		.word	xFreeEntry.6550
 2423              		.cfi_endproc
 2424              	.LFE45:
 2426              		.section	.bss.usIdentifier.6436,"aw",%nobits
 2427              		.align	1
 2430              	usIdentifier.6436:
 2431 0000 0000     		.space	2
 2432              		.section	.bss.ulAddressLength.6448,"aw",%nobits
 2433              		.align	2
 2436              	ulAddressLength.6448:
 2437 0000 00000000 		.space	4
 2438              		.section	.rodata.xDefaultPartDNSHeader.6471,"a",%progbits
 2439              		.align	2
 2442              	xDefaultPartDNSHeader.6471:
 2443 0000 0000     		.short	0
 2444 0002 0100     		.short	1
 2445 0004 0001     		.short	256
 2446 0006 0000     		.short	0
 2447 0008 0000     		.short	0
 2448 000a 0000     		.short	0
 2449              		.section	.bss.xSocket.6531,"aw",%nobits
 2450              		.align	2
 2453              	xSocket.6531:
 2454 0000 00000000 		.space	4
 2455              		.section	.bss.xFreeEntry.6550,"aw",%nobits
 2456              		.align	2
 2459              	xFreeEntry.6550:
 2460 0000 00000000 		.space	4
 2461              		.text
 2462              	.Letext0:
 2463              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2464              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2465              		.file 6 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 2466              		.file 7 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2467              		.file 8 "../../../FreeRTOS_9_0/Source/include/list.h"
 2468              		.file 9 "../../../FreeRTOS_9_0/Source/include/task.h"
 2469              		.file 10 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_Sockets.h"
ARM GAS  /tmp/ccRjHDdd.s 			page 82


 2470              		.file 11 "../../../FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_DNS.h"
ARM GAS  /tmp/ccRjHDdd.s 			page 83


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FreeRTOS_DNS.c
     /tmp/ccRjHDdd.s:21     .text.FreeRTOS_min_uint32:0000000000000000 $t
     /tmp/ccRjHDdd.s:25     .text.FreeRTOS_min_uint32:0000000000000000 FreeRTOS_min_uint32
     /tmp/ccRjHDdd.s:68     .text.usChar2u16:0000000000000000 $t
     /tmp/ccRjHDdd.s:72     .text.usChar2u16:0000000000000000 usChar2u16
     /tmp/ccRjHDdd.s:124    .bss.xDNSCache:0000000000000000 $d
     /tmp/ccRjHDdd.s:127    .bss.xDNSCache:0000000000000000 xDNSCache
     /tmp/ccRjHDdd.s:134    .rodata.xLLMNR_MacAdress:0000000000000000 xLLMNR_MacAdress
     /tmp/ccRjHDdd.s:131    .rodata.xLLMNR_MacAdress:0000000000000000 $d
     /tmp/ccRjHDdd.s:142    .text.FreeRTOS_dnslookup:0000000000000000 $t
     /tmp/ccRjHDdd.s:147    .text.FreeRTOS_dnslookup:0000000000000000 FreeRTOS_dnslookup
     /tmp/ccRjHDdd.s:2247   .text.prvProcessDNSCache:0000000000000000 prvProcessDNSCache
     /tmp/ccRjHDdd.s:191    .bss.xCallbackList:0000000000000000 $d
     /tmp/ccRjHDdd.s:194    .bss.xCallbackList:0000000000000000 xCallbackList
     /tmp/ccRjHDdd.s:197    .text.FreeRTOS_gethostbyname:0000000000000000 $t
     /tmp/ccRjHDdd.s:202    .text.FreeRTOS_gethostbyname:0000000000000000 FreeRTOS_gethostbyname
     /tmp/ccRjHDdd.s:664    .text.FreeRTOS_gethostbyname_a:0000000000000000 FreeRTOS_gethostbyname_a
     /tmp/ccRjHDdd.s:241    .text.vDNSInitialise:0000000000000000 $t
     /tmp/ccRjHDdd.s:246    .text.vDNSInitialise:0000000000000000 vDNSInitialise
     /tmp/ccRjHDdd.s:268    .text.vDNSInitialise:000000000000000c $d
     /tmp/ccRjHDdd.s:273    .text.vDNSCheckCallBack:0000000000000000 $t
     /tmp/ccRjHDdd.s:278    .text.vDNSCheckCallBack:0000000000000000 vDNSCheckCallBack
     /tmp/ccRjHDdd.s:395    .text.vDNSCheckCallBack:00000000000000a4 $d
     /tmp/ccRjHDdd.s:401    .text.FreeRTOS_gethostbyname_cancel:0000000000000000 $t
     /tmp/ccRjHDdd.s:406    .text.FreeRTOS_gethostbyname_cancel:0000000000000000 FreeRTOS_gethostbyname_cancel
     /tmp/ccRjHDdd.s:440    .text.vDNSSetCallBack:0000000000000000 $t
     /tmp/ccRjHDdd.s:444    .text.vDNSSetCallBack:0000000000000000 vDNSSetCallBack
     /tmp/ccRjHDdd.s:546    .text.vDNSSetCallBack:0000000000000090 $d
     /tmp/ccRjHDdd.s:551    .text.vDNSDoCallback:0000000000000000 $t
     /tmp/ccRjHDdd.s:555    .text.vDNSDoCallback:0000000000000000 vDNSDoCallback
     /tmp/ccRjHDdd.s:653    .text.vDNSDoCallback:0000000000000078 $d
     /tmp/ccRjHDdd.s:659    .text.FreeRTOS_gethostbyname_a:0000000000000000 $t
     /tmp/ccRjHDdd.s:766    .text.prvGetHostByName:0000000000000000 prvGetHostByName
     /tmp/ccRjHDdd.s:757    .text.FreeRTOS_gethostbyname_a:0000000000000078 $d
     /tmp/ccRjHDdd.s:2430   .bss.usIdentifier.6436:0000000000000000 usIdentifier.6436
     /tmp/ccRjHDdd.s:762    .text.prvGetHostByName:0000000000000000 $t
     /tmp/ccRjHDdd.s:1998   .text.prvCreateDNSSocket:0000000000000000 prvCreateDNSSocket
     /tmp/ccRjHDdd.s:1004   .text.prvCreateDNSMessage:0000000000000000 prvCreateDNSMessage
     /tmp/ccRjHDdd.s:1422   .text.prvParseDNSReply:0000000000000000 prvParseDNSReply
     /tmp/ccRjHDdd.s:994    .text.prvGetHostByName:000000000000015c $d
     /tmp/ccRjHDdd.s:2436   .bss.ulAddressLength.6448:0000000000000000 ulAddressLength.6448
     /tmp/ccRjHDdd.s:1000   .text.prvCreateDNSMessage:0000000000000000 $t
     /tmp/ccRjHDdd.s:1153   .text.prvCreateDNSMessage:00000000000000cc $d
     /tmp/ccRjHDdd.s:2442   .rodata.xDefaultPartDNSHeader.6471:0000000000000000 xDefaultPartDNSHeader.6471
     /tmp/ccRjHDdd.s:1158   .text.prvReadNameField:0000000000000000 $t
     /tmp/ccRjHDdd.s:1162   .text.prvReadNameField:0000000000000000 prvReadNameField
     /tmp/ccRjHDdd.s:1289   .text.prvSkipNameField:0000000000000000 $t
     /tmp/ccRjHDdd.s:1293   .text.prvSkipNameField:0000000000000000 prvSkipNameField
     /tmp/ccRjHDdd.s:1364   .text.ulDNSHandlePacket:0000000000000000 $t
     /tmp/ccRjHDdd.s:1369   .text.ulDNSHandlePacket:0000000000000000 ulDNSHandlePacket
     /tmp/ccRjHDdd.s:1418   .text.prvParseDNSReply:0000000000000000 $t
     /tmp/ccRjHDdd.s:2102   .text.prvReplyDNSMessage:0000000000000000 prvReplyDNSMessage
     /tmp/ccRjHDdd.s:1988   .text.prvParseDNSReply:00000000000004b8 $d
     /tmp/ccRjHDdd.s:1994   .text.prvCreateDNSSocket:0000000000000000 $t
     /tmp/ccRjHDdd.s:2093   .text.prvCreateDNSSocket:0000000000000080 $d
     /tmp/ccRjHDdd.s:2453   .bss.xSocket.6531:0000000000000000 xSocket.6531
ARM GAS  /tmp/ccRjHDdd.s 			page 84


     /tmp/ccRjHDdd.s:2098   .text.prvReplyDNSMessage:0000000000000000 $t
     /tmp/ccRjHDdd.s:2237   .text.prvReplyDNSMessage:00000000000000cc $d
     /tmp/ccRjHDdd.s:2243   .text.prvProcessDNSCache:0000000000000000 $t
     /tmp/ccRjHDdd.s:2421   .text.prvProcessDNSCache:00000000000000f8 $d
     /tmp/ccRjHDdd.s:2459   .bss.xFreeEntry.6550:0000000000000000 xFreeEntry.6550
     /tmp/ccRjHDdd.s:2427   .bss.usIdentifier.6436:0000000000000000 $d
     /tmp/ccRjHDdd.s:2433   .bss.ulAddressLength.6448:0000000000000000 $d
     /tmp/ccRjHDdd.s:2439   .rodata.xDefaultPartDNSHeader.6471:0000000000000000 $d
     /tmp/ccRjHDdd.s:2450   .bss.xSocket.6531:0000000000000000 $d
     /tmp/ccRjHDdd.s:2456   .bss.xFreeEntry.6550:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vListInitialise
vTaskSuspendAll
uxListRemove
vPortFree
xTaskCheckForTimeOut
xTaskResumeAll
vIPSetDnsTimerEnableState
strlen
pvPortMalloc
vIPReloadDNSTimer
strcpy
vTaskSetTimeOutState
vListInsertEnd
FreeRTOS_setsockopt
FreeRTOS_GetUDPPayloadBuffer
FreeRTOS_GetAddressConfiguration
FreeRTOS_sendto
FreeRTOS_recvfrom
FreeRTOS_ReleaseUDPPayloadBuffer
FreeRTOS_closesocket
memset
memcpy
xApplicationDNSQueryHook
pxUDPPayloadBuffer_to_NetworkBuffer
pxDuplicateNetworkBufferWithDescriptor
vReleaseNetworkBufferAndDescriptor
xBufferAllocFixedSize
xDefaultPartUDPPacketHeader
FreeRTOS_socket
FreeRTOS_bind
vReturnEthernetFrame
usPacketIdentifier
strncmp
strncpy

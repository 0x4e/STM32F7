ARM GAS  /tmp/ccfW2k76.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	pxCurrentTCB
  21              		.section	.bss.pxCurrentTCB,"aw",%nobits
  22              		.align	2
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  28              		.align	2
  31              	pxReadyTasksLists:
  32 0000 00000000 		.space	140
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  34              		.align	2
  37              	xDelayedTaskList1:
  38 0000 00000000 		.space	20
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  40              		.align	2
  43              	xDelayedTaskList2:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  46              		.align	2
  49              	pxDelayedTaskList:
  50 0000 00000000 		.space	4
  51              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  52              		.align	2
  55              	pxOverflowDelayedTaskList:
  56 0000 00000000 		.space	4
  57              		.section	.bss.xPendingReadyList,"aw",%nobits
ARM GAS  /tmp/ccfW2k76.s 			page 2


  58              		.align	2
  61              	xPendingReadyList:
  62 0000 00000000 		.space	20
  62      00000000 
  62      00000000 
  62      00000000 
  62      00000000 
  63              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  64              		.align	2
  67              	xTasksWaitingTermination:
  68 0000 00000000 		.space	20
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  70              		.align	2
  73              	uxDeletedTasksWaitingCleanUp:
  74 0000 00000000 		.space	4
  75              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  76              		.align	2
  79              	xSuspendedTaskList:
  80 0000 00000000 		.space	20
  80      00000000 
  80      00000000 
  80      00000000 
  80      00000000 
  81              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  82              		.align	2
  85              	uxCurrentNumberOfTasks:
  86 0000 00000000 		.space	4
  87              		.section	.bss.xTickCount,"aw",%nobits
  88              		.align	2
  91              	xTickCount:
  92 0000 00000000 		.space	4
  93              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  94              		.align	2
  97              	uxTopReadyPriority:
  98 0000 00000000 		.space	4
  99              		.section	.bss.xSchedulerRunning,"aw",%nobits
 100              		.align	2
 103              	xSchedulerRunning:
 104 0000 00000000 		.space	4
 105              		.section	.bss.uxPendedTicks,"aw",%nobits
 106              		.align	2
 109              	uxPendedTicks:
 110 0000 00000000 		.space	4
 111              		.section	.bss.xYieldPending,"aw",%nobits
 112              		.align	2
 115              	xYieldPending:
 116 0000 00000000 		.space	4
 117              		.section	.bss.xNumOfOverflows,"aw",%nobits
 118              		.align	2
 121              	xNumOfOverflows:
 122 0000 00000000 		.space	4
 123              		.section	.bss.uxTaskNumber,"aw",%nobits
 124              		.align	2
ARM GAS  /tmp/ccfW2k76.s 			page 3


 127              	uxTaskNumber:
 128 0000 00000000 		.space	4
 129              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 130              		.align	2
 133              	xNextTaskUnblockTime:
 134 0000 00000000 		.space	4
 135              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 136              		.align	2
 139              	xIdleTaskHandle:
 140 0000 00000000 		.space	4
 141              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 142              		.align	2
 145              	uxSchedulerSuspended:
 146 0000 00000000 		.space	4
 147              		.section	.text.xTaskCreate,"ax",%progbits
 148              		.align	2
 149              		.global	xTaskCreate
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreate:
 154              	.LFB5:
 155              		.file 1 "../../../FreeRTOS_9_0/Source/tasks.c"
   1:../../../FreeRTOS_9_0/Source/tasks.c **** /*
   2:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/tasks.c ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/tasks.c **** 
   5:../../../FreeRTOS_9_0/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/tasks.c **** 
   7:../../../FreeRTOS_9_0/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/tasks.c **** 
   9:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/tasks.c **** 
  13:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/tasks.c **** 
  20:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/tasks.c **** 
  25:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
ARM GAS  /tmp/ccfW2k76.s 			page 4


  36:../../../FreeRTOS_9_0/Source/tasks.c ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/tasks.c ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/tasks.c **** 
  39:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/tasks.c ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/tasks.c **** 
  43:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/tasks.c ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/tasks.c **** 
  47:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/tasks.c **** 
  52:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/tasks.c **** 
  56:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/tasks.c **** 
  59:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/tasks.c **** 
  63:../../../FreeRTOS_9_0/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/tasks.c **** 
  67:../../../FreeRTOS_9_0/Source/tasks.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/tasks.c **** */
  69:../../../FreeRTOS_9_0/Source/tasks.c **** 
  70:../../../FreeRTOS_9_0/Source/tasks.c **** /* Standard includes. */
  71:../../../FreeRTOS_9_0/Source/tasks.c **** #include <stdlib.h>
  72:../../../FreeRTOS_9_0/Source/tasks.c **** #include <string.h>
  73:../../../FreeRTOS_9_0/Source/tasks.c **** 
  74:../../../FreeRTOS_9_0/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:../../../FreeRTOS_9_0/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:../../../FreeRTOS_9_0/Source/tasks.c **** task.h is included from an application file. */
  77:../../../FreeRTOS_9_0/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:../../../FreeRTOS_9_0/Source/tasks.c **** 
  79:../../../FreeRTOS_9_0/Source/tasks.c **** /* FreeRTOS includes. */
  80:../../../FreeRTOS_9_0/Source/tasks.c **** #include "FreeRTOS.h"
  81:../../../FreeRTOS_9_0/Source/tasks.c **** #include "task.h"
  82:../../../FreeRTOS_9_0/Source/tasks.c **** #include "timers.h"
  83:../../../FreeRTOS_9_0/Source/tasks.c **** #include "StackMacros.h"
  84:../../../FreeRTOS_9_0/Source/tasks.c **** 
  85:../../../FreeRTOS_9_0/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:../../../FreeRTOS_9_0/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:../../../FreeRTOS_9_0/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:../../../FreeRTOS_9_0/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:../../../FreeRTOS_9_0/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:../../../FreeRTOS_9_0/Source/tasks.c **** 
  91:../../../FreeRTOS_9_0/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:../../../FreeRTOS_9_0/Source/tasks.c **** functions but without including stdio.h here. */
ARM GAS  /tmp/ccfW2k76.s 			page 5


  93:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:../../../FreeRTOS_9_0/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:../../../FreeRTOS_9_0/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:../../../FreeRTOS_9_0/Source/tasks.c **** 	#include <stdio.h>
  99:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:../../../FreeRTOS_9_0/Source/tasks.c **** 
 101:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:../../../FreeRTOS_9_0/Source/tasks.c **** #else
 106:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 108:../../../FreeRTOS_9_0/Source/tasks.c **** 
 109:../../../FreeRTOS_9_0/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:../../../FreeRTOS_9_0/Source/tasks.c **** 
 114:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 115:../../../FreeRTOS_9_0/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:../../../FreeRTOS_9_0/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 118:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:../../../FreeRTOS_9_0/Source/tasks.c **** 
 120:../../../FreeRTOS_9_0/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:../../../FreeRTOS_9_0/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:../../../FreeRTOS_9_0/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:../../../FreeRTOS_9_0/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:../../../FreeRTOS_9_0/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:../../../FreeRTOS_9_0/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:../../../FreeRTOS_9_0/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:../../../FreeRTOS_9_0/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:../../../FreeRTOS_9_0/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:../../../FreeRTOS_9_0/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:../../../FreeRTOS_9_0/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:../../../FreeRTOS_9_0/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:../../../FreeRTOS_9_0/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:../../../FreeRTOS_9_0/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:../../../FreeRTOS_9_0/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:../../../FreeRTOS_9_0/Source/tasks.c **** 
 140:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 141:../../../FreeRTOS_9_0/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 143:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:../../../FreeRTOS_9_0/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:../../../FreeRTOS_9_0/Source/tasks.c **** 
 148:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 149:../../../FreeRTOS_9_0/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
ARM GAS  /tmp/ccfW2k76.s 			page 6


 150:../../../FreeRTOS_9_0/Source/tasks.c ****  * global, rather than file scope.
 151:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 152:../../../FreeRTOS_9_0/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define static
 154:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 155:../../../FreeRTOS_9_0/Source/tasks.c **** 
 156:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:../../../FreeRTOS_9_0/Source/tasks.c **** 
 158:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:../../../FreeRTOS_9_0/Source/tasks.c **** 	microcontroller architecture. */
 161:../../../FreeRTOS_9_0/Source/tasks.c **** 
 162:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:../../../FreeRTOS_9_0/Source/tasks.c **** 	state task. */
 164:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 166:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 168:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 170:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:../../../FreeRTOS_9_0/Source/tasks.c **** 
 172:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:../../../FreeRTOS_9_0/Source/tasks.c **** 
 174:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 176:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:../../../FreeRTOS_9_0/Source/tasks.c **** 																										\
 178:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 181:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:../../../FreeRTOS_9_0/Source/tasks.c **** 			--uxTopPriority;																			\
 183:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 184:../../../FreeRTOS_9_0/Source/tasks.c **** 																										\
 185:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:../../../FreeRTOS_9_0/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:../../../FreeRTOS_9_0/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:../../../FreeRTOS_9_0/Source/tasks.c **** 
 191:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:../../../FreeRTOS_9_0/Source/tasks.c **** 
 193:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:../../../FreeRTOS_9_0/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:../../../FreeRTOS_9_0/Source/tasks.c **** 	being used. */
 196:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:../../../FreeRTOS_9_0/Source/tasks.c **** 
 199:../../../FreeRTOS_9_0/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:../../../FreeRTOS_9_0/Source/tasks.c **** 
 201:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:../../../FreeRTOS_9_0/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:../../../FreeRTOS_9_0/Source/tasks.c **** 	architecture being used. */
 204:../../../FreeRTOS_9_0/Source/tasks.c **** 
 205:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
ARM GAS  /tmp/ccfW2k76.s 			page 7


 207:../../../FreeRTOS_9_0/Source/tasks.c **** 
 208:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:../../../FreeRTOS_9_0/Source/tasks.c **** 
 210:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																								\
 212:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 214:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:../../../FreeRTOS_9_0/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:../../../FreeRTOS_9_0/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:../../../FreeRTOS_9_0/Source/tasks.c **** 
 220:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:../../../FreeRTOS_9_0/Source/tasks.c **** 
 222:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:../../../FreeRTOS_9_0/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:../../../FreeRTOS_9_0/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:../../../FreeRTOS_9_0/Source/tasks.c **** 	{																									\
 227:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:../../../FreeRTOS_9_0/Source/tasks.c **** 		{																								\
 229:../../../FreeRTOS_9_0/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:../../../FreeRTOS_9_0/Source/tasks.c **** 		}																								\
 231:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 232:../../../FreeRTOS_9_0/Source/tasks.c **** 
 233:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:../../../FreeRTOS_9_0/Source/tasks.c **** 
 235:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:../../../FreeRTOS_9_0/Source/tasks.c **** 
 237:../../../FreeRTOS_9_0/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:../../../FreeRTOS_9_0/Source/tasks.c **** count overflows. */
 239:../../../FreeRTOS_9_0/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:../../../FreeRTOS_9_0/Source/tasks.c **** {																									\
 241:../../../FreeRTOS_9_0/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 243:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:../../../FreeRTOS_9_0/Source/tasks.c **** 																									\
 246:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:../../../FreeRTOS_9_0/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:../../../FreeRTOS_9_0/Source/tasks.c **** }
 252:../../../FreeRTOS_9_0/Source/tasks.c **** 
 253:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:../../../FreeRTOS_9_0/Source/tasks.c **** 
 255:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 256:../../../FreeRTOS_9_0/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:../../../FreeRTOS_9_0/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 259:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:../../../FreeRTOS_9_0/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
ARM GAS  /tmp/ccfW2k76.s 			page 8


 264:../../../FreeRTOS_9_0/Source/tasks.c **** 
 265:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 266:../../../FreeRTOS_9_0/Source/tasks.c ****  * Place the task represented by pxTCB which has been in a ready list before
 267:../../../FreeRTOS_9_0/Source/tasks.c ****  * into the appropriate ready list for the task.
 268:../../../FreeRTOS_9_0/Source/tasks.c ****  * It is inserted at the end of the list.
 269:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 270:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvReaddTaskToReadyList( pxTCB )															\
 271:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceREADDED_TASK_TO_READY_STATE( pxTCB );														\
 272:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 273:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 274:../../../FreeRTOS_9_0/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 275:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 276:../../../FreeRTOS_9_0/Source/tasks.c **** 
 277:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 278:../../../FreeRTOS_9_0/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 279:../../../FreeRTOS_9_0/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 280:../../../FreeRTOS_9_0/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 281:../../../FreeRTOS_9_0/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 282:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 283:../../../FreeRTOS_9_0/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 284:../../../FreeRTOS_9_0/Source/tasks.c **** 
 285:../../../FreeRTOS_9_0/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 286:../../../FreeRTOS_9_0/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 287:../../../FreeRTOS_9_0/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 288:../../../FreeRTOS_9_0/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 289:../../../FreeRTOS_9_0/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 290:../../../FreeRTOS_9_0/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 291:../../../FreeRTOS_9_0/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 292:../../../FreeRTOS_9_0/Source/tasks.c **** to its original value when it is released. */
 293:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 294:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 295:../../../FreeRTOS_9_0/Source/tasks.c **** #else
 296:../../../FreeRTOS_9_0/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 297:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 298:../../../FreeRTOS_9_0/Source/tasks.c **** 
 299:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 300:../../../FreeRTOS_9_0/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 301:../../../FreeRTOS_9_0/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 302:../../../FreeRTOS_9_0/Source/tasks.c ****  * (the task's run time environment, including register values)
 303:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 304:../../../FreeRTOS_9_0/Source/tasks.c **** typedef struct tskTaskControlBlock
 305:../../../FreeRTOS_9_0/Source/tasks.c **** {
 306:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 307:../../../FreeRTOS_9_0/Source/tasks.c **** 
 308:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 309:../../../FreeRTOS_9_0/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 310:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 311:../../../FreeRTOS_9_0/Source/tasks.c **** 
 312:../../../FreeRTOS_9_0/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 313:../../../FreeRTOS_9_0/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 314:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 315:../../../FreeRTOS_9_0/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 316:../../../FreeRTOS_9_0/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 317:../../../FreeRTOS_9_0/Source/tasks.c **** 
 318:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 319:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 320:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
ARM GAS  /tmp/ccfW2k76.s 			page 9


 321:../../../FreeRTOS_9_0/Source/tasks.c **** 
 322:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 323:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 324:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 325:../../../FreeRTOS_9_0/Source/tasks.c **** 
 326:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 327:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 328:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 329:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 330:../../../FreeRTOS_9_0/Source/tasks.c **** 
 331:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 332:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 333:../../../FreeRTOS_9_0/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 334:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 335:../../../FreeRTOS_9_0/Source/tasks.c **** 
 336:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 337:../../../FreeRTOS_9_0/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 338:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 339:../../../FreeRTOS_9_0/Source/tasks.c **** 
 340:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 341:../../../FreeRTOS_9_0/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 342:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 343:../../../FreeRTOS_9_0/Source/tasks.c **** 
 344:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 345:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 346:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 347:../../../FreeRTOS_9_0/Source/tasks.c **** 
 348:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 349:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 350:../../../FreeRTOS_9_0/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 351:../../../FreeRTOS_9_0/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 352:../../../FreeRTOS_9_0/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 353:../../../FreeRTOS_9_0/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 354:../../../FreeRTOS_9_0/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 355:../../../FreeRTOS_9_0/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 356:../../../FreeRTOS_9_0/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 357:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 358:../../../FreeRTOS_9_0/Source/tasks.c **** 
 359:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 360:../../../FreeRTOS_9_0/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 361:../../../FreeRTOS_9_0/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 362:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 363:../../../FreeRTOS_9_0/Source/tasks.c **** 
 364:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* See the comments above the definition of
 365:../../../FreeRTOS_9_0/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 366:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 367:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 368:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 369:../../../FreeRTOS_9_0/Source/tasks.c **** 
 370:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 371:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint8_t ucDelayAborted;
 372:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 373:../../../FreeRTOS_9_0/Source/tasks.c **** 
 374:../../../FreeRTOS_9_0/Source/tasks.c **** } tskTCB;
 375:../../../FreeRTOS_9_0/Source/tasks.c **** 
 376:../../../FreeRTOS_9_0/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 377:../../../FreeRTOS_9_0/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
ARM GAS  /tmp/ccfW2k76.s 			page 10


 378:../../../FreeRTOS_9_0/Source/tasks.c **** typedef tskTCB TCB_t;
 379:../../../FreeRTOS_9_0/Source/tasks.c **** 
 380:../../../FreeRTOS_9_0/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 381:../../../FreeRTOS_9_0/Source/tasks.c **** static variables must be declared volatile. */
 382:../../../FreeRTOS_9_0/Source/tasks.c **** 
 383:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 384:../../../FreeRTOS_9_0/Source/tasks.c **** 
 385:../../../FreeRTOS_9_0/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 386:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 387:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 388:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 389:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 390:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 391:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 392:../../../FreeRTOS_9_0/Source/tasks.c **** 
 393:../../../FreeRTOS_9_0/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 394:../../../FreeRTOS_9_0/Source/tasks.c **** 
 395:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 396:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 397:../../../FreeRTOS_9_0/Source/tasks.c **** 
 398:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 399:../../../FreeRTOS_9_0/Source/tasks.c **** 
 400:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 401:../../../FreeRTOS_9_0/Source/tasks.c **** 
 402:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 403:../../../FreeRTOS_9_0/Source/tasks.c **** 
 404:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 405:../../../FreeRTOS_9_0/Source/tasks.c **** 
 406:../../../FreeRTOS_9_0/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 407:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 408:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 409:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 410:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 411:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 412:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 413:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 414:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 415:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 416:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 417:../../../FreeRTOS_9_0/Source/tasks.c **** 
 418:../../../FreeRTOS_9_0/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 419:../../../FreeRTOS_9_0/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 420:../../../FreeRTOS_9_0/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 421:../../../FreeRTOS_9_0/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 422:../../../FreeRTOS_9_0/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 423:../../../FreeRTOS_9_0/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 424:../../../FreeRTOS_9_0/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 425:../../../FreeRTOS_9_0/Source/tasks.c **** accessed from a critical section. */
 426:../../../FreeRTOS_9_0/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 427:../../../FreeRTOS_9_0/Source/tasks.c **** 
 428:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 429:../../../FreeRTOS_9_0/Source/tasks.c **** 
 430:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 431:../../../FreeRTOS_9_0/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 432:../../../FreeRTOS_9_0/Source/tasks.c **** 
 433:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 434:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 11


 435:../../../FreeRTOS_9_0/Source/tasks.c **** /*lint +e956 */
 436:../../../FreeRTOS_9_0/Source/tasks.c **** 
 437:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 438:../../../FreeRTOS_9_0/Source/tasks.c **** 
 439:../../../FreeRTOS_9_0/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 440:../../../FreeRTOS_9_0/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 441:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 442:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 443:../../../FreeRTOS_9_0/Source/tasks.c **** 
 444:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 445:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 446:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 447:../../../FreeRTOS_9_0/Source/tasks.c **** 
 448:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 449:../../../FreeRTOS_9_0/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 450:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 451:../../../FreeRTOS_9_0/Source/tasks.c **** 
 452:../../../FreeRTOS_9_0/Source/tasks.c **** /* File private functions. --------------------------------*/
 453:../../../FreeRTOS_9_0/Source/tasks.c **** 
 454:../../../FreeRTOS_9_0/Source/tasks.c **** /**
 455:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 456:../../../FreeRTOS_9_0/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 457:../../../FreeRTOS_9_0/Source/tasks.c ****  * is in any other state.
 458:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 459:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 460:../../../FreeRTOS_9_0/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 461:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 462:../../../FreeRTOS_9_0/Source/tasks.c **** 
 463:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 464:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 465:../../../FreeRTOS_9_0/Source/tasks.c ****  * automatically upon the creation of the first task.
 466:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 467:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 468:../../../FreeRTOS_9_0/Source/tasks.c **** 
 469:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 470:../../../FreeRTOS_9_0/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 471:../../../FreeRTOS_9_0/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 472:../../../FreeRTOS_9_0/Source/tasks.c ****  * creation of the first user task.
 473:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 474:../../../FreeRTOS_9_0/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 475:../../../FreeRTOS_9_0/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 476:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 477:../../../FreeRTOS_9_0/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 478:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 479:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 480:../../../FreeRTOS_9_0/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 481:../../../FreeRTOS_9_0/Source/tasks.c **** 
 482:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 483:../../../FreeRTOS_9_0/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 484:../../../FreeRTOS_9_0/Source/tasks.c ****  * including the stack pointed to by the TCB.
 485:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 486:../../../FreeRTOS_9_0/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 487:../../../FreeRTOS_9_0/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 488:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 489:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 490:../../../FreeRTOS_9_0/Source/tasks.c **** 
 491:../../../FreeRTOS_9_0/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/ccfW2k76.s 			page 12


 492:../../../FreeRTOS_9_0/Source/tasks.c **** 
 493:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 494:../../../FreeRTOS_9_0/Source/tasks.c **** 
 495:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 496:../../../FreeRTOS_9_0/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 497:../../../FreeRTOS_9_0/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 498:../../../FreeRTOS_9_0/Source/tasks.c ****  * and its TCB deleted.
 499:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 500:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 501:../../../FreeRTOS_9_0/Source/tasks.c **** 
 502:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 503:../../../FreeRTOS_9_0/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 504:../../../FreeRTOS_9_0/Source/tasks.c ****  * either the current or the overflow delayed task list.
 505:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 506:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 507:../../../FreeRTOS_9_0/Source/tasks.c **** 
 508:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 509:../../../FreeRTOS_9_0/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 510:../../../FreeRTOS_9_0/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 511:../../../FreeRTOS_9_0/Source/tasks.c ****  * a suspended list, etc.).
 512:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 513:../../../FreeRTOS_9_0/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 514:../../../FreeRTOS_9_0/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 515:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 516:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 517:../../../FreeRTOS_9_0/Source/tasks.c **** 
 518:../../../FreeRTOS_9_0/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 519:../../../FreeRTOS_9_0/Source/tasks.c **** 
 520:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 521:../../../FreeRTOS_9_0/Source/tasks.c **** 
 522:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 523:../../../FreeRTOS_9_0/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 524:../../../FreeRTOS_9_0/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 525:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 526:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 527:../../../FreeRTOS_9_0/Source/tasks.c **** 
 528:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 529:../../../FreeRTOS_9_0/Source/tasks.c **** 
 530:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 531:../../../FreeRTOS_9_0/Source/tasks.c **** 
 532:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 533:../../../FreeRTOS_9_0/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 534:../../../FreeRTOS_9_0/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 535:../../../FreeRTOS_9_0/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 536:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 537:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 538:../../../FreeRTOS_9_0/Source/tasks.c **** 
 539:../../../FreeRTOS_9_0/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 540:../../../FreeRTOS_9_0/Source/tasks.c **** 
 541:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 542:../../../FreeRTOS_9_0/Source/tasks.c **** 
 543:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 544:../../../FreeRTOS_9_0/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 545:../../../FreeRTOS_9_0/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 546:../../../FreeRTOS_9_0/Source/tasks.c ****  *
 547:../../../FreeRTOS_9_0/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 548:../../../FreeRTOS_9_0/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
ARM GAS  /tmp/ccfW2k76.s 			page 13


 549:../../../FreeRTOS_9_0/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 550:../../../FreeRTOS_9_0/Source/tasks.c ****  * set to a value other than 1.
 551:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 552:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 553:../../../FreeRTOS_9_0/Source/tasks.c **** 
 554:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 555:../../../FreeRTOS_9_0/Source/tasks.c **** 
 556:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 557:../../../FreeRTOS_9_0/Source/tasks.c **** 
 558:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 559:../../../FreeRTOS_9_0/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 560:../../../FreeRTOS_9_0/Source/tasks.c ****  * will exit the Blocked state.
 561:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 562:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 563:../../../FreeRTOS_9_0/Source/tasks.c **** 
 564:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 565:../../../FreeRTOS_9_0/Source/tasks.c **** 
 566:../../../FreeRTOS_9_0/Source/tasks.c **** 	/*
 567:../../../FreeRTOS_9_0/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 568:../../../FreeRTOS_9_0/Source/tasks.c **** 	 * human readable tables of task information.
 569:../../../FreeRTOS_9_0/Source/tasks.c **** 	 */
 570:../../../FreeRTOS_9_0/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 571:../../../FreeRTOS_9_0/Source/tasks.c **** 
 572:../../../FreeRTOS_9_0/Source/tasks.c **** #endif
 573:../../../FreeRTOS_9_0/Source/tasks.c **** 
 574:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 575:../../../FreeRTOS_9_0/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 576:../../../FreeRTOS_9_0/Source/tasks.c ****  * dynamically to fill in the structure's members.
 577:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 578:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 579:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 580:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 582:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:../../../FreeRTOS_9_0/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 584:../../../FreeRTOS_9_0/Source/tasks.c **** 									TCB_t *pxNewTCB,
 585:../../../FreeRTOS_9_0/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 586:../../../FreeRTOS_9_0/Source/tasks.c **** 
 587:../../../FreeRTOS_9_0/Source/tasks.c **** /*
 588:../../../FreeRTOS_9_0/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 589:../../../FreeRTOS_9_0/Source/tasks.c ****  * under the control of the scheduler.
 590:../../../FreeRTOS_9_0/Source/tasks.c ****  */
 591:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 592:../../../FreeRTOS_9_0/Source/tasks.c **** 
 593:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 594:../../../FreeRTOS_9_0/Source/tasks.c **** 
 595:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 596:../../../FreeRTOS_9_0/Source/tasks.c **** 
 597:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 598:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 599:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 600:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 601:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 602:../../../FreeRTOS_9_0/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 603:../../../FreeRTOS_9_0/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 604:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 605:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
ARM GAS  /tmp/ccfW2k76.s 			page 14


 606:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xReturn;
 607:../../../FreeRTOS_9_0/Source/tasks.c **** 
 608:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 609:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 610:../../../FreeRTOS_9_0/Source/tasks.c **** 
 611:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 612:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 613:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 614:../../../FreeRTOS_9_0/Source/tasks.c **** 			function - use them. */
 615:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 616:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 617:../../../FreeRTOS_9_0/Source/tasks.c **** 
 618:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 619:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 620:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 621:../../../FreeRTOS_9_0/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 622:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 623:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 624:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 625:../../../FreeRTOS_9_0/Source/tasks.c **** 
 626:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 627:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 629:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 630:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 631:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = NULL;
 632:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 633:../../../FreeRTOS_9_0/Source/tasks.c **** 
 634:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 635:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 636:../../../FreeRTOS_9_0/Source/tasks.c **** 
 637:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 638:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 639:../../../FreeRTOS_9_0/Source/tasks.c **** 
 640:../../../FreeRTOS_9_0/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 641:../../../FreeRTOS_9_0/Source/tasks.c **** 
 642:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 643:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 644:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
 645:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 646:../../../FreeRTOS_9_0/Source/tasks.c **** 
 647:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 648:../../../FreeRTOS_9_0/Source/tasks.c **** 
 649:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 650:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 651:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 652:../../../FreeRTOS_9_0/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 653:../../../FreeRTOS_9_0/Source/tasks.c **** 			not static allocation is being used. */
 654:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 655:../../../FreeRTOS_9_0/Source/tasks.c **** 
 656:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxNewTCB != NULL )
 657:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 658:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 659:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 660:../../../FreeRTOS_9_0/Source/tasks.c **** 
 661:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 662:../../../FreeRTOS_9_0/Source/tasks.c **** 				this task had a statically allocated stack in case it is
ARM GAS  /tmp/ccfW2k76.s 			page 15


 663:../../../FreeRTOS_9_0/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 664:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 665:../../../FreeRTOS_9_0/Source/tasks.c **** 
 666:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 667:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->pcName,
 668:../../../FreeRTOS_9_0/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 669:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 670:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 671:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 672:../../../FreeRTOS_9_0/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 673:../../../FreeRTOS_9_0/Source/tasks.c **** 
 674:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 675:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdPASS;
 676:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 677:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 678:../../../FreeRTOS_9_0/Source/tasks.c **** 
 679:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 680:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 681:../../../FreeRTOS_9_0/Source/tasks.c **** 
 682:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 683:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 684:../../../FreeRTOS_9_0/Source/tasks.c **** 
 685:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 686:../../../FreeRTOS_9_0/Source/tasks.c **** 
 687:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 688:../../../FreeRTOS_9_0/Source/tasks.c **** 							const char * const pcName,
 689:../../../FreeRTOS_9_0/Source/tasks.c **** 							const uint16_t usStackDepth,
 690:../../../FreeRTOS_9_0/Source/tasks.c **** 							void * const pvParameters,
 691:../../../FreeRTOS_9_0/Source/tasks.c **** 							UBaseType_t uxPriority,
 692:../../../FreeRTOS_9_0/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 693:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 156              		.loc 1 693 0
 157              		.cfi_startproc
 158              		@ args = 8, pretend = 0, frame = 32
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8CB0     		sub	sp, sp, #48
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 56
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 40
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
 173 000a 3B60     		str	r3, [r7]
 174 000c 1346     		mov	r3, r2	@ movhi
 175 000e FB80     		strh	r3, [r7, #6]	@ movhi
 176              	.LBB92:
 694:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNewTCB;
 695:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
 696:../../../FreeRTOS_9_0/Source/tasks.c **** 
 697:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 698:../../../FreeRTOS_9_0/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
ARM GAS  /tmp/ccfW2k76.s 			page 16


 699:../../../FreeRTOS_9_0/Source/tasks.c **** 		the TCB then the stack. */
 700:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 701:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 702:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 703:../../../FreeRTOS_9_0/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 704:../../../FreeRTOS_9_0/Source/tasks.c **** 			allocation is being used. */
 705:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 706:../../../FreeRTOS_9_0/Source/tasks.c **** 
 707:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxNewTCB != NULL )
 708:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 709:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 710:../../../FreeRTOS_9_0/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 711:../../../FreeRTOS_9_0/Source/tasks.c **** 				be deleted later if required. */
 712:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 713:../../../FreeRTOS_9_0/Source/tasks.c **** 
 714:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 715:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 716:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 717:../../../FreeRTOS_9_0/Source/tasks.c **** 					vPortFree( pxNewTCB );
 718:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxNewTCB = NULL;
 719:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 720:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 721:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 722:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 723:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 724:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t *pxStack;
 725:../../../FreeRTOS_9_0/Source/tasks.c **** 
 726:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 727:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 177              		.loc 1 727 0
 178 0010 FB88     		ldrh	r3, [r7, #6]
 179 0012 9B00     		lsls	r3, r3, #2
 180 0014 1846     		mov	r0, r3
 181 0016 FFF7FEFF 		bl	pvPortMalloc
 182 001a 7861     		str	r0, [r7, #20]
 728:../../../FreeRTOS_9_0/Source/tasks.c **** 
 729:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxStack != NULL )
 183              		.loc 1 729 0
 184 001c 7B69     		ldr	r3, [r7, #20]
 185 001e 002B     		cmp	r3, #0
 186 0020 0ED0     		beq	.L2
 730:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 731:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Allocate space for the TCB. */
 732:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 187              		.loc 1 732 0
 188 0022 5C20     		movs	r0, #92
 189 0024 FFF7FEFF 		bl	pvPortMalloc
 190 0028 F861     		str	r0, [r7, #28]
 733:../../../FreeRTOS_9_0/Source/tasks.c **** 
 734:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxNewTCB != NULL )
 191              		.loc 1 734 0
 192 002a FB69     		ldr	r3, [r7, #28]
 193 002c 002B     		cmp	r3, #0
 194 002e 03D0     		beq	.L3
 735:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 736:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 737:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
ARM GAS  /tmp/ccfW2k76.s 			page 17


 195              		.loc 1 737 0
 196 0030 FB69     		ldr	r3, [r7, #28]
 197 0032 7A69     		ldr	r2, [r7, #20]
 198 0034 1A63     		str	r2, [r3, #48]
 199 0036 05E0     		b	.L5
 200              	.L3:
 738:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 739:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
 740:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 741:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 742:../../../FreeRTOS_9_0/Source/tasks.c **** 					it again. */
 743:../../../FreeRTOS_9_0/Source/tasks.c **** 					vPortFree( pxStack );
 201              		.loc 1 743 0
 202 0038 7869     		ldr	r0, [r7, #20]
 203 003a FFF7FEFF 		bl	vPortFree
 204 003e 01E0     		b	.L5
 205              	.L2:
 744:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
 745:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 746:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
 747:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 748:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB = NULL;
 206              		.loc 1 748 0
 207 0040 0023     		movs	r3, #0
 208 0042 FB61     		str	r3, [r7, #28]
 209              	.L5:
 210              	.LBE92:
 749:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 750:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 751:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 752:../../../FreeRTOS_9_0/Source/tasks.c **** 
 753:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxNewTCB != NULL )
 211              		.loc 1 753 0
 212 0044 FB69     		ldr	r3, [r7, #28]
 213 0046 002B     		cmp	r3, #0
 214 0048 13D0     		beq	.L6
 754:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 755:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 756:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 757:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 758:../../../FreeRTOS_9_0/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 759:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 760:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 761:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 762:../../../FreeRTOS_9_0/Source/tasks.c **** 
 763:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 215              		.loc 1 763 0
 216 004a FA88     		ldrh	r2, [r7, #6]
 217 004c BB6A     		ldr	r3, [r7, #40]
 218 004e 0093     		str	r3, [sp]
 219 0050 FB6A     		ldr	r3, [r7, #44]
 220 0052 0193     		str	r3, [sp, #4]
 221 0054 FB69     		ldr	r3, [r7, #28]
 222 0056 0293     		str	r3, [sp, #8]
 223 0058 0023     		movs	r3, #0
 224 005a 0393     		str	r3, [sp, #12]
 225 005c F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/ccfW2k76.s 			page 18


 226 005e B968     		ldr	r1, [r7, #8]
 227 0060 3B68     		ldr	r3, [r7]
 228 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 764:../../../FreeRTOS_9_0/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 229              		.loc 1 764 0
 230 0066 F869     		ldr	r0, [r7, #28]
 231 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 765:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdPASS;
 232              		.loc 1 765 0
 233 006c 0123     		movs	r3, #1
 234 006e BB61     		str	r3, [r7, #24]
 235 0070 02E0     		b	.L7
 236              	.L6:
 766:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 767:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 768:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 769:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 237              		.loc 1 769 0
 238 0072 4FF0FF33 		mov	r3, #-1
 239 0076 BB61     		str	r3, [r7, #24]
 240              	.L7:
 770:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 771:../../../FreeRTOS_9_0/Source/tasks.c **** 
 772:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 241              		.loc 1 772 0
 242 0078 BB69     		ldr	r3, [r7, #24]
 773:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 243              		.loc 1 773 0
 244 007a 1846     		mov	r0, r3
 245 007c 2037     		adds	r7, r7, #32
 246              	.LCFI3:
 247              		.cfi_def_cfa_offset 8
 248 007e BD46     		mov	sp, r7
 249              	.LCFI4:
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 0080 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE5:
 256 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 257              		.align	2
 258              		.thumb
 259              		.thumb_func
 261              	prvInitialiseNewTask:
 262              	.LFB6:
 774:../../../FreeRTOS_9_0/Source/tasks.c **** 
 775:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 776:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 777:../../../FreeRTOS_9_0/Source/tasks.c **** 
 778:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 779:../../../FreeRTOS_9_0/Source/tasks.c **** 									const char * const pcName,
 780:../../../FreeRTOS_9_0/Source/tasks.c **** 									const uint32_t ulStackDepth,
 781:../../../FreeRTOS_9_0/Source/tasks.c **** 									void * const pvParameters,
 782:../../../FreeRTOS_9_0/Source/tasks.c **** 									UBaseType_t uxPriority,
 783:../../../FreeRTOS_9_0/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 784:../../../FreeRTOS_9_0/Source/tasks.c **** 									TCB_t *pxNewTCB,
 785:../../../FreeRTOS_9_0/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
ARM GAS  /tmp/ccfW2k76.s 			page 19


 786:../../../FreeRTOS_9_0/Source/tasks.c **** {
 263              		.loc 1 786 0
 264              		.cfi_startproc
 265              		@ args = 16, pretend = 0, frame = 32
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI5:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 88B0     		sub	sp, sp, #32
 273              	.LCFI6:
 274              		.cfi_def_cfa_offset 40
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI7:
 277              		.cfi_def_cfa_register 7
 278 0006 F860     		str	r0, [r7, #12]
 279 0008 B960     		str	r1, [r7, #8]
 280 000a 7A60     		str	r2, [r7, #4]
 281 000c 3B60     		str	r3, [r7]
 787:../../../FreeRTOS_9_0/Source/tasks.c **** StackType_t *pxTopOfStack;
 788:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t x;
 789:../../../FreeRTOS_9_0/Source/tasks.c **** 
 790:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 791:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 792:../../../FreeRTOS_9_0/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 793:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 794:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 795:../../../FreeRTOS_9_0/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 796:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 797:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 798:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 799:../../../FreeRTOS_9_0/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 800:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 801:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 802:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 803:../../../FreeRTOS_9_0/Source/tasks.c **** 
 804:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 805:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 806:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 807:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 808:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 282              		.loc 1 808 0
 283 000e 3B6B     		ldr	r3, [r7, #48]
 284 0010 1A6B     		ldr	r2, [r3, #48]
 285 0012 7B68     		ldr	r3, [r7, #4]
 286 0014 9B00     		lsls	r3, r3, #2
 287 0016 1046     		mov	r0, r2
 288 0018 A521     		movs	r1, #165
 289 001a 1A46     		mov	r2, r3
 290 001c FFF7FEFF 		bl	memset
 809:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 810:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 811:../../../FreeRTOS_9_0/Source/tasks.c **** 
 812:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 813:../../../FreeRTOS_9_0/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 814:../../../FreeRTOS_9_0/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
ARM GAS  /tmp/ccfW2k76.s 			page 20


 815:../../../FreeRTOS_9_0/Source/tasks.c **** 	by the port. */
 816:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 817:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 818:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 291              		.loc 1 818 0
 292 0020 3B6B     		ldr	r3, [r7, #48]
 293 0022 1A6B     		ldr	r2, [r3, #48]
 294 0024 7968     		ldr	r1, [r7, #4]
 295 0026 6FF04043 		mvn	r3, #-1073741824
 296 002a 0B44     		add	r3, r3, r1
 297 002c 9B00     		lsls	r3, r3, #2
 298 002e 1344     		add	r3, r3, r2
 299 0030 BB61     		str	r3, [r7, #24]
 819:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 300              		.loc 1 819 0
 301 0032 BB69     		ldr	r3, [r7, #24]
 302 0034 23F00703 		bic	r3, r3, #7
 303 0038 BB61     		str	r3, [r7, #24]
 820:../../../FreeRTOS_9_0/Source/tasks.c **** 
 821:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 822:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 304              		.loc 1 822 0
 305 003a BB69     		ldr	r3, [r7, #24]
 306 003c 03F00703 		and	r3, r3, #7
 307 0040 002B     		cmp	r3, #0
 308 0042 09D0     		beq	.L10
 309              	.LBB93:
 310              	.LBB94:
 311              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
ARM GAS  /tmp/ccfW2k76.s 			page 21


  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
ARM GAS  /tmp/ccfW2k76.s 			page 22


  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
ARM GAS  /tmp/ccfW2k76.s 			page 23


 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
ARM GAS  /tmp/ccfW2k76.s 			page 24


 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 312              		.loc 2 237 0 discriminator 1
 313              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 314 0044 4FF05003 			mov r3, #80												
 315 0048 83F31188 		msr basepri, r3											
 316 004c BFF36F8F 		isb														
 317 0050 BFF34F8F 		dsb														
 318              	
 319              	@ 0 "" 2
 320              		.thumb
 321 0054 7B61     		str	r3, [r7, #20]
 322              	.L11:
 323              	.LBE94:
 324              	.LBE93:
 325              		.loc 1 822 0 discriminator 1
 326 0056 FEE7     		b	.L11
 327              	.L10:
 823:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 824:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 825:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
ARM GAS  /tmp/ccfW2k76.s 			page 25


 826:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 827:../../../FreeRTOS_9_0/Source/tasks.c **** 
 828:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 829:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 830:../../../FreeRTOS_9_0/Source/tasks.c **** 
 831:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 832:../../../FreeRTOS_9_0/Source/tasks.c **** 		performed. */
 833:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 834:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 835:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 836:../../../FreeRTOS_9_0/Source/tasks.c **** 
 837:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the task name in the TCB. */
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 328              		.loc 1 838 0
 329 0058 0023     		movs	r3, #0
 330 005a FB61     		str	r3, [r7, #28]
 331 005c 13E0     		b	.L12
 332              	.L15:
 839:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 840:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 333              		.loc 1 840 0
 334 005e BA68     		ldr	r2, [r7, #8]
 335 0060 FB69     		ldr	r3, [r7, #28]
 336 0062 1344     		add	r3, r3, r2
 337 0064 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 338 0066 3A6B     		ldr	r2, [r7, #48]
 339 0068 FB69     		ldr	r3, [r7, #28]
 340 006a 1344     		add	r3, r3, r2
 341 006c 3033     		adds	r3, r3, #48
 342 006e 0A46     		mov	r2, r1
 343 0070 1A71     		strb	r2, [r3, #4]
 841:../../../FreeRTOS_9_0/Source/tasks.c **** 
 842:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 843:../../../FreeRTOS_9_0/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 844:../../../FreeRTOS_9_0/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 845:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 344              		.loc 1 845 0
 345 0072 BA68     		ldr	r2, [r7, #8]
 346 0074 FB69     		ldr	r3, [r7, #28]
 347 0076 1344     		add	r3, r3, r2
 348 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 007a 002B     		cmp	r3, #0
 350 007c 00D1     		bne	.L13
 846:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 847:../../../FreeRTOS_9_0/Source/tasks.c **** 			break;
 351              		.loc 1 847 0
 352 007e 05E0     		b	.L14
 353              	.L13:
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 354              		.loc 1 838 0 discriminator 2
 355 0080 FB69     		ldr	r3, [r7, #28]
 356 0082 0133     		adds	r3, r3, #1
 357 0084 FB61     		str	r3, [r7, #28]
 358              	.L12:
 838:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 359              		.loc 1 838 0 is_stmt 0 discriminator 1
 360 0086 FB69     		ldr	r3, [r7, #28]
ARM GAS  /tmp/ccfW2k76.s 			page 26


 361 0088 0F2B     		cmp	r3, #15
 362 008a E8D9     		bls	.L15
 363              	.L14:
 848:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 849:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
 850:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 851:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 852:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 853:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 854:../../../FreeRTOS_9_0/Source/tasks.c **** 
 855:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 856:../../../FreeRTOS_9_0/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 857:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 364              		.loc 1 857 0 is_stmt 1
 365 008c 3B6B     		ldr	r3, [r7, #48]
 366 008e 0022     		movs	r2, #0
 367 0090 83F84320 		strb	r2, [r3, #67]
 858:../../../FreeRTOS_9_0/Source/tasks.c **** 
 859:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 860:../../../FreeRTOS_9_0/Source/tasks.c **** 	remove the privilege bit if one is present. */
 861:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 368              		.loc 1 861 0
 369 0094 BB6A     		ldr	r3, [r7, #40]
 370 0096 062B     		cmp	r3, #6
 371 0098 01D9     		bls	.L16
 862:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 863:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 372              		.loc 1 863 0
 373 009a 0623     		movs	r3, #6
 374 009c BB62     		str	r3, [r7, #40]
 375              	.L16:
 864:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 865:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
 866:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 867:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 868:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 869:../../../FreeRTOS_9_0/Source/tasks.c **** 
 870:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 376              		.loc 1 870 0
 377 009e 3B6B     		ldr	r3, [r7, #48]
 378 00a0 BA6A     		ldr	r2, [r7, #40]
 379 00a2 DA62     		str	r2, [r3, #44]
 871:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 872:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 873:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 380              		.loc 1 873 0
 381 00a4 3B6B     		ldr	r3, [r7, #48]
 382 00a6 BA6A     		ldr	r2, [r7, #40]
 383 00a8 DA64     		str	r2, [r3, #76]
 874:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 384              		.loc 1 874 0
 385 00aa 3B6B     		ldr	r3, [r7, #48]
 386 00ac 0022     		movs	r2, #0
 387 00ae 1A65     		str	r2, [r3, #80]
 875:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 876:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 877:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 27


 878:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 388              		.loc 1 878 0
 389 00b0 3B6B     		ldr	r3, [r7, #48]
 390 00b2 0433     		adds	r3, r3, #4
 391 00b4 1846     		mov	r0, r3
 392 00b6 FFF7FEFF 		bl	vListInitialiseItem
 879:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 393              		.loc 1 879 0
 394 00ba 3B6B     		ldr	r3, [r7, #48]
 395 00bc 1833     		adds	r3, r3, #24
 396 00be 1846     		mov	r0, r3
 397 00c0 FFF7FEFF 		bl	vListInitialiseItem
 880:../../../FreeRTOS_9_0/Source/tasks.c **** 
 881:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 882:../../../FreeRTOS_9_0/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 883:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 398              		.loc 1 883 0
 399 00c4 3B6B     		ldr	r3, [r7, #48]
 400 00c6 3A6B     		ldr	r2, [r7, #48]
 401 00c8 1A61     		str	r2, [r3, #16]
 884:../../../FreeRTOS_9_0/Source/tasks.c **** 
 885:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Event lists are always in priority order. */
 886:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 402              		.loc 1 886 0
 403 00ca BB6A     		ldr	r3, [r7, #40]
 404 00cc C3F10702 		rsb	r2, r3, #7
 405 00d0 3B6B     		ldr	r3, [r7, #48]
 406 00d2 9A61     		str	r2, [r3, #24]
 887:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 407              		.loc 1 887 0
 408 00d4 3B6B     		ldr	r3, [r7, #48]
 409 00d6 3A6B     		ldr	r2, [r7, #48]
 410 00d8 5A62     		str	r2, [r3, #36]
 888:../../../FreeRTOS_9_0/Source/tasks.c **** 
 889:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 890:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 891:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 892:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 893:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 894:../../../FreeRTOS_9_0/Source/tasks.c **** 
 895:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 896:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 897:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 898:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 899:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 900:../../../FreeRTOS_9_0/Source/tasks.c **** 
 901:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 902:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 903:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 904:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 905:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 906:../../../FreeRTOS_9_0/Source/tasks.c **** 
 907:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 908:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 909:../../../FreeRTOS_9_0/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 910:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 911:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else
ARM GAS  /tmp/ccfW2k76.s 			page 28


 912:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 913:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 914:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xRegions;
 915:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 916:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 917:../../../FreeRTOS_9_0/Source/tasks.c **** 
 918:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 919:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 920:../../../FreeRTOS_9_0/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 921:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 922:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 923:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
 924:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 925:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 926:../../../FreeRTOS_9_0/Source/tasks.c **** 
 927:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 928:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 929:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 411              		.loc 1 929 0
 412 00da 3B6B     		ldr	r3, [r7, #48]
 413 00dc 0022     		movs	r2, #0
 414 00de 5A65     		str	r2, [r3, #84]
 930:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 415              		.loc 1 930 0
 416 00e0 3B6B     		ldr	r3, [r7, #48]
 417 00e2 0022     		movs	r2, #0
 418 00e4 83F85820 		strb	r2, [r3, #88]
 931:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 932:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 933:../../../FreeRTOS_9_0/Source/tasks.c **** 
 934:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 935:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 936:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 937:../../../FreeRTOS_9_0/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 938:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 939:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 940:../../../FreeRTOS_9_0/Source/tasks.c **** 
 941:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 942:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 943:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 944:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 945:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
 946:../../../FreeRTOS_9_0/Source/tasks.c **** 
 947:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 948:../../../FreeRTOS_9_0/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 949:../../../FreeRTOS_9_0/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 950:../../../FreeRTOS_9_0/Source/tasks.c **** 	the	top of stack variable is updated. */
 951:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 952:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 953:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 954:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 955:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 956:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 957:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 419              		.loc 1 957 0
 420 00e8 B869     		ldr	r0, [r7, #24]
 421 00ea F968     		ldr	r1, [r7, #12]
ARM GAS  /tmp/ccfW2k76.s 			page 29


 422 00ec 3A68     		ldr	r2, [r7]
 423 00ee FFF7FEFF 		bl	pxPortInitialiseStack
 424 00f2 0246     		mov	r2, r0
 425 00f4 3B6B     		ldr	r3, [r7, #48]
 426 00f6 1A60     		str	r2, [r3]
 958:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 959:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 960:../../../FreeRTOS_9_0/Source/tasks.c **** 
 961:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 427              		.loc 1 961 0
 428 00f8 FB6A     		ldr	r3, [r7, #44]
 429 00fa 002B     		cmp	r3, #0
 430 00fc 02D0     		beq	.L9
 962:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 963:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 964:../../../FreeRTOS_9_0/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 965:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 431              		.loc 1 965 0
 432 00fe FB6A     		ldr	r3, [r7, #44]
 433 0100 3A6B     		ldr	r2, [r7, #48]
 434 0102 1A60     		str	r2, [r3]
 435              	.L9:
 966:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 967:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
 968:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 969:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 970:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 971:../../../FreeRTOS_9_0/Source/tasks.c **** }
 436              		.loc 1 971 0
 437 0104 2037     		adds	r7, r7, #32
 438              	.LCFI8:
 439              		.cfi_def_cfa_offset 8
 440 0106 BD46     		mov	sp, r7
 441              	.LCFI9:
 442              		.cfi_def_cfa_register 13
 443              		@ sp needed
 444 0108 80BD     		pop	{r7, pc}
 445              		.cfi_endproc
 446              	.LFE6:
 448 010a 00BF     		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 449              		.align	2
 450              		.thumb
 451              		.thumb_func
 453              	prvAddNewTaskToReadyList:
 454              	.LFB7:
 972:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
 973:../../../FreeRTOS_9_0/Source/tasks.c **** 
 974:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 975:../../../FreeRTOS_9_0/Source/tasks.c **** {
 455              		.loc 1 975 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 8
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459 0000 80B5     		push	{r7, lr}
 460              	.LCFI10:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 7, -8
ARM GAS  /tmp/ccfW2k76.s 			page 30


 463              		.cfi_offset 14, -4
 464 0002 82B0     		sub	sp, sp, #8
 465              	.LCFI11:
 466              		.cfi_def_cfa_offset 16
 467 0004 00AF     		add	r7, sp, #0
 468              	.LCFI12:
 469              		.cfi_def_cfa_register 7
 470 0006 7860     		str	r0, [r7, #4]
 976:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 977:../../../FreeRTOS_9_0/Source/tasks.c **** 	updated. */
 978:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 471              		.loc 1 978 0
 472 0008 FFF7FEFF 		bl	vPortEnterCritical
 979:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 980:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 473              		.loc 1 980 0
 474 000c 2D4B     		ldr	r3, .L22
 475 000e 1B68     		ldr	r3, [r3]
 476 0010 0133     		adds	r3, r3, #1
 477 0012 2C4A     		ldr	r2, .L22
 478 0014 1360     		str	r3, [r2]
 981:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 479              		.loc 1 981 0
 480 0016 2C4B     		ldr	r3, .L22+4
 481 0018 1B68     		ldr	r3, [r3]
 482 001a 002B     		cmp	r3, #0
 483 001c 09D1     		bne	.L19
 982:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 983:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 984:../../../FreeRTOS_9_0/Source/tasks.c **** 			the suspended state - make this the current task. */
 985:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 484              		.loc 1 985 0
 485 001e 2A4A     		ldr	r2, .L22+4
 486 0020 7B68     		ldr	r3, [r7, #4]
 487 0022 1360     		str	r3, [r2]
 986:../../../FreeRTOS_9_0/Source/tasks.c **** 
 987:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 488              		.loc 1 987 0
 489 0024 274B     		ldr	r3, .L22
 490 0026 1B68     		ldr	r3, [r3]
 491 0028 012B     		cmp	r3, #1
 492 002a 10D1     		bne	.L20
 988:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 989:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 990:../../../FreeRTOS_9_0/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 991:../../../FreeRTOS_9_0/Source/tasks.c **** 				fails, but we will report the failure. */
 992:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvInitialiseTaskLists();
 493              		.loc 1 992 0
 494 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 495 0030 0DE0     		b	.L20
 496              	.L19:
 993:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 994:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
 995:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
 996:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 997:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 998:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
ARM GAS  /tmp/ccfW2k76.s 			page 31


 999:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1000:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1001:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1002:../../../FreeRTOS_9_0/Source/tasks.c **** 			current task if it is the highest priority task to be created
1003:../../../FreeRTOS_9_0/Source/tasks.c **** 			so far. */
1004:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 497              		.loc 1 1004 0
 498 0032 264B     		ldr	r3, .L22+8
 499 0034 1B68     		ldr	r3, [r3]
 500 0036 002B     		cmp	r3, #0
 501 0038 09D1     		bne	.L20
1005:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1006:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 502              		.loc 1 1006 0
 503 003a 234B     		ldr	r3, .L22+4
 504 003c 1B68     		ldr	r3, [r3]
 505 003e DA6A     		ldr	r2, [r3, #44]
 506 0040 7B68     		ldr	r3, [r7, #4]
 507 0042 DB6A     		ldr	r3, [r3, #44]
 508 0044 9A42     		cmp	r2, r3
 509 0046 02D8     		bhi	.L20
1007:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1008:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 510              		.loc 1 1008 0
 511 0048 1F4A     		ldr	r2, .L22+4
 512 004a 7B68     		ldr	r3, [r7, #4]
 513 004c 1360     		str	r3, [r2]
 514              	.L20:
1009:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1010:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1011:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1012:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1013:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1014:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1015:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1016:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1017:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1018:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1019:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1020:../../../FreeRTOS_9_0/Source/tasks.c **** 
1021:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxTaskNumber++;
 515              		.loc 1 1021 0
 516 004e 204B     		ldr	r3, .L22+12
 517 0050 1B68     		ldr	r3, [r3]
 518 0052 0133     		adds	r3, r3, #1
 519 0054 1E4A     		ldr	r2, .L22+12
 520 0056 1360     		str	r3, [r2]
1022:../../../FreeRTOS_9_0/Source/tasks.c **** 
1023:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1024:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1025:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1026:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 521              		.loc 1 1026 0
 522 0058 1D4B     		ldr	r3, .L22+12
 523 005a 1A68     		ldr	r2, [r3]
 524 005c 7B68     		ldr	r3, [r7, #4]
 525 005e 5A64     		str	r2, [r3, #68]
ARM GAS  /tmp/ccfW2k76.s 			page 32


1027:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1028:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1029:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1030:../../../FreeRTOS_9_0/Source/tasks.c **** 
1031:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 526              		.loc 1 1031 0
 527 0060 7B68     		ldr	r3, [r7, #4]
 528 0062 DB6A     		ldr	r3, [r3, #44]
 529 0064 1A46     		mov	r2, r3
 530 0066 0123     		movs	r3, #1
 531 0068 03FA02F2 		lsl	r2, r3, r2
 532 006c 194B     		ldr	r3, .L22+16
 533 006e 1B68     		ldr	r3, [r3]
 534 0070 1343     		orrs	r3, r3, r2
 535 0072 184A     		ldr	r2, .L22+16
 536 0074 1360     		str	r3, [r2]
 537 0076 7B68     		ldr	r3, [r7, #4]
 538 0078 DA6A     		ldr	r2, [r3, #44]
 539 007a 1346     		mov	r3, r2
 540 007c 9B00     		lsls	r3, r3, #2
 541 007e 1344     		add	r3, r3, r2
 542 0080 9B00     		lsls	r3, r3, #2
 543 0082 154A     		ldr	r2, .L22+20
 544 0084 1A44     		add	r2, r2, r3
 545 0086 7B68     		ldr	r3, [r7, #4]
 546 0088 0433     		adds	r3, r3, #4
 547 008a 1046     		mov	r0, r2
 548 008c 1946     		mov	r1, r3
 549 008e FFF7FEFF 		bl	vListInsertEnd
1032:../../../FreeRTOS_9_0/Source/tasks.c **** 
1033:../../../FreeRTOS_9_0/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1034:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1035:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 550              		.loc 1 1035 0
 551 0092 FFF7FEFF 		bl	vPortExitCritical
1036:../../../FreeRTOS_9_0/Source/tasks.c **** 
1037:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 552              		.loc 1 1037 0
 553 0096 0D4B     		ldr	r3, .L22+8
 554 0098 1B68     		ldr	r3, [r3]
 555 009a 002B     		cmp	r3, #0
 556 009c 0ED0     		beq	.L18
1038:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1039:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1040:../../../FreeRTOS_9_0/Source/tasks.c **** 		then it should run now. */
1041:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 557              		.loc 1 1041 0
 558 009e 0A4B     		ldr	r3, .L22+4
 559 00a0 1B68     		ldr	r3, [r3]
 560 00a2 DA6A     		ldr	r2, [r3, #44]
 561 00a4 7B68     		ldr	r3, [r7, #4]
 562 00a6 DB6A     		ldr	r3, [r3, #44]
 563 00a8 9A42     		cmp	r2, r3
 564 00aa 07D2     		bcs	.L18
1042:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1043:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 565              		.loc 1 1043 0
ARM GAS  /tmp/ccfW2k76.s 			page 33


 566 00ac 0B4B     		ldr	r3, .L22+24
 567 00ae 4FF08052 		mov	r2, #268435456
 568 00b2 1A60     		str	r2, [r3]
 569              	@ 1043 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 570 00b4 BFF34F8F 		dsb
 571              	@ 0 "" 2
 572              	@ 1043 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 573 00b8 BFF36F8F 		isb
 574              	@ 0 "" 2
 575              		.thumb
 576              	.L18:
1044:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1045:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1046:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1047:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1048:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1049:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1050:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
1051:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1052:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1053:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1054:../../../FreeRTOS_9_0/Source/tasks.c **** }
 577              		.loc 1 1054 0
 578 00bc 0837     		adds	r7, r7, #8
 579              	.LCFI13:
 580              		.cfi_def_cfa_offset 8
 581 00be BD46     		mov	sp, r7
 582              	.LCFI14:
 583              		.cfi_def_cfa_register 13
 584              		@ sp needed
 585 00c0 80BD     		pop	{r7, pc}
 586              	.L23:
 587 00c2 00BF     		.align	2
 588              	.L22:
 589 00c4 00000000 		.word	uxCurrentNumberOfTasks
 590 00c8 00000000 		.word	pxCurrentTCB
 591 00cc 00000000 		.word	xSchedulerRunning
 592 00d0 00000000 		.word	uxTaskNumber
 593 00d4 00000000 		.word	uxTopReadyPriority
 594 00d8 00000000 		.word	pxReadyTasksLists
 595 00dc 04ED00E0 		.word	-536810236
 596              		.cfi_endproc
 597              	.LFE7:
 599              		.section	.text.vTaskDelete,"ax",%progbits
 600              		.align	2
 601              		.global	vTaskDelete
 602              		.thumb
 603              		.thumb_func
 605              	vTaskDelete:
 606              	.LFB8:
1055:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1056:../../../FreeRTOS_9_0/Source/tasks.c **** 
1057:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1058:../../../FreeRTOS_9_0/Source/tasks.c **** 
1059:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1060:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 607              		.loc 1 1060 0
ARM GAS  /tmp/ccfW2k76.s 			page 34


 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 16
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 0000 80B5     		push	{r7, lr}
 612              	.LCFI15:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 7, -8
 615              		.cfi_offset 14, -4
 616 0002 84B0     		sub	sp, sp, #16
 617              	.LCFI16:
 618              		.cfi_def_cfa_offset 24
 619 0004 00AF     		add	r7, sp, #0
 620              	.LCFI17:
 621              		.cfi_def_cfa_register 7
 622 0006 7860     		str	r0, [r7, #4]
1061:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1062:../../../FreeRTOS_9_0/Source/tasks.c **** 
1063:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 623              		.loc 1 1063 0
 624 0008 FFF7FEFF 		bl	vPortEnterCritical
1064:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1065:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1066:../../../FreeRTOS_9_0/Source/tasks.c **** 			being deleted. */
1067:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 625              		.loc 1 1067 0
 626 000c 7B68     		ldr	r3, [r7, #4]
 627 000e 002B     		cmp	r3, #0
 628 0010 02D1     		bne	.L25
 629              		.loc 1 1067 0 is_stmt 0 discriminator 1
 630 0012 384B     		ldr	r3, .L35
 631 0014 1B68     		ldr	r3, [r3]
 632 0016 00E0     		b	.L26
 633              	.L25:
 634              		.loc 1 1067 0 discriminator 2
 635 0018 7B68     		ldr	r3, [r7, #4]
 636              	.L26:
 637              		.loc 1 1067 0 discriminator 4
 638 001a FB60     		str	r3, [r7, #12]
1068:../../../FreeRTOS_9_0/Source/tasks.c **** 
1069:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Remove task from the ready list. */
1070:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 639              		.loc 1 1070 0 is_stmt 1 discriminator 4
 640 001c FB68     		ldr	r3, [r7, #12]
 641 001e 0433     		adds	r3, r3, #4
 642 0020 1846     		mov	r0, r3
 643 0022 FFF7FEFF 		bl	uxListRemove
 644 0026 0346     		mov	r3, r0
 645 0028 002B     		cmp	r3, #0
 646 002a 15D1     		bne	.L27
1071:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1072:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 647              		.loc 1 1072 0
 648 002c FB68     		ldr	r3, [r7, #12]
 649 002e DA6A     		ldr	r2, [r3, #44]
 650 0030 3149     		ldr	r1, .L35+4
 651 0032 1346     		mov	r3, r2
 652 0034 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccfW2k76.s 			page 35


 653 0036 1344     		add	r3, r3, r2
 654 0038 9B00     		lsls	r3, r3, #2
 655 003a 0B44     		add	r3, r3, r1
 656 003c 1B68     		ldr	r3, [r3]
 657 003e 002B     		cmp	r3, #0
 658 0040 0AD1     		bne	.L27
 659              		.loc 1 1072 0 is_stmt 0 discriminator 1
 660 0042 FB68     		ldr	r3, [r7, #12]
 661 0044 DB6A     		ldr	r3, [r3, #44]
 662 0046 1A46     		mov	r2, r3
 663 0048 0123     		movs	r3, #1
 664 004a 9340     		lsls	r3, r3, r2
 665 004c DA43     		mvns	r2, r3
 666 004e 2B4B     		ldr	r3, .L35+8
 667 0050 1B68     		ldr	r3, [r3]
 668 0052 1340     		ands	r3, r3, r2
 669 0054 294A     		ldr	r2, .L35+8
 670 0056 1360     		str	r3, [r2]
 671              	.L27:
1073:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1074:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1075:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1076:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1077:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1078:../../../FreeRTOS_9_0/Source/tasks.c **** 
1079:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1080:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 672              		.loc 1 1080 0 is_stmt 1
 673 0058 FB68     		ldr	r3, [r7, #12]
 674 005a 9B6A     		ldr	r3, [r3, #40]
 675 005c 002B     		cmp	r3, #0
 676 005e 04D0     		beq	.L29
1081:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1082:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 677              		.loc 1 1082 0
 678 0060 FB68     		ldr	r3, [r7, #12]
 679 0062 1833     		adds	r3, r3, #24
 680 0064 1846     		mov	r0, r3
 681 0066 FFF7FEFF 		bl	uxListRemove
 682              	.L29:
1083:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1084:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1085:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1086:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1087:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1088:../../../FreeRTOS_9_0/Source/tasks.c **** 
1089:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1090:../../../FreeRTOS_9_0/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1091:../../../FreeRTOS_9_0/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1092:../../../FreeRTOS_9_0/Source/tasks.c **** 			not return. */
1093:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxTaskNumber++;
 683              		.loc 1 1093 0
 684 006a 254B     		ldr	r3, .L35+12
 685 006c 1B68     		ldr	r3, [r3]
 686 006e 0133     		adds	r3, r3, #1
 687 0070 234A     		ldr	r2, .L35+12
 688 0072 1360     		str	r3, [r2]
ARM GAS  /tmp/ccfW2k76.s 			page 36


1094:../../../FreeRTOS_9_0/Source/tasks.c **** 
1095:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 689              		.loc 1 1095 0
 690 0074 1F4B     		ldr	r3, .L35
 691 0076 1B68     		ldr	r3, [r3]
 692 0078 FA68     		ldr	r2, [r7, #12]
 693 007a 9A42     		cmp	r2, r3
 694 007c 0BD1     		bne	.L30
1096:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1097:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1098:../../../FreeRTOS_9_0/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1099:../../../FreeRTOS_9_0/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1100:../../../FreeRTOS_9_0/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1101:../../../FreeRTOS_9_0/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1102:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 695              		.loc 1 1102 0
 696 007e FB68     		ldr	r3, [r7, #12]
 697 0080 0433     		adds	r3, r3, #4
 698 0082 2048     		ldr	r0, .L35+16
 699 0084 1946     		mov	r1, r3
 700 0086 FFF7FEFF 		bl	vListInsertEnd
1103:../../../FreeRTOS_9_0/Source/tasks.c **** 
1104:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1105:../../../FreeRTOS_9_0/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1106:../../../FreeRTOS_9_0/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1107:../../../FreeRTOS_9_0/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 701              		.loc 1 1107 0
 702 008a 1F4B     		ldr	r3, .L35+20
 703 008c 1B68     		ldr	r3, [r3]
 704 008e 0133     		adds	r3, r3, #1
 705 0090 1D4A     		ldr	r2, .L35+20
 706 0092 1360     		str	r3, [r2]
 707 0094 09E0     		b	.L31
 708              	.L30:
1108:../../../FreeRTOS_9_0/Source/tasks.c **** 
1109:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1110:../../../FreeRTOS_9_0/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1111:../../../FreeRTOS_9_0/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1112:../../../FreeRTOS_9_0/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1113:../../../FreeRTOS_9_0/Source/tasks.c **** 				required. */
1114:../../../FreeRTOS_9_0/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1115:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1116:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1117:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1118:../../../FreeRTOS_9_0/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 709              		.loc 1 1118 0
 710 0096 1D4B     		ldr	r3, .L35+24
 711 0098 1B68     		ldr	r3, [r3]
 712 009a 013B     		subs	r3, r3, #1
 713 009c 1B4A     		ldr	r2, .L35+24
 714 009e 1360     		str	r3, [r2]
1119:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 715              		.loc 1 1119 0
 716 00a0 F868     		ldr	r0, [r7, #12]
 717 00a2 FFF7FEFF 		bl	prvDeleteTCB
1120:../../../FreeRTOS_9_0/Source/tasks.c **** 
1121:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
ARM GAS  /tmp/ccfW2k76.s 			page 37


1122:../../../FreeRTOS_9_0/Source/tasks.c **** 				the task that has just been deleted. */
1123:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 718              		.loc 1 1123 0
 719 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 720              	.L31:
1124:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1125:../../../FreeRTOS_9_0/Source/tasks.c **** 
1126:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1128:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 721              		.loc 1 1128 0
 722 00aa FFF7FEFF 		bl	vPortExitCritical
1129:../../../FreeRTOS_9_0/Source/tasks.c **** 
1130:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1131:../../../FreeRTOS_9_0/Source/tasks.c **** 		been deleted. */
1132:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 723              		.loc 1 1132 0
 724 00ae 184B     		ldr	r3, .L35+28
 725 00b0 1B68     		ldr	r3, [r3]
 726 00b2 002B     		cmp	r3, #0
 727 00b4 1AD0     		beq	.L24
1133:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1134:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 728              		.loc 1 1134 0
 729 00b6 0F4B     		ldr	r3, .L35
 730 00b8 1B68     		ldr	r3, [r3]
 731 00ba FA68     		ldr	r2, [r7, #12]
 732 00bc 9A42     		cmp	r2, r3
 733 00be 15D1     		bne	.L24
1135:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1136:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 734              		.loc 1 1136 0
 735 00c0 144B     		ldr	r3, .L35+32
 736 00c2 1B68     		ldr	r3, [r3]
 737 00c4 002B     		cmp	r3, #0
 738 00c6 09D0     		beq	.L33
 739              	.LBB95:
 740              	.LBB96:
 741              		.loc 2 237 0 discriminator 1
 742              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 743 00c8 4FF05003 			mov r3, #80												
 744 00cc 83F31188 		msr basepri, r3											
 745 00d0 BFF36F8F 		isb														
 746 00d4 BFF34F8F 		dsb														
 747              	
 748              	@ 0 "" 2
 749              		.thumb
 750 00d8 BB60     		str	r3, [r7, #8]
 751              	.L34:
 752              	.LBE96:
 753              	.LBE95:
 754              		.loc 1 1136 0 discriminator 1
 755 00da FEE7     		b	.L34
 756              	.L33:
1137:../../../FreeRTOS_9_0/Source/tasks.c **** 				portYIELD_WITHIN_API();
 757              		.loc 1 1137 0
 758 00dc 0E4B     		ldr	r3, .L35+36
ARM GAS  /tmp/ccfW2k76.s 			page 38


 759 00de 4FF08052 		mov	r2, #268435456
 760 00e2 1A60     		str	r2, [r3]
 761              	@ 1137 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 762 00e4 BFF34F8F 		dsb
 763              	@ 0 "" 2
 764              	@ 1137 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 765 00e8 BFF36F8F 		isb
 766              	@ 0 "" 2
 767              		.thumb
 768              	.L24:
1138:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1139:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1140:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1141:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1142:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1143:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1144:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 769              		.loc 1 1144 0
 770 00ec 1037     		adds	r7, r7, #16
 771              	.LCFI18:
 772              		.cfi_def_cfa_offset 8
 773 00ee BD46     		mov	sp, r7
 774              	.LCFI19:
 775              		.cfi_def_cfa_register 13
 776              		@ sp needed
 777 00f0 80BD     		pop	{r7, pc}
 778              	.L36:
 779 00f2 00BF     		.align	2
 780              	.L35:
 781 00f4 00000000 		.word	pxCurrentTCB
 782 00f8 00000000 		.word	pxReadyTasksLists
 783 00fc 00000000 		.word	uxTopReadyPriority
 784 0100 00000000 		.word	uxTaskNumber
 785 0104 00000000 		.word	xTasksWaitingTermination
 786 0108 00000000 		.word	uxDeletedTasksWaitingCleanUp
 787 010c 00000000 		.word	uxCurrentNumberOfTasks
 788 0110 00000000 		.word	xSchedulerRunning
 789 0114 00000000 		.word	uxSchedulerSuspended
 790 0118 04ED00E0 		.word	-536810236
 791              		.cfi_endproc
 792              	.LFE8:
 794              		.section	.text.vTaskDelay,"ax",%progbits
 795              		.align	2
 796              		.global	vTaskDelay
 797              		.thumb
 798              		.thumb_func
 800              	vTaskDelay:
 801              	.LFB9:
1145:../../../FreeRTOS_9_0/Source/tasks.c **** 
1146:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1147:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1148:../../../FreeRTOS_9_0/Source/tasks.c **** 
1149:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1150:../../../FreeRTOS_9_0/Source/tasks.c **** 
1151:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1152:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1153:../../../FreeRTOS_9_0/Source/tasks.c **** 	TickType_t xTimeToWake;
ARM GAS  /tmp/ccfW2k76.s 			page 39


1154:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1155:../../../FreeRTOS_9_0/Source/tasks.c **** 
1156:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1157:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1158:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1159:../../../FreeRTOS_9_0/Source/tasks.c **** 
1160:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
1161:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1162:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1163:../../../FreeRTOS_9_0/Source/tasks.c **** 			block. */
1164:../../../FreeRTOS_9_0/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1165:../../../FreeRTOS_9_0/Source/tasks.c **** 
1166:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1167:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1168:../../../FreeRTOS_9_0/Source/tasks.c **** 
1169:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1170:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1171:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1172:../../../FreeRTOS_9_0/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1173:../../../FreeRTOS_9_0/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1174:../../../FreeRTOS_9_0/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1175:../../../FreeRTOS_9_0/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1176:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1177:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1178:../../../FreeRTOS_9_0/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1179:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1180:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1181:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1182:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1183:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1184:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1185:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1186:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1187:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1188:../../../FreeRTOS_9_0/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1189:../../../FreeRTOS_9_0/Source/tasks.c **** 				tick time is less than the wake time. */
1190:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1191:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1192:../../../FreeRTOS_9_0/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1193:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1194:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1195:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1196:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1197:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1198:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1199:../../../FreeRTOS_9_0/Source/tasks.c **** 
1200:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1201:../../../FreeRTOS_9_0/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1202:../../../FreeRTOS_9_0/Source/tasks.c **** 
1203:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1204:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1205:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1206:../../../FreeRTOS_9_0/Source/tasks.c **** 
1207:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1208:../../../FreeRTOS_9_0/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1209:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1210:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/ccfW2k76.s 			page 40


1211:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1212:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1213:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1214:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1215:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1216:../../../FreeRTOS_9_0/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1217:../../../FreeRTOS_9_0/Source/tasks.c **** 
1218:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1219:../../../FreeRTOS_9_0/Source/tasks.c **** 		have put ourselves to sleep. */
1220:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1221:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1222:../../../FreeRTOS_9_0/Source/tasks.c **** 			portYIELD_WITHIN_API();
1223:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1224:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1225:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1226:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1227:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1228:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1229:../../../FreeRTOS_9_0/Source/tasks.c **** 
1230:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1231:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1232:../../../FreeRTOS_9_0/Source/tasks.c **** 
1233:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1234:../../../FreeRTOS_9_0/Source/tasks.c **** 
1235:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1236:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 802              		.loc 1 1236 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 16
 805              		@ frame_needed = 1, uses_anonymous_args = 0
 806 0000 80B5     		push	{r7, lr}
 807              	.LCFI20:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 7, -8
 810              		.cfi_offset 14, -4
 811 0002 84B0     		sub	sp, sp, #16
 812              	.LCFI21:
 813              		.cfi_def_cfa_offset 24
 814 0004 00AF     		add	r7, sp, #0
 815              	.LCFI22:
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
1237:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 818              		.loc 1 1237 0
 819 0008 0023     		movs	r3, #0
 820 000a FB60     		str	r3, [r7, #12]
1238:../../../FreeRTOS_9_0/Source/tasks.c **** 
1239:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1240:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 821              		.loc 1 1240 0
 822 000c 7B68     		ldr	r3, [r7, #4]
 823 000e 002B     		cmp	r3, #0
 824 0010 16D0     		beq	.L38
1241:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1242:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 825              		.loc 1 1242 0
 826 0012 124B     		ldr	r3, .L42
ARM GAS  /tmp/ccfW2k76.s 			page 41


 827 0014 1B68     		ldr	r3, [r3]
 828 0016 002B     		cmp	r3, #0
 829 0018 09D0     		beq	.L39
 830              	.LBB97:
 831              	.LBB98:
 832              		.loc 2 237 0 discriminator 1
 833              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 834 001a 4FF05003 			mov r3, #80												
 835 001e 83F31188 		msr basepri, r3											
 836 0022 BFF36F8F 		isb														
 837 0026 BFF34F8F 		dsb														
 838              	
 839              	@ 0 "" 2
 840              		.thumb
 841 002a BB60     		str	r3, [r7, #8]
 842              	.L40:
 843              	.LBE98:
 844              	.LBE97:
 845              		.loc 1 1242 0 discriminator 1
 846 002c FEE7     		b	.L40
 847              	.L39:
1243:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSuspendAll();
 848              		.loc 1 1243 0
 849 002e FFF7FEFF 		bl	vTaskSuspendAll
1244:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1245:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_DELAY();
1246:../../../FreeRTOS_9_0/Source/tasks.c **** 
1247:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task that is removed from the event list while the
1248:../../../FreeRTOS_9_0/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1249:../../../FreeRTOS_9_0/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1250:../../../FreeRTOS_9_0/Source/tasks.c **** 				is resumed.
1251:../../../FreeRTOS_9_0/Source/tasks.c **** 
1252:../../../FreeRTOS_9_0/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1253:../../../FreeRTOS_9_0/Source/tasks.c **** 				executing task. */
1254:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 850              		.loc 1 1254 0
 851 0032 7868     		ldr	r0, [r7, #4]
 852 0034 0021     		movs	r1, #0
 853 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1255:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1256:../../../FreeRTOS_9_0/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 854              		.loc 1 1256 0
 855 003a FFF7FEFF 		bl	xTaskResumeAll
 856 003e F860     		str	r0, [r7, #12]
 857              	.L38:
1257:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1258:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1259:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1260:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1262:../../../FreeRTOS_9_0/Source/tasks.c **** 
1263:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1264:../../../FreeRTOS_9_0/Source/tasks.c **** 		have put ourselves to sleep. */
1265:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 858              		.loc 1 1265 0
 859 0040 FB68     		ldr	r3, [r7, #12]
 860 0042 002B     		cmp	r3, #0
ARM GAS  /tmp/ccfW2k76.s 			page 42


 861 0044 07D1     		bne	.L37
1266:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1267:../../../FreeRTOS_9_0/Source/tasks.c **** 			portYIELD_WITHIN_API();
 862              		.loc 1 1267 0
 863 0046 064B     		ldr	r3, .L42+4
 864 0048 4FF08052 		mov	r2, #268435456
 865 004c 1A60     		str	r2, [r3]
 866              	@ 1267 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 867 004e BFF34F8F 		dsb
 868              	@ 0 "" 2
 869              	@ 1267 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 870 0052 BFF36F8F 		isb
 871              	@ 0 "" 2
 872              		.thumb
 873              	.L37:
1268:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1269:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1270:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1271:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1272:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1273:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 874              		.loc 1 1273 0
 875 0056 1037     		adds	r7, r7, #16
 876              	.LCFI23:
 877              		.cfi_def_cfa_offset 8
 878 0058 BD46     		mov	sp, r7
 879              	.LCFI24:
 880              		.cfi_def_cfa_register 13
 881              		@ sp needed
 882 005a 80BD     		pop	{r7, pc}
 883              	.L43:
 884              		.align	2
 885              	.L42:
 886 005c 00000000 		.word	uxSchedulerSuspended
 887 0060 04ED00E0 		.word	-536810236
 888              		.cfi_endproc
 889              	.LFE9:
 891              		.section	.text.eTaskGetState,"ax",%progbits
 892              		.align	2
 893              		.global	eTaskGetState
 894              		.thumb
 895              		.thumb_func
 897              	eTaskGetState:
 898              	.LFB10:
1274:../../../FreeRTOS_9_0/Source/tasks.c **** 
1275:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1276:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1277:../../../FreeRTOS_9_0/Source/tasks.c **** 
1278:../../../FreeRTOS_9_0/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1279:../../../FreeRTOS_9_0/Source/tasks.c **** 
1280:../../../FreeRTOS_9_0/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1281:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 899              		.loc 1 1281 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 24
 902              		@ frame_needed = 1, uses_anonymous_args = 0
 903 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccfW2k76.s 			page 43


 904              	.LCFI25:
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 7, -8
 907              		.cfi_offset 14, -4
 908 0002 86B0     		sub	sp, sp, #24
 909              	.LCFI26:
 910              		.cfi_def_cfa_offset 32
 911 0004 00AF     		add	r7, sp, #0
 912              	.LCFI27:
 913              		.cfi_def_cfa_register 7
 914 0006 7860     		str	r0, [r7, #4]
1282:../../../FreeRTOS_9_0/Source/tasks.c **** 	eTaskState eReturn;
1283:../../../FreeRTOS_9_0/Source/tasks.c **** 	List_t *pxStateList;
1284:../../../FreeRTOS_9_0/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 915              		.loc 1 1284 0
 916 0008 7B68     		ldr	r3, [r7, #4]
 917 000a 3B61     		str	r3, [r7, #16]
1285:../../../FreeRTOS_9_0/Source/tasks.c **** 
1286:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTCB );
 918              		.loc 1 1286 0
 919 000c 3B69     		ldr	r3, [r7, #16]
 920 000e 002B     		cmp	r3, #0
 921 0010 09D1     		bne	.L45
 922              	.LBB99:
 923              	.LBB100:
 924              		.loc 2 237 0 discriminator 1
 925              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 926 0012 4FF05003 			mov r3, #80												
 927 0016 83F31188 		msr basepri, r3											
 928 001a BFF36F8F 		isb														
 929 001e BFF34F8F 		dsb														
 930              	
 931              	@ 0 "" 2
 932              		.thumb
 933 0022 BB60     		str	r3, [r7, #8]
 934              	.L46:
 935              	.LBE100:
 936              	.LBE99:
 937              		.loc 1 1286 0 discriminator 1
 938 0024 FEE7     		b	.L46
 939              	.L45:
1287:../../../FreeRTOS_9_0/Source/tasks.c **** 
1288:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 940              		.loc 1 1288 0
 941 0026 1D4B     		ldr	r3, .L57
 942 0028 1B68     		ldr	r3, [r3]
 943 002a 3A69     		ldr	r2, [r7, #16]
 944 002c 9A42     		cmp	r2, r3
 945 002e 02D1     		bne	.L47
1289:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1290:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1291:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eRunning;
 946              		.loc 1 1291 0
 947 0030 0023     		movs	r3, #0
 948 0032 FB75     		strb	r3, [r7, #23]
 949 0034 2DE0     		b	.L48
 950              	.L47:
ARM GAS  /tmp/ccfW2k76.s 			page 44


1292:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1293:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1294:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1295:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 951              		.loc 1 1295 0
 952 0036 FFF7FEFF 		bl	vPortEnterCritical
1296:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1297:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 953              		.loc 1 1297 0
 954 003a 3B69     		ldr	r3, [r7, #16]
 955 003c 5B69     		ldr	r3, [r3, #20]
 956 003e FB60     		str	r3, [r7, #12]
1298:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1299:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
 957              		.loc 1 1299 0
 958 0040 FFF7FEFF 		bl	vPortExitCritical
1300:../../../FreeRTOS_9_0/Source/tasks.c **** 
1301:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 959              		.loc 1 1301 0
 960 0044 164B     		ldr	r3, .L57+4
 961 0046 1B68     		ldr	r3, [r3]
 962 0048 FA68     		ldr	r2, [r7, #12]
 963 004a 9A42     		cmp	r2, r3
 964 004c 04D0     		beq	.L49
 965              		.loc 1 1301 0 is_stmt 0 discriminator 1
 966 004e 154B     		ldr	r3, .L57+8
 967 0050 1B68     		ldr	r3, [r3]
 968 0052 FA68     		ldr	r2, [r7, #12]
 969 0054 9A42     		cmp	r2, r3
 970 0056 02D1     		bne	.L50
 971              	.L49:
1302:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1303:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1304:../../../FreeRTOS_9_0/Source/tasks.c **** 				lists. */
1305:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eBlocked;
 972              		.loc 1 1305 0 is_stmt 1
 973 0058 0223     		movs	r3, #2
 974 005a FB75     		strb	r3, [r7, #23]
 975 005c 19E0     		b	.L48
 976              	.L50:
1306:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1307:../../../FreeRTOS_9_0/Source/tasks.c **** 
1308:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1309:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 977              		.loc 1 1309 0
 978 005e FB68     		ldr	r3, [r7, #12]
 979 0060 114A     		ldr	r2, .L57+12
 980 0062 9342     		cmp	r3, r2
 981 0064 09D1     		bne	.L51
1310:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1311:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1312:../../../FreeRTOS_9_0/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1313:../../../FreeRTOS_9_0/Source/tasks.c **** 					indefinitely? */
1314:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 982              		.loc 1 1314 0
 983 0066 3B69     		ldr	r3, [r7, #16]
 984 0068 9B6A     		ldr	r3, [r3, #40]
ARM GAS  /tmp/ccfW2k76.s 			page 45


 985 006a 002B     		cmp	r3, #0
 986 006c 02D1     		bne	.L52
1315:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1316:../../../FreeRTOS_9_0/Source/tasks.c **** 						eReturn = eSuspended;
 987              		.loc 1 1316 0
 988 006e 0323     		movs	r3, #3
 989 0070 FB75     		strb	r3, [r7, #23]
 990 0072 0EE0     		b	.L48
 991              	.L52:
1317:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1318:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1319:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1320:../../../FreeRTOS_9_0/Source/tasks.c **** 						eReturn = eBlocked;
 992              		.loc 1 1320 0
 993 0074 0223     		movs	r3, #2
 994 0076 FB75     		strb	r3, [r7, #23]
 995 0078 0BE0     		b	.L48
 996              	.L51:
1321:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1322:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1323:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1324:../../../FreeRTOS_9_0/Source/tasks.c **** 
1325:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1326:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 997              		.loc 1 1326 0
 998 007a FB68     		ldr	r3, [r7, #12]
 999 007c 0B4A     		ldr	r2, .L57+16
 1000 007e 9342     		cmp	r3, r2
 1001 0080 02D0     		beq	.L54
 1002              		.loc 1 1326 0 is_stmt 0 discriminator 1
 1003 0082 FB68     		ldr	r3, [r7, #12]
 1004 0084 002B     		cmp	r3, #0
 1005 0086 02D1     		bne	.L55
 1006              	.L54:
1327:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1328:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1329:../../../FreeRTOS_9_0/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1330:../../../FreeRTOS_9_0/Source/tasks.c **** 					all. */
1331:../../../FreeRTOS_9_0/Source/tasks.c **** 					eReturn = eDeleted;
 1007              		.loc 1 1331 0 is_stmt 1
 1008 0088 0423     		movs	r3, #4
 1009 008a FB75     		strb	r3, [r7, #23]
 1010 008c 01E0     		b	.L48
 1011              	.L55:
1332:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1333:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1334:../../../FreeRTOS_9_0/Source/tasks.c **** 
1335:../../../FreeRTOS_9_0/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1336:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1337:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1338:../../../FreeRTOS_9_0/Source/tasks.c **** 				Ready (including pending ready) state. */
1339:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eReady;
 1012              		.loc 1 1339 0
 1013 008e 0123     		movs	r3, #1
 1014 0090 FB75     		strb	r3, [r7, #23]
 1015              	.L48:
1340:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/ccfW2k76.s 			page 46


1341:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1342:../../../FreeRTOS_9_0/Source/tasks.c **** 
1343:../../../FreeRTOS_9_0/Source/tasks.c **** 		return eReturn;
 1016              		.loc 1 1343 0
 1017 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1344:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1018              		.loc 1 1344 0
 1019 0094 1846     		mov	r0, r3
 1020 0096 1837     		adds	r7, r7, #24
 1021              	.LCFI28:
 1022              		.cfi_def_cfa_offset 8
 1023 0098 BD46     		mov	sp, r7
 1024              	.LCFI29:
 1025              		.cfi_def_cfa_register 13
 1026              		@ sp needed
 1027 009a 80BD     		pop	{r7, pc}
 1028              	.L58:
 1029              		.align	2
 1030              	.L57:
 1031 009c 00000000 		.word	pxCurrentTCB
 1032 00a0 00000000 		.word	pxDelayedTaskList
 1033 00a4 00000000 		.word	pxOverflowDelayedTaskList
 1034 00a8 00000000 		.word	xSuspendedTaskList
 1035 00ac 00000000 		.word	xTasksWaitingTermination
 1036              		.cfi_endproc
 1037              	.LFE10:
 1039              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1040              		.align	2
 1041              		.global	uxTaskPriorityGet
 1042              		.thumb
 1043              		.thumb_func
 1045              	uxTaskPriorityGet:
 1046              	.LFB11:
1345:../../../FreeRTOS_9_0/Source/tasks.c **** 
1346:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1347:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1348:../../../FreeRTOS_9_0/Source/tasks.c **** 
1349:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1350:../../../FreeRTOS_9_0/Source/tasks.c **** 
1351:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1352:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1047              		.loc 1 1352 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 16
 1050              		@ frame_needed = 1, uses_anonymous_args = 0
 1051 0000 80B5     		push	{r7, lr}
 1052              	.LCFI30:
 1053              		.cfi_def_cfa_offset 8
 1054              		.cfi_offset 7, -8
 1055              		.cfi_offset 14, -4
 1056 0002 84B0     		sub	sp, sp, #16
 1057              	.LCFI31:
 1058              		.cfi_def_cfa_offset 24
 1059 0004 00AF     		add	r7, sp, #0
 1060              	.LCFI32:
 1061              		.cfi_def_cfa_register 7
 1062 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccfW2k76.s 			page 47


1353:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1354:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
1355:../../../FreeRTOS_9_0/Source/tasks.c **** 
1356:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1063              		.loc 1 1356 0
 1064 0008 FFF7FEFF 		bl	vPortEnterCritical
1357:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1358:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1359:../../../FreeRTOS_9_0/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1360:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1065              		.loc 1 1360 0
 1066 000c 7B68     		ldr	r3, [r7, #4]
 1067 000e 002B     		cmp	r3, #0
 1068 0010 02D1     		bne	.L60
 1069              		.loc 1 1360 0 is_stmt 0 discriminator 1
 1070 0012 074B     		ldr	r3, .L63
 1071 0014 1B68     		ldr	r3, [r3]
 1072 0016 00E0     		b	.L61
 1073              	.L60:
 1074              		.loc 1 1360 0 discriminator 2
 1075 0018 7B68     		ldr	r3, [r7, #4]
 1076              	.L61:
 1077              		.loc 1 1360 0 discriminator 4
 1078 001a FB60     		str	r3, [r7, #12]
1361:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1079              		.loc 1 1361 0 is_stmt 1 discriminator 4
 1080 001c FB68     		ldr	r3, [r7, #12]
 1081 001e DB6A     		ldr	r3, [r3, #44]
 1082 0020 BB60     		str	r3, [r7, #8]
1362:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1363:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1083              		.loc 1 1363 0 discriminator 4
 1084 0022 FFF7FEFF 		bl	vPortExitCritical
1364:../../../FreeRTOS_9_0/Source/tasks.c **** 
1365:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
 1085              		.loc 1 1365 0 discriminator 4
 1086 0026 BB68     		ldr	r3, [r7, #8]
1366:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1087              		.loc 1 1366 0 discriminator 4
 1088 0028 1846     		mov	r0, r3
 1089 002a 1037     		adds	r7, r7, #16
 1090              	.LCFI33:
 1091              		.cfi_def_cfa_offset 8
 1092 002c BD46     		mov	sp, r7
 1093              	.LCFI34:
 1094              		.cfi_def_cfa_register 13
 1095              		@ sp needed
 1096 002e 80BD     		pop	{r7, pc}
 1097              	.L64:
 1098              		.align	2
 1099              	.L63:
 1100 0030 00000000 		.word	pxCurrentTCB
 1101              		.cfi_endproc
 1102              	.LFE11:
 1104              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1105              		.align	2
 1106              		.global	uxTaskPriorityGetFromISR
ARM GAS  /tmp/ccfW2k76.s 			page 48


 1107              		.thumb
 1108              		.thumb_func
 1110              	uxTaskPriorityGetFromISR:
 1111              	.LFB12:
1367:../../../FreeRTOS_9_0/Source/tasks.c **** 
1368:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1369:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1370:../../../FreeRTOS_9_0/Source/tasks.c **** 
1371:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1372:../../../FreeRTOS_9_0/Source/tasks.c **** 
1373:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1374:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1112              		.loc 1 1374 0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 32
 1115              		@ frame_needed = 1, uses_anonymous_args = 0
 1116 0000 80B5     		push	{r7, lr}
 1117              	.LCFI35:
 1118              		.cfi_def_cfa_offset 8
 1119              		.cfi_offset 7, -8
 1120              		.cfi_offset 14, -4
 1121 0002 88B0     		sub	sp, sp, #32
 1122              	.LCFI36:
 1123              		.cfi_def_cfa_offset 40
 1124 0004 00AF     		add	r7, sp, #0
 1125              	.LCFI37:
 1126              		.cfi_def_cfa_register 7
 1127 0006 7860     		str	r0, [r7, #4]
1375:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1376:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1377:../../../FreeRTOS_9_0/Source/tasks.c **** 
1378:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1379:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1380:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1381:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1382:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1383:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1384:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1385:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1386:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1387:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1388:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1389:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1390:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1391:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1392:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
1393:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1394:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1128              		.loc 1 1394 0
 1129 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1130              	.LBB101:
 1131              	.LBB102:
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
ARM GAS  /tmp/ccfW2k76.s 			page 49


 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1132              		.loc 2 253 0
 1133              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1134 000c EFF31182 			mrs r2, basepri											
 1135 0010 4FF05003 		mov r3, #80												
 1136 0014 83F31188 		msr basepri, r3											
 1137 0018 BFF36F8F 		isb														
 1138 001c BFF34F8F 		dsb														
 1139              	
 1140              	@ 0 "" 2
 1141              		.thumb
 1142 0020 3A61     		str	r2, [r7, #16]
 1143 0022 FB60     		str	r3, [r7, #12]
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1144              		.loc 2 265 0
 1145 0024 3B69     		ldr	r3, [r7, #16]
 1146              	.LBE102:
 1147              	.LBE101:
1395:../../../FreeRTOS_9_0/Source/tasks.c **** 
1396:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1148              		.loc 1 1396 0
 1149 0026 FB61     		str	r3, [r7, #28]
1397:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1398:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1399:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is being queried. */
1400:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1150              		.loc 1 1400 0
 1151 0028 7B68     		ldr	r3, [r7, #4]
 1152 002a 002B     		cmp	r3, #0
 1153 002c 02D1     		bne	.L67
 1154              		.loc 1 1400 0 is_stmt 0 discriminator 1
 1155 002e 094B     		ldr	r3, .L70
 1156 0030 1B68     		ldr	r3, [r3]
 1157 0032 00E0     		b	.L68
 1158              	.L67:
 1159              		.loc 1 1400 0 discriminator 2
ARM GAS  /tmp/ccfW2k76.s 			page 50


 1160 0034 7B68     		ldr	r3, [r7, #4]
 1161              	.L68:
 1162              		.loc 1 1400 0 discriminator 4
 1163 0036 BB61     		str	r3, [r7, #24]
1401:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1164              		.loc 1 1401 0 is_stmt 1 discriminator 4
 1165 0038 BB69     		ldr	r3, [r7, #24]
 1166 003a DB6A     		ldr	r3, [r3, #44]
 1167 003c 7B61     		str	r3, [r7, #20]
 1168 003e FB69     		ldr	r3, [r7, #28]
 1169 0040 BB60     		str	r3, [r7, #8]
 1170              	.LBB103:
 1171              	.LBB104:
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1172              		.loc 2 271 0 discriminator 4
 1173 0042 BB68     		ldr	r3, [r7, #8]
 1174              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1175 0044 83F31188 			msr basepri, r3	
 1176              	@ 0 "" 2
 1177              		.thumb
 1178              	.LBE104:
 1179              	.LBE103:
1402:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1403:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1404:../../../FreeRTOS_9_0/Source/tasks.c **** 
1405:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
 1180              		.loc 1 1405 0 discriminator 4
 1181 0048 7B69     		ldr	r3, [r7, #20]
1406:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1182              		.loc 1 1406 0 discriminator 4
 1183 004a 1846     		mov	r0, r3
 1184 004c 2037     		adds	r7, r7, #32
 1185              	.LCFI38:
 1186              		.cfi_def_cfa_offset 8
 1187 004e BD46     		mov	sp, r7
 1188              	.LCFI39:
 1189              		.cfi_def_cfa_register 13
 1190              		@ sp needed
 1191 0050 80BD     		pop	{r7, pc}
 1192              	.L71:
 1193 0052 00BF     		.align	2
 1194              	.L70:
 1195 0054 00000000 		.word	pxCurrentTCB
 1196              		.cfi_endproc
 1197              	.LFE12:
 1199              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1200              		.align	2
 1201              		.global	vTaskPrioritySet
 1202              		.thumb
 1203              		.thumb_func
 1205              	vTaskPrioritySet:
 1206              	.LFB13:
ARM GAS  /tmp/ccfW2k76.s 			page 51


1407:../../../FreeRTOS_9_0/Source/tasks.c **** 
1408:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1409:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1410:../../../FreeRTOS_9_0/Source/tasks.c **** 
1411:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1412:../../../FreeRTOS_9_0/Source/tasks.c **** 
1413:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1414:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1207              		.loc 1 1414 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 32
 1210              		@ frame_needed = 1, uses_anonymous_args = 0
 1211 0000 80B5     		push	{r7, lr}
 1212              	.LCFI40:
 1213              		.cfi_def_cfa_offset 8
 1214              		.cfi_offset 7, -8
 1215              		.cfi_offset 14, -4
 1216 0002 88B0     		sub	sp, sp, #32
 1217              	.LCFI41:
 1218              		.cfi_def_cfa_offset 40
 1219 0004 00AF     		add	r7, sp, #0
 1220              	.LCFI42:
 1221              		.cfi_def_cfa_register 7
 1222 0006 7860     		str	r0, [r7, #4]
 1223 0008 3960     		str	r1, [r7]
1415:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1416:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1417:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1224              		.loc 1 1417 0
 1225 000a 0023     		movs	r3, #0
 1226 000c FB61     		str	r3, [r7, #28]
1418:../../../FreeRTOS_9_0/Source/tasks.c **** 
1419:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1227              		.loc 1 1419 0
 1228 000e 3B68     		ldr	r3, [r7]
 1229 0010 062B     		cmp	r3, #6
 1230 0012 09D9     		bls	.L73
 1231              	.LBB105:
 1232              	.LBB106:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1233              		.loc 2 237 0 discriminator 1
 1234              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1235 0014 4FF05003 			mov r3, #80												
 1236 0018 83F31188 		msr basepri, r3											
 1237 001c BFF36F8F 		isb														
 1238 0020 BFF34F8F 		dsb														
 1239              	
 1240              	@ 0 "" 2
 1241              		.thumb
 1242 0024 FB60     		str	r3, [r7, #12]
 1243              	.L74:
 1244              	.LBE106:
 1245              	.LBE105:
 1246              		.loc 1 1419 0 discriminator 1
 1247 0026 FEE7     		b	.L74
 1248              	.L73:
1420:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 52


1421:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1422:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1249              		.loc 1 1422 0
 1250 0028 3B68     		ldr	r3, [r7]
 1251 002a 062B     		cmp	r3, #6
 1252 002c 01D9     		bls	.L75
1423:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1424:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1253              		.loc 1 1424 0
 1254 002e 0623     		movs	r3, #6
 1255 0030 3B60     		str	r3, [r7]
 1256              	.L75:
1425:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1426:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1427:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1428:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1429:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1430:../../../FreeRTOS_9_0/Source/tasks.c **** 
1431:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1257              		.loc 1 1431 0
 1258 0032 FFF7FEFF 		bl	vPortEnterCritical
1432:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1433:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1434:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is being changed. */
1435:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1259              		.loc 1 1435 0
 1260 0036 7B68     		ldr	r3, [r7, #4]
 1261 0038 002B     		cmp	r3, #0
 1262 003a 02D1     		bne	.L76
 1263              		.loc 1 1435 0 is_stmt 0 discriminator 1
 1264 003c 434B     		ldr	r3, .L87
 1265 003e 1B68     		ldr	r3, [r3]
 1266 0040 00E0     		b	.L77
 1267              	.L76:
 1268              		.loc 1 1435 0 discriminator 2
 1269 0042 7B68     		ldr	r3, [r7, #4]
 1270              	.L77:
 1271              		.loc 1 1435 0 discriminator 4
 1272 0044 BB61     		str	r3, [r7, #24]
1436:../../../FreeRTOS_9_0/Source/tasks.c **** 
1437:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1438:../../../FreeRTOS_9_0/Source/tasks.c **** 
1439:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1440:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1441:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1273              		.loc 1 1441 0 is_stmt 1 discriminator 4
 1274 0046 BB69     		ldr	r3, [r7, #24]
 1275 0048 DB6C     		ldr	r3, [r3, #76]
 1276 004a 7B61     		str	r3, [r7, #20]
1442:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1443:../../../FreeRTOS_9_0/Source/tasks.c **** 			#else
1444:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1445:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1446:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1447:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
1448:../../../FreeRTOS_9_0/Source/tasks.c **** 
1449:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
ARM GAS  /tmp/ccfW2k76.s 			page 53


 1277              		.loc 1 1449 0 discriminator 4
 1278 004c 7A69     		ldr	r2, [r7, #20]
 1279 004e 3B68     		ldr	r3, [r7]
 1280 0050 9A42     		cmp	r2, r3
 1281 0052 76D0     		beq	.L78
1450:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1451:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1452:../../../FreeRTOS_9_0/Source/tasks.c **** 				priority than the calling task. */
1453:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1282              		.loc 1 1453 0
 1283 0054 3A68     		ldr	r2, [r7]
 1284 0056 7B69     		ldr	r3, [r7, #20]
 1285 0058 9A42     		cmp	r2, r3
 1286 005a 0DD9     		bls	.L79
1454:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1455:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1287              		.loc 1 1455 0
 1288 005c 3B4B     		ldr	r3, .L87
 1289 005e 1B68     		ldr	r3, [r3]
 1290 0060 BA69     		ldr	r2, [r7, #24]
 1291 0062 9A42     		cmp	r2, r3
 1292 0064 0FD0     		beq	.L80
1456:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1457:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The priority of a task other than the currently
1458:../../../FreeRTOS_9_0/Source/tasks.c **** 						running task is being raised.  Is the priority being
1459:../../../FreeRTOS_9_0/Source/tasks.c **** 						raised above that of the running task? */
1460:../../../FreeRTOS_9_0/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1293              		.loc 1 1460 0
 1294 0066 394B     		ldr	r3, .L87
 1295 0068 1B68     		ldr	r3, [r3]
 1296 006a DA6A     		ldr	r2, [r3, #44]
 1297 006c 3B68     		ldr	r3, [r7]
 1298 006e 9A42     		cmp	r2, r3
 1299 0070 09D8     		bhi	.L80
1461:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
1462:../../../FreeRTOS_9_0/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1300              		.loc 1 1462 0
 1301 0072 0123     		movs	r3, #1
 1302 0074 FB61     		str	r3, [r7, #28]
 1303 0076 06E0     		b	.L80
 1304              	.L79:
1463:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
1464:../../../FreeRTOS_9_0/Source/tasks.c **** 						else
1465:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
1466:../../../FreeRTOS_9_0/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1467:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
1468:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1469:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1470:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1471:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The priority of the running task is being raised,
1472:../../../FreeRTOS_9_0/Source/tasks.c **** 						but the running task must already be the highest
1473:../../../FreeRTOS_9_0/Source/tasks.c **** 						priority task able to run so no yield is required. */
1474:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1475:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1476:../../../FreeRTOS_9_0/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1305              		.loc 1 1476 0
 1306 0078 344B     		ldr	r3, .L87
ARM GAS  /tmp/ccfW2k76.s 			page 54


 1307 007a 1B68     		ldr	r3, [r3]
 1308 007c BA69     		ldr	r2, [r7, #24]
 1309 007e 9A42     		cmp	r2, r3
 1310 0080 01D1     		bne	.L80
1477:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1478:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Setting the priority of the running task down means
1479:../../../FreeRTOS_9_0/Source/tasks.c **** 					there may now be another task of higher priority that
1480:../../../FreeRTOS_9_0/Source/tasks.c **** 					is ready to execute. */
1481:../../../FreeRTOS_9_0/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1311              		.loc 1 1481 0
 1312 0082 0123     		movs	r3, #1
 1313 0084 FB61     		str	r3, [r7, #28]
 1314              	.L80:
1482:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1483:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1484:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1485:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1486:../../../FreeRTOS_9_0/Source/tasks.c **** 					require a yield as the running task must be above the
1487:../../../FreeRTOS_9_0/Source/tasks.c **** 					new priority of the task being modified. */
1488:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1489:../../../FreeRTOS_9_0/Source/tasks.c **** 
1490:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1491:../../../FreeRTOS_9_0/Source/tasks.c **** 				before its uxPriority member is changed so the
1492:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1493:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1315              		.loc 1 1493 0
 1316 0086 BB69     		ldr	r3, [r7, #24]
 1317 0088 DB6A     		ldr	r3, [r3, #44]
 1318 008a 3B61     		str	r3, [r7, #16]
1494:../../../FreeRTOS_9_0/Source/tasks.c **** 
1495:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1496:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1497:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1498:../../../FreeRTOS_9_0/Source/tasks.c **** 					currently using an inherited priority. */
1499:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1319              		.loc 1 1499 0
 1320 008c BB69     		ldr	r3, [r7, #24]
 1321 008e DA6C     		ldr	r2, [r3, #76]
 1322 0090 BB69     		ldr	r3, [r7, #24]
 1323 0092 DB6A     		ldr	r3, [r3, #44]
 1324 0094 9A42     		cmp	r2, r3
 1325 0096 02D1     		bne	.L81
1500:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1501:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1326              		.loc 1 1501 0
 1327 0098 BB69     		ldr	r3, [r7, #24]
 1328 009a 3A68     		ldr	r2, [r7]
 1329 009c DA62     		str	r2, [r3, #44]
 1330              	.L81:
1502:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1503:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1504:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1505:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1506:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1507:../../../FreeRTOS_9_0/Source/tasks.c **** 
1508:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The base priority gets set whatever. */
1509:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
ARM GAS  /tmp/ccfW2k76.s 			page 55


 1331              		.loc 1 1509 0
 1332 009e BB69     		ldr	r3, [r7, #24]
 1333 00a0 3A68     		ldr	r2, [r7]
 1334 00a2 DA64     		str	r2, [r3, #76]
1510:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1511:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
1512:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1513:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1514:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1515:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
1516:../../../FreeRTOS_9_0/Source/tasks.c **** 
1517:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1518:../../../FreeRTOS_9_0/Source/tasks.c **** 				being used for anything else. */
1519:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1335              		.loc 1 1519 0
 1336 00a4 BB69     		ldr	r3, [r7, #24]
 1337 00a6 9B69     		ldr	r3, [r3, #24]
 1338 00a8 002B     		cmp	r3, #0
 1339 00aa 04DB     		blt	.L82
1520:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1521:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1340              		.loc 1 1521 0
 1341 00ac 3B68     		ldr	r3, [r7]
 1342 00ae C3F10702 		rsb	r2, r3, #7
 1343 00b2 BB69     		ldr	r3, [r7, #24]
 1344 00b4 9A61     		str	r2, [r3, #24]
 1345              	.L82:
1522:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1523:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1524:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1525:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1526:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1527:../../../FreeRTOS_9_0/Source/tasks.c **** 
1528:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1529:../../../FreeRTOS_9_0/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1530:../../../FreeRTOS_9_0/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1531:../../../FreeRTOS_9_0/Source/tasks.c **** 				in the list appropriate to its new priority. */
1532:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1346              		.loc 1 1532 0
 1347 00b6 BB69     		ldr	r3, [r7, #24]
 1348 00b8 5969     		ldr	r1, [r3, #20]
 1349 00ba 3A69     		ldr	r2, [r7, #16]
 1350 00bc 1346     		mov	r3, r2
 1351 00be 9B00     		lsls	r3, r3, #2
 1352 00c0 1344     		add	r3, r3, r2
 1353 00c2 9B00     		lsls	r3, r3, #2
 1354 00c4 224A     		ldr	r2, .L87+4
 1355 00c6 1344     		add	r3, r3, r2
 1356 00c8 9942     		cmp	r1, r3
 1357 00ca 01D1     		bne	.L83
 1358              		.loc 1 1532 0 is_stmt 0 discriminator 1
 1359 00cc 0123     		movs	r3, #1
 1360 00ce 00E0     		b	.L84
 1361              	.L83:
 1362              		.loc 1 1532 0 discriminator 2
 1363 00d0 0023     		movs	r3, #0
 1364              	.L84:
ARM GAS  /tmp/ccfW2k76.s 			page 56


 1365              		.loc 1 1532 0 discriminator 4
 1366 00d2 002B     		cmp	r3, #0
 1367 00d4 2AD0     		beq	.L85
1533:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1534:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1535:../../../FreeRTOS_9_0/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1536:../../../FreeRTOS_9_0/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1537:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1368              		.loc 1 1537 0 is_stmt 1
 1369 00d6 BB69     		ldr	r3, [r7, #24]
 1370 00d8 0433     		adds	r3, r3, #4
 1371 00da 1846     		mov	r0, r3
 1372 00dc FFF7FEFF 		bl	uxListRemove
 1373 00e0 0346     		mov	r3, r0
 1374 00e2 002B     		cmp	r3, #0
 1375 00e4 09D1     		bne	.L86
1538:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1539:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1540:../../../FreeRTOS_9_0/Source/tasks.c **** 						there is no need to check again and the port level
1541:../../../FreeRTOS_9_0/Source/tasks.c **** 						reset macro can be called directly. */
1542:../../../FreeRTOS_9_0/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1376              		.loc 1 1542 0
 1377 00e6 3B69     		ldr	r3, [r7, #16]
 1378 00e8 0122     		movs	r2, #1
 1379 00ea 02FA03F3 		lsl	r3, r2, r3
 1380 00ee DA43     		mvns	r2, r3
 1381 00f0 184B     		ldr	r3, .L87+8
 1382 00f2 1B68     		ldr	r3, [r3]
 1383 00f4 1340     		ands	r3, r3, r2
 1384 00f6 174A     		ldr	r2, .L87+8
 1385 00f8 1360     		str	r3, [r2]
 1386              	.L86:
1543:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1544:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1545:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1546:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1547:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1548:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 1387              		.loc 1 1548 0
 1388 00fa BB69     		ldr	r3, [r7, #24]
 1389 00fc DB6A     		ldr	r3, [r3, #44]
 1390 00fe 1A46     		mov	r2, r3
 1391 0100 0123     		movs	r3, #1
 1392 0102 03FA02F2 		lsl	r2, r3, r2
 1393 0106 134B     		ldr	r3, .L87+8
 1394 0108 1B68     		ldr	r3, [r3]
 1395 010a 1343     		orrs	r3, r3, r2
 1396 010c 114A     		ldr	r2, .L87+8
 1397 010e 1360     		str	r3, [r2]
 1398 0110 BB69     		ldr	r3, [r7, #24]
 1399 0112 DA6A     		ldr	r2, [r3, #44]
 1400 0114 1346     		mov	r3, r2
 1401 0116 9B00     		lsls	r3, r3, #2
 1402 0118 1344     		add	r3, r3, r2
 1403 011a 9B00     		lsls	r3, r3, #2
 1404 011c 0C4A     		ldr	r2, .L87+4
 1405 011e 1A44     		add	r2, r2, r3
ARM GAS  /tmp/ccfW2k76.s 			page 57


 1406 0120 BB69     		ldr	r3, [r7, #24]
 1407 0122 0433     		adds	r3, r3, #4
 1408 0124 1046     		mov	r0, r2
 1409 0126 1946     		mov	r1, r3
 1410 0128 FFF7FEFF 		bl	vListInsertEnd
 1411              	.L85:
1549:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1550:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1551:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1552:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1553:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1554:../../../FreeRTOS_9_0/Source/tasks.c **** 
1555:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1412              		.loc 1 1555 0
 1413 012c FB69     		ldr	r3, [r7, #28]
 1414 012e 002B     		cmp	r3, #0
 1415 0130 07D0     		beq	.L78
1556:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1557:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1416              		.loc 1 1557 0
 1417 0132 094B     		ldr	r3, .L87+12
 1418 0134 4FF08052 		mov	r2, #268435456
 1419 0138 1A60     		str	r2, [r3]
 1420              	@ 1557 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1421 013a BFF34F8F 		dsb
 1422              	@ 0 "" 2
 1423              	@ 1557 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1424 013e BFF36F8F 		isb
 1425              	@ 0 "" 2
 1426              		.thumb
 1427              	.L78:
1558:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1559:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1560:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1561:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1562:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1563:../../../FreeRTOS_9_0/Source/tasks.c **** 
1564:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1565:../../../FreeRTOS_9_0/Source/tasks.c **** 				optimised task selection is not being used. */
1566:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1567:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1568:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1569:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1428              		.loc 1 1569 0
 1429 0142 FFF7FEFF 		bl	vPortExitCritical
1570:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1430              		.loc 1 1570 0
 1431 0146 2037     		adds	r7, r7, #32
 1432              	.LCFI43:
 1433              		.cfi_def_cfa_offset 8
 1434 0148 BD46     		mov	sp, r7
 1435              	.LCFI44:
 1436              		.cfi_def_cfa_register 13
 1437              		@ sp needed
 1438 014a 80BD     		pop	{r7, pc}
 1439              	.L88:
 1440              		.align	2
ARM GAS  /tmp/ccfW2k76.s 			page 58


 1441              	.L87:
 1442 014c 00000000 		.word	pxCurrentTCB
 1443 0150 00000000 		.word	pxReadyTasksLists
 1444 0154 00000000 		.word	uxTopReadyPriority
 1445 0158 04ED00E0 		.word	-536810236
 1446              		.cfi_endproc
 1447              	.LFE13:
 1449              		.section	.text.vTaskSuspend,"ax",%progbits
 1450              		.align	2
 1451              		.global	vTaskSuspend
 1452              		.thumb
 1453              		.thumb_func
 1455              	vTaskSuspend:
 1456              	.LFB14:
1571:../../../FreeRTOS_9_0/Source/tasks.c **** 
1572:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1573:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1574:../../../FreeRTOS_9_0/Source/tasks.c **** 
1575:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1576:../../../FreeRTOS_9_0/Source/tasks.c **** 
1577:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1578:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1457              		.loc 1 1578 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 16
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461 0000 80B5     		push	{r7, lr}
 1462              	.LCFI45:
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 0002 84B0     		sub	sp, sp, #16
 1467              	.LCFI46:
 1468              		.cfi_def_cfa_offset 24
 1469 0004 00AF     		add	r7, sp, #0
 1470              	.LCFI47:
 1471              		.cfi_def_cfa_register 7
 1472 0006 7860     		str	r0, [r7, #4]
1579:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
1580:../../../FreeRTOS_9_0/Source/tasks.c **** 
1581:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 1473              		.loc 1 1581 0
 1474 0008 FFF7FEFF 		bl	vPortEnterCritical
1582:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1583:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1584:../../../FreeRTOS_9_0/Source/tasks.c **** 			being suspended. */
1585:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1475              		.loc 1 1585 0
 1476 000c 7B68     		ldr	r3, [r7, #4]
 1477 000e 002B     		cmp	r3, #0
 1478 0010 02D1     		bne	.L90
 1479              		.loc 1 1585 0 is_stmt 0 discriminator 1
 1480 0012 364B     		ldr	r3, .L102
 1481 0014 1B68     		ldr	r3, [r3]
 1482 0016 00E0     		b	.L91
 1483              	.L90:
 1484              		.loc 1 1585 0 discriminator 2
ARM GAS  /tmp/ccfW2k76.s 			page 59


 1485 0018 7B68     		ldr	r3, [r7, #4]
 1486              	.L91:
 1487              		.loc 1 1585 0 discriminator 4
 1488 001a FB60     		str	r3, [r7, #12]
1586:../../../FreeRTOS_9_0/Source/tasks.c **** 
1587:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1588:../../../FreeRTOS_9_0/Source/tasks.c **** 
1589:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1590:../../../FreeRTOS_9_0/Source/tasks.c **** 			suspended list. */
1591:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1489              		.loc 1 1591 0 is_stmt 1 discriminator 4
 1490 001c FB68     		ldr	r3, [r7, #12]
 1491 001e 0433     		adds	r3, r3, #4
 1492 0020 1846     		mov	r0, r3
 1493 0022 FFF7FEFF 		bl	uxListRemove
 1494 0026 0346     		mov	r3, r0
 1495 0028 002B     		cmp	r3, #0
 1496 002a 15D1     		bne	.L92
1592:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1593:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1497              		.loc 1 1593 0
 1498 002c FB68     		ldr	r3, [r7, #12]
 1499 002e DA6A     		ldr	r2, [r3, #44]
 1500 0030 2F49     		ldr	r1, .L102+4
 1501 0032 1346     		mov	r3, r2
 1502 0034 9B00     		lsls	r3, r3, #2
 1503 0036 1344     		add	r3, r3, r2
 1504 0038 9B00     		lsls	r3, r3, #2
 1505 003a 0B44     		add	r3, r3, r1
 1506 003c 1B68     		ldr	r3, [r3]
 1507 003e 002B     		cmp	r3, #0
 1508 0040 0AD1     		bne	.L92
 1509              		.loc 1 1593 0 is_stmt 0 discriminator 1
 1510 0042 FB68     		ldr	r3, [r7, #12]
 1511 0044 DB6A     		ldr	r3, [r3, #44]
 1512 0046 1A46     		mov	r2, r3
 1513 0048 0123     		movs	r3, #1
 1514 004a 9340     		lsls	r3, r3, r2
 1515 004c DA43     		mvns	r2, r3
 1516 004e 294B     		ldr	r3, .L102+8
 1517 0050 1B68     		ldr	r3, [r3]
 1518 0052 1340     		ands	r3, r3, r2
 1519 0054 274A     		ldr	r2, .L102+8
 1520 0056 1360     		str	r3, [r2]
 1521              	.L92:
1594:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1595:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1596:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1597:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1598:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1599:../../../FreeRTOS_9_0/Source/tasks.c **** 
1600:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1601:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1522              		.loc 1 1601 0 is_stmt 1
 1523 0058 FB68     		ldr	r3, [r7, #12]
 1524 005a 9B6A     		ldr	r3, [r3, #40]
 1525 005c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccfW2k76.s 			page 60


 1526 005e 04D0     		beq	.L94
1602:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1603:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1527              		.loc 1 1603 0
 1528 0060 FB68     		ldr	r3, [r7, #12]
 1529 0062 1833     		adds	r3, r3, #24
 1530 0064 1846     		mov	r0, r3
 1531 0066 FFF7FEFF 		bl	uxListRemove
 1532              	.L94:
1604:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1605:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1606:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1607:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1608:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1609:../../../FreeRTOS_9_0/Source/tasks.c **** 
1610:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
1611:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1533              		.loc 1 1611 0
 1534 006a FB68     		ldr	r3, [r7, #12]
 1535 006c 0433     		adds	r3, r3, #4
 1536 006e 2248     		ldr	r0, .L102+12
 1537 0070 1946     		mov	r1, r3
 1538 0072 FFF7FEFF 		bl	vListInsertEnd
1612:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1613:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1539              		.loc 1 1613 0
 1540 0076 FFF7FEFF 		bl	vPortExitCritical
1614:../../../FreeRTOS_9_0/Source/tasks.c **** 
1615:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1541              		.loc 1 1615 0
 1542 007a 204B     		ldr	r3, .L102+16
 1543 007c 1B68     		ldr	r3, [r3]
 1544 007e 002B     		cmp	r3, #0
 1545 0080 05D0     		beq	.L95
1616:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1617:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1618:../../../FreeRTOS_9_0/Source/tasks.c **** 			task that is now in the Suspended state. */
1619:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 1546              		.loc 1 1619 0
 1547 0082 FFF7FEFF 		bl	vPortEnterCritical
1620:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1621:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1548              		.loc 1 1621 0
 1549 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1622:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1623:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1550              		.loc 1 1623 0
 1551 008a FFF7FEFF 		bl	vPortExitCritical
 1552              	.L95:
1624:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1625:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1626:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1627:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1629:../../../FreeRTOS_9_0/Source/tasks.c **** 
1630:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1553              		.loc 1 1630 0
ARM GAS  /tmp/ccfW2k76.s 			page 61


 1554 008e 174B     		ldr	r3, .L102
 1555 0090 1B68     		ldr	r3, [r3]
 1556 0092 FA68     		ldr	r2, [r7, #12]
 1557 0094 9A42     		cmp	r2, r3
 1558 0096 26D1     		bne	.L89
1631:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1632:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1559              		.loc 1 1632 0
 1560 0098 184B     		ldr	r3, .L102+16
 1561 009a 1B68     		ldr	r3, [r3]
 1562 009c 002B     		cmp	r3, #0
 1563 009e 16D0     		beq	.L97
1633:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1634:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The current task has just been suspended. */
1635:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1564              		.loc 1 1635 0
 1565 00a0 174B     		ldr	r3, .L102+20
 1566 00a2 1B68     		ldr	r3, [r3]
 1567 00a4 002B     		cmp	r3, #0
 1568 00a6 09D0     		beq	.L98
 1569              	.LBB107:
 1570              	.LBB108:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1571              		.loc 2 237 0 discriminator 1
 1572              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1573 00a8 4FF05003 			mov r3, #80												
 1574 00ac 83F31188 		msr basepri, r3											
 1575 00b0 BFF36F8F 		isb														
 1576 00b4 BFF34F8F 		dsb														
 1577              	
 1578              	@ 0 "" 2
 1579              		.thumb
 1580 00b8 BB60     		str	r3, [r7, #8]
 1581              	.L99:
 1582              	.LBE108:
 1583              	.LBE107:
 1584              		.loc 1 1635 0 discriminator 1
 1585 00ba FEE7     		b	.L99
 1586              	.L98:
1636:../../../FreeRTOS_9_0/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1587              		.loc 1 1636 0
 1588 00bc 114B     		ldr	r3, .L102+24
 1589 00be 4FF08052 		mov	r2, #268435456
 1590 00c2 1A60     		str	r2, [r3]
 1591              	@ 1636 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1592 00c4 BFF34F8F 		dsb
 1593              	@ 0 "" 2
 1594              	@ 1636 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1595 00c8 BFF36F8F 		isb
 1596              	@ 0 "" 2
 1597              		.thumb
 1598 00cc 0BE0     		b	.L89
 1599              	.L97:
1637:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1638:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1639:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1640:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
ARM GAS  /tmp/ccfW2k76.s 			page 62


1641:../../../FreeRTOS_9_0/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1642:../../../FreeRTOS_9_0/Source/tasks.c **** 				must be adjusted to point to a different task. */
1643:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1600              		.loc 1 1643 0
 1601 00ce 0A4B     		ldr	r3, .L102+12
 1602 00d0 1A68     		ldr	r2, [r3]
 1603 00d2 0D4B     		ldr	r3, .L102+28
 1604 00d4 1B68     		ldr	r3, [r3]
 1605 00d6 9A42     		cmp	r2, r3
 1606 00d8 03D1     		bne	.L101
1644:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1645:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1646:../../../FreeRTOS_9_0/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1647:../../../FreeRTOS_9_0/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1648:../../../FreeRTOS_9_0/Source/tasks.c **** 					is. */
1649:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1607              		.loc 1 1649 0
 1608 00da 044B     		ldr	r3, .L102
 1609 00dc 0022     		movs	r2, #0
 1610 00de 1A60     		str	r2, [r3]
 1611 00e0 01E0     		b	.L89
 1612              	.L101:
1650:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1651:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1652:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1653:../../../FreeRTOS_9_0/Source/tasks.c **** 					vTaskSwitchContext();
 1613              		.loc 1 1653 0
 1614 00e2 FFF7FEFF 		bl	vTaskSwitchContext
 1615              	.L89:
1654:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1655:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1656:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1657:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1658:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1659:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1660:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1661:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1616              		.loc 1 1661 0
 1617 00e6 1037     		adds	r7, r7, #16
 1618              	.LCFI48:
 1619              		.cfi_def_cfa_offset 8
 1620 00e8 BD46     		mov	sp, r7
 1621              	.LCFI49:
 1622              		.cfi_def_cfa_register 13
 1623              		@ sp needed
 1624 00ea 80BD     		pop	{r7, pc}
 1625              	.L103:
 1626              		.align	2
 1627              	.L102:
 1628 00ec 00000000 		.word	pxCurrentTCB
 1629 00f0 00000000 		.word	pxReadyTasksLists
 1630 00f4 00000000 		.word	uxTopReadyPriority
 1631 00f8 00000000 		.word	xSuspendedTaskList
 1632 00fc 00000000 		.word	xSchedulerRunning
 1633 0100 00000000 		.word	uxSchedulerSuspended
 1634 0104 04ED00E0 		.word	-536810236
 1635 0108 00000000 		.word	uxCurrentNumberOfTasks
ARM GAS  /tmp/ccfW2k76.s 			page 63


 1636              		.cfi_endproc
 1637              	.LFE14:
 1639              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1640              		.align	2
 1641              		.thumb
 1642              		.thumb_func
 1644              	prvTaskIsTaskSuspended:
 1645              	.LFB15:
1662:../../../FreeRTOS_9_0/Source/tasks.c **** 
1663:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1664:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1665:../../../FreeRTOS_9_0/Source/tasks.c **** 
1666:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1667:../../../FreeRTOS_9_0/Source/tasks.c **** 
1668:../../../FreeRTOS_9_0/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1669:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1646              		.loc 1 1669 0
 1647              		.cfi_startproc
 1648              		@ args = 0, pretend = 0, frame = 24
 1649              		@ frame_needed = 1, uses_anonymous_args = 0
 1650              		@ link register save eliminated.
 1651 0000 80B4     		push	{r7}
 1652              	.LCFI50:
 1653              		.cfi_def_cfa_offset 4
 1654              		.cfi_offset 7, -4
 1655 0002 87B0     		sub	sp, sp, #28
 1656              	.LCFI51:
 1657              		.cfi_def_cfa_offset 32
 1658 0004 00AF     		add	r7, sp, #0
 1659              	.LCFI52:
 1660              		.cfi_def_cfa_register 7
 1661 0006 7860     		str	r0, [r7, #4]
1670:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1662              		.loc 1 1670 0
 1663 0008 0023     		movs	r3, #0
 1664 000a 7B61     		str	r3, [r7, #20]
1671:../../../FreeRTOS_9_0/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1665              		.loc 1 1671 0
 1666 000c 7B68     		ldr	r3, [r7, #4]
 1667 000e 3B61     		str	r3, [r7, #16]
1672:../../../FreeRTOS_9_0/Source/tasks.c **** 
1673:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1674:../../../FreeRTOS_9_0/Source/tasks.c **** 		section. */
1675:../../../FreeRTOS_9_0/Source/tasks.c **** 
1676:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1677:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTask );
 1668              		.loc 1 1677 0
 1669 0010 7B68     		ldr	r3, [r7, #4]
 1670 0012 002B     		cmp	r3, #0
 1671 0014 09D1     		bne	.L105
 1672              	.LBB109:
 1673              	.LBB110:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1674              		.loc 2 237 0 discriminator 1
 1675              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1676 0016 4FF05003 			mov r3, #80												
 1677 001a 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccfW2k76.s 			page 64


 1678 001e BFF36F8F 		isb														
 1679 0022 BFF34F8F 		dsb														
 1680              	
 1681              	@ 0 "" 2
 1682              		.thumb
 1683 0026 FB60     		str	r3, [r7, #12]
 1684              	.L106:
 1685              	.LBE110:
 1686              	.LBE109:
 1687              		.loc 1 1677 0 discriminator 1
 1688 0028 FEE7     		b	.L106
 1689              	.L105:
1678:../../../FreeRTOS_9_0/Source/tasks.c **** 
1679:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1680:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1690              		.loc 1 1680 0
 1691 002a 3B69     		ldr	r3, [r7, #16]
 1692 002c 5B69     		ldr	r3, [r3, #20]
 1693 002e 0F4A     		ldr	r2, .L113
 1694 0030 9342     		cmp	r3, r2
 1695 0032 01D1     		bne	.L107
 1696              		.loc 1 1680 0 is_stmt 0 discriminator 1
 1697 0034 0123     		movs	r3, #1
 1698 0036 00E0     		b	.L108
 1699              	.L107:
 1700              		.loc 1 1680 0 discriminator 2
 1701 0038 0023     		movs	r3, #0
 1702              	.L108:
 1703              		.loc 1 1680 0 discriminator 4
 1704 003a 002B     		cmp	r3, #0
 1705 003c 0FD0     		beq	.L109
1681:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1682:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1683:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1706              		.loc 1 1683 0 is_stmt 1
 1707 003e 3B69     		ldr	r3, [r7, #16]
 1708 0040 9B6A     		ldr	r3, [r3, #40]
 1709 0042 0B4A     		ldr	r2, .L113+4
 1710 0044 9342     		cmp	r3, r2
 1711 0046 0AD0     		beq	.L109
1684:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1685:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1686:../../../FreeRTOS_9_0/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1687:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1712              		.loc 1 1687 0
 1713 0048 3B69     		ldr	r3, [r7, #16]
 1714 004a 9B6A     		ldr	r3, [r3, #40]
 1715 004c 002B     		cmp	r3, #0
 1716 004e 01D1     		bne	.L110
 1717              		.loc 1 1687 0 is_stmt 0 discriminator 1
 1718 0050 0123     		movs	r3, #1
 1719 0052 00E0     		b	.L111
 1720              	.L110:
 1721              		.loc 1 1687 0 discriminator 2
 1722 0054 0023     		movs	r3, #0
 1723              	.L111:
 1724              		.loc 1 1687 0 discriminator 4
ARM GAS  /tmp/ccfW2k76.s 			page 65


 1725 0056 002B     		cmp	r3, #0
 1726 0058 01D0     		beq	.L109
1688:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1689:../../../FreeRTOS_9_0/Source/tasks.c **** 					xReturn = pdTRUE;
 1727              		.loc 1 1689 0 is_stmt 1
 1728 005a 0123     		movs	r3, #1
 1729 005c 7B61     		str	r3, [r7, #20]
 1730              	.L109:
1690:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1691:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1692:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1693:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1694:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1695:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1696:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1697:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1698:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1699:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1700:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1701:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1702:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1703:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1704:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1705:../../../FreeRTOS_9_0/Source/tasks.c **** 
1706:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 1731              		.loc 1 1706 0
 1732 005e 7B69     		ldr	r3, [r7, #20]
1707:../../../FreeRTOS_9_0/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1733              		.loc 1 1707 0
 1734 0060 1846     		mov	r0, r3
 1735 0062 1C37     		adds	r7, r7, #28
 1736              	.LCFI53:
 1737              		.cfi_def_cfa_offset 4
 1738 0064 BD46     		mov	sp, r7
 1739              	.LCFI54:
 1740              		.cfi_def_cfa_register 13
 1741              		@ sp needed
 1742 0066 5DF8047B 		ldr	r7, [sp], #4
 1743              	.LCFI55:
 1744              		.cfi_restore 7
 1745              		.cfi_def_cfa_offset 0
 1746 006a 7047     		bx	lr
 1747              	.L114:
 1748              		.align	2
 1749              	.L113:
 1750 006c 00000000 		.word	xSuspendedTaskList
 1751 0070 00000000 		.word	xPendingReadyList
 1752              		.cfi_endproc
 1753              	.LFE15:
 1755              		.section	.text.vTaskResume,"ax",%progbits
 1756              		.align	2
 1757              		.global	vTaskResume
 1758              		.thumb
 1759              		.thumb_func
 1761              	vTaskResume:
 1762              	.LFB16:
1708:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 66


1709:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1710:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1711:../../../FreeRTOS_9_0/Source/tasks.c **** 
1712:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1713:../../../FreeRTOS_9_0/Source/tasks.c **** 
1714:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1715:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1763              		.loc 1 1715 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 16
 1766              		@ frame_needed = 1, uses_anonymous_args = 0
 1767 0000 80B5     		push	{r7, lr}
 1768              	.LCFI56:
 1769              		.cfi_def_cfa_offset 8
 1770              		.cfi_offset 7, -8
 1771              		.cfi_offset 14, -4
 1772 0002 84B0     		sub	sp, sp, #16
 1773              	.LCFI57:
 1774              		.cfi_def_cfa_offset 24
 1775 0004 00AF     		add	r7, sp, #0
 1776              	.LCFI58:
 1777              		.cfi_def_cfa_register 7
 1778 0006 7860     		str	r0, [r7, #4]
1716:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1779              		.loc 1 1716 0
 1780 0008 7B68     		ldr	r3, [r7, #4]
 1781 000a FB60     		str	r3, [r7, #12]
1717:../../../FreeRTOS_9_0/Source/tasks.c **** 
1718:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1719:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1782              		.loc 1 1719 0
 1783 000c 7B68     		ldr	r3, [r7, #4]
 1784 000e 002B     		cmp	r3, #0
 1785 0010 09D1     		bne	.L116
 1786              	.LBB111:
 1787              	.LBB112:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1788              		.loc 2 237 0 discriminator 1
 1789              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1790 0012 4FF05003 			mov r3, #80												
 1791 0016 83F31188 		msr basepri, r3											
 1792 001a BFF36F8F 		isb														
 1793 001e BFF34F8F 		dsb														
 1794              	
 1795              	@ 0 "" 2
 1796              		.thumb
 1797 0022 BB60     		str	r3, [r7, #8]
 1798              	.L117:
 1799              	.LBE112:
 1800              	.LBE111:
 1801              		.loc 1 1719 0 discriminator 1
 1802 0024 FEE7     		b	.L117
 1803              	.L116:
1720:../../../FreeRTOS_9_0/Source/tasks.c **** 
1721:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1722:../../../FreeRTOS_9_0/Source/tasks.c **** 		currently executing task. */
1723:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
ARM GAS  /tmp/ccfW2k76.s 			page 67


 1804              		.loc 1 1723 0
 1805 0026 FB68     		ldr	r3, [r7, #12]
 1806 0028 002B     		cmp	r3, #0
 1807 002a 3BD0     		beq	.L115
 1808              		.loc 1 1723 0 is_stmt 0 discriminator 1
 1809 002c 1F4B     		ldr	r3, .L120
 1810 002e 1B68     		ldr	r3, [r3]
 1811 0030 FA68     		ldr	r2, [r7, #12]
 1812 0032 9A42     		cmp	r2, r3
 1813 0034 36D0     		beq	.L115
1724:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1725:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskENTER_CRITICAL();
 1814              		.loc 1 1725 0 is_stmt 1
 1815 0036 FFF7FEFF 		bl	vPortEnterCritical
1726:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1727:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1816              		.loc 1 1727 0
 1817 003a F868     		ldr	r0, [r7, #12]
 1818 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1819 0040 0346     		mov	r3, r0
 1820 0042 002B     		cmp	r3, #0
 1821 0044 2CD0     		beq	.L119
1728:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1729:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1730:../../../FreeRTOS_9_0/Source/tasks.c **** 
1731:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1732:../../../FreeRTOS_9_0/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1733:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1822              		.loc 1 1733 0
 1823 0046 FB68     		ldr	r3, [r7, #12]
 1824 0048 0433     		adds	r3, r3, #4
 1825 004a 1846     		mov	r0, r3
 1826 004c FFF7FEFF 		bl	uxListRemove
1734:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1827              		.loc 1 1734 0
 1828 0050 FB68     		ldr	r3, [r7, #12]
 1829 0052 DB6A     		ldr	r3, [r3, #44]
 1830 0054 1A46     		mov	r2, r3
 1831 0056 0123     		movs	r3, #1
 1832 0058 03FA02F2 		lsl	r2, r3, r2
 1833 005c 144B     		ldr	r3, .L120+4
 1834 005e 1B68     		ldr	r3, [r3]
 1835 0060 1343     		orrs	r3, r3, r2
 1836 0062 134A     		ldr	r2, .L120+4
 1837 0064 1360     		str	r3, [r2]
 1838 0066 FB68     		ldr	r3, [r7, #12]
 1839 0068 DA6A     		ldr	r2, [r3, #44]
 1840 006a 1346     		mov	r3, r2
 1841 006c 9B00     		lsls	r3, r3, #2
 1842 006e 1344     		add	r3, r3, r2
 1843 0070 9B00     		lsls	r3, r3, #2
 1844 0072 104A     		ldr	r2, .L120+8
 1845 0074 1A44     		add	r2, r2, r3
 1846 0076 FB68     		ldr	r3, [r7, #12]
 1847 0078 0433     		adds	r3, r3, #4
 1848 007a 1046     		mov	r0, r2
 1849 007c 1946     		mov	r1, r3
ARM GAS  /tmp/ccfW2k76.s 			page 68


 1850 007e FFF7FEFF 		bl	vListInsertEnd
1735:../../../FreeRTOS_9_0/Source/tasks.c **** 
1736:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1737:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1851              		.loc 1 1737 0
 1852 0082 FB68     		ldr	r3, [r7, #12]
 1853 0084 DA6A     		ldr	r2, [r3, #44]
 1854 0086 094B     		ldr	r3, .L120
 1855 0088 1B68     		ldr	r3, [r3]
 1856 008a DB6A     		ldr	r3, [r3, #44]
 1857 008c 9A42     		cmp	r2, r3
 1858 008e 07D3     		bcc	.L119
1738:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1739:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1740:../../../FreeRTOS_9_0/Source/tasks.c **** 						but will leave the lists in the correct state for the
1741:../../../FreeRTOS_9_0/Source/tasks.c **** 						next yield. */
1742:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1859              		.loc 1 1742 0
 1860 0090 094B     		ldr	r3, .L120+12
 1861 0092 4FF08052 		mov	r2, #268435456
 1862 0096 1A60     		str	r2, [r3]
 1863              	@ 1742 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1864 0098 BFF34F8F 		dsb
 1865              	@ 0 "" 2
 1866              	@ 1742 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 1867 009c BFF36F8F 		isb
 1868              	@ 0 "" 2
 1869              		.thumb
 1870              	.L119:
1743:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1744:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1745:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1746:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1747:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1748:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1749:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1750:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1751:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1752:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1753:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1754:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1871              		.loc 1 1754 0
 1872 00a0 FFF7FEFF 		bl	vPortExitCritical
 1873              	.L115:
1755:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1756:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1757:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1758:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1759:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1760:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 1874              		.loc 1 1760 0
 1875 00a4 1037     		adds	r7, r7, #16
 1876              	.LCFI59:
 1877              		.cfi_def_cfa_offset 8
 1878 00a6 BD46     		mov	sp, r7
 1879              	.LCFI60:
 1880              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccfW2k76.s 			page 69


 1881              		@ sp needed
 1882 00a8 80BD     		pop	{r7, pc}
 1883              	.L121:
 1884 00aa 00BF     		.align	2
 1885              	.L120:
 1886 00ac 00000000 		.word	pxCurrentTCB
 1887 00b0 00000000 		.word	uxTopReadyPriority
 1888 00b4 00000000 		.word	pxReadyTasksLists
 1889 00b8 04ED00E0 		.word	-536810236
 1890              		.cfi_endproc
 1891              	.LFE16:
 1893              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1894              		.align	2
 1895              		.global	xTaskResumeFromISR
 1896              		.thumb
 1897              		.thumb_func
 1899              	xTaskResumeFromISR:
 1900              	.LFB17:
1761:../../../FreeRTOS_9_0/Source/tasks.c **** 
1762:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1763:../../../FreeRTOS_9_0/Source/tasks.c **** 
1764:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1765:../../../FreeRTOS_9_0/Source/tasks.c **** 
1766:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1767:../../../FreeRTOS_9_0/Source/tasks.c **** 
1768:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1769:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 1901              		.loc 1 1769 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 40
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905 0000 80B5     		push	{r7, lr}
 1906              	.LCFI61:
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 7, -8
 1909              		.cfi_offset 14, -4
 1910 0002 8AB0     		sub	sp, sp, #40
 1911              	.LCFI62:
 1912              		.cfi_def_cfa_offset 48
 1913 0004 00AF     		add	r7, sp, #0
 1914              	.LCFI63:
 1915              		.cfi_def_cfa_register 7
 1916 0006 7860     		str	r0, [r7, #4]
1770:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1917              		.loc 1 1770 0
 1918 0008 0023     		movs	r3, #0
 1919 000a 7B62     		str	r3, [r7, #36]
1771:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1920              		.loc 1 1771 0
 1921 000c 7B68     		ldr	r3, [r7, #4]
 1922 000e 3B62     		str	r3, [r7, #32]
1772:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1773:../../../FreeRTOS_9_0/Source/tasks.c **** 
1774:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1923              		.loc 1 1774 0
 1924 0010 7B68     		ldr	r3, [r7, #4]
 1925 0012 002B     		cmp	r3, #0
ARM GAS  /tmp/ccfW2k76.s 			page 70


 1926 0014 09D1     		bne	.L123
 1927              	.LBB113:
 1928              	.LBB114:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1929              		.loc 2 237 0 discriminator 1
 1930              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1931 0016 4FF05003 			mov r3, #80												
 1932 001a 83F31188 		msr basepri, r3											
 1933 001e BFF36F8F 		isb														
 1934 0022 BFF34F8F 		dsb														
 1935              	
 1936              	@ 0 "" 2
 1937              		.thumb
 1938 0026 BB61     		str	r3, [r7, #24]
 1939              	.L124:
 1940              	.LBE114:
 1941              	.LBE113:
 1942              		.loc 1 1774 0 discriminator 1
 1943 0028 FEE7     		b	.L124
 1944              	.L123:
1775:../../../FreeRTOS_9_0/Source/tasks.c **** 
1776:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1777:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1778:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1779:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1780:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1781:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1782:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1783:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1784:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1785:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1786:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1787:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1788:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1789:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1790:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
1791:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1792:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1945              		.loc 1 1792 0
 1946 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1947              	.LBB115:
 1948              	.LBB116:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1949              		.loc 2 253 0
 1950              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1951 002e EFF31182 			mrs r2, basepri											
 1952 0032 4FF05003 		mov r3, #80												
 1953 0036 83F31188 		msr basepri, r3											
 1954 003a BFF36F8F 		isb														
 1955 003e BFF34F8F 		dsb														
 1956              	
 1957              	@ 0 "" 2
 1958              		.thumb
 1959 0042 7A61     		str	r2, [r7, #20]
 1960 0044 3B61     		str	r3, [r7, #16]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1961              		.loc 2 265 0
ARM GAS  /tmp/ccfW2k76.s 			page 71


 1962 0046 7B69     		ldr	r3, [r7, #20]
 1963              	.LBE116:
 1964              	.LBE115:
1793:../../../FreeRTOS_9_0/Source/tasks.c **** 
1794:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1965              		.loc 1 1794 0
 1966 0048 FB61     		str	r3, [r7, #28]
1795:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1796:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1967              		.loc 1 1796 0
 1968 004a 386A     		ldr	r0, [r7, #32]
 1969 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1970 0050 0346     		mov	r3, r0
 1971 0052 002B     		cmp	r3, #0
 1972 0054 31D0     		beq	.L126
1797:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1798:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1799:../../../FreeRTOS_9_0/Source/tasks.c **** 
1800:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1801:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1973              		.loc 1 1801 0
 1974 0056 1E4B     		ldr	r3, .L131
 1975 0058 1B68     		ldr	r3, [r3]
 1976 005a 002B     		cmp	r3, #0
 1977 005c 27D1     		bne	.L127
1802:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1803:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1804:../../../FreeRTOS_9_0/Source/tasks.c **** 					suspended list to the ready list directly. */
1805:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1978              		.loc 1 1805 0
 1979 005e 3B6A     		ldr	r3, [r7, #32]
 1980 0060 DA6A     		ldr	r2, [r3, #44]
 1981 0062 1C4B     		ldr	r3, .L131+4
 1982 0064 1B68     		ldr	r3, [r3]
 1983 0066 DB6A     		ldr	r3, [r3, #44]
 1984 0068 9A42     		cmp	r2, r3
 1985 006a 01D3     		bcc	.L128
1806:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1807:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1986              		.loc 1 1807 0
 1987 006c 0123     		movs	r3, #1
 1988 006e 7B62     		str	r3, [r7, #36]
 1989              	.L128:
1808:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1809:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
1810:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
1811:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1812:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
1813:../../../FreeRTOS_9_0/Source/tasks.c **** 
1814:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1990              		.loc 1 1814 0
 1991 0070 3B6A     		ldr	r3, [r7, #32]
 1992 0072 0433     		adds	r3, r3, #4
 1993 0074 1846     		mov	r0, r3
 1994 0076 FFF7FEFF 		bl	uxListRemove
1815:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1995              		.loc 1 1815 0
ARM GAS  /tmp/ccfW2k76.s 			page 72


 1996 007a 3B6A     		ldr	r3, [r7, #32]
 1997 007c DB6A     		ldr	r3, [r3, #44]
 1998 007e 1A46     		mov	r2, r3
 1999 0080 0123     		movs	r3, #1
 2000 0082 03FA02F2 		lsl	r2, r3, r2
 2001 0086 144B     		ldr	r3, .L131+8
 2002 0088 1B68     		ldr	r3, [r3]
 2003 008a 1343     		orrs	r3, r3, r2
 2004 008c 124A     		ldr	r2, .L131+8
 2005 008e 1360     		str	r3, [r2]
 2006 0090 3B6A     		ldr	r3, [r7, #32]
 2007 0092 DA6A     		ldr	r2, [r3, #44]
 2008 0094 1346     		mov	r3, r2
 2009 0096 9B00     		lsls	r3, r3, #2
 2010 0098 1344     		add	r3, r3, r2
 2011 009a 9B00     		lsls	r3, r3, #2
 2012 009c 0F4A     		ldr	r2, .L131+12
 2013 009e 1A44     		add	r2, r2, r3
 2014 00a0 3B6A     		ldr	r3, [r7, #32]
 2015 00a2 0433     		adds	r3, r3, #4
 2016 00a4 1046     		mov	r0, r2
 2017 00a6 1946     		mov	r1, r3
 2018 00a8 FFF7FEFF 		bl	vListInsertEnd
 2019 00ac 05E0     		b	.L126
 2020              	.L127:
1816:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1817:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
1818:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
1819:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1820:../../../FreeRTOS_9_0/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1821:../../../FreeRTOS_9_0/Source/tasks.c **** 					unsuspended. */
1822:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2021              		.loc 1 1822 0
 2022 00ae 3B6A     		ldr	r3, [r7, #32]
 2023 00b0 1833     		adds	r3, r3, #24
 2024 00b2 0B48     		ldr	r0, .L131+16
 2025 00b4 1946     		mov	r1, r3
 2026 00b6 FFF7FEFF 		bl	vListInsertEnd
 2027              	.L126:
 2028 00ba FB69     		ldr	r3, [r7, #28]
 2029 00bc FB60     		str	r3, [r7, #12]
 2030              	.LBB117:
 2031              	.LBB118:
 2032              		.loc 2 271 0
 2033 00be FB68     		ldr	r3, [r7, #12]
 2034              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2035 00c0 83F31188 			msr basepri, r3	
 2036              	@ 0 "" 2
 2037              		.thumb
 2038              	.LBE118:
 2039              	.LBE117:
1823:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
1824:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1825:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
1826:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1827:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/ccfW2k76.s 			page 73


1829:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1830:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1831:../../../FreeRTOS_9_0/Source/tasks.c **** 
1832:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xYieldRequired;
 2040              		.loc 1 1832 0
 2041 00c4 7B6A     		ldr	r3, [r7, #36]
1833:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 2042              		.loc 1 1833 0
 2043 00c6 1846     		mov	r0, r3
 2044 00c8 2837     		adds	r7, r7, #40
 2045              	.LCFI64:
 2046              		.cfi_def_cfa_offset 8
 2047 00ca BD46     		mov	sp, r7
 2048              	.LCFI65:
 2049              		.cfi_def_cfa_register 13
 2050              		@ sp needed
 2051 00cc 80BD     		pop	{r7, pc}
 2052              	.L132:
 2053 00ce 00BF     		.align	2
 2054              	.L131:
 2055 00d0 00000000 		.word	uxSchedulerSuspended
 2056 00d4 00000000 		.word	pxCurrentTCB
 2057 00d8 00000000 		.word	uxTopReadyPriority
 2058 00dc 00000000 		.word	pxReadyTasksLists
 2059 00e0 00000000 		.word	xPendingReadyList
 2060              		.cfi_endproc
 2061              	.LFE17:
 2063              		.section	.rodata
 2064              		.align	2
 2065              	.LC0:
 2066 0000 49444C45 		.ascii	"IDLE\000"
 2066      00
 2067              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2068              		.align	2
 2069              		.global	vTaskStartScheduler
 2070              		.thumb
 2071              		.thumb_func
 2073              	vTaskStartScheduler:
 2074              	.LFB18:
1834:../../../FreeRTOS_9_0/Source/tasks.c **** 
1835:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1836:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1837:../../../FreeRTOS_9_0/Source/tasks.c **** 
1838:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskStartScheduler( void )
1839:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2075              		.loc 1 1839 0
 2076              		.cfi_startproc
 2077              		@ args = 0, pretend = 0, frame = 16
 2078              		@ frame_needed = 1, uses_anonymous_args = 0
 2079 0000 80B5     		push	{r7, lr}
 2080              	.LCFI66:
 2081              		.cfi_def_cfa_offset 8
 2082              		.cfi_offset 7, -8
 2083              		.cfi_offset 14, -4
 2084 0002 86B0     		sub	sp, sp, #24
 2085              	.LCFI67:
 2086              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccfW2k76.s 			page 74


 2087 0004 02AF     		add	r7, sp, #8
 2088              	.LCFI68:
 2089              		.cfi_def_cfa 7, 24
1840:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
1841:../../../FreeRTOS_9_0/Source/tasks.c **** 
1842:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1843:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1844:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1845:../../../FreeRTOS_9_0/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1846:../../../FreeRTOS_9_0/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1847:../../../FreeRTOS_9_0/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1848:../../../FreeRTOS_9_0/Source/tasks.c **** 
1849:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1850:../../../FreeRTOS_9_0/Source/tasks.c **** 		address of the RAM then create the idle task. */
1851:../../../FreeRTOS_9_0/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1852:../../../FreeRTOS_9_0/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1853:../../../FreeRTOS_9_0/Source/tasks.c **** 												"IDLE",
1854:../../../FreeRTOS_9_0/Source/tasks.c **** 												ulIdleTaskStackSize,
1855:../../../FreeRTOS_9_0/Source/tasks.c **** 												( void * ) NULL,
1856:../../../FreeRTOS_9_0/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1857:../../../FreeRTOS_9_0/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1858:../../../FreeRTOS_9_0/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1859:../../../FreeRTOS_9_0/Source/tasks.c **** 
1860:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1861:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1862:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdPASS;
1863:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1864:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1865:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1866:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFAIL;
1867:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1868:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1869:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else
1870:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1871:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1872:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2090              		.loc 1 1872 0
 2091 0006 0023     		movs	r3, #0
 2092 0008 0093     		str	r3, [sp]
 2093 000a 194B     		ldr	r3, .L137
 2094 000c 0193     		str	r3, [sp, #4]
 2095 000e 1948     		ldr	r0, .L137+4
 2096 0010 1949     		ldr	r1, .L137+8
 2097 0012 8022     		movs	r2, #128
 2098 0014 0023     		movs	r3, #0
 2099 0016 FFF7FEFF 		bl	xTaskCreate
 2100 001a F860     		str	r0, [r7, #12]
1873:../../../FreeRTOS_9_0/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1874:../../../FreeRTOS_9_0/Source/tasks.c **** 								( void * ) NULL,
1875:../../../FreeRTOS_9_0/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1876:../../../FreeRTOS_9_0/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1877:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1878:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1879:../../../FreeRTOS_9_0/Source/tasks.c **** 
1880:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1881:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1882:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xReturn == pdPASS )
ARM GAS  /tmp/ccfW2k76.s 			page 75


1883:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1884:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1885:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1886:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1887:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1888:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1889:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1890:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1891:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1892:../../../FreeRTOS_9_0/Source/tasks.c **** 
1893:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( xReturn == pdPASS )
 2101              		.loc 1 1893 0
 2102 001c FB68     		ldr	r3, [r7, #12]
 2103 001e 012B     		cmp	r3, #1
 2104 0020 15D1     		bne	.L134
 2105              	.LBB119:
 2106              	.LBB120:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2107              		.loc 2 237 0
 2108              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2109 0022 4FF05003 			mov r3, #80												
 2110 0026 83F31188 		msr basepri, r3											
 2111 002a BFF36F8F 		isb														
 2112 002e BFF34F8F 		dsb														
 2113              	
 2114              	@ 0 "" 2
 2115              		.thumb
 2116 0032 BB60     		str	r3, [r7, #8]
 2117              	.LBE120:
 2118              	.LBE119:
1894:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1895:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1896:../../../FreeRTOS_9_0/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1897:../../../FreeRTOS_9_0/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1898:../../../FreeRTOS_9_0/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1899:../../../FreeRTOS_9_0/Source/tasks.c **** 		starts to run. */
1900:../../../FreeRTOS_9_0/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1901:../../../FreeRTOS_9_0/Source/tasks.c **** 
1902:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1903:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1904:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1905:../../../FreeRTOS_9_0/Source/tasks.c **** 			structure specific to the task that will run first. */
1906:../../../FreeRTOS_9_0/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1907:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1908:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1909:../../../FreeRTOS_9_0/Source/tasks.c **** 
1910:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2119              		.loc 1 1910 0
 2120 0034 114B     		ldr	r3, .L137+12
 2121 0036 4FF0FF32 		mov	r2, #-1
 2122 003a 1A60     		str	r2, [r3]
1911:../../../FreeRTOS_9_0/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2123              		.loc 1 1911 0
 2124 003c 104B     		ldr	r3, .L137+16
 2125 003e 0122     		movs	r2, #1
 2126 0040 1A60     		str	r2, [r3]
1912:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
ARM GAS  /tmp/ccfW2k76.s 			page 76


 2127              		.loc 1 1912 0
 2128 0042 104B     		ldr	r3, .L137+20
 2129 0044 0022     		movs	r2, #0
 2130 0046 1A60     		str	r2, [r3]
1913:../../../FreeRTOS_9_0/Source/tasks.c **** 
1914:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1915:../../../FreeRTOS_9_0/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1916:../../../FreeRTOS_9_0/Source/tasks.c **** 		the run time counter time base. */
1917:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1918:../../../FreeRTOS_9_0/Source/tasks.c **** 
1919:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1920:../../../FreeRTOS_9_0/Source/tasks.c **** 		portable interface. */
1921:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2131              		.loc 1 1921 0
 2132 0048 FFF7FEFF 		bl	xPortStartScheduler
 2133 004c 0DE0     		b	.L133
 2134              	.L134:
1922:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1923:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1924:../../../FreeRTOS_9_0/Source/tasks.c **** 			function will not return. */
1925:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1926:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
1927:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1928:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1929:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1930:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1931:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
1932:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1933:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1934:../../../FreeRTOS_9_0/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1935:../../../FreeRTOS_9_0/Source/tasks.c **** 		or the timer task. */
1936:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2135              		.loc 1 1936 0
 2136 004e FB68     		ldr	r3, [r7, #12]
 2137 0050 B3F1FF3F 		cmp	r3, #-1
 2138 0054 09D1     		bne	.L133
 2139              	.LBB121:
 2140              	.LBB122:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2141              		.loc 2 237 0 discriminator 1
 2142              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2143 0056 4FF05003 			mov r3, #80												
 2144 005a 83F31188 		msr basepri, r3											
 2145 005e BFF36F8F 		isb														
 2146 0062 BFF34F8F 		dsb														
 2147              	
 2148              	@ 0 "" 2
 2149              		.thumb
 2150 0066 7B60     		str	r3, [r7, #4]
 2151              	.L136:
 2152              	.LBE122:
 2153              	.LBE121:
 2154              		.loc 1 1936 0 discriminator 2
 2155 0068 FEE7     		b	.L136
 2156              	.L133:
1937:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
1938:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 77


1939:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1940:../../../FreeRTOS_9_0/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1941:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1942:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2157              		.loc 1 1942 0
 2158 006a 1037     		adds	r7, r7, #16
 2159              	.LCFI69:
 2160              		.cfi_def_cfa_offset 8
 2161 006c BD46     		mov	sp, r7
 2162              	.LCFI70:
 2163              		.cfi_def_cfa_register 13
 2164              		@ sp needed
 2165 006e 80BD     		pop	{r7, pc}
 2166              	.L138:
 2167              		.align	2
 2168              	.L137:
 2169 0070 00000000 		.word	xIdleTaskHandle
 2170 0074 00000000 		.word	prvIdleTask
 2171 0078 00000000 		.word	.LC0
 2172 007c 00000000 		.word	xNextTaskUnblockTime
 2173 0080 00000000 		.word	xSchedulerRunning
 2174 0084 00000000 		.word	xTickCount
 2175              		.cfi_endproc
 2176              	.LFE18:
 2178              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2179              		.align	2
 2180              		.global	vTaskEndScheduler
 2181              		.thumb
 2182              		.thumb_func
 2184              	vTaskEndScheduler:
 2185              	.LFB19:
1943:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
1944:../../../FreeRTOS_9_0/Source/tasks.c **** 
1945:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskEndScheduler( void )
1946:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2186              		.loc 1 1946 0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 8
 2189              		@ frame_needed = 1, uses_anonymous_args = 0
 2190 0000 80B5     		push	{r7, lr}
 2191              	.LCFI71:
 2192              		.cfi_def_cfa_offset 8
 2193              		.cfi_offset 7, -8
 2194              		.cfi_offset 14, -4
 2195 0002 82B0     		sub	sp, sp, #8
 2196              	.LCFI72:
 2197              		.cfi_def_cfa_offset 16
 2198 0004 00AF     		add	r7, sp, #0
 2199              	.LCFI73:
 2200              		.cfi_def_cfa_register 7
 2201              	.LBB123:
 2202              	.LBB124:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2203              		.loc 2 237 0
 2204              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2205 0006 4FF05003 			mov r3, #80												
 2206 000a 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccfW2k76.s 			page 78


 2207 000e BFF36F8F 		isb														
 2208 0012 BFF34F8F 		dsb														
 2209              	
 2210              	@ 0 "" 2
 2211              		.thumb
 2212 0016 7B60     		str	r3, [r7, #4]
 2213              	.LBE124:
 2214              	.LBE123:
1947:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1948:../../../FreeRTOS_9_0/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1949:../../../FreeRTOS_9_0/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1950:../../../FreeRTOS_9_0/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1951:../../../FreeRTOS_9_0/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2215              		.loc 1 1951 0
 2216 0018 034B     		ldr	r3, .L140
 2217 001a 0022     		movs	r2, #0
 2218 001c 1A60     		str	r2, [r3]
1952:../../../FreeRTOS_9_0/Source/tasks.c **** 	vPortEndScheduler();
 2219              		.loc 1 1952 0
 2220 001e FFF7FEFF 		bl	vPortEndScheduler
1953:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2221              		.loc 1 1953 0
 2222 0022 0837     		adds	r7, r7, #8
 2223              	.LCFI74:
 2224              		.cfi_def_cfa_offset 8
 2225 0024 BD46     		mov	sp, r7
 2226              	.LCFI75:
 2227              		.cfi_def_cfa_register 13
 2228              		@ sp needed
 2229 0026 80BD     		pop	{r7, pc}
 2230              	.L141:
 2231              		.align	2
 2232              	.L140:
 2233 0028 00000000 		.word	xSchedulerRunning
 2234              		.cfi_endproc
 2235              	.LFE19:
 2237              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2238              		.align	2
 2239              		.global	vTaskSuspendAll
 2240              		.thumb
 2241              		.thumb_func
 2243              	vTaskSuspendAll:
 2244              	.LFB20:
1954:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
1955:../../../FreeRTOS_9_0/Source/tasks.c **** 
1956:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSuspendAll( void )
1957:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2245              		.loc 1 1957 0
 2246              		.cfi_startproc
 2247              		@ args = 0, pretend = 0, frame = 0
 2248              		@ frame_needed = 1, uses_anonymous_args = 0
 2249              		@ link register save eliminated.
 2250 0000 80B4     		push	{r7}
 2251              	.LCFI76:
 2252              		.cfi_def_cfa_offset 4
 2253              		.cfi_offset 7, -4
 2254 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccfW2k76.s 			page 79


 2255              	.LCFI77:
 2256              		.cfi_def_cfa_register 7
1958:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1959:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1960:../../../FreeRTOS_9_0/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1961:../../../FreeRTOS_9_0/Source/tasks.c **** 	http://goo.gl/wu4acr */
1962:../../../FreeRTOS_9_0/Source/tasks.c **** 	++uxSchedulerSuspended;
 2257              		.loc 1 1962 0
 2258 0004 044B     		ldr	r3, .L143
 2259 0006 1B68     		ldr	r3, [r3]
 2260 0008 0133     		adds	r3, r3, #1
 2261 000a 034A     		ldr	r2, .L143
 2262 000c 1360     		str	r3, [r2]
1963:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2263              		.loc 1 1963 0
 2264 000e BD46     		mov	sp, r7
 2265              	.LCFI78:
 2266              		.cfi_def_cfa_register 13
 2267              		@ sp needed
 2268 0010 5DF8047B 		ldr	r7, [sp], #4
 2269              	.LCFI79:
 2270              		.cfi_restore 7
 2271              		.cfi_def_cfa_offset 0
 2272 0014 7047     		bx	lr
 2273              	.L144:
 2274 0016 00BF     		.align	2
 2275              	.L143:
 2276 0018 00000000 		.word	uxSchedulerSuspended
 2277              		.cfi_endproc
 2278              	.LFE20:
 2280              		.section	.text.xTaskResumeAll,"ax",%progbits
 2281              		.align	2
 2282              		.global	xTaskResumeAll
 2283              		.thumb
 2284              		.thumb_func
 2286              	xTaskResumeAll:
 2287              	.LFB21:
1964:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
1965:../../../FreeRTOS_9_0/Source/tasks.c **** 
1966:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1967:../../../FreeRTOS_9_0/Source/tasks.c **** 
1968:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1969:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
1970:../../../FreeRTOS_9_0/Source/tasks.c **** 	TickType_t xReturn;
1971:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1972:../../../FreeRTOS_9_0/Source/tasks.c **** 
1973:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1974:../../../FreeRTOS_9_0/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1975:../../../FreeRTOS_9_0/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1976:../../../FreeRTOS_9_0/Source/tasks.c **** 		running. */
1977:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1978:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1979:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1980:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1981:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1982:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1983:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
ARM GAS  /tmp/ccfW2k76.s 			page 80


1984:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
1985:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
1986:../../../FreeRTOS_9_0/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1987:../../../FreeRTOS_9_0/Source/tasks.c **** 
1988:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1989:../../../FreeRTOS_9_0/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1990:../../../FreeRTOS_9_0/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1991:../../../FreeRTOS_9_0/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1992:../../../FreeRTOS_9_0/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1993:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1994:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
1995:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1996:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
1997:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
1998:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
1999:../../../FreeRTOS_9_0/Source/tasks.c **** 
2000:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2001:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2002:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2003:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2004:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2005:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2006:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2007:../../../FreeRTOS_9_0/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2008:../../../FreeRTOS_9_0/Source/tasks.c **** 			processed. */
2009:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2010:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2011:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2012:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2013:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2014:../../../FreeRTOS_9_0/Source/tasks.c **** 			idle priority.  This path can only be reached if
2015:../../../FreeRTOS_9_0/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2016:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = 0;
2017:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2018:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2019:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2020:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2021:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2022:../../../FreeRTOS_9_0/Source/tasks.c **** 
2023:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2024:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2025:../../../FreeRTOS_9_0/Source/tasks.c **** 
2026:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2027:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2028:../../../FreeRTOS_9_0/Source/tasks.c **** 
2029:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2030:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2288              		.loc 1 2030 0
 2289              		.cfi_startproc
 2290              		@ args = 0, pretend = 0, frame = 16
 2291              		@ frame_needed = 1, uses_anonymous_args = 0
 2292 0000 80B5     		push	{r7, lr}
 2293              	.LCFI80:
 2294              		.cfi_def_cfa_offset 8
 2295              		.cfi_offset 7, -8
 2296              		.cfi_offset 14, -4
 2297 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccfW2k76.s 			page 81


 2298              	.LCFI81:
 2299              		.cfi_def_cfa_offset 24
 2300 0004 00AF     		add	r7, sp, #0
 2301              	.LCFI82:
 2302              		.cfi_def_cfa_register 7
2031:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2303              		.loc 1 2031 0
 2304 0006 0023     		movs	r3, #0
 2305 0008 FB60     		str	r3, [r7, #12]
2032:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2306              		.loc 1 2032 0
 2307 000a 0023     		movs	r3, #0
 2308 000c BB60     		str	r3, [r7, #8]
2033:../../../FreeRTOS_9_0/Source/tasks.c **** 
2034:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2035:../../../FreeRTOS_9_0/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2036:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2309              		.loc 1 2036 0
 2310 000e 424B     		ldr	r3, .L156
 2311 0010 1B68     		ldr	r3, [r3]
 2312 0012 002B     		cmp	r3, #0
 2313 0014 09D1     		bne	.L146
 2314              	.LBB125:
 2315              	.LBB126:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2316              		.loc 2 237 0 discriminator 1
 2317              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2318 0016 4FF05003 			mov r3, #80												
 2319 001a 83F31188 		msr basepri, r3											
 2320 001e BFF36F8F 		isb														
 2321 0022 BFF34F8F 		dsb														
 2322              	
 2323              	@ 0 "" 2
 2324              		.thumb
 2325 0026 3B60     		str	r3, [r7]
 2326              	.L147:
 2327              	.LBE126:
 2328              	.LBE125:
 2329              		.loc 1 2036 0 discriminator 1
 2330 0028 FEE7     		b	.L147
 2331              	.L146:
2037:../../../FreeRTOS_9_0/Source/tasks.c **** 
2038:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2039:../../../FreeRTOS_9_0/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2040:../../../FreeRTOS_9_0/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2041:../../../FreeRTOS_9_0/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2042:../../../FreeRTOS_9_0/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2043:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 2332              		.loc 1 2043 0
 2333 002a FFF7FEFF 		bl	vPortEnterCritical
2044:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2045:../../../FreeRTOS_9_0/Source/tasks.c **** 		--uxSchedulerSuspended;
 2334              		.loc 1 2045 0
 2335 002e 3A4B     		ldr	r3, .L156
 2336 0030 1B68     		ldr	r3, [r3]
 2337 0032 013B     		subs	r3, r3, #1
 2338 0034 384A     		ldr	r2, .L156
ARM GAS  /tmp/ccfW2k76.s 			page 82


 2339 0036 1360     		str	r3, [r2]
2046:../../../FreeRTOS_9_0/Source/tasks.c **** 
2047:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2340              		.loc 1 2047 0
 2341 0038 374B     		ldr	r3, .L156
 2342 003a 1B68     		ldr	r3, [r3]
 2343 003c 002B     		cmp	r3, #0
 2344 003e 63D1     		bne	.L148
2048:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2049:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2345              		.loc 1 2049 0
 2346 0040 364B     		ldr	r3, .L156+4
 2347 0042 1B68     		ldr	r3, [r3]
 2348 0044 002B     		cmp	r3, #0
 2349 0046 5FD0     		beq	.L148
2050:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2051:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2052:../../../FreeRTOS_9_0/Source/tasks.c **** 				appropriate ready list. */
2053:../../../FreeRTOS_9_0/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2350              		.loc 1 2053 0
 2351 0048 30E0     		b	.L149
 2352              	.L150:
2054:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2055:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2353              		.loc 1 2055 0
 2354 004a 354B     		ldr	r3, .L156+8
 2355 004c DB68     		ldr	r3, [r3, #12]
 2356 004e DB68     		ldr	r3, [r3, #12]
 2357 0050 FB60     		str	r3, [r7, #12]
2056:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2358              		.loc 1 2056 0
 2359 0052 FB68     		ldr	r3, [r7, #12]
 2360 0054 1833     		adds	r3, r3, #24
 2361 0056 1846     		mov	r0, r3
 2362 0058 FFF7FEFF 		bl	uxListRemove
2057:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2363              		.loc 1 2057 0
 2364 005c FB68     		ldr	r3, [r7, #12]
 2365 005e 0433     		adds	r3, r3, #4
 2366 0060 1846     		mov	r0, r3
 2367 0062 FFF7FEFF 		bl	uxListRemove
2058:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2368              		.loc 1 2058 0
 2369 0066 FB68     		ldr	r3, [r7, #12]
 2370 0068 DB6A     		ldr	r3, [r3, #44]
 2371 006a 1A46     		mov	r2, r3
 2372 006c 0123     		movs	r3, #1
 2373 006e 03FA02F2 		lsl	r2, r3, r2
 2374 0072 2C4B     		ldr	r3, .L156+12
 2375 0074 1B68     		ldr	r3, [r3]
 2376 0076 1343     		orrs	r3, r3, r2
 2377 0078 2A4A     		ldr	r2, .L156+12
 2378 007a 1360     		str	r3, [r2]
 2379 007c FB68     		ldr	r3, [r7, #12]
 2380 007e DA6A     		ldr	r2, [r3, #44]
 2381 0080 1346     		mov	r3, r2
 2382 0082 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccfW2k76.s 			page 83


 2383 0084 1344     		add	r3, r3, r2
 2384 0086 9B00     		lsls	r3, r3, #2
 2385 0088 274A     		ldr	r2, .L156+16
 2386 008a 1A44     		add	r2, r2, r3
 2387 008c FB68     		ldr	r3, [r7, #12]
 2388 008e 0433     		adds	r3, r3, #4
 2389 0090 1046     		mov	r0, r2
 2390 0092 1946     		mov	r1, r3
 2391 0094 FFF7FEFF 		bl	vListInsertEnd
2059:../../../FreeRTOS_9_0/Source/tasks.c **** 
2060:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2061:../../../FreeRTOS_9_0/Source/tasks.c **** 					task then a yield must be performed. */
2062:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2392              		.loc 1 2062 0
 2393 0098 FB68     		ldr	r3, [r7, #12]
 2394 009a DA6A     		ldr	r2, [r3, #44]
 2395 009c 234B     		ldr	r3, .L156+20
 2396 009e 1B68     		ldr	r3, [r3]
 2397 00a0 DB6A     		ldr	r3, [r3, #44]
 2398 00a2 9A42     		cmp	r2, r3
 2399 00a4 02D3     		bcc	.L149
2063:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2064:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2400              		.loc 1 2064 0
 2401 00a6 224B     		ldr	r3, .L156+24
 2402 00a8 0122     		movs	r2, #1
 2403 00aa 1A60     		str	r2, [r3]
 2404              	.L149:
2053:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
 2405              		.loc 1 2053 0
 2406 00ac 1C4B     		ldr	r3, .L156+8
 2407 00ae 1B68     		ldr	r3, [r3]
 2408 00b0 002B     		cmp	r3, #0
 2409 00b2 CAD1     		bne	.L150
2065:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2066:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2067:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2068:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2069:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2070:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2071:../../../FreeRTOS_9_0/Source/tasks.c **** 
2072:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB != NULL )
 2410              		.loc 1 2072 0
 2411 00b4 FB68     		ldr	r3, [r7, #12]
 2412 00b6 002B     		cmp	r3, #0
 2413 00b8 01D0     		beq	.L151
2073:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2074:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2075:../../../FreeRTOS_9_0/Source/tasks.c **** 					which may have prevented the next unblock time from being
2076:../../../FreeRTOS_9_0/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2077:../../../FreeRTOS_9_0/Source/tasks.c **** 					important for low power tickless implementations, where
2078:../../../FreeRTOS_9_0/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2079:../../../FreeRTOS_9_0/Source/tasks.c **** 					state. */
2080:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2414              		.loc 1 2080 0
 2415 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2416              	.L151:
ARM GAS  /tmp/ccfW2k76.s 			page 84


 2417              	.LBB127:
2081:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2082:../../../FreeRTOS_9_0/Source/tasks.c **** 
2083:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2084:../../../FreeRTOS_9_0/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2085:../../../FreeRTOS_9_0/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2086:../../../FreeRTOS_9_0/Source/tasks.c **** 				time. */
2087:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2088:../../../FreeRTOS_9_0/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2418              		.loc 1 2088 0
 2419 00be 1D4B     		ldr	r3, .L156+28
 2420 00c0 1B68     		ldr	r3, [r3]
 2421 00c2 7B60     		str	r3, [r7, #4]
2089:../../../FreeRTOS_9_0/Source/tasks.c **** 
2090:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2422              		.loc 1 2090 0
 2423 00c4 7B68     		ldr	r3, [r7, #4]
 2424 00c6 002B     		cmp	r3, #0
 2425 00c8 10D0     		beq	.L152
 2426              	.L154:
2091:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2092:../../../FreeRTOS_9_0/Source/tasks.c **** 						do
2093:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
2094:../../../FreeRTOS_9_0/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2427              		.loc 1 2094 0
 2428 00ca FFF7FEFF 		bl	xTaskIncrementTick
 2429 00ce 0346     		mov	r3, r0
 2430 00d0 002B     		cmp	r3, #0
 2431 00d2 02D0     		beq	.L153
2095:../../../FreeRTOS_9_0/Source/tasks.c **** 							{
2096:../../../FreeRTOS_9_0/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2432              		.loc 1 2096 0
 2433 00d4 164B     		ldr	r3, .L156+24
 2434 00d6 0122     		movs	r2, #1
 2435 00d8 1A60     		str	r2, [r3]
 2436              	.L153:
2097:../../../FreeRTOS_9_0/Source/tasks.c **** 							}
2098:../../../FreeRTOS_9_0/Source/tasks.c **** 							else
2099:../../../FreeRTOS_9_0/Source/tasks.c **** 							{
2100:../../../FreeRTOS_9_0/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2101:../../../FreeRTOS_9_0/Source/tasks.c **** 							}
2102:../../../FreeRTOS_9_0/Source/tasks.c **** 							--uxPendedCounts;
 2437              		.loc 1 2102 0
 2438 00da 7B68     		ldr	r3, [r7, #4]
 2439 00dc 013B     		subs	r3, r3, #1
 2440 00de 7B60     		str	r3, [r7, #4]
2103:../../../FreeRTOS_9_0/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2441              		.loc 1 2103 0
 2442 00e0 7B68     		ldr	r3, [r7, #4]
 2443 00e2 002B     		cmp	r3, #0
 2444 00e4 F1D1     		bne	.L154
2104:../../../FreeRTOS_9_0/Source/tasks.c **** 
2105:../../../FreeRTOS_9_0/Source/tasks.c **** 						uxPendedTicks = 0;
 2445              		.loc 1 2105 0
 2446 00e6 134B     		ldr	r3, .L156+28
 2447 00e8 0022     		movs	r2, #0
 2448 00ea 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccfW2k76.s 			page 85


 2449              	.L152:
 2450              	.LBE127:
2106:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2107:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2108:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2109:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2110:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2111:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2112:../../../FreeRTOS_9_0/Source/tasks.c **** 
2113:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2451              		.loc 1 2113 0
 2452 00ec 104B     		ldr	r3, .L156+24
 2453 00ee 1B68     		ldr	r3, [r3]
 2454 00f0 002B     		cmp	r3, #0
 2455 00f2 09D0     		beq	.L148
2114:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2115:../../../FreeRTOS_9_0/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2116:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2117:../../../FreeRTOS_9_0/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2456              		.loc 1 2117 0
 2457 00f4 0123     		movs	r3, #1
 2458 00f6 BB60     		str	r3, [r7, #8]
2118:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2119:../../../FreeRTOS_9_0/Source/tasks.c **** 					#endif
2120:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2459              		.loc 1 2120 0
 2460 00f8 0F4B     		ldr	r3, .L156+32
 2461 00fa 4FF08052 		mov	r2, #268435456
 2462 00fe 1A60     		str	r2, [r3]
 2463              	@ 2120 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 2464 0100 BFF34F8F 		dsb
 2465              	@ 0 "" 2
 2466              	@ 2120 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 2467 0104 BFF36F8F 		isb
 2468              	@ 0 "" 2
 2469              		.thumb
 2470              	.L148:
2121:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2122:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2123:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2124:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2125:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2126:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2128:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2129:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2130:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2131:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2132:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2133:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2471              		.loc 1 2133 0
 2472 0108 FFF7FEFF 		bl	vPortExitCritical
2134:../../../FreeRTOS_9_0/Source/tasks.c **** 
2135:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xAlreadyYielded;
 2473              		.loc 1 2135 0
 2474 010c BB68     		ldr	r3, [r7, #8]
2136:../../../FreeRTOS_9_0/Source/tasks.c **** }
ARM GAS  /tmp/ccfW2k76.s 			page 86


 2475              		.loc 1 2136 0
 2476 010e 1846     		mov	r0, r3
 2477 0110 1037     		adds	r7, r7, #16
 2478              	.LCFI83:
 2479              		.cfi_def_cfa_offset 8
 2480 0112 BD46     		mov	sp, r7
 2481              	.LCFI84:
 2482              		.cfi_def_cfa_register 13
 2483              		@ sp needed
 2484 0114 80BD     		pop	{r7, pc}
 2485              	.L157:
 2486 0116 00BF     		.align	2
 2487              	.L156:
 2488 0118 00000000 		.word	uxSchedulerSuspended
 2489 011c 00000000 		.word	uxCurrentNumberOfTasks
 2490 0120 00000000 		.word	xPendingReadyList
 2491 0124 00000000 		.word	uxTopReadyPriority
 2492 0128 00000000 		.word	pxReadyTasksLists
 2493 012c 00000000 		.word	pxCurrentTCB
 2494 0130 00000000 		.word	xYieldPending
 2495 0134 00000000 		.word	uxPendedTicks
 2496 0138 04ED00E0 		.word	-536810236
 2497              		.cfi_endproc
 2498              	.LFE21:
 2500              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2501              		.align	2
 2502              		.global	xTaskGetTickCount
 2503              		.thumb
 2504              		.thumb_func
 2506              	xTaskGetTickCount:
 2507              	.LFB22:
2137:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2138:../../../FreeRTOS_9_0/Source/tasks.c **** 
2139:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2140:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2508              		.loc 1 2140 0
 2509              		.cfi_startproc
 2510              		@ args = 0, pretend = 0, frame = 8
 2511              		@ frame_needed = 1, uses_anonymous_args = 0
 2512              		@ link register save eliminated.
 2513 0000 80B4     		push	{r7}
 2514              	.LCFI85:
 2515              		.cfi_def_cfa_offset 4
 2516              		.cfi_offset 7, -4
 2517 0002 83B0     		sub	sp, sp, #12
 2518              	.LCFI86:
 2519              		.cfi_def_cfa_offset 16
 2520 0004 00AF     		add	r7, sp, #0
 2521              	.LCFI87:
 2522              		.cfi_def_cfa_register 7
2141:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTicks;
2142:../../../FreeRTOS_9_0/Source/tasks.c **** 
2143:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2144:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2145:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2146:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTicks = xTickCount;
 2523              		.loc 1 2146 0
ARM GAS  /tmp/ccfW2k76.s 			page 87


 2524 0006 054B     		ldr	r3, .L160
 2525 0008 1B68     		ldr	r3, [r3]
 2526 000a 7B60     		str	r3, [r7, #4]
2147:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2148:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2149:../../../FreeRTOS_9_0/Source/tasks.c **** 
2150:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xTicks;
 2527              		.loc 1 2150 0
 2528 000c 7B68     		ldr	r3, [r7, #4]
2151:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2529              		.loc 1 2151 0
 2530 000e 1846     		mov	r0, r3
 2531 0010 0C37     		adds	r7, r7, #12
 2532              	.LCFI88:
 2533              		.cfi_def_cfa_offset 4
 2534 0012 BD46     		mov	sp, r7
 2535              	.LCFI89:
 2536              		.cfi_def_cfa_register 13
 2537              		@ sp needed
 2538 0014 5DF8047B 		ldr	r7, [sp], #4
 2539              	.LCFI90:
 2540              		.cfi_restore 7
 2541              		.cfi_def_cfa_offset 0
 2542 0018 7047     		bx	lr
 2543              	.L161:
 2544 001a 00BF     		.align	2
 2545              	.L160:
 2546 001c 00000000 		.word	xTickCount
 2547              		.cfi_endproc
 2548              	.LFE22:
 2550              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2551              		.align	2
 2552              		.global	xTaskGetTickCountFromISR
 2553              		.thumb
 2554              		.thumb_func
 2556              	xTaskGetTickCountFromISR:
 2557              	.LFB23:
2152:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2153:../../../FreeRTOS_9_0/Source/tasks.c **** 
2154:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2155:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2558              		.loc 1 2155 0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 8
 2561              		@ frame_needed = 1, uses_anonymous_args = 0
 2562 0000 80B5     		push	{r7, lr}
 2563              	.LCFI91:
 2564              		.cfi_def_cfa_offset 8
 2565              		.cfi_offset 7, -8
 2566              		.cfi_offset 14, -4
 2567 0002 82B0     		sub	sp, sp, #8
 2568              	.LCFI92:
 2569              		.cfi_def_cfa_offset 16
 2570 0004 00AF     		add	r7, sp, #0
 2571              	.LCFI93:
 2572              		.cfi_def_cfa_register 7
2156:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xReturn;
ARM GAS  /tmp/ccfW2k76.s 			page 88


2157:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2158:../../../FreeRTOS_9_0/Source/tasks.c **** 
2159:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2160:../../../FreeRTOS_9_0/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2161:../../../FreeRTOS_9_0/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2162:../../../FreeRTOS_9_0/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2163:../../../FreeRTOS_9_0/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2164:../../../FreeRTOS_9_0/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2165:../../../FreeRTOS_9_0/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2166:../../../FreeRTOS_9_0/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2167:../../../FreeRTOS_9_0/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2168:../../../FreeRTOS_9_0/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2169:../../../FreeRTOS_9_0/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2170:../../../FreeRTOS_9_0/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2171:../../../FreeRTOS_9_0/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2172:../../../FreeRTOS_9_0/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2173:../../../FreeRTOS_9_0/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2573              		.loc 1 2173 0
 2574 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2174:../../../FreeRTOS_9_0/Source/tasks.c **** 
2175:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2575              		.loc 1 2175 0
 2576 000a 0023     		movs	r3, #0
 2577 000c 7B60     		str	r3, [r7, #4]
2176:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2177:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = xTickCount;
 2578              		.loc 1 2177 0
 2579 000e 044B     		ldr	r3, .L164
 2580 0010 1B68     		ldr	r3, [r3]
 2581 0012 3B60     		str	r3, [r7]
2178:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2179:../../../FreeRTOS_9_0/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2180:../../../FreeRTOS_9_0/Source/tasks.c **** 
2181:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 2582              		.loc 1 2181 0
 2583 0014 3B68     		ldr	r3, [r7]
2182:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2584              		.loc 1 2182 0
 2585 0016 1846     		mov	r0, r3
 2586 0018 0837     		adds	r7, r7, #8
 2587              	.LCFI94:
 2588              		.cfi_def_cfa_offset 8
 2589 001a BD46     		mov	sp, r7
 2590              	.LCFI95:
 2591              		.cfi_def_cfa_register 13
 2592              		@ sp needed
 2593 001c 80BD     		pop	{r7, pc}
 2594              	.L165:
 2595 001e 00BF     		.align	2
 2596              	.L164:
 2597 0020 00000000 		.word	xTickCount
 2598              		.cfi_endproc
 2599              	.LFE23:
 2601              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2602              		.align	2
 2603              		.global	uxTaskGetNumberOfTasks
 2604              		.thumb
ARM GAS  /tmp/ccfW2k76.s 			page 89


 2605              		.thumb_func
 2607              	uxTaskGetNumberOfTasks:
 2608              	.LFB24:
2183:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2184:../../../FreeRTOS_9_0/Source/tasks.c **** 
2185:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2186:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2609              		.loc 1 2186 0
 2610              		.cfi_startproc
 2611              		@ args = 0, pretend = 0, frame = 0
 2612              		@ frame_needed = 1, uses_anonymous_args = 0
 2613              		@ link register save eliminated.
 2614 0000 80B4     		push	{r7}
 2615              	.LCFI96:
 2616              		.cfi_def_cfa_offset 4
 2617              		.cfi_offset 7, -4
 2618 0002 00AF     		add	r7, sp, #0
 2619              	.LCFI97:
 2620              		.cfi_def_cfa_register 7
2187:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2188:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t. */
2189:../../../FreeRTOS_9_0/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2621              		.loc 1 2189 0
 2622 0004 034B     		ldr	r3, .L168
 2623 0006 1B68     		ldr	r3, [r3]
2190:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2624              		.loc 1 2190 0
 2625 0008 1846     		mov	r0, r3
 2626 000a BD46     		mov	sp, r7
 2627              	.LCFI98:
 2628              		.cfi_def_cfa_register 13
 2629              		@ sp needed
 2630 000c 5DF8047B 		ldr	r7, [sp], #4
 2631              	.LCFI99:
 2632              		.cfi_restore 7
 2633              		.cfi_def_cfa_offset 0
 2634 0010 7047     		bx	lr
 2635              	.L169:
 2636 0012 00BF     		.align	2
 2637              	.L168:
 2638 0014 00000000 		.word	uxCurrentNumberOfTasks
 2639              		.cfi_endproc
 2640              	.LFE24:
 2642              		.section	.text.pcTaskGetName,"ax",%progbits
 2643              		.align	2
 2644              		.global	pcTaskGetName
 2645              		.thumb
 2646              		.thumb_func
 2648              	pcTaskGetName:
 2649              	.LFB25:
2191:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:../../../FreeRTOS_9_0/Source/tasks.c **** 
2193:../../../FreeRTOS_9_0/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2194:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2650              		.loc 1 2194 0
 2651              		.cfi_startproc
 2652              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccfW2k76.s 			page 90


 2653              		@ frame_needed = 1, uses_anonymous_args = 0
 2654              		@ link register save eliminated.
 2655 0000 80B4     		push	{r7}
 2656              	.LCFI100:
 2657              		.cfi_def_cfa_offset 4
 2658              		.cfi_offset 7, -4
 2659 0002 85B0     		sub	sp, sp, #20
 2660              	.LCFI101:
 2661              		.cfi_def_cfa_offset 24
 2662 0004 00AF     		add	r7, sp, #0
 2663              	.LCFI102:
 2664              		.cfi_def_cfa_register 7
 2665 0006 7860     		str	r0, [r7, #4]
2195:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB;
2196:../../../FreeRTOS_9_0/Source/tasks.c **** 
2197:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2198:../../../FreeRTOS_9_0/Source/tasks.c **** 	queried. */
2199:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2666              		.loc 1 2199 0
 2667 0008 7B68     		ldr	r3, [r7, #4]
 2668 000a 002B     		cmp	r3, #0
 2669 000c 02D1     		bne	.L171
 2670              		.loc 1 2199 0 is_stmt 0 discriminator 1
 2671 000e 0D4B     		ldr	r3, .L176
 2672 0010 1B68     		ldr	r3, [r3]
 2673 0012 00E0     		b	.L172
 2674              	.L171:
 2675              		.loc 1 2199 0 discriminator 2
 2676 0014 7B68     		ldr	r3, [r7, #4]
 2677              	.L172:
 2678              		.loc 1 2199 0 discriminator 4
 2679 0016 FB60     		str	r3, [r7, #12]
2200:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTCB );
 2680              		.loc 1 2200 0 is_stmt 1 discriminator 4
 2681 0018 FB68     		ldr	r3, [r7, #12]
 2682 001a 002B     		cmp	r3, #0
 2683 001c 09D1     		bne	.L173
 2684              	.LBB128:
 2685              	.LBB129:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2686              		.loc 2 237 0 discriminator 1
 2687              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2688 001e 4FF05003 			mov r3, #80												
 2689 0022 83F31188 		msr basepri, r3											
 2690 0026 BFF36F8F 		isb														
 2691 002a BFF34F8F 		dsb														
 2692              	
 2693              	@ 0 "" 2
 2694              		.thumb
 2695 002e BB60     		str	r3, [r7, #8]
 2696              	.L174:
 2697              	.LBE129:
 2698              	.LBE128:
 2699              		.loc 1 2200 0 discriminator 1
 2700 0030 FEE7     		b	.L174
 2701              	.L173:
2201:../../../FreeRTOS_9_0/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
ARM GAS  /tmp/ccfW2k76.s 			page 91


 2702              		.loc 1 2201 0
 2703 0032 FB68     		ldr	r3, [r7, #12]
 2704 0034 3433     		adds	r3, r3, #52
2202:../../../FreeRTOS_9_0/Source/tasks.c **** }
 2705              		.loc 1 2202 0
 2706 0036 1846     		mov	r0, r3
 2707 0038 1437     		adds	r7, r7, #20
 2708              	.LCFI103:
 2709              		.cfi_def_cfa_offset 4
 2710 003a BD46     		mov	sp, r7
 2711              	.LCFI104:
 2712              		.cfi_def_cfa_register 13
 2713              		@ sp needed
 2714 003c 5DF8047B 		ldr	r7, [sp], #4
 2715              	.LCFI105:
 2716              		.cfi_restore 7
 2717              		.cfi_def_cfa_offset 0
 2718 0040 7047     		bx	lr
 2719              	.L177:
 2720 0042 00BF     		.align	2
 2721              	.L176:
 2722 0044 00000000 		.word	pxCurrentTCB
 2723              		.cfi_endproc
 2724              	.LFE25:
 2726              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2727              		.align	2
 2728              		.global	uxTaskGetSystemState
 2729              		.thumb
 2730              		.thumb_func
 2732              	uxTaskGetSystemState:
 2733              	.LFB26:
2203:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2204:../../../FreeRTOS_9_0/Source/tasks.c **** 
2205:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2206:../../../FreeRTOS_9_0/Source/tasks.c **** 
2207:../../../FreeRTOS_9_0/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2208:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2209:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2210:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t x;
2211:../../../FreeRTOS_9_0/Source/tasks.c **** 	char cNextChar;
2212:../../../FreeRTOS_9_0/Source/tasks.c **** 
2213:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2214:../../../FreeRTOS_9_0/Source/tasks.c **** 
2215:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2216:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2217:../../../FreeRTOS_9_0/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2218:../../../FreeRTOS_9_0/Source/tasks.c **** 
2219:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
2220:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2221:../../../FreeRTOS_9_0/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2222:../../../FreeRTOS_9_0/Source/tasks.c **** 
2223:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2224:../../../FreeRTOS_9_0/Source/tasks.c **** 				mismatch. */
2225:../../../FreeRTOS_9_0/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2226:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2227:../../../FreeRTOS_9_0/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2228:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 92


2229:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2230:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2231:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Characters didn't match. */
2232:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
2233:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2234:../../../FreeRTOS_9_0/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2235:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2236:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2237:../../../FreeRTOS_9_0/Source/tasks.c **** 						found. */
2238:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxReturn = pxNextTCB;
2239:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
2240:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2241:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2242:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2243:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2244:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2245:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2246:../../../FreeRTOS_9_0/Source/tasks.c **** 
2247:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxReturn != NULL )
2248:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2249:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The handle has been found. */
2250:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
2251:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2252:../../../FreeRTOS_9_0/Source/tasks.c **** 
2253:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2254:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2255:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2256:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2257:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2258:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2259:../../../FreeRTOS_9_0/Source/tasks.c **** 
2260:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pxReturn;
2261:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2262:../../../FreeRTOS_9_0/Source/tasks.c **** 
2263:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2264:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2265:../../../FreeRTOS_9_0/Source/tasks.c **** 
2266:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2267:../../../FreeRTOS_9_0/Source/tasks.c **** 
2268:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2269:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2270:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2271:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t* pxTCB;
2272:../../../FreeRTOS_9_0/Source/tasks.c **** 
2273:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2274:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2275:../../../FreeRTOS_9_0/Source/tasks.c **** 
2276:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
2277:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2278:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Search the ready lists. */
2279:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
2280:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2281:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxQueue--;
2282:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2283:../../../FreeRTOS_9_0/Source/tasks.c **** 
2284:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB != NULL )
2285:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
ARM GAS  /tmp/ccfW2k76.s 			page 93


2286:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Found the handle. */
2287:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
2288:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2289:../../../FreeRTOS_9_0/Source/tasks.c **** 
2290:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2291:../../../FreeRTOS_9_0/Source/tasks.c **** 
2292:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Search the delayed lists. */
2293:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == NULL )
2294:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2295:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2296:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2297:../../../FreeRTOS_9_0/Source/tasks.c **** 
2298:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB == NULL )
2299:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2300:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2301:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2302:../../../FreeRTOS_9_0/Source/tasks.c **** 
2303:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2304:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2305:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB == NULL )
2306:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2307:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Search the suspended list. */
2308:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2309:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2310:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2311:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
2312:../../../FreeRTOS_9_0/Source/tasks.c **** 
2313:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2314:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2315:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB == NULL )
2316:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2317:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Search the deleted list. */
2318:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2319:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2320:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2321:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
2322:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2323:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xTaskResumeAll();
2324:../../../FreeRTOS_9_0/Source/tasks.c **** 
2325:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2326:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2327:../../../FreeRTOS_9_0/Source/tasks.c **** 
2328:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2329:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2330:../../../FreeRTOS_9_0/Source/tasks.c **** 
2331:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2332:../../../FreeRTOS_9_0/Source/tasks.c **** 
2333:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2334:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 2734              		.loc 1 2334 0
 2735              		.cfi_startproc
 2736              		@ args = 0, pretend = 0, frame = 24
 2737              		@ frame_needed = 1, uses_anonymous_args = 0
 2738 0000 80B5     		push	{r7, lr}
 2739              	.LCFI106:
 2740              		.cfi_def_cfa_offset 8
 2741              		.cfi_offset 7, -8
ARM GAS  /tmp/ccfW2k76.s 			page 94


 2742              		.cfi_offset 14, -4
 2743 0002 86B0     		sub	sp, sp, #24
 2744              	.LCFI107:
 2745              		.cfi_def_cfa_offset 32
 2746 0004 00AF     		add	r7, sp, #0
 2747              	.LCFI108:
 2748              		.cfi_def_cfa_register 7
 2749 0006 F860     		str	r0, [r7, #12]
 2750 0008 B960     		str	r1, [r7, #8]
 2751 000a 7A60     		str	r2, [r7, #4]
2335:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2752              		.loc 1 2335 0
 2753 000c 0023     		movs	r3, #0
 2754 000e 7B61     		str	r3, [r7, #20]
 2755 0010 0723     		movs	r3, #7
 2756 0012 3B61     		str	r3, [r7, #16]
2336:../../../FreeRTOS_9_0/Source/tasks.c **** 
2337:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
 2757              		.loc 1 2337 0
 2758 0014 FFF7FEFF 		bl	vTaskSuspendAll
2338:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2339:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2340:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2759              		.loc 1 2340 0
 2760 0018 3B4B     		ldr	r3, .L183
 2761 001a 1B68     		ldr	r3, [r3]
 2762 001c BA68     		ldr	r2, [r7, #8]
 2763 001e 9A42     		cmp	r2, r3
 2764 0020 6BD3     		bcc	.L179
 2765              	.L180:
2341:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2342:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2343:../../../FreeRTOS_9_0/Source/tasks.c **** 				task in the Ready state. */
2344:../../../FreeRTOS_9_0/Source/tasks.c **** 				do
2345:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2346:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxQueue--;
 2766              		.loc 1 2346 0 discriminator 1
 2767 0022 3B69     		ldr	r3, [r7, #16]
 2768 0024 013B     		subs	r3, r3, #1
 2769 0026 3B61     		str	r3, [r7, #16]
2347:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 2770              		.loc 1 2347 0 discriminator 1
 2771 0028 7A69     		ldr	r2, [r7, #20]
 2772 002a 1346     		mov	r3, r2
 2773 002c DB00     		lsls	r3, r3, #3
 2774 002e 1344     		add	r3, r3, r2
 2775 0030 9B00     		lsls	r3, r3, #2
 2776 0032 1A46     		mov	r2, r3
 2777 0034 FB68     		ldr	r3, [r7, #12]
 2778 0036 9918     		adds	r1, r3, r2
 2779 0038 3A69     		ldr	r2, [r7, #16]
 2780 003a 1346     		mov	r3, r2
 2781 003c 9B00     		lsls	r3, r3, #2
 2782 003e 1344     		add	r3, r3, r2
 2783 0040 9B00     		lsls	r3, r3, #2
 2784 0042 324A     		ldr	r2, .L183+4
 2785 0044 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccfW2k76.s 			page 95


 2786 0046 0846     		mov	r0, r1
 2787 0048 1946     		mov	r1, r3
 2788 004a 0122     		movs	r2, #1
 2789 004c FFF7FEFF 		bl	prvListTasksWithinSingleList
 2790 0050 0246     		mov	r2, r0
 2791 0052 7B69     		ldr	r3, [r7, #20]
 2792 0054 1344     		add	r3, r3, r2
 2793 0056 7B61     		str	r3, [r7, #20]
2348:../../../FreeRTOS_9_0/Source/tasks.c **** 
2349:../../../FreeRTOS_9_0/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 2794              		.loc 1 2349 0 discriminator 1
 2795 0058 3B69     		ldr	r3, [r7, #16]
 2796 005a 002B     		cmp	r3, #0
 2797 005c E1D1     		bne	.L180
2350:../../../FreeRTOS_9_0/Source/tasks.c **** 
2351:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2352:../../../FreeRTOS_9_0/Source/tasks.c **** 				task in the Blocked state. */
2353:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 2798              		.loc 1 2353 0
 2799 005e 7A69     		ldr	r2, [r7, #20]
 2800 0060 1346     		mov	r3, r2
 2801 0062 DB00     		lsls	r3, r3, #3
 2802 0064 1344     		add	r3, r3, r2
 2803 0066 9B00     		lsls	r3, r3, #2
 2804 0068 1A46     		mov	r2, r3
 2805 006a FB68     		ldr	r3, [r7, #12]
 2806 006c 1A44     		add	r2, r2, r3
 2807 006e 284B     		ldr	r3, .L183+8
 2808 0070 1B68     		ldr	r3, [r3]
 2809 0072 1046     		mov	r0, r2
 2810 0074 1946     		mov	r1, r3
 2811 0076 0222     		movs	r2, #2
 2812 0078 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2813 007c 0246     		mov	r2, r0
 2814 007e 7B69     		ldr	r3, [r7, #20]
 2815 0080 1344     		add	r3, r3, r2
 2816 0082 7B61     		str	r3, [r7, #20]
2354:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 2817              		.loc 1 2354 0
 2818 0084 7A69     		ldr	r2, [r7, #20]
 2819 0086 1346     		mov	r3, r2
 2820 0088 DB00     		lsls	r3, r3, #3
 2821 008a 1344     		add	r3, r3, r2
 2822 008c 9B00     		lsls	r3, r3, #2
 2823 008e 1A46     		mov	r2, r3
 2824 0090 FB68     		ldr	r3, [r7, #12]
 2825 0092 1A44     		add	r2, r2, r3
 2826 0094 1F4B     		ldr	r3, .L183+12
 2827 0096 1B68     		ldr	r3, [r3]
 2828 0098 1046     		mov	r0, r2
 2829 009a 1946     		mov	r1, r3
 2830 009c 0222     		movs	r2, #2
 2831 009e FFF7FEFF 		bl	prvListTasksWithinSingleList
 2832 00a2 0246     		mov	r2, r0
 2833 00a4 7B69     		ldr	r3, [r7, #20]
 2834 00a6 1344     		add	r3, r3, r2
 2835 00a8 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccfW2k76.s 			page 96


2355:../../../FreeRTOS_9_0/Source/tasks.c **** 
2356:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2357:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2358:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2359:../../../FreeRTOS_9_0/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2360:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 2836              		.loc 1 2360 0
 2837 00aa 7A69     		ldr	r2, [r7, #20]
 2838 00ac 1346     		mov	r3, r2
 2839 00ae DB00     		lsls	r3, r3, #3
 2840 00b0 1344     		add	r3, r3, r2
 2841 00b2 9B00     		lsls	r3, r3, #2
 2842 00b4 1A46     		mov	r2, r3
 2843 00b6 FB68     		ldr	r3, [r7, #12]
 2844 00b8 1344     		add	r3, r3, r2
 2845 00ba 1846     		mov	r0, r3
 2846 00bc 1649     		ldr	r1, .L183+16
 2847 00be 0422     		movs	r2, #4
 2848 00c0 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2849 00c4 0246     		mov	r2, r0
 2850 00c6 7B69     		ldr	r3, [r7, #20]
 2851 00c8 1344     		add	r3, r3, r2
 2852 00ca 7B61     		str	r3, [r7, #20]
2361:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2362:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2363:../../../FreeRTOS_9_0/Source/tasks.c **** 
2364:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2365:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2366:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2367:../../../FreeRTOS_9_0/Source/tasks.c **** 					each task in the Suspended state. */
2368:../../../FreeRTOS_9_0/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 2853              		.loc 1 2368 0
 2854 00cc 7A69     		ldr	r2, [r7, #20]
 2855 00ce 1346     		mov	r3, r2
 2856 00d0 DB00     		lsls	r3, r3, #3
 2857 00d2 1344     		add	r3, r3, r2
 2858 00d4 9B00     		lsls	r3, r3, #2
 2859 00d6 1A46     		mov	r2, r3
 2860 00d8 FB68     		ldr	r3, [r7, #12]
 2861 00da 1344     		add	r3, r3, r2
 2862 00dc 1846     		mov	r0, r3
 2863 00de 0F49     		ldr	r1, .L183+20
 2864 00e0 0322     		movs	r2, #3
 2865 00e2 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2866 00e6 0246     		mov	r2, r0
 2867 00e8 7B69     		ldr	r3, [r7, #20]
 2868 00ea 1344     		add	r3, r3, r2
 2869 00ec 7B61     		str	r3, [r7, #20]
2369:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2370:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2371:../../../FreeRTOS_9_0/Source/tasks.c **** 
2372:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2373:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2374:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2375:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2376:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2377:../../../FreeRTOS_9_0/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
ARM GAS  /tmp/ccfW2k76.s 			page 97


2378:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
2379:../../../FreeRTOS_9_0/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2380:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
2381:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2382:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2383:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
2384:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2385:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 2870              		.loc 1 2385 0
 2871 00ee 7B68     		ldr	r3, [r7, #4]
 2872 00f0 002B     		cmp	r3, #0
 2873 00f2 02D0     		beq	.L179
2386:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2387:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pulTotalRunTime = 0;
 2874              		.loc 1 2387 0
 2875 00f4 7B68     		ldr	r3, [r7, #4]
 2876 00f6 0022     		movs	r2, #0
 2877 00f8 1A60     		str	r2, [r3]
 2878              	.L179:
2388:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2389:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2390:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2391:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2392:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2393:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2394:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2395:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2396:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2397:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xTaskResumeAll();
 2879              		.loc 1 2397 0
 2880 00fa FFF7FEFF 		bl	xTaskResumeAll
2398:../../../FreeRTOS_9_0/Source/tasks.c **** 
2399:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxTask;
 2881              		.loc 1 2399 0
 2882 00fe 7B69     		ldr	r3, [r7, #20]
2400:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 2883              		.loc 1 2400 0
 2884 0100 1846     		mov	r0, r3
 2885 0102 1837     		adds	r7, r7, #24
 2886              	.LCFI109:
 2887              		.cfi_def_cfa_offset 8
 2888 0104 BD46     		mov	sp, r7
 2889              	.LCFI110:
 2890              		.cfi_def_cfa_register 13
 2891              		@ sp needed
 2892 0106 80BD     		pop	{r7, pc}
 2893              	.L184:
 2894              		.align	2
 2895              	.L183:
 2896 0108 00000000 		.word	uxCurrentNumberOfTasks
 2897 010c 00000000 		.word	pxReadyTasksLists
 2898 0110 00000000 		.word	pxDelayedTaskList
 2899 0114 00000000 		.word	pxOverflowDelayedTaskList
 2900 0118 00000000 		.word	xTasksWaitingTermination
 2901 011c 00000000 		.word	xSuspendedTaskList
 2902              		.cfi_endproc
 2903              	.LFE26:
ARM GAS  /tmp/ccfW2k76.s 			page 98


 2905              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2906              		.align	2
 2907              		.global	xTaskIncrementTick
 2908              		.thumb
 2909              		.thumb_func
 2911              	xTaskIncrementTick:
 2912              	.LFB27:
2401:../../../FreeRTOS_9_0/Source/tasks.c **** 
2402:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2403:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2404:../../../FreeRTOS_9_0/Source/tasks.c **** 
2405:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2406:../../../FreeRTOS_9_0/Source/tasks.c **** 
2407:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2408:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2409:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2410:../../../FreeRTOS_9_0/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2411:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2412:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xIdleTaskHandle;
2413:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2414:../../../FreeRTOS_9_0/Source/tasks.c **** 
2415:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2416:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2417:../../../FreeRTOS_9_0/Source/tasks.c **** 
2418:../../../FreeRTOS_9_0/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2419:../../../FreeRTOS_9_0/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2420:../../../FreeRTOS_9_0/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2421:../../../FreeRTOS_9_0/Source/tasks.c **** 1. */
2422:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2423:../../../FreeRTOS_9_0/Source/tasks.c **** 
2424:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2425:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2426:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2427:../../../FreeRTOS_9_0/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2428:../../../FreeRTOS_9_0/Source/tasks.c **** 		each stepped tick. */
2429:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2430:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount += xTicksToJump;
2431:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2432:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2433:../../../FreeRTOS_9_0/Source/tasks.c **** 
2434:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2435:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2436:../../../FreeRTOS_9_0/Source/tasks.c **** 
2437:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2438:../../../FreeRTOS_9_0/Source/tasks.c **** 
2439:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2440:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2441:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2442:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2443:../../../FreeRTOS_9_0/Source/tasks.c **** 
2444:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxTCB );
2445:../../../FreeRTOS_9_0/Source/tasks.c **** 
2446:../../../FreeRTOS_9_0/Source/tasks.c **** 		vTaskSuspendAll();
2447:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2448:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2449:../../../FreeRTOS_9_0/Source/tasks.c **** 			it is actually in the Blocked state. */
2450:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
ARM GAS  /tmp/ccfW2k76.s 			page 99


2451:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2452:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2453:../../../FreeRTOS_9_0/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2454:../../../FreeRTOS_9_0/Source/tasks.c **** 				scheduler is suspended. */
2455:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2456:../../../FreeRTOS_9_0/Source/tasks.c **** 
2457:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2458:../../../FreeRTOS_9_0/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2459:../../../FreeRTOS_9_0/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2460:../../../FreeRTOS_9_0/Source/tasks.c **** 				is used. */
2461:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskENTER_CRITICAL();
2462:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2463:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2464:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2465:../../../FreeRTOS_9_0/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2466:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2467:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2468:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2469:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2470:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2471:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2472:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2473:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskEXIT_CRITICAL();
2474:../../../FreeRTOS_9_0/Source/tasks.c **** 
2475:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2476:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2477:../../../FreeRTOS_9_0/Source/tasks.c **** 
2478:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2479:../../../FreeRTOS_9_0/Source/tasks.c **** 				switch if preemption is turned off. */
2480:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2481:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2482:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2483:../../../FreeRTOS_9_0/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2484:../../../FreeRTOS_9_0/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2485:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2486:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2487:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2488:../../../FreeRTOS_9_0/Source/tasks.c **** 						is unsuspended. */
2489:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
2490:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2491:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2492:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2493:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2494:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2495:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2496:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2497:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2498:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2499:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2500:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2501:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2502:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2503:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTaskResumeAll();
2504:../../../FreeRTOS_9_0/Source/tasks.c **** 
2505:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2506:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2507:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 100


2508:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2509:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
2510:../../../FreeRTOS_9_0/Source/tasks.c **** 
2511:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2512:../../../FreeRTOS_9_0/Source/tasks.c **** {
 2913              		.loc 1 2512 0
 2914              		.cfi_startproc
 2915              		@ args = 0, pretend = 0, frame = 24
 2916              		@ frame_needed = 1, uses_anonymous_args = 0
 2917 0000 80B5     		push	{r7, lr}
 2918              	.LCFI111:
 2919              		.cfi_def_cfa_offset 8
 2920              		.cfi_offset 7, -8
 2921              		.cfi_offset 14, -4
 2922 0002 86B0     		sub	sp, sp, #24
 2923              	.LCFI112:
 2924              		.cfi_def_cfa_offset 32
 2925 0004 00AF     		add	r7, sp, #0
 2926              	.LCFI113:
 2927              		.cfi_def_cfa_register 7
2513:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t * pxTCB;
2514:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xItemValue;
2515:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2928              		.loc 1 2515 0
 2929 0006 0023     		movs	r3, #0
 2930 0008 7B61     		str	r3, [r7, #20]
2516:../../../FreeRTOS_9_0/Source/tasks.c **** 
2517:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2518:../../../FreeRTOS_9_0/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2519:../../../FreeRTOS_9_0/Source/tasks.c **** 	tasks to be unblocked. */
2520:../../../FreeRTOS_9_0/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2521:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2931              		.loc 1 2521 0
 2932 000a 514B     		ldr	r3, .L202
 2933 000c 1B68     		ldr	r3, [r3]
 2934 000e 002B     		cmp	r3, #0
 2935 0010 40F08E80 		bne	.L186
 2936              	.LBB130:
2522:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2523:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2524:../../../FreeRTOS_9_0/Source/tasks.c **** 		block. */
2525:../../../FreeRTOS_9_0/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 2937              		.loc 1 2525 0
 2938 0014 4F4B     		ldr	r3, .L202+4
 2939 0016 1B68     		ldr	r3, [r3]
 2940 0018 0133     		adds	r3, r3, #1
 2941 001a 3B61     		str	r3, [r7, #16]
2526:../../../FreeRTOS_9_0/Source/tasks.c **** 
2527:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2528:../../../FreeRTOS_9_0/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2529:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTickCount = xConstTickCount;
 2942              		.loc 1 2529 0
 2943 001c 4D4A     		ldr	r2, .L202+4
 2944 001e 3B69     		ldr	r3, [r7, #16]
 2945 0020 1360     		str	r3, [r2]
2530:../../../FreeRTOS_9_0/Source/tasks.c **** 
2531:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
ARM GAS  /tmp/ccfW2k76.s 			page 101


 2946              		.loc 1 2531 0
 2947 0022 3B69     		ldr	r3, [r7, #16]
 2948 0024 002B     		cmp	r3, #0
 2949 0026 1FD1     		bne	.L187
 2950              	.LBB131:
2532:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2533:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2951              		.loc 1 2533 0
 2952 0028 4B4B     		ldr	r3, .L202+8
 2953 002a 1B68     		ldr	r3, [r3]
 2954 002c 1B68     		ldr	r3, [r3]
 2955 002e 002B     		cmp	r3, #0
 2956 0030 09D0     		beq	.L188
 2957              	.LBB132:
 2958              	.LBB133:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2959              		.loc 2 237 0 discriminator 1
 2960              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2961 0032 4FF05003 			mov r3, #80												
 2962 0036 83F31188 		msr basepri, r3											
 2963 003a BFF36F8F 		isb														
 2964 003e BFF34F8F 		dsb														
 2965              	
 2966              	@ 0 "" 2
 2967              		.thumb
 2968 0042 3B60     		str	r3, [r7]
 2969              	.L189:
 2970              	.LBE133:
 2971              	.LBE132:
 2972              		.loc 1 2533 0 discriminator 1
 2973 0044 FEE7     		b	.L189
 2974              	.L188:
 2975              		.loc 1 2533 0 is_stmt 0 discriminator 2
 2976 0046 444B     		ldr	r3, .L202+8
 2977 0048 1B68     		ldr	r3, [r3]
 2978 004a FB60     		str	r3, [r7, #12]
 2979 004c 434B     		ldr	r3, .L202+12
 2980 004e 1B68     		ldr	r3, [r3]
 2981 0050 414A     		ldr	r2, .L202+8
 2982 0052 1360     		str	r3, [r2]
 2983 0054 414A     		ldr	r2, .L202+12
 2984 0056 FB68     		ldr	r3, [r7, #12]
 2985 0058 1360     		str	r3, [r2]
 2986 005a 414B     		ldr	r3, .L202+16
 2987 005c 1B68     		ldr	r3, [r3]
 2988 005e 0133     		adds	r3, r3, #1
 2989 0060 3F4A     		ldr	r2, .L202+16
 2990 0062 1360     		str	r3, [r2]
 2991 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2992              	.L187:
 2993              	.LBE131:
2534:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2535:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2536:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2537:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2538:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2539:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 102


2540:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2541:../../../FreeRTOS_9_0/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2542:../../../FreeRTOS_9_0/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2543:../../../FreeRTOS_9_0/Source/tasks.c **** 		look any further down the list. */
2544:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2994              		.loc 1 2544 0 is_stmt 1
 2995 0068 3E4B     		ldr	r3, .L202+20
 2996 006a 1B68     		ldr	r3, [r3]
 2997 006c 3A69     		ldr	r2, [r7, #16]
 2998 006e 9A42     		cmp	r2, r3
 2999 0070 4FD3     		bcc	.L190
 3000              	.L197:
2545:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2546:../../../FreeRTOS_9_0/Source/tasks.c **** 			for( ;; )
2547:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2548:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3001              		.loc 1 2548 0
 3002 0072 394B     		ldr	r3, .L202+8
 3003 0074 1B68     		ldr	r3, [r3]
 3004 0076 1B68     		ldr	r3, [r3]
 3005 0078 002B     		cmp	r3, #0
 3006 007a 01D1     		bne	.L191
 3007              		.loc 1 2548 0 is_stmt 0 discriminator 1
 3008 007c 0123     		movs	r3, #1
 3009 007e 00E0     		b	.L192
 3010              	.L191:
 3011              		.loc 1 2548 0 discriminator 2
 3012 0080 0023     		movs	r3, #0
 3013              	.L192:
 3014              		.loc 1 2548 0 discriminator 4
 3015 0082 002B     		cmp	r3, #0
 3016 0084 04D0     		beq	.L193
2549:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2550:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2551:../../../FreeRTOS_9_0/Source/tasks.c **** 					to the maximum possible value so it is extremely
2552:../../../FreeRTOS_9_0/Source/tasks.c **** 					unlikely that the
2553:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2554:../../../FreeRTOS_9_0/Source/tasks.c **** 					next time through. */
2555:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3017              		.loc 1 2555 0 is_stmt 1
 3018 0086 374B     		ldr	r3, .L202+20
 3019 0088 4FF0FF32 		mov	r2, #-1
 3020 008c 1A60     		str	r2, [r3]
2556:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 3021              		.loc 1 2556 0
 3022 008e 40E0     		b	.L190
 3023              	.L193:
2557:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2558:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2559:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2560:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2561:../../../FreeRTOS_9_0/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2562:../../../FreeRTOS_9_0/Source/tasks.c **** 					at which the task at the head of the delayed list must
2563:../../../FreeRTOS_9_0/Source/tasks.c **** 					be removed from the Blocked state. */
2564:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 3024              		.loc 1 2564 0
 3025 0090 314B     		ldr	r3, .L202+8
ARM GAS  /tmp/ccfW2k76.s 			page 103


 3026 0092 1B68     		ldr	r3, [r3]
 3027 0094 DB68     		ldr	r3, [r3, #12]
 3028 0096 DB68     		ldr	r3, [r3, #12]
 3029 0098 BB60     		str	r3, [r7, #8]
2565:../../../FreeRTOS_9_0/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3030              		.loc 1 2565 0
 3031 009a BB68     		ldr	r3, [r7, #8]
 3032 009c 5B68     		ldr	r3, [r3, #4]
 3033 009e 7B60     		str	r3, [r7, #4]
2566:../../../FreeRTOS_9_0/Source/tasks.c **** 
2567:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3034              		.loc 1 2567 0
 3035 00a0 3A69     		ldr	r2, [r7, #16]
 3036 00a2 7B68     		ldr	r3, [r7, #4]
 3037 00a4 9A42     		cmp	r2, r3
 3038 00a6 03D2     		bcs	.L194
2568:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2569:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2570:../../../FreeRTOS_9_0/Source/tasks.c **** 						item value is the time at which the task at the head
2571:../../../FreeRTOS_9_0/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2572:../../../FreeRTOS_9_0/Source/tasks.c **** 						state -	so record the item value in
2573:../../../FreeRTOS_9_0/Source/tasks.c **** 						xNextTaskUnblockTime. */
2574:../../../FreeRTOS_9_0/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3039              		.loc 1 2574 0
 3040 00a8 2E4A     		ldr	r2, .L202+20
 3041 00aa 7B68     		ldr	r3, [r7, #4]
 3042 00ac 1360     		str	r3, [r2]
2575:../../../FreeRTOS_9_0/Source/tasks.c **** 						break;
 3043              		.loc 1 2575 0
 3044 00ae 30E0     		b	.L190
 3045              	.L194:
2576:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2577:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2578:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2579:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2580:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2581:../../../FreeRTOS_9_0/Source/tasks.c **** 
2582:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2583:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3046              		.loc 1 2583 0
 3047 00b0 BB68     		ldr	r3, [r7, #8]
 3048 00b2 0433     		adds	r3, r3, #4
 3049 00b4 1846     		mov	r0, r3
 3050 00b6 FFF7FEFF 		bl	uxListRemove
2584:../../../FreeRTOS_9_0/Source/tasks.c **** 
2585:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2586:../../../FreeRTOS_9_0/Source/tasks.c **** 					it from the event list. */
2587:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3051              		.loc 1 2587 0
 3052 00ba BB68     		ldr	r3, [r7, #8]
 3053 00bc 9B6A     		ldr	r3, [r3, #40]
 3054 00be 002B     		cmp	r3, #0
 3055 00c0 04D0     		beq	.L195
2588:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2589:../../../FreeRTOS_9_0/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3056              		.loc 1 2589 0
 3057 00c2 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccfW2k76.s 			page 104


 3058 00c4 1833     		adds	r3, r3, #24
 3059 00c6 1846     		mov	r0, r3
 3060 00c8 FFF7FEFF 		bl	uxListRemove
 3061              	.L195:
2590:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2591:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
2592:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2593:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2594:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2595:../../../FreeRTOS_9_0/Source/tasks.c **** 
2596:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2597:../../../FreeRTOS_9_0/Source/tasks.c **** 					list. */
2598:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3062              		.loc 1 2598 0
 3063 00cc BB68     		ldr	r3, [r7, #8]
 3064 00ce DB6A     		ldr	r3, [r3, #44]
 3065 00d0 1A46     		mov	r2, r3
 3066 00d2 0123     		movs	r3, #1
 3067 00d4 03FA02F2 		lsl	r2, r3, r2
 3068 00d8 234B     		ldr	r3, .L202+24
 3069 00da 1B68     		ldr	r3, [r3]
 3070 00dc 1343     		orrs	r3, r3, r2
 3071 00de 224A     		ldr	r2, .L202+24
 3072 00e0 1360     		str	r3, [r2]
 3073 00e2 BB68     		ldr	r3, [r7, #8]
 3074 00e4 DA6A     		ldr	r2, [r3, #44]
 3075 00e6 1346     		mov	r3, r2
 3076 00e8 9B00     		lsls	r3, r3, #2
 3077 00ea 1344     		add	r3, r3, r2
 3078 00ec 9B00     		lsls	r3, r3, #2
 3079 00ee 1F4A     		ldr	r2, .L202+28
 3080 00f0 1A44     		add	r2, r2, r3
 3081 00f2 BB68     		ldr	r3, [r7, #8]
 3082 00f4 0433     		adds	r3, r3, #4
 3083 00f6 1046     		mov	r0, r2
 3084 00f8 1946     		mov	r1, r3
 3085 00fa FFF7FEFF 		bl	vListInsertEnd
2599:../../../FreeRTOS_9_0/Source/tasks.c **** 
2600:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2601:../../../FreeRTOS_9_0/Source/tasks.c **** 					context switch if preemption is turned off. */
2602:../../../FreeRTOS_9_0/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2603:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
2604:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2605:../../../FreeRTOS_9_0/Source/tasks.c **** 						only be performed if the unblocked task has a
2606:../../../FreeRTOS_9_0/Source/tasks.c **** 						priority that is equal to or higher than the
2607:../../../FreeRTOS_9_0/Source/tasks.c **** 						currently executing task. */
2608:../../../FreeRTOS_9_0/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3086              		.loc 1 2608 0
 3087 00fe BB68     		ldr	r3, [r7, #8]
 3088 0100 DA6A     		ldr	r2, [r3, #44]
 3089 0102 1B4B     		ldr	r3, .L202+32
 3090 0104 1B68     		ldr	r3, [r3]
 3091 0106 DB6A     		ldr	r3, [r3, #44]
 3092 0108 9A42     		cmp	r2, r3
 3093 010a 01D3     		bcc	.L196
2609:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
2610:../../../FreeRTOS_9_0/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
ARM GAS  /tmp/ccfW2k76.s 			page 105


 3094              		.loc 1 2610 0
 3095 010c 0123     		movs	r3, #1
 3096 010e 7B61     		str	r3, [r7, #20]
 3097              	.L196:
2611:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
2612:../../../FreeRTOS_9_0/Source/tasks.c **** 						else
2613:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
2614:../../../FreeRTOS_9_0/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2615:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
2616:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
2617:../../../FreeRTOS_9_0/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2618:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2619:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
 3098              		.loc 1 2619 0
 3099 0110 AFE7     		b	.L197
 3100              	.L190:
2620:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2621:../../../FreeRTOS_9_0/Source/tasks.c **** 
2622:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2623:../../../FreeRTOS_9_0/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2624:../../../FreeRTOS_9_0/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2625:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2626:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2627:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3101              		.loc 1 2627 0
 3102 0112 174B     		ldr	r3, .L202+32
 3103 0114 1B68     		ldr	r3, [r3]
 3104 0116 DA6A     		ldr	r2, [r3, #44]
 3105 0118 1449     		ldr	r1, .L202+28
 3106 011a 1346     		mov	r3, r2
 3107 011c 9B00     		lsls	r3, r3, #2
 3108 011e 1344     		add	r3, r3, r2
 3109 0120 9B00     		lsls	r3, r3, #2
 3110 0122 0B44     		add	r3, r3, r1
 3111 0124 1B68     		ldr	r3, [r3]
 3112 0126 012B     		cmp	r3, #1
 3113 0128 01D9     		bls	.L198
2628:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2629:../../../FreeRTOS_9_0/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3114              		.loc 1 2629 0
 3115 012a 0123     		movs	r3, #1
 3116 012c 7B61     		str	r3, [r7, #20]
 3117              	.L198:
 3118              	.LBE130:
 3119 012e 04E0     		b	.L199
 3120              	.L186:
2630:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2631:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2632:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2633:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2634:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2635:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2636:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2637:../../../FreeRTOS_9_0/Source/tasks.c **** 
2638:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2639:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2640:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
ARM GAS  /tmp/ccfW2k76.s 			page 106


2641:../../../FreeRTOS_9_0/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2642:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2643:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2644:../../../FreeRTOS_9_0/Source/tasks.c **** 				vApplicationTickHook();
2645:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2646:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
2647:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
2648:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2649:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
2650:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2651:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2652:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2653:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2654:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2655:../../../FreeRTOS_9_0/Source/tasks.c **** 		++uxPendedTicks;
 3121              		.loc 1 2655 0
 3122 0130 104B     		ldr	r3, .L202+36
 3123 0132 1B68     		ldr	r3, [r3]
 3124 0134 0133     		adds	r3, r3, #1
 3125 0136 0F4A     		ldr	r2, .L202+36
 3126 0138 1360     		str	r3, [r2]
 3127              	.L199:
2656:../../../FreeRTOS_9_0/Source/tasks.c **** 
2657:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2658:../../../FreeRTOS_9_0/Source/tasks.c **** 		scheduler is locked. */
2659:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2660:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2661:../../../FreeRTOS_9_0/Source/tasks.c **** 			vApplicationTickHook();
2662:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2663:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
2664:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2665:../../../FreeRTOS_9_0/Source/tasks.c **** 
2666:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2667:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2668:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 3128              		.loc 1 2668 0
 3129 013a 0F4B     		ldr	r3, .L202+40
 3130 013c 1B68     		ldr	r3, [r3]
 3131 013e 002B     		cmp	r3, #0
 3132 0140 01D0     		beq	.L200
2669:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2670:../../../FreeRTOS_9_0/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 3133              		.loc 1 2670 0
 3134 0142 0123     		movs	r3, #1
 3135 0144 7B61     		str	r3, [r7, #20]
 3136              	.L200:
2671:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2672:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2673:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2674:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2675:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2676:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2677:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2678:../../../FreeRTOS_9_0/Source/tasks.c **** 
2679:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xSwitchRequired;
 3137              		.loc 1 2679 0
 3138 0146 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccfW2k76.s 			page 107


2680:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3139              		.loc 1 2680 0
 3140 0148 1846     		mov	r0, r3
 3141 014a 1837     		adds	r7, r7, #24
 3142              	.LCFI114:
 3143              		.cfi_def_cfa_offset 8
 3144 014c BD46     		mov	sp, r7
 3145              	.LCFI115:
 3146              		.cfi_def_cfa_register 13
 3147              		@ sp needed
 3148 014e 80BD     		pop	{r7, pc}
 3149              	.L203:
 3150              		.align	2
 3151              	.L202:
 3152 0150 00000000 		.word	uxSchedulerSuspended
 3153 0154 00000000 		.word	xTickCount
 3154 0158 00000000 		.word	pxDelayedTaskList
 3155 015c 00000000 		.word	pxOverflowDelayedTaskList
 3156 0160 00000000 		.word	xNumOfOverflows
 3157 0164 00000000 		.word	xNextTaskUnblockTime
 3158 0168 00000000 		.word	uxTopReadyPriority
 3159 016c 00000000 		.word	pxReadyTasksLists
 3160 0170 00000000 		.word	pxCurrentTCB
 3161 0174 00000000 		.word	uxPendedTicks
 3162 0178 00000000 		.word	xYieldPending
 3163              		.cfi_endproc
 3164              	.LFE27:
 3166              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3167              		.align	2
 3168              		.global	vTaskSwitchContext
 3169              		.thumb
 3170              		.thumb_func
 3172              	vTaskSwitchContext:
 3173              	.LFB28:
2681:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2682:../../../FreeRTOS_9_0/Source/tasks.c **** 
2683:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2684:../../../FreeRTOS_9_0/Source/tasks.c **** 
2685:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2686:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2687:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2688:../../../FreeRTOS_9_0/Source/tasks.c **** 
2689:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2690:../../../FreeRTOS_9_0/Source/tasks.c **** 		getting set. */
2691:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2692:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2693:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2694:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2695:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2696:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2697:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2698:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2699:../../../FreeRTOS_9_0/Source/tasks.c **** 
2700:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2701:../../../FreeRTOS_9_0/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2702:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
2703:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
ARM GAS  /tmp/ccfW2k76.s 			page 108


2704:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
2705:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2706:../../../FreeRTOS_9_0/Source/tasks.c **** 
2707:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2708:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2709:../../../FreeRTOS_9_0/Source/tasks.c **** 
2710:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2711:../../../FreeRTOS_9_0/Source/tasks.c **** 
2712:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2713:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2714:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2715:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2716:../../../FreeRTOS_9_0/Source/tasks.c **** 
2717:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2718:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2719:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2720:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2721:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2722:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2723:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2724:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2725:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2726:../../../FreeRTOS_9_0/Source/tasks.c **** 
2727:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2728:../../../FreeRTOS_9_0/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2729:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
2730:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2731:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2732:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2733:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
2734:../../../FreeRTOS_9_0/Source/tasks.c **** 
2735:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2736:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2737:../../../FreeRTOS_9_0/Source/tasks.c **** 
2738:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2739:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2740:../../../FreeRTOS_9_0/Source/tasks.c **** 
2741:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2742:../../../FreeRTOS_9_0/Source/tasks.c **** 
2743:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2744:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2745:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *xTCB;
2746:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
2747:../../../FreeRTOS_9_0/Source/tasks.c **** 
2748:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2749:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask == NULL )
2750:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2751:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2752:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2753:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2754:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2755:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2756:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2757:../../../FreeRTOS_9_0/Source/tasks.c **** 
2758:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2759:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2760:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
ARM GAS  /tmp/ccfW2k76.s 			page 109


2761:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2762:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
2763:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2764:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFAIL;
2765:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2766:../../../FreeRTOS_9_0/Source/tasks.c **** 
2767:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
2768:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2769:../../../FreeRTOS_9_0/Source/tasks.c **** 
2770:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2771:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2772:../../../FreeRTOS_9_0/Source/tasks.c **** 
2773:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSwitchContext( void )
2774:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3174              		.loc 1 2774 0
 3175              		.cfi_startproc
 3176              		@ args = 0, pretend = 0, frame = 24
 3177              		@ frame_needed = 1, uses_anonymous_args = 0
 3178              		@ link register save eliminated.
 3179 0000 80B4     		push	{r7}
 3180              	.LCFI116:
 3181              		.cfi_def_cfa_offset 4
 3182              		.cfi_offset 7, -4
 3183 0002 87B0     		sub	sp, sp, #28
 3184              	.LCFI117:
 3185              		.cfi_def_cfa_offset 32
 3186 0004 00AF     		add	r7, sp, #0
 3187              	.LCFI118:
 3188              		.cfi_def_cfa_register 7
2775:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3189              		.loc 1 2775 0
 3190 0006 264B     		ldr	r3, .L211
 3191 0008 1B68     		ldr	r3, [r3]
 3192 000a 002B     		cmp	r3, #0
 3193 000c 03D0     		beq	.L205
2776:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2777:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2778:../../../FreeRTOS_9_0/Source/tasks.c **** 		switch. */
2779:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3194              		.loc 1 2779 0
 3195 000e 254B     		ldr	r3, .L211+4
 3196 0010 0122     		movs	r2, #1
 3197 0012 1A60     		str	r2, [r3]
 3198 0014 3EE0     		b	.L204
 3199              	.L205:
2780:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2781:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2782:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2783:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdFALSE;
 3200              		.loc 1 2783 0
 3201 0016 234B     		ldr	r3, .L211+4
 3202 0018 0022     		movs	r2, #0
 3203 001a 1A60     		str	r2, [r3]
 3204              	.LBB134:
2784:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2785:../../../FreeRTOS_9_0/Source/tasks.c **** 
2786:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccfW2k76.s 			page 110


2787:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2788:../../../FreeRTOS_9_0/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2789:../../../FreeRTOS_9_0/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2790:../../../FreeRTOS_9_0/Source/tasks.c **** 				#else
2791:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2792:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
2793:../../../FreeRTOS_9_0/Source/tasks.c **** 
2794:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2795:../../../FreeRTOS_9_0/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2796:../../../FreeRTOS_9_0/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2797:../../../FreeRTOS_9_0/Source/tasks.c **** 				protection here so count values are only valid until the timer
2798:../../../FreeRTOS_9_0/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2799:../../../FreeRTOS_9_0/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2800:../../../FreeRTOS_9_0/Source/tasks.c **** 				are provided by the application, not the kernel. */
2801:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2802:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2803:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2804:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2805:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
2806:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
2807:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2808:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
2809:../../../FreeRTOS_9_0/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2810:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2811:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2812:../../../FreeRTOS_9_0/Source/tasks.c **** 
2813:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2814:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2815:../../../FreeRTOS_9_0/Source/tasks.c **** 
2816:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2817:../../../FreeRTOS_9_0/Source/tasks.c **** 		optimised asm code. */
2818:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 3205              		.loc 1 2818 0
 3206 001c 224B     		ldr	r3, .L211+8
 3207 001e 1B68     		ldr	r3, [r3]
 3208 0020 FB60     		str	r3, [r7, #12]
 3209              	.LBB135:
 3210              	.LBB136:
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3211              		.loc 2 176 0
 3212 0022 FB68     		ldr	r3, [r7, #12]
 3213              	@ 176 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3214 0024 B3FA83F3 		clz r3, r3
 3215              	@ 0 "" 2
 3216              		.thumb
 3217 0028 FB72     		strb	r3, [r7, #11]
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3218              		.loc 2 177 0
 3219 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3220              	.LBE136:
 3221              	.LBE135:
 3222              		.loc 1 2818 0
 3223 002c C3F11F03 		rsb	r3, r3, #31
 3224 0030 7B61     		str	r3, [r7, #20]
 3225 0032 1E49     		ldr	r1, .L211+12
 3226 0034 7A69     		ldr	r2, [r7, #20]
 3227 0036 1346     		mov	r3, r2
ARM GAS  /tmp/ccfW2k76.s 			page 111


 3228 0038 9B00     		lsls	r3, r3, #2
 3229 003a 1344     		add	r3, r3, r2
 3230 003c 9B00     		lsls	r3, r3, #2
 3231 003e 0B44     		add	r3, r3, r1
 3232 0040 1B68     		ldr	r3, [r3]
 3233 0042 002B     		cmp	r3, #0
 3234 0044 09D1     		bne	.L208
 3235              	.LBB137:
 3236              	.LBB138:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3237              		.loc 2 237 0 discriminator 1
 3238              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3239 0046 4FF05003 			mov r3, #80												
 3240 004a 83F31188 		msr basepri, r3											
 3241 004e BFF36F8F 		isb														
 3242 0052 BFF34F8F 		dsb														
 3243              	
 3244              	@ 0 "" 2
 3245              		.thumb
 3246 0056 7B60     		str	r3, [r7, #4]
 3247              	.L209:
 3248              	.LBE138:
 3249              	.LBE137:
 3250              		.loc 1 2818 0 discriminator 1
 3251 0058 FEE7     		b	.L209
 3252              	.L208:
 3253              	.LBB139:
 3254              		.loc 1 2818 0 is_stmt 0 discriminator 2
 3255 005a 7A69     		ldr	r2, [r7, #20]
 3256 005c 1346     		mov	r3, r2
 3257 005e 9B00     		lsls	r3, r3, #2
 3258 0060 1344     		add	r3, r3, r2
 3259 0062 9B00     		lsls	r3, r3, #2
 3260 0064 114A     		ldr	r2, .L211+12
 3261 0066 1344     		add	r3, r3, r2
 3262 0068 3B61     		str	r3, [r7, #16]
 3263 006a 3B69     		ldr	r3, [r7, #16]
 3264 006c 5B68     		ldr	r3, [r3, #4]
 3265 006e 5A68     		ldr	r2, [r3, #4]
 3266 0070 3B69     		ldr	r3, [r7, #16]
 3267 0072 5A60     		str	r2, [r3, #4]
 3268 0074 3B69     		ldr	r3, [r7, #16]
 3269 0076 5A68     		ldr	r2, [r3, #4]
 3270 0078 3B69     		ldr	r3, [r7, #16]
 3271 007a 0833     		adds	r3, r3, #8
 3272 007c 9A42     		cmp	r2, r3
 3273 007e 04D1     		bne	.L210
 3274              		.loc 1 2818 0 discriminator 3
 3275 0080 3B69     		ldr	r3, [r7, #16]
 3276 0082 5B68     		ldr	r3, [r3, #4]
 3277 0084 5A68     		ldr	r2, [r3, #4]
 3278 0086 3B69     		ldr	r3, [r7, #16]
 3279 0088 5A60     		str	r2, [r3, #4]
 3280              	.L210:
 3281              		.loc 1 2818 0 discriminator 5
 3282 008a 3B69     		ldr	r3, [r7, #16]
 3283 008c 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccfW2k76.s 			page 112


 3284 008e DB68     		ldr	r3, [r3, #12]
 3285 0090 074A     		ldr	r2, .L211+16
 3286 0092 1360     		str	r3, [r2]
 3287              	.L204:
 3288              	.LBE139:
 3289              	.LBE134:
2819:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2820:../../../FreeRTOS_9_0/Source/tasks.c **** 
2821:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2822:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2823:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2824:../../../FreeRTOS_9_0/Source/tasks.c **** 			structure specific to this task. */
2825:../../../FreeRTOS_9_0/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2826:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2827:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2828:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2829:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3290              		.loc 1 2829 0 is_stmt 1
 3291 0094 1C37     		adds	r7, r7, #28
 3292              	.LCFI119:
 3293              		.cfi_def_cfa_offset 4
 3294 0096 BD46     		mov	sp, r7
 3295              	.LCFI120:
 3296              		.cfi_def_cfa_register 13
 3297              		@ sp needed
 3298 0098 5DF8047B 		ldr	r7, [sp], #4
 3299              	.LCFI121:
 3300              		.cfi_restore 7
 3301              		.cfi_def_cfa_offset 0
 3302 009c 7047     		bx	lr
 3303              	.L212:
 3304 009e 00BF     		.align	2
 3305              	.L211:
 3306 00a0 00000000 		.word	uxSchedulerSuspended
 3307 00a4 00000000 		.word	xYieldPending
 3308 00a8 00000000 		.word	uxTopReadyPriority
 3309 00ac 00000000 		.word	pxReadyTasksLists
 3310 00b0 00000000 		.word	pxCurrentTCB
 3311              		.cfi_endproc
 3312              	.LFE28:
 3314              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3315              		.align	2
 3316              		.global	vTaskPlaceOnEventList
 3317              		.thumb
 3318              		.thumb_func
 3320              	vTaskPlaceOnEventList:
 3321              	.LFB29:
2830:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2831:../../../FreeRTOS_9_0/Source/tasks.c **** 
2832:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2833:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3322              		.loc 1 2833 0
 3323              		.cfi_startproc
 3324              		@ args = 0, pretend = 0, frame = 16
 3325              		@ frame_needed = 1, uses_anonymous_args = 0
 3326 0000 80B5     		push	{r7, lr}
 3327              	.LCFI122:
ARM GAS  /tmp/ccfW2k76.s 			page 113


 3328              		.cfi_def_cfa_offset 8
 3329              		.cfi_offset 7, -8
 3330              		.cfi_offset 14, -4
 3331 0002 84B0     		sub	sp, sp, #16
 3332              	.LCFI123:
 3333              		.cfi_def_cfa_offset 24
 3334 0004 00AF     		add	r7, sp, #0
 3335              	.LCFI124:
 3336              		.cfi_def_cfa_register 7
 3337 0006 7860     		str	r0, [r7, #4]
 3338 0008 3960     		str	r1, [r7]
2834:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxEventList );
 3339              		.loc 1 2834 0
 3340 000a 7B68     		ldr	r3, [r7, #4]
 3341 000c 002B     		cmp	r3, #0
 3342 000e 09D1     		bne	.L214
 3343              	.LBB140:
 3344              	.LBB141:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3345              		.loc 2 237 0 discriminator 1
 3346              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3347 0010 4FF05003 			mov r3, #80												
 3348 0014 83F31188 		msr basepri, r3											
 3349 0018 BFF36F8F 		isb														
 3350 001c BFF34F8F 		dsb														
 3351              	
 3352              	@ 0 "" 2
 3353              		.thumb
 3354 0020 FB60     		str	r3, [r7, #12]
 3355              	.L215:
 3356              	.LBE141:
 3357              	.LBE140:
 3358              		.loc 1 2834 0 discriminator 1
 3359 0022 FEE7     		b	.L215
 3360              	.L214:
2835:../../../FreeRTOS_9_0/Source/tasks.c **** 
2836:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2837:../../../FreeRTOS_9_0/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2838:../../../FreeRTOS_9_0/Source/tasks.c **** 
2839:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2840:../../../FreeRTOS_9_0/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2841:../../../FreeRTOS_9_0/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2842:../../../FreeRTOS_9_0/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2843:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3361              		.loc 1 2843 0
 3362 0024 064B     		ldr	r3, .L216
 3363 0026 1B68     		ldr	r3, [r3]
 3364 0028 1833     		adds	r3, r3, #24
 3365 002a 7868     		ldr	r0, [r7, #4]
 3366 002c 1946     		mov	r1, r3
 3367 002e FFF7FEFF 		bl	vListInsert
2844:../../../FreeRTOS_9_0/Source/tasks.c **** 
2845:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3368              		.loc 1 2845 0
 3369 0032 3868     		ldr	r0, [r7]
 3370 0034 0121     		movs	r1, #1
 3371 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  /tmp/ccfW2k76.s 			page 114


2846:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3372              		.loc 1 2846 0
 3373 003a 1037     		adds	r7, r7, #16
 3374              	.LCFI125:
 3375              		.cfi_def_cfa_offset 8
 3376 003c BD46     		mov	sp, r7
 3377              	.LCFI126:
 3378              		.cfi_def_cfa_register 13
 3379              		@ sp needed
 3380 003e 80BD     		pop	{r7, pc}
 3381              	.L217:
 3382              		.align	2
 3383              	.L216:
 3384 0040 00000000 		.word	pxCurrentTCB
 3385              		.cfi_endproc
 3386              	.LFE29:
 3388              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3389              		.align	2
 3390              		.global	vTaskPlaceOnUnorderedEventList
 3391              		.thumb
 3392              		.thumb_func
 3394              	vTaskPlaceOnUnorderedEventList:
 3395              	.LFB30:
2847:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2848:../../../FreeRTOS_9_0/Source/tasks.c **** 
2849:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2850:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3396              		.loc 1 2850 0
 3397              		.cfi_startproc
 3398              		@ args = 0, pretend = 0, frame = 24
 3399              		@ frame_needed = 1, uses_anonymous_args = 0
 3400 0000 80B5     		push	{r7, lr}
 3401              	.LCFI127:
 3402              		.cfi_def_cfa_offset 8
 3403              		.cfi_offset 7, -8
 3404              		.cfi_offset 14, -4
 3405 0002 86B0     		sub	sp, sp, #24
 3406              	.LCFI128:
 3407              		.cfi_def_cfa_offset 32
 3408 0004 00AF     		add	r7, sp, #0
 3409              	.LCFI129:
 3410              		.cfi_def_cfa_register 7
 3411 0006 F860     		str	r0, [r7, #12]
 3412 0008 B960     		str	r1, [r7, #8]
 3413 000a 7A60     		str	r2, [r7, #4]
2851:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxEventList );
 3414              		.loc 1 2851 0
 3415 000c FB68     		ldr	r3, [r7, #12]
 3416 000e 002B     		cmp	r3, #0
 3417 0010 09D1     		bne	.L219
 3418              	.LBB142:
 3419              	.LBB143:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3420              		.loc 2 237 0 discriminator 1
 3421              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3422 0012 4FF05003 			mov r3, #80												
 3423 0016 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccfW2k76.s 			page 115


 3424 001a BFF36F8F 		isb														
 3425 001e BFF34F8F 		dsb														
 3426              	
 3427              	@ 0 "" 2
 3428              		.thumb
 3429 0022 7B61     		str	r3, [r7, #20]
 3430              	.L220:
 3431              	.LBE143:
 3432              	.LBE142:
 3433              		.loc 1 2851 0 discriminator 1
 3434 0024 FEE7     		b	.L220
 3435              	.L219:
2852:../../../FreeRTOS_9_0/Source/tasks.c **** 
2853:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2854:../../../FreeRTOS_9_0/Source/tasks.c **** 	the event groups implementation. */
2855:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3436              		.loc 1 2855 0
 3437 0026 114B     		ldr	r3, .L223
 3438 0028 1B68     		ldr	r3, [r3]
 3439 002a 002B     		cmp	r3, #0
 3440 002c 09D1     		bne	.L221
 3441              	.LBB144:
 3442              	.LBB145:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3443              		.loc 2 237 0 discriminator 1
 3444              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3445 002e 4FF05003 			mov r3, #80												
 3446 0032 83F31188 		msr basepri, r3											
 3447 0036 BFF36F8F 		isb														
 3448 003a BFF34F8F 		dsb														
 3449              	
 3450              	@ 0 "" 2
 3451              		.thumb
 3452 003e 3B61     		str	r3, [r7, #16]
 3453              	.L222:
 3454              	.LBE145:
 3455              	.LBE144:
 3456              		.loc 1 2855 0 discriminator 2
 3457 0040 FEE7     		b	.L222
 3458              	.L221:
2856:../../../FreeRTOS_9_0/Source/tasks.c **** 
2857:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2858:../../../FreeRTOS_9_0/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2859:../../../FreeRTOS_9_0/Source/tasks.c **** 	task that is not in the Blocked state. */
2860:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3459              		.loc 1 2860 0
 3460 0042 0B4B     		ldr	r3, .L223+4
 3461 0044 1B68     		ldr	r3, [r3]
 3462 0046 BA68     		ldr	r2, [r7, #8]
 3463 0048 42F00042 		orr	r2, r2, #-2147483648
 3464 004c 9A61     		str	r2, [r3, #24]
2861:../../../FreeRTOS_9_0/Source/tasks.c **** 
2862:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2863:../../../FreeRTOS_9_0/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2864:../../../FreeRTOS_9_0/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2865:../../../FreeRTOS_9_0/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2866:../../../FreeRTOS_9_0/Source/tasks.c **** 	the task level). */
ARM GAS  /tmp/ccfW2k76.s 			page 116


2867:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3465              		.loc 1 2867 0
 3466 004e 084B     		ldr	r3, .L223+4
 3467 0050 1B68     		ldr	r3, [r3]
 3468 0052 1833     		adds	r3, r3, #24
 3469 0054 F868     		ldr	r0, [r7, #12]
 3470 0056 1946     		mov	r1, r3
 3471 0058 FFF7FEFF 		bl	vListInsertEnd
2868:../../../FreeRTOS_9_0/Source/tasks.c **** 
2869:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3472              		.loc 1 2869 0
 3473 005c 7868     		ldr	r0, [r7, #4]
 3474 005e 0121     		movs	r1, #1
 3475 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2870:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3476              		.loc 1 2870 0
 3477 0064 1837     		adds	r7, r7, #24
 3478              	.LCFI130:
 3479              		.cfi_def_cfa_offset 8
 3480 0066 BD46     		mov	sp, r7
 3481              	.LCFI131:
 3482              		.cfi_def_cfa_register 13
 3483              		@ sp needed
 3484 0068 80BD     		pop	{r7, pc}
 3485              	.L224:
 3486 006a 00BF     		.align	2
 3487              	.L223:
 3488 006c 00000000 		.word	uxSchedulerSuspended
 3489 0070 00000000 		.word	pxCurrentTCB
 3490              		.cfi_endproc
 3491              	.LFE30:
 3493              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3494              		.align	2
 3495              		.global	xTaskRemoveFromEventList
 3496              		.thumb
 3497              		.thumb_func
 3499              	xTaskRemoveFromEventList:
 3500              	.LFB31:
2871:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2872:../../../FreeRTOS_9_0/Source/tasks.c **** 
2873:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2874:../../../FreeRTOS_9_0/Source/tasks.c **** 
2875:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2876:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2877:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( pxEventList );
2878:../../../FreeRTOS_9_0/Source/tasks.c **** 
2879:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This function should not be called by application code hence the
2880:../../../FreeRTOS_9_0/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2881:../../../FreeRTOS_9_0/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2882:../../../FreeRTOS_9_0/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2883:../../../FreeRTOS_9_0/Source/tasks.c **** 
2884:../../../FreeRTOS_9_0/Source/tasks.c **** 
2885:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2886:../../../FreeRTOS_9_0/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2887:../../../FreeRTOS_9_0/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2888:../../../FreeRTOS_9_0/Source/tasks.c **** 		can be used in place of vListInsert. */
2889:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
ARM GAS  /tmp/ccfW2k76.s 			page 117


2890:../../../FreeRTOS_9_0/Source/tasks.c **** 
2891:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2892:../../../FreeRTOS_9_0/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2893:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2894:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2895:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
2896:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2897:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
2898:../../../FreeRTOS_9_0/Source/tasks.c **** 
2899:../../../FreeRTOS_9_0/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2900:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2901:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2902:../../../FreeRTOS_9_0/Source/tasks.c **** 
2903:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TIMERS */
2904:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2905:../../../FreeRTOS_9_0/Source/tasks.c **** 
2906:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2907:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3501              		.loc 1 2907 0
 3502              		.cfi_startproc
 3503              		@ args = 0, pretend = 0, frame = 24
 3504              		@ frame_needed = 1, uses_anonymous_args = 0
 3505 0000 80B5     		push	{r7, lr}
 3506              	.LCFI132:
 3507              		.cfi_def_cfa_offset 8
 3508              		.cfi_offset 7, -8
 3509              		.cfi_offset 14, -4
 3510 0002 86B0     		sub	sp, sp, #24
 3511              	.LCFI133:
 3512              		.cfi_def_cfa_offset 32
 3513 0004 00AF     		add	r7, sp, #0
 3514              	.LCFI134:
 3515              		.cfi_def_cfa_register 7
 3516 0006 7860     		str	r0, [r7, #4]
2908:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2909:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
2910:../../../FreeRTOS_9_0/Source/tasks.c **** 
2911:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2912:../../../FreeRTOS_9_0/Source/tasks.c **** 	called from a critical section within an ISR. */
2913:../../../FreeRTOS_9_0/Source/tasks.c **** 
2914:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2915:../../../FreeRTOS_9_0/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2916:../../../FreeRTOS_9_0/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2917:../../../FreeRTOS_9_0/Source/tasks.c **** 
2918:../../../FreeRTOS_9_0/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2919:../../../FreeRTOS_9_0/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2920:../../../FreeRTOS_9_0/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2921:../../../FreeRTOS_9_0/Source/tasks.c **** 
2922:../../../FreeRTOS_9_0/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2923:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxEventList is not empty. */
2924:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3517              		.loc 1 2924 0
 3518 0008 7B68     		ldr	r3, [r7, #4]
 3519 000a DB68     		ldr	r3, [r3, #12]
 3520 000c DB68     		ldr	r3, [r3, #12]
 3521 000e 3B61     		str	r3, [r7, #16]
2925:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  /tmp/ccfW2k76.s 			page 118


 3522              		.loc 1 2925 0
 3523 0010 3B69     		ldr	r3, [r7, #16]
 3524 0012 002B     		cmp	r3, #0
 3525 0014 09D1     		bne	.L226
 3526              	.LBB146:
 3527              	.LBB147:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3528              		.loc 2 237 0 discriminator 1
 3529              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3530 0016 4FF05003 			mov r3, #80												
 3531 001a 83F31188 		msr basepri, r3											
 3532 001e BFF36F8F 		isb														
 3533 0022 BFF34F8F 		dsb														
 3534              	
 3535              	@ 0 "" 2
 3536              		.thumb
 3537 0026 FB60     		str	r3, [r7, #12]
 3538              	.L227:
 3539              	.LBE147:
 3540              	.LBE146:
 3541              		.loc 1 2925 0 discriminator 1
 3542 0028 FEE7     		b	.L227
 3543              	.L226:
2926:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3544              		.loc 1 2926 0
 3545 002a 3B69     		ldr	r3, [r7, #16]
 3546 002c 1833     		adds	r3, r3, #24
 3547 002e 1846     		mov	r0, r3
 3548 0030 FFF7FEFF 		bl	uxListRemove
2927:../../../FreeRTOS_9_0/Source/tasks.c **** 
2928:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3549              		.loc 1 2928 0
 3550 0034 1E4B     		ldr	r3, .L233
 3551 0036 1B68     		ldr	r3, [r3]
 3552 0038 002B     		cmp	r3, #0
 3553 003a 1ED1     		bne	.L228
2929:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2930:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3554              		.loc 1 2930 0
 3555 003c 3B69     		ldr	r3, [r7, #16]
 3556 003e 0433     		adds	r3, r3, #4
 3557 0040 1846     		mov	r0, r3
 3558 0042 FFF7FEFF 		bl	uxListRemove
2931:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3559              		.loc 1 2931 0
 3560 0046 3B69     		ldr	r3, [r7, #16]
 3561 0048 DB6A     		ldr	r3, [r3, #44]
 3562 004a 1A46     		mov	r2, r3
 3563 004c 0123     		movs	r3, #1
 3564 004e 03FA02F2 		lsl	r2, r3, r2
 3565 0052 184B     		ldr	r3, .L233+4
 3566 0054 1B68     		ldr	r3, [r3]
 3567 0056 1343     		orrs	r3, r3, r2
 3568 0058 164A     		ldr	r2, .L233+4
 3569 005a 1360     		str	r3, [r2]
 3570 005c 3B69     		ldr	r3, [r7, #16]
 3571 005e DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccfW2k76.s 			page 119


 3572 0060 1346     		mov	r3, r2
 3573 0062 9B00     		lsls	r3, r3, #2
 3574 0064 1344     		add	r3, r3, r2
 3575 0066 9B00     		lsls	r3, r3, #2
 3576 0068 134A     		ldr	r2, .L233+8
 3577 006a 1A44     		add	r2, r2, r3
 3578 006c 3B69     		ldr	r3, [r7, #16]
 3579 006e 0433     		adds	r3, r3, #4
 3580 0070 1046     		mov	r0, r2
 3581 0072 1946     		mov	r1, r3
 3582 0074 FFF7FEFF 		bl	vListInsertEnd
 3583 0078 05E0     		b	.L229
 3584              	.L228:
2932:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2933:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
2934:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2935:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2936:../../../FreeRTOS_9_0/Source/tasks.c **** 		pending until the scheduler is resumed. */
2937:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3585              		.loc 1 2937 0
 3586 007a 3B69     		ldr	r3, [r7, #16]
 3587 007c 1833     		adds	r3, r3, #24
 3588 007e 0F48     		ldr	r0, .L233+12
 3589 0080 1946     		mov	r1, r3
 3590 0082 FFF7FEFF 		bl	vListInsertEnd
 3591              	.L229:
2938:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2939:../../../FreeRTOS_9_0/Source/tasks.c **** 
2940:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3592              		.loc 1 2940 0
 3593 0086 3B69     		ldr	r3, [r7, #16]
 3594 0088 DA6A     		ldr	r2, [r3, #44]
 3595 008a 0D4B     		ldr	r3, .L233+16
 3596 008c 1B68     		ldr	r3, [r3]
 3597 008e DB6A     		ldr	r3, [r3, #44]
 3598 0090 9A42     		cmp	r2, r3
 3599 0092 05D9     		bls	.L230
2941:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2942:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2943:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2944:../../../FreeRTOS_9_0/Source/tasks.c **** 		it should force a context switch now. */
2945:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdTRUE;
 3600              		.loc 1 2945 0
 3601 0094 0123     		movs	r3, #1
 3602 0096 7B61     		str	r3, [r7, #20]
2946:../../../FreeRTOS_9_0/Source/tasks.c **** 
2947:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2948:../../../FreeRTOS_9_0/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2949:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3603              		.loc 1 2949 0
 3604 0098 0A4B     		ldr	r3, .L233+20
 3605 009a 0122     		movs	r2, #1
 3606 009c 1A60     		str	r2, [r3]
 3607 009e 01E0     		b	.L231
 3608              	.L230:
2950:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2951:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
ARM GAS  /tmp/ccfW2k76.s 			page 120


2952:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2953:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdFALSE;
 3609              		.loc 1 2953 0
 3610 00a0 0023     		movs	r3, #0
 3611 00a2 7B61     		str	r3, [r7, #20]
 3612              	.L231:
2954:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2955:../../../FreeRTOS_9_0/Source/tasks.c **** 
2956:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2957:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
2958:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2959:../../../FreeRTOS_9_0/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2960:../../../FreeRTOS_9_0/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2961:../../../FreeRTOS_9_0/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2962:../../../FreeRTOS_9_0/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2963:../../../FreeRTOS_9_0/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2964:../../../FreeRTOS_9_0/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2965:../../../FreeRTOS_9_0/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2966:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2967:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
2968:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
2969:../../../FreeRTOS_9_0/Source/tasks.c **** 
2970:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 3613              		.loc 1 2970 0
 3614 00a4 7B69     		ldr	r3, [r7, #20]
2971:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3615              		.loc 1 2971 0
 3616 00a6 1846     		mov	r0, r3
 3617 00a8 1837     		adds	r7, r7, #24
 3618              	.LCFI135:
 3619              		.cfi_def_cfa_offset 8
 3620 00aa BD46     		mov	sp, r7
 3621              	.LCFI136:
 3622              		.cfi_def_cfa_register 13
 3623              		@ sp needed
 3624 00ac 80BD     		pop	{r7, pc}
 3625              	.L234:
 3626 00ae 00BF     		.align	2
 3627              	.L233:
 3628 00b0 00000000 		.word	uxSchedulerSuspended
 3629 00b4 00000000 		.word	uxTopReadyPriority
 3630 00b8 00000000 		.word	pxReadyTasksLists
 3631 00bc 00000000 		.word	xPendingReadyList
 3632 00c0 00000000 		.word	pxCurrentTCB
 3633 00c4 00000000 		.word	xYieldPending
 3634              		.cfi_endproc
 3635              	.LFE31:
 3637              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3638              		.align	2
 3639              		.global	xTaskRemoveFromUnorderedEventList
 3640              		.thumb
 3641              		.thumb_func
 3643              	xTaskRemoveFromUnorderedEventList:
 3644              	.LFB32:
2972:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
2973:../../../FreeRTOS_9_0/Source/tasks.c **** 
2974:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
ARM GAS  /tmp/ccfW2k76.s 			page 121


2975:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3645              		.loc 1 2975 0
 3646              		.cfi_startproc
 3647              		@ args = 0, pretend = 0, frame = 24
 3648              		@ frame_needed = 1, uses_anonymous_args = 0
 3649 0000 80B5     		push	{r7, lr}
 3650              	.LCFI137:
 3651              		.cfi_def_cfa_offset 8
 3652              		.cfi_offset 7, -8
 3653              		.cfi_offset 14, -4
 3654 0002 86B0     		sub	sp, sp, #24
 3655              	.LCFI138:
 3656              		.cfi_def_cfa_offset 32
 3657 0004 00AF     		add	r7, sp, #0
 3658              	.LCFI139:
 3659              		.cfi_def_cfa_register 7
 3660 0006 7860     		str	r0, [r7, #4]
 3661 0008 3960     		str	r1, [r7]
2976:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2977:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
2978:../../../FreeRTOS_9_0/Source/tasks.c **** 
2979:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2980:../../../FreeRTOS_9_0/Source/tasks.c **** 	the event flags implementation. */
2981:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3662              		.loc 1 2981 0
 3663 000a 2C4B     		ldr	r3, .L243
 3664 000c 1B68     		ldr	r3, [r3]
 3665 000e 002B     		cmp	r3, #0
 3666 0010 09D1     		bne	.L236
 3667              	.LBB148:
 3668              	.LBB149:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3669              		.loc 2 237 0 discriminator 1
 3670              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3671 0012 4FF05003 			mov r3, #80												
 3672 0016 83F31188 		msr basepri, r3											
 3673 001a BFF36F8F 		isb														
 3674 001e BFF34F8F 		dsb														
 3675              	
 3676              	@ 0 "" 2
 3677              		.thumb
 3678 0022 FB60     		str	r3, [r7, #12]
 3679              	.L237:
 3680              	.LBE149:
 3681              	.LBE148:
 3682              		.loc 1 2981 0 discriminator 1
 3683 0024 FEE7     		b	.L237
 3684              	.L236:
2982:../../../FreeRTOS_9_0/Source/tasks.c **** 
2983:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Store the new item value in the event list. */
2984:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3685              		.loc 1 2984 0
 3686 0026 3B68     		ldr	r3, [r7]
 3687 0028 43F00042 		orr	r2, r3, #-2147483648
 3688 002c 7B68     		ldr	r3, [r7, #4]
 3689 002e 1A60     		str	r2, [r3]
2985:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 122


2986:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2987:../../../FreeRTOS_9_0/Source/tasks.c **** 	event flags. */
2988:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3690              		.loc 1 2988 0
 3691 0030 7B68     		ldr	r3, [r7, #4]
 3692 0032 DB68     		ldr	r3, [r3, #12]
 3693 0034 3B61     		str	r3, [r7, #16]
2989:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3694              		.loc 1 2989 0
 3695 0036 3B69     		ldr	r3, [r7, #16]
 3696 0038 002B     		cmp	r3, #0
 3697 003a 09D1     		bne	.L238
 3698              	.LBB150:
 3699              	.LBB151:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3700              		.loc 2 237 0 discriminator 1
 3701              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3702 003c 4FF05003 			mov r3, #80												
 3703 0040 83F31188 		msr basepri, r3											
 3704 0044 BFF36F8F 		isb														
 3705 0048 BFF34F8F 		dsb														
 3706              	
 3707              	@ 0 "" 2
 3708              		.thumb
 3709 004c BB60     		str	r3, [r7, #8]
 3710              	.L239:
 3711              	.LBE151:
 3712              	.LBE150:
 3713              		.loc 1 2989 0 discriminator 2
 3714 004e FEE7     		b	.L239
 3715              	.L238:
2990:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3716              		.loc 1 2990 0
 3717 0050 7868     		ldr	r0, [r7, #4]
 3718 0052 FFF7FEFF 		bl	uxListRemove
2991:../../../FreeRTOS_9_0/Source/tasks.c **** 
2992:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2993:../../../FreeRTOS_9_0/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2994:../../../FreeRTOS_9_0/Source/tasks.c **** 	lists. */
2995:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3719              		.loc 1 2995 0
 3720 0056 3B69     		ldr	r3, [r7, #16]
 3721 0058 0433     		adds	r3, r3, #4
 3722 005a 1846     		mov	r0, r3
 3723 005c FFF7FEFF 		bl	uxListRemove
2996:../../../FreeRTOS_9_0/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3724              		.loc 1 2996 0
 3725 0060 3B69     		ldr	r3, [r7, #16]
 3726 0062 DB6A     		ldr	r3, [r3, #44]
 3727 0064 1A46     		mov	r2, r3
 3728 0066 0123     		movs	r3, #1
 3729 0068 03FA02F2 		lsl	r2, r3, r2
 3730 006c 144B     		ldr	r3, .L243+4
 3731 006e 1B68     		ldr	r3, [r3]
 3732 0070 1343     		orrs	r3, r3, r2
 3733 0072 134A     		ldr	r2, .L243+4
 3734 0074 1360     		str	r3, [r2]
ARM GAS  /tmp/ccfW2k76.s 			page 123


 3735 0076 3B69     		ldr	r3, [r7, #16]
 3736 0078 DA6A     		ldr	r2, [r3, #44]
 3737 007a 1346     		mov	r3, r2
 3738 007c 9B00     		lsls	r3, r3, #2
 3739 007e 1344     		add	r3, r3, r2
 3740 0080 9B00     		lsls	r3, r3, #2
 3741 0082 104A     		ldr	r2, .L243+8
 3742 0084 1A44     		add	r2, r2, r3
 3743 0086 3B69     		ldr	r3, [r7, #16]
 3744 0088 0433     		adds	r3, r3, #4
 3745 008a 1046     		mov	r0, r2
 3746 008c 1946     		mov	r1, r3
 3747 008e FFF7FEFF 		bl	vListInsertEnd
2997:../../../FreeRTOS_9_0/Source/tasks.c **** 
2998:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3748              		.loc 1 2998 0
 3749 0092 3B69     		ldr	r3, [r7, #16]
 3750 0094 DA6A     		ldr	r2, [r3, #44]
 3751 0096 0C4B     		ldr	r3, .L243+12
 3752 0098 1B68     		ldr	r3, [r3]
 3753 009a DB6A     		ldr	r3, [r3, #44]
 3754 009c 9A42     		cmp	r2, r3
 3755 009e 05D9     		bls	.L240
2999:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3000:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return true if the task removed from the event list has
3001:../../../FreeRTOS_9_0/Source/tasks.c **** 		a higher priority than the calling task.  This allows
3002:../../../FreeRTOS_9_0/Source/tasks.c **** 		the calling task to know if it should force a context
3003:../../../FreeRTOS_9_0/Source/tasks.c **** 		switch now. */
3004:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdTRUE;
 3756              		.loc 1 3004 0
 3757 00a0 0123     		movs	r3, #1
 3758 00a2 7B61     		str	r3, [r7, #20]
3005:../../../FreeRTOS_9_0/Source/tasks.c **** 
3006:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3007:../../../FreeRTOS_9_0/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3008:../../../FreeRTOS_9_0/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3759              		.loc 1 3008 0
 3760 00a4 094B     		ldr	r3, .L243+16
 3761 00a6 0122     		movs	r2, #1
 3762 00a8 1A60     		str	r2, [r3]
 3763 00aa 01E0     		b	.L241
 3764              	.L240:
3009:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3010:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
3011:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3012:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pdFALSE;
 3765              		.loc 1 3012 0
 3766 00ac 0023     		movs	r3, #0
 3767 00ae 7B61     		str	r3, [r7, #20]
 3768              	.L241:
3013:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3014:../../../FreeRTOS_9_0/Source/tasks.c **** 
3015:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 3769              		.loc 1 3015 0
 3770 00b0 7B69     		ldr	r3, [r7, #20]
3016:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3771              		.loc 1 3016 0
ARM GAS  /tmp/ccfW2k76.s 			page 124


 3772 00b2 1846     		mov	r0, r3
 3773 00b4 1837     		adds	r7, r7, #24
 3774              	.LCFI140:
 3775              		.cfi_def_cfa_offset 8
 3776 00b6 BD46     		mov	sp, r7
 3777              	.LCFI141:
 3778              		.cfi_def_cfa_register 13
 3779              		@ sp needed
 3780 00b8 80BD     		pop	{r7, pc}
 3781              	.L244:
 3782 00ba 00BF     		.align	2
 3783              	.L243:
 3784 00bc 00000000 		.word	uxSchedulerSuspended
 3785 00c0 00000000 		.word	uxTopReadyPriority
 3786 00c4 00000000 		.word	pxReadyTasksLists
 3787 00c8 00000000 		.word	pxCurrentTCB
 3788 00cc 00000000 		.word	xYieldPending
 3789              		.cfi_endproc
 3790              	.LFE32:
 3792              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3793              		.align	2
 3794              		.global	vTaskSetTimeOutState
 3795              		.thumb
 3796              		.thumb_func
 3798              	vTaskSetTimeOutState:
 3799              	.LFB33:
3017:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3018:../../../FreeRTOS_9_0/Source/tasks.c **** 
3019:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3020:../../../FreeRTOS_9_0/Source/tasks.c **** {
 3800              		.loc 1 3020 0
 3801              		.cfi_startproc
 3802              		@ args = 0, pretend = 0, frame = 16
 3803              		@ frame_needed = 1, uses_anonymous_args = 0
 3804              		@ link register save eliminated.
 3805 0000 80B4     		push	{r7}
 3806              	.LCFI142:
 3807              		.cfi_def_cfa_offset 4
 3808              		.cfi_offset 7, -4
 3809 0002 85B0     		sub	sp, sp, #20
 3810              	.LCFI143:
 3811              		.cfi_def_cfa_offset 24
 3812 0004 00AF     		add	r7, sp, #0
 3813              	.LCFI144:
 3814              		.cfi_def_cfa_register 7
 3815 0006 7860     		str	r0, [r7, #4]
3021:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3816              		.loc 1 3021 0
 3817 0008 7B68     		ldr	r3, [r7, #4]
 3818 000a 002B     		cmp	r3, #0
 3819 000c 09D1     		bne	.L246
 3820              	.LBB152:
 3821              	.LBB153:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3822              		.loc 2 237 0 discriminator 1
 3823              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3824 000e 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccfW2k76.s 			page 125


 3825 0012 83F31188 		msr basepri, r3											
 3826 0016 BFF36F8F 		isb														
 3827 001a BFF34F8F 		dsb														
 3828              	
 3829              	@ 0 "" 2
 3830              		.thumb
 3831 001e FB60     		str	r3, [r7, #12]
 3832              	.L247:
 3833              	.LBE153:
 3834              	.LBE152:
 3835              		.loc 1 3021 0 discriminator 1
 3836 0020 FEE7     		b	.L247
 3837              	.L246:
3022:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3838              		.loc 1 3022 0
 3839 0022 064B     		ldr	r3, .L248
 3840 0024 1A68     		ldr	r2, [r3]
 3841 0026 7B68     		ldr	r3, [r7, #4]
 3842 0028 1A60     		str	r2, [r3]
3023:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3843              		.loc 1 3023 0
 3844 002a 054B     		ldr	r3, .L248+4
 3845 002c 1A68     		ldr	r2, [r3]
 3846 002e 7B68     		ldr	r3, [r7, #4]
 3847 0030 5A60     		str	r2, [r3, #4]
3024:../../../FreeRTOS_9_0/Source/tasks.c **** }
 3848              		.loc 1 3024 0
 3849 0032 1437     		adds	r7, r7, #20
 3850              	.LCFI145:
 3851              		.cfi_def_cfa_offset 4
 3852 0034 BD46     		mov	sp, r7
 3853              	.LCFI146:
 3854              		.cfi_def_cfa_register 13
 3855              		@ sp needed
 3856 0036 5DF8047B 		ldr	r7, [sp], #4
 3857              	.LCFI147:
 3858              		.cfi_restore 7
 3859              		.cfi_def_cfa_offset 0
 3860 003a 7047     		bx	lr
 3861              	.L249:
 3862              		.align	2
 3863              	.L248:
 3864 003c 00000000 		.word	xNumOfOverflows
 3865 0040 00000000 		.word	xTickCount
 3866              		.cfi_endproc
 3867              	.LFE33:
 3869              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3870              		.align	2
 3871              		.global	xTaskCheckForTimeOut
 3872              		.thumb
 3873              		.thumb_func
 3875              	xTaskCheckForTimeOut:
 3876              	.LFB34:
3025:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3026:../../../FreeRTOS_9_0/Source/tasks.c **** 
3027:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3028:../../../FreeRTOS_9_0/Source/tasks.c **** {
ARM GAS  /tmp/ccfW2k76.s 			page 126


 3877              		.loc 1 3028 0
 3878              		.cfi_startproc
 3879              		@ args = 0, pretend = 0, frame = 24
 3880              		@ frame_needed = 1, uses_anonymous_args = 0
 3881 0000 80B5     		push	{r7, lr}
 3882              	.LCFI148:
 3883              		.cfi_def_cfa_offset 8
 3884              		.cfi_offset 7, -8
 3885              		.cfi_offset 14, -4
 3886 0002 86B0     		sub	sp, sp, #24
 3887              	.LCFI149:
 3888              		.cfi_def_cfa_offset 32
 3889 0004 00AF     		add	r7, sp, #0
 3890              	.LCFI150:
 3891              		.cfi_def_cfa_register 7
 3892 0006 7860     		str	r0, [r7, #4]
 3893 0008 3960     		str	r1, [r7]
3029:../../../FreeRTOS_9_0/Source/tasks.c **** BaseType_t xReturn;
3030:../../../FreeRTOS_9_0/Source/tasks.c **** 
3031:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3894              		.loc 1 3031 0
 3895 000a 7B68     		ldr	r3, [r7, #4]
 3896 000c 002B     		cmp	r3, #0
 3897 000e 09D1     		bne	.L251
 3898              	.LBB154:
 3899              	.LBB155:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3900              		.loc 2 237 0 discriminator 1
 3901              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3902 0010 4FF05003 			mov r3, #80												
 3903 0014 83F31188 		msr basepri, r3											
 3904 0018 BFF36F8F 		isb														
 3905 001c BFF34F8F 		dsb														
 3906              	
 3907              	@ 0 "" 2
 3908              		.thumb
 3909 0020 FB60     		str	r3, [r7, #12]
 3910              	.L252:
 3911              	.LBE155:
 3912              	.LBE154:
 3913              		.loc 1 3031 0 discriminator 1
 3914 0022 FEE7     		b	.L252
 3915              	.L251:
3032:../../../FreeRTOS_9_0/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3916              		.loc 1 3032 0
 3917 0024 3B68     		ldr	r3, [r7]
 3918 0026 002B     		cmp	r3, #0
 3919 0028 09D1     		bne	.L253
 3920              	.LBB156:
 3921              	.LBB157:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3922              		.loc 2 237 0 discriminator 1
 3923              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3924 002a 4FF05003 			mov r3, #80												
 3925 002e 83F31188 		msr basepri, r3											
 3926 0032 BFF36F8F 		isb														
 3927 0036 BFF34F8F 		dsb														
ARM GAS  /tmp/ccfW2k76.s 			page 127


 3928              	
 3929              	@ 0 "" 2
 3930              		.thumb
 3931 003a BB60     		str	r3, [r7, #8]
 3932              	.L254:
 3933              	.LBE157:
 3934              	.LBE156:
 3935              		.loc 1 3032 0 discriminator 2
 3936 003c FEE7     		b	.L254
 3937              	.L253:
3033:../../../FreeRTOS_9_0/Source/tasks.c **** 
3034:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskENTER_CRITICAL();
 3938              		.loc 1 3034 0
 3939 003e FFF7FEFF 		bl	vPortEnterCritical
 3940              	.LBB158:
3035:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3036:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3037:../../../FreeRTOS_9_0/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3941              		.loc 1 3037 0
 3942 0042 1C4B     		ldr	r3, .L260
 3943 0044 1B68     		ldr	r3, [r3]
 3944 0046 3B61     		str	r3, [r7, #16]
3038:../../../FreeRTOS_9_0/Source/tasks.c **** 
3039:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3040:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3041:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3042:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3043:../../../FreeRTOS_9_0/Source/tasks.c **** 				but has the same result. */
3044:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3045:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdTRUE;
3046:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3047:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3048:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3049:../../../FreeRTOS_9_0/Source/tasks.c **** 
3050:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3051:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3945              		.loc 1 3051 0
 3946 0048 3B68     		ldr	r3, [r7]
 3947 004a 1B68     		ldr	r3, [r3]
 3948 004c B3F1FF3F 		cmp	r3, #-1
 3949 0050 02D1     		bne	.L255
3052:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3053:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3054:../../../FreeRTOS_9_0/Source/tasks.c **** 				specified is the maximum block time then the task should block
3055:../../../FreeRTOS_9_0/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3056:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFALSE;
 3950              		.loc 1 3056 0
 3951 0052 0023     		movs	r3, #0
 3952 0054 7B61     		str	r3, [r7, #20]
 3953 0056 26E0     		b	.L256
 3954              	.L255:
3057:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3058:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3059:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3060:../../../FreeRTOS_9_0/Source/tasks.c **** 
3061:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3955              		.loc 1 3061 0
ARM GAS  /tmp/ccfW2k76.s 			page 128


 3956 0058 7B68     		ldr	r3, [r7, #4]
 3957 005a 1A68     		ldr	r2, [r3]
 3958 005c 164B     		ldr	r3, .L260+4
 3959 005e 1B68     		ldr	r3, [r3]
 3960 0060 9A42     		cmp	r2, r3
 3961 0062 07D0     		beq	.L257
 3962              		.loc 1 3061 0 is_stmt 0 discriminator 1
 3963 0064 7B68     		ldr	r3, [r7, #4]
 3964 0066 5A68     		ldr	r2, [r3, #4]
 3965 0068 3B69     		ldr	r3, [r7, #16]
 3966 006a 9A42     		cmp	r2, r3
 3967 006c 02D8     		bhi	.L257
3062:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3063:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The tick count is greater than the time at which
3064:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3065:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3066:../../../FreeRTOS_9_0/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3067:../../../FreeRTOS_9_0/Source/tasks.c **** 			was called. */
3068:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdTRUE;
 3968              		.loc 1 3068 0 is_stmt 1
 3969 006e 0123     		movs	r3, #1
 3970 0070 7B61     		str	r3, [r7, #20]
 3971 0072 18E0     		b	.L256
 3972              	.L257:
3069:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3070:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 3973              		.loc 1 3070 0
 3974 0074 7B68     		ldr	r3, [r7, #4]
 3975 0076 5B68     		ldr	r3, [r3, #4]
 3976 0078 3A69     		ldr	r2, [r7, #16]
 3977 007a D21A     		subs	r2, r2, r3
 3978 007c 3B68     		ldr	r3, [r7]
 3979 007e 1B68     		ldr	r3, [r3]
 3980 0080 9A42     		cmp	r2, r3
 3981 0082 0ED2     		bcs	.L258
3071:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3072:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3073:../../../FreeRTOS_9_0/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 3982              		.loc 1 3073 0
 3983 0084 3B68     		ldr	r3, [r7]
 3984 0086 1A68     		ldr	r2, [r3]
 3985 0088 7B68     		ldr	r3, [r7, #4]
 3986 008a 5968     		ldr	r1, [r3, #4]
 3987 008c 3B69     		ldr	r3, [r7, #16]
 3988 008e CB1A     		subs	r3, r1, r3
 3989 0090 1A44     		add	r2, r2, r3
 3990 0092 3B68     		ldr	r3, [r7]
 3991 0094 1A60     		str	r2, [r3]
3074:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3992              		.loc 1 3074 0
 3993 0096 7868     		ldr	r0, [r7, #4]
 3994 0098 FFF7FEFF 		bl	vTaskSetTimeOutState
3075:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdFALSE;
 3995              		.loc 1 3075 0
 3996 009c 0023     		movs	r3, #0
 3997 009e 7B61     		str	r3, [r7, #20]
 3998 00a0 01E0     		b	.L256
ARM GAS  /tmp/ccfW2k76.s 			page 129


 3999              	.L258:
3076:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3077:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3078:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3079:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = pdTRUE;
 4000              		.loc 1 3079 0
 4001 00a2 0123     		movs	r3, #1
 4002 00a4 7B61     		str	r3, [r7, #20]
 4003              	.L256:
 4004              	.LBE158:
3080:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3081:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3082:../../../FreeRTOS_9_0/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4005              		.loc 1 3082 0
 4006 00a6 FFF7FEFF 		bl	vPortExitCritical
3083:../../../FreeRTOS_9_0/Source/tasks.c **** 
3084:../../../FreeRTOS_9_0/Source/tasks.c **** 	return xReturn;
 4007              		.loc 1 3084 0
 4008 00aa 7B69     		ldr	r3, [r7, #20]
3085:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4009              		.loc 1 3085 0
 4010 00ac 1846     		mov	r0, r3
 4011 00ae 1837     		adds	r7, r7, #24
 4012              	.LCFI151:
 4013              		.cfi_def_cfa_offset 8
 4014 00b0 BD46     		mov	sp, r7
 4015              	.LCFI152:
 4016              		.cfi_def_cfa_register 13
 4017              		@ sp needed
 4018 00b2 80BD     		pop	{r7, pc}
 4019              	.L261:
 4020              		.align	2
 4021              	.L260:
 4022 00b4 00000000 		.word	xTickCount
 4023 00b8 00000000 		.word	xNumOfOverflows
 4024              		.cfi_endproc
 4025              	.LFE34:
 4027              		.section	.text.vTaskMissedYield,"ax",%progbits
 4028              		.align	2
 4029              		.global	vTaskMissedYield
 4030              		.thumb
 4031              		.thumb_func
 4033              	vTaskMissedYield:
 4034              	.LFB35:
3086:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3087:../../../FreeRTOS_9_0/Source/tasks.c **** 
3088:../../../FreeRTOS_9_0/Source/tasks.c **** void vTaskMissedYield( void )
3089:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4035              		.loc 1 3089 0
 4036              		.cfi_startproc
 4037              		@ args = 0, pretend = 0, frame = 0
 4038              		@ frame_needed = 1, uses_anonymous_args = 0
 4039              		@ link register save eliminated.
 4040 0000 80B4     		push	{r7}
 4041              	.LCFI153:
 4042              		.cfi_def_cfa_offset 4
 4043              		.cfi_offset 7, -4
ARM GAS  /tmp/ccfW2k76.s 			page 130


 4044 0002 00AF     		add	r7, sp, #0
 4045              	.LCFI154:
 4046              		.cfi_def_cfa_register 7
3090:../../../FreeRTOS_9_0/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4047              		.loc 1 3090 0
 4048 0004 034B     		ldr	r3, .L263
 4049 0006 0122     		movs	r2, #1
 4050 0008 1A60     		str	r2, [r3]
3091:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4051              		.loc 1 3091 0
 4052 000a BD46     		mov	sp, r7
 4053              	.LCFI155:
 4054              		.cfi_def_cfa_register 13
 4055              		@ sp needed
 4056 000c 5DF8047B 		ldr	r7, [sp], #4
 4057              	.LCFI156:
 4058              		.cfi_restore 7
 4059              		.cfi_def_cfa_offset 0
 4060 0010 7047     		bx	lr
 4061              	.L264:
 4062 0012 00BF     		.align	2
 4063              	.L263:
 4064 0014 00000000 		.word	xYieldPending
 4065              		.cfi_endproc
 4066              	.LFE35:
 4068              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4069              		.align	2
 4070              		.global	uxTaskGetTaskNumber
 4071              		.thumb
 4072              		.thumb_func
 4074              	uxTaskGetTaskNumber:
 4075              	.LFB36:
3092:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:../../../FreeRTOS_9_0/Source/tasks.c **** 
3094:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3095:../../../FreeRTOS_9_0/Source/tasks.c **** 
3096:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3097:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4076              		.loc 1 3097 0
 4077              		.cfi_startproc
 4078              		@ args = 0, pretend = 0, frame = 16
 4079              		@ frame_needed = 1, uses_anonymous_args = 0
 4080              		@ link register save eliminated.
 4081 0000 80B4     		push	{r7}
 4082              	.LCFI157:
 4083              		.cfi_def_cfa_offset 4
 4084              		.cfi_offset 7, -4
 4085 0002 85B0     		sub	sp, sp, #20
 4086              	.LCFI158:
 4087              		.cfi_def_cfa_offset 24
 4088 0004 00AF     		add	r7, sp, #0
 4089              	.LCFI159:
 4090              		.cfi_def_cfa_register 7
 4091 0006 7860     		str	r0, [r7, #4]
3098:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
3099:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3100:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 131


3101:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask != NULL )
 4092              		.loc 1 3101 0
 4093 0008 7B68     		ldr	r3, [r7, #4]
 4094 000a 002B     		cmp	r3, #0
 4095 000c 05D0     		beq	.L266
3102:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3103:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4096              		.loc 1 3103 0
 4097 000e 7B68     		ldr	r3, [r7, #4]
 4098 0010 BB60     		str	r3, [r7, #8]
3104:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4099              		.loc 1 3104 0
 4100 0012 BB68     		ldr	r3, [r7, #8]
 4101 0014 9B6C     		ldr	r3, [r3, #72]
 4102 0016 FB60     		str	r3, [r7, #12]
 4103 0018 01E0     		b	.L267
 4104              	.L266:
3105:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3106:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3107:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3108:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxReturn = 0U;
 4105              		.loc 1 3108 0
 4106 001a 0023     		movs	r3, #0
 4107 001c FB60     		str	r3, [r7, #12]
 4108              	.L267:
3109:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3110:../../../FreeRTOS_9_0/Source/tasks.c **** 
3111:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
 4109              		.loc 1 3111 0
 4110 001e FB68     		ldr	r3, [r7, #12]
3112:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4111              		.loc 1 3112 0
 4112 0020 1846     		mov	r0, r3
 4113 0022 1437     		adds	r7, r7, #20
 4114              	.LCFI160:
 4115              		.cfi_def_cfa_offset 4
 4116 0024 BD46     		mov	sp, r7
 4117              	.LCFI161:
 4118              		.cfi_def_cfa_register 13
 4119              		@ sp needed
 4120 0026 5DF8047B 		ldr	r7, [sp], #4
 4121              	.LCFI162:
 4122              		.cfi_restore 7
 4123              		.cfi_def_cfa_offset 0
 4124 002a 7047     		bx	lr
 4125              		.cfi_endproc
 4126              	.LFE36:
 4128              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4129              		.align	2
 4130              		.global	vTaskSetTaskNumber
 4131              		.thumb
 4132              		.thumb_func
 4134              	vTaskSetTaskNumber:
 4135              	.LFB37:
3113:../../../FreeRTOS_9_0/Source/tasks.c **** 
3114:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3115:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccfW2k76.s 			page 132


3116:../../../FreeRTOS_9_0/Source/tasks.c **** 
3117:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3118:../../../FreeRTOS_9_0/Source/tasks.c **** 
3119:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3120:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4136              		.loc 1 3120 0
 4137              		.cfi_startproc
 4138              		@ args = 0, pretend = 0, frame = 16
 4139              		@ frame_needed = 1, uses_anonymous_args = 0
 4140              		@ link register save eliminated.
 4141 0000 80B4     		push	{r7}
 4142              	.LCFI163:
 4143              		.cfi_def_cfa_offset 4
 4144              		.cfi_offset 7, -4
 4145 0002 85B0     		sub	sp, sp, #20
 4146              	.LCFI164:
 4147              		.cfi_def_cfa_offset 24
 4148 0004 00AF     		add	r7, sp, #0
 4149              	.LCFI165:
 4150              		.cfi_def_cfa_register 7
 4151 0006 7860     		str	r0, [r7, #4]
 4152 0008 3960     		str	r1, [r7]
3121:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3122:../../../FreeRTOS_9_0/Source/tasks.c **** 
3123:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTask != NULL )
 4153              		.loc 1 3123 0
 4154 000a 7B68     		ldr	r3, [r7, #4]
 4155 000c 002B     		cmp	r3, #0
 4156 000e 04D0     		beq	.L269
3124:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3125:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4157              		.loc 1 3125 0
 4158 0010 7B68     		ldr	r3, [r7, #4]
 4159 0012 FB60     		str	r3, [r7, #12]
3126:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4160              		.loc 1 3126 0
 4161 0014 FB68     		ldr	r3, [r7, #12]
 4162 0016 3A68     		ldr	r2, [r7]
 4163 0018 9A64     		str	r2, [r3, #72]
 4164              	.L269:
3127:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3128:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4165              		.loc 1 3128 0
 4166 001a 1437     		adds	r7, r7, #20
 4167              	.LCFI166:
 4168              		.cfi_def_cfa_offset 4
 4169 001c BD46     		mov	sp, r7
 4170              	.LCFI167:
 4171              		.cfi_def_cfa_register 13
 4172              		@ sp needed
 4173 001e 5DF8047B 		ldr	r7, [sp], #4
 4174              	.LCFI168:
 4175              		.cfi_restore 7
 4176              		.cfi_def_cfa_offset 0
 4177 0022 7047     		bx	lr
 4178              		.cfi_endproc
 4179              	.LFE37:
ARM GAS  /tmp/ccfW2k76.s 			page 133


 4181              		.section	.text.prvIdleTask,"ax",%progbits
 4182              		.align	2
 4183              		.thumb
 4184              		.thumb_func
 4186              	prvIdleTask:
 4187              	.LFB38:
3129:../../../FreeRTOS_9_0/Source/tasks.c **** 
3130:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3131:../../../FreeRTOS_9_0/Source/tasks.c **** 
3132:../../../FreeRTOS_9_0/Source/tasks.c **** /*
3133:../../../FreeRTOS_9_0/Source/tasks.c ****  * -----------------------------------------------------------
3134:../../../FreeRTOS_9_0/Source/tasks.c ****  * The Idle task.
3135:../../../FreeRTOS_9_0/Source/tasks.c ****  * ----------------------------------------------------------
3136:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3137:../../../FreeRTOS_9_0/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3138:../../../FreeRTOS_9_0/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3139:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3140:../../../FreeRTOS_9_0/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3141:../../../FreeRTOS_9_0/Source/tasks.c ****  *
3142:../../../FreeRTOS_9_0/Source/tasks.c ****  */
3143:../../../FreeRTOS_9_0/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3144:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4188              		.loc 1 3144 0
 4189              		.cfi_startproc
 4190              		@ args = 0, pretend = 0, frame = 8
 4191              		@ frame_needed = 1, uses_anonymous_args = 0
 4192 0000 80B5     		push	{r7, lr}
 4193              	.LCFI169:
 4194              		.cfi_def_cfa_offset 8
 4195              		.cfi_offset 7, -8
 4196              		.cfi_offset 14, -4
 4197 0002 82B0     		sub	sp, sp, #8
 4198              	.LCFI170:
 4199              		.cfi_def_cfa_offset 16
 4200 0004 00AF     		add	r7, sp, #0
 4201              	.LCFI171:
 4202              		.cfi_def_cfa_register 7
 4203 0006 7860     		str	r0, [r7, #4]
 4204              	.L273:
3145:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Stop warnings. */
3146:../../../FreeRTOS_9_0/Source/tasks.c **** 	( void ) pvParameters;
3147:../../../FreeRTOS_9_0/Source/tasks.c **** 
3148:../../../FreeRTOS_9_0/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3149:../../../FreeRTOS_9_0/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3150:../../../FreeRTOS_9_0/Source/tasks.c **** 
3151:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( ;; )
3152:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3153:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3154:../../../FreeRTOS_9_0/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3155:../../../FreeRTOS_9_0/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4205              		.loc 1 3155 0
 4206 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3156:../../../FreeRTOS_9_0/Source/tasks.c **** 
3157:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3158:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3159:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3160:../../../FreeRTOS_9_0/Source/tasks.c **** 			see if any other task has become available.  If we are using
ARM GAS  /tmp/ccfW2k76.s 			page 134


3161:../../../FreeRTOS_9_0/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3162:../../../FreeRTOS_9_0/Source/tasks.c **** 			will automatically get the processor anyway. */
3163:../../../FreeRTOS_9_0/Source/tasks.c **** 			taskYIELD();
3164:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3165:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3166:../../../FreeRTOS_9_0/Source/tasks.c **** 
3167:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3168:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3169:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3170:../../../FreeRTOS_9_0/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3171:../../../FreeRTOS_9_0/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3172:../../../FreeRTOS_9_0/Source/tasks.c **** 			timeslice.
3173:../../../FreeRTOS_9_0/Source/tasks.c **** 
3174:../../../FreeRTOS_9_0/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3175:../../../FreeRTOS_9_0/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3176:../../../FreeRTOS_9_0/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3177:../../../FreeRTOS_9_0/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3178:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4207              		.loc 1 3178 0
 4208 000c 064B     		ldr	r3, .L274
 4209 000e 1B68     		ldr	r3, [r3]
 4210 0010 012B     		cmp	r3, #1
 4211 0012 07D9     		bls	.L272
3179:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3180:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskYIELD();
 4212              		.loc 1 3180 0
 4213 0014 054B     		ldr	r3, .L274+4
 4214 0016 4FF08052 		mov	r2, #268435456
 4215 001a 1A60     		str	r2, [r3]
 4216              	@ 3180 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 4217 001c BFF34F8F 		dsb
 4218              	@ 0 "" 2
 4219              	@ 3180 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 4220 0020 BFF36F8F 		isb
 4221              	@ 0 "" 2
 4222              		.thumb
 4223              	.L272:
3181:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3182:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3183:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3184:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3185:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3186:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3187:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3188:../../../FreeRTOS_9_0/Source/tasks.c **** 
3189:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3190:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3191:../../../FreeRTOS_9_0/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3192:../../../FreeRTOS_9_0/Source/tasks.c **** 
3193:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3194:../../../FreeRTOS_9_0/Source/tasks.c **** 			allows the application designer to add background functionality
3195:../../../FreeRTOS_9_0/Source/tasks.c **** 			without the overhead of a separate task.
3196:../../../FreeRTOS_9_0/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3197:../../../FreeRTOS_9_0/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3198:../../../FreeRTOS_9_0/Source/tasks.c **** 			vApplicationIdleHook();
3199:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3200:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
ARM GAS  /tmp/ccfW2k76.s 			page 135


3201:../../../FreeRTOS_9_0/Source/tasks.c **** 
3202:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3203:../../../FreeRTOS_9_0/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3204:../../../FreeRTOS_9_0/Source/tasks.c **** 		user defined low power mode	implementations require
3205:../../../FreeRTOS_9_0/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3206:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3207:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3208:../../../FreeRTOS_9_0/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3209:../../../FreeRTOS_9_0/Source/tasks.c **** 
3210:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3211:../../../FreeRTOS_9_0/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3212:../../../FreeRTOS_9_0/Source/tasks.c **** 			test of the expected idle time is performed without the
3213:../../../FreeRTOS_9_0/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3214:../../../FreeRTOS_9_0/Source/tasks.c **** 			valid. */
3215:../../../FreeRTOS_9_0/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3216:../../../FreeRTOS_9_0/Source/tasks.c **** 
3217:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3218:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3219:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskSuspendAll();
3220:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3221:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3222:../../../FreeRTOS_9_0/Source/tasks.c **** 					time can be sampled again, and this time its value can
3223:../../../FreeRTOS_9_0/Source/tasks.c **** 					be used. */
3224:../../../FreeRTOS_9_0/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3225:../../../FreeRTOS_9_0/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3226:../../../FreeRTOS_9_0/Source/tasks.c **** 
3227:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3228:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3229:../../../FreeRTOS_9_0/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3230:../../../FreeRTOS_9_0/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3231:../../../FreeRTOS_9_0/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3232:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3233:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3234:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3235:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3236:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3237:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3238:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) xTaskResumeAll();
3239:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3240:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3241:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3242:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3243:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3244:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3245:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3246:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4224              		.loc 1 3246 0
 4225 0024 F0E7     		b	.L273
 4226              	.L275:
 4227 0026 00BF     		.align	2
 4228              	.L274:
 4229 0028 00000000 		.word	pxReadyTasksLists
 4230 002c 04ED00E0 		.word	-536810236
 4231              		.cfi_endproc
 4232              	.LFE38:
 4234              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4235              		.align	2
ARM GAS  /tmp/ccfW2k76.s 			page 136


 4236              		.thumb
 4237              		.thumb_func
 4239              	prvInitialiseTaskLists:
 4240              	.LFB39:
3247:../../../FreeRTOS_9_0/Source/tasks.c **** }
3248:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3249:../../../FreeRTOS_9_0/Source/tasks.c **** 
3250:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3251:../../../FreeRTOS_9_0/Source/tasks.c **** 
3252:../../../FreeRTOS_9_0/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3253:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3254:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3255:../../../FreeRTOS_9_0/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3256:../../../FreeRTOS_9_0/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3257:../../../FreeRTOS_9_0/Source/tasks.c **** 
3258:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3259:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3260:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3261:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eAbortSleep;
3262:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3263:../../../FreeRTOS_9_0/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3264:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3265:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3266:../../../FreeRTOS_9_0/Source/tasks.c **** 			eReturn = eAbortSleep;
3267:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3268:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3269:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3270:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3271:../../../FreeRTOS_9_0/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3272:../../../FreeRTOS_9_0/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3273:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupts. */
3274:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3275:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3276:../../../FreeRTOS_9_0/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3277:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3278:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3279:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3280:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3281:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3282:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3283:../../../FreeRTOS_9_0/Source/tasks.c **** 
3284:../../../FreeRTOS_9_0/Source/tasks.c **** 		return eReturn;
3285:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3286:../../../FreeRTOS_9_0/Source/tasks.c **** 
3287:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3288:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3289:../../../FreeRTOS_9_0/Source/tasks.c **** 
3290:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3291:../../../FreeRTOS_9_0/Source/tasks.c **** 
3292:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3293:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3294:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3295:../../../FreeRTOS_9_0/Source/tasks.c **** 
3296:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3297:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3298:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3299:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
ARM GAS  /tmp/ccfW2k76.s 			page 137


3300:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3301:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3302:../../../FreeRTOS_9_0/Source/tasks.c **** 
3303:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3304:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3305:../../../FreeRTOS_9_0/Source/tasks.c **** 
3306:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3307:../../../FreeRTOS_9_0/Source/tasks.c **** 
3308:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3309:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3310:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvReturn = NULL;
3311:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3312:../../../FreeRTOS_9_0/Source/tasks.c **** 
3313:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3314:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3315:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3316:../../../FreeRTOS_9_0/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3317:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3318:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3319:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3320:../../../FreeRTOS_9_0/Source/tasks.c **** 			pvReturn = NULL;
3321:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3322:../../../FreeRTOS_9_0/Source/tasks.c **** 
3323:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pvReturn;
3324:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3325:../../../FreeRTOS_9_0/Source/tasks.c **** 
3326:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3327:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3328:../../../FreeRTOS_9_0/Source/tasks.c **** 
3329:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3330:../../../FreeRTOS_9_0/Source/tasks.c **** 
3331:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3332:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3333:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3334:../../../FreeRTOS_9_0/Source/tasks.c **** 
3335:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3336:../../../FreeRTOS_9_0/Source/tasks.c **** 		the calling task. */
3337:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3338:../../../FreeRTOS_9_0/Source/tasks.c **** 
3339:../../../FreeRTOS_9_0/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3340:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3341:../../../FreeRTOS_9_0/Source/tasks.c **** 
3342:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3343:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3344:../../../FreeRTOS_9_0/Source/tasks.c **** 
3345:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3346:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4241              		.loc 1 3346 0
 4242              		.cfi_startproc
 4243              		@ args = 0, pretend = 0, frame = 8
 4244              		@ frame_needed = 1, uses_anonymous_args = 0
 4245 0000 80B5     		push	{r7, lr}
 4246              	.LCFI172:
 4247              		.cfi_def_cfa_offset 8
 4248              		.cfi_offset 7, -8
 4249              		.cfi_offset 14, -4
 4250 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccfW2k76.s 			page 138


 4251              	.LCFI173:
 4252              		.cfi_def_cfa_offset 16
 4253 0004 00AF     		add	r7, sp, #0
 4254              	.LCFI174:
 4255              		.cfi_def_cfa_register 7
3347:../../../FreeRTOS_9_0/Source/tasks.c **** UBaseType_t uxPriority;
3348:../../../FreeRTOS_9_0/Source/tasks.c **** 
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4256              		.loc 1 3349 0
 4257 0006 0023     		movs	r3, #0
 4258 0008 7B60     		str	r3, [r7, #4]
 4259 000a 0CE0     		b	.L277
 4260              	.L278:
3350:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3351:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4261              		.loc 1 3351 0 discriminator 3
 4262 000c 7A68     		ldr	r2, [r7, #4]
 4263 000e 1346     		mov	r3, r2
 4264 0010 9B00     		lsls	r3, r3, #2
 4265 0012 1344     		add	r3, r3, r2
 4266 0014 9B00     		lsls	r3, r3, #2
 4267 0016 114A     		ldr	r2, .L279
 4268 0018 1344     		add	r3, r3, r2
 4269 001a 1846     		mov	r0, r3
 4270 001c FFF7FEFF 		bl	vListInitialise
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4271              		.loc 1 3349 0 discriminator 3
 4272 0020 7B68     		ldr	r3, [r7, #4]
 4273 0022 0133     		adds	r3, r3, #1
 4274 0024 7B60     		str	r3, [r7, #4]
 4275              	.L277:
3349:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4276              		.loc 1 3349 0 is_stmt 0 discriminator 1
 4277 0026 7B68     		ldr	r3, [r7, #4]
 4278 0028 062B     		cmp	r3, #6
 4279 002a EFD9     		bls	.L278
3352:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3353:../../../FreeRTOS_9_0/Source/tasks.c **** 
3354:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4280              		.loc 1 3354 0 is_stmt 1
 4281 002c 0C48     		ldr	r0, .L279+4
 4282 002e FFF7FEFF 		bl	vListInitialise
3355:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4283              		.loc 1 3355 0
 4284 0032 0C48     		ldr	r0, .L279+8
 4285 0034 FFF7FEFF 		bl	vListInitialise
3356:../../../FreeRTOS_9_0/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4286              		.loc 1 3356 0
 4287 0038 0B48     		ldr	r0, .L279+12
 4288 003a FFF7FEFF 		bl	vListInitialise
3357:../../../FreeRTOS_9_0/Source/tasks.c **** 
3358:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3359:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3360:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4289              		.loc 1 3360 0
 4290 003e 0B48     		ldr	r0, .L279+16
 4291 0040 FFF7FEFF 		bl	vListInitialise
ARM GAS  /tmp/ccfW2k76.s 			page 139


3361:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3362:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3363:../../../FreeRTOS_9_0/Source/tasks.c **** 
3364:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3365:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3366:../../../FreeRTOS_9_0/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4292              		.loc 1 3366 0
 4293 0044 0A48     		ldr	r0, .L279+20
 4294 0046 FFF7FEFF 		bl	vListInitialise
3367:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3368:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3369:../../../FreeRTOS_9_0/Source/tasks.c **** 
3370:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3371:../../../FreeRTOS_9_0/Source/tasks.c **** 	using list2. */
3372:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4295              		.loc 1 3372 0
 4296 004a 0A4B     		ldr	r3, .L279+24
 4297 004c 044A     		ldr	r2, .L279+4
 4298 004e 1A60     		str	r2, [r3]
3373:../../../FreeRTOS_9_0/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4299              		.loc 1 3373 0
 4300 0050 094B     		ldr	r3, .L279+28
 4301 0052 044A     		ldr	r2, .L279+8
 4302 0054 1A60     		str	r2, [r3]
3374:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4303              		.loc 1 3374 0
 4304 0056 0837     		adds	r7, r7, #8
 4305              	.LCFI175:
 4306              		.cfi_def_cfa_offset 8
 4307 0058 BD46     		mov	sp, r7
 4308              	.LCFI176:
 4309              		.cfi_def_cfa_register 13
 4310              		@ sp needed
 4311 005a 80BD     		pop	{r7, pc}
 4312              	.L280:
 4313              		.align	2
 4314              	.L279:
 4315 005c 00000000 		.word	pxReadyTasksLists
 4316 0060 00000000 		.word	xDelayedTaskList1
 4317 0064 00000000 		.word	xDelayedTaskList2
 4318 0068 00000000 		.word	xPendingReadyList
 4319 006c 00000000 		.word	xTasksWaitingTermination
 4320 0070 00000000 		.word	xSuspendedTaskList
 4321 0074 00000000 		.word	pxDelayedTaskList
 4322 0078 00000000 		.word	pxOverflowDelayedTaskList
 4323              		.cfi_endproc
 4324              	.LFE39:
 4326              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4327              		.align	2
 4328              		.thumb
 4329              		.thumb_func
 4331              	prvCheckTasksWaitingTermination:
 4332              	.LFB40:
3375:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3376:../../../FreeRTOS_9_0/Source/tasks.c **** 
3377:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3378:../../../FreeRTOS_9_0/Source/tasks.c **** {
ARM GAS  /tmp/ccfW2k76.s 			page 140


 4333              		.loc 1 3378 0
 4334              		.cfi_startproc
 4335              		@ args = 0, pretend = 0, frame = 8
 4336              		@ frame_needed = 1, uses_anonymous_args = 0
 4337 0000 80B5     		push	{r7, lr}
 4338              	.LCFI177:
 4339              		.cfi_def_cfa_offset 8
 4340              		.cfi_offset 7, -8
 4341              		.cfi_offset 14, -4
 4342 0002 82B0     		sub	sp, sp, #8
 4343              	.LCFI178:
 4344              		.cfi_def_cfa_offset 16
 4345 0004 00AF     		add	r7, sp, #0
 4346              	.LCFI179:
 4347              		.cfi_def_cfa_register 7
 4348              	.LBB159:
3379:../../../FreeRTOS_9_0/Source/tasks.c **** 
3380:../../../FreeRTOS_9_0/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3381:../../../FreeRTOS_9_0/Source/tasks.c **** 
3382:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3383:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3384:../../../FreeRTOS_9_0/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3385:../../../FreeRTOS_9_0/Source/tasks.c **** 
3386:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3387:../../../FreeRTOS_9_0/Source/tasks.c **** 		too often in the idle task. */
3388:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4349              		.loc 1 3388 0
 4350 0006 28E0     		b	.L282
 4351              	.L283:
3389:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3390:../../../FreeRTOS_9_0/Source/tasks.c **** 			vTaskSuspendAll();
 4352              		.loc 1 3390 0
 4353 0008 FFF7FEFF 		bl	vTaskSuspendAll
3391:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3392:../../../FreeRTOS_9_0/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4354              		.loc 1 3392 0
 4355 000c 164B     		ldr	r3, .L284
 4356 000e 1B68     		ldr	r3, [r3]
 4357 0010 002B     		cmp	r3, #0
 4358 0012 0CBF     		ite	eq
 4359 0014 0123     		moveq	r3, #1
 4360 0016 0023     		movne	r3, #0
 4361 0018 DBB2     		uxtb	r3, r3
 4362 001a 7B60     		str	r3, [r7, #4]
3393:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3394:../../../FreeRTOS_9_0/Source/tasks.c **** 			( void ) xTaskResumeAll();
 4363              		.loc 1 3394 0
 4364 001c FFF7FEFF 		bl	xTaskResumeAll
3395:../../../FreeRTOS_9_0/Source/tasks.c **** 
3396:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4365              		.loc 1 3396 0
 4366 0020 7B68     		ldr	r3, [r7, #4]
 4367 0022 002B     		cmp	r3, #0
 4368 0024 19D1     		bne	.L282
 4369              	.LBB160:
3397:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3398:../../../FreeRTOS_9_0/Source/tasks.c **** 				TCB_t *pxTCB;
ARM GAS  /tmp/ccfW2k76.s 			page 141


3399:../../../FreeRTOS_9_0/Source/tasks.c **** 
3400:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskENTER_CRITICAL();
 4370              		.loc 1 3400 0
 4371 0026 FFF7FEFF 		bl	vPortEnterCritical
3401:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3402:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4372              		.loc 1 3402 0
 4373 002a 0F4B     		ldr	r3, .L284
 4374 002c DB68     		ldr	r3, [r3, #12]
 4375 002e DB68     		ldr	r3, [r3, #12]
 4376 0030 3B60     		str	r3, [r7]
3403:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4377              		.loc 1 3403 0
 4378 0032 3B68     		ldr	r3, [r7]
 4379 0034 0433     		adds	r3, r3, #4
 4380 0036 1846     		mov	r0, r3
 4381 0038 FFF7FEFF 		bl	uxListRemove
3404:../../../FreeRTOS_9_0/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4382              		.loc 1 3404 0
 4383 003c 0B4B     		ldr	r3, .L284+4
 4384 003e 1B68     		ldr	r3, [r3]
 4385 0040 013B     		subs	r3, r3, #1
 4386 0042 0A4A     		ldr	r2, .L284+4
 4387 0044 1360     		str	r3, [r2]
3405:../../../FreeRTOS_9_0/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4388              		.loc 1 3405 0
 4389 0046 0A4B     		ldr	r3, .L284+8
 4390 0048 1B68     		ldr	r3, [r3]
 4391 004a 013B     		subs	r3, r3, #1
 4392 004c 084A     		ldr	r2, .L284+8
 4393 004e 1360     		str	r3, [r2]
3406:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3407:../../../FreeRTOS_9_0/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4394              		.loc 1 3407 0
 4395 0050 FFF7FEFF 		bl	vPortExitCritical
3408:../../../FreeRTOS_9_0/Source/tasks.c **** 
3409:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4396              		.loc 1 3409 0
 4397 0054 3868     		ldr	r0, [r7]
 4398 0056 FFF7FEFF 		bl	prvDeleteTCB
 4399              	.L282:
 4400              	.LBE160:
3388:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 4401              		.loc 1 3388 0
 4402 005a 054B     		ldr	r3, .L284+8
 4403 005c 1B68     		ldr	r3, [r3]
 4404 005e 002B     		cmp	r3, #0
 4405 0060 D2D1     		bne	.L283
 4406              	.LBE159:
3410:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3411:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3412:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3413:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3414:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3415:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3416:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3417:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
ARM GAS  /tmp/ccfW2k76.s 			page 142


3418:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4407              		.loc 1 3418 0
 4408 0062 0837     		adds	r7, r7, #8
 4409              	.LCFI180:
 4410              		.cfi_def_cfa_offset 8
 4411 0064 BD46     		mov	sp, r7
 4412              	.LCFI181:
 4413              		.cfi_def_cfa_register 13
 4414              		@ sp needed
 4415 0066 80BD     		pop	{r7, pc}
 4416              	.L285:
 4417              		.align	2
 4418              	.L284:
 4419 0068 00000000 		.word	xTasksWaitingTermination
 4420 006c 00000000 		.word	uxCurrentNumberOfTasks
 4421 0070 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4422              		.cfi_endproc
 4423              	.LFE40:
 4425              		.section	.text.vTaskGetInfo,"ax",%progbits
 4426              		.align	2
 4427              		.global	vTaskGetInfo
 4428              		.thumb
 4429              		.thumb_func
 4431              	vTaskGetInfo:
 4432              	.LFB41:
3419:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3420:../../../FreeRTOS_9_0/Source/tasks.c **** 
3421:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3422:../../../FreeRTOS_9_0/Source/tasks.c **** 
3423:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3424:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4433              		.loc 1 3424 0
 4434              		.cfi_startproc
 4435              		@ args = 0, pretend = 0, frame = 24
 4436              		@ frame_needed = 1, uses_anonymous_args = 0
 4437 0000 80B5     		push	{r7, lr}
 4438              	.LCFI182:
 4439              		.cfi_def_cfa_offset 8
 4440              		.cfi_offset 7, -8
 4441              		.cfi_offset 14, -4
 4442 0002 86B0     		sub	sp, sp, #24
 4443              	.LCFI183:
 4444              		.cfi_def_cfa_offset 32
 4445 0004 00AF     		add	r7, sp, #0
 4446              	.LCFI184:
 4447              		.cfi_def_cfa_register 7
 4448 0006 F860     		str	r0, [r7, #12]
 4449 0008 B960     		str	r1, [r7, #8]
 4450 000a 7A60     		str	r2, [r7, #4]
 4451 000c FB70     		strb	r3, [r7, #3]
3425:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
3426:../../../FreeRTOS_9_0/Source/tasks.c **** 
3427:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3428:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4452              		.loc 1 3428 0
 4453 000e FB68     		ldr	r3, [r7, #12]
 4454 0010 002B     		cmp	r3, #0
ARM GAS  /tmp/ccfW2k76.s 			page 143


 4455 0012 02D1     		bne	.L287
 4456              		.loc 1 3428 0 is_stmt 0 discriminator 1
 4457 0014 274B     		ldr	r3, .L295
 4458 0016 1B68     		ldr	r3, [r3]
 4459 0018 00E0     		b	.L288
 4460              	.L287:
 4461              		.loc 1 3428 0 discriminator 2
 4462 001a FB68     		ldr	r3, [r7, #12]
 4463              	.L288:
 4464              		.loc 1 3428 0 discriminator 4
 4465 001c 7B61     		str	r3, [r7, #20]
3429:../../../FreeRTOS_9_0/Source/tasks.c **** 
3430:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 4466              		.loc 1 3430 0 is_stmt 1 discriminator 4
 4467 001e BB68     		ldr	r3, [r7, #8]
 4468 0020 7A69     		ldr	r2, [r7, #20]
 4469 0022 1A60     		str	r2, [r3]
3431:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4470              		.loc 1 3431 0 discriminator 4
 4471 0024 7B69     		ldr	r3, [r7, #20]
 4472 0026 03F13402 		add	r2, r3, #52
 4473 002a BB68     		ldr	r3, [r7, #8]
 4474 002c 5A60     		str	r2, [r3, #4]
3432:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4475              		.loc 1 3432 0 discriminator 4
 4476 002e 7B69     		ldr	r3, [r7, #20]
 4477 0030 DA6A     		ldr	r2, [r3, #44]
 4478 0032 BB68     		ldr	r3, [r7, #8]
 4479 0034 1A61     		str	r2, [r3, #16]
3433:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4480              		.loc 1 3433 0 discriminator 4
 4481 0036 7B69     		ldr	r3, [r7, #20]
 4482 0038 1A6B     		ldr	r2, [r3, #48]
 4483 003a BB68     		ldr	r3, [r7, #8]
 4484 003c DA61     		str	r2, [r3, #28]
3434:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4485              		.loc 1 3434 0 discriminator 4
 4486 003e 7B69     		ldr	r3, [r7, #20]
 4487 0040 5A6C     		ldr	r2, [r3, #68]
 4488 0042 BB68     		ldr	r3, [r7, #8]
 4489 0044 9A60     		str	r2, [r3, #8]
3435:../../../FreeRTOS_9_0/Source/tasks.c **** 
3436:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3437:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3438:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3439:../../../FreeRTOS_9_0/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3440:../../../FreeRTOS_9_0/Source/tasks.c **** 			being in the Blocked state. */
3441:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
 4490              		.loc 1 3441 0 discriminator 4
 4491 0046 BB68     		ldr	r3, [r7, #8]
 4492 0048 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4493 004a 032B     		cmp	r3, #3
 4494 004c 0AD1     		bne	.L289
3442:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3443:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskSuspendAll();
 4495              		.loc 1 3443 0
 4496 004e FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  /tmp/ccfW2k76.s 			page 144


3444:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3445:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 4497              		.loc 1 3445 0
 4498 0052 7B69     		ldr	r3, [r7, #20]
 4499 0054 9B6A     		ldr	r3, [r3, #40]
 4500 0056 002B     		cmp	r3, #0
 4501 0058 02D0     		beq	.L290
3446:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3447:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
 4502              		.loc 1 3447 0
 4503 005a BB68     		ldr	r3, [r7, #8]
 4504 005c 0222     		movs	r2, #2
 4505 005e 1A73     		strb	r2, [r3, #12]
 4506              	.L290:
3448:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3449:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3450:../../../FreeRTOS_9_0/Source/tasks.c **** 				xTaskResumeAll();
 4507              		.loc 1 3450 0
 4508 0060 FFF7FEFF 		bl	xTaskResumeAll
 4509              	.L289:
3451:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3452:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3453:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3454:../../../FreeRTOS_9_0/Source/tasks.c **** 
3455:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3456:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3457:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 4510              		.loc 1 3457 0
 4511 0064 7B69     		ldr	r3, [r7, #20]
 4512 0066 DA6C     		ldr	r2, [r3, #76]
 4513 0068 BB68     		ldr	r3, [r7, #8]
 4514 006a 5A61     		str	r2, [r3, #20]
3458:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3459:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3460:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3461:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3462:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3463:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3464:../../../FreeRTOS_9_0/Source/tasks.c **** 
3465:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3466:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3467:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3468:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3469:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3470:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3471:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 4515              		.loc 1 3471 0
 4516 006c BB68     		ldr	r3, [r7, #8]
 4517 006e 0022     		movs	r2, #0
 4518 0070 9A61     		str	r2, [r3, #24]
3472:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3473:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3474:../../../FreeRTOS_9_0/Source/tasks.c **** 
3475:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3476:../../../FreeRTOS_9_0/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3477:../../../FreeRTOS_9_0/Source/tasks.c **** 		just set to whatever is passed in. */
3478:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( eState != eInvalid )
ARM GAS  /tmp/ccfW2k76.s 			page 145


 4519              		.loc 1 3478 0
 4520 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4521 0074 052B     		cmp	r3, #5
 4522 0076 03D0     		beq	.L291
3479:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3480:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
 4523              		.loc 1 3480 0
 4524 0078 BB68     		ldr	r3, [r7, #8]
 4525 007a FA78     		ldrb	r2, [r7, #3]
 4526 007c 1A73     		strb	r2, [r3, #12]
 4527 007e 06E0     		b	.L292
 4528              	.L291:
3481:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3482:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3483:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3484:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 4529              		.loc 1 3484 0
 4530 0080 F868     		ldr	r0, [r7, #12]
 4531 0082 FFF7FEFF 		bl	eTaskGetState
 4532 0086 0346     		mov	r3, r0
 4533 0088 1A46     		mov	r2, r3
 4534 008a BB68     		ldr	r3, [r7, #8]
 4535 008c 1A73     		strb	r2, [r3, #12]
 4536              	.L292:
3485:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3486:../../../FreeRTOS_9_0/Source/tasks.c **** 
3487:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3488:../../../FreeRTOS_9_0/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3489:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 4537              		.loc 1 3489 0
 4538 008e 7B68     		ldr	r3, [r7, #4]
 4539 0090 002B     		cmp	r3, #0
 4540 0092 09D0     		beq	.L293
3490:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3491:../../../FreeRTOS_9_0/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3492:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3493:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3494:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3495:../../../FreeRTOS_9_0/Source/tasks.c **** 			#else
3496:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3497:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 4541              		.loc 1 3497 0
 4542 0094 7B69     		ldr	r3, [r7, #20]
 4543 0096 1B6B     		ldr	r3, [r3, #48]
 4544 0098 1846     		mov	r0, r3
 4545 009a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4546 009e 0346     		mov	r3, r0
 4547 00a0 1A46     		mov	r2, r3
 4548 00a2 BB68     		ldr	r3, [r7, #8]
 4549 00a4 1A84     		strh	r2, [r3, #32]	@ movhi
 4550 00a6 02E0     		b	.L286
 4551              	.L293:
3498:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3499:../../../FreeRTOS_9_0/Source/tasks.c **** 			#endif
3500:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3501:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3502:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
ARM GAS  /tmp/ccfW2k76.s 			page 146


3503:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
 4552              		.loc 1 3503 0
 4553 00a8 BB68     		ldr	r3, [r7, #8]
 4554 00aa 0022     		movs	r2, #0
 4555 00ac 1A84     		strh	r2, [r3, #32]	@ movhi
 4556              	.L286:
3504:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3505:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4557              		.loc 1 3505 0
 4558 00ae 1837     		adds	r7, r7, #24
 4559              	.LCFI185:
 4560              		.cfi_def_cfa_offset 8
 4561 00b0 BD46     		mov	sp, r7
 4562              	.LCFI186:
 4563              		.cfi_def_cfa_register 13
 4564              		@ sp needed
 4565 00b2 80BD     		pop	{r7, pc}
 4566              	.L296:
 4567              		.align	2
 4568              	.L295:
 4569 00b4 00000000 		.word	pxCurrentTCB
 4570              		.cfi_endproc
 4571              	.LFE41:
 4573              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4574              		.align	2
 4575              		.thumb
 4576              		.thumb_func
 4578              	prvListTasksWithinSingleList:
 4579              	.LFB42:
3506:../../../FreeRTOS_9_0/Source/tasks.c **** 
3507:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3508:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3509:../../../FreeRTOS_9_0/Source/tasks.c **** 
3510:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3511:../../../FreeRTOS_9_0/Source/tasks.c **** 
3512:../../../FreeRTOS_9_0/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3513:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4580              		.loc 1 3513 0
 4581              		.cfi_startproc
 4582              		@ args = 0, pretend = 0, frame = 40
 4583              		@ frame_needed = 1, uses_anonymous_args = 0
 4584 0000 80B5     		push	{r7, lr}
 4585              	.LCFI187:
 4586              		.cfi_def_cfa_offset 8
 4587              		.cfi_offset 7, -8
 4588              		.cfi_offset 14, -4
 4589 0002 8AB0     		sub	sp, sp, #40
 4590              	.LCFI188:
 4591              		.cfi_def_cfa_offset 48
 4592 0004 00AF     		add	r7, sp, #0
 4593              	.LCFI189:
 4594              		.cfi_def_cfa_register 7
 4595 0006 F860     		str	r0, [r7, #12]
 4596 0008 B960     		str	r1, [r7, #8]
 4597 000a 1346     		mov	r3, r2
 4598 000c FB71     		strb	r3, [r7, #7]
3514:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
ARM GAS  /tmp/ccfW2k76.s 			page 147


3515:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 4599              		.loc 1 3515 0
 4600 000e 0023     		movs	r3, #0
 4601 0010 7B62     		str	r3, [r7, #36]
3516:../../../FreeRTOS_9_0/Source/tasks.c **** 
3517:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 4602              		.loc 1 3517 0
 4603 0012 BB68     		ldr	r3, [r7, #8]
 4604 0014 1B68     		ldr	r3, [r3]
 4605 0016 002B     		cmp	r3, #0
 4606 0018 40D0     		beq	.L298
 4607              	.LBB161:
3518:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3519:../../../FreeRTOS_9_0/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4608              		.loc 1 3519 0
 4609 001a BB68     		ldr	r3, [r7, #8]
 4610 001c 3B62     		str	r3, [r7, #32]
 4611 001e 3B6A     		ldr	r3, [r7, #32]
 4612 0020 5B68     		ldr	r3, [r3, #4]
 4613 0022 5A68     		ldr	r2, [r3, #4]
 4614 0024 3B6A     		ldr	r3, [r7, #32]
 4615 0026 5A60     		str	r2, [r3, #4]
 4616 0028 3B6A     		ldr	r3, [r7, #32]
 4617 002a 5A68     		ldr	r2, [r3, #4]
 4618 002c 3B6A     		ldr	r3, [r7, #32]
 4619 002e 0833     		adds	r3, r3, #8
 4620 0030 9A42     		cmp	r2, r3
 4621 0032 04D1     		bne	.L299
 4622              		.loc 1 3519 0 is_stmt 0 discriminator 1
 4623 0034 3B6A     		ldr	r3, [r7, #32]
 4624 0036 5B68     		ldr	r3, [r3, #4]
 4625 0038 5A68     		ldr	r2, [r3, #4]
 4626 003a 3B6A     		ldr	r3, [r7, #32]
 4627 003c 5A60     		str	r2, [r3, #4]
 4628              	.L299:
 4629              		.loc 1 3519 0 discriminator 3
 4630 003e 3B6A     		ldr	r3, [r7, #32]
 4631 0040 5B68     		ldr	r3, [r3, #4]
 4632 0042 DB68     		ldr	r3, [r3, #12]
 4633 0044 FB61     		str	r3, [r7, #28]
 4634              	.L301:
 4635              	.LBE161:
 4636              	.LBB162:
3520:../../../FreeRTOS_9_0/Source/tasks.c **** 
3521:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3522:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3523:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3524:../../../FreeRTOS_9_0/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3525:../../../FreeRTOS_9_0/Source/tasks.c **** 			do
3526:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3527:../../../FreeRTOS_9_0/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 4637              		.loc 1 3527 0 is_stmt 1
 4638 0046 BB68     		ldr	r3, [r7, #8]
 4639 0048 BB61     		str	r3, [r7, #24]
 4640 004a BB69     		ldr	r3, [r7, #24]
 4641 004c 5B68     		ldr	r3, [r3, #4]
 4642 004e 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccfW2k76.s 			page 148


 4643 0050 BB69     		ldr	r3, [r7, #24]
 4644 0052 5A60     		str	r2, [r3, #4]
 4645 0054 BB69     		ldr	r3, [r7, #24]
 4646 0056 5A68     		ldr	r2, [r3, #4]
 4647 0058 BB69     		ldr	r3, [r7, #24]
 4648 005a 0833     		adds	r3, r3, #8
 4649 005c 9A42     		cmp	r2, r3
 4650 005e 04D1     		bne	.L300
 4651              		.loc 1 3527 0 is_stmt 0 discriminator 1
 4652 0060 BB69     		ldr	r3, [r7, #24]
 4653 0062 5B68     		ldr	r3, [r3, #4]
 4654 0064 5A68     		ldr	r2, [r3, #4]
 4655 0066 BB69     		ldr	r3, [r7, #24]
 4656 0068 5A60     		str	r2, [r3, #4]
 4657              	.L300:
 4658              		.loc 1 3527 0 discriminator 3
 4659 006a BB69     		ldr	r3, [r7, #24]
 4660 006c 5B68     		ldr	r3, [r3, #4]
 4661 006e DB68     		ldr	r3, [r3, #12]
 4662 0070 7B61     		str	r3, [r7, #20]
 4663              	.LBE162:
3528:../../../FreeRTOS_9_0/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4664              		.loc 1 3528 0 is_stmt 1 discriminator 3
 4665 0072 7A6A     		ldr	r2, [r7, #36]
 4666 0074 1346     		mov	r3, r2
 4667 0076 DB00     		lsls	r3, r3, #3
 4668 0078 1344     		add	r3, r3, r2
 4669 007a 9B00     		lsls	r3, r3, #2
 4670 007c 1A46     		mov	r2, r3
 4671 007e FB68     		ldr	r3, [r7, #12]
 4672 0080 1A44     		add	r2, r2, r3
 4673 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4674 0084 7869     		ldr	r0, [r7, #20]
 4675 0086 1146     		mov	r1, r2
 4676 0088 0122     		movs	r2, #1
 4677 008a FFF7FEFF 		bl	vTaskGetInfo
3529:../../../FreeRTOS_9_0/Source/tasks.c **** 				uxTask++;
 4678              		.loc 1 3529 0 discriminator 3
 4679 008e 7B6A     		ldr	r3, [r7, #36]
 4680 0090 0133     		adds	r3, r3, #1
 4681 0092 7B62     		str	r3, [r7, #36]
3530:../../../FreeRTOS_9_0/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4682              		.loc 1 3530 0 discriminator 3
 4683 0094 7A69     		ldr	r2, [r7, #20]
 4684 0096 FB69     		ldr	r3, [r7, #28]
 4685 0098 9A42     		cmp	r2, r3
 4686 009a D4D1     		bne	.L301
 4687              	.L298:
3531:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3532:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3533:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3534:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3535:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3536:../../../FreeRTOS_9_0/Source/tasks.c **** 
3537:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxTask;
 4688              		.loc 1 3537 0
 4689 009c 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccfW2k76.s 			page 149


3538:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4690              		.loc 1 3538 0
 4691 009e 1846     		mov	r0, r3
 4692 00a0 2837     		adds	r7, r7, #40
 4693              	.LCFI190:
 4694              		.cfi_def_cfa_offset 8
 4695 00a2 BD46     		mov	sp, r7
 4696              	.LCFI191:
 4697              		.cfi_def_cfa_register 13
 4698              		@ sp needed
 4699 00a4 80BD     		pop	{r7, pc}
 4700              		.cfi_endproc
 4701              	.LFE42:
 4703 00a6 00BF     		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4704              		.align	2
 4705              		.thumb
 4706              		.thumb_func
 4708              	prvTaskCheckFreeStackSpace:
 4709              	.LFB43:
3539:../../../FreeRTOS_9_0/Source/tasks.c **** 
3540:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3541:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3542:../../../FreeRTOS_9_0/Source/tasks.c **** 
3543:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3544:../../../FreeRTOS_9_0/Source/tasks.c **** 
3545:../../../FreeRTOS_9_0/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3546:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4710              		.loc 1 3546 0
 4711              		.cfi_startproc
 4712              		@ args = 0, pretend = 0, frame = 16
 4713              		@ frame_needed = 1, uses_anonymous_args = 0
 4714              		@ link register save eliminated.
 4715 0000 80B4     		push	{r7}
 4716              	.LCFI192:
 4717              		.cfi_def_cfa_offset 4
 4718              		.cfi_offset 7, -4
 4719 0002 85B0     		sub	sp, sp, #20
 4720              	.LCFI193:
 4721              		.cfi_def_cfa_offset 24
 4722 0004 00AF     		add	r7, sp, #0
 4723              	.LCFI194:
 4724              		.cfi_def_cfa_register 7
 4725 0006 7860     		str	r0, [r7, #4]
3547:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulCount = 0U;
 4726              		.loc 1 3547 0
 4727 0008 0023     		movs	r3, #0
 4728 000a FB60     		str	r3, [r7, #12]
3548:../../../FreeRTOS_9_0/Source/tasks.c **** 
3549:../../../FreeRTOS_9_0/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4729              		.loc 1 3549 0
 4730 000c 05E0     		b	.L304
 4731              	.L305:
3550:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3551:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4732              		.loc 1 3551 0
 4733 000e 7B68     		ldr	r3, [r7, #4]
 4734 0010 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccfW2k76.s 			page 150


 4735 0012 7B60     		str	r3, [r7, #4]
3552:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulCount++;
 4736              		.loc 1 3552 0
 4737 0014 FB68     		ldr	r3, [r7, #12]
 4738 0016 0133     		adds	r3, r3, #1
 4739 0018 FB60     		str	r3, [r7, #12]
 4740              	.L304:
3549:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
 4741              		.loc 1 3549 0
 4742 001a 7B68     		ldr	r3, [r7, #4]
 4743 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4744 001e A52B     		cmp	r3, #165
 4745 0020 F5D0     		beq	.L305
3553:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3554:../../../FreeRTOS_9_0/Source/tasks.c **** 
3555:../../../FreeRTOS_9_0/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 4746              		.loc 1 3555 0
 4747 0022 FB68     		ldr	r3, [r7, #12]
 4748 0024 9B08     		lsrs	r3, r3, #2
 4749 0026 FB60     		str	r3, [r7, #12]
3556:../../../FreeRTOS_9_0/Source/tasks.c **** 
3557:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( uint16_t ) ulCount;
 4750              		.loc 1 3557 0
 4751 0028 FB68     		ldr	r3, [r7, #12]
 4752 002a 9BB2     		uxth	r3, r3
3558:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4753              		.loc 1 3558 0
 4754 002c 1846     		mov	r0, r3
 4755 002e 1437     		adds	r7, r7, #20
 4756              	.LCFI195:
 4757              		.cfi_def_cfa_offset 4
 4758 0030 BD46     		mov	sp, r7
 4759              	.LCFI196:
 4760              		.cfi_def_cfa_register 13
 4761              		@ sp needed
 4762 0032 5DF8047B 		ldr	r7, [sp], #4
 4763              	.LCFI197:
 4764              		.cfi_restore 7
 4765              		.cfi_def_cfa_offset 0
 4766 0036 7047     		bx	lr
 4767              		.cfi_endproc
 4768              	.LFE43:
 4770              		.section	.text.prvDeleteTCB,"ax",%progbits
 4771              		.align	2
 4772              		.thumb
 4773              		.thumb_func
 4775              	prvDeleteTCB:
 4776              	.LFB44:
3559:../../../FreeRTOS_9_0/Source/tasks.c **** 
3560:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3561:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3562:../../../FreeRTOS_9_0/Source/tasks.c **** 
3563:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3564:../../../FreeRTOS_9_0/Source/tasks.c **** 
3565:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3566:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3567:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccfW2k76.s 			page 151


3568:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3569:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxReturn;
3570:../../../FreeRTOS_9_0/Source/tasks.c **** 
3571:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3572:../../../FreeRTOS_9_0/Source/tasks.c **** 
3573:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3574:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3575:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3576:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3577:../../../FreeRTOS_9_0/Source/tasks.c **** 		#else
3578:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3579:../../../FreeRTOS_9_0/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3580:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3581:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
3582:../../../FreeRTOS_9_0/Source/tasks.c **** 
3583:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3584:../../../FreeRTOS_9_0/Source/tasks.c **** 
3585:../../../FreeRTOS_9_0/Source/tasks.c **** 		return uxReturn;
3586:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3587:../../../FreeRTOS_9_0/Source/tasks.c **** 
3588:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3589:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:../../../FreeRTOS_9_0/Source/tasks.c **** 
3591:../../../FreeRTOS_9_0/Source/tasks.c **** #if (INCLUDE_pxTaskGetStackStart == 1)
3592:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t* pxTaskGetStackStart( TaskHandle_t xTask)
3593:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3594:../../../FreeRTOS_9_0/Source/tasks.c **** 	    TCB_t *pxTCB;
3595:../../../FreeRTOS_9_0/Source/tasks.c **** 	    UBaseType_t uxReturn;
3596:../../../FreeRTOS_9_0/Source/tasks.c ****         (void)uxReturn;
3597:../../../FreeRTOS_9_0/Source/tasks.c **** 
3598:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3599:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
3600:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3601:../../../FreeRTOS_9_0/Source/tasks.c **** 
3602:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_pxTaskGetStackStart */
3603:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3604:../../../FreeRTOS_9_0/Source/tasks.c **** 
3605:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3606:../../../FreeRTOS_9_0/Source/tasks.c **** 
3607:../../../FreeRTOS_9_0/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3608:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4777              		.loc 1 3608 0
 4778              		.cfi_startproc
 4779              		@ args = 0, pretend = 0, frame = 8
 4780              		@ frame_needed = 1, uses_anonymous_args = 0
 4781 0000 80B5     		push	{r7, lr}
 4782              	.LCFI198:
 4783              		.cfi_def_cfa_offset 8
 4784              		.cfi_offset 7, -8
 4785              		.cfi_offset 14, -4
 4786 0002 82B0     		sub	sp, sp, #8
 4787              	.LCFI199:
 4788              		.cfi_def_cfa_offset 16
 4789 0004 00AF     		add	r7, sp, #0
 4790              	.LCFI200:
 4791              		.cfi_def_cfa_register 7
 4792 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccfW2k76.s 			page 152


3609:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3610:../../../FreeRTOS_9_0/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3611:../../../FreeRTOS_9_0/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3612:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3613:../../../FreeRTOS_9_0/Source/tasks.c **** 
3614:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3615:../../../FreeRTOS_9_0/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3616:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3617:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3618:../../../FreeRTOS_9_0/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3619:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3620:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3621:../../../FreeRTOS_9_0/Source/tasks.c **** 
3622:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3623:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3624:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3625:../../../FreeRTOS_9_0/Source/tasks.c **** 			the stack and TCB. */
3626:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4793              		.loc 1 3626 0
 4794 0008 7B68     		ldr	r3, [r7, #4]
 4795 000a 1B6B     		ldr	r3, [r3, #48]
 4796 000c 1846     		mov	r0, r3
 4797 000e FFF7FEFF 		bl	vPortFree
3627:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTCB );
 4798              		.loc 1 3627 0
 4799 0012 7868     		ldr	r0, [r7, #4]
 4800 0014 FFF7FEFF 		bl	vPortFree
3628:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3629:../../../FreeRTOS_9_0/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3630:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3631:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3632:../../../FreeRTOS_9_0/Source/tasks.c **** 			check what was statically allocated before trying to free the
3633:../../../FreeRTOS_9_0/Source/tasks.c **** 			memory. */
3634:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3635:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3636:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3637:../../../FreeRTOS_9_0/Source/tasks.c **** 				must be freed. */
3638:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3639:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB );
3640:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3641:../../../FreeRTOS_9_0/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3642:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3643:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3644:../../../FreeRTOS_9_0/Source/tasks.c **** 				only memory that must be freed. */
3645:../../../FreeRTOS_9_0/Source/tasks.c **** 				vPortFree( pxTCB );
3646:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3647:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3648:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3649:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3650:../../../FreeRTOS_9_0/Source/tasks.c **** 				nothing needs to be freed. */
3651:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3652:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3653:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3654:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3655:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3656:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4801              		.loc 1 3656 0
ARM GAS  /tmp/ccfW2k76.s 			page 153


 4802 0018 0837     		adds	r7, r7, #8
 4803              	.LCFI201:
 4804              		.cfi_def_cfa_offset 8
 4805 001a BD46     		mov	sp, r7
 4806              	.LCFI202:
 4807              		.cfi_def_cfa_register 13
 4808              		@ sp needed
 4809 001c 80BD     		pop	{r7, pc}
 4810              		.cfi_endproc
 4811              	.LFE44:
 4813 001e 00BF     		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4814              		.align	2
 4815              		.thumb
 4816              		.thumb_func
 4818              	prvResetNextTaskUnblockTime:
 4819              	.LFB45:
3657:../../../FreeRTOS_9_0/Source/tasks.c **** 
3658:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3659:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3660:../../../FreeRTOS_9_0/Source/tasks.c **** 
3661:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3662:../../../FreeRTOS_9_0/Source/tasks.c **** {
 4820              		.loc 1 3662 0
 4821              		.cfi_startproc
 4822              		@ args = 0, pretend = 0, frame = 8
 4823              		@ frame_needed = 1, uses_anonymous_args = 0
 4824              		@ link register save eliminated.
 4825 0000 80B4     		push	{r7}
 4826              	.LCFI203:
 4827              		.cfi_def_cfa_offset 4
 4828              		.cfi_offset 7, -4
 4829 0002 83B0     		sub	sp, sp, #12
 4830              	.LCFI204:
 4831              		.cfi_def_cfa_offset 16
 4832 0004 00AF     		add	r7, sp, #0
 4833              	.LCFI205:
 4834              		.cfi_def_cfa_register 7
3663:../../../FreeRTOS_9_0/Source/tasks.c **** TCB_t *pxTCB;
3664:../../../FreeRTOS_9_0/Source/tasks.c **** 
3665:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4835              		.loc 1 3665 0
 4836 0006 0E4B     		ldr	r3, .L313
 4837 0008 1B68     		ldr	r3, [r3]
 4838 000a 1B68     		ldr	r3, [r3]
 4839 000c 002B     		cmp	r3, #0
 4840 000e 01D1     		bne	.L309
 4841              		.loc 1 3665 0 is_stmt 0 discriminator 1
 4842 0010 0123     		movs	r3, #1
 4843 0012 00E0     		b	.L310
 4844              	.L309:
 4845              		.loc 1 3665 0 discriminator 2
 4846 0014 0023     		movs	r3, #0
 4847              	.L310:
 4848              		.loc 1 3665 0 discriminator 4
 4849 0016 002B     		cmp	r3, #0
 4850 0018 04D0     		beq	.L311
3666:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
ARM GAS  /tmp/ccfW2k76.s 			page 154


3667:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3668:../../../FreeRTOS_9_0/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3669:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3670:../../../FreeRTOS_9_0/Source/tasks.c **** 		there is an item in the delayed list. */
3671:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4851              		.loc 1 3671 0 is_stmt 1
 4852 001a 0A4B     		ldr	r3, .L313+4
 4853 001c 4FF0FF32 		mov	r2, #-1
 4854 0020 1A60     		str	r2, [r3]
 4855 0022 08E0     		b	.L308
 4856              	.L311:
3672:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3673:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
3674:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3675:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3676:../../../FreeRTOS_9_0/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3677:../../../FreeRTOS_9_0/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3678:../../../FreeRTOS_9_0/Source/tasks.c **** 		from the Blocked state. */
3679:../../../FreeRTOS_9_0/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 4857              		.loc 1 3679 0
 4858 0024 064B     		ldr	r3, .L313
 4859 0026 1B68     		ldr	r3, [r3]
 4860 0028 DB68     		ldr	r3, [r3, #12]
 4861 002a DB68     		ldr	r3, [r3, #12]
 4862 002c 7B60     		str	r3, [r7, #4]
3680:../../../FreeRTOS_9_0/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4863              		.loc 1 3680 0
 4864 002e 7B68     		ldr	r3, [r7, #4]
 4865 0030 5B68     		ldr	r3, [r3, #4]
 4866 0032 044A     		ldr	r2, .L313+4
 4867 0034 1360     		str	r3, [r2]
 4868              	.L308:
3681:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3682:../../../FreeRTOS_9_0/Source/tasks.c **** }
 4869              		.loc 1 3682 0
 4870 0036 0C37     		adds	r7, r7, #12
 4871              	.LCFI206:
 4872              		.cfi_def_cfa_offset 4
 4873 0038 BD46     		mov	sp, r7
 4874              	.LCFI207:
 4875              		.cfi_def_cfa_register 13
 4876              		@ sp needed
 4877 003a 5DF8047B 		ldr	r7, [sp], #4
 4878              	.LCFI208:
 4879              		.cfi_restore 7
 4880              		.cfi_def_cfa_offset 0
 4881 003e 7047     		bx	lr
 4882              	.L314:
 4883              		.align	2
 4884              	.L313:
 4885 0040 00000000 		.word	pxDelayedTaskList
 4886 0044 00000000 		.word	xNextTaskUnblockTime
 4887              		.cfi_endproc
 4888              	.LFE45:
 4890              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4891              		.align	2
 4892              		.global	xTaskGetCurrentTaskHandle
ARM GAS  /tmp/ccfW2k76.s 			page 155


 4893              		.thumb
 4894              		.thumb_func
 4896              	xTaskGetCurrentTaskHandle:
 4897              	.LFB46:
3683:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3684:../../../FreeRTOS_9_0/Source/tasks.c **** 
3685:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3686:../../../FreeRTOS_9_0/Source/tasks.c **** 
3687:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3688:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4898              		.loc 1 3688 0
 4899              		.cfi_startproc
 4900              		@ args = 0, pretend = 0, frame = 8
 4901              		@ frame_needed = 1, uses_anonymous_args = 0
 4902              		@ link register save eliminated.
 4903 0000 80B4     		push	{r7}
 4904              	.LCFI209:
 4905              		.cfi_def_cfa_offset 4
 4906              		.cfi_offset 7, -4
 4907 0002 83B0     		sub	sp, sp, #12
 4908              	.LCFI210:
 4909              		.cfi_def_cfa_offset 16
 4910 0004 00AF     		add	r7, sp, #0
 4911              	.LCFI211:
 4912              		.cfi_def_cfa_register 7
3689:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskHandle_t xReturn;
3690:../../../FreeRTOS_9_0/Source/tasks.c **** 
3691:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3692:../../../FreeRTOS_9_0/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3693:../../../FreeRTOS_9_0/Source/tasks.c **** 		individual execution thread. */
3694:../../../FreeRTOS_9_0/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4913              		.loc 1 3694 0
 4914 0006 054B     		ldr	r3, .L317
 4915 0008 1B68     		ldr	r3, [r3]
 4916 000a 7B60     		str	r3, [r7, #4]
3695:../../../FreeRTOS_9_0/Source/tasks.c **** 
3696:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 4917              		.loc 1 3696 0
 4918 000c 7B68     		ldr	r3, [r7, #4]
3697:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4919              		.loc 1 3697 0
 4920 000e 1846     		mov	r0, r3
 4921 0010 0C37     		adds	r7, r7, #12
 4922              	.LCFI212:
 4923              		.cfi_def_cfa_offset 4
 4924 0012 BD46     		mov	sp, r7
 4925              	.LCFI213:
 4926              		.cfi_def_cfa_register 13
 4927              		@ sp needed
 4928 0014 5DF8047B 		ldr	r7, [sp], #4
 4929              	.LCFI214:
 4930              		.cfi_restore 7
 4931              		.cfi_def_cfa_offset 0
 4932 0018 7047     		bx	lr
 4933              	.L318:
 4934 001a 00BF     		.align	2
 4935              	.L317:
ARM GAS  /tmp/ccfW2k76.s 			page 156


 4936 001c 00000000 		.word	pxCurrentTCB
 4937              		.cfi_endproc
 4938              	.LFE46:
 4940              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4941              		.align	2
 4942              		.global	xTaskGetSchedulerState
 4943              		.thumb
 4944              		.thumb_func
 4946              	xTaskGetSchedulerState:
 4947              	.LFB47:
3698:../../../FreeRTOS_9_0/Source/tasks.c **** 
3699:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3700:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3701:../../../FreeRTOS_9_0/Source/tasks.c **** 
3702:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3703:../../../FreeRTOS_9_0/Source/tasks.c **** 
3704:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3705:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 4948              		.loc 1 3705 0
 4949              		.cfi_startproc
 4950              		@ args = 0, pretend = 0, frame = 8
 4951              		@ frame_needed = 1, uses_anonymous_args = 0
 4952              		@ link register save eliminated.
 4953 0000 80B4     		push	{r7}
 4954              	.LCFI215:
 4955              		.cfi_def_cfa_offset 4
 4956              		.cfi_offset 7, -4
 4957 0002 83B0     		sub	sp, sp, #12
 4958              	.LCFI216:
 4959              		.cfi_def_cfa_offset 16
 4960 0004 00AF     		add	r7, sp, #0
 4961              	.LCFI217:
 4962              		.cfi_def_cfa_register 7
3706:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
3707:../../../FreeRTOS_9_0/Source/tasks.c **** 
3708:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4963              		.loc 1 3708 0
 4964 0006 0B4B     		ldr	r3, .L324
 4965 0008 1B68     		ldr	r3, [r3]
 4966 000a 002B     		cmp	r3, #0
 4967 000c 02D1     		bne	.L320
3709:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3710:../../../FreeRTOS_9_0/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4968              		.loc 1 3710 0
 4969 000e 0123     		movs	r3, #1
 4970 0010 7B60     		str	r3, [r7, #4]
 4971 0012 08E0     		b	.L321
 4972              	.L320:
3711:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3712:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3713:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3714:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4973              		.loc 1 3714 0
 4974 0014 084B     		ldr	r3, .L324+4
 4975 0016 1B68     		ldr	r3, [r3]
 4976 0018 002B     		cmp	r3, #0
 4977 001a 02D1     		bne	.L322
ARM GAS  /tmp/ccfW2k76.s 			page 157


3715:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3716:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4978              		.loc 1 3716 0
 4979 001c 0223     		movs	r3, #2
 4980 001e 7B60     		str	r3, [r7, #4]
 4981 0020 01E0     		b	.L321
 4982              	.L322:
3717:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3718:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3719:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3720:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4983              		.loc 1 3720 0
 4984 0022 0023     		movs	r3, #0
 4985 0024 7B60     		str	r3, [r7, #4]
 4986              	.L321:
3721:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3722:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3723:../../../FreeRTOS_9_0/Source/tasks.c **** 
3724:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 4987              		.loc 1 3724 0
 4988 0026 7B68     		ldr	r3, [r7, #4]
3725:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 4989              		.loc 1 3725 0
 4990 0028 1846     		mov	r0, r3
 4991 002a 0C37     		adds	r7, r7, #12
 4992              	.LCFI218:
 4993              		.cfi_def_cfa_offset 4
 4994 002c BD46     		mov	sp, r7
 4995              	.LCFI219:
 4996              		.cfi_def_cfa_register 13
 4997              		@ sp needed
 4998 002e 5DF8047B 		ldr	r7, [sp], #4
 4999              	.LCFI220:
 5000              		.cfi_restore 7
 5001              		.cfi_def_cfa_offset 0
 5002 0032 7047     		bx	lr
 5003              	.L325:
 5004              		.align	2
 5005              	.L324:
 5006 0034 00000000 		.word	xSchedulerRunning
 5007 0038 00000000 		.word	uxSchedulerSuspended
 5008              		.cfi_endproc
 5009              	.LFE47:
 5011              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 5012              		.align	2
 5013              		.global	vTaskPriorityInherit
 5014              		.thumb
 5015              		.thumb_func
 5017              	vTaskPriorityInherit:
 5018              	.LFB48:
3726:../../../FreeRTOS_9_0/Source/tasks.c **** 
3727:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3728:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3729:../../../FreeRTOS_9_0/Source/tasks.c **** 
3730:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3731:../../../FreeRTOS_9_0/Source/tasks.c **** 
3732:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
ARM GAS  /tmp/ccfW2k76.s 			page 158


3733:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5019              		.loc 1 3733 0
 5020              		.cfi_startproc
 5021              		@ args = 0, pretend = 0, frame = 16
 5022              		@ frame_needed = 1, uses_anonymous_args = 0
 5023 0000 80B5     		push	{r7, lr}
 5024              	.LCFI221:
 5025              		.cfi_def_cfa_offset 8
 5026              		.cfi_offset 7, -8
 5027              		.cfi_offset 14, -4
 5028 0002 84B0     		sub	sp, sp, #16
 5029              	.LCFI222:
 5030              		.cfi_def_cfa_offset 24
 5031 0004 00AF     		add	r7, sp, #0
 5032              	.LCFI223:
 5033              		.cfi_def_cfa_register 7
 5034 0006 7860     		str	r0, [r7, #4]
3734:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5035              		.loc 1 3734 0
 5036 0008 7B68     		ldr	r3, [r7, #4]
 5037 000a FB60     		str	r3, [r7, #12]
3735:../../../FreeRTOS_9_0/Source/tasks.c **** 
3736:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3737:../../../FreeRTOS_9_0/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3738:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5038              		.loc 1 3738 0
 5039 000c 7B68     		ldr	r3, [r7, #4]
 5040 000e 002B     		cmp	r3, #0
 5041 0010 64D0     		beq	.L326
3739:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3740:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3741:../../../FreeRTOS_9_0/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3742:../../../FreeRTOS_9_0/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3743:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 5042              		.loc 1 3743 0
 5043 0012 FB68     		ldr	r3, [r7, #12]
 5044 0014 DA6A     		ldr	r2, [r3, #44]
 5045 0016 334B     		ldr	r3, .L335
 5046 0018 1B68     		ldr	r3, [r3]
 5047 001a DB6A     		ldr	r3, [r3, #44]
 5048 001c 9A42     		cmp	r2, r3
 5049 001e 5DD2     		bcs	.L326
3744:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3745:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3746:../../../FreeRTOS_9_0/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3747:../../../FreeRTOS_9_0/Source/tasks.c **** 				not	being used for anything else. */
3748:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 5050              		.loc 1 3748 0
 5051 0020 FB68     		ldr	r3, [r7, #12]
 5052 0022 9B69     		ldr	r3, [r3, #24]
 5053 0024 002B     		cmp	r3, #0
 5054 0026 06DB     		blt	.L328
3749:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3750:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5055              		.loc 1 3750 0
 5056 0028 2E4B     		ldr	r3, .L335
 5057 002a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfW2k76.s 			page 159


 5058 002c DB6A     		ldr	r3, [r3, #44]
 5059 002e C3F10702 		rsb	r2, r3, #7
 5060 0032 FB68     		ldr	r3, [r7, #12]
 5061 0034 9A61     		str	r2, [r3, #24]
 5062              	.L328:
3751:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3752:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3753:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3754:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3755:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3756:../../../FreeRTOS_9_0/Source/tasks.c **** 
3757:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3758:../../../FreeRTOS_9_0/Source/tasks.c **** 				to be moved into a new list. */
3759:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
 5063              		.loc 1 3759 0
 5064 0036 FB68     		ldr	r3, [r7, #12]
 5065 0038 5969     		ldr	r1, [r3, #20]
 5066 003a FB68     		ldr	r3, [r7, #12]
 5067 003c DA6A     		ldr	r2, [r3, #44]
 5068 003e 1346     		mov	r3, r2
 5069 0040 9B00     		lsls	r3, r3, #2
 5070 0042 1344     		add	r3, r3, r2
 5071 0044 9B00     		lsls	r3, r3, #2
 5072 0046 284A     		ldr	r2, .L335+4
 5073 0048 1344     		add	r3, r3, r2
 5074 004a 9942     		cmp	r1, r3
 5075 004c 01D1     		bne	.L329
 5076              		.loc 1 3759 0 is_stmt 0 discriminator 1
 5077 004e 0123     		movs	r3, #1
 5078 0050 00E0     		b	.L330
 5079              	.L329:
 5080              		.loc 1 3759 0 discriminator 2
 5081 0052 0023     		movs	r3, #0
 5082              	.L330:
 5083              		.loc 1 3759 0 discriminator 4
 5084 0054 002B     		cmp	r3, #0
 5085 0056 3CD0     		beq	.L331
3760:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3761:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5086              		.loc 1 3761 0 is_stmt 1
 5087 0058 FB68     		ldr	r3, [r7, #12]
 5088 005a 0433     		adds	r3, r3, #4
 5089 005c 1846     		mov	r0, r3
 5090 005e FFF7FEFF 		bl	uxListRemove
 5091 0062 0346     		mov	r3, r0
 5092 0064 002B     		cmp	r3, #0
 5093 0066 15D1     		bne	.L332
3762:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3763:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5094              		.loc 1 3763 0
 5095 0068 FB68     		ldr	r3, [r7, #12]
 5096 006a DA6A     		ldr	r2, [r3, #44]
 5097 006c 1E49     		ldr	r1, .L335+4
 5098 006e 1346     		mov	r3, r2
 5099 0070 9B00     		lsls	r3, r3, #2
 5100 0072 1344     		add	r3, r3, r2
 5101 0074 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccfW2k76.s 			page 160


 5102 0076 0B44     		add	r3, r3, r1
 5103 0078 1B68     		ldr	r3, [r3]
 5104 007a 002B     		cmp	r3, #0
 5105 007c 0AD1     		bne	.L332
 5106              		.loc 1 3763 0 is_stmt 0 discriminator 1
 5107 007e FB68     		ldr	r3, [r7, #12]
 5108 0080 DB6A     		ldr	r3, [r3, #44]
 5109 0082 1A46     		mov	r2, r3
 5110 0084 0123     		movs	r3, #1
 5111 0086 9340     		lsls	r3, r3, r2
 5112 0088 DA43     		mvns	r2, r3
 5113 008a 184B     		ldr	r3, .L335+8
 5114 008c 1B68     		ldr	r3, [r3]
 5115 008e 1340     		ands	r3, r3, r2
 5116 0090 164A     		ldr	r2, .L335+8
 5117 0092 1360     		str	r3, [r2]
 5118              	.L332:
3764:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3765:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3766:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3767:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3768:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3769:../../../FreeRTOS_9_0/Source/tasks.c **** 
3770:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3771:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5119              		.loc 1 3771 0 is_stmt 1
 5120 0094 134B     		ldr	r3, .L335
 5121 0096 1B68     		ldr	r3, [r3]
 5122 0098 DA6A     		ldr	r2, [r3, #44]
 5123 009a FB68     		ldr	r3, [r7, #12]
 5124 009c DA62     		str	r2, [r3, #44]
3772:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 5125              		.loc 1 3772 0
 5126 009e FB68     		ldr	r3, [r7, #12]
 5127 00a0 DB6A     		ldr	r3, [r3, #44]
 5128 00a2 1A46     		mov	r2, r3
 5129 00a4 0123     		movs	r3, #1
 5130 00a6 03FA02F2 		lsl	r2, r3, r2
 5131 00aa 104B     		ldr	r3, .L335+8
 5132 00ac 1B68     		ldr	r3, [r3]
 5133 00ae 1343     		orrs	r3, r3, r2
 5134 00b0 0E4A     		ldr	r2, .L335+8
 5135 00b2 1360     		str	r3, [r2]
 5136 00b4 FB68     		ldr	r3, [r7, #12]
 5137 00b6 DA6A     		ldr	r2, [r3, #44]
 5138 00b8 1346     		mov	r3, r2
 5139 00ba 9B00     		lsls	r3, r3, #2
 5140 00bc 1344     		add	r3, r3, r2
 5141 00be 9B00     		lsls	r3, r3, #2
 5142 00c0 094A     		ldr	r2, .L335+4
 5143 00c2 1A44     		add	r2, r2, r3
 5144 00c4 FB68     		ldr	r3, [r7, #12]
 5145 00c6 0433     		adds	r3, r3, #4
 5146 00c8 1046     		mov	r0, r2
 5147 00ca 1946     		mov	r1, r3
 5148 00cc FFF7FEFF 		bl	vListInsertEnd
 5149 00d0 04E0     		b	.L326
ARM GAS  /tmp/ccfW2k76.s 			page 161


 5150              	.L331:
3773:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3774:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3775:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3776:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Just inherit the priority. */
3777:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5151              		.loc 1 3777 0
 5152 00d2 044B     		ldr	r3, .L335
 5153 00d4 1B68     		ldr	r3, [r3]
 5154 00d6 DA6A     		ldr	r2, [r3, #44]
 5155 00d8 FB68     		ldr	r3, [r7, #12]
 5156 00da DA62     		str	r2, [r3, #44]
 5157              	.L326:
3778:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3779:../../../FreeRTOS_9_0/Source/tasks.c **** 
3780:../../../FreeRTOS_9_0/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3781:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3782:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3783:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3784:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3785:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3786:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3787:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3788:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3789:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3790:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3791:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5158              		.loc 1 3791 0
 5159 00dc 1037     		adds	r7, r7, #16
 5160              	.LCFI224:
 5161              		.cfi_def_cfa_offset 8
 5162 00de BD46     		mov	sp, r7
 5163              	.LCFI225:
 5164              		.cfi_def_cfa_register 13
 5165              		@ sp needed
 5166 00e0 80BD     		pop	{r7, pc}
 5167              	.L336:
 5168 00e2 00BF     		.align	2
 5169              	.L335:
 5170 00e4 00000000 		.word	pxCurrentTCB
 5171 00e8 00000000 		.word	pxReadyTasksLists
 5172 00ec 00000000 		.word	uxTopReadyPriority
 5173              		.cfi_endproc
 5174              	.LFE48:
 5176              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5177              		.align	2
 5178              		.global	xTaskPriorityDisinherit
 5179              		.thumb
 5180              		.thumb_func
 5182              	xTaskPriorityDisinherit:
 5183              	.LFB49:
3792:../../../FreeRTOS_9_0/Source/tasks.c **** 
3793:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3794:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:../../../FreeRTOS_9_0/Source/tasks.c **** 
3796:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3797:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 162


3798:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3799:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5184              		.loc 1 3799 0
 5185              		.cfi_startproc
 5186              		@ args = 0, pretend = 0, frame = 24
 5187              		@ frame_needed = 1, uses_anonymous_args = 0
 5188 0000 80B5     		push	{r7, lr}
 5189              	.LCFI226:
 5190              		.cfi_def_cfa_offset 8
 5191              		.cfi_offset 7, -8
 5192              		.cfi_offset 14, -4
 5193 0002 86B0     		sub	sp, sp, #24
 5194              	.LCFI227:
 5195              		.cfi_def_cfa_offset 32
 5196 0004 00AF     		add	r7, sp, #0
 5197              	.LCFI228:
 5198              		.cfi_def_cfa_register 7
 5199 0006 7860     		str	r0, [r7, #4]
3800:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5200              		.loc 1 3800 0
 5201 0008 7B68     		ldr	r3, [r7, #4]
 5202 000a 3B61     		str	r3, [r7, #16]
3801:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5203              		.loc 1 3801 0
 5204 000c 0023     		movs	r3, #0
 5205 000e 7B61     		str	r3, [r7, #20]
3802:../../../FreeRTOS_9_0/Source/tasks.c **** 
3803:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5206              		.loc 1 3803 0
 5207 0010 7B68     		ldr	r3, [r7, #4]
 5208 0012 002B     		cmp	r3, #0
 5209 0014 6ED0     		beq	.L338
3804:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3805:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3806:../../../FreeRTOS_9_0/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3807:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3808:../../../FreeRTOS_9_0/Source/tasks.c **** 			be the running state task. */
3809:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5210              		.loc 1 3809 0
 5211 0016 3A4B     		ldr	r3, .L346
 5212 0018 1B68     		ldr	r3, [r3]
 5213 001a 3A69     		ldr	r2, [r7, #16]
 5214 001c 9A42     		cmp	r2, r3
 5215 001e 09D0     		beq	.L339
 5216              	.LBB163:
 5217              	.LBB164:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5218              		.loc 2 237 0 discriminator 1
 5219              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5220 0020 4FF05003 			mov r3, #80												
 5221 0024 83F31188 		msr basepri, r3											
 5222 0028 BFF36F8F 		isb														
 5223 002c BFF34F8F 		dsb														
 5224              	
 5225              	@ 0 "" 2
 5226              		.thumb
 5227 0030 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccfW2k76.s 			page 163


 5228              	.L340:
 5229              	.LBE164:
 5230              	.LBE163:
 5231              		.loc 1 3809 0 discriminator 1
 5232 0032 FEE7     		b	.L340
 5233              	.L339:
3810:../../../FreeRTOS_9_0/Source/tasks.c **** 
3811:../../../FreeRTOS_9_0/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5234              		.loc 1 3811 0
 5235 0034 3B69     		ldr	r3, [r7, #16]
 5236 0036 1B6D     		ldr	r3, [r3, #80]
 5237 0038 002B     		cmp	r3, #0
 5238 003a 09D1     		bne	.L341
 5239              	.LBB165:
 5240              	.LBB166:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5241              		.loc 2 237 0 discriminator 1
 5242              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5243 003c 4FF05003 			mov r3, #80												
 5244 0040 83F31188 		msr basepri, r3											
 5245 0044 BFF36F8F 		isb														
 5246 0048 BFF34F8F 		dsb														
 5247              	
 5248              	@ 0 "" 2
 5249              		.thumb
 5250 004c BB60     		str	r3, [r7, #8]
 5251              	.L342:
 5252              	.LBE166:
 5253              	.LBE165:
 5254              		.loc 1 3811 0 discriminator 2
 5255 004e FEE7     		b	.L342
 5256              	.L341:
3812:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5257              		.loc 1 3812 0
 5258 0050 3B69     		ldr	r3, [r7, #16]
 5259 0052 1B6D     		ldr	r3, [r3, #80]
 5260 0054 5A1E     		subs	r2, r3, #1
 5261 0056 3B69     		ldr	r3, [r7, #16]
 5262 0058 1A65     		str	r2, [r3, #80]
3813:../../../FreeRTOS_9_0/Source/tasks.c **** 
3814:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3815:../../../FreeRTOS_9_0/Source/tasks.c **** 			task? */
3816:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5263              		.loc 1 3816 0
 5264 005a 3B69     		ldr	r3, [r7, #16]
 5265 005c DA6A     		ldr	r2, [r3, #44]
 5266 005e 3B69     		ldr	r3, [r7, #16]
 5267 0060 DB6C     		ldr	r3, [r3, #76]
 5268 0062 9A42     		cmp	r2, r3
 5269 0064 46D0     		beq	.L338
3817:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3818:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3819:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5270              		.loc 1 3819 0
 5271 0066 3B69     		ldr	r3, [r7, #16]
 5272 0068 1B6D     		ldr	r3, [r3, #80]
 5273 006a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccfW2k76.s 			page 164


 5274 006c 42D1     		bne	.L338
3820:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3821:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3822:../../../FreeRTOS_9_0/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3823:../../../FreeRTOS_9_0/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3824:../../../FreeRTOS_9_0/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3825:../../../FreeRTOS_9_0/Source/tasks.c **** 					the	holding task from the ready	list. */
3826:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5275              		.loc 1 3826 0
 5276 006e 3B69     		ldr	r3, [r7, #16]
 5277 0070 0433     		adds	r3, r3, #4
 5278 0072 1846     		mov	r0, r3
 5279 0074 FFF7FEFF 		bl	uxListRemove
 5280 0078 0346     		mov	r3, r0
 5281 007a 002B     		cmp	r3, #0
 5282 007c 15D1     		bne	.L343
3827:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3828:../../../FreeRTOS_9_0/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5283              		.loc 1 3828 0
 5284 007e 3B69     		ldr	r3, [r7, #16]
 5285 0080 DA6A     		ldr	r2, [r3, #44]
 5286 0082 2049     		ldr	r1, .L346+4
 5287 0084 1346     		mov	r3, r2
 5288 0086 9B00     		lsls	r3, r3, #2
 5289 0088 1344     		add	r3, r3, r2
 5290 008a 9B00     		lsls	r3, r3, #2
 5291 008c 0B44     		add	r3, r3, r1
 5292 008e 1B68     		ldr	r3, [r3]
 5293 0090 002B     		cmp	r3, #0
 5294 0092 0AD1     		bne	.L343
 5295              		.loc 1 3828 0 is_stmt 0 discriminator 1
 5296 0094 3B69     		ldr	r3, [r7, #16]
 5297 0096 DB6A     		ldr	r3, [r3, #44]
 5298 0098 1A46     		mov	r2, r3
 5299 009a 0123     		movs	r3, #1
 5300 009c 9340     		lsls	r3, r3, r2
 5301 009e DA43     		mvns	r2, r3
 5302 00a0 194B     		ldr	r3, .L346+8
 5303 00a2 1B68     		ldr	r3, [r3]
 5304 00a4 1340     		ands	r3, r3, r2
 5305 00a6 184A     		ldr	r2, .L346+8
 5306 00a8 1360     		str	r3, [r2]
 5307              	.L343:
3829:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3830:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
3831:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
3832:../../../FreeRTOS_9_0/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
3834:../../../FreeRTOS_9_0/Source/tasks.c **** 
3835:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3836:../../../FreeRTOS_9_0/Source/tasks.c **** 					new	ready list. */
3837:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3838:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5308              		.loc 1 3838 0 is_stmt 1
 5309 00aa 3B69     		ldr	r3, [r7, #16]
 5310 00ac DA6C     		ldr	r2, [r3, #76]
 5311 00ae 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccfW2k76.s 			page 165


 5312 00b0 DA62     		str	r2, [r3, #44]
3839:../../../FreeRTOS_9_0/Source/tasks.c **** 
3840:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3841:../../../FreeRTOS_9_0/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3842:../../../FreeRTOS_9_0/Source/tasks.c **** 					running to give back the mutex. */
3843:../../../FreeRTOS_9_0/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5313              		.loc 1 3843 0
 5314 00b2 3B69     		ldr	r3, [r7, #16]
 5315 00b4 DB6A     		ldr	r3, [r3, #44]
 5316 00b6 C3F10702 		rsb	r2, r3, #7
 5317 00ba 3B69     		ldr	r3, [r7, #16]
 5318 00bc 9A61     		str	r2, [r3, #24]
3844:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvReaddTaskToReadyList( pxTCB );
 5319              		.loc 1 3844 0
 5320 00be 3B69     		ldr	r3, [r7, #16]
 5321 00c0 DB6A     		ldr	r3, [r3, #44]
 5322 00c2 1A46     		mov	r2, r3
 5323 00c4 0123     		movs	r3, #1
 5324 00c6 03FA02F2 		lsl	r2, r3, r2
 5325 00ca 0F4B     		ldr	r3, .L346+8
 5326 00cc 1B68     		ldr	r3, [r3]
 5327 00ce 1343     		orrs	r3, r3, r2
 5328 00d0 0D4A     		ldr	r2, .L346+8
 5329 00d2 1360     		str	r3, [r2]
 5330 00d4 3B69     		ldr	r3, [r7, #16]
 5331 00d6 DA6A     		ldr	r2, [r3, #44]
 5332 00d8 1346     		mov	r3, r2
 5333 00da 9B00     		lsls	r3, r3, #2
 5334 00dc 1344     		add	r3, r3, r2
 5335 00de 9B00     		lsls	r3, r3, #2
 5336 00e0 084A     		ldr	r2, .L346+4
 5337 00e2 1A44     		add	r2, r2, r3
 5338 00e4 3B69     		ldr	r3, [r7, #16]
 5339 00e6 0433     		adds	r3, r3, #4
 5340 00e8 1046     		mov	r0, r2
 5341 00ea 1946     		mov	r1, r3
 5342 00ec FFF7FEFF 		bl	vListInsertEnd
3845:../../../FreeRTOS_9_0/Source/tasks.c **** 
3846:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3847:../../../FreeRTOS_9_0/Source/tasks.c **** 					This is only actually required in the corner case whereby
3848:../../../FreeRTOS_9_0/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3849:../../../FreeRTOS_9_0/Source/tasks.c **** 					in an order different to that in which they were taken.
3850:../../../FreeRTOS_9_0/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3851:../../../FreeRTOS_9_0/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3852:../../../FreeRTOS_9_0/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3853:../../../FreeRTOS_9_0/Source/tasks.c **** 					a task is waiting on it or not. */
3854:../../../FreeRTOS_9_0/Source/tasks.c **** 					xReturn = pdTRUE;
 5343              		.loc 1 3854 0
 5344 00f0 0123     		movs	r3, #1
 5345 00f2 7B61     		str	r3, [r7, #20]
 5346              	.L338:
3855:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3856:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3857:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3858:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3859:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3860:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/ccfW2k76.s 			page 166


3861:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3862:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3863:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3864:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3865:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3866:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3867:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3868:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3869:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3870:../../../FreeRTOS_9_0/Source/tasks.c **** 
3871:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 5347              		.loc 1 3871 0
 5348 00f4 7B69     		ldr	r3, [r7, #20]
3872:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5349              		.loc 1 3872 0
 5350 00f6 1846     		mov	r0, r3
 5351 00f8 1837     		adds	r7, r7, #24
 5352              	.LCFI229:
 5353              		.cfi_def_cfa_offset 8
 5354 00fa BD46     		mov	sp, r7
 5355              	.LCFI230:
 5356              		.cfi_def_cfa_register 13
 5357              		@ sp needed
 5358 00fc 80BD     		pop	{r7, pc}
 5359              	.L347:
 5360 00fe 00BF     		.align	2
 5361              	.L346:
 5362 0100 00000000 		.word	pxCurrentTCB
 5363 0104 00000000 		.word	pxReadyTasksLists
 5364 0108 00000000 		.word	uxTopReadyPriority
 5365              		.cfi_endproc
 5366              	.LFE49:
 5368              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5369              		.align	2
 5370              		.global	uxTaskResetEventItemValue
 5371              		.thumb
 5372              		.thumb_func
 5374              	uxTaskResetEventItemValue:
 5375              	.LFB50:
3873:../../../FreeRTOS_9_0/Source/tasks.c **** 
3874:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3875:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3876:../../../FreeRTOS_9_0/Source/tasks.c **** 
3877:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3878:../../../FreeRTOS_9_0/Source/tasks.c **** 
3879:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskEnterCritical( void )
3880:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3881:../../../FreeRTOS_9_0/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3882:../../../FreeRTOS_9_0/Source/tasks.c **** 
3883:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3884:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3885:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3886:../../../FreeRTOS_9_0/Source/tasks.c **** 
3887:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3888:../../../FreeRTOS_9_0/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3889:../../../FreeRTOS_9_0/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3890:../../../FreeRTOS_9_0/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
ARM GAS  /tmp/ccfW2k76.s 			page 167


3891:../../../FreeRTOS_9_0/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3892:../../../FreeRTOS_9_0/Source/tasks.c **** 			critical section. */
3893:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3894:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3895:../../../FreeRTOS_9_0/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3896:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3897:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3898:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3899:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3900:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3901:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3902:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3903:../../../FreeRTOS_9_0/Source/tasks.c **** 
3904:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3905:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3906:../../../FreeRTOS_9_0/Source/tasks.c **** 
3907:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3908:../../../FreeRTOS_9_0/Source/tasks.c **** 
3909:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskExitCritical( void )
3910:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3911:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3912:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3913:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3914:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3915:../../../FreeRTOS_9_0/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3916:../../../FreeRTOS_9_0/Source/tasks.c **** 
3917:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3918:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3919:../../../FreeRTOS_9_0/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3920:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3921:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
3922:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
3923:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3924:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
3925:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3926:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
3927:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
3928:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3929:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
3930:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3931:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
3932:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3933:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3934:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3935:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3936:../../../FreeRTOS_9_0/Source/tasks.c **** 
3937:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3938:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:../../../FreeRTOS_9_0/Source/tasks.c **** 
3940:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:../../../FreeRTOS_9_0/Source/tasks.c **** 
3942:../../../FreeRTOS_9_0/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3943:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3944:../../../FreeRTOS_9_0/Source/tasks.c **** 	size_t x;
3945:../../../FreeRTOS_9_0/Source/tasks.c **** 
3946:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Start by copying the entire string. */
3947:../../../FreeRTOS_9_0/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
ARM GAS  /tmp/ccfW2k76.s 			page 168


3948:../../../FreeRTOS_9_0/Source/tasks.c **** 
3949:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3950:../../../FreeRTOS_9_0/Source/tasks.c **** 		printed out. */
3951:../../../FreeRTOS_9_0/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3952:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
3953:../../../FreeRTOS_9_0/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3954:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
3955:../../../FreeRTOS_9_0/Source/tasks.c **** 
3956:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Terminate. */
3957:../../../FreeRTOS_9_0/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3958:../../../FreeRTOS_9_0/Source/tasks.c **** 
3959:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Return the new end of string. */
3960:../../../FreeRTOS_9_0/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3961:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
3962:../../../FreeRTOS_9_0/Source/tasks.c **** 
3963:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3964:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
3965:../../../FreeRTOS_9_0/Source/tasks.c **** 
3966:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3967:../../../FreeRTOS_9_0/Source/tasks.c **** 
3968:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3969:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
3970:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3971:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3972:../../../FreeRTOS_9_0/Source/tasks.c **** 	char cStatus;
3973:../../../FreeRTOS_9_0/Source/tasks.c **** 
3974:../../../FreeRTOS_9_0/Source/tasks.c **** 		/*
3975:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * PLEASE NOTE:
3976:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3977:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3978:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3979:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * scheduler.
3980:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3981:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3982:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3983:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * displays task names, states and stack usage.
3984:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3985:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3986:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3987:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3988:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3989:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3990:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3991:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * snprintf() implementation!).
3992:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
3993:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3994:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3995:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * through a call to vTaskList().
3996:../../../FreeRTOS_9_0/Source/tasks.c **** 		 */
3997:../../../FreeRTOS_9_0/Source/tasks.c **** 
3998:../../../FreeRTOS_9_0/Source/tasks.c **** 
3999:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4000:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4001:../../../FreeRTOS_9_0/Source/tasks.c **** 
4002:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4003:../../../FreeRTOS_9_0/Source/tasks.c **** 		function is executing. */
4004:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
ARM GAS  /tmp/ccfW2k76.s 			page 169


4005:../../../FreeRTOS_9_0/Source/tasks.c **** 
4006:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4007:../../../FreeRTOS_9_0/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4008:../../../FreeRTOS_9_0/Source/tasks.c **** 		equate to NULL. */
4009:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4010:../../../FreeRTOS_9_0/Source/tasks.c **** 
4011:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4012:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4013:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the (binary) data. */
4014:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4015:../../../FreeRTOS_9_0/Source/tasks.c **** 
4016:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4017:../../../FreeRTOS_9_0/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4018:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4019:../../../FreeRTOS_9_0/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4020:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4021:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4022:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
4023:../../../FreeRTOS_9_0/Source/tasks.c **** 
4024:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4025:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
4026:../../../FreeRTOS_9_0/Source/tasks.c **** 
4027:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4028:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
4029:../../../FreeRTOS_9_0/Source/tasks.c **** 
4030:../../../FreeRTOS_9_0/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4031:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
4032:../../../FreeRTOS_9_0/Source/tasks.c **** 
4033:../../../FreeRTOS_9_0/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4034:../../../FreeRTOS_9_0/Source/tasks.c **** 										to prevent static checking errors. */
4035:../../../FreeRTOS_9_0/Source/tasks.c **** 										cStatus = 0x00;
4036:../../../FreeRTOS_9_0/Source/tasks.c **** 										break;
4037:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4038:../../../FreeRTOS_9_0/Source/tasks.c **** 
4039:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4040:../../../FreeRTOS_9_0/Source/tasks.c **** 				can be printed in tabular form more easily. */
4041:../../../FreeRTOS_9_0/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4042:../../../FreeRTOS_9_0/Source/tasks.c **** 
4043:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Write the rest of the string. */
4044:../../../FreeRTOS_9_0/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4045:../../../FreeRTOS_9_0/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4046:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4047:../../../FreeRTOS_9_0/Source/tasks.c **** 
4048:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4049:../../../FreeRTOS_9_0/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4050:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4051:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4052:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4053:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4054:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4055:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4056:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4057:../../../FreeRTOS_9_0/Source/tasks.c **** 
4058:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4059:../../../FreeRTOS_9_0/Source/tasks.c **** /*----------------------------------------------------------*/
4060:../../../FreeRTOS_9_0/Source/tasks.c **** 
4061:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
ARM GAS  /tmp/ccfW2k76.s 			page 170


4062:../../../FreeRTOS_9_0/Source/tasks.c **** 
4063:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4064:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4065:../../../FreeRTOS_9_0/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4066:../../../FreeRTOS_9_0/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4067:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4068:../../../FreeRTOS_9_0/Source/tasks.c **** 
4069:../../../FreeRTOS_9_0/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4070:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4071:../../../FreeRTOS_9_0/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4072:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4073:../../../FreeRTOS_9_0/Source/tasks.c **** 		#endif
4074:../../../FreeRTOS_9_0/Source/tasks.c **** 
4075:../../../FreeRTOS_9_0/Source/tasks.c **** 		/*
4076:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * PLEASE NOTE:
4077:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4078:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4079:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4080:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * scheduler.
4081:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4082:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4083:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4084:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4085:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * in both absolute and percentage terms.
4086:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4087:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4088:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4089:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4090:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4091:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4092:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4093:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * a full snprintf() implementation!).
4094:../../../FreeRTOS_9_0/Source/tasks.c **** 		 *
4095:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4096:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4097:../../../FreeRTOS_9_0/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4098:../../../FreeRTOS_9_0/Source/tasks.c **** 		 */
4099:../../../FreeRTOS_9_0/Source/tasks.c **** 
4100:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4101:../../../FreeRTOS_9_0/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4102:../../../FreeRTOS_9_0/Source/tasks.c **** 
4103:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4104:../../../FreeRTOS_9_0/Source/tasks.c **** 		function is executing. */
4105:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4106:../../../FreeRTOS_9_0/Source/tasks.c **** 
4107:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4108:../../../FreeRTOS_9_0/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4109:../../../FreeRTOS_9_0/Source/tasks.c **** 		equate to NULL. */
4110:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4111:../../../FreeRTOS_9_0/Source/tasks.c **** 
4112:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4113:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4114:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Generate the (binary) data. */
4115:../../../FreeRTOS_9_0/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4116:../../../FreeRTOS_9_0/Source/tasks.c **** 
4117:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* For percentage calculations. */
4118:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulTotalTime /= 100UL;
ARM GAS  /tmp/ccfW2k76.s 			page 171


4119:../../../FreeRTOS_9_0/Source/tasks.c **** 
4120:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4121:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ulTotalTime > 0 )
4122:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4123:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4124:../../../FreeRTOS_9_0/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4125:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4126:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4127:../../../FreeRTOS_9_0/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4128:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4129:../../../FreeRTOS_9_0/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4130:../../../FreeRTOS_9_0/Source/tasks.c **** 
4131:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* Write the task name to the string, padding with
4132:../../../FreeRTOS_9_0/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4133:../../../FreeRTOS_9_0/Source/tasks.c **** 					easily. */
4134:../../../FreeRTOS_9_0/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4135:../../../FreeRTOS_9_0/Source/tasks.c **** 
4136:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4137:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4138:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4139:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4140:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4141:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4142:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
4143:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4144:../../../FreeRTOS_9_0/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4145:../../../FreeRTOS_9_0/Source/tasks.c **** 							printf() library can be used. */
4146:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4147:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4148:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
4149:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4150:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4151:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4152:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4153:../../../FreeRTOS_9_0/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4154:../../../FreeRTOS_9_0/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4155:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4156:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4157:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4158:../../../FreeRTOS_9_0/Source/tasks.c **** 						#else
4159:../../../FreeRTOS_9_0/Source/tasks.c **** 						{
4160:../../../FreeRTOS_9_0/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4161:../../../FreeRTOS_9_0/Source/tasks.c **** 							printf() library can be used. */
4162:../../../FreeRTOS_9_0/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4163:../../../FreeRTOS_9_0/Source/tasks.c **** 						}
4164:../../../FreeRTOS_9_0/Source/tasks.c **** 						#endif
4165:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4166:../../../FreeRTOS_9_0/Source/tasks.c **** 
4167:../../../FreeRTOS_9_0/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4168:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4169:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4170:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4171:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4172:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4173:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4174:../../../FreeRTOS_9_0/Source/tasks.c **** 
4175:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
ARM GAS  /tmp/ccfW2k76.s 			page 172


4176:../../../FreeRTOS_9_0/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4177:../../../FreeRTOS_9_0/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4178:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4179:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4180:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4181:../../../FreeRTOS_9_0/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4182:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4183:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4184:../../../FreeRTOS_9_0/Source/tasks.c **** 
4185:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4186:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4187:../../../FreeRTOS_9_0/Source/tasks.c **** 
4188:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4189:../../../FreeRTOS_9_0/Source/tasks.c **** {
 5376              		.loc 1 4189 0
 5377              		.cfi_startproc
 5378              		@ args = 0, pretend = 0, frame = 8
 5379              		@ frame_needed = 1, uses_anonymous_args = 0
 5380              		@ link register save eliminated.
 5381 0000 80B4     		push	{r7}
 5382              	.LCFI231:
 5383              		.cfi_def_cfa_offset 4
 5384              		.cfi_offset 7, -4
 5385 0002 83B0     		sub	sp, sp, #12
 5386              	.LCFI232:
 5387              		.cfi_def_cfa_offset 16
 5388 0004 00AF     		add	r7, sp, #0
 5389              	.LCFI233:
 5390              		.cfi_def_cfa_register 7
4190:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t uxReturn;
4191:../../../FreeRTOS_9_0/Source/tasks.c **** 
4192:../../../FreeRTOS_9_0/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5391              		.loc 1 4192 0
 5392 0006 094B     		ldr	r3, .L350
 5393 0008 1B68     		ldr	r3, [r3]
 5394 000a 9B69     		ldr	r3, [r3, #24]
 5395 000c 7B60     		str	r3, [r7, #4]
4193:../../../FreeRTOS_9_0/Source/tasks.c **** 
4194:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4195:../../../FreeRTOS_9_0/Source/tasks.c **** 	queues and semaphores. */
4196:../../../FreeRTOS_9_0/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5396              		.loc 1 4196 0
 5397 000e 074B     		ldr	r3, .L350
 5398 0010 1B68     		ldr	r3, [r3]
 5399 0012 064A     		ldr	r2, .L350
 5400 0014 1268     		ldr	r2, [r2]
 5401 0016 D26A     		ldr	r2, [r2, #44]
 5402 0018 C2F10702 		rsb	r2, r2, #7
 5403 001c 9A61     		str	r2, [r3, #24]
4197:../../../FreeRTOS_9_0/Source/tasks.c **** 
4198:../../../FreeRTOS_9_0/Source/tasks.c **** 	return uxReturn;
 5404              		.loc 1 4198 0
 5405 001e 7B68     		ldr	r3, [r7, #4]
4199:../../../FreeRTOS_9_0/Source/tasks.c **** }
 5406              		.loc 1 4199 0
 5407 0020 1846     		mov	r0, r3
 5408 0022 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccfW2k76.s 			page 173


 5409              	.LCFI234:
 5410              		.cfi_def_cfa_offset 4
 5411 0024 BD46     		mov	sp, r7
 5412              	.LCFI235:
 5413              		.cfi_def_cfa_register 13
 5414              		@ sp needed
 5415 0026 5DF8047B 		ldr	r7, [sp], #4
 5416              	.LCFI236:
 5417              		.cfi_restore 7
 5418              		.cfi_def_cfa_offset 0
 5419 002a 7047     		bx	lr
 5420              	.L351:
 5421              		.align	2
 5422              	.L350:
 5423 002c 00000000 		.word	pxCurrentTCB
 5424              		.cfi_endproc
 5425              	.LFE50:
 5427              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5428              		.align	2
 5429              		.global	pvTaskIncrementMutexHeldCount
 5430              		.thumb
 5431              		.thumb_func
 5433              	pvTaskIncrementMutexHeldCount:
 5434              	.LFB51:
4200:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4201:../../../FreeRTOS_9_0/Source/tasks.c **** 
4202:../../../FreeRTOS_9_0/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4203:../../../FreeRTOS_9_0/Source/tasks.c **** 
4204:../../../FreeRTOS_9_0/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4205:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5435              		.loc 1 4205 0
 5436              		.cfi_startproc
 5437              		@ args = 0, pretend = 0, frame = 0
 5438              		@ frame_needed = 1, uses_anonymous_args = 0
 5439              		@ link register save eliminated.
 5440 0000 80B4     		push	{r7}
 5441              	.LCFI237:
 5442              		.cfi_def_cfa_offset 4
 5443              		.cfi_offset 7, -4
 5444 0002 00AF     		add	r7, sp, #0
 5445              	.LCFI238:
 5446              		.cfi_def_cfa_register 7
4206:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4207:../../../FreeRTOS_9_0/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4208:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5447              		.loc 1 4208 0
 5448 0004 074B     		ldr	r3, .L355
 5449 0006 1B68     		ldr	r3, [r3]
 5450 0008 002B     		cmp	r3, #0
 5451 000a 04D0     		beq	.L353
4209:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4210:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5452              		.loc 1 4210 0
 5453 000c 054B     		ldr	r3, .L355
 5454 000e 1B68     		ldr	r3, [r3]
 5455 0010 1A6D     		ldr	r2, [r3, #80]
 5456 0012 0132     		adds	r2, r2, #1
ARM GAS  /tmp/ccfW2k76.s 			page 174


 5457 0014 1A65     		str	r2, [r3, #80]
 5458              	.L353:
4211:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4212:../../../FreeRTOS_9_0/Source/tasks.c **** 
4213:../../../FreeRTOS_9_0/Source/tasks.c **** 		return pxCurrentTCB;
 5459              		.loc 1 4213 0
 5460 0016 034B     		ldr	r3, .L355
 5461 0018 1B68     		ldr	r3, [r3]
4214:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5462              		.loc 1 4214 0
 5463 001a 1846     		mov	r0, r3
 5464 001c BD46     		mov	sp, r7
 5465              	.LCFI239:
 5466              		.cfi_def_cfa_register 13
 5467              		@ sp needed
 5468 001e 5DF8047B 		ldr	r7, [sp], #4
 5469              	.LCFI240:
 5470              		.cfi_restore 7
 5471              		.cfi_def_cfa_offset 0
 5472 0022 7047     		bx	lr
 5473              	.L356:
 5474              		.align	2
 5475              	.L355:
 5476 0024 00000000 		.word	pxCurrentTCB
 5477              		.cfi_endproc
 5478              	.LFE51:
 5480              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5481              		.align	2
 5482              		.global	ulTaskNotifyTake
 5483              		.thumb
 5484              		.thumb_func
 5486              	ulTaskNotifyTake:
 5487              	.LFB52:
4215:../../../FreeRTOS_9_0/Source/tasks.c **** 
4216:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4217:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4218:../../../FreeRTOS_9_0/Source/tasks.c **** 
4219:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4220:../../../FreeRTOS_9_0/Source/tasks.c **** 
4221:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4222:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5488              		.loc 1 4222 0
 5489              		.cfi_startproc
 5490              		@ args = 0, pretend = 0, frame = 16
 5491              		@ frame_needed = 1, uses_anonymous_args = 0
 5492 0000 80B5     		push	{r7, lr}
 5493              	.LCFI241:
 5494              		.cfi_def_cfa_offset 8
 5495              		.cfi_offset 7, -8
 5496              		.cfi_offset 14, -4
 5497 0002 84B0     		sub	sp, sp, #16
 5498              	.LCFI242:
 5499              		.cfi_def_cfa_offset 24
 5500 0004 00AF     		add	r7, sp, #0
 5501              	.LCFI243:
 5502              		.cfi_def_cfa_register 7
 5503 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccfW2k76.s 			page 175


 5504 0008 3960     		str	r1, [r7]
4223:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint32_t ulReturn;
4224:../../../FreeRTOS_9_0/Source/tasks.c **** 
4225:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 5505              		.loc 1 4225 0
 5506 000a FFF7FEFF 		bl	vPortEnterCritical
4226:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4227:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4228:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5507              		.loc 1 4228 0
 5508 000e 1E4B     		ldr	r3, .L363
 5509 0010 1B68     		ldr	r3, [r3]
 5510 0012 5B6D     		ldr	r3, [r3, #84]
 5511 0014 002B     		cmp	r3, #0
 5512 0016 13D1     		bne	.L358
4229:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4230:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4231:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5513              		.loc 1 4231 0
 5514 0018 1B4B     		ldr	r3, .L363
 5515 001a 1B68     		ldr	r3, [r3]
 5516 001c 0122     		movs	r2, #1
 5517 001e 83F85820 		strb	r2, [r3, #88]
4232:../../../FreeRTOS_9_0/Source/tasks.c **** 
4233:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5518              		.loc 1 4233 0
 5519 0022 3B68     		ldr	r3, [r7]
 5520 0024 002B     		cmp	r3, #0
 5521 0026 0BD0     		beq	.L358
4234:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4235:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5522              		.loc 1 4235 0
 5523 0028 3868     		ldr	r0, [r7]
 5524 002a 0121     		movs	r1, #1
 5525 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4236:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4237:../../../FreeRTOS_9_0/Source/tasks.c **** 
4238:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4239:../../../FreeRTOS_9_0/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4240:../../../FreeRTOS_9_0/Source/tasks.c **** 					critical section exits) - but it is not something that
4241:../../../FreeRTOS_9_0/Source/tasks.c **** 					application code should ever do. */
4242:../../../FreeRTOS_9_0/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5526              		.loc 1 4242 0
 5527 0030 164B     		ldr	r3, .L363+4
 5528 0032 4FF08052 		mov	r2, #268435456
 5529 0036 1A60     		str	r2, [r3]
 5530              	@ 4242 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 5531 0038 BFF34F8F 		dsb
 5532              	@ 0 "" 2
 5533              	@ 4242 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 5534 003c BFF36F8F 		isb
 5535              	@ 0 "" 2
 5536              		.thumb
 5537              	.L358:
4243:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4244:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4245:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
ARM GAS  /tmp/ccfW2k76.s 			page 176


4246:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4247:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4248:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4249:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4250:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4251:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4252:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4253:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4254:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5538              		.loc 1 4254 0
 5539 0040 FFF7FEFF 		bl	vPortExitCritical
4255:../../../FreeRTOS_9_0/Source/tasks.c **** 
4256:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 5540              		.loc 1 4256 0
 5541 0044 FFF7FEFF 		bl	vPortEnterCritical
4257:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4258:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4259:../../../FreeRTOS_9_0/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5542              		.loc 1 4259 0
 5543 0048 0F4B     		ldr	r3, .L363
 5544 004a 1B68     		ldr	r3, [r3]
 5545 004c 5B6D     		ldr	r3, [r3, #84]
 5546 004e FB60     		str	r3, [r7, #12]
4260:../../../FreeRTOS_9_0/Source/tasks.c **** 
4261:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ulReturn != 0UL )
 5547              		.loc 1 4261 0
 5548 0050 FB68     		ldr	r3, [r7, #12]
 5549 0052 002B     		cmp	r3, #0
 5550 0054 0CD0     		beq	.L359
4262:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4263:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5551              		.loc 1 4263 0
 5552 0056 7B68     		ldr	r3, [r7, #4]
 5553 0058 002B     		cmp	r3, #0
 5554 005a 04D0     		beq	.L360
4264:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4265:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5555              		.loc 1 4265 0
 5556 005c 0A4B     		ldr	r3, .L363
 5557 005e 1B68     		ldr	r3, [r3]
 5558 0060 0022     		movs	r2, #0
 5559 0062 5A65     		str	r2, [r3, #84]
 5560 0064 04E0     		b	.L359
 5561              	.L360:
4266:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4267:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4268:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4269:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 5562              		.loc 1 4269 0
 5563 0066 084B     		ldr	r3, .L363
 5564 0068 1B68     		ldr	r3, [r3]
 5565 006a FA68     		ldr	r2, [r7, #12]
 5566 006c 013A     		subs	r2, r2, #1
 5567 006e 5A65     		str	r2, [r3, #84]
 5568              	.L359:
4270:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4271:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
ARM GAS  /tmp/ccfW2k76.s 			page 177


4272:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4273:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4274:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4275:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4276:../../../FreeRTOS_9_0/Source/tasks.c **** 
4277:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5569              		.loc 1 4277 0
 5570 0070 054B     		ldr	r3, .L363
 5571 0072 1B68     		ldr	r3, [r3]
 5572 0074 0022     		movs	r2, #0
 5573 0076 83F85820 		strb	r2, [r3, #88]
4278:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4279:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5574              		.loc 1 4279 0
 5575 007a FFF7FEFF 		bl	vPortExitCritical
4280:../../../FreeRTOS_9_0/Source/tasks.c **** 
4281:../../../FreeRTOS_9_0/Source/tasks.c **** 		return ulReturn;
 5576              		.loc 1 4281 0
 5577 007e FB68     		ldr	r3, [r7, #12]
4282:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5578              		.loc 1 4282 0
 5579 0080 1846     		mov	r0, r3
 5580 0082 1037     		adds	r7, r7, #16
 5581              	.LCFI244:
 5582              		.cfi_def_cfa_offset 8
 5583 0084 BD46     		mov	sp, r7
 5584              	.LCFI245:
 5585              		.cfi_def_cfa_register 13
 5586              		@ sp needed
 5587 0086 80BD     		pop	{r7, pc}
 5588              	.L364:
 5589              		.align	2
 5590              	.L363:
 5591 0088 00000000 		.word	pxCurrentTCB
 5592 008c 04ED00E0 		.word	-536810236
 5593              		.cfi_endproc
 5594              	.LFE52:
 5596              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5597              		.align	2
 5598              		.global	xTaskNotifyWait
 5599              		.thumb
 5600              		.thumb_func
 5602              	xTaskNotifyWait:
 5603              	.LFB53:
4283:../../../FreeRTOS_9_0/Source/tasks.c **** 
4284:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4285:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:../../../FreeRTOS_9_0/Source/tasks.c **** 
4287:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4288:../../../FreeRTOS_9_0/Source/tasks.c **** 
4289:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4290:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5604              		.loc 1 4290 0
 5605              		.cfi_startproc
 5606              		@ args = 0, pretend = 0, frame = 24
 5607              		@ frame_needed = 1, uses_anonymous_args = 0
 5608 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccfW2k76.s 			page 178


 5609              	.LCFI246:
 5610              		.cfi_def_cfa_offset 8
 5611              		.cfi_offset 7, -8
 5612              		.cfi_offset 14, -4
 5613 0002 86B0     		sub	sp, sp, #24
 5614              	.LCFI247:
 5615              		.cfi_def_cfa_offset 32
 5616 0004 00AF     		add	r7, sp, #0
 5617              	.LCFI248:
 5618              		.cfi_def_cfa_register 7
 5619 0006 F860     		str	r0, [r7, #12]
 5620 0008 B960     		str	r1, [r7, #8]
 5621 000a 7A60     		str	r2, [r7, #4]
 5622 000c 3B60     		str	r3, [r7]
4291:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
4292:../../../FreeRTOS_9_0/Source/tasks.c **** 
4293:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 5623              		.loc 1 4293 0
 5624 000e FFF7FEFF 		bl	vPortEnterCritical
4294:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4295:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4296:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5625              		.loc 1 4296 0
 5626 0012 264B     		ldr	r3, .L371
 5627 0014 1B68     		ldr	r3, [r3]
 5628 0016 93F85830 		ldrb	r3, [r3, #88]
 5629 001a DBB2     		uxtb	r3, r3
 5630 001c 022B     		cmp	r3, #2
 5631 001e 1AD0     		beq	.L366
4297:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4298:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4299:../../../FreeRTOS_9_0/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4300:../../../FreeRTOS_9_0/Source/tasks.c **** 				clear the value to zero. */
4301:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5632              		.loc 1 4301 0
 5633 0020 224B     		ldr	r3, .L371
 5634 0022 1B68     		ldr	r3, [r3]
 5635 0024 596D     		ldr	r1, [r3, #84]
 5636 0026 FA68     		ldr	r2, [r7, #12]
 5637 0028 D243     		mvns	r2, r2
 5638 002a 0A40     		ands	r2, r2, r1
 5639 002c 5A65     		str	r2, [r3, #84]
4302:../../../FreeRTOS_9_0/Source/tasks.c **** 
4303:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4304:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5640              		.loc 1 4304 0
 5641 002e 1F4B     		ldr	r3, .L371
 5642 0030 1B68     		ldr	r3, [r3]
 5643 0032 0122     		movs	r2, #1
 5644 0034 83F85820 		strb	r2, [r3, #88]
4305:../../../FreeRTOS_9_0/Source/tasks.c **** 
4306:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5645              		.loc 1 4306 0
 5646 0038 3B68     		ldr	r3, [r7]
 5647 003a 002B     		cmp	r3, #0
 5648 003c 0BD0     		beq	.L366
4307:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
ARM GAS  /tmp/ccfW2k76.s 			page 179


4308:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5649              		.loc 1 4308 0
 5650 003e 3868     		ldr	r0, [r7]
 5651 0040 0121     		movs	r1, #1
 5652 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4309:../../../FreeRTOS_9_0/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4310:../../../FreeRTOS_9_0/Source/tasks.c **** 
4311:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4312:../../../FreeRTOS_9_0/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4313:../../../FreeRTOS_9_0/Source/tasks.c **** 					critical section exits) - but it is not something that
4314:../../../FreeRTOS_9_0/Source/tasks.c **** 					application code should ever do. */
4315:../../../FreeRTOS_9_0/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5653              		.loc 1 4315 0
 5654 0046 1A4B     		ldr	r3, .L371+4
 5655 0048 4FF08052 		mov	r2, #268435456
 5656 004c 1A60     		str	r2, [r3]
 5657              	@ 4315 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 5658 004e BFF34F8F 		dsb
 5659              	@ 0 "" 2
 5660              	@ 4315 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 5661 0052 BFF36F8F 		isb
 5662              	@ 0 "" 2
 5663              		.thumb
 5664              	.L366:
4316:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4317:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4318:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4319:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4320:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4321:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4322:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4323:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4324:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4325:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4326:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4327:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5665              		.loc 1 4327 0
 5666 0056 FFF7FEFF 		bl	vPortExitCritical
4328:../../../FreeRTOS_9_0/Source/tasks.c **** 
4329:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 5667              		.loc 1 4329 0
 5668 005a FFF7FEFF 		bl	vPortEnterCritical
4330:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4331:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4332:../../../FreeRTOS_9_0/Source/tasks.c **** 
4333:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5669              		.loc 1 4333 0
 5670 005e 7B68     		ldr	r3, [r7, #4]
 5671 0060 002B     		cmp	r3, #0
 5672 0062 04D0     		beq	.L367
4334:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4335:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4336:../../../FreeRTOS_9_0/Source/tasks.c **** 				have changed. */
4337:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5673              		.loc 1 4337 0
 5674 0064 114B     		ldr	r3, .L371
 5675 0066 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfW2k76.s 			page 180


 5676 0068 5A6D     		ldr	r2, [r3, #84]
 5677 006a 7B68     		ldr	r3, [r7, #4]
 5678 006c 1A60     		str	r2, [r3]
 5679              	.L367:
4338:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4339:../../../FreeRTOS_9_0/Source/tasks.c **** 
4340:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4341:../../../FreeRTOS_9_0/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4342:../../../FreeRTOS_9_0/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4343:../../../FreeRTOS_9_0/Source/tasks.c **** 			unblocked because of a timeout. */
4344:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 5680              		.loc 1 4344 0
 5681 006e 0F4B     		ldr	r3, .L371
 5682 0070 1B68     		ldr	r3, [r3]
 5683 0072 93F85830 		ldrb	r3, [r3, #88]
 5684 0076 DBB2     		uxtb	r3, r3
 5685 0078 012B     		cmp	r3, #1
 5686 007a 02D1     		bne	.L368
4345:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4346:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A notification was not received. */
4347:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFALSE;
 5687              		.loc 1 4347 0
 5688 007c 0023     		movs	r3, #0
 5689 007e 7B61     		str	r3, [r7, #20]
 5690 0080 08E0     		b	.L369
 5691              	.L368:
4348:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4349:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4350:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4351:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* A notification was already pending or a notification was
4352:../../../FreeRTOS_9_0/Source/tasks.c **** 				received while the task was waiting. */
4353:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5692              		.loc 1 4353 0
 5693 0082 0A4B     		ldr	r3, .L371
 5694 0084 1B68     		ldr	r3, [r3]
 5695 0086 596D     		ldr	r1, [r3, #84]
 5696 0088 BA68     		ldr	r2, [r7, #8]
 5697 008a D243     		mvns	r2, r2
 5698 008c 0A40     		ands	r2, r2, r1
 5699 008e 5A65     		str	r2, [r3, #84]
4354:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdTRUE;
 5700              		.loc 1 4354 0
 5701 0090 0123     		movs	r3, #1
 5702 0092 7B61     		str	r3, [r7, #20]
 5703              	.L369:
4355:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4356:../../../FreeRTOS_9_0/Source/tasks.c **** 
4357:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5704              		.loc 1 4357 0
 5705 0094 054B     		ldr	r3, .L371
 5706 0096 1B68     		ldr	r3, [r3]
 5707 0098 0022     		movs	r2, #0
 5708 009a 83F85820 		strb	r2, [r3, #88]
4358:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4359:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5709              		.loc 1 4359 0
 5710 009e FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccfW2k76.s 			page 181


4360:../../../FreeRTOS_9_0/Source/tasks.c **** 
4361:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 5711              		.loc 1 4361 0
 5712 00a2 7B69     		ldr	r3, [r7, #20]
4362:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5713              		.loc 1 4362 0
 5714 00a4 1846     		mov	r0, r3
 5715 00a6 1837     		adds	r7, r7, #24
 5716              	.LCFI249:
 5717              		.cfi_def_cfa_offset 8
 5718 00a8 BD46     		mov	sp, r7
 5719              	.LCFI250:
 5720              		.cfi_def_cfa_register 13
 5721              		@ sp needed
 5722 00aa 80BD     		pop	{r7, pc}
 5723              	.L372:
 5724              		.align	2
 5725              	.L371:
 5726 00ac 00000000 		.word	pxCurrentTCB
 5727 00b0 04ED00E0 		.word	-536810236
 5728              		.cfi_endproc
 5729              	.LFE53:
 5731              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5732              		.align	2
 5733              		.global	xTaskGenericNotify
 5734              		.thumb
 5735              		.thumb_func
 5737              	xTaskGenericNotify:
 5738              	.LFB54:
4363:../../../FreeRTOS_9_0/Source/tasks.c **** 
4364:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4365:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4366:../../../FreeRTOS_9_0/Source/tasks.c **** 
4367:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4368:../../../FreeRTOS_9_0/Source/tasks.c **** 
4369:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4370:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5739              		.loc 1 4370 0
 5740              		.cfi_startproc
 5741              		@ args = 0, pretend = 0, frame = 40
 5742              		@ frame_needed = 1, uses_anonymous_args = 0
 5743 0000 80B5     		push	{r7, lr}
 5744              	.LCFI251:
 5745              		.cfi_def_cfa_offset 8
 5746              		.cfi_offset 7, -8
 5747              		.cfi_offset 14, -4
 5748 0002 8AB0     		sub	sp, sp, #40
 5749              	.LCFI252:
 5750              		.cfi_def_cfa_offset 48
 5751 0004 00AF     		add	r7, sp, #0
 5752              	.LCFI253:
 5753              		.cfi_def_cfa_register 7
 5754 0006 F860     		str	r0, [r7, #12]
 5755 0008 B960     		str	r1, [r7, #8]
 5756 000a 3B60     		str	r3, [r7]
 5757 000c 1346     		mov	r3, r2
 5758 000e FB71     		strb	r3, [r7, #7]
ARM GAS  /tmp/ccfW2k76.s 			page 182


4371:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4372:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5759              		.loc 1 4372 0
 5760 0010 0123     		movs	r3, #1
 5761 0012 7B62     		str	r3, [r7, #36]
4373:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4374:../../../FreeRTOS_9_0/Source/tasks.c **** 
4375:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5762              		.loc 1 4375 0
 5763 0014 FB68     		ldr	r3, [r7, #12]
 5764 0016 002B     		cmp	r3, #0
 5765 0018 09D1     		bne	.L374
 5766              	.LBB167:
 5767              	.LBB168:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5768              		.loc 2 237 0 discriminator 1
 5769              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5770 001a 4FF05003 			mov r3, #80												
 5771 001e 83F31188 		msr basepri, r3											
 5772 0022 BFF36F8F 		isb														
 5773 0026 BFF34F8F 		dsb														
 5774              	
 5775              	@ 0 "" 2
 5776              		.thumb
 5777 002a BB61     		str	r3, [r7, #24]
 5778              	.L375:
 5779              	.LBE168:
 5780              	.LBE167:
 5781              		.loc 1 4375 0 discriminator 1
 5782 002c FEE7     		b	.L375
 5783              	.L374:
4376:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5784              		.loc 1 4376 0
 5785 002e FB68     		ldr	r3, [r7, #12]
 5786 0030 3B62     		str	r3, [r7, #32]
4377:../../../FreeRTOS_9_0/Source/tasks.c **** 
4378:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 5787              		.loc 1 4378 0
 5788 0032 FFF7FEFF 		bl	vPortEnterCritical
4379:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4380:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5789              		.loc 1 4380 0
 5790 0036 3B68     		ldr	r3, [r7]
 5791 0038 002B     		cmp	r3, #0
 5792 003a 03D0     		beq	.L376
4381:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4382:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5793              		.loc 1 4382 0
 5794 003c 3B6A     		ldr	r3, [r7, #32]
 5795 003e 5A6D     		ldr	r2, [r3, #84]
 5796 0040 3B68     		ldr	r3, [r7]
 5797 0042 1A60     		str	r2, [r3]
 5798              	.L376:
4383:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4384:../../../FreeRTOS_9_0/Source/tasks.c **** 
4385:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5799              		.loc 1 4385 0
ARM GAS  /tmp/ccfW2k76.s 			page 183


 5800 0044 3B6A     		ldr	r3, [r7, #32]
 5801 0046 93F85830 		ldrb	r3, [r3, #88]
 5802 004a FB77     		strb	r3, [r7, #31]
4386:../../../FreeRTOS_9_0/Source/tasks.c **** 
4387:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5803              		.loc 1 4387 0
 5804 004c 3B6A     		ldr	r3, [r7, #32]
 5805 004e 0222     		movs	r2, #2
 5806 0050 83F85820 		strb	r2, [r3, #88]
4388:../../../FreeRTOS_9_0/Source/tasks.c **** 
4389:../../../FreeRTOS_9_0/Source/tasks.c **** 			switch( eAction )
 5807              		.loc 1 4389 0
 5808 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5809 0056 042B     		cmp	r3, #4
 5810 0058 27D8     		bhi	.L377
 5811 005a 01A2     		adr	r2, .L379
 5812 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5813              		.p2align 2
 5814              	.L379:
 5815 0060 AB000000 		.word	.L377+1
 5816 0064 75000000 		.word	.L380+1
 5817 0068 83000000 		.word	.L381+1
 5818 006c 8F000000 		.word	.L382+1
 5819 0070 97000000 		.word	.L383+1
 5820              		.p2align 1
 5821              	.L380:
4390:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4391:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetBits	:
4392:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5822              		.loc 1 4392 0
 5823 0074 3B6A     		ldr	r3, [r7, #32]
 5824 0076 5A6D     		ldr	r2, [r3, #84]
 5825 0078 BB68     		ldr	r3, [r7, #8]
 5826 007a 1A43     		orrs	r2, r2, r3
 5827 007c 3B6A     		ldr	r3, [r7, #32]
 5828 007e 5A65     		str	r2, [r3, #84]
4393:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 5829              		.loc 1 4393 0
 5830 0080 13E0     		b	.L377
 5831              	.L381:
4394:../../../FreeRTOS_9_0/Source/tasks.c **** 
4395:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eIncrement	:
4396:../../../FreeRTOS_9_0/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5832              		.loc 1 4396 0
 5833 0082 3B6A     		ldr	r3, [r7, #32]
 5834 0084 5B6D     		ldr	r3, [r3, #84]
 5835 0086 5A1C     		adds	r2, r3, #1
 5836 0088 3B6A     		ldr	r3, [r7, #32]
 5837 008a 5A65     		str	r2, [r3, #84]
4397:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 5838              		.loc 1 4397 0
 5839 008c 0DE0     		b	.L377
 5840              	.L382:
4398:../../../FreeRTOS_9_0/Source/tasks.c **** 
4399:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4400:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5841              		.loc 1 4400 0
ARM GAS  /tmp/ccfW2k76.s 			page 184


 5842 008e 3B6A     		ldr	r3, [r7, #32]
 5843 0090 BA68     		ldr	r2, [r7, #8]
 5844 0092 5A65     		str	r2, [r3, #84]
4401:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 5845              		.loc 1 4401 0
 5846 0094 09E0     		b	.L377
 5847              	.L383:
4402:../../../FreeRTOS_9_0/Source/tasks.c **** 
4403:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4404:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5848              		.loc 1 4404 0
 5849 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5850 0098 022B     		cmp	r3, #2
 5851 009a 03D0     		beq	.L384
4405:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4406:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5852              		.loc 1 4406 0
 5853 009c 3B6A     		ldr	r3, [r7, #32]
 5854 009e BA68     		ldr	r2, [r7, #8]
 5855 00a0 5A65     		str	r2, [r3, #84]
4407:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4408:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4409:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4410:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The value could not be written to the task. */
4411:../../../FreeRTOS_9_0/Source/tasks.c **** 						xReturn = pdFAIL;
4412:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4413:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 5856              		.loc 1 4413 0
 5857 00a2 01E0     		b	.L390
 5858              	.L384:
4411:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
 5859              		.loc 1 4411 0
 5860 00a4 0023     		movs	r3, #0
 5861 00a6 7B62     		str	r3, [r7, #36]
 5862              	.L390:
 5863              		.loc 1 4413 0
 5864 00a8 00BF     		nop
 5865              	.L377:
4414:../../../FreeRTOS_9_0/Source/tasks.c **** 
4415:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eNoAction:
4416:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is being notified without its notify value being
4417:../../../FreeRTOS_9_0/Source/tasks.c **** 					updated. */
4418:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
4419:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4420:../../../FreeRTOS_9_0/Source/tasks.c **** 
4421:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY();
4422:../../../FreeRTOS_9_0/Source/tasks.c **** 
4423:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4424:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4425:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5866              		.loc 1 4425 0
 5867 00aa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5868 00ac 012B     		cmp	r3, #1
 5869 00ae 3AD1     		bne	.L386
4426:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4427:../../../FreeRTOS_9_0/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5870              		.loc 1 4427 0
ARM GAS  /tmp/ccfW2k76.s 			page 185


 5871 00b0 3B6A     		ldr	r3, [r7, #32]
 5872 00b2 0433     		adds	r3, r3, #4
 5873 00b4 1846     		mov	r0, r3
 5874 00b6 FFF7FEFF 		bl	uxListRemove
4428:../../../FreeRTOS_9_0/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5875              		.loc 1 4428 0
 5876 00ba 3B6A     		ldr	r3, [r7, #32]
 5877 00bc DB6A     		ldr	r3, [r3, #44]
 5878 00be 1A46     		mov	r2, r3
 5879 00c0 0123     		movs	r3, #1
 5880 00c2 03FA02F2 		lsl	r2, r3, r2
 5881 00c6 1B4B     		ldr	r3, .L391
 5882 00c8 1B68     		ldr	r3, [r3]
 5883 00ca 1343     		orrs	r3, r3, r2
 5884 00cc 194A     		ldr	r2, .L391
 5885 00ce 1360     		str	r3, [r2]
 5886 00d0 3B6A     		ldr	r3, [r7, #32]
 5887 00d2 DA6A     		ldr	r2, [r3, #44]
 5888 00d4 1346     		mov	r3, r2
 5889 00d6 9B00     		lsls	r3, r3, #2
 5890 00d8 1344     		add	r3, r3, r2
 5891 00da 9B00     		lsls	r3, r3, #2
 5892 00dc 164A     		ldr	r2, .L391+4
 5893 00de 1A44     		add	r2, r2, r3
 5894 00e0 3B6A     		ldr	r3, [r7, #32]
 5895 00e2 0433     		adds	r3, r3, #4
 5896 00e4 1046     		mov	r0, r2
 5897 00e6 1946     		mov	r1, r3
 5898 00e8 FFF7FEFF 		bl	vListInsertEnd
4429:../../../FreeRTOS_9_0/Source/tasks.c **** 
4430:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4431:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5899              		.loc 1 4431 0
 5900 00ec 3B6A     		ldr	r3, [r7, #32]
 5901 00ee 9B6A     		ldr	r3, [r3, #40]
 5902 00f0 002B     		cmp	r3, #0
 5903 00f2 09D0     		beq	.L387
 5904              	.LBB169:
 5905              	.LBB170:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5906              		.loc 2 237 0 discriminator 1
 5907              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5908 00f4 4FF05003 			mov r3, #80												
 5909 00f8 83F31188 		msr basepri, r3											
 5910 00fc BFF36F8F 		isb														
 5911 0100 BFF34F8F 		dsb														
 5912              	
 5913              	@ 0 "" 2
 5914              		.thumb
 5915 0104 7B61     		str	r3, [r7, #20]
 5916              	.L388:
 5917              	.LBE170:
 5918              	.LBE169:
 5919              		.loc 1 4431 0 discriminator 2
 5920 0106 FEE7     		b	.L388
 5921              	.L387:
4432:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 186


4433:../../../FreeRTOS_9_0/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4434:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4435:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4436:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4437:../../../FreeRTOS_9_0/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4438:../../../FreeRTOS_9_0/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4439:../../../FreeRTOS_9_0/Source/tasks.c **** 					because it will automatically get reset to a new value when
4440:../../../FreeRTOS_9_0/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4441:../../../FreeRTOS_9_0/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4442:../../../FreeRTOS_9_0/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4443:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4444:../../../FreeRTOS_9_0/Source/tasks.c **** 					earliest possible time. */
4445:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4446:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4447:../../../FreeRTOS_9_0/Source/tasks.c **** 				#endif
4448:../../../FreeRTOS_9_0/Source/tasks.c **** 
4449:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5922              		.loc 1 4449 0
 5923 0108 3B6A     		ldr	r3, [r7, #32]
 5924 010a DA6A     		ldr	r2, [r3, #44]
 5925 010c 0B4B     		ldr	r3, .L391+8
 5926 010e 1B68     		ldr	r3, [r3]
 5927 0110 DB6A     		ldr	r3, [r3, #44]
 5928 0112 9A42     		cmp	r2, r3
 5929 0114 07D9     		bls	.L386
4450:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4451:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4452:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4453:../../../FreeRTOS_9_0/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5930              		.loc 1 4453 0
 5931 0116 0A4B     		ldr	r3, .L391+12
 5932 0118 4FF08052 		mov	r2, #268435456
 5933 011c 1A60     		str	r2, [r3]
 5934              	@ 4453 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 5935 011e BFF34F8F 		dsb
 5936              	@ 0 "" 2
 5937              	@ 4453 "../../../FreeRTOS_9_0/Source/tasks.c" 1
 5938 0122 BFF36F8F 		isb
 5939              	@ 0 "" 2
 5940              		.thumb
 5941              	.L386:
4454:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4455:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4456:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4457:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4458:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4459:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4460:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4461:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4462:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4464:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4465:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5942              		.loc 1 4465 0
 5943 0126 FFF7FEFF 		bl	vPortExitCritical
4466:../../../FreeRTOS_9_0/Source/tasks.c **** 
4467:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccfW2k76.s 			page 187


 5944              		.loc 1 4467 0
 5945 012a 7B6A     		ldr	r3, [r7, #36]
4468:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 5946              		.loc 1 4468 0
 5947 012c 1846     		mov	r0, r3
 5948 012e 2837     		adds	r7, r7, #40
 5949              	.LCFI254:
 5950              		.cfi_def_cfa_offset 8
 5951 0130 BD46     		mov	sp, r7
 5952              	.LCFI255:
 5953              		.cfi_def_cfa_register 13
 5954              		@ sp needed
 5955 0132 80BD     		pop	{r7, pc}
 5956              	.L392:
 5957              		.align	2
 5958              	.L391:
 5959 0134 00000000 		.word	uxTopReadyPriority
 5960 0138 00000000 		.word	pxReadyTasksLists
 5961 013c 00000000 		.word	pxCurrentTCB
 5962 0140 04ED00E0 		.word	-536810236
 5963              		.cfi_endproc
 5964              	.LFE54:
 5966              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5967              		.align	2
 5968              		.global	xTaskGenericNotifyFromISR
 5969              		.thumb
 5970              		.thumb_func
 5972              	xTaskGenericNotifyFromISR:
 5973              	.LFB55:
4469:../../../FreeRTOS_9_0/Source/tasks.c **** 
4470:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4471:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4472:../../../FreeRTOS_9_0/Source/tasks.c **** 
4473:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4474:../../../FreeRTOS_9_0/Source/tasks.c **** 
4475:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4476:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 5974              		.loc 1 4476 0
 5975              		.cfi_startproc
 5976              		@ args = 4, pretend = 0, frame = 56
 5977              		@ frame_needed = 1, uses_anonymous_args = 0
 5978 0000 80B5     		push	{r7, lr}
 5979              	.LCFI256:
 5980              		.cfi_def_cfa_offset 8
 5981              		.cfi_offset 7, -8
 5982              		.cfi_offset 14, -4
 5983 0002 8EB0     		sub	sp, sp, #56
 5984              	.LCFI257:
 5985              		.cfi_def_cfa_offset 64
 5986 0004 00AF     		add	r7, sp, #0
 5987              	.LCFI258:
 5988              		.cfi_def_cfa_register 7
 5989 0006 F860     		str	r0, [r7, #12]
 5990 0008 B960     		str	r1, [r7, #8]
 5991 000a 3B60     		str	r3, [r7]
 5992 000c 1346     		mov	r3, r2
 5993 000e FB71     		strb	r3, [r7, #7]
ARM GAS  /tmp/ccfW2k76.s 			page 188


4477:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4478:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4479:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5994              		.loc 1 4479 0
 5995 0010 0123     		movs	r3, #1
 5996 0012 7B63     		str	r3, [r7, #52]
4480:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4481:../../../FreeRTOS_9_0/Source/tasks.c **** 
4482:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5997              		.loc 1 4482 0
 5998 0014 FB68     		ldr	r3, [r7, #12]
 5999 0016 002B     		cmp	r3, #0
 6000 0018 09D1     		bne	.L394
 6001              	.LBB171:
 6002              	.LBB172:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6003              		.loc 2 237 0 discriminator 1
 6004              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6005 001a 4FF05003 			mov r3, #80												
 6006 001e 83F31188 		msr basepri, r3											
 6007 0022 BFF36F8F 		isb														
 6008 0026 BFF34F8F 		dsb														
 6009              	
 6010              	@ 0 "" 2
 6011              		.thumb
 6012 002a 7B62     		str	r3, [r7, #36]
 6013              	.L395:
 6014              	.LBE172:
 6015              	.LBE171:
 6016              		.loc 1 4482 0 discriminator 1
 6017 002c FEE7     		b	.L395
 6018              	.L394:
4483:../../../FreeRTOS_9_0/Source/tasks.c **** 
4484:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4485:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4486:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4487:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4488:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4489:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4490:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4491:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4492:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4493:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4494:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4495:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4496:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4497:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4498:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
4499:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4500:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6019              		.loc 1 4500 0
 6020 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4501:../../../FreeRTOS_9_0/Source/tasks.c **** 
4502:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6021              		.loc 1 4502 0
 6022 0032 FB68     		ldr	r3, [r7, #12]
 6023 0034 3B63     		str	r3, [r7, #48]
ARM GAS  /tmp/ccfW2k76.s 			page 189


 6024              	.LBB173:
 6025              	.LBB174:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6026              		.loc 2 253 0
 6027              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6028 0036 EFF31182 			mrs r2, basepri											
 6029 003a 4FF05003 		mov r3, #80												
 6030 003e 83F31188 		msr basepri, r3											
 6031 0042 BFF36F8F 		isb														
 6032 0046 BFF34F8F 		dsb														
 6033              	
 6034              	@ 0 "" 2
 6035              		.thumb
 6036 004a 3A62     		str	r2, [r7, #32]
 6037 004c FB61     		str	r3, [r7, #28]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6038              		.loc 2 265 0
 6039 004e 3B6A     		ldr	r3, [r7, #32]
 6040              	.LBE174:
 6041              	.LBE173:
4503:../../../FreeRTOS_9_0/Source/tasks.c **** 
4504:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6042              		.loc 1 4504 0
 6043 0050 FB62     		str	r3, [r7, #44]
4505:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4506:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6044              		.loc 1 4506 0
 6045 0052 3B68     		ldr	r3, [r7]
 6046 0054 002B     		cmp	r3, #0
 6047 0056 03D0     		beq	.L397
4507:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4508:../../../FreeRTOS_9_0/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6048              		.loc 1 4508 0
 6049 0058 3B6B     		ldr	r3, [r7, #48]
 6050 005a 5A6D     		ldr	r2, [r3, #84]
 6051 005c 3B68     		ldr	r3, [r7]
 6052 005e 1A60     		str	r2, [r3]
 6053              	.L397:
4509:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4510:../../../FreeRTOS_9_0/Source/tasks.c **** 
4511:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6054              		.loc 1 4511 0
 6055 0060 3B6B     		ldr	r3, [r7, #48]
 6056 0062 93F85830 		ldrb	r3, [r3, #88]
 6057 0066 87F82B30 		strb	r3, [r7, #43]
4512:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6058              		.loc 1 4512 0
 6059 006a 3B6B     		ldr	r3, [r7, #48]
 6060 006c 0222     		movs	r2, #2
 6061 006e 83F85820 		strb	r2, [r3, #88]
4513:../../../FreeRTOS_9_0/Source/tasks.c **** 
4514:../../../FreeRTOS_9_0/Source/tasks.c **** 			switch( eAction )
 6062              		.loc 1 4514 0
 6063 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6064 0074 042B     		cmp	r3, #4
 6065 0076 29D8     		bhi	.L398
 6066 0078 01A2     		adr	r2, .L400
ARM GAS  /tmp/ccfW2k76.s 			page 190


 6067 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6068 007e 00BF     		.p2align 2
 6069              	.L400:
 6070 0080 CD000000 		.word	.L398+1
 6071 0084 95000000 		.word	.L401+1
 6072 0088 A3000000 		.word	.L402+1
 6073 008c AF000000 		.word	.L403+1
 6074 0090 B7000000 		.word	.L404+1
 6075              		.p2align 1
 6076              	.L401:
4515:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4516:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetBits	:
4517:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6077              		.loc 1 4517 0
 6078 0094 3B6B     		ldr	r3, [r7, #48]
 6079 0096 5A6D     		ldr	r2, [r3, #84]
 6080 0098 BB68     		ldr	r3, [r7, #8]
 6081 009a 1A43     		orrs	r2, r2, r3
 6082 009c 3B6B     		ldr	r3, [r7, #48]
 6083 009e 5A65     		str	r2, [r3, #84]
4518:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6084              		.loc 1 4518 0
 6085 00a0 14E0     		b	.L398
 6086              	.L402:
4519:../../../FreeRTOS_9_0/Source/tasks.c **** 
4520:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eIncrement	:
4521:../../../FreeRTOS_9_0/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6087              		.loc 1 4521 0
 6088 00a2 3B6B     		ldr	r3, [r7, #48]
 6089 00a4 5B6D     		ldr	r3, [r3, #84]
 6090 00a6 5A1C     		adds	r2, r3, #1
 6091 00a8 3B6B     		ldr	r3, [r7, #48]
 6092 00aa 5A65     		str	r2, [r3, #84]
4522:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6093              		.loc 1 4522 0
 6094 00ac 0EE0     		b	.L398
 6095              	.L403:
4523:../../../FreeRTOS_9_0/Source/tasks.c **** 
4524:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4525:../../../FreeRTOS_9_0/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6096              		.loc 1 4525 0
 6097 00ae 3B6B     		ldr	r3, [r7, #48]
 6098 00b0 BA68     		ldr	r2, [r7, #8]
 6099 00b2 5A65     		str	r2, [r3, #84]
4526:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6100              		.loc 1 4526 0
 6101 00b4 0AE0     		b	.L398
 6102              	.L404:
4527:../../../FreeRTOS_9_0/Source/tasks.c **** 
4528:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4529:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6103              		.loc 1 4529 0
 6104 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6105 00ba 022B     		cmp	r3, #2
 6106 00bc 03D0     		beq	.L405
4530:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4531:../../../FreeRTOS_9_0/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
ARM GAS  /tmp/ccfW2k76.s 			page 191


 6107              		.loc 1 4531 0
 6108 00be 3B6B     		ldr	r3, [r7, #48]
 6109 00c0 BA68     		ldr	r2, [r7, #8]
 6110 00c2 5A65     		str	r2, [r3, #84]
4532:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4533:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4534:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4535:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* The value could not be written to the task. */
4536:../../../FreeRTOS_9_0/Source/tasks.c **** 						xReturn = pdFAIL;
4537:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4538:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
 6111              		.loc 1 4538 0
 6112 00c4 01E0     		b	.L415
 6113              	.L405:
4536:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
 6114              		.loc 1 4536 0
 6115 00c6 0023     		movs	r3, #0
 6116 00c8 7B63     		str	r3, [r7, #52]
 6117              	.L415:
 6118              		.loc 1 4538 0
 6119 00ca 00BF     		nop
 6120              	.L398:
4539:../../../FreeRTOS_9_0/Source/tasks.c **** 
4540:../../../FreeRTOS_9_0/Source/tasks.c **** 				case eNoAction :
4541:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The task is being notified without its notify value being
4542:../../../FreeRTOS_9_0/Source/tasks.c **** 					updated. */
4543:../../../FreeRTOS_9_0/Source/tasks.c **** 					break;
4544:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4545:../../../FreeRTOS_9_0/Source/tasks.c **** 
4546:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4547:../../../FreeRTOS_9_0/Source/tasks.c **** 
4548:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4549:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4550:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6121              		.loc 1 4550 0
 6122 00cc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6123 00d0 012B     		cmp	r3, #1
 6124 00d2 47D1     		bne	.L407
4551:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4552:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4553:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6125              		.loc 1 4553 0
 6126 00d4 3B6B     		ldr	r3, [r7, #48]
 6127 00d6 9B6A     		ldr	r3, [r3, #40]
 6128 00d8 002B     		cmp	r3, #0
 6129 00da 09D0     		beq	.L408
 6130              	.LBB175:
 6131              	.LBB176:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6132              		.loc 2 237 0 discriminator 1
 6133              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6134 00dc 4FF05003 			mov r3, #80												
 6135 00e0 83F31188 		msr basepri, r3											
 6136 00e4 BFF36F8F 		isb														
 6137 00e8 BFF34F8F 		dsb														
 6138              	
 6139              	@ 0 "" 2
ARM GAS  /tmp/ccfW2k76.s 			page 192


 6140              		.thumb
 6141 00ec BB61     		str	r3, [r7, #24]
 6142              	.L409:
 6143              	.LBE176:
 6144              	.LBE175:
 6145              		.loc 1 4553 0 discriminator 2
 6146 00ee FEE7     		b	.L409
 6147              	.L408:
4554:../../../FreeRTOS_9_0/Source/tasks.c **** 
4555:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6148              		.loc 1 4555 0
 6149 00f0 214B     		ldr	r3, .L416
 6150 00f2 1B68     		ldr	r3, [r3]
 6151 00f4 002B     		cmp	r3, #0
 6152 00f6 1ED1     		bne	.L410
4556:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4557:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6153              		.loc 1 4557 0
 6154 00f8 3B6B     		ldr	r3, [r7, #48]
 6155 00fa 0433     		adds	r3, r3, #4
 6156 00fc 1846     		mov	r0, r3
 6157 00fe FFF7FEFF 		bl	uxListRemove
4558:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6158              		.loc 1 4558 0
 6159 0102 3B6B     		ldr	r3, [r7, #48]
 6160 0104 DB6A     		ldr	r3, [r3, #44]
 6161 0106 1A46     		mov	r2, r3
 6162 0108 0123     		movs	r3, #1
 6163 010a 03FA02F2 		lsl	r2, r3, r2
 6164 010e 1B4B     		ldr	r3, .L416+4
 6165 0110 1B68     		ldr	r3, [r3]
 6166 0112 1343     		orrs	r3, r3, r2
 6167 0114 194A     		ldr	r2, .L416+4
 6168 0116 1360     		str	r3, [r2]
 6169 0118 3B6B     		ldr	r3, [r7, #48]
 6170 011a DA6A     		ldr	r2, [r3, #44]
 6171 011c 1346     		mov	r3, r2
 6172 011e 9B00     		lsls	r3, r3, #2
 6173 0120 1344     		add	r3, r3, r2
 6174 0122 9B00     		lsls	r3, r3, #2
 6175 0124 164A     		ldr	r2, .L416+8
 6176 0126 1A44     		add	r2, r2, r3
 6177 0128 3B6B     		ldr	r3, [r7, #48]
 6178 012a 0433     		adds	r3, r3, #4
 6179 012c 1046     		mov	r0, r2
 6180 012e 1946     		mov	r1, r3
 6181 0130 FFF7FEFF 		bl	vListInsertEnd
 6182 0134 05E0     		b	.L411
 6183              	.L410:
4559:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4560:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4561:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4562:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4563:../../../FreeRTOS_9_0/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4564:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6184              		.loc 1 4564 0
 6185 0136 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccfW2k76.s 			page 193


 6186 0138 1833     		adds	r3, r3, #24
 6187 013a 1248     		ldr	r0, .L416+12
 6188 013c 1946     		mov	r1, r3
 6189 013e FFF7FEFF 		bl	vListInsertEnd
 6190              	.L411:
4565:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4566:../../../FreeRTOS_9_0/Source/tasks.c **** 
4567:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6191              		.loc 1 4567 0
 6192 0142 3B6B     		ldr	r3, [r7, #48]
 6193 0144 DA6A     		ldr	r2, [r3, #44]
 6194 0146 104B     		ldr	r3, .L416+16
 6195 0148 1B68     		ldr	r3, [r3]
 6196 014a DB6A     		ldr	r3, [r3, #44]
 6197 014c 9A42     		cmp	r2, r3
 6198 014e 09D9     		bls	.L407
4568:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4569:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4570:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4571:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6199              		.loc 1 4571 0
 6200 0150 3B6C     		ldr	r3, [r7, #64]
 6201 0152 002B     		cmp	r3, #0
 6202 0154 03D0     		beq	.L412
4572:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4573:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6203              		.loc 1 4573 0
 6204 0156 3B6C     		ldr	r3, [r7, #64]
 6205 0158 0122     		movs	r2, #1
 6206 015a 1A60     		str	r2, [r3]
 6207 015c 02E0     		b	.L407
 6208              	.L412:
4574:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4575:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4576:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4577:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4578:../../../FreeRTOS_9_0/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4579:../../../FreeRTOS_9_0/Source/tasks.c **** 						safe FreeRTOS function. */
4580:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
 6209              		.loc 1 4580 0
 6210 015e 0B4B     		ldr	r3, .L416+20
 6211 0160 0122     		movs	r2, #1
 6212 0162 1A60     		str	r2, [r3]
 6213              	.L407:
 6214 0164 FB6A     		ldr	r3, [r7, #44]
 6215 0166 7B61     		str	r3, [r7, #20]
 6216              	.LBB177:
 6217              	.LBB178:
 6218              		.loc 2 271 0
 6219 0168 7B69     		ldr	r3, [r7, #20]
 6220              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6221 016a 83F31188 			msr basepri, r3	
 6222              	@ 0 "" 2
 6223              		.thumb
 6224              	.LBE178:
 6225              	.LBE177:
4581:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
ARM GAS  /tmp/ccfW2k76.s 			page 194


4582:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4583:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4584:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4585:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4586:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4587:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4588:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4589:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4590:../../../FreeRTOS_9_0/Source/tasks.c **** 
4591:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 6226              		.loc 1 4591 0
 6227 016e 7B6B     		ldr	r3, [r7, #52]
4592:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6228              		.loc 1 4592 0
 6229 0170 1846     		mov	r0, r3
 6230 0172 3837     		adds	r7, r7, #56
 6231              	.LCFI259:
 6232              		.cfi_def_cfa_offset 8
 6233 0174 BD46     		mov	sp, r7
 6234              	.LCFI260:
 6235              		.cfi_def_cfa_register 13
 6236              		@ sp needed
 6237 0176 80BD     		pop	{r7, pc}
 6238              	.L417:
 6239              		.align	2
 6240              	.L416:
 6241 0178 00000000 		.word	uxSchedulerSuspended
 6242 017c 00000000 		.word	uxTopReadyPriority
 6243 0180 00000000 		.word	pxReadyTasksLists
 6244 0184 00000000 		.word	xPendingReadyList
 6245 0188 00000000 		.word	pxCurrentTCB
 6246 018c 00000000 		.word	xYieldPending
 6247              		.cfi_endproc
 6248              	.LFE55:
 6250              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6251              		.align	2
 6252              		.global	vTaskNotifyGiveFromISR
 6253              		.thumb
 6254              		.thumb_func
 6256              	vTaskNotifyGiveFromISR:
 6257              	.LFB56:
4593:../../../FreeRTOS_9_0/Source/tasks.c **** 
4594:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4595:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4596:../../../FreeRTOS_9_0/Source/tasks.c **** 
4597:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4598:../../../FreeRTOS_9_0/Source/tasks.c **** 
4599:../../../FreeRTOS_9_0/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4600:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6258              		.loc 1 4600 0
 6259              		.cfi_startproc
 6260              		@ args = 0, pretend = 0, frame = 40
 6261              		@ frame_needed = 1, uses_anonymous_args = 0
 6262 0000 80B5     		push	{r7, lr}
 6263              	.LCFI261:
 6264              		.cfi_def_cfa_offset 8
 6265              		.cfi_offset 7, -8
ARM GAS  /tmp/ccfW2k76.s 			page 195


 6266              		.cfi_offset 14, -4
 6267 0002 8AB0     		sub	sp, sp, #40
 6268              	.LCFI262:
 6269              		.cfi_def_cfa_offset 48
 6270 0004 00AF     		add	r7, sp, #0
 6271              	.LCFI263:
 6272              		.cfi_def_cfa_register 7
 6273 0006 7860     		str	r0, [r7, #4]
 6274 0008 3960     		str	r1, [r7]
4601:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t * pxTCB;
4602:../../../FreeRTOS_9_0/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4603:../../../FreeRTOS_9_0/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4604:../../../FreeRTOS_9_0/Source/tasks.c **** 
4605:../../../FreeRTOS_9_0/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6275              		.loc 1 4605 0
 6276 000a 7B68     		ldr	r3, [r7, #4]
 6277 000c 002B     		cmp	r3, #0
 6278 000e 09D1     		bne	.L419
 6279              	.LBB179:
 6280              	.LBB180:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6281              		.loc 2 237 0 discriminator 1
 6282              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6283 0010 4FF05003 			mov r3, #80												
 6284 0014 83F31188 		msr basepri, r3											
 6285 0018 BFF36F8F 		isb														
 6286 001c BFF34F8F 		dsb														
 6287              	
 6288              	@ 0 "" 2
 6289              		.thumb
 6290 0020 BB61     		str	r3, [r7, #24]
 6291              	.L420:
 6292              	.LBE180:
 6293              	.LBE179:
 6294              		.loc 1 4605 0 discriminator 1
 6295 0022 FEE7     		b	.L420
 6296              	.L419:
4606:../../../FreeRTOS_9_0/Source/tasks.c **** 
4607:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4608:../../../FreeRTOS_9_0/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4609:../../../FreeRTOS_9_0/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4610:../../../FreeRTOS_9_0/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4611:../../../FreeRTOS_9_0/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4612:../../../FreeRTOS_9_0/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4613:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4614:../../../FreeRTOS_9_0/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4615:../../../FreeRTOS_9_0/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4616:../../../FreeRTOS_9_0/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4617:../../../FreeRTOS_9_0/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4618:../../../FreeRTOS_9_0/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4619:../../../FreeRTOS_9_0/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4620:../../../FreeRTOS_9_0/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4621:../../../FreeRTOS_9_0/Source/tasks.c **** 		provided on the following link:
4622:../../../FreeRTOS_9_0/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4623:../../../FreeRTOS_9_0/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6297              		.loc 1 4623 0
 6298 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/ccfW2k76.s 			page 196


4624:../../../FreeRTOS_9_0/Source/tasks.c **** 
4625:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6299              		.loc 1 4625 0
 6300 0028 7B68     		ldr	r3, [r7, #4]
 6301 002a 7B62     		str	r3, [r7, #36]
 6302              	.LBB181:
 6303              	.LBB182:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6304              		.loc 2 253 0
 6305              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6306 002c EFF31182 			mrs r2, basepri											
 6307 0030 4FF05003 		mov r3, #80												
 6308 0034 83F31188 		msr basepri, r3											
 6309 0038 BFF36F8F 		isb														
 6310 003c BFF34F8F 		dsb														
 6311              	
 6312              	@ 0 "" 2
 6313              		.thumb
 6314 0040 7A61     		str	r2, [r7, #20]
 6315 0042 3B61     		str	r3, [r7, #16]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6316              		.loc 2 265 0
 6317 0044 7B69     		ldr	r3, [r7, #20]
 6318              	.LBE182:
 6319              	.LBE181:
4626:../../../FreeRTOS_9_0/Source/tasks.c **** 
4627:../../../FreeRTOS_9_0/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6320              		.loc 1 4627 0
 6321 0046 3B62     		str	r3, [r7, #32]
4628:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4629:../../../FreeRTOS_9_0/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6322              		.loc 1 4629 0
 6323 0048 7B6A     		ldr	r3, [r7, #36]
 6324 004a 93F85830 		ldrb	r3, [r3, #88]
 6325 004e FB77     		strb	r3, [r7, #31]
4630:../../../FreeRTOS_9_0/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6326              		.loc 1 4630 0
 6327 0050 7B6A     		ldr	r3, [r7, #36]
 6328 0052 0222     		movs	r2, #2
 6329 0054 83F85820 		strb	r2, [r3, #88]
4631:../../../FreeRTOS_9_0/Source/tasks.c **** 
4632:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4633:../../../FreeRTOS_9_0/Source/tasks.c **** 			semaphore. */
4634:../../../FreeRTOS_9_0/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6330              		.loc 1 4634 0
 6331 0058 7B6A     		ldr	r3, [r7, #36]
 6332 005a 5B6D     		ldr	r3, [r3, #84]
 6333 005c 5A1C     		adds	r2, r3, #1
 6334 005e 7B6A     		ldr	r3, [r7, #36]
 6335 0060 5A65     		str	r2, [r3, #84]
4635:../../../FreeRTOS_9_0/Source/tasks.c **** 
4636:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4637:../../../FreeRTOS_9_0/Source/tasks.c **** 
4638:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4639:../../../FreeRTOS_9_0/Source/tasks.c **** 			notification then unblock it now. */
4640:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6336              		.loc 1 4640 0
ARM GAS  /tmp/ccfW2k76.s 			page 197


 6337 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6338 0064 012B     		cmp	r3, #1
 6339 0066 47D1     		bne	.L422
4641:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4642:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The task should not have been on an event list. */
4643:../../../FreeRTOS_9_0/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6340              		.loc 1 4643 0
 6341 0068 7B6A     		ldr	r3, [r7, #36]
 6342 006a 9B6A     		ldr	r3, [r3, #40]
 6343 006c 002B     		cmp	r3, #0
 6344 006e 09D0     		beq	.L423
 6345              	.LBB183:
 6346              	.LBB184:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6347              		.loc 2 237 0 discriminator 1
 6348              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6349 0070 4FF05003 			mov r3, #80												
 6350 0074 83F31188 		msr basepri, r3											
 6351 0078 BFF36F8F 		isb														
 6352 007c BFF34F8F 		dsb														
 6353              	
 6354              	@ 0 "" 2
 6355              		.thumb
 6356 0080 FB60     		str	r3, [r7, #12]
 6357              	.L424:
 6358              	.LBE184:
 6359              	.LBE183:
 6360              		.loc 1 4643 0 discriminator 2
 6361 0082 FEE7     		b	.L424
 6362              	.L423:
4644:../../../FreeRTOS_9_0/Source/tasks.c **** 
4645:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6363              		.loc 1 4645 0
 6364 0084 204B     		ldr	r3, .L429
 6365 0086 1B68     		ldr	r3, [r3]
 6366 0088 002B     		cmp	r3, #0
 6367 008a 1ED1     		bne	.L425
4646:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4647:../../../FreeRTOS_9_0/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6368              		.loc 1 4647 0
 6369 008c 7B6A     		ldr	r3, [r7, #36]
 6370 008e 0433     		adds	r3, r3, #4
 6371 0090 1846     		mov	r0, r3
 6372 0092 FFF7FEFF 		bl	uxListRemove
4648:../../../FreeRTOS_9_0/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6373              		.loc 1 4648 0
 6374 0096 7B6A     		ldr	r3, [r7, #36]
 6375 0098 DB6A     		ldr	r3, [r3, #44]
 6376 009a 1A46     		mov	r2, r3
 6377 009c 0123     		movs	r3, #1
 6378 009e 03FA02F2 		lsl	r2, r3, r2
 6379 00a2 1A4B     		ldr	r3, .L429+4
 6380 00a4 1B68     		ldr	r3, [r3]
 6381 00a6 1343     		orrs	r3, r3, r2
 6382 00a8 184A     		ldr	r2, .L429+4
 6383 00aa 1360     		str	r3, [r2]
 6384 00ac 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccfW2k76.s 			page 198


 6385 00ae DA6A     		ldr	r2, [r3, #44]
 6386 00b0 1346     		mov	r3, r2
 6387 00b2 9B00     		lsls	r3, r3, #2
 6388 00b4 1344     		add	r3, r3, r2
 6389 00b6 9B00     		lsls	r3, r3, #2
 6390 00b8 154A     		ldr	r2, .L429+8
 6391 00ba 1A44     		add	r2, r2, r3
 6392 00bc 7B6A     		ldr	r3, [r7, #36]
 6393 00be 0433     		adds	r3, r3, #4
 6394 00c0 1046     		mov	r0, r2
 6395 00c2 1946     		mov	r1, r3
 6396 00c4 FFF7FEFF 		bl	vListInsertEnd
 6397 00c8 05E0     		b	.L426
 6398              	.L425:
4649:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4650:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4651:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4652:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4653:../../../FreeRTOS_9_0/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4654:../../../FreeRTOS_9_0/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6399              		.loc 1 4654 0
 6400 00ca 7B6A     		ldr	r3, [r7, #36]
 6401 00cc 1833     		adds	r3, r3, #24
 6402 00ce 1148     		ldr	r0, .L429+12
 6403 00d0 1946     		mov	r1, r3
 6404 00d2 FFF7FEFF 		bl	vListInsertEnd
 6405              	.L426:
4655:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4656:../../../FreeRTOS_9_0/Source/tasks.c **** 
4657:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6406              		.loc 1 4657 0
 6407 00d6 7B6A     		ldr	r3, [r7, #36]
 6408 00d8 DA6A     		ldr	r2, [r3, #44]
 6409 00da 0F4B     		ldr	r3, .L429+16
 6410 00dc 1B68     		ldr	r3, [r3]
 6411 00de DB6A     		ldr	r3, [r3, #44]
 6412 00e0 9A42     		cmp	r2, r3
 6413 00e2 09D9     		bls	.L422
4658:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4659:../../../FreeRTOS_9_0/Source/tasks.c **** 					/* The notified task has a priority above the currently
4660:../../../FreeRTOS_9_0/Source/tasks.c **** 					executing task so a yield is required. */
4661:../../../FreeRTOS_9_0/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6414              		.loc 1 4661 0
 6415 00e4 3B68     		ldr	r3, [r7]
 6416 00e6 002B     		cmp	r3, #0
 6417 00e8 03D0     		beq	.L427
4662:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
4663:../../../FreeRTOS_9_0/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6418              		.loc 1 4663 0
 6419 00ea 3B68     		ldr	r3, [r7]
 6420 00ec 0122     		movs	r2, #1
 6421 00ee 1A60     		str	r2, [r3]
 6422 00f0 02E0     		b	.L422
 6423              	.L427:
4664:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4665:../../../FreeRTOS_9_0/Source/tasks.c **** 					else
4666:../../../FreeRTOS_9_0/Source/tasks.c **** 					{
ARM GAS  /tmp/ccfW2k76.s 			page 199


4667:../../../FreeRTOS_9_0/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4668:../../../FreeRTOS_9_0/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4669:../../../FreeRTOS_9_0/Source/tasks.c **** 						safe FreeRTOS function. */
4670:../../../FreeRTOS_9_0/Source/tasks.c **** 						xYieldPending = pdTRUE;
 6424              		.loc 1 4670 0
 6425 00f2 0A4B     		ldr	r3, .L429+20
 6426 00f4 0122     		movs	r2, #1
 6427 00f6 1A60     		str	r2, [r3]
 6428              	.L422:
 6429 00f8 3B6A     		ldr	r3, [r7, #32]
 6430 00fa BB60     		str	r3, [r7, #8]
 6431              	.LBB185:
 6432              	.LBB186:
 6433              		.loc 2 271 0
 6434 00fc BB68     		ldr	r3, [r7, #8]
 6435              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6436 00fe 83F31188 			msr basepri, r3	
 6437              	@ 0 "" 2
 6438              		.thumb
 6439              	.LBE186:
 6440              	.LBE185:
4671:../../../FreeRTOS_9_0/Source/tasks.c **** 					}
4672:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4673:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4674:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4675:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4676:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4677:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4678:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4679:../../../FreeRTOS_9_0/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4680:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6441              		.loc 1 4680 0
 6442 0102 2837     		adds	r7, r7, #40
 6443              	.LCFI264:
 6444              		.cfi_def_cfa_offset 8
 6445 0104 BD46     		mov	sp, r7
 6446              	.LCFI265:
 6447              		.cfi_def_cfa_register 13
 6448              		@ sp needed
 6449 0106 80BD     		pop	{r7, pc}
 6450              	.L430:
 6451              		.align	2
 6452              	.L429:
 6453 0108 00000000 		.word	uxSchedulerSuspended
 6454 010c 00000000 		.word	uxTopReadyPriority
 6455 0110 00000000 		.word	pxReadyTasksLists
 6456 0114 00000000 		.word	xPendingReadyList
 6457 0118 00000000 		.word	pxCurrentTCB
 6458 011c 00000000 		.word	xYieldPending
 6459              		.cfi_endproc
 6460              	.LFE56:
 6462              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6463              		.align	2
 6464              		.global	xTaskNotifyStateClear
 6465              		.thumb
 6466              		.thumb_func
 6468              	xTaskNotifyStateClear:
ARM GAS  /tmp/ccfW2k76.s 			page 200


 6469              	.LFB57:
4681:../../../FreeRTOS_9_0/Source/tasks.c **** 
4682:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4683:../../../FreeRTOS_9_0/Source/tasks.c **** 
4684:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4685:../../../FreeRTOS_9_0/Source/tasks.c **** 
4686:../../../FreeRTOS_9_0/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4687:../../../FreeRTOS_9_0/Source/tasks.c **** 
4688:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4689:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
 6470              		.loc 1 4689 0
 6471              		.cfi_startproc
 6472              		@ args = 0, pretend = 0, frame = 16
 6473              		@ frame_needed = 1, uses_anonymous_args = 0
 6474 0000 80B5     		push	{r7, lr}
 6475              	.LCFI266:
 6476              		.cfi_def_cfa_offset 8
 6477              		.cfi_offset 7, -8
 6478              		.cfi_offset 14, -4
 6479 0002 84B0     		sub	sp, sp, #16
 6480              	.LCFI267:
 6481              		.cfi_def_cfa_offset 24
 6482 0004 00AF     		add	r7, sp, #0
 6483              	.LCFI268:
 6484              		.cfi_def_cfa_register 7
 6485 0006 7860     		str	r0, [r7, #4]
4690:../../../FreeRTOS_9_0/Source/tasks.c **** 	TCB_t *pxTCB;
4691:../../../FreeRTOS_9_0/Source/tasks.c **** 	BaseType_t xReturn;
4692:../../../FreeRTOS_9_0/Source/tasks.c **** 
4693:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4694:../../../FreeRTOS_9_0/Source/tasks.c **** 		its notification state cleared. */
4695:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6486              		.loc 1 4695 0
 6487 0008 7B68     		ldr	r3, [r7, #4]
 6488 000a 002B     		cmp	r3, #0
 6489 000c 02D1     		bne	.L432
 6490              		.loc 1 4695 0 is_stmt 0 discriminator 1
 6491 000e 0E4B     		ldr	r3, .L437
 6492 0010 1B68     		ldr	r3, [r3]
 6493 0012 00E0     		b	.L433
 6494              	.L432:
 6495              		.loc 1 4695 0 discriminator 2
 6496 0014 7B68     		ldr	r3, [r7, #4]
 6497              	.L433:
 6498              		.loc 1 4695 0 discriminator 4
 6499 0016 BB60     		str	r3, [r7, #8]
4696:../../../FreeRTOS_9_0/Source/tasks.c **** 
4697:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskENTER_CRITICAL();
 6500              		.loc 1 4697 0 is_stmt 1 discriminator 4
 6501 0018 FFF7FEFF 		bl	vPortEnterCritical
4698:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4699:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 6502              		.loc 1 4699 0 discriminator 4
 6503 001c BB68     		ldr	r3, [r7, #8]
 6504 001e 93F85830 		ldrb	r3, [r3, #88]
 6505 0022 DBB2     		uxtb	r3, r3
 6506 0024 022B     		cmp	r3, #2
ARM GAS  /tmp/ccfW2k76.s 			page 201


 6507 0026 06D1     		bne	.L434
4700:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4701:../../../FreeRTOS_9_0/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6508              		.loc 1 4701 0
 6509 0028 BB68     		ldr	r3, [r7, #8]
 6510 002a 0022     		movs	r2, #0
 6511 002c 83F85820 		strb	r2, [r3, #88]
4702:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdPASS;
 6512              		.loc 1 4702 0
 6513 0030 0123     		movs	r3, #1
 6514 0032 FB60     		str	r3, [r7, #12]
 6515 0034 01E0     		b	.L435
 6516              	.L434:
4703:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4704:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4705:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4706:../../../FreeRTOS_9_0/Source/tasks.c **** 				xReturn = pdFAIL;
 6517              		.loc 1 4706 0
 6518 0036 0023     		movs	r3, #0
 6519 0038 FB60     		str	r3, [r7, #12]
 6520              	.L435:
4707:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4708:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4709:../../../FreeRTOS_9_0/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6521              		.loc 1 4709 0
 6522 003a FFF7FEFF 		bl	vPortExitCritical
4710:../../../FreeRTOS_9_0/Source/tasks.c **** 
4711:../../../FreeRTOS_9_0/Source/tasks.c **** 		return xReturn;
 6523              		.loc 1 4711 0
 6524 003e FB68     		ldr	r3, [r7, #12]
4712:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
 6525              		.loc 1 4712 0
 6526 0040 1846     		mov	r0, r3
 6527 0042 1037     		adds	r7, r7, #16
 6528              	.LCFI269:
 6529              		.cfi_def_cfa_offset 8
 6530 0044 BD46     		mov	sp, r7
 6531              	.LCFI270:
 6532              		.cfi_def_cfa_register 13
 6533              		@ sp needed
 6534 0046 80BD     		pop	{r7, pc}
 6535              	.L438:
 6536              		.align	2
 6537              	.L437:
 6538 0048 00000000 		.word	pxCurrentTCB
 6539              		.cfi_endproc
 6540              	.LFE57:
 6542              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 6543              		.align	2
 6544              		.thumb
 6545              		.thumb_func
 6547              	prvAddCurrentTaskToDelayedList:
 6548              	.LFB58:
4713:../../../FreeRTOS_9_0/Source/tasks.c **** 
4714:../../../FreeRTOS_9_0/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4715:../../../FreeRTOS_9_0/Source/tasks.c **** /*-----------------------------------------------------------*/
4716:../../../FreeRTOS_9_0/Source/tasks.c **** 
ARM GAS  /tmp/ccfW2k76.s 			page 202


4717:../../../FreeRTOS_9_0/Source/tasks.c **** 
4718:../../../FreeRTOS_9_0/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4719:../../../FreeRTOS_9_0/Source/tasks.c **** {
 6549              		.loc 1 4719 0
 6550              		.cfi_startproc
 6551              		@ args = 0, pretend = 0, frame = 16
 6552              		@ frame_needed = 1, uses_anonymous_args = 0
 6553 0000 80B5     		push	{r7, lr}
 6554              	.LCFI271:
 6555              		.cfi_def_cfa_offset 8
 6556              		.cfi_offset 7, -8
 6557              		.cfi_offset 14, -4
 6558 0002 84B0     		sub	sp, sp, #16
 6559              	.LCFI272:
 6560              		.cfi_def_cfa_offset 24
 6561 0004 00AF     		add	r7, sp, #0
 6562              	.LCFI273:
 6563              		.cfi_def_cfa_register 7
 6564 0006 7860     		str	r0, [r7, #4]
 6565 0008 3960     		str	r1, [r7]
4720:../../../FreeRTOS_9_0/Source/tasks.c **** TickType_t xTimeToWake;
4721:../../../FreeRTOS_9_0/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 6566              		.loc 1 4721 0
 6567 000a 284B     		ldr	r3, .L444
 6568 000c 1B68     		ldr	r3, [r3]
 6569 000e FB60     		str	r3, [r7, #12]
4722:../../../FreeRTOS_9_0/Source/tasks.c **** 
4723:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4724:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4725:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4726:../../../FreeRTOS_9_0/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4727:../../../FreeRTOS_9_0/Source/tasks.c **** 		when the task leaves the Blocked state. */
4728:../../../FreeRTOS_9_0/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4729:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4730:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif
4731:../../../FreeRTOS_9_0/Source/tasks.c **** 
4732:../../../FreeRTOS_9_0/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4733:../../../FreeRTOS_9_0/Source/tasks.c **** 	as the same list item is used for both lists. */
4734:../../../FreeRTOS_9_0/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6570              		.loc 1 4734 0
 6571 0010 274B     		ldr	r3, .L444+4
 6572 0012 1B68     		ldr	r3, [r3]
 6573 0014 0433     		adds	r3, r3, #4
 6574 0016 1846     		mov	r0, r3
 6575 0018 FFF7FEFF 		bl	uxListRemove
 6576 001c 0346     		mov	r3, r0
 6577 001e 002B     		cmp	r3, #0
 6578 0020 0BD1     		bne	.L440
4735:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4736:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4737:../../../FreeRTOS_9_0/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4738:../../../FreeRTOS_9_0/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 6579              		.loc 1 4738 0
 6580 0022 234B     		ldr	r3, .L444+4
 6581 0024 1B68     		ldr	r3, [r3]
 6582 0026 DB6A     		ldr	r3, [r3, #44]
 6583 0028 1A46     		mov	r2, r3
ARM GAS  /tmp/ccfW2k76.s 			page 203


 6584 002a 0123     		movs	r3, #1
 6585 002c 9340     		lsls	r3, r3, r2
 6586 002e DA43     		mvns	r2, r3
 6587 0030 204B     		ldr	r3, .L444+8
 6588 0032 1B68     		ldr	r3, [r3]
 6589 0034 1340     		ands	r3, r3, r2
 6590 0036 1F4A     		ldr	r2, .L444+8
 6591 0038 1360     		str	r3, [r2]
 6592              	.L440:
4739:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4740:../../../FreeRTOS_9_0/Source/tasks.c **** 	else
4741:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4742:../../../FreeRTOS_9_0/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4743:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4744:../../../FreeRTOS_9_0/Source/tasks.c **** 
4745:../../../FreeRTOS_9_0/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4746:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4747:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 6593              		.loc 1 4747 0
 6594 003a 7B68     		ldr	r3, [r7, #4]
 6595 003c B3F1FF3F 		cmp	r3, #-1
 6596 0040 0AD1     		bne	.L441
 6597              		.loc 1 4747 0 is_stmt 0 discriminator 1
 6598 0042 3B68     		ldr	r3, [r7]
 6599 0044 002B     		cmp	r3, #0
 6600 0046 07D0     		beq	.L441
4748:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4749:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4750:../../../FreeRTOS_9_0/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4751:../../../FreeRTOS_9_0/Source/tasks.c **** 			indefinitely. */
4752:../../../FreeRTOS_9_0/Source/tasks.c **** 			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
4753:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6601              		.loc 1 4753 0 is_stmt 1
 6602 0048 194B     		ldr	r3, .L444+4
 6603 004a 1B68     		ldr	r3, [r3]
 6604 004c 0433     		adds	r3, r3, #4
 6605 004e 1A48     		ldr	r0, .L444+12
 6606 0050 1946     		mov	r1, r3
 6607 0052 FFF7FEFF 		bl	vListInsertEnd
 6608 0056 26E0     		b	.L439
 6609              	.L441:
4754:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4755:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4756:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4757:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4758:../../../FreeRTOS_9_0/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4759:../../../FreeRTOS_9_0/Source/tasks.c **** 			kernel will manage it correctly. */
4760:../../../FreeRTOS_9_0/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 6610              		.loc 1 4760 0
 6611 0058 FA68     		ldr	r2, [r7, #12]
 6612 005a 7B68     		ldr	r3, [r7, #4]
 6613 005c 1344     		add	r3, r3, r2
 6614 005e BB60     		str	r3, [r7, #8]
4761:../../../FreeRTOS_9_0/Source/tasks.c **** 
4762:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4763:../../../FreeRTOS_9_0/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 6615              		.loc 1 4763 0
ARM GAS  /tmp/ccfW2k76.s 			page 204


 6616 0060 134B     		ldr	r3, .L444+4
 6617 0062 1B68     		ldr	r3, [r3]
 6618 0064 BA68     		ldr	r2, [r7, #8]
 6619 0066 5A60     		str	r2, [r3, #4]
4764:../../../FreeRTOS_9_0/Source/tasks.c **** 
4765:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 6620              		.loc 1 4765 0
 6621 0068 BA68     		ldr	r2, [r7, #8]
 6622 006a FB68     		ldr	r3, [r7, #12]
 6623 006c 9A42     		cmp	r2, r3
 6624 006e 09D2     		bcs	.L443
4766:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4767:../../../FreeRTOS_9_0/Source/tasks.c ****                 traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
4768:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4769:../../../FreeRTOS_9_0/Source/tasks.c **** 				list. */
4770:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6625              		.loc 1 4770 0
 6626 0070 124B     		ldr	r3, .L444+16
 6627 0072 1A68     		ldr	r2, [r3]
 6628 0074 0E4B     		ldr	r3, .L444+4
 6629 0076 1B68     		ldr	r3, [r3]
 6630 0078 0433     		adds	r3, r3, #4
 6631 007a 1046     		mov	r0, r2
 6632 007c 1946     		mov	r1, r3
 6633 007e FFF7FEFF 		bl	vListInsert
 6634 0082 10E0     		b	.L439
 6635              	.L443:
4771:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4772:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4773:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4774:../../../FreeRTOS_9_0/Source/tasks.c ****                 traceMOVED_TASK_TO_DELAYED_LIST();
4775:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4776:../../../FreeRTOS_9_0/Source/tasks.c **** 				is used. */
4777:../../../FreeRTOS_9_0/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6636              		.loc 1 4777 0
 6637 0084 0E4B     		ldr	r3, .L444+20
 6638 0086 1A68     		ldr	r2, [r3]
 6639 0088 094B     		ldr	r3, .L444+4
 6640 008a 1B68     		ldr	r3, [r3]
 6641 008c 0433     		adds	r3, r3, #4
 6642 008e 1046     		mov	r0, r2
 6643 0090 1946     		mov	r1, r3
 6644 0092 FFF7FEFF 		bl	vListInsert
4778:../../../FreeRTOS_9_0/Source/tasks.c **** 
4779:../../../FreeRTOS_9_0/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4780:../../../FreeRTOS_9_0/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4781:../../../FreeRTOS_9_0/Source/tasks.c **** 				needs to be updated too. */
4782:../../../FreeRTOS_9_0/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 6645              		.loc 1 4782 0
 6646 0096 0B4B     		ldr	r3, .L444+24
 6647 0098 1B68     		ldr	r3, [r3]
 6648 009a BA68     		ldr	r2, [r7, #8]
 6649 009c 9A42     		cmp	r2, r3
 6650 009e 02D2     		bcs	.L439
4783:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4784:../../../FreeRTOS_9_0/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 6651              		.loc 1 4784 0
ARM GAS  /tmp/ccfW2k76.s 			page 205


 6652 00a0 084A     		ldr	r2, .L444+24
 6653 00a2 BB68     		ldr	r3, [r7, #8]
 6654 00a4 1360     		str	r3, [r2]
 6655              	.L439:
4785:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4786:../../../FreeRTOS_9_0/Source/tasks.c **** 				else
4787:../../../FreeRTOS_9_0/Source/tasks.c **** 				{
4788:../../../FreeRTOS_9_0/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4789:../../../FreeRTOS_9_0/Source/tasks.c **** 				}
4790:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4791:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4792:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4793:../../../FreeRTOS_9_0/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4794:../../../FreeRTOS_9_0/Source/tasks.c **** 	{
4795:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4796:../../../FreeRTOS_9_0/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4797:../../../FreeRTOS_9_0/Source/tasks.c **** 		will manage it correctly. */
4798:../../../FreeRTOS_9_0/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4799:../../../FreeRTOS_9_0/Source/tasks.c **** 
4800:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4801:../../../FreeRTOS_9_0/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4802:../../../FreeRTOS_9_0/Source/tasks.c **** 
4803:../../../FreeRTOS_9_0/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4804:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4805:../../../FreeRTOS_9_0/Source/tasks.c ****             traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
4806:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4807:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4808:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4809:../../../FreeRTOS_9_0/Source/tasks.c **** 		else
4810:../../../FreeRTOS_9_0/Source/tasks.c **** 		{
4811:../../../FreeRTOS_9_0/Source/tasks.c ****             traceMOVED_TASK_TO_DELAYED_LIST();
4812:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4813:../../../FreeRTOS_9_0/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4814:../../../FreeRTOS_9_0/Source/tasks.c **** 
4815:../../../FreeRTOS_9_0/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4816:../../../FreeRTOS_9_0/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4817:../../../FreeRTOS_9_0/Source/tasks.c **** 			too. */
4818:../../../FreeRTOS_9_0/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4819:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4820:../../../FreeRTOS_9_0/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4821:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4822:../../../FreeRTOS_9_0/Source/tasks.c **** 			else
4823:../../../FreeRTOS_9_0/Source/tasks.c **** 			{
4824:../../../FreeRTOS_9_0/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4825:../../../FreeRTOS_9_0/Source/tasks.c **** 			}
4826:../../../FreeRTOS_9_0/Source/tasks.c **** 		}
4827:../../../FreeRTOS_9_0/Source/tasks.c **** 
4828:../../../FreeRTOS_9_0/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4829:../../../FreeRTOS_9_0/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4830:../../../FreeRTOS_9_0/Source/tasks.c **** 	}
4831:../../../FreeRTOS_9_0/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4832:../../../FreeRTOS_9_0/Source/tasks.c **** }
 6656              		.loc 1 4832 0
 6657 00a6 1037     		adds	r7, r7, #16
 6658              	.LCFI274:
 6659              		.cfi_def_cfa_offset 8
 6660 00a8 BD46     		mov	sp, r7
ARM GAS  /tmp/ccfW2k76.s 			page 206


 6661              	.LCFI275:
 6662              		.cfi_def_cfa_register 13
 6663              		@ sp needed
 6664 00aa 80BD     		pop	{r7, pc}
 6665              	.L445:
 6666              		.align	2
 6667              	.L444:
 6668 00ac 00000000 		.word	xTickCount
 6669 00b0 00000000 		.word	pxCurrentTCB
 6670 00b4 00000000 		.word	uxTopReadyPriority
 6671 00b8 00000000 		.word	xSuspendedTaskList
 6672 00bc 00000000 		.word	pxOverflowDelayedTaskList
 6673 00c0 00000000 		.word	pxDelayedTaskList
 6674 00c4 00000000 		.word	xNextTaskUnblockTime
 6675              		.cfi_endproc
 6676              	.LFE58:
 6678              		.text
 6679              	.Letext0:
 6680              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 6681              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 6682              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 6683              		.file 6 "../../../FreeRTOS_9_0/Source/include/projdefs.h"
 6684              		.file 7 "../../../FreeRTOS_9_0/Source/include/list.h"
 6685              		.file 8 "../../../FreeRTOS_9_0/Source/include/task.h"
ARM GAS  /tmp/ccfW2k76.s 			page 207


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccfW2k76.s:25     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccfW2k76.s:22     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccfW2k76.s:28     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccfW2k76.s:31     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccfW2k76.s:34     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccfW2k76.s:37     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccfW2k76.s:40     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccfW2k76.s:43     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccfW2k76.s:46     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccfW2k76.s:49     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccfW2k76.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccfW2k76.s:55     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccfW2k76.s:58     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccfW2k76.s:61     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccfW2k76.s:64     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccfW2k76.s:67     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccfW2k76.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccfW2k76.s:73     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccfW2k76.s:76     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccfW2k76.s:79     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccfW2k76.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccfW2k76.s:85     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccfW2k76.s:88     .bss.xTickCount:0000000000000000 $d
     /tmp/ccfW2k76.s:91     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccfW2k76.s:94     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccfW2k76.s:97     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccfW2k76.s:100    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccfW2k76.s:103    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccfW2k76.s:106    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccfW2k76.s:109    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccfW2k76.s:112    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccfW2k76.s:115    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccfW2k76.s:118    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccfW2k76.s:121    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccfW2k76.s:124    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccfW2k76.s:127    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccfW2k76.s:130    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccfW2k76.s:133    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccfW2k76.s:136    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccfW2k76.s:139    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccfW2k76.s:142    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccfW2k76.s:145    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccfW2k76.s:148    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccfW2k76.s:153    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccfW2k76.s:261    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccfW2k76.s:453    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccfW2k76.s:257    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccfW2k76.s:449    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccfW2k76.s:4239   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccfW2k76.s:589    .text.prvAddNewTaskToReadyList:00000000000000c4 $d
     /tmp/ccfW2k76.s:600    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccfW2k76.s:605    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccfW2k76.s:4775   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccfW2k76.s:4818   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccfW2k76.s:781    .text.vTaskDelete:00000000000000f4 $d
ARM GAS  /tmp/ccfW2k76.s 			page 208


     /tmp/ccfW2k76.s:795    .text.vTaskDelay:0000000000000000 $t
     /tmp/ccfW2k76.s:800    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccfW2k76.s:2243   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccfW2k76.s:6547   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccfW2k76.s:2286   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccfW2k76.s:886    .text.vTaskDelay:000000000000005c $d
     /tmp/ccfW2k76.s:892    .text.eTaskGetState:0000000000000000 $t
     /tmp/ccfW2k76.s:897    .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccfW2k76.s:1031   .text.eTaskGetState:000000000000009c $d
     /tmp/ccfW2k76.s:1040   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccfW2k76.s:1045   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccfW2k76.s:1100   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccfW2k76.s:1105   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccfW2k76.s:1110   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccfW2k76.s:1195   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccfW2k76.s:1200   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccfW2k76.s:1205   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccfW2k76.s:1442   .text.vTaskPrioritySet:000000000000014c $d
     /tmp/ccfW2k76.s:1450   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccfW2k76.s:1455   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccfW2k76.s:3172   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccfW2k76.s:1628   .text.vTaskSuspend:00000000000000ec $d
     /tmp/ccfW2k76.s:1640   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccfW2k76.s:1644   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccfW2k76.s:1750   .text.prvTaskIsTaskSuspended:000000000000006c $d
     /tmp/ccfW2k76.s:1756   .text.vTaskResume:0000000000000000 $t
     /tmp/ccfW2k76.s:1761   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccfW2k76.s:1886   .text.vTaskResume:00000000000000ac $d
     /tmp/ccfW2k76.s:1894   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccfW2k76.s:1899   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccfW2k76.s:2055   .text.xTaskResumeFromISR:00000000000000d0 $d
     /tmp/ccfW2k76.s:2064   .rodata:0000000000000000 $d
     /tmp/ccfW2k76.s:2068   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccfW2k76.s:2073   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccfW2k76.s:2169   .text.vTaskStartScheduler:0000000000000070 $d
     /tmp/ccfW2k76.s:4186   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccfW2k76.s:2179   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccfW2k76.s:2184   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccfW2k76.s:2233   .text.vTaskEndScheduler:0000000000000028 $d
     /tmp/ccfW2k76.s:2238   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccfW2k76.s:2276   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccfW2k76.s:2281   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccfW2k76.s:2911   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccfW2k76.s:2488   .text.xTaskResumeAll:0000000000000118 $d
     /tmp/ccfW2k76.s:2501   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccfW2k76.s:2506   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccfW2k76.s:2546   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccfW2k76.s:2551   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccfW2k76.s:2556   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccfW2k76.s:2597   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccfW2k76.s:2602   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccfW2k76.s:2607   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccfW2k76.s:2638   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccfW2k76.s:2643   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccfW2k76.s:2648   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccfW2k76.s:2722   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccfW2k76.s:2727   .text.uxTaskGetSystemState:0000000000000000 $t
ARM GAS  /tmp/ccfW2k76.s 			page 209


     /tmp/ccfW2k76.s:2732   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccfW2k76.s:4578   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccfW2k76.s:2896   .text.uxTaskGetSystemState:0000000000000108 $d
     /tmp/ccfW2k76.s:2906   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccfW2k76.s:3152   .text.xTaskIncrementTick:0000000000000150 $d
     /tmp/ccfW2k76.s:3167   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccfW2k76.s:3306   .text.vTaskSwitchContext:00000000000000a0 $d
     /tmp/ccfW2k76.s:3315   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccfW2k76.s:3320   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccfW2k76.s:3384   .text.vTaskPlaceOnEventList:0000000000000040 $d
     /tmp/ccfW2k76.s:3389   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccfW2k76.s:3394   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccfW2k76.s:3488   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/ccfW2k76.s:3494   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccfW2k76.s:3499   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccfW2k76.s:3628   .text.xTaskRemoveFromEventList:00000000000000b0 $d
     /tmp/ccfW2k76.s:3638   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccfW2k76.s:3643   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccfW2k76.s:3784   .text.xTaskRemoveFromUnorderedEventList:00000000000000bc $d
     /tmp/ccfW2k76.s:3793   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccfW2k76.s:3798   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccfW2k76.s:3864   .text.vTaskSetTimeOutState:000000000000003c $d
     /tmp/ccfW2k76.s:3870   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccfW2k76.s:3875   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccfW2k76.s:4022   .text.xTaskCheckForTimeOut:00000000000000b4 $d
     /tmp/ccfW2k76.s:4028   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccfW2k76.s:4033   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccfW2k76.s:4064   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccfW2k76.s:4069   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccfW2k76.s:4074   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccfW2k76.s:4129   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccfW2k76.s:4134   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccfW2k76.s:4182   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccfW2k76.s:4331   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccfW2k76.s:4229   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccfW2k76.s:4235   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccfW2k76.s:4315   .text.prvInitialiseTaskLists:000000000000005c $d
     /tmp/ccfW2k76.s:4327   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccfW2k76.s:4419   .text.prvCheckTasksWaitingTermination:0000000000000068 $d
     /tmp/ccfW2k76.s:4426   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccfW2k76.s:4431   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccfW2k76.s:4708   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccfW2k76.s:4569   .text.vTaskGetInfo:00000000000000b4 $d
     /tmp/ccfW2k76.s:4574   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccfW2k76.s:4704   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccfW2k76.s:4771   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccfW2k76.s:4814   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccfW2k76.s:4885   .text.prvResetNextTaskUnblockTime:0000000000000040 $d
     /tmp/ccfW2k76.s:4891   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccfW2k76.s:4896   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccfW2k76.s:4936   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccfW2k76.s:4941   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccfW2k76.s:4946   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccfW2k76.s:5006   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccfW2k76.s:5012   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccfW2k76.s:5017   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccfW2k76.s:5170   .text.vTaskPriorityInherit:00000000000000e4 $d
ARM GAS  /tmp/ccfW2k76.s 			page 210


     /tmp/ccfW2k76.s:5177   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccfW2k76.s:5182   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccfW2k76.s:5362   .text.xTaskPriorityDisinherit:0000000000000100 $d
     /tmp/ccfW2k76.s:5369   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccfW2k76.s:5374   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccfW2k76.s:5423   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccfW2k76.s:5428   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccfW2k76.s:5433   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccfW2k76.s:5476   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccfW2k76.s:5481   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccfW2k76.s:5486   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccfW2k76.s:5591   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccfW2k76.s:5597   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccfW2k76.s:5602   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccfW2k76.s:5726   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccfW2k76.s:5732   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccfW2k76.s:5737   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccfW2k76.s:5815   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/ccfW2k76.s:5820   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/ccfW2k76.s:5959   .text.xTaskGenericNotify:0000000000000134 $d
     /tmp/ccfW2k76.s:5967   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccfW2k76.s:5972   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccfW2k76.s:6070   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/ccfW2k76.s:6075   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/ccfW2k76.s:6241   .text.xTaskGenericNotifyFromISR:0000000000000178 $d
     /tmp/ccfW2k76.s:6251   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccfW2k76.s:6256   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccfW2k76.s:6453   .text.vTaskNotifyGiveFromISR:0000000000000108 $d
     /tmp/ccfW2k76.s:6463   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccfW2k76.s:6468   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccfW2k76.s:6538   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccfW2k76.s:6543   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccfW2k76.s:6668   .text.prvAddCurrentTaskToDelayedList:00000000000000ac $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise

ARM GAS  /tmp/cctKmAEP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f7xx_it.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.NMI_Handler,"ax",%progbits
  21              		.align	2
  22              		.global	NMI_Handler
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB140:
  28              		.file 1 "Src/stm32f7xx_it.c"
   1:Src/stm32f7xx_it.c **** /**
   2:Src/stm32f7xx_it.c ****   ******************************************************************************
   3:Src/stm32f7xx_it.c ****   * @file    LwIP/LwIP_HTTP_Server_Socket_RTOS/Src/stm32f7xx_it.c 
   4:Src/stm32f7xx_it.c ****   * @author  MCD Application Team
   5:Src/stm32f7xx_it.c ****   * @version V1.0.1
   6:Src/stm32f7xx_it.c ****   * @date    23-September-2016
   7:Src/stm32f7xx_it.c ****   * @brief   Main Interrupt Service Routines.
   8:Src/stm32f7xx_it.c ****   *          This file provides template for all exceptions handler and 
   9:Src/stm32f7xx_it.c ****   *          peripherals interrupt service routine.   
  10:Src/stm32f7xx_it.c ****   ******************************************************************************
  11:Src/stm32f7xx_it.c ****   * @attention
  12:Src/stm32f7xx_it.c ****   *
  13:Src/stm32f7xx_it.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  14:Src/stm32f7xx_it.c ****   *
  15:Src/stm32f7xx_it.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  16:Src/stm32f7xx_it.c ****   * You may not use this file except in compliance with the License.
  17:Src/stm32f7xx_it.c ****   * You may obtain a copy of the License at:
  18:Src/stm32f7xx_it.c ****   *
  19:Src/stm32f7xx_it.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  20:Src/stm32f7xx_it.c ****   *
  21:Src/stm32f7xx_it.c ****   * Unless required by applicable law or agreed to in writing, software 
  22:Src/stm32f7xx_it.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  23:Src/stm32f7xx_it.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  24:Src/stm32f7xx_it.c ****   * See the License for the specific language governing permissions and
  25:Src/stm32f7xx_it.c ****   * limitations under the License.
  26:Src/stm32f7xx_it.c ****   *
  27:Src/stm32f7xx_it.c ****   ******************************************************************************
  28:Src/stm32f7xx_it.c ****   */
  29:Src/stm32f7xx_it.c **** 
  30:Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/cctKmAEP.s 			page 2


  31:Src/stm32f7xx_it.c **** #include "stm32f7xx_hal.h"
  32:Src/stm32f7xx_it.c **** #include "stm32f7xx.h"
  33:Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  34:Src/stm32f7xx_it.c **** #include "FreeRTOS.h"
  35:Src/stm32f7xx_it.c **** #include "task.h"
  36:Src/stm32f7xx_it.c **** 
  37:Src/stm32f7xx_it.c **** extern void xPortSysTickHandler(void);
  38:Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim13;
  39:Src/stm32f7xx_it.c **** 
  40:Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  41:Src/stm32f7xx_it.c **** //extern TIM_HandleTypeDef htim1;
  42:Src/stm32f7xx_it.c **** 
  43:Src/stm32f7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  44:Src/stm32f7xx_it.c **** /* Private define ------------------------------------------------------------*/
  45:Src/stm32f7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  46:Src/stm32f7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  47:Src/stm32f7xx_it.c **** /* Private functions ---------------------------------------------------------*/
  48:Src/stm32f7xx_it.c **** 
  49:Src/stm32f7xx_it.c **** /******************************************************************************/
  50:Src/stm32f7xx_it.c **** /*            Cortex-M7 Processor Interruption and Exception Handlers         */ 
  51:Src/stm32f7xx_it.c **** /******************************************************************************/
  52:Src/stm32f7xx_it.c **** /**
  53:Src/stm32f7xx_it.c ****   * @brief  This function handles NMI exception.
  54:Src/stm32f7xx_it.c ****   * @param  None
  55:Src/stm32f7xx_it.c ****   * @retval None
  56:Src/stm32f7xx_it.c ****   */
  57:Src/stm32f7xx_it.c **** void NMI_Handler(void)
  58:Src/stm32f7xx_it.c **** {
  29              		.loc 1 58 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
  59:Src/stm32f7xx_it.c **** }
  41              		.loc 1 59 0
  42 0004 BD46     		mov	sp, r7
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 13
  45              		@ sp needed
  46 0006 5DF8047B 		ldr	r7, [sp], #4
  47              	.LCFI3:
  48              		.cfi_restore 7
  49              		.cfi_def_cfa_offset 0
  50 000a 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE140:
  54              		.section	.text.HardFault_Handler,"ax",%progbits
  55              		.align	2
  56              		.global	HardFault_Handler
  57              		.thumb
ARM GAS  /tmp/cctKmAEP.s 			page 3


  58              		.thumb_func
  60              	HardFault_Handler:
  61              	.LFB141:
  60:Src/stm32f7xx_it.c **** 
  61:Src/stm32f7xx_it.c **** /**
  62:Src/stm32f7xx_it.c ****   * @brief  This function handles Hard Fault exception.
  63:Src/stm32f7xx_it.c ****   * @param  None
  64:Src/stm32f7xx_it.c ****   * @retval None
  65:Src/stm32f7xx_it.c ****   */
  66:Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  67:Src/stm32f7xx_it.c **** {
  62              		.loc 1 67 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              	.LCFI4:
  69              		.cfi_def_cfa_offset 4
  70              		.cfi_offset 7, -4
  71 0002 00AF     		add	r7, sp, #0
  72              	.LCFI5:
  73              		.cfi_def_cfa_register 7
  74              	.L3:
  68:Src/stm32f7xx_it.c ****   /* Go to infinite loop when Hard Fault exception occurs */
  69:Src/stm32f7xx_it.c ****   while (1)
  70:Src/stm32f7xx_it.c ****   {
  71:Src/stm32f7xx_it.c ****   }
  75              		.loc 1 71 0 discriminator 1
  76 0004 FEE7     		b	.L3
  77              		.cfi_endproc
  78              	.LFE141:
  80 0006 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  81              		.align	2
  82              		.global	MemManage_Handler
  83              		.thumb
  84              		.thumb_func
  86              	MemManage_Handler:
  87              	.LFB142:
  72:Src/stm32f7xx_it.c **** }
  73:Src/stm32f7xx_it.c **** 
  74:Src/stm32f7xx_it.c **** /**
  75:Src/stm32f7xx_it.c ****   * @brief  This function handles Memory Manage exception.
  76:Src/stm32f7xx_it.c ****   * @param  None
  77:Src/stm32f7xx_it.c ****   * @retval None
  78:Src/stm32f7xx_it.c ****   */
  79:Src/stm32f7xx_it.c **** void MemManage_Handler(void)
  80:Src/stm32f7xx_it.c **** {
  88              		.loc 1 80 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 1, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93 0000 80B4     		push	{r7}
  94              	.LCFI6:
  95              		.cfi_def_cfa_offset 4
  96              		.cfi_offset 7, -4
ARM GAS  /tmp/cctKmAEP.s 			page 4


  97 0002 00AF     		add	r7, sp, #0
  98              	.LCFI7:
  99              		.cfi_def_cfa_register 7
 100              	.L5:
  81:Src/stm32f7xx_it.c ****   /* Go to infinite loop when Memory Manage exception occurs */
  82:Src/stm32f7xx_it.c ****   while (1)
  83:Src/stm32f7xx_it.c ****   {
  84:Src/stm32f7xx_it.c ****   }
 101              		.loc 1 84 0 discriminator 1
 102 0004 FEE7     		b	.L5
 103              		.cfi_endproc
 104              	.LFE142:
 106 0006 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
 107              		.align	2
 108              		.global	BusFault_Handler
 109              		.thumb
 110              		.thumb_func
 112              	BusFault_Handler:
 113              	.LFB143:
  85:Src/stm32f7xx_it.c **** }
  86:Src/stm32f7xx_it.c **** 
  87:Src/stm32f7xx_it.c **** /**
  88:Src/stm32f7xx_it.c ****   * @brief  This function handles Bus Fault exception.
  89:Src/stm32f7xx_it.c ****   * @param  None
  90:Src/stm32f7xx_it.c ****   * @retval None
  91:Src/stm32f7xx_it.c ****   */
  92:Src/stm32f7xx_it.c **** void BusFault_Handler(void)
  93:Src/stm32f7xx_it.c **** {
 114              		.loc 1 93 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 0000 80B4     		push	{r7}
 120              	.LCFI8:
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 7, -4
 123 0002 00AF     		add	r7, sp, #0
 124              	.LCFI9:
 125              		.cfi_def_cfa_register 7
 126              	.L7:
  94:Src/stm32f7xx_it.c ****   /* Go to infinite loop when Bus Fault exception occurs */
  95:Src/stm32f7xx_it.c ****   while (1)
  96:Src/stm32f7xx_it.c ****   {
  97:Src/stm32f7xx_it.c ****   }
 127              		.loc 1 97 0 discriminator 1
 128 0004 FEE7     		b	.L7
 129              		.cfi_endproc
 130              	.LFE143:
 132 0006 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
 133              		.align	2
 134              		.global	UsageFault_Handler
 135              		.thumb
 136              		.thumb_func
 138              	UsageFault_Handler:
 139              	.LFB144:
  98:Src/stm32f7xx_it.c **** }
ARM GAS  /tmp/cctKmAEP.s 			page 5


  99:Src/stm32f7xx_it.c **** 
 100:Src/stm32f7xx_it.c **** /**
 101:Src/stm32f7xx_it.c ****   * @brief  This function handles Usage Fault exception.
 102:Src/stm32f7xx_it.c ****   * @param  None
 103:Src/stm32f7xx_it.c ****   * @retval None
 104:Src/stm32f7xx_it.c ****   */
 105:Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 106:Src/stm32f7xx_it.c **** {
 140              		.loc 1 106 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 1, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145 0000 80B4     		push	{r7}
 146              	.LCFI10:
 147              		.cfi_def_cfa_offset 4
 148              		.cfi_offset 7, -4
 149 0002 00AF     		add	r7, sp, #0
 150              	.LCFI11:
 151              		.cfi_def_cfa_register 7
 152              	.L9:
 107:Src/stm32f7xx_it.c ****   /* Go to infinite loop when Usage Fault exception occurs */
 108:Src/stm32f7xx_it.c ****   while (1)
 109:Src/stm32f7xx_it.c ****   {
 110:Src/stm32f7xx_it.c ****   }
 153              		.loc 1 110 0 discriminator 1
 154 0004 FEE7     		b	.L9
 155              		.cfi_endproc
 156              	.LFE144:
 158 0006 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 159              		.align	2
 160              		.global	DebugMon_Handler
 161              		.thumb
 162              		.thumb_func
 164              	DebugMon_Handler:
 165              	.LFB145:
 111:Src/stm32f7xx_it.c **** }
 112:Src/stm32f7xx_it.c **** 
 113:Src/stm32f7xx_it.c **** /**
 114:Src/stm32f7xx_it.c ****   * @brief  This function handles Debug Monitor exception.
 115:Src/stm32f7xx_it.c ****   * @param  None
 116:Src/stm32f7xx_it.c ****   * @retval None
 117:Src/stm32f7xx_it.c ****   */
 118:Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 119:Src/stm32f7xx_it.c **** {
 166              		.loc 1 119 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 1, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171 0000 80B4     		push	{r7}
 172              	.LCFI12:
 173              		.cfi_def_cfa_offset 4
 174              		.cfi_offset 7, -4
 175 0002 00AF     		add	r7, sp, #0
 176              	.LCFI13:
 177              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cctKmAEP.s 			page 6


 120:Src/stm32f7xx_it.c **** }
 178              		.loc 1 120 0
 179 0004 BD46     		mov	sp, r7
 180              	.LCFI14:
 181              		.cfi_def_cfa_register 13
 182              		@ sp needed
 183 0006 5DF8047B 		ldr	r7, [sp], #4
 184              	.LCFI15:
 185              		.cfi_restore 7
 186              		.cfi_def_cfa_offset 0
 187 000a 7047     		bx	lr
 188              		.cfi_endproc
 189              	.LFE145:
 191              		.section	.text.SysTick_Handler,"ax",%progbits
 192              		.align	2
 193              		.global	SysTick_Handler
 194              		.thumb
 195              		.thumb_func
 197              	SysTick_Handler:
 198              	.LFB146:
 121:Src/stm32f7xx_it.c **** 
 122:Src/stm32f7xx_it.c **** 
 123:Src/stm32f7xx_it.c **** /**
 124:Src/stm32f7xx_it.c ****   * @brief  This function handles SysTick Handler.
 125:Src/stm32f7xx_it.c ****   * @param  None
 126:Src/stm32f7xx_it.c ****   * @retval None
 127:Src/stm32f7xx_it.c ****   */
 128:Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 129:Src/stm32f7xx_it.c **** {
 199              		.loc 1 129 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203 0000 80B5     		push	{r7, lr}
 204              	.LCFI16:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 7, -8
 207              		.cfi_offset 14, -4
 208 0002 00AF     		add	r7, sp, #0
 209              	.LCFI17:
 210              		.cfi_def_cfa_register 7
 130:Src/stm32f7xx_it.c **** 	HAL_IncTick();
 211              		.loc 1 130 0
 212 0004 FFF7FEFF 		bl	HAL_IncTick
 131:Src/stm32f7xx_it.c **** 	 if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 213              		.loc 1 131 0
 214 0008 FFF7FEFF 		bl	xTaskGetSchedulerState
 215 000c 0346     		mov	r3, r0
 216 000e 012B     		cmp	r3, #1
 217 0010 01D0     		beq	.L11
 132:Src/stm32f7xx_it.c **** 	  {
 133:Src/stm32f7xx_it.c **** 	    xPortSysTickHandler();
 218              		.loc 1 133 0
 219 0012 FFF7FEFF 		bl	xPortSysTickHandler
 220              	.L11:
 134:Src/stm32f7xx_it.c **** 	  }
 135:Src/stm32f7xx_it.c **** 
ARM GAS  /tmp/cctKmAEP.s 			page 7


 136:Src/stm32f7xx_it.c **** }
 221              		.loc 1 136 0
 222 0016 80BD     		pop	{r7, pc}
 223              		.cfi_endproc
 224              	.LFE146:
 226              		.section	.text.TIM8_UP_TIM13_IRQHandler,"ax",%progbits
 227              		.align	2
 228              		.global	TIM8_UP_TIM13_IRQHandler
 229              		.thumb
 230              		.thumb_func
 232              	TIM8_UP_TIM13_IRQHandler:
 233              	.LFB147:
 137:Src/stm32f7xx_it.c **** 
 138:Src/stm32f7xx_it.c **** /******************************************************************************/
 139:Src/stm32f7xx_it.c **** /*                 STM32F7xx Peripherals Interrupt Handlers                   */
 140:Src/stm32f7xx_it.c **** /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
 141:Src/stm32f7xx_it.c **** /*  available peripheral interrupt handler's name please refer to the startup */
 142:Src/stm32f7xx_it.c **** /*  file (startup_stm32f7xx.s).                                               */
 143:Src/stm32f7xx_it.c **** /******************************************************************************/
 144:Src/stm32f7xx_it.c **** 
 145:Src/stm32f7xx_it.c **** /**
 146:Src/stm32f7xx_it.c **** * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
 147:Src/stm32f7xx_it.c **** */
 148:Src/stm32f7xx_it.c **** void TIM8_UP_TIM13_IRQHandler(void)
 149:Src/stm32f7xx_it.c **** {
 234              		.loc 1 149 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238 0000 80B5     		push	{r7, lr}
 239              	.LCFI18:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 7, -8
 242              		.cfi_offset 14, -4
 243 0002 00AF     		add	r7, sp, #0
 244              	.LCFI19:
 245              		.cfi_def_cfa_register 7
 150:Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim13);
 246              		.loc 1 150 0
 247 0004 0148     		ldr	r0, .L14
 248 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 151:Src/stm32f7xx_it.c **** }
 249              		.loc 1 151 0
 250 000a 80BD     		pop	{r7, pc}
 251              	.L15:
 252              		.align	2
 253              	.L14:
 254 000c 00000000 		.word	htim13
 255              		.cfi_endproc
 256              	.LFE147:
 258              		.text
 259              	.Letext0:
 260              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 261              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 262              		.file 4 "../../Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f769xx.h"
 263              		.file 5 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 264              		.file 6 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
ARM GAS  /tmp/cctKmAEP.s 			page 8


 265              		.file 7 "../../Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 266              		.file 8 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
 267              		.file 9 "../../Drivers/CMSIS/Include/core_cm7.h"
ARM GAS  /tmp/cctKmAEP.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
     /tmp/cctKmAEP.s:21     .text.NMI_Handler:0000000000000000 $t
     /tmp/cctKmAEP.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/cctKmAEP.s:55     .text.HardFault_Handler:0000000000000000 $t
     /tmp/cctKmAEP.s:60     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cctKmAEP.s:81     .text.MemManage_Handler:0000000000000000 $t
     /tmp/cctKmAEP.s:86     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/cctKmAEP.s:107    .text.BusFault_Handler:0000000000000000 $t
     /tmp/cctKmAEP.s:112    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/cctKmAEP.s:133    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/cctKmAEP.s:138    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/cctKmAEP.s:159    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/cctKmAEP.s:164    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/cctKmAEP.s:192    .text.SysTick_Handler:0000000000000000 $t
     /tmp/cctKmAEP.s:197    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/cctKmAEP.s:227    .text.TIM8_UP_TIM13_IRQHandler:0000000000000000 $t
     /tmp/cctKmAEP.s:232    .text.TIM8_UP_TIM13_IRQHandler:0000000000000000 TIM8_UP_TIM13_IRQHandler
     /tmp/cctKmAEP.s:254    .text.TIM8_UP_TIM13_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
xTaskGetSchedulerState
xPortSysTickHandler
HAL_TIM_IRQHandler
htim13

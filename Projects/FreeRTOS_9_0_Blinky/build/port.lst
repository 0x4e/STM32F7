ARM GAS  /tmp/ccBT8CGO.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"port.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.data.uxCriticalNesting,"aw",%progbits
  21              		.align	2
  24              	uxCriticalNesting:
  25 0000 AAAAAAAA 		.word	-1431655766
  26              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
  29              	ucMaxSysCallPriority:
  30 0000 00       		.space	1
  31              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
  32              		.align	2
  35              	ulMaxPRIGROUPValue:
  36 0000 00000000 		.space	4
  37              		.section	.rodata.pcInterruptPriorityRegisters,"a",%progbits
  38              		.align	2
  41              	pcInterruptPriorityRegisters:
  42 0000 F0E300E0 		.word	-536812560
  43              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  44              		.align	2
  45              		.global	pxPortInitialiseStack
  46              		.thumb
  47              		.thumb_func
  49              	pxPortInitialiseStack:
  50              	.LFB5:
  51              		.file 1 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
ARM GAS  /tmp/ccBT8CGO.s 			page 2


  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  *----------------------------------------------------------*/
ARM GAS  /tmp/ccBT8CGO.s 			page 3


  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Scheduler includes. */
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #include "FreeRTOS.h"
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #include "task.h"
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #ifndef __VFP_FP__
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #else
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	as the core. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to manipulate the core.  Registers first... */
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* ...then bits in the registers. */
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to check the validity of an interrupt priority. */
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to manipulate the VFP. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portFPCCR					( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control regi
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portASPEN_AND_LSPEN_BITS	( 0x3UL << 30UL )
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to set up the initial stack. */
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portINITIAL_EXEC_RETURN		( 0xfffffffd )
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* The systick is a 24-bit counter. */
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
ARM GAS  /tmp/ccBT8CGO.s 			page 4


 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** occurred while the SysTick counter is stopped during tickless idle
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** calculations. */
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** debugger. */
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #ifdef configTASK_RETURN_ADDRESS
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #else
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** variable. */
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * file is weak to allow application writers to change the timer used to
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * generate the tick interrupt.
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSetupTimerInterrupt( void );
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Exception handlers.
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortSysTickHandler( void );
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Function to enable the VFP.
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  static void vPortEnableVFP( void ) __attribute__ (( naked ));
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvTaskExitError( void );
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * The number of SysTick increments that make up one tick period.
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
ARM GAS  /tmp/ccBT8CGO.s 			page 5


 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if configUSE_TICKLESS_IDLE == 1
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * 24 bit resolution of the SysTick timer.
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if configUSE_TICKLESS_IDLE == 1
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * power functionality only.
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if configUSE_TICKLESS_IDLE == 1
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if ( configASSERT_DEFINED == 1 )
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configASSERT_DEFINED */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * See header file for description.
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
  52              		.loc 1 224 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 16
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 80B4     		push	{r7}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 4
  60              		.cfi_offset 7, -4
  61 0002 85B0     		sub	sp, sp, #20
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 24
  64 0004 00AF     		add	r7, sp, #0
  65              	.LCFI2:
  66              		.cfi_def_cfa_register 7
  67 0006 F860     		str	r0, [r7, #12]
  68 0008 B960     		str	r1, [r7, #8]
  69 000a 7A60     		str	r2, [r7, #4]
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
ARM GAS  /tmp/ccBT8CGO.s 			page 6


 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	interrupt. */
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	of interrupts, and to ensure alignment. */
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
  70              		.loc 1 230 0
  71 000c FB68     		ldr	r3, [r7, #12]
  72 000e 043B     		subs	r3, r3, #4
  73 0010 FB60     		str	r3, [r7, #12]
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  74              		.loc 1 232 0
  75 0012 FB68     		ldr	r3, [r7, #12]
  76 0014 4FF08072 		mov	r2, #16777216
  77 0018 1A60     		str	r2, [r3]
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
  78              		.loc 1 233 0
  79 001a FB68     		ldr	r3, [r7, #12]
  80 001c 043B     		subs	r3, r3, #4
  81 001e FB60     		str	r3, [r7, #12]
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  82              		.loc 1 234 0
  83 0020 BB68     		ldr	r3, [r7, #8]
  84 0022 23F00102 		bic	r2, r3, #1
  85 0026 FB68     		ldr	r3, [r7, #12]
  86 0028 1A60     		str	r2, [r3]
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
  87              		.loc 1 235 0
  88 002a FB68     		ldr	r3, [r7, #12]
  89 002c 043B     		subs	r3, r3, #4
  90 002e FB60     		str	r3, [r7, #12]
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  91              		.loc 1 236 0
  92 0030 0C4A     		ldr	r2, .L3
  93 0032 FB68     		ldr	r3, [r7, #12]
  94 0034 1A60     		str	r2, [r3]
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Save code space by skipping register initialisation. */
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  95              		.loc 1 239 0
  96 0036 FB68     		ldr	r3, [r7, #12]
  97 0038 143B     		subs	r3, r3, #20
  98 003a FB60     		str	r3, [r7, #12]
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  99              		.loc 1 240 0
 100 003c 7A68     		ldr	r2, [r7, #4]
 101 003e FB68     		ldr	r3, [r7, #12]
 102 0040 1A60     		str	r2, [r3]
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* A save method is being used that requires each task to maintain its
 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	own exec return value. */
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
 103              		.loc 1 244 0
 104 0042 FB68     		ldr	r3, [r7, #12]
 105 0044 043B     		subs	r3, r3, #4
 106 0046 FB60     		str	r3, [r7, #12]
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
ARM GAS  /tmp/ccBT8CGO.s 			page 7


 107              		.loc 1 245 0
 108 0048 FB68     		ldr	r3, [r7, #12]
 109 004a 6FF00202 		mvn	r2, #2
 110 004e 1A60     		str	r2, [r3]
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 111              		.loc 1 247 0
 112 0050 FB68     		ldr	r3, [r7, #12]
 113 0052 203B     		subs	r3, r3, #32
 114 0054 FB60     		str	r3, [r7, #12]
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	return pxTopOfStack;
 115              		.loc 1 249 0
 116 0056 FB68     		ldr	r3, [r7, #12]
 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 117              		.loc 1 250 0
 118 0058 1846     		mov	r0, r3
 119 005a 1437     		adds	r7, r7, #20
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 4
 122 005c BD46     		mov	sp, r7
 123              	.LCFI4:
 124              		.cfi_def_cfa_register 13
 125              		@ sp needed
 126 005e 5DF8047B 		ldr	r7, [sp], #4
 127              	.LCFI5:
 128              		.cfi_restore 7
 129              		.cfi_def_cfa_offset 0
 130 0062 7047     		bx	lr
 131              	.L4:
 132              		.align	2
 133              	.L3:
 134 0064 00000000 		.word	prvTaskExitError
 135              		.cfi_endproc
 136              	.LFE5:
 138              		.section	.text.prvTaskExitError,"ax",%progbits
 139              		.align	2
 140              		.thumb
 141              		.thumb_func
 143              	prvTaskExitError:
 144              	.LFB6:
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvTaskExitError( void )
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 145              		.loc 1 254 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 8
 148              		@ frame_needed = 1, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150 0000 80B4     		push	{r7}
 151              	.LCFI6:
 152              		.cfi_def_cfa_offset 4
 153              		.cfi_offset 7, -4
 154 0002 83B0     		sub	sp, sp, #12
 155              	.LCFI7:
 156              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccBT8CGO.s 			page 8


 157 0004 00AF     		add	r7, sp, #0
 158              	.LCFI8:
 159              		.cfi_def_cfa_register 7
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	should instead call vTaskDelete( NULL ).
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	defined, then stop here so application writers can catch the error. */
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 160              		.loc 1 261 0
 161 0006 0C4B     		ldr	r3, .L9
 162 0008 1B68     		ldr	r3, [r3]
 163 000a B3F1FF3F 		cmp	r3, #-1
 164 000e 09D0     		beq	.L6
 165              	.LBB24:
 166              	.LBB25:
 167              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
ARM GAS  /tmp/ccBT8CGO.s 			page 9


  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccBT8CGO.s 			page 10


  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
ARM GAS  /tmp/ccBT8CGO.s 			page 11


 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccBT8CGO.s 			page 12


 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 168              		.loc 2 237 0 discriminator 1
 169              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 170 0010 4FF05003 			mov r3, #80												
 171 0014 83F31188 		msr basepri, r3											
 172 0018 BFF36F8F 		isb														
 173 001c BFF34F8F 		dsb														
 174              	
 175              	@ 0 "" 2
 176              		.thumb
 177 0020 7B60     		str	r3, [r7, #4]
 178              	.L7:
 179              	.LBE25:
 180              	.LBE24:
 181              		.loc 1 261 0 discriminator 1
 182 0022 FEE7     		b	.L7
 183              	.L6:
 184              	.LBB26:
 185              	.LBB27:
 186              		.loc 2 237 0
 187              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 188 0024 4FF05003 			mov r3, #80												
 189 0028 83F31188 		msr basepri, r3											
 190 002c BFF36F8F 		isb														
 191 0030 BFF34F8F 		dsb														
 192              	
 193              	@ 0 "" 2
 194              		.thumb
 195 0034 3B60     		str	r3, [r7]
 196              	.L8:
 197              	.LBE27:
ARM GAS  /tmp/ccBT8CGO.s 			page 13


 198              	.LBE26:
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portDISABLE_INTERRUPTS();
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	for( ;; );
 199              		.loc 1 263 0 discriminator 2
 200 0036 FEE7     		b	.L8
 201              	.L10:
 202              		.align	2
 203              	.L9:
 204 0038 00000000 		.word	uxCriticalNesting
 205              		.cfi_endproc
 206              	.LFE6:
 208              		.section	.text.SVC_Handler,"ax",%progbits
 209              		.align	2
 210              		.global	SVC_Handler
 211              		.thumb
 212              		.thumb_func
 214              	SVC_Handler:
 215              	.LFB7:
 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSVCHandler( void )
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 216              		.loc 1 268 0
 217              		.cfi_startproc
 218              		@ Naked Function: prologue and epilogue provided by programmer.
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile (
 221              		.loc 1 269 0
 222              	@ 269 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 223 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 224 0002 1968     		ldr r1, [r3]					
 225 0004 0868     		ldr r0, [r1]					
 226 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 227 000a 80F30988 		msr psp, r0						
 228 000e BFF36F8F 		isb								
 229 0012 4FF00000 		mov r0, #0 						
 230 0016 80F31188 		msr	basepri, r0					
 231 001a 7047     		bx r14							
 232              										
 233 001c AFF30080 		.align 4						
 234 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 235              	
 236              	@ 0 "" 2
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 272:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 273:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 274:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 275:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	isb								\n"
 276:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	mov r0, #0 						\n"
 277:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	msr	basepri, r0					\n"
 278:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	bx r14							\n"
 279:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"									\n"
 280:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	.align 4						\n"
 281:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
ARM GAS  /tmp/ccBT8CGO.s 			page 14


 282:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				);
 283:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 237              		.loc 1 283 0
 238              		.thumb
 239              		.cfi_endproc
 240              	.LFE7:
 242              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 243              		.align	2
 244              		.thumb
 245              		.thumb_func
 247              	prvPortStartFirstTask:
 248              	.LFB8:
 284:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 285:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 286:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvPortStartFirstTask( void )
 287:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 249              		.loc 1 287 0
 250              		.cfi_startproc
 251              		@ Naked Function: prologue and epilogue provided by programmer.
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 288:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile(
 254              		.loc 1 288 0
 255              	@ 288 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 256 0000 0648     		 ldr r0, =0xE000ED08 	
 257 0002 0068     	 ldr r0, [r0] 			
 258 0004 0068     	 ldr r0, [r0] 			
 259 0006 80F30888 	 msr msp, r0			
 260 000a 62B6     	 cpsie i				
 261 000c 61B6     	 cpsie f				
 262 000e BFF34F8F 	 dsb					
 263 0012 BFF36F8F 	 isb					
 264 0016 00DF     	 svc 0					
 265 0018 00BF     	 nop					
 266              	
 267              	@ 0 "" 2
 289:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 290:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" ldr r0, [r0] 			\n"
 291:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" ldr r0, [r0] 			\n"
 292:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 293:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 294:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" cpsie f				\n"
 295:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" dsb					\n"
 296:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" isb					\n"
 297:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" svc 0					\n" /* System call to start first task. */
 298:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" nop					\n"
 299:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				);
 300:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 268              		.loc 1 300 0
 269              		.thumb
 270              		.cfi_endproc
 271              	.LFE8:
 273 001a 0000     		.section	.text.xPortStartScheduler,"ax",%progbits
 274              		.align	2
 275              		.global	xPortStartScheduler
 276              		.thumb
 277              		.thumb_func
ARM GAS  /tmp/ccBT8CGO.s 			page 15


 279              	xPortStartScheduler:
 280              	.LFB9:
 301:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 302:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 303:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 304:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * See header file for description.
 305:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 306:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** BaseType_t xPortStartScheduler( void )
 307:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 281              		.loc 1 307 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 16
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285 0000 80B5     		push	{r7, lr}
 286              	.LCFI9:
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 7, -8
 289              		.cfi_offset 14, -4
 290 0002 84B0     		sub	sp, sp, #16
 291              	.LCFI10:
 292              		.cfi_def_cfa_offset 24
 293 0004 00AF     		add	r7, sp, #0
 294              	.LCFI11:
 295              		.cfi_def_cfa_register 7
 296              	.LBB28:
 308:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 309:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 310:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 311:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 312:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#if( configASSERT_DEFINED == 1 )
 313:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 314:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		volatile uint32_t ulOriginalPriority;
 315:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 297              		.loc 1 315 0
 298 0006 2C4B     		ldr	r3, .L17
 299 0008 FB60     		str	r3, [r7, #12]
 316:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 317:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 318:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 319:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		functions can be called.  ISR safe functions are those that end in
 320:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 321:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 322:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 323:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 324:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 300              		.loc 1 324 0
 301 000a FB68     		ldr	r3, [r7, #12]
 302 000c 1B78     		ldrb	r3, [r3]
 303 000e DBB2     		uxtb	r3, r3
 304 0010 BB60     		str	r3, [r7, #8]
 325:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 326:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Determine the number of priority bits available.  First write to all
 327:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		possible bits. */
 328:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 305              		.loc 1 328 0
 306 0012 FB68     		ldr	r3, [r7, #12]
 307 0014 FF22     		movs	r2, #255
ARM GAS  /tmp/ccBT8CGO.s 			page 16


 308 0016 1A70     		strb	r2, [r3]
 329:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 330:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Read the value back to see how many bits stuck. */
 331:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 309              		.loc 1 331 0
 310 0018 FB68     		ldr	r3, [r7, #12]
 311 001a 1B78     		ldrb	r3, [r3]
 312 001c DBB2     		uxtb	r3, r3
 313 001e FB71     		strb	r3, [r7, #7]
 332:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 333:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Use the same mask on the maximum system call priority. */
 334:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 314              		.loc 1 334 0
 315 0020 FB79     		ldrb	r3, [r7, #7]
 316 0022 DBB2     		uxtb	r3, r3
 317 0024 03F05003 		and	r3, r3, #80
 318 0028 DAB2     		uxtb	r2, r3
 319 002a 244B     		ldr	r3, .L17+4
 320 002c 1A70     		strb	r2, [r3]
 335:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 336:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 337:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		of bits read back. */
 338:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 321              		.loc 1 338 0
 322 002e 244B     		ldr	r3, .L17+8
 323 0030 0722     		movs	r2, #7
 324 0032 1A60     		str	r2, [r3]
 339:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 325              		.loc 1 339 0
 326 0034 09E0     		b	.L14
 327              	.L15:
 340:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 341:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ulMaxPRIGROUPValue--;
 328              		.loc 1 341 0
 329 0036 224B     		ldr	r3, .L17+8
 330 0038 1B68     		ldr	r3, [r3]
 331 003a 013B     		subs	r3, r3, #1
 332 003c 204A     		ldr	r2, .L17+8
 333 003e 1360     		str	r3, [r2]
 342:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 334              		.loc 1 342 0
 335 0040 FB79     		ldrb	r3, [r7, #7]
 336 0042 DBB2     		uxtb	r3, r3
 337 0044 5B00     		lsls	r3, r3, #1
 338 0046 DBB2     		uxtb	r3, r3
 339 0048 FB71     		strb	r3, [r7, #7]
 340              	.L14:
 339:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 341              		.loc 1 339 0
 342 004a FB79     		ldrb	r3, [r7, #7]
 343 004c DBB2     		uxtb	r3, r3
 344 004e DBB2     		uxtb	r3, r3
 345 0050 5BB2     		sxtb	r3, r3
 346 0052 002B     		cmp	r3, #0
 347 0054 EFDB     		blt	.L15
 343:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 344:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  /tmp/ccBT8CGO.s 			page 17


 345:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 346:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		register. */
 347:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 348              		.loc 1 347 0
 349 0056 1A4B     		ldr	r3, .L17+8
 350 0058 1B68     		ldr	r3, [r3]
 351 005a 1B02     		lsls	r3, r3, #8
 352 005c 184A     		ldr	r2, .L17+8
 353 005e 1360     		str	r3, [r2]
 348:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 354              		.loc 1 348 0
 355 0060 174B     		ldr	r3, .L17+8
 356 0062 1B68     		ldr	r3, [r3]
 357 0064 03F4E063 		and	r3, r3, #1792
 358 0068 154A     		ldr	r2, .L17+8
 359 006a 1360     		str	r3, [r2]
 349:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 350:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 351:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		value. */
 352:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 360              		.loc 1 352 0
 361 006c BB68     		ldr	r3, [r7, #8]
 362 006e DAB2     		uxtb	r2, r3
 363 0070 FB68     		ldr	r3, [r7, #12]
 364 0072 1A70     		strb	r2, [r3]
 365              	.LBE28:
 353:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 354:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#endif /* conifgASSERT_DEFINED */
 355:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 356:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 357:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 366              		.loc 1 357 0
 367 0074 134A     		ldr	r2, .L17+12
 368 0076 134B     		ldr	r3, .L17+12
 369 0078 1B68     		ldr	r3, [r3]
 370 007a 43F47003 		orr	r3, r3, #15728640
 371 007e 1360     		str	r3, [r2]
 358:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 372              		.loc 1 358 0
 373 0080 104A     		ldr	r2, .L17+12
 374 0082 104B     		ldr	r3, .L17+12
 375 0084 1B68     		ldr	r3, [r3]
 376 0086 43F07043 		orr	r3, r3, #-268435456
 377 008a 1360     		str	r3, [r2]
 359:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 360:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 361:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	here already. */
 362:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	vPortSetupTimerInterrupt();
 378              		.loc 1 362 0
 379 008c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 363:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 364:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 365:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uxCriticalNesting = 0;
 380              		.loc 1 365 0
 381 0090 0D4B     		ldr	r3, .L17+16
 382 0092 0022     		movs	r2, #0
 383 0094 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccBT8CGO.s 			page 18


 366:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 367:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 368:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	vPortEnableVFP();
 384              		.loc 1 368 0
 385 0096 FFF7FEFF 		bl	vPortEnableVFP
 369:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 370:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Lazy save always. */
 371:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 386              		.loc 1 371 0
 387 009a 0C4A     		ldr	r2, .L17+20
 388 009c 0B4B     		ldr	r3, .L17+20
 389 009e 1B68     		ldr	r3, [r3]
 390 00a0 43F04043 		orr	r3, r3, #-1073741824
 391 00a4 1360     		str	r3, [r2]
 372:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 373:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Start the first task. */
 374:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	prvPortStartFirstTask();
 392              		.loc 1 374 0
 393 00a6 FFF7FEFF 		bl	prvPortStartFirstTask
 375:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 376:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 377:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	exit error function to prevent compiler warnings about a static function
 378:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	not being called in the case that the application writer overrides this
 379:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 380:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	prvTaskExitError();
 394              		.loc 1 380 0
 395 00aa FFF7FEFF 		bl	prvTaskExitError
 381:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 382:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Should not get here! */
 383:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	return 0;
 396              		.loc 1 383 0
 397 00ae 0023     		movs	r3, #0
 384:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 398              		.loc 1 384 0
 399 00b0 1846     		mov	r0, r3
 400 00b2 1037     		adds	r7, r7, #16
 401              	.LCFI12:
 402              		.cfi_def_cfa_offset 8
 403 00b4 BD46     		mov	sp, r7
 404              	.LCFI13:
 405              		.cfi_def_cfa_register 13
 406              		@ sp needed
 407 00b6 80BD     		pop	{r7, pc}
 408              	.L18:
 409              		.align	2
 410              	.L17:
 411 00b8 00E400E0 		.word	-536812544
 412 00bc 00000000 		.word	ucMaxSysCallPriority
 413 00c0 00000000 		.word	ulMaxPRIGROUPValue
 414 00c4 20ED00E0 		.word	-536810208
 415 00c8 00000000 		.word	uxCriticalNesting
 416 00cc 34EF00E0 		.word	-536809676
 417              		.cfi_endproc
 418              	.LFE9:
 420              		.section	.text.vPortEndScheduler,"ax",%progbits
 421              		.align	2
 422              		.global	vPortEndScheduler
ARM GAS  /tmp/ccBT8CGO.s 			page 19


 423              		.thumb
 424              		.thumb_func
 426              	vPortEndScheduler:
 427              	.LFB10:
 385:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 386:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 387:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortEndScheduler( void )
 388:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 428              		.loc 1 388 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 8
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 433 0000 80B4     		push	{r7}
 434              	.LCFI14:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0002 83B0     		sub	sp, sp, #12
 438              	.LCFI15:
 439              		.cfi_def_cfa_offset 16
 440 0004 00AF     		add	r7, sp, #0
 441              	.LCFI16:
 442              		.cfi_def_cfa_register 7
 389:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 390:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	Artificially force an assert. */
 391:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 443              		.loc 1 391 0
 444 0006 0A4B     		ldr	r3, .L22
 445 0008 1B68     		ldr	r3, [r3]
 446 000a B3F57A7F 		cmp	r3, #1000
 447 000e 09D0     		beq	.L19
 448              	.LBB29:
 449              	.LBB30:
 450              		.loc 2 237 0 discriminator 1
 451              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 452 0010 4FF05003 			mov r3, #80												
 453 0014 83F31188 		msr basepri, r3											
 454 0018 BFF36F8F 		isb														
 455 001c BFF34F8F 		dsb														
 456              	
 457              	@ 0 "" 2
 458              		.thumb
 459 0020 7B60     		str	r3, [r7, #4]
 460              	.L21:
 461              	.LBE30:
 462              	.LBE29:
 463              		.loc 1 391 0 discriminator 1
 464 0022 FEE7     		b	.L21
 465              	.L19:
 392:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 466              		.loc 1 392 0
 467 0024 0C37     		adds	r7, r7, #12
 468              	.LCFI17:
 469              		.cfi_def_cfa_offset 4
 470 0026 BD46     		mov	sp, r7
 471              	.LCFI18:
 472              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccBT8CGO.s 			page 20


 473              		@ sp needed
 474 0028 5DF8047B 		ldr	r7, [sp], #4
 475              	.LCFI19:
 476              		.cfi_restore 7
 477              		.cfi_def_cfa_offset 0
 478 002c 7047     		bx	lr
 479              	.L23:
 480 002e 00BF     		.align	2
 481              	.L22:
 482 0030 00000000 		.word	uxCriticalNesting
 483              		.cfi_endproc
 484              	.LFE10:
 486              		.section	.text.vPortEnterCritical,"ax",%progbits
 487              		.align	2
 488              		.global	vPortEnterCritical
 489              		.thumb
 490              		.thumb_func
 492              	vPortEnterCritical:
 493              	.LFB11:
 393:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 394:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 395:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortEnterCritical( void )
 396:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 494              		.loc 1 396 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 8
 497              		@ frame_needed = 1, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 499 0000 80B4     		push	{r7}
 500              	.LCFI20:
 501              		.cfi_def_cfa_offset 4
 502              		.cfi_offset 7, -4
 503 0002 83B0     		sub	sp, sp, #12
 504              	.LCFI21:
 505              		.cfi_def_cfa_offset 16
 506 0004 00AF     		add	r7, sp, #0
 507              	.LCFI22:
 508              		.cfi_def_cfa_register 7
 509              	.LBB31:
 510              	.LBB32:
 511              		.loc 2 237 0
 512              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 513 0006 4FF05003 			mov r3, #80												
 514 000a 83F31188 		msr basepri, r3											
 515 000e BFF36F8F 		isb														
 516 0012 BFF34F8F 		dsb														
 517              	
 518              	@ 0 "" 2
 519              		.thumb
 520 0016 7B60     		str	r3, [r7, #4]
 521              	.LBE32:
 522              	.LBE31:
 397:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portDISABLE_INTERRUPTS();
 398:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uxCriticalNesting++;
 523              		.loc 1 398 0
 524 0018 0E4B     		ldr	r3, .L27
 525 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccBT8CGO.s 			page 21


 526 001c 0133     		adds	r3, r3, #1
 527 001e 0D4A     		ldr	r2, .L27
 528 0020 1360     		str	r3, [r2]
 399:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 400:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 401:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 402:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 403:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 404:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	assert function also uses a critical section. */
 405:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	if( uxCriticalNesting == 1 )
 529              		.loc 1 405 0
 530 0022 0C4B     		ldr	r3, .L27
 531 0024 1B68     		ldr	r3, [r3]
 532 0026 012B     		cmp	r3, #1
 533 0028 0ED1     		bne	.L24
 406:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 407:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 534              		.loc 1 407 0
 535 002a 0B4B     		ldr	r3, .L27+4
 536 002c 1B68     		ldr	r3, [r3]
 537 002e DBB2     		uxtb	r3, r3
 538 0030 002B     		cmp	r3, #0
 539 0032 09D0     		beq	.L24
 540              	.LBB33:
 541              	.LBB34:
 542              		.loc 2 237 0 discriminator 1
 543              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 544 0034 4FF05003 			mov r3, #80												
 545 0038 83F31188 		msr basepri, r3											
 546 003c BFF36F8F 		isb														
 547 0040 BFF34F8F 		dsb														
 548              	
 549              	@ 0 "" 2
 550              		.thumb
 551 0044 3B60     		str	r3, [r7]
 552              	.L26:
 553              	.LBE34:
 554              	.LBE33:
 555              		.loc 1 407 0 discriminator 1
 556 0046 FEE7     		b	.L26
 557              	.L24:
 408:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 409:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 558              		.loc 1 409 0
 559 0048 0C37     		adds	r7, r7, #12
 560              	.LCFI23:
 561              		.cfi_def_cfa_offset 4
 562 004a BD46     		mov	sp, r7
 563              	.LCFI24:
 564              		.cfi_def_cfa_register 13
 565              		@ sp needed
 566 004c 5DF8047B 		ldr	r7, [sp], #4
 567              	.LCFI25:
 568              		.cfi_restore 7
 569              		.cfi_def_cfa_offset 0
 570 0050 7047     		bx	lr
 571              	.L28:
ARM GAS  /tmp/ccBT8CGO.s 			page 22


 572 0052 00BF     		.align	2
 573              	.L27:
 574 0054 00000000 		.word	uxCriticalNesting
 575 0058 04ED00E0 		.word	-536810236
 576              		.cfi_endproc
 577              	.LFE11:
 579              		.section	.text.vPortExitCritical,"ax",%progbits
 580              		.align	2
 581              		.global	vPortExitCritical
 582              		.thumb
 583              		.thumb_func
 585              	vPortExitCritical:
 586              	.LFB12:
 410:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 411:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 412:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortExitCritical( void )
 413:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 587              		.loc 1 413 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 8
 590              		@ frame_needed = 1, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 592 0000 80B4     		push	{r7}
 593              	.LCFI26:
 594              		.cfi_def_cfa_offset 4
 595              		.cfi_offset 7, -4
 596 0002 83B0     		sub	sp, sp, #12
 597              	.LCFI27:
 598              		.cfi_def_cfa_offset 16
 599 0004 00AF     		add	r7, sp, #0
 600              	.LCFI28:
 601              		.cfi_def_cfa_register 7
 414:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( uxCriticalNesting );
 602              		.loc 1 414 0
 603 0006 104B     		ldr	r3, .L33
 604 0008 1B68     		ldr	r3, [r3]
 605 000a 002B     		cmp	r3, #0
 606 000c 09D1     		bne	.L30
 607              	.LBB35:
 608              	.LBB36:
 609              		.loc 2 237 0 discriminator 1
 610              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 611 000e 4FF05003 			mov r3, #80												
 612 0012 83F31188 		msr basepri, r3											
 613 0016 BFF36F8F 		isb														
 614 001a BFF34F8F 		dsb														
 615              	
 616              	@ 0 "" 2
 617              		.thumb
 618 001e 7B60     		str	r3, [r7, #4]
 619              	.L31:
 620              	.LBE36:
 621              	.LBE35:
 622              		.loc 1 414 0 discriminator 1
 623 0020 FEE7     		b	.L31
 624              	.L30:
 415:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uxCriticalNesting--;
ARM GAS  /tmp/ccBT8CGO.s 			page 23


 625              		.loc 1 415 0
 626 0022 094B     		ldr	r3, .L33
 627 0024 1B68     		ldr	r3, [r3]
 628 0026 013B     		subs	r3, r3, #1
 629 0028 074A     		ldr	r2, .L33
 630 002a 1360     		str	r3, [r2]
 416:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	if( uxCriticalNesting == 0 )
 631              		.loc 1 416 0
 632 002c 064B     		ldr	r3, .L33
 633 002e 1B68     		ldr	r3, [r3]
 634 0030 002B     		cmp	r3, #0
 635 0032 04D1     		bne	.L29
 636 0034 0023     		movs	r3, #0
 637 0036 3B60     		str	r3, [r7]
 638              	.LBB37:
 639              	.LBB38:
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 640              		.loc 2 271 0
 641 0038 3B68     		ldr	r3, [r7]
 642              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 643 003a 83F31188 			msr basepri, r3	
 644              	@ 0 "" 2
 645              		.thumb
 646              	.L29:
ARM GAS  /tmp/ccBT8CGO.s 			page 24


 647              	.LBE38:
 648              	.LBE37:
 417:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 418:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		portENABLE_INTERRUPTS();
 419:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 420:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 649              		.loc 1 420 0
 650 003e 0C37     		adds	r7, r7, #12
 651              	.LCFI29:
 652              		.cfi_def_cfa_offset 4
 653 0040 BD46     		mov	sp, r7
 654              	.LCFI30:
 655              		.cfi_def_cfa_register 13
 656              		@ sp needed
 657 0042 5DF8047B 		ldr	r7, [sp], #4
 658              	.LCFI31:
 659              		.cfi_restore 7
 660              		.cfi_def_cfa_offset 0
 661 0046 7047     		bx	lr
 662              	.L34:
 663              		.align	2
 664              	.L33:
 665 0048 00000000 		.word	uxCriticalNesting
 666              		.cfi_endproc
 667              	.LFE12:
 669              		.section	.text.PendSV_Handler,"ax",%progbits
 670              		.align	2
 671              		.global	PendSV_Handler
 672              		.thumb
 673              		.thumb_func
 675              	PendSV_Handler:
 676              	.LFB13:
 421:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 422:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 423:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortPendSVHandler( void )
 424:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 677              		.loc 1 424 0
 678              		.cfi_startproc
 679              		@ Naked Function: prologue and epilogue provided by programmer.
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 425:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* This is a naked function. */
 426:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 427:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile
 682              		.loc 1 427 0
 683              	@ 427 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 684 0000 EFF30980 			mrs r0, psp							
 685 0004 BFF36F8F 		isb									
 686              											
 687 0008 154B     		ldr	r3, pxCurrentTCBConst			
 688 000a 1A68     		ldr	r2, [r3]						
 689              											
 690 000c 1EF0100F 		tst r14, #0x10						
 691 0010 08BF     		it eq								
 692 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 693              											
 694 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
ARM GAS  /tmp/ccBT8CGO.s 			page 25


 695              											
 696 001a 1060     		str r0, [r2]						
 697              											
 698 001c 4DF8043D 		stmdb sp!, {r3}						
 699 0020 4FF05000 		mov r0, #80 							
 700 0024 72B6     		cpsid i								
 701 0026 80F31188 		msr basepri, r0						
 702 002a BFF34F8F 		dsb									
 703 002e BFF36F8F 		isb									
 704 0032 62B6     		cpsie i								
 705 0034 FFF7FEFF 		bl vTaskSwitchContext				
 706 0038 4FF00000 		mov r0, #0							
 707 003c 80F31188 		msr basepri, r0						
 708 0040 08BC     		ldmia sp!, {r3}						
 709              											
 710 0042 1968     		ldr r1, [r3]						
 711 0044 0868     		ldr r0, [r1]						
 712              											
 713 0046 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 714              											
 715 004a 1EF0100F 		tst r14, #0x10						
 716 004e 08BF     		it eq								
 717 0050 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 718              											
 719 0054 80F30988 		msr psp, r0							
 720 0058 BFF36F8F 		isb									
 721              											
 722              											
 723 005c 7047     		bx r14								
 724              											
 725 005e 00BF     		.align 4							
 726 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 727              	
 728              	@ 0 "" 2
 428:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	(
 429:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	mrs r0, psp							\n"
 430:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	isb									\n"
 431:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 432:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 433:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldr	r2, [r3]						\n"
 434:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 435:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 436:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	it eq								\n"
 437:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 438:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 439:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 440:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 441:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 442:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 443:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	stmdb sp!, {r3}						\n"
 444:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	mov r0, %0 							\n"
 445:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	cpsid i								\n" /* Errata workaround. */
 446:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	msr basepri, r0						\n"
 447:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	dsb									\n"
 448:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	isb									\n"
 449:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	cpsie i								\n" /* Errata workaround. */
 450:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	bl vTaskSwitchContext				\n"
ARM GAS  /tmp/ccBT8CGO.s 			page 26


 451:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	mov r0, #0							\n"
 452:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	msr basepri, r0						\n"
 453:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldmia sp!, {r3}						\n"
 454:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 455:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 456:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldr r0, [r1]						\n"
 457:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 458:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 459:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 460:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 461:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	it eq								\n"
 462:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 463:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 464:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	msr psp, r0							\n"
 465:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	isb									\n"
 466:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 467:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 468:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 469:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"			push { r14 }				\n"
 470:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"			pop { pc }					\n"
 471:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		#endif
 472:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#endif
 473:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 474:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	bx r14								\n"
 475:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 476:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	.align 4							\n"
 477:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 478:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 479:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	);
 480:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 729              		.loc 1 480 0
 730              		.thumb
 731              		.cfi_endproc
 732              	.LFE13:
 734              		.section	.text.xPortSysTickHandler,"ax",%progbits
 735              		.align	2
 736              		.global	xPortSysTickHandler
 737              		.thumb
 738              		.thumb_func
 740              	xPortSysTickHandler:
 741              	.LFB14:
 481:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 482:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 483:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortSysTickHandler( void )
 484:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 742              		.loc 1 484 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 8
 745              		@ frame_needed = 1, uses_anonymous_args = 0
 746 0000 80B5     		push	{r7, lr}
 747              	.LCFI32:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 7, -8
 750              		.cfi_offset 14, -4
 751 0002 82B0     		sub	sp, sp, #8
 752              	.LCFI33:
 753              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccBT8CGO.s 			page 27


 754 0004 00AF     		add	r7, sp, #0
 755              	.LCFI34:
 756              		.cfi_def_cfa_register 7
 757              	.LBB39:
 758              	.LBB40:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 759              		.loc 2 237 0
 760              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 761 0006 4FF05003 			mov r3, #80												
 762 000a 83F31188 		msr basepri, r3											
 763 000e BFF36F8F 		isb														
 764 0012 BFF34F8F 		dsb														
 765              	
 766              	@ 0 "" 2
 767              		.thumb
 768 0016 7B60     		str	r3, [r7, #4]
 769              	.LBE40:
 770              	.LBE39:
 485:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 486:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 487:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	save and then restore the interrupt mask value as its value is already
 488:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	known. */
 489:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portDISABLE_INTERRUPTS();
 490:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 491:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Increment the RTOS tick. */
 492:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 771              		.loc 1 492 0
 772 0018 FFF7FEFF 		bl	xTaskIncrementTick
 773 001c 0346     		mov	r3, r0
 774 001e 002B     		cmp	r3, #0
 775 0020 03D0     		beq	.L37
 493:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 494:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* A context switch is required.  Context switching is performed in
 495:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 496:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 776              		.loc 1 496 0
 777 0022 064B     		ldr	r3, .L38
 778 0024 4FF08052 		mov	r2, #268435456
 779 0028 1A60     		str	r2, [r3]
 780              	.L37:
 781 002a 0023     		movs	r3, #0
 782 002c 3B60     		str	r3, [r7]
 783              	.LBB41:
 784              	.LBB42:
 785              		.loc 2 271 0
 786 002e 3B68     		ldr	r3, [r7]
 787              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 788 0030 83F31188 			msr basepri, r3	
 789              	@ 0 "" 2
 790              		.thumb
 791              	.LBE42:
 792              	.LBE41:
 497:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 498:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 499:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portENABLE_INTERRUPTS();
 500:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 793              		.loc 1 500 0
ARM GAS  /tmp/ccBT8CGO.s 			page 28


 794 0034 0837     		adds	r7, r7, #8
 795              	.LCFI35:
 796              		.cfi_def_cfa_offset 8
 797 0036 BD46     		mov	sp, r7
 798              	.LCFI36:
 799              		.cfi_def_cfa_register 13
 800              		@ sp needed
 801 0038 80BD     		pop	{r7, pc}
 802              	.L39:
 803 003a 00BF     		.align	2
 804              	.L38:
 805 003c 04ED00E0 		.word	-536810236
 806              		.cfi_endproc
 807              	.LFE14:
 809              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 810              		.align	2
 811              		.weak	vPortSetupTimerInterrupt
 812              		.thumb
 813              		.thumb_func
 815              	vPortSetupTimerInterrupt:
 816              	.LFB15:
 501:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 502:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 503:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if configUSE_TICKLESS_IDLE == 1
 504:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 505:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 506:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 507:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 508:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	TickType_t xModifiableIdleTime;
 509:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 510:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 511:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 512:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 513:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 514:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 515:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 516:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 517:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 518:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 519:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		kernel with respect to calendar time. */
 520:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 521:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 522:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 523:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		tick periods.  -1 is used because this code will execute part way
 524:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		through one of the tick periods. */
 525:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 526:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 527:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 528:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 529:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 530:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 531:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 532:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 533:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		__asm volatile( "cpsid i" );
 534:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		__asm volatile( "dsb" );
 535:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		__asm volatile( "isb" );
 536:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  /tmp/ccBT8CGO.s 			page 29


 537:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 538:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		to be unsuspended then abandon the low power entry. */
 539:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 540:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 541:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Restart from whatever is left in the count register to complete
 542:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			this tick period. */
 543:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 544:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 545:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Restart SysTick. */
 546:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 547:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 548:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Reset the reload register to the value required for normal tick
 549:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			periods. */
 550:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 551:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 552:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 553:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			above. */
 554:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "cpsie i" );
 555:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 556:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		else
 557:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 558:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Set the new reload value. */
 559:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 560:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 561:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 562:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			zero. */
 563:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 564:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 565:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Restart SysTick. */
 566:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 567:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 568:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 569:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 570:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 571:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			should not be executed again.  However, the original expected idle
 572:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 573:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 574:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 575:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			if( xModifiableIdleTime > 0 )
 576:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			{
 577:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				__asm volatile( "dsb" );
 578:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				__asm volatile( "wfi" );
 579:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				__asm volatile( "isb" );
 580:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			}
 581:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 582:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 583:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 584:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			accounted for as best it can be, but using the tickless mode will
 585:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 586:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			kernel with respect to calendar time. */
 587:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 588:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 589:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 590:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 591:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			above. */
 592:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "cpsie i" );
 593:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  /tmp/ccBT8CGO.s 			page 30


 594:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 595:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			{
 596:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				uint32_t ulCalculatedLoadValue;
 597:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 598:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 599:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				count reloaded with ulReloadValue.  Reset the
 600:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 601:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				period. */
 602:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 603:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 604:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 605:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				underflowed because the post sleep hook did something
 606:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				that took too long. */
 607:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 608:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				{
 609:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 610:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				}
 611:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 612:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 613:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 614:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* The tick interrupt handler will already have pended the tick
 615:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				processing in the kernel.  As the pending tick will be
 616:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				processed as soon as this function exits, the tick value
 617:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				maintained by the tick is stepped forward by one less than the
 618:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				time spent waiting. */
 619:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 620:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			}
 621:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			else
 622:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			{
 623:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 624:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 625:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				periods (not the ulReload value which accounted for part
 626:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ticks). */
 627:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 628:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 629:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* How many complete tick periods passed while the processor
 630:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				was waiting? */
 631:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 632:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 633:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 634:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				period remains. */
 635:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 636:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			}
 637:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 638:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 639:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 640:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 641:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			can only execute once in the case that the reload register is near
 642:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			zero. */
 643:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 644:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portENTER_CRITICAL();
 645:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			{
 646:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 647:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 648:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 649:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			}
 650:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portEXIT_CRITICAL();
ARM GAS  /tmp/ccBT8CGO.s 			page 31


 651:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 652:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 653:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 654:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 655:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 656:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 657:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 658:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 659:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * frequency.
 660:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 661:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 662:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 817              		.loc 1 662 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 1, uses_anonymous_args = 0
 821              		@ link register save eliminated.
 822 0000 80B4     		push	{r7}
 823              	.LCFI37:
 824              		.cfi_def_cfa_offset 4
 825              		.cfi_offset 7, -4
 826 0002 00AF     		add	r7, sp, #0
 827              	.LCFI38:
 828              		.cfi_def_cfa_register 7
 663:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 664:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 665:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 666:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 667:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 668:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 669:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 670:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 671:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 672:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 673:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 829              		.loc 1 673 0
 830 0004 074A     		ldr	r2, .L41
 831 0006 084B     		ldr	r3, .L41+4
 832 0008 1B68     		ldr	r3, [r3]
 833 000a 0849     		ldr	r1, .L41+8
 834 000c A1FB0313 		umull	r1, r3, r1, r3
 835 0010 9B09     		lsrs	r3, r3, #6
 836 0012 013B     		subs	r3, r3, #1
 837 0014 1360     		str	r3, [r2]
 674:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 838              		.loc 1 674 0
 839 0016 064B     		ldr	r3, .L41+12
 840 0018 0722     		movs	r2, #7
 841 001a 1A60     		str	r2, [r3]
 675:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 842              		.loc 1 675 0
 843 001c BD46     		mov	sp, r7
 844              	.LCFI39:
 845              		.cfi_def_cfa_register 13
 846              		@ sp needed
 847 001e 5DF8047B 		ldr	r7, [sp], #4
 848              	.LCFI40:
ARM GAS  /tmp/ccBT8CGO.s 			page 32


 849              		.cfi_restore 7
 850              		.cfi_def_cfa_offset 0
 851 0022 7047     		bx	lr
 852              	.L42:
 853              		.align	2
 854              	.L41:
 855 0024 14E000E0 		.word	-536813548
 856 0028 00000000 		.word	SystemCoreClock
 857 002c D34D6210 		.word	274877907
 858 0030 10E000E0 		.word	-536813552
 859              		.cfi_endproc
 860              	.LFE15:
 862              		.section	.text.vPortEnableVFP,"ax",%progbits
 863              		.align	2
 864              		.thumb
 865              		.thumb_func
 867              	vPortEnableVFP:
 868              	.LFB16:
 676:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 677:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 678:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* This is a naked function. */
 679:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void vPortEnableVFP( void )
 680:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 869              		.loc 1 680 0
 870              		.cfi_startproc
 871              		@ Naked Function: prologue and epilogue provided by programmer.
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 1, uses_anonymous_args = 0
 681:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile
 874              		.loc 1 681 0
 875              	@ 681 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 876 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 877 0004 0168     		ldr r1, [r0]				
 878              									
 879 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 880 000a 0160     		str r1, [r0]				
 881 000c 7047     		bx r14						
 882              	@ 0 "" 2
 682:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	(
 683:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 684:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	ldr r1, [r0]				\n"
 685:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"								\n"
 686:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 687:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	str r1, [r0]				\n"
 688:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	bx r14						"
 689:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	);
 690:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 883              		.loc 1 690 0
 884              		.thumb
 885              		.cfi_endproc
 886              	.LFE16:
 888 000e 0000     		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 889              		.align	2
 890              		.global	vPortValidateInterruptPriority
 891              		.thumb
 892              		.thumb_func
 894              	vPortValidateInterruptPriority:
ARM GAS  /tmp/ccBT8CGO.s 			page 33


 895              	.LFB17:
 691:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 692:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 693:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if( configASSERT_DEFINED == 1 )
 694:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 695:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	void vPortValidateInterruptPriority( void )
 696:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 896              		.loc 1 696 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 16
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900              		@ link register save eliminated.
 901 0000 80B4     		push	{r7}
 902              	.LCFI41:
 903              		.cfi_def_cfa_offset 4
 904              		.cfi_offset 7, -4
 905 0002 85B0     		sub	sp, sp, #20
 906              	.LCFI42:
 907              		.cfi_def_cfa_offset 24
 908 0004 00AF     		add	r7, sp, #0
 909              	.LCFI43:
 910              		.cfi_def_cfa_register 7
 697:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uint32_t ulCurrentInterrupt;
 698:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uint8_t ucCurrentPriority;
 699:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 700:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 701:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 911              		.loc 1 701 0
 912              	@ 701 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 913 0006 EFF30583 		mrs r3, ipsr
 914              	@ 0 "" 2
 915              		.thumb
 916 000a FB60     		str	r3, [r7, #12]
 702:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 703:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 704:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 917              		.loc 1 704 0
 918 000c FB68     		ldr	r3, [r7, #12]
 919 000e 0F2B     		cmp	r3, #15
 920 0010 13D9     		bls	.L45
 705:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 706:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Look up the interrupt's priority. */
 707:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 921              		.loc 1 707 0
 922 0012 154A     		ldr	r2, .L49
 923 0014 FB68     		ldr	r3, [r7, #12]
 924 0016 1344     		add	r3, r3, r2
 925 0018 1B78     		ldrb	r3, [r3]
 926 001a FB72     		strb	r3, [r7, #11]
 708:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 709:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 710:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			an interrupt that has been assigned a priority above
 711:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 712:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 713:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			from interrupts that have been assigned a priority at or below
 714:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 715:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  /tmp/ccBT8CGO.s 			page 34


 716:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			Numerically low interrupt priority numbers represent logically high
 717:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 718:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			be set to a value equal to or numerically *higher* than
 719:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 720:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 721:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 722:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			default priority of	zero as that is the highest possible priority,
 723:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 724:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			and	therefore also guaranteed to be invalid.
 725:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 726:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 727:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			interrupt entry is as fast and simple as possible.
 728:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 729:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			The following links provide detailed information:
 730:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 731:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			http://www.freertos.org/FAQHelp.html */
 732:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 927              		.loc 1 732 0
 928 001c 134B     		ldr	r3, .L49+4
 929 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 930 0020 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 931 0022 9A42     		cmp	r2, r3
 932 0024 09D2     		bcs	.L45
 933              	.LBB43:
 934              	.LBB44:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 935              		.loc 2 237 0 discriminator 1
 936              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 937 0026 4FF05003 			mov r3, #80												
 938 002a 83F31188 		msr basepri, r3											
 939 002e BFF36F8F 		isb														
 940 0032 BFF34F8F 		dsb														
 941              	
 942              	@ 0 "" 2
 943              		.thumb
 944 0036 7B60     		str	r3, [r7, #4]
 945              	.L46:
 946              	.LBE44:
 947              	.LBE43:
 948              		.loc 1 732 0 discriminator 1
 949 0038 FEE7     		b	.L46
 950              	.L45:
 733:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 734:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 735:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 736:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		that define each interrupt's priority to be split between bits that
 737:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 738:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 739:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 740:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		this is not the case (if some bits represent a sub-priority).
 741:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 742:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		If the application only uses CMSIS libraries for interrupt
 743:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 744:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 745:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 746:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 747:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		of zero will result in unpredicable behaviour. */
ARM GAS  /tmp/ccBT8CGO.s 			page 35


 748:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 951              		.loc 1 748 0
 952 003a 0D4B     		ldr	r3, .L49+8
 953 003c 1B68     		ldr	r3, [r3]
 954 003e 03F4E062 		and	r2, r3, #1792
 955 0042 0C4B     		ldr	r3, .L49+12
 956 0044 1B68     		ldr	r3, [r3]
 957 0046 9A42     		cmp	r2, r3
 958 0048 09D9     		bls	.L44
 959              	.LBB45:
 960              	.LBB46:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 961              		.loc 2 237 0 discriminator 1
 962              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 963 004a 4FF05003 			mov r3, #80												
 964 004e 83F31188 		msr basepri, r3											
 965 0052 BFF36F8F 		isb														
 966 0056 BFF34F8F 		dsb														
 967              	
 968              	@ 0 "" 2
 969              		.thumb
 970 005a 3B60     		str	r3, [r7]
 971              	.L48:
 972              	.LBE46:
 973              	.LBE45:
 974              		.loc 1 748 0 discriminator 2
 975 005c FEE7     		b	.L48
 976              	.L44:
 749:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 977              		.loc 1 749 0
 978 005e 1437     		adds	r7, r7, #20
 979              	.LCFI44:
 980              		.cfi_def_cfa_offset 4
 981 0060 BD46     		mov	sp, r7
 982              	.LCFI45:
 983              		.cfi_def_cfa_register 13
 984              		@ sp needed
 985 0062 5DF8047B 		ldr	r7, [sp], #4
 986              	.LCFI46:
 987              		.cfi_restore 7
 988              		.cfi_def_cfa_offset 0
 989 0066 7047     		bx	lr
 990              	.L50:
 991              		.align	2
 992              	.L49:
 993 0068 F0E300E0 		.word	-536812560
 994 006c 00000000 		.word	ucMaxSysCallPriority
 995 0070 0CED00E0 		.word	-536810228
 996 0074 00000000 		.word	ulMaxPRIGROUPValue
 997              		.cfi_endproc
 998              	.LFE17:
 1000              		.text
 1001              	.Letext0:
 1002              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1003              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1004              		.file 5 "../../../FreeRTOS_9_0/Source/include/projdefs.h"
 1005              		.file 6 "Inc/FreeRTOSConfig.h"
ARM GAS  /tmp/ccBT8CGO.s 			page 36


ARM GAS  /tmp/ccBT8CGO.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccBT8CGO.s:21     .data.uxCriticalNesting:0000000000000000 $d
     /tmp/ccBT8CGO.s:24     .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/ccBT8CGO.s:29     .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
     /tmp/ccBT8CGO.s:30     .bss.ucMaxSysCallPriority:0000000000000000 $d
     /tmp/ccBT8CGO.s:32     .bss.ulMaxPRIGROUPValue:0000000000000000 $d
     /tmp/ccBT8CGO.s:35     .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
     /tmp/ccBT8CGO.s:38     .rodata.pcInterruptPriorityRegisters:0000000000000000 $d
     /tmp/ccBT8CGO.s:41     .rodata.pcInterruptPriorityRegisters:0000000000000000 pcInterruptPriorityRegisters
     /tmp/ccBT8CGO.s:44     .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/ccBT8CGO.s:49     .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/ccBT8CGO.s:134    .text.pxPortInitialiseStack:0000000000000064 $d
     /tmp/ccBT8CGO.s:143    .text.prvTaskExitError:0000000000000000 prvTaskExitError
     /tmp/ccBT8CGO.s:139    .text.prvTaskExitError:0000000000000000 $t
     /tmp/ccBT8CGO.s:204    .text.prvTaskExitError:0000000000000038 $d
     /tmp/ccBT8CGO.s:209    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccBT8CGO.s:214    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccBT8CGO.s:234    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
     /tmp/ccBT8CGO.s:234    .text.SVC_Handler:0000000000000020 $d
     /tmp/ccBT8CGO.s:243    .text.prvPortStartFirstTask:0000000000000000 $t
     /tmp/ccBT8CGO.s:247    .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
     /tmp/ccBT8CGO.s:274    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/ccBT8CGO.s:279    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/ccBT8CGO.s:815    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
     /tmp/ccBT8CGO.s:867    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/ccBT8CGO.s:411    .text.xPortStartScheduler:00000000000000b8 $d
     /tmp/ccBT8CGO.s:421    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/ccBT8CGO.s:426    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/ccBT8CGO.s:482    .text.vPortEndScheduler:0000000000000030 $d
     /tmp/ccBT8CGO.s:487    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/ccBT8CGO.s:492    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/ccBT8CGO.s:574    .text.vPortEnterCritical:0000000000000054 $d
     /tmp/ccBT8CGO.s:580    .text.vPortExitCritical:0000000000000000 $t
     /tmp/ccBT8CGO.s:585    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/ccBT8CGO.s:665    .text.vPortExitCritical:0000000000000048 $d
     /tmp/ccBT8CGO.s:670    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccBT8CGO.s:675    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccBT8CGO.s:726    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
     /tmp/ccBT8CGO.s:726    .text.PendSV_Handler:0000000000000060 $d
     /tmp/ccBT8CGO.s:735    .text.xPortSysTickHandler:0000000000000000 $t
     /tmp/ccBT8CGO.s:740    .text.xPortSysTickHandler:0000000000000000 xPortSysTickHandler
     /tmp/ccBT8CGO.s:805    .text.xPortSysTickHandler:000000000000003c $d
     /tmp/ccBT8CGO.s:810    .text.vPortSetupTimerInterrupt:0000000000000000 $t
     /tmp/ccBT8CGO.s:855    .text.vPortSetupTimerInterrupt:0000000000000024 $d
     /tmp/ccBT8CGO.s:863    .text.vPortEnableVFP:0000000000000000 $t
     /tmp/ccBT8CGO.s:889    .text.vPortValidateInterruptPriority:0000000000000000 $t
     /tmp/ccBT8CGO.s:894    .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
     /tmp/ccBT8CGO.s:993    .text.vPortValidateInterruptPriority:0000000000000068 $d
     /tmp/ccBT8CGO.s:888    .text.vPortEnableVFP:000000000000000e $d
     /tmp/ccBT8CGO.s:273    .text.prvPortStartFirstTask:000000000000001a $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
ARM GAS  /tmp/ccBT8CGO.s 			page 38


SystemCoreClock

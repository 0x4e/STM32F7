ARM GAS  /tmp/ccHyCAGW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv5-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"queue.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.comm	xQueueRegistry,64,4
  21              		.section	.text.xQueueGenericReset,"ax",%progbits
  22              		.align	2
  23              		.global	xQueueGenericReset
  24              		.thumb
  25              		.thumb_func
  27              	xQueueGenericReset:
  28              	.LFB5:
  29              		.file 1 "../../../FreeRTOS_9_0/Source/queue.c"
   1:../../../FreeRTOS_9_0/Source/queue.c **** /*
   2:../../../FreeRTOS_9_0/Source/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/queue.c ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/queue.c **** 
   5:../../../FreeRTOS_9_0/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/queue.c **** 
   7:../../../FreeRTOS_9_0/Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/queue.c **** 
   9:../../../FreeRTOS_9_0/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/queue.c **** 
  13:../../../FreeRTOS_9_0/Source/queue.c ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/queue.c ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/queue.c **** 
  20:../../../FreeRTOS_9_0/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/queue.c **** 
  25:../../../FreeRTOS_9_0/Source/queue.c ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/queue.c ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/queue.c ****      *    platform software that is more than just the market leader, it     *
ARM GAS  /tmp/ccHyCAGW.s 			page 2


  30:../../../FreeRTOS_9_0/Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/queue.c ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/queue.c ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/queue.c ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/queue.c **** 
  39:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/queue.c ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/queue.c **** 
  43:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/queue.c ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/queue.c ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/queue.c **** 
  47:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/queue.c **** 
  52:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/queue.c **** 
  56:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/queue.c **** 
  59:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../../../FreeRTOS_9_0/Source/queue.c **** 
  63:../../../FreeRTOS_9_0/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/queue.c ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/queue.c **** 
  67:../../../FreeRTOS_9_0/Source/queue.c ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/queue.c **** */
  69:../../../FreeRTOS_9_0/Source/queue.c **** 
  70:../../../FreeRTOS_9_0/Source/queue.c **** #include <stdlib.h>
  71:../../../FreeRTOS_9_0/Source/queue.c **** #include <string.h>
  72:../../../FreeRTOS_9_0/Source/queue.c **** 
  73:../../../FreeRTOS_9_0/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../../../FreeRTOS_9_0/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../../../FreeRTOS_9_0/Source/queue.c **** task.h is included from an application file. */
  76:../../../FreeRTOS_9_0/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../../../FreeRTOS_9_0/Source/queue.c **** 
  78:../../../FreeRTOS_9_0/Source/queue.c **** #include "FreeRTOS.h"
  79:../../../FreeRTOS_9_0/Source/queue.c **** #include "task.h"
  80:../../../FreeRTOS_9_0/Source/queue.c **** #include "queue.h"
  81:../../../FreeRTOS_9_0/Source/queue.c **** 
  82:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:../../../FreeRTOS_9_0/Source/queue.c **** 	#include "croutine.h"
  84:../../../FreeRTOS_9_0/Source/queue.c **** #endif
  85:../../../FreeRTOS_9_0/Source/queue.c **** 
  86:../../../FreeRTOS_9_0/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
ARM GAS  /tmp/ccHyCAGW.s 			page 3


  87:../../../FreeRTOS_9_0/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:../../../FreeRTOS_9_0/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:../../../FreeRTOS_9_0/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:../../../FreeRTOS_9_0/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:../../../FreeRTOS_9_0/Source/queue.c **** 
  92:../../../FreeRTOS_9_0/Source/queue.c **** 
  93:../../../FreeRTOS_9_0/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:../../../FreeRTOS_9_0/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:../../../FreeRTOS_9_0/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:../../../FreeRTOS_9_0/Source/queue.c **** 
  97:../../../FreeRTOS_9_0/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:../../../FreeRTOS_9_0/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:../../../FreeRTOS_9_0/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:../../../FreeRTOS_9_0/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:../../../FreeRTOS_9_0/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:../../../FreeRTOS_9_0/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:../../../FreeRTOS_9_0/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:../../../FreeRTOS_9_0/Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:../../../FreeRTOS_9_0/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:../../../FreeRTOS_9_0/Source/queue.c **** structure member). */
 108:../../../FreeRTOS_9_0/Source/queue.c **** #define pxMutexHolder					pcTail
 109:../../../FreeRTOS_9_0/Source/queue.c **** #define uxQueueType						pcHead
 110:../../../FreeRTOS_9_0/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:../../../FreeRTOS_9_0/Source/queue.c **** 
 112:../../../FreeRTOS_9_0/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:../../../FreeRTOS_9_0/Source/queue.c **** zero. */
 114:../../../FreeRTOS_9_0/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:../../../FreeRTOS_9_0/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:../../../FreeRTOS_9_0/Source/queue.c **** 
 117:../../../FreeRTOS_9_0/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:../../../FreeRTOS_9_0/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:../../../FreeRTOS_9_0/Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:../../../FreeRTOS_9_0/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:../../../FreeRTOS_9_0/Source/queue.c **** #else
 122:../../../FreeRTOS_9_0/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:../../../FreeRTOS_9_0/Source/queue.c **** #endif
 124:../../../FreeRTOS_9_0/Source/queue.c **** 
 125:../../../FreeRTOS_9_0/Source/queue.c **** /*
 126:../../../FreeRTOS_9_0/Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:../../../FreeRTOS_9_0/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:../../../FreeRTOS_9_0/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:../../../FreeRTOS_9_0/Source/queue.c ****  */
 130:../../../FreeRTOS_9_0/Source/queue.c **** typedef struct QueueDefinition
 131:../../../FreeRTOS_9_0/Source/queue.c **** {
 132:../../../FreeRTOS_9_0/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:../../../FreeRTOS_9_0/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:../../../FreeRTOS_9_0/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:../../../FreeRTOS_9_0/Source/queue.c **** 
 136:../../../FreeRTOS_9_0/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 138:../../../FreeRTOS_9_0/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:../../../FreeRTOS_9_0/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:../../../FreeRTOS_9_0/Source/queue.c **** 	} u;
 141:../../../FreeRTOS_9_0/Source/queue.c **** 
 142:../../../FreeRTOS_9_0/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:../../../FreeRTOS_9_0/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
ARM GAS  /tmp/ccHyCAGW.s 			page 4


 144:../../../FreeRTOS_9_0/Source/queue.c **** 
 145:../../../FreeRTOS_9_0/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:../../../FreeRTOS_9_0/Source/queue.c **** 
 149:../../../FreeRTOS_9_0/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:../../../FreeRTOS_9_0/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:../../../FreeRTOS_9_0/Source/queue.c **** 
 152:../../../FreeRTOS_9_0/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:../../../FreeRTOS_9_0/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
 155:../../../FreeRTOS_9_0/Source/queue.c **** 
 156:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:../../../FreeRTOS_9_0/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
 159:../../../FreeRTOS_9_0/Source/queue.c **** 
 160:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:../../../FreeRTOS_9_0/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 162:../../../FreeRTOS_9_0/Source/queue.c **** 		uint8_t ucQueueType;
 163:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
 164:../../../FreeRTOS_9_0/Source/queue.c **** 
 165:../../../FreeRTOS_9_0/Source/queue.c **** } xQUEUE;
 166:../../../FreeRTOS_9_0/Source/queue.c **** 
 167:../../../FreeRTOS_9_0/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:../../../FreeRTOS_9_0/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:../../../FreeRTOS_9_0/Source/queue.c **** typedef xQUEUE Queue_t;
 170:../../../FreeRTOS_9_0/Source/queue.c **** 
 171:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 172:../../../FreeRTOS_9_0/Source/queue.c **** 
 173:../../../FreeRTOS_9_0/Source/queue.c **** /*
 174:../../../FreeRTOS_9_0/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:../../../FreeRTOS_9_0/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:../../../FreeRTOS_9_0/Source/queue.c ****  */
 177:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:../../../FreeRTOS_9_0/Source/queue.c **** 
 179:../../../FreeRTOS_9_0/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:../../../FreeRTOS_9_0/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:../../../FreeRTOS_9_0/Source/queue.c **** 	more user friendly. */
 182:../../../FreeRTOS_9_0/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 184:../../../FreeRTOS_9_0/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:../../../FreeRTOS_9_0/Source/queue.c **** 		QueueHandle_t xHandle;
 186:../../../FreeRTOS_9_0/Source/queue.c **** 	} xQueueRegistryItem;
 187:../../../FreeRTOS_9_0/Source/queue.c **** 
 188:../../../FreeRTOS_9_0/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:../../../FreeRTOS_9_0/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:../../../FreeRTOS_9_0/Source/queue.c **** 	debuggers. */
 191:../../../FreeRTOS_9_0/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:../../../FreeRTOS_9_0/Source/queue.c **** 
 193:../../../FreeRTOS_9_0/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:../../../FreeRTOS_9_0/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:../../../FreeRTOS_9_0/Source/queue.c **** 	array position being vacant. */
 196:../../../FreeRTOS_9_0/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:../../../FreeRTOS_9_0/Source/queue.c **** 
 198:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:../../../FreeRTOS_9_0/Source/queue.c **** 
 200:../../../FreeRTOS_9_0/Source/queue.c **** /*
ARM GAS  /tmp/ccHyCAGW.s 			page 5


 201:../../../FreeRTOS_9_0/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:../../../FreeRTOS_9_0/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:../../../FreeRTOS_9_0/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:../../../FreeRTOS_9_0/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:../../../FreeRTOS_9_0/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:../../../FreeRTOS_9_0/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:../../../FreeRTOS_9_0/Source/queue.c ****  */
 208:../../../FreeRTOS_9_0/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:../../../FreeRTOS_9_0/Source/queue.c **** 
 210:../../../FreeRTOS_9_0/Source/queue.c **** /*
 211:../../../FreeRTOS_9_0/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:../../../FreeRTOS_9_0/Source/queue.c ****  *
 213:../../../FreeRTOS_9_0/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:../../../FreeRTOS_9_0/Source/queue.c ****  */
 215:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:../../../FreeRTOS_9_0/Source/queue.c **** 
 217:../../../FreeRTOS_9_0/Source/queue.c **** /*
 218:../../../FreeRTOS_9_0/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:../../../FreeRTOS_9_0/Source/queue.c ****  *
 220:../../../FreeRTOS_9_0/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:../../../FreeRTOS_9_0/Source/queue.c ****  */
 222:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:../../../FreeRTOS_9_0/Source/queue.c **** 
 224:../../../FreeRTOS_9_0/Source/queue.c **** /*
 225:../../../FreeRTOS_9_0/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:../../../FreeRTOS_9_0/Source/queue.c ****  * back of the queue.
 227:../../../FreeRTOS_9_0/Source/queue.c ****  */
 228:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:../../../FreeRTOS_9_0/Source/queue.c **** 
 230:../../../FreeRTOS_9_0/Source/queue.c **** /*
 231:../../../FreeRTOS_9_0/Source/queue.c ****  * Copies an item out of a queue.
 232:../../../FreeRTOS_9_0/Source/queue.c ****  */
 233:../../../FreeRTOS_9_0/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:../../../FreeRTOS_9_0/Source/queue.c **** 
 235:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:../../../FreeRTOS_9_0/Source/queue.c **** 	/*
 237:../../../FreeRTOS_9_0/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:../../../FreeRTOS_9_0/Source/queue.c **** 	 * the queue set that the queue contains data.
 239:../../../FreeRTOS_9_0/Source/queue.c **** 	 */
 240:../../../FreeRTOS_9_0/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:../../../FreeRTOS_9_0/Source/queue.c **** #endif
 242:../../../FreeRTOS_9_0/Source/queue.c **** 
 243:../../../FreeRTOS_9_0/Source/queue.c **** /*
 244:../../../FreeRTOS_9_0/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:../../../FreeRTOS_9_0/Source/queue.c ****  * dynamically to fill in the structure's members.
 246:../../../FreeRTOS_9_0/Source/queue.c ****  */
 247:../../../FreeRTOS_9_0/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:../../../FreeRTOS_9_0/Source/queue.c **** 
 249:../../../FreeRTOS_9_0/Source/queue.c **** /*
 250:../../../FreeRTOS_9_0/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:../../../FreeRTOS_9_0/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:../../../FreeRTOS_9_0/Source/queue.c ****  * as a mutex.
 253:../../../FreeRTOS_9_0/Source/queue.c ****  */
 254:../../../FreeRTOS_9_0/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:../../../FreeRTOS_9_0/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:../../../FreeRTOS_9_0/Source/queue.c **** #endif
 257:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 6


 258:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 259:../../../FreeRTOS_9_0/Source/queue.c **** 
 260:../../../FreeRTOS_9_0/Source/queue.c **** /*
 261:../../../FreeRTOS_9_0/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:../../../FreeRTOS_9_0/Source/queue.c ****  * accessing the queue event lists.
 263:../../../FreeRTOS_9_0/Source/queue.c ****  */
 264:../../../FreeRTOS_9_0/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 265:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();									\
 266:../../../FreeRTOS_9_0/Source/queue.c **** 	{														\
 267:../../../FreeRTOS_9_0/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:../../../FreeRTOS_9_0/Source/queue.c **** 		{													\
 269:../../../FreeRTOS_9_0/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:../../../FreeRTOS_9_0/Source/queue.c **** 		}													\
 271:../../../FreeRTOS_9_0/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:../../../FreeRTOS_9_0/Source/queue.c **** 		{													\
 273:../../../FreeRTOS_9_0/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:../../../FreeRTOS_9_0/Source/queue.c **** 		}													\
 275:../../../FreeRTOS_9_0/Source/queue.c **** 	}														\
 276:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL()
 277:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 278:../../../FreeRTOS_9_0/Source/queue.c **** 
 279:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:../../../FreeRTOS_9_0/Source/queue.c **** {
  30              		.loc 1 280 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  46 0008 3960     		str	r1, [r7]
 281:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  47              		.loc 1 281 0
  48 000a 7B68     		ldr	r3, [r7, #4]
  49 000c FB60     		str	r3, [r7, #12]
 282:../../../FreeRTOS_9_0/Source/queue.c **** 
 283:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
  50              		.loc 1 283 0
  51 000e FB68     		ldr	r3, [r7, #12]
  52 0010 002B     		cmp	r3, #0
  53 0012 09D1     		bne	.L2
  54              	.LBB76:
  55              	.LBB77:
  56              		.file 2 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 7


   5:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
ARM GAS  /tmp/ccHyCAGW.s 			page 8


  62:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccHyCAGW.s 			page 9


 119:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_EXIT
 135:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 10


 176:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 11


 233:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  57              		.loc 2 237 0 discriminator 1
  58              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0014 4FF05003 			mov r3, #80												
  60 0018 83F31188 		msr basepri, r3											
  61 001c BFF36F8F 		isb														
  62 0020 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              		.thumb
  66 0024 BB60     		str	r3, [r7, #8]
  67              	.L3:
  68              	.LBE77:
  69              	.LBE76:
  70              		.loc 1 283 0 discriminator 1
  71 0026 FEE7     		b	.L3
  72              	.L2:
 284:../../../FreeRTOS_9_0/Source/queue.c **** 
 285:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
  73              		.loc 1 285 0
  74 0028 FFF7FEFF 		bl	vPortEnterCritical
 286:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 287:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  75              		.loc 1 287 0
  76 002c FB68     		ldr	r3, [r7, #12]
  77 002e 1A68     		ldr	r2, [r3]
  78 0030 FB68     		ldr	r3, [r7, #12]
  79 0032 DB6B     		ldr	r3, [r3, #60]
  80 0034 F968     		ldr	r1, [r7, #12]
  81 0036 096C     		ldr	r1, [r1, #64]
  82 0038 01FB03F3 		mul	r3, r1, r3
  83 003c 1A44     		add	r2, r2, r3
  84 003e FB68     		ldr	r3, [r7, #12]
  85 0040 5A60     		str	r2, [r3, #4]
 288:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  86              		.loc 1 288 0
  87 0042 FB68     		ldr	r3, [r7, #12]
  88 0044 0022     		movs	r2, #0
  89 0046 9A63     		str	r2, [r3, #56]
 289:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
  90              		.loc 1 289 0
  91 0048 FB68     		ldr	r3, [r7, #12]
  92 004a 1A68     		ldr	r2, [r3]
  93 004c FB68     		ldr	r3, [r7, #12]
  94 004e 9A60     		str	r2, [r3, #8]
 290:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
  95              		.loc 1 290 0
  96 0050 FB68     		ldr	r3, [r7, #12]
  97 0052 1A68     		ldr	r2, [r3]
  98 0054 FB68     		ldr	r3, [r7, #12]
  99 0056 DB6B     		ldr	r3, [r3, #60]
 100 0058 013B     		subs	r3, r3, #1
 101 005a F968     		ldr	r1, [r7, #12]
ARM GAS  /tmp/ccHyCAGW.s 			page 12


 102 005c 096C     		ldr	r1, [r1, #64]
 103 005e 01FB03F3 		mul	r3, r1, r3
 104 0062 1A44     		add	r2, r2, r3
 105 0064 FB68     		ldr	r3, [r7, #12]
 106 0066 DA60     		str	r2, [r3, #12]
 291:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 107              		.loc 1 291 0
 108 0068 FB68     		ldr	r3, [r7, #12]
 109 006a FF22     		movs	r2, #255
 110 006c 83F84420 		strb	r2, [r3, #68]
 292:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 111              		.loc 1 292 0
 112 0070 FB68     		ldr	r3, [r7, #12]
 113 0072 FF22     		movs	r2, #255
 114 0074 83F84520 		strb	r2, [r3, #69]
 293:../../../FreeRTOS_9_0/Source/queue.c **** 
 294:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 115              		.loc 1 294 0
 116 0078 3B68     		ldr	r3, [r7]
 117 007a 002B     		cmp	r3, #0
 118 007c 14D1     		bne	.L4
 295:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 296:../../../FreeRTOS_9_0/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:../../../FreeRTOS_9_0/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:../../../FreeRTOS_9_0/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:../../../FreeRTOS_9_0/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:../../../FreeRTOS_9_0/Source/queue.c **** 			it will be possible to write to it. */
 301:../../../FreeRTOS_9_0/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 119              		.loc 1 301 0
 120 007e FB68     		ldr	r3, [r7, #12]
 121 0080 1B69     		ldr	r3, [r3, #16]
 122 0082 002B     		cmp	r3, #0
 123 0084 1AD0     		beq	.L5
 302:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 303:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 124              		.loc 1 303 0
 125 0086 FB68     		ldr	r3, [r7, #12]
 126 0088 1033     		adds	r3, r3, #16
 127 008a 1846     		mov	r0, r3
 128 008c FFF7FEFF 		bl	xTaskRemoveFromEventList
 129 0090 0346     		mov	r3, r0
 130 0092 002B     		cmp	r3, #0
 131 0094 12D0     		beq	.L5
 304:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 305:../../../FreeRTOS_9_0/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 132              		.loc 1 305 0
 133 0096 0D4B     		ldr	r3, .L7
 134 0098 4FF08052 		mov	r2, #268435456
 135 009c 1A60     		str	r2, [r3]
 136              	@ 305 "../../../FreeRTOS_9_0/Source/queue.c" 1
 137 009e BFF34F8F 		dsb
 138              	@ 0 "" 2
 139              	@ 305 "../../../FreeRTOS_9_0/Source/queue.c" 1
 140 00a2 BFF36F8F 		isb
 141              	@ 0 "" 2
 142              		.thumb
 143 00a6 09E0     		b	.L5
ARM GAS  /tmp/ccHyCAGW.s 			page 13


 144              	.L4:
 306:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 307:../../../FreeRTOS_9_0/Source/queue.c **** 				else
 308:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 309:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 311:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 312:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 313:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 314:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 316:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 317:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 318:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 319:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:../../../FreeRTOS_9_0/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 145              		.loc 1 320 0
 146 00a8 FB68     		ldr	r3, [r7, #12]
 147 00aa 1033     		adds	r3, r3, #16
 148 00ac 1846     		mov	r0, r3
 149 00ae FFF7FEFF 		bl	vListInitialise
 321:../../../FreeRTOS_9_0/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 150              		.loc 1 321 0
 151 00b2 FB68     		ldr	r3, [r7, #12]
 152 00b4 2433     		adds	r3, r3, #36
 153 00b6 1846     		mov	r0, r3
 154 00b8 FFF7FEFF 		bl	vListInitialise
 155              	.L5:
 322:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 323:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 324:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 156              		.loc 1 324 0
 157 00bc FFF7FEFF 		bl	vPortExitCritical
 325:../../../FreeRTOS_9_0/Source/queue.c **** 
 326:../../../FreeRTOS_9_0/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:../../../FreeRTOS_9_0/Source/queue.c **** 	versions. */
 328:../../../FreeRTOS_9_0/Source/queue.c **** 	return pdPASS;
 158              		.loc 1 328 0
 159 00c0 0123     		movs	r3, #1
 329:../../../FreeRTOS_9_0/Source/queue.c **** }
 160              		.loc 1 329 0
 161 00c2 1846     		mov	r0, r3
 162 00c4 1037     		adds	r7, r7, #16
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 8
 165 00c6 BD46     		mov	sp, r7
 166              	.LCFI4:
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 00c8 80BD     		pop	{r7, pc}
 170              	.L8:
 171 00ca 00BF     		.align	2
 172              	.L7:
 173 00cc 04ED00E0 		.word	-536810236
 174              		.cfi_endproc
 175              	.LFE5:
 177              		.section	.text.xQueueGenericCreate,"ax",%progbits
ARM GAS  /tmp/ccHyCAGW.s 			page 14


 178              		.align	2
 179              		.global	xQueueGenericCreate
 180              		.thumb
 181              		.thumb_func
 183              	xQueueGenericCreate:
 184              	.LFB6:
 330:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 331:../../../FreeRTOS_9_0/Source/queue.c **** 
 332:../../../FreeRTOS_9_0/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:../../../FreeRTOS_9_0/Source/queue.c **** 
 334:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 336:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t *pxNewQueue;
 337:../../../FreeRTOS_9_0/Source/queue.c **** 
 338:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:../../../FreeRTOS_9_0/Source/queue.c **** 
 340:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:../../../FreeRTOS_9_0/Source/queue.c **** 		supplied. */
 342:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:../../../FreeRTOS_9_0/Source/queue.c **** 
 344:../../../FreeRTOS_9_0/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:../../../FreeRTOS_9_0/Source/queue.c **** 		should not be provided if the item size is 0. */
 346:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:../../../FreeRTOS_9_0/Source/queue.c **** 
 349:../../../FreeRTOS_9_0/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 351:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:../../../FreeRTOS_9_0/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:../../../FreeRTOS_9_0/Source/queue.c **** 			the real queue and semaphore structures. */
 354:../../../FreeRTOS_9_0/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:../../../FreeRTOS_9_0/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 357:../../../FreeRTOS_9_0/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:../../../FreeRTOS_9_0/Source/queue.c **** 
 359:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:../../../FreeRTOS_9_0/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:../../../FreeRTOS_9_0/Source/queue.c **** 		but is already set. */
 362:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:../../../FreeRTOS_9_0/Source/queue.c **** 
 364:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxNewQueue != NULL )
 365:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 366:../../../FreeRTOS_9_0/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 368:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:../../../FreeRTOS_9_0/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 370:../../../FreeRTOS_9_0/Source/queue.c **** 				later deleted. */
 371:../../../FreeRTOS_9_0/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 373:../../../FreeRTOS_9_0/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:../../../FreeRTOS_9_0/Source/queue.c **** 
 375:../../../FreeRTOS_9_0/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 377:../../../FreeRTOS_9_0/Source/queue.c **** 
 378:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxNewQueue;
 379:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 380:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 15


 381:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 383:../../../FreeRTOS_9_0/Source/queue.c **** 
 384:../../../FreeRTOS_9_0/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:../../../FreeRTOS_9_0/Source/queue.c **** 
 386:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 185              		.loc 1 387 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 32
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 90B5     		push	{r4, r7, lr}
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 12
 192              		.cfi_offset 4, -12
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 8BB0     		sub	sp, sp, #44
 196              	.LCFI6:
 197              		.cfi_def_cfa_offset 56
 198 0004 02AF     		add	r7, sp, #8
 199              	.LCFI7:
 200              		.cfi_def_cfa 7, 48
 201 0006 F860     		str	r0, [r7, #12]
 202 0008 B960     		str	r1, [r7, #8]
 203 000a 1346     		mov	r3, r2
 204 000c FB71     		strb	r3, [r7, #7]
 388:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t *pxNewQueue;
 389:../../../FreeRTOS_9_0/Source/queue.c **** 	size_t xQueueSizeInBytes;
 390:../../../FreeRTOS_9_0/Source/queue.c **** 	uint8_t *pucQueueStorage;
 391:../../../FreeRTOS_9_0/Source/queue.c **** 
 392:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 205              		.loc 1 392 0
 206 000e FB68     		ldr	r3, [r7, #12]
 207 0010 002B     		cmp	r3, #0
 208 0012 09D1     		bne	.L10
 209              	.LBB78:
 210              	.LBB79:
 211              		.loc 2 237 0 discriminator 1
 212              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 213 0014 4FF05003 			mov r3, #80												
 214 0018 83F31188 		msr basepri, r3											
 215 001c BFF36F8F 		isb														
 216 0020 BFF34F8F 		dsb														
 217              	
 218              	@ 0 "" 2
 219              		.thumb
 220 0024 3B61     		str	r3, [r7, #16]
 221              	.L11:
 222              	.LBE79:
 223              	.LBE78:
 224              		.loc 1 392 0 discriminator 1
 225 0026 FEE7     		b	.L11
 226              	.L10:
 393:../../../FreeRTOS_9_0/Source/queue.c **** 
 394:../../../FreeRTOS_9_0/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 227              		.loc 1 394 0
ARM GAS  /tmp/ccHyCAGW.s 			page 16


 228 0028 BB68     		ldr	r3, [r7, #8]
 229 002a 002B     		cmp	r3, #0
 230 002c 02D1     		bne	.L12
 395:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 396:../../../FreeRTOS_9_0/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 397:../../../FreeRTOS_9_0/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 231              		.loc 1 397 0
 232 002e 0023     		movs	r3, #0
 233 0030 FB61     		str	r3, [r7, #28]
 234 0032 04E0     		b	.L13
 235              	.L12:
 398:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 399:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 400:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 401:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:../../../FreeRTOS_9_0/Source/queue.c **** 			can be in the queue at any time. */
 403:../../../FreeRTOS_9_0/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 236              		.loc 1 403 0
 237 0034 FB68     		ldr	r3, [r7, #12]
 238 0036 BA68     		ldr	r2, [r7, #8]
 239 0038 02FB03F3 		mul	r3, r2, r3
 240 003c FB61     		str	r3, [r7, #28]
 241              	.L13:
 404:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 405:../../../FreeRTOS_9_0/Source/queue.c **** 
 406:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 242              		.loc 1 406 0
 243 003e FB69     		ldr	r3, [r7, #28]
 244 0040 5033     		adds	r3, r3, #80
 245 0042 1846     		mov	r0, r3
 246 0044 FFF7FEFF 		bl	pvPortMalloc
 247 0048 B861     		str	r0, [r7, #24]
 407:../../../FreeRTOS_9_0/Source/queue.c **** 
 408:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxNewQueue != NULL )
 248              		.loc 1 408 0
 249 004a BB69     		ldr	r3, [r7, #24]
 250 004c 002B     		cmp	r3, #0
 251 004e 0BD0     		beq	.L14
 409:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 410:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:../../../FreeRTOS_9_0/Source/queue.c **** 			storage area. */
 412:../../../FreeRTOS_9_0/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 252              		.loc 1 412 0
 253 0050 BB69     		ldr	r3, [r7, #24]
 254 0052 5033     		adds	r3, r3, #80
 255 0054 7B61     		str	r3, [r7, #20]
 413:../../../FreeRTOS_9_0/Source/queue.c **** 
 414:../../../FreeRTOS_9_0/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 416:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:../../../FreeRTOS_9_0/Source/queue.c **** 				note this task was created dynamically in case it is later
 418:../../../FreeRTOS_9_0/Source/queue.c **** 				deleted. */
 419:../../../FreeRTOS_9_0/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 421:../../../FreeRTOS_9_0/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:../../../FreeRTOS_9_0/Source/queue.c **** 
 423:../../../FreeRTOS_9_0/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
ARM GAS  /tmp/ccHyCAGW.s 			page 17


 256              		.loc 1 423 0
 257 0056 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 258 0058 BB69     		ldr	r3, [r7, #24]
 259 005a 0093     		str	r3, [sp]
 260 005c F868     		ldr	r0, [r7, #12]
 261 005e B968     		ldr	r1, [r7, #8]
 262 0060 7A69     		ldr	r2, [r7, #20]
 263 0062 2346     		mov	r3, r4
 264 0064 FFF7FEFF 		bl	prvInitialiseNewQueue
 265              	.L14:
 424:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 425:../../../FreeRTOS_9_0/Source/queue.c **** 
 426:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxNewQueue;
 266              		.loc 1 426 0
 267 0068 BB69     		ldr	r3, [r7, #24]
 427:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 268              		.loc 1 427 0
 269 006a 1846     		mov	r0, r3
 270 006c 2437     		adds	r7, r7, #36
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 12
 273 006e BD46     		mov	sp, r7
 274              	.LCFI9:
 275              		.cfi_def_cfa_register 13
 276              		@ sp needed
 277 0070 90BD     		pop	{r4, r7, pc}
 278              		.cfi_endproc
 279              	.LFE6:
 281 0072 00BF     		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 282              		.align	2
 283              		.thumb
 284              		.thumb_func
 286              	prvInitialiseNewQueue:
 287              	.LFB7:
 428:../../../FreeRTOS_9_0/Source/queue.c **** 
 429:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 431:../../../FreeRTOS_9_0/Source/queue.c **** 
 432:../../../FreeRTOS_9_0/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:../../../FreeRTOS_9_0/Source/queue.c **** {
 288              		.loc 1 433 0
 289              		.cfi_startproc
 290              		@ args = 4, pretend = 0, frame = 16
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292 0000 80B5     		push	{r7, lr}
 293              	.LCFI10:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 7, -8
 296              		.cfi_offset 14, -4
 297 0002 84B0     		sub	sp, sp, #16
 298              	.LCFI11:
 299              		.cfi_def_cfa_offset 24
 300 0004 00AF     		add	r7, sp, #0
 301              	.LCFI12:
 302              		.cfi_def_cfa_register 7
 303 0006 F860     		str	r0, [r7, #12]
 304 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccHyCAGW.s 			page 18


 305 000a 7A60     		str	r2, [r7, #4]
 306 000c FB70     		strb	r3, [r7, #3]
 434:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:../../../FreeRTOS_9_0/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:../../../FreeRTOS_9_0/Source/queue.c **** 	( void ) ucQueueType;
 437:../../../FreeRTOS_9_0/Source/queue.c **** 
 438:../../../FreeRTOS_9_0/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 307              		.loc 1 438 0
 308 000e BB68     		ldr	r3, [r7, #8]
 309 0010 002B     		cmp	r3, #0
 310 0012 03D1     		bne	.L17
 439:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 440:../../../FreeRTOS_9_0/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:../../../FreeRTOS_9_0/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:../../../FreeRTOS_9_0/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:../../../FreeRTOS_9_0/Source/queue.c **** 		value that is known to be within the memory map. */
 444:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 311              		.loc 1 444 0
 312 0014 BB69     		ldr	r3, [r7, #24]
 313 0016 BA69     		ldr	r2, [r7, #24]
 314 0018 1A60     		str	r2, [r3]
 315 001a 02E0     		b	.L18
 316              	.L17:
 445:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 446:../../../FreeRTOS_9_0/Source/queue.c **** 	else
 447:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 448:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 317              		.loc 1 449 0
 318 001c BB69     		ldr	r3, [r7, #24]
 319 001e 7A68     		ldr	r2, [r7, #4]
 320 0020 1A60     		str	r2, [r3]
 321              	.L18:
 450:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 451:../../../FreeRTOS_9_0/Source/queue.c **** 
 452:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:../../../FreeRTOS_9_0/Source/queue.c **** 	defined. */
 454:../../../FreeRTOS_9_0/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 322              		.loc 1 454 0
 323 0022 BB69     		ldr	r3, [r7, #24]
 324 0024 FA68     		ldr	r2, [r7, #12]
 325 0026 DA63     		str	r2, [r3, #60]
 455:../../../FreeRTOS_9_0/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 326              		.loc 1 455 0
 327 0028 BB69     		ldr	r3, [r7, #24]
 328 002a BA68     		ldr	r2, [r7, #8]
 329 002c 1A64     		str	r2, [r3, #64]
 456:../../../FreeRTOS_9_0/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 330              		.loc 1 456 0
 331 002e B869     		ldr	r0, [r7, #24]
 332 0030 0121     		movs	r1, #1
 333 0032 FFF7FEFF 		bl	xQueueGenericReset
 457:../../../FreeRTOS_9_0/Source/queue.c **** 
 458:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 460:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 334              		.loc 1 460 0
ARM GAS  /tmp/ccHyCAGW.s 			page 19


 335 0036 BB69     		ldr	r3, [r7, #24]
 336 0038 FA78     		ldrb	r2, [r7, #3]
 337 003a 83F84C20 		strb	r2, [r3, #76]
 461:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 462:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:../../../FreeRTOS_9_0/Source/queue.c **** 
 464:../../../FreeRTOS_9_0/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 466:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 468:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:../../../FreeRTOS_9_0/Source/queue.c **** 
 470:../../../FreeRTOS_9_0/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:../../../FreeRTOS_9_0/Source/queue.c **** }
 338              		.loc 1 471 0
 339 003e 1037     		adds	r7, r7, #16
 340              	.LCFI13:
 341              		.cfi_def_cfa_offset 8
 342 0040 BD46     		mov	sp, r7
 343              	.LCFI14:
 344              		.cfi_def_cfa_register 13
 345              		@ sp needed
 346 0042 80BD     		pop	{r7, pc}
 347              		.cfi_endproc
 348              	.LFE7:
 350              		.section	.text.prvInitialiseMutex,"ax",%progbits
 351              		.align	2
 352              		.thumb
 353              		.thumb_func
 355              	prvInitialiseMutex:
 356              	.LFB8:
 472:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 473:../../../FreeRTOS_9_0/Source/queue.c **** 
 474:../../../FreeRTOS_9_0/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:../../../FreeRTOS_9_0/Source/queue.c **** 
 476:../../../FreeRTOS_9_0/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 357              		.loc 1 477 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 8
 360              		@ frame_needed = 1, uses_anonymous_args = 0
 361 0000 80B5     		push	{r7, lr}
 362              	.LCFI15:
 363              		.cfi_def_cfa_offset 8
 364              		.cfi_offset 7, -8
 365              		.cfi_offset 14, -4
 366 0002 82B0     		sub	sp, sp, #8
 367              	.LCFI16:
 368              		.cfi_def_cfa_offset 16
 369 0004 00AF     		add	r7, sp, #0
 370              	.LCFI17:
 371              		.cfi_def_cfa_register 7
 372 0006 7860     		str	r0, [r7, #4]
 478:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxNewQueue != NULL )
 373              		.loc 1 478 0
 374 0008 7B68     		ldr	r3, [r7, #4]
 375 000a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccHyCAGW.s 			page 20


 376 000c 0ED0     		beq	.L19
 479:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 480:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 481:../../../FreeRTOS_9_0/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:../../../FreeRTOS_9_0/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:../../../FreeRTOS_9_0/Source/queue.c **** 			in particular the information required for priority inheritance. */
 484:../../../FreeRTOS_9_0/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 377              		.loc 1 484 0
 378 000e 7B68     		ldr	r3, [r7, #4]
 379 0010 0022     		movs	r2, #0
 380 0012 5A60     		str	r2, [r3, #4]
 485:../../../FreeRTOS_9_0/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 381              		.loc 1 485 0
 382 0014 7B68     		ldr	r3, [r7, #4]
 383 0016 0022     		movs	r2, #0
 384 0018 1A60     		str	r2, [r3]
 486:../../../FreeRTOS_9_0/Source/queue.c **** 
 487:../../../FreeRTOS_9_0/Source/queue.c **** 			/* In case this is a recursive mutex. */
 488:../../../FreeRTOS_9_0/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 385              		.loc 1 488 0
 386 001a 7B68     		ldr	r3, [r7, #4]
 387 001c 0022     		movs	r2, #0
 388 001e DA60     		str	r2, [r3, #12]
 489:../../../FreeRTOS_9_0/Source/queue.c **** 
 490:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:../../../FreeRTOS_9_0/Source/queue.c **** 
 492:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 389              		.loc 1 493 0
 390 0020 7868     		ldr	r0, [r7, #4]
 391 0022 0021     		movs	r1, #0
 392 0024 0022     		movs	r2, #0
 393 0026 0023     		movs	r3, #0
 394 0028 FFF7FEFF 		bl	xQueueGenericSend
 395              	.L19:
 494:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 495:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 496:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 497:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 499:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 396              		.loc 1 499 0
 397 002c 0837     		adds	r7, r7, #8
 398              	.LCFI18:
 399              		.cfi_def_cfa_offset 8
 400 002e BD46     		mov	sp, r7
 401              	.LCFI19:
 402              		.cfi_def_cfa_register 13
 403              		@ sp needed
 404 0030 80BD     		pop	{r7, pc}
 405              		.cfi_endproc
 406              	.LFE8:
 408 0032 00BF     		.section	.text.xQueueCreateMutex,"ax",%progbits
 409              		.align	2
 410              		.global	xQueueCreateMutex
 411              		.thumb
 412              		.thumb_func
ARM GAS  /tmp/ccHyCAGW.s 			page 21


 414              	xQueueCreateMutex:
 415              	.LFB9:
 500:../../../FreeRTOS_9_0/Source/queue.c **** 
 501:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_MUTEXES */
 502:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 503:../../../FreeRTOS_9_0/Source/queue.c **** 
 504:../../../FreeRTOS_9_0/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:../../../FreeRTOS_9_0/Source/queue.c **** 
 506:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 416              		.loc 1 507 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 24
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420 0000 80B5     		push	{r7, lr}
 421              	.LCFI20:
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 7, -8
 424              		.cfi_offset 14, -4
 425 0002 86B0     		sub	sp, sp, #24
 426              	.LCFI21:
 427              		.cfi_def_cfa_offset 32
 428 0004 00AF     		add	r7, sp, #0
 429              	.LCFI22:
 430              		.cfi_def_cfa_register 7
 431 0006 0346     		mov	r3, r0
 432 0008 FB71     		strb	r3, [r7, #7]
 508:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t *pxNewQueue;
 509:../../../FreeRTOS_9_0/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 433              		.loc 1 509 0
 434 000a 0123     		movs	r3, #1
 435 000c 7B61     		str	r3, [r7, #20]
 436 000e 0023     		movs	r3, #0
 437 0010 3B61     		str	r3, [r7, #16]
 510:../../../FreeRTOS_9_0/Source/queue.c **** 
 511:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 438              		.loc 1 511 0
 439 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 440 0014 7869     		ldr	r0, [r7, #20]
 441 0016 3969     		ldr	r1, [r7, #16]
 442 0018 1A46     		mov	r2, r3
 443 001a FFF7FEFF 		bl	xQueueGenericCreate
 444 001e F860     		str	r0, [r7, #12]
 512:../../../FreeRTOS_9_0/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 445              		.loc 1 512 0
 446 0020 F868     		ldr	r0, [r7, #12]
 447 0022 FFF7FEFF 		bl	prvInitialiseMutex
 513:../../../FreeRTOS_9_0/Source/queue.c **** 
 514:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxNewQueue;
 448              		.loc 1 514 0
 449 0026 FB68     		ldr	r3, [r7, #12]
 515:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 450              		.loc 1 515 0
 451 0028 1846     		mov	r0, r3
 452 002a 1837     		adds	r7, r7, #24
 453              	.LCFI23:
 454              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccHyCAGW.s 			page 22


 455 002c BD46     		mov	sp, r7
 456              	.LCFI24:
 457              		.cfi_def_cfa_register 13
 458              		@ sp needed
 459 002e 80BD     		pop	{r7, pc}
 460              		.cfi_endproc
 461              	.LFE9:
 463              		.section	.text.xQueueGenericSend,"ax",%progbits
 464              		.align	2
 465              		.global	xQueueGenericSend
 466              		.thumb
 467              		.thumb_func
 469              	xQueueGenericSend:
 470              	.LFB10:
 516:../../../FreeRTOS_9_0/Source/queue.c **** 
 517:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_MUTEXES */
 518:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 519:../../../FreeRTOS_9_0/Source/queue.c **** 
 520:../../../FreeRTOS_9_0/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:../../../FreeRTOS_9_0/Source/queue.c **** 
 522:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 524:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t *pxNewQueue;
 525:../../../FreeRTOS_9_0/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:../../../FreeRTOS_9_0/Source/queue.c **** 
 527:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:../../../FreeRTOS_9_0/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) ucQueueType;
 530:../../../FreeRTOS_9_0/Source/queue.c **** 
 531:../../../FreeRTOS_9_0/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:../../../FreeRTOS_9_0/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:../../../FreeRTOS_9_0/Source/queue.c **** 
 534:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxNewQueue;
 535:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 536:../../../FreeRTOS_9_0/Source/queue.c **** 
 537:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_MUTEXES */
 538:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 539:../../../FreeRTOS_9_0/Source/queue.c **** 
 540:../../../FreeRTOS_9_0/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:../../../FreeRTOS_9_0/Source/queue.c **** 
 542:../../../FreeRTOS_9_0/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 544:../../../FreeRTOS_9_0/Source/queue.c **** 	void *pxReturn;
 545:../../../FreeRTOS_9_0/Source/queue.c **** 
 546:../../../FreeRTOS_9_0/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:../../../FreeRTOS_9_0/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:../../../FreeRTOS_9_0/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:../../../FreeRTOS_9_0/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:../../../FreeRTOS_9_0/Source/queue.c **** 		following critical section exiting and the function returning. */
 551:../../../FreeRTOS_9_0/Source/queue.c **** 		taskENTER_CRITICAL();
 552:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 553:../../../FreeRTOS_9_0/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 555:../../../FreeRTOS_9_0/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 557:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 558:../../../FreeRTOS_9_0/Source/queue.c **** 			{
ARM GAS  /tmp/ccHyCAGW.s 			page 23


 559:../../../FreeRTOS_9_0/Source/queue.c **** 				pxReturn = NULL;
 560:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 561:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 562:../../../FreeRTOS_9_0/Source/queue.c **** 		taskEXIT_CRITICAL();
 563:../../../FreeRTOS_9_0/Source/queue.c **** 
 564:../../../FreeRTOS_9_0/Source/queue.c **** 		return pxReturn;
 565:../../../FreeRTOS_9_0/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:../../../FreeRTOS_9_0/Source/queue.c **** 
 567:../../../FreeRTOS_9_0/Source/queue.c **** #endif
 568:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 569:../../../FreeRTOS_9_0/Source/queue.c **** 
 570:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:../../../FreeRTOS_9_0/Source/queue.c **** 
 572:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 574:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
 575:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:../../../FreeRTOS_9_0/Source/queue.c **** 
 577:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( pxMutex );
 578:../../../FreeRTOS_9_0/Source/queue.c **** 
 579:../../../FreeRTOS_9_0/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:../../../FreeRTOS_9_0/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:../../../FreeRTOS_9_0/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:../../../FreeRTOS_9_0/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:../../../FreeRTOS_9_0/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:../../../FreeRTOS_9_0/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 587:../../../FreeRTOS_9_0/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:../../../FreeRTOS_9_0/Source/queue.c **** 
 589:../../../FreeRTOS_9_0/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:../../../FreeRTOS_9_0/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:../../../FreeRTOS_9_0/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:../../../FreeRTOS_9_0/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:../../../FreeRTOS_9_0/Source/queue.c **** 			uxRecursiveCallCount member. */
 594:../../../FreeRTOS_9_0/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:../../../FreeRTOS_9_0/Source/queue.c **** 
 596:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 599:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:../../../FreeRTOS_9_0/Source/queue.c **** 				task that might be waiting to access the mutex. */
 601:../../../FreeRTOS_9_0/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 603:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 604:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 605:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 607:../../../FreeRTOS_9_0/Source/queue.c **** 
 608:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 609:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 610:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 611:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 612:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:../../../FreeRTOS_9_0/Source/queue.c **** 			holder. */
 614:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFAIL;
 615:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 24


 616:../../../FreeRTOS_9_0/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 618:../../../FreeRTOS_9_0/Source/queue.c **** 
 619:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
 620:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 621:../../../FreeRTOS_9_0/Source/queue.c **** 
 622:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 624:../../../FreeRTOS_9_0/Source/queue.c **** 
 625:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:../../../FreeRTOS_9_0/Source/queue.c **** 
 627:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 629:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
 630:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:../../../FreeRTOS_9_0/Source/queue.c **** 
 632:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( pxMutex );
 633:../../../FreeRTOS_9_0/Source/queue.c **** 
 634:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:../../../FreeRTOS_9_0/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:../../../FreeRTOS_9_0/Source/queue.c **** 
 637:../../../FreeRTOS_9_0/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:../../../FreeRTOS_9_0/Source/queue.c **** 
 639:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 641:../../../FreeRTOS_9_0/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 643:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 644:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 645:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 646:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:../../../FreeRTOS_9_0/Source/queue.c **** 
 648:../../../FreeRTOS_9_0/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:../../../FreeRTOS_9_0/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:../../../FreeRTOS_9_0/Source/queue.c **** 			before reaching here. */
 651:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xReturn != pdFAIL )
 652:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 653:../../../FreeRTOS_9_0/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 655:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 656:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 657:../../../FreeRTOS_9_0/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 659:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 660:../../../FreeRTOS_9_0/Source/queue.c **** 
 661:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
 662:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 663:../../../FreeRTOS_9_0/Source/queue.c **** 
 664:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 666:../../../FreeRTOS_9_0/Source/queue.c **** 
 667:../../../FreeRTOS_9_0/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:../../../FreeRTOS_9_0/Source/queue.c **** 
 669:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 671:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xHandle;
 672:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 25


 673:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:../../../FreeRTOS_9_0/Source/queue.c **** 
 676:../../../FreeRTOS_9_0/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:../../../FreeRTOS_9_0/Source/queue.c **** 
 678:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xHandle != NULL )
 679:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 680:../../../FreeRTOS_9_0/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:../../../FreeRTOS_9_0/Source/queue.c **** 
 682:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 684:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 685:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 686:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 688:../../../FreeRTOS_9_0/Source/queue.c **** 
 689:../../../FreeRTOS_9_0/Source/queue.c **** 		return xHandle;
 690:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 691:../../../FreeRTOS_9_0/Source/queue.c **** 
 692:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 694:../../../FreeRTOS_9_0/Source/queue.c **** 
 695:../../../FreeRTOS_9_0/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:../../../FreeRTOS_9_0/Source/queue.c **** 
 697:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 699:../../../FreeRTOS_9_0/Source/queue.c **** 	QueueHandle_t xHandle;
 700:../../../FreeRTOS_9_0/Source/queue.c **** 
 701:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:../../../FreeRTOS_9_0/Source/queue.c **** 
 704:../../../FreeRTOS_9_0/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:../../../FreeRTOS_9_0/Source/queue.c **** 
 706:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xHandle != NULL )
 707:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 708:../../../FreeRTOS_9_0/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:../../../FreeRTOS_9_0/Source/queue.c **** 
 710:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 712:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 713:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 714:../../../FreeRTOS_9_0/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 716:../../../FreeRTOS_9_0/Source/queue.c **** 
 717:../../../FreeRTOS_9_0/Source/queue.c **** 		return xHandle;
 718:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 719:../../../FreeRTOS_9_0/Source/queue.c **** 
 720:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 722:../../../FreeRTOS_9_0/Source/queue.c **** 
 723:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:../../../FreeRTOS_9_0/Source/queue.c **** {
 471              		.loc 1 724 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 56
 474              		@ frame_needed = 1, uses_anonymous_args = 0
 475 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccHyCAGW.s 			page 26


 476              	.LCFI25:
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 7, -8
 479              		.cfi_offset 14, -4
 480 0002 8EB0     		sub	sp, sp, #56
 481              	.LCFI26:
 482              		.cfi_def_cfa_offset 64
 483 0004 00AF     		add	r7, sp, #0
 484              	.LCFI27:
 485              		.cfi_def_cfa_register 7
 486 0006 F860     		str	r0, [r7, #12]
 487 0008 B960     		str	r1, [r7, #8]
 488 000a 7A60     		str	r2, [r7, #4]
 489 000c 3B60     		str	r3, [r7]
 725:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 490              		.loc 1 725 0
 491 000e 0023     		movs	r3, #0
 492 0010 7B63     		str	r3, [r7, #52]
 726:../../../FreeRTOS_9_0/Source/queue.c **** TimeOut_t xTimeOut;
 727:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 493              		.loc 1 727 0
 494 0012 FB68     		ldr	r3, [r7, #12]
 495 0014 3B63     		str	r3, [r7, #48]
 728:../../../FreeRTOS_9_0/Source/queue.c **** 
 729:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 496              		.loc 1 729 0
 497 0016 3B6B     		ldr	r3, [r7, #48]
 498 0018 002B     		cmp	r3, #0
 499 001a 09D1     		bne	.L24
 500              	.LBB80:
 501              	.LBB81:
 502              		.loc 2 237 0 discriminator 1
 503              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 504 001c 4FF05003 			mov r3, #80												
 505 0020 83F31188 		msr basepri, r3											
 506 0024 BFF36F8F 		isb														
 507 0028 BFF34F8F 		dsb														
 508              	
 509              	@ 0 "" 2
 510              		.thumb
 511 002c BB62     		str	r3, [r7, #40]
 512              	.L25:
 513              	.LBE81:
 514              	.LBE80:
 515              		.loc 1 729 0 discriminator 1
 516 002e FEE7     		b	.L25
 517              	.L24:
 730:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 518              		.loc 1 730 0
 519 0030 BB68     		ldr	r3, [r7, #8]
 520 0032 002B     		cmp	r3, #0
 521 0034 03D1     		bne	.L26
 522              		.loc 1 730 0 is_stmt 0 discriminator 2
 523 0036 3B6B     		ldr	r3, [r7, #48]
 524 0038 1B6C     		ldr	r3, [r3, #64]
 525 003a 002B     		cmp	r3, #0
 526 003c 01D1     		bne	.L27
ARM GAS  /tmp/ccHyCAGW.s 			page 27


 527              	.L26:
 528              		.loc 1 730 0 discriminator 3
 529 003e 0123     		movs	r3, #1
 530 0040 00E0     		b	.L28
 531              	.L27:
 532              		.loc 1 730 0 discriminator 4
 533 0042 0023     		movs	r3, #0
 534              	.L28:
 535              		.loc 1 730 0 discriminator 6
 536 0044 002B     		cmp	r3, #0
 537 0046 09D1     		bne	.L29
 538              	.LBB82:
 539              	.LBB83:
 540              		.loc 2 237 0 is_stmt 1 discriminator 7
 541              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 542 0048 4FF05003 			mov r3, #80												
 543 004c 83F31188 		msr basepri, r3											
 544 0050 BFF36F8F 		isb														
 545 0054 BFF34F8F 		dsb														
 546              	
 547              	@ 0 "" 2
 548              		.thumb
 549 0058 7B62     		str	r3, [r7, #36]
 550              	.L30:
 551              	.LBE83:
 552              	.LBE82:
 553              		.loc 1 730 0 discriminator 2
 554 005a FEE7     		b	.L30
 555              	.L29:
 731:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 556              		.loc 1 731 0
 557 005c 3B68     		ldr	r3, [r7]
 558 005e 022B     		cmp	r3, #2
 559 0060 03D1     		bne	.L31
 560              		.loc 1 731 0 is_stmt 0 discriminator 2
 561 0062 3B6B     		ldr	r3, [r7, #48]
 562 0064 DB6B     		ldr	r3, [r3, #60]
 563 0066 012B     		cmp	r3, #1
 564 0068 01D1     		bne	.L32
 565              	.L31:
 566              		.loc 1 731 0 discriminator 3
 567 006a 0123     		movs	r3, #1
 568 006c 00E0     		b	.L33
 569              	.L32:
 570              		.loc 1 731 0 discriminator 4
 571 006e 0023     		movs	r3, #0
 572              	.L33:
 573              		.loc 1 731 0 discriminator 6
 574 0070 002B     		cmp	r3, #0
 575 0072 09D1     		bne	.L34
 576              	.LBB84:
 577              	.LBB85:
 578              		.loc 2 237 0 is_stmt 1 discriminator 7
 579              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 580 0074 4FF05003 			mov r3, #80												
 581 0078 83F31188 		msr basepri, r3											
 582 007c BFF36F8F 		isb														
ARM GAS  /tmp/ccHyCAGW.s 			page 28


 583 0080 BFF34F8F 		dsb														
 584              	
 585              	@ 0 "" 2
 586              		.thumb
 587 0084 3B62     		str	r3, [r7, #32]
 588              	.L35:
 589              	.LBE85:
 590              	.LBE84:
 591              		.loc 1 731 0 discriminator 3
 592 0086 FEE7     		b	.L35
 593              	.L34:
 732:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 734:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 594              		.loc 1 734 0
 595 0088 FFF7FEFF 		bl	xTaskGetSchedulerState
 596 008c 0346     		mov	r3, r0
 597 008e 002B     		cmp	r3, #0
 598 0090 02D1     		bne	.L36
 599              		.loc 1 734 0 is_stmt 0 discriminator 2
 600 0092 7B68     		ldr	r3, [r7, #4]
 601 0094 002B     		cmp	r3, #0
 602 0096 01D1     		bne	.L37
 603              	.L36:
 604              		.loc 1 734 0 discriminator 3
 605 0098 0123     		movs	r3, #1
 606 009a 00E0     		b	.L38
 607              	.L37:
 608              		.loc 1 734 0 discriminator 4
 609 009c 0023     		movs	r3, #0
 610              	.L38:
 611              		.loc 1 734 0 discriminator 6
 612 009e 002B     		cmp	r3, #0
 613 00a0 09D1     		bne	.L39
 614              	.LBB86:
 615              	.LBB87:
 616              		.loc 2 237 0 is_stmt 1 discriminator 7
 617              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 618 00a2 4FF05003 			mov r3, #80												
 619 00a6 83F31188 		msr basepri, r3											
 620 00aa BFF36F8F 		isb														
 621 00ae BFF34F8F 		dsb														
 622              	
 623              	@ 0 "" 2
 624              		.thumb
 625 00b2 FB61     		str	r3, [r7, #28]
 626              	.L40:
 627              	.LBE87:
 628              	.LBE86:
 629              		.loc 1 734 0 discriminator 4
 630 00b4 FEE7     		b	.L40
 631              	.L39:
 735:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 736:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
 737:../../../FreeRTOS_9_0/Source/queue.c **** 
 738:../../../FreeRTOS_9_0/Source/queue.c **** 
 739:../../../FreeRTOS_9_0/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
ARM GAS  /tmp/ccHyCAGW.s 			page 29


 740:../../../FreeRTOS_9_0/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 741:../../../FreeRTOS_9_0/Source/queue.c **** 	of execution time efficiency. */
 742:../../../FreeRTOS_9_0/Source/queue.c **** 	for( ;; )
 743:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 744:../../../FreeRTOS_9_0/Source/queue.c **** 		taskENTER_CRITICAL();
 632              		.loc 1 744 0
 633 00b6 FFF7FEFF 		bl	vPortEnterCritical
 745:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 746:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:../../../FreeRTOS_9_0/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:../../../FreeRTOS_9_0/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:../../../FreeRTOS_9_0/Source/queue.c **** 			queue is full. */
 750:../../../FreeRTOS_9_0/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 634              		.loc 1 750 0
 635 00ba 3B6B     		ldr	r3, [r7, #48]
 636 00bc 9A6B     		ldr	r2, [r3, #56]
 637 00be 3B6B     		ldr	r3, [r7, #48]
 638 00c0 DB6B     		ldr	r3, [r3, #60]
 639 00c2 9A42     		cmp	r2, r3
 640 00c4 02D3     		bcc	.L41
 641              		.loc 1 750 0 is_stmt 0 discriminator 1
 642 00c6 3B68     		ldr	r3, [r7]
 643 00c8 022B     		cmp	r3, #2
 644 00ca 29D1     		bne	.L42
 645              	.L41:
 751:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 752:../../../FreeRTOS_9_0/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:../../../FreeRTOS_9_0/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 646              		.loc 1 753 0 is_stmt 1
 647 00cc 386B     		ldr	r0, [r7, #48]
 648 00ce B968     		ldr	r1, [r7, #8]
 649 00d0 3A68     		ldr	r2, [r7]
 650 00d2 FFF7FEFF 		bl	prvCopyDataToQueue
 651 00d6 F862     		str	r0, [r7, #44]
 754:../../../FreeRTOS_9_0/Source/queue.c **** 
 755:../../../FreeRTOS_9_0/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 757:../../../FreeRTOS_9_0/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 759:../../../FreeRTOS_9_0/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 761:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:../../../FreeRTOS_9_0/Source/queue.c **** 							to the queue set caused a higher priority task to
 763:../../../FreeRTOS_9_0/Source/queue.c **** 							unblock. A context switch is required. */
 764:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 766:../../../FreeRTOS_9_0/Source/queue.c **** 						else
 767:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 768:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 770:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 771:../../../FreeRTOS_9_0/Source/queue.c **** 					else
 772:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 773:../../../FreeRTOS_9_0/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:../../../FreeRTOS_9_0/Source/queue.c **** 						queue then unblock it now. */
 775:../../../FreeRTOS_9_0/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:../../../FreeRTOS_9_0/Source/queue.c **** 						{
ARM GAS  /tmp/ccHyCAGW.s 			page 30


 777:../../../FreeRTOS_9_0/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:../../../FreeRTOS_9_0/Source/queue.c **** 							{
 779:../../../FreeRTOS_9_0/Source/queue.c **** 								/* The unblocked task has a priority higher than
 780:../../../FreeRTOS_9_0/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:../../../FreeRTOS_9_0/Source/queue.c **** 								do this from within the critical section - the
 782:../../../FreeRTOS_9_0/Source/queue.c **** 								kernel takes care of that. */
 783:../../../FreeRTOS_9_0/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:../../../FreeRTOS_9_0/Source/queue.c **** 							}
 785:../../../FreeRTOS_9_0/Source/queue.c **** 							else
 786:../../../FreeRTOS_9_0/Source/queue.c **** 							{
 787:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:../../../FreeRTOS_9_0/Source/queue.c **** 							}
 789:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 790:../../../FreeRTOS_9_0/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 792:../../../FreeRTOS_9_0/Source/queue.c **** 							/* This path is a special case that will only get
 793:../../../FreeRTOS_9_0/Source/queue.c **** 							executed if the task was holding multiple mutexes
 794:../../../FreeRTOS_9_0/Source/queue.c **** 							and the mutexes were given back in an order that is
 795:../../../FreeRTOS_9_0/Source/queue.c **** 							different to that in which they were taken. */
 796:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 798:../../../FreeRTOS_9_0/Source/queue.c **** 						else
 799:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 800:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 802:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 803:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 804:../../../FreeRTOS_9_0/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 806:../../../FreeRTOS_9_0/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:../../../FreeRTOS_9_0/Source/queue.c **** 					queue then unblock it now. */
 808:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 652              		.loc 1 808 0
 653 00d8 3B6B     		ldr	r3, [r7, #48]
 654 00da 5B6A     		ldr	r3, [r3, #36]
 655 00dc 002B     		cmp	r3, #0
 656 00de 10D0     		beq	.L43
 809:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 810:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 657              		.loc 1 810 0
 658 00e0 3B6B     		ldr	r3, [r7, #48]
 659 00e2 2433     		adds	r3, r3, #36
 660 00e4 1846     		mov	r0, r3
 661 00e6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 662 00ea 0346     		mov	r3, r0
 663 00ec 002B     		cmp	r3, #0
 664 00ee 13D0     		beq	.L44
 811:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 812:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The unblocked task has a priority higher than
 813:../../../FreeRTOS_9_0/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:../../../FreeRTOS_9_0/Source/queue.c **** 							this from within the critical section - the kernel
 815:../../../FreeRTOS_9_0/Source/queue.c **** 							takes care of that. */
 816:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 665              		.loc 1 816 0
 666 00f0 414B     		ldr	r3, .L56
 667 00f2 4FF08052 		mov	r2, #268435456
 668 00f6 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccHyCAGW.s 			page 31


 669              	@ 816 "../../../FreeRTOS_9_0/Source/queue.c" 1
 670 00f8 BFF34F8F 		dsb
 671              	@ 0 "" 2
 672              	@ 816 "../../../FreeRTOS_9_0/Source/queue.c" 1
 673 00fc BFF36F8F 		isb
 674              	@ 0 "" 2
 675              		.thumb
 676 0100 0AE0     		b	.L44
 677              	.L43:
 817:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 818:../../../FreeRTOS_9_0/Source/queue.c **** 						else
 819:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 820:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 822:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 823:../../../FreeRTOS_9_0/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 678              		.loc 1 823 0
 679 0102 FB6A     		ldr	r3, [r7, #44]
 680 0104 002B     		cmp	r3, #0
 681 0106 07D0     		beq	.L44
 824:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 825:../../../FreeRTOS_9_0/Source/queue.c **** 						/* This path is a special case that will only get
 826:../../../FreeRTOS_9_0/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 827:../../../FreeRTOS_9_0/Source/queue.c **** 						the mutexes were given back in an order that is
 828:../../../FreeRTOS_9_0/Source/queue.c **** 						different to that in which they were taken. */
 829:../../../FreeRTOS_9_0/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 682              		.loc 1 829 0
 683 0108 3B4B     		ldr	r3, .L56
 684 010a 4FF08052 		mov	r2, #268435456
 685 010e 1A60     		str	r2, [r3]
 686              	@ 829 "../../../FreeRTOS_9_0/Source/queue.c" 1
 687 0110 BFF34F8F 		dsb
 688              	@ 0 "" 2
 689              	@ 829 "../../../FreeRTOS_9_0/Source/queue.c" 1
 690 0114 BFF36F8F 		isb
 691              	@ 0 "" 2
 692              		.thumb
 693              	.L44:
 830:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 831:../../../FreeRTOS_9_0/Source/queue.c **** 					else
 832:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 833:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 835:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 836:../../../FreeRTOS_9_0/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:../../../FreeRTOS_9_0/Source/queue.c **** 
 838:../../../FreeRTOS_9_0/Source/queue.c **** 				taskEXIT_CRITICAL();
 694              		.loc 1 838 0
 695 0118 FFF7FEFF 		bl	vPortExitCritical
 839:../../../FreeRTOS_9_0/Source/queue.c **** 				return pdPASS;
 696              		.loc 1 839 0
 697 011c 0123     		movs	r3, #1
 698 011e 67E0     		b	.L55
 699              	.L42:
 840:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 841:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 842:../../../FreeRTOS_9_0/Source/queue.c **** 			{
ARM GAS  /tmp/ccHyCAGW.s 			page 32


 843:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 700              		.loc 1 843 0
 701 0120 7B68     		ldr	r3, [r7, #4]
 702 0122 002B     		cmp	r3, #0
 703 0124 03D1     		bne	.L46
 844:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 845:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 846:../../../FreeRTOS_9_0/Source/queue.c **** 					the block time has expired) so leave now. */
 847:../../../FreeRTOS_9_0/Source/queue.c **** 					taskEXIT_CRITICAL();
 704              		.loc 1 847 0
 705 0126 FFF7FEFF 		bl	vPortExitCritical
 848:../../../FreeRTOS_9_0/Source/queue.c **** 
 849:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Return to the original privilege level before exiting
 850:../../../FreeRTOS_9_0/Source/queue.c **** 					the function. */
 851:../../../FreeRTOS_9_0/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_FULL;
 706              		.loc 1 852 0
 707 012a 0023     		movs	r3, #0
 708 012c 60E0     		b	.L55
 709              	.L46:
 853:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 854:../../../FreeRTOS_9_0/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 710              		.loc 1 854 0
 711 012e 7B6B     		ldr	r3, [r7, #52]
 712 0130 002B     		cmp	r3, #0
 713 0132 06D1     		bne	.L47
 855:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 856:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The queue was full and a block time was specified so
 857:../../../FreeRTOS_9_0/Source/queue.c **** 					configure the timeout structure. */
 858:../../../FreeRTOS_9_0/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 714              		.loc 1 858 0
 715 0134 07F11403 		add	r3, r7, #20
 716 0138 1846     		mov	r0, r3
 717 013a FFF7FEFF 		bl	vTaskSetTimeOutState
 859:../../../FreeRTOS_9_0/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 718              		.loc 1 859 0
 719 013e 0123     		movs	r3, #1
 720 0140 7B63     		str	r3, [r7, #52]
 721              	.L47:
 860:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 861:../../../FreeRTOS_9_0/Source/queue.c **** 				else
 862:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 863:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Entry time was already set. */
 864:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 866:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 867:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 868:../../../FreeRTOS_9_0/Source/queue.c **** 		taskEXIT_CRITICAL();
 722              		.loc 1 868 0
 723 0142 FFF7FEFF 		bl	vPortExitCritical
 869:../../../FreeRTOS_9_0/Source/queue.c **** 
 870:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:../../../FreeRTOS_9_0/Source/queue.c **** 		now the critical section has been exited. */
 872:../../../FreeRTOS_9_0/Source/queue.c **** 
 873:../../../FreeRTOS_9_0/Source/queue.c **** 		vTaskSuspendAll();
 724              		.loc 1 873 0
 725 0146 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  /tmp/ccHyCAGW.s 			page 33


 874:../../../FreeRTOS_9_0/Source/queue.c **** 		prvLockQueue( pxQueue );
 726              		.loc 1 874 0
 727 014a FFF7FEFF 		bl	vPortEnterCritical
 728 014e 3B6B     		ldr	r3, [r7, #48]
 729 0150 93F84430 		ldrb	r3, [r3, #68]
 730 0154 DBB2     		uxtb	r3, r3
 731 0156 5BB2     		sxtb	r3, r3
 732 0158 B3F1FF3F 		cmp	r3, #-1
 733 015c 03D1     		bne	.L48
 734              		.loc 1 874 0 is_stmt 0 discriminator 1
 735 015e 3B6B     		ldr	r3, [r7, #48]
 736 0160 0022     		movs	r2, #0
 737 0162 83F84420 		strb	r2, [r3, #68]
 738              	.L48:
 739              		.loc 1 874 0 discriminator 3
 740 0166 3B6B     		ldr	r3, [r7, #48]
 741 0168 93F84530 		ldrb	r3, [r3, #69]
 742 016c DBB2     		uxtb	r3, r3
 743 016e 5BB2     		sxtb	r3, r3
 744 0170 B3F1FF3F 		cmp	r3, #-1
 745 0174 03D1     		bne	.L49
 746              		.loc 1 874 0 discriminator 4
 747 0176 3B6B     		ldr	r3, [r7, #48]
 748 0178 0022     		movs	r2, #0
 749 017a 83F84520 		strb	r2, [r3, #69]
 750              	.L49:
 751              		.loc 1 874 0 discriminator 6
 752 017e FFF7FEFF 		bl	vPortExitCritical
 875:../../../FreeRTOS_9_0/Source/queue.c **** 
 876:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 753              		.loc 1 877 0 is_stmt 1 discriminator 6
 754 0182 07F11402 		add	r2, r7, #20
 755 0186 3B1D     		adds	r3, r7, #4
 756 0188 1046     		mov	r0, r2
 757 018a 1946     		mov	r1, r3
 758 018c FFF7FEFF 		bl	xTaskCheckForTimeOut
 759 0190 0346     		mov	r3, r0
 760 0192 002B     		cmp	r3, #0
 761 0194 24D1     		bne	.L50
 878:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 879:../../../FreeRTOS_9_0/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 762              		.loc 1 879 0
 763 0196 386B     		ldr	r0, [r7, #48]
 764 0198 FFF7FEFF 		bl	prvIsQueueFull
 765 019c 0346     		mov	r3, r0
 766 019e 002B     		cmp	r3, #0
 767 01a0 18D0     		beq	.L51
 880:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 881:../../../FreeRTOS_9_0/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:../../../FreeRTOS_9_0/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 768              		.loc 1 882 0
 769 01a2 3B6B     		ldr	r3, [r7, #48]
 770 01a4 03F11002 		add	r2, r3, #16
 771 01a8 7B68     		ldr	r3, [r7, #4]
 772 01aa 1046     		mov	r0, r2
 773 01ac 1946     		mov	r1, r3
ARM GAS  /tmp/ccHyCAGW.s 			page 34


 774 01ae FFF7FEFF 		bl	vTaskPlaceOnEventList
 883:../../../FreeRTOS_9_0/Source/queue.c **** 
 884:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:../../../FreeRTOS_9_0/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:../../../FreeRTOS_9_0/Source/queue.c **** 				remove this task from the event	list again - but as the
 887:../../../FreeRTOS_9_0/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:../../../FreeRTOS_9_0/Source/queue.c **** 				ready last instead of the actual ready list. */
 889:../../../FreeRTOS_9_0/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 775              		.loc 1 889 0
 776 01b2 386B     		ldr	r0, [r7, #48]
 777 01b4 FFF7FEFF 		bl	prvUnlockQueue
 890:../../../FreeRTOS_9_0/Source/queue.c **** 
 891:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:../../../FreeRTOS_9_0/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:../../../FreeRTOS_9_0/Source/queue.c **** 				task is already in a ready list before it yields - in which
 894:../../../FreeRTOS_9_0/Source/queue.c **** 				case the yield will not cause a context switch unless there
 895:../../../FreeRTOS_9_0/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 778              		.loc 1 896 0
 779 01b8 FFF7FEFF 		bl	xTaskResumeAll
 780 01bc 0346     		mov	r3, r0
 781 01be 002B     		cmp	r3, #0
 782 01c0 15D1     		bne	.L54
 897:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 898:../../../FreeRTOS_9_0/Source/queue.c **** 					portYIELD_WITHIN_API();
 783              		.loc 1 898 0
 784 01c2 0D4B     		ldr	r3, .L56
 785 01c4 4FF08052 		mov	r2, #268435456
 786 01c8 1A60     		str	r2, [r3]
 787              	@ 898 "../../../FreeRTOS_9_0/Source/queue.c" 1
 788 01ca BFF34F8F 		dsb
 789              	@ 0 "" 2
 790              	@ 898 "../../../FreeRTOS_9_0/Source/queue.c" 1
 791 01ce BFF36F8F 		isb
 792              	@ 0 "" 2
 793              		.thumb
 794 01d2 0CE0     		b	.L54
 795              	.L51:
 899:../../../FreeRTOS_9_0/Source/queue.c **** 				}
 900:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 901:../../../FreeRTOS_9_0/Source/queue.c **** 			else
 902:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 903:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Try again. */
 904:../../../FreeRTOS_9_0/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 796              		.loc 1 904 0
 797 01d4 386B     		ldr	r0, [r7, #48]
 798 01d6 FFF7FEFF 		bl	prvUnlockQueue
 905:../../../FreeRTOS_9_0/Source/queue.c **** 				( void ) xTaskResumeAll();
 799              		.loc 1 905 0
 800 01da FFF7FEFF 		bl	xTaskResumeAll
 801 01de 6AE7     		b	.L39
 802              	.L50:
 906:../../../FreeRTOS_9_0/Source/queue.c **** 			}
 907:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 908:../../../FreeRTOS_9_0/Source/queue.c **** 		else
 909:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 910:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The timeout has expired. */
ARM GAS  /tmp/ccHyCAGW.s 			page 35


 911:../../../FreeRTOS_9_0/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 803              		.loc 1 911 0
 804 01e0 386B     		ldr	r0, [r7, #48]
 805 01e2 FFF7FEFF 		bl	prvUnlockQueue
 912:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) xTaskResumeAll();
 806              		.loc 1 912 0
 807 01e6 FFF7FEFF 		bl	xTaskResumeAll
 913:../../../FreeRTOS_9_0/Source/queue.c **** 
 914:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:../../../FreeRTOS_9_0/Source/queue.c **** 			return errQUEUE_FULL;
 808              		.loc 1 915 0
 809 01ea 0023     		movs	r3, #0
 810 01ec 00E0     		b	.L55
 811              	.L54:
 916:../../../FreeRTOS_9_0/Source/queue.c **** 		}
 917:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 812              		.loc 1 917 0 discriminator 6
 813 01ee 62E7     		b	.L39
 814              	.L55:
 918:../../../FreeRTOS_9_0/Source/queue.c **** }
 815              		.loc 1 918 0 discriminator 7
 816 01f0 1846     		mov	r0, r3
 817 01f2 3837     		adds	r7, r7, #56
 818              	.LCFI28:
 819              		.cfi_def_cfa_offset 8
 820 01f4 BD46     		mov	sp, r7
 821              	.LCFI29:
 822              		.cfi_def_cfa_register 13
 823              		@ sp needed
 824 01f6 80BD     		pop	{r7, pc}
 825              	.L57:
 826              		.align	2
 827              	.L56:
 828 01f8 04ED00E0 		.word	-536810236
 829              		.cfi_endproc
 830              	.LFE10:
 832              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 833              		.align	2
 834              		.global	xQueueGenericSendFromISR
 835              		.thumb
 836              		.thumb_func
 838              	xQueueGenericSendFromISR:
 839              	.LFB11:
 919:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
 920:../../../FreeRTOS_9_0/Source/queue.c **** 
 921:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:../../../FreeRTOS_9_0/Source/queue.c **** {
 840              		.loc 1 922 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 56
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844 0000 80B5     		push	{r7, lr}
 845              	.LCFI30:
 846              		.cfi_def_cfa_offset 8
 847              		.cfi_offset 7, -8
 848              		.cfi_offset 14, -4
 849 0002 8EB0     		sub	sp, sp, #56
ARM GAS  /tmp/ccHyCAGW.s 			page 36


 850              	.LCFI31:
 851              		.cfi_def_cfa_offset 64
 852 0004 00AF     		add	r7, sp, #0
 853              	.LCFI32:
 854              		.cfi_def_cfa_register 7
 855 0006 F860     		str	r0, [r7, #12]
 856 0008 B960     		str	r1, [r7, #8]
 857 000a 7A60     		str	r2, [r7, #4]
 858 000c 3B60     		str	r3, [r7]
 923:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
 924:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 859              		.loc 1 925 0
 860 000e FB68     		ldr	r3, [r7, #12]
 861 0010 3B63     		str	r3, [r7, #48]
 926:../../../FreeRTOS_9_0/Source/queue.c **** 
 927:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 862              		.loc 1 927 0
 863 0012 3B6B     		ldr	r3, [r7, #48]
 864 0014 002B     		cmp	r3, #0
 865 0016 09D1     		bne	.L59
 866              	.LBB88:
 867              	.LBB89:
 868              		.loc 2 237 0 discriminator 1
 869              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 870 0018 4FF05003 			mov r3, #80												
 871 001c 83F31188 		msr basepri, r3											
 872 0020 BFF36F8F 		isb														
 873 0024 BFF34F8F 		dsb														
 874              	
 875              	@ 0 "" 2
 876              		.thumb
 877 0028 7B62     		str	r3, [r7, #36]
 878              	.L60:
 879              	.LBE89:
 880              	.LBE88:
 881              		.loc 1 927 0 discriminator 1
 882 002a FEE7     		b	.L60
 883              	.L59:
 928:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 884              		.loc 1 928 0
 885 002c BB68     		ldr	r3, [r7, #8]
 886 002e 002B     		cmp	r3, #0
 887 0030 03D1     		bne	.L61
 888              		.loc 1 928 0 is_stmt 0 discriminator 2
 889 0032 3B6B     		ldr	r3, [r7, #48]
 890 0034 1B6C     		ldr	r3, [r3, #64]
 891 0036 002B     		cmp	r3, #0
 892 0038 01D1     		bne	.L62
 893              	.L61:
 894              		.loc 1 928 0 discriminator 3
 895 003a 0123     		movs	r3, #1
 896 003c 00E0     		b	.L63
 897              	.L62:
 898              		.loc 1 928 0 discriminator 4
 899 003e 0023     		movs	r3, #0
 900              	.L63:
ARM GAS  /tmp/ccHyCAGW.s 			page 37


 901              		.loc 1 928 0 discriminator 6
 902 0040 002B     		cmp	r3, #0
 903 0042 09D1     		bne	.L64
 904              	.LBB90:
 905              	.LBB91:
 906              		.loc 2 237 0 is_stmt 1 discriminator 7
 907              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 908 0044 4FF05003 			mov r3, #80												
 909 0048 83F31188 		msr basepri, r3											
 910 004c BFF36F8F 		isb														
 911 0050 BFF34F8F 		dsb														
 912              	
 913              	@ 0 "" 2
 914              		.thumb
 915 0054 3B62     		str	r3, [r7, #32]
 916              	.L65:
 917              	.LBE91:
 918              	.LBE90:
 919              		.loc 1 928 0 discriminator 2
 920 0056 FEE7     		b	.L65
 921              	.L64:
 929:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 922              		.loc 1 929 0
 923 0058 3B68     		ldr	r3, [r7]
 924 005a 022B     		cmp	r3, #2
 925 005c 03D1     		bne	.L66
 926              		.loc 1 929 0 is_stmt 0 discriminator 2
 927 005e 3B6B     		ldr	r3, [r7, #48]
 928 0060 DB6B     		ldr	r3, [r3, #60]
 929 0062 012B     		cmp	r3, #1
 930 0064 01D1     		bne	.L67
 931              	.L66:
 932              		.loc 1 929 0 discriminator 3
 933 0066 0123     		movs	r3, #1
 934 0068 00E0     		b	.L68
 935              	.L67:
 936              		.loc 1 929 0 discriminator 4
 937 006a 0023     		movs	r3, #0
 938              	.L68:
 939              		.loc 1 929 0 discriminator 6
 940 006c 002B     		cmp	r3, #0
 941 006e 09D1     		bne	.L69
 942              	.LBB92:
 943              	.LBB93:
 944              		.loc 2 237 0 is_stmt 1 discriminator 7
 945              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 946 0070 4FF05003 			mov r3, #80												
 947 0074 83F31188 		msr basepri, r3											
 948 0078 BFF36F8F 		isb														
 949 007c BFF34F8F 		dsb														
 950              	
 951              	@ 0 "" 2
 952              		.thumb
 953 0080 FB61     		str	r3, [r7, #28]
 954              	.L70:
 955              	.LBE93:
 956              	.LBE92:
ARM GAS  /tmp/ccHyCAGW.s 			page 38


 957              		.loc 1 929 0 discriminator 3
 958 0082 FEE7     		b	.L70
 959              	.L69:
 930:../../../FreeRTOS_9_0/Source/queue.c **** 
 931:../../../FreeRTOS_9_0/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:../../../FreeRTOS_9_0/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:../../../FreeRTOS_9_0/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:../../../FreeRTOS_9_0/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:../../../FreeRTOS_9_0/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:../../../FreeRTOS_9_0/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:../../../FreeRTOS_9_0/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:../../../FreeRTOS_9_0/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:../../../FreeRTOS_9_0/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:../../../FreeRTOS_9_0/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:../../../FreeRTOS_9_0/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:../../../FreeRTOS_9_0/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:../../../FreeRTOS_9_0/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:../../../FreeRTOS_9_0/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:../../../FreeRTOS_9_0/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 960              		.loc 1 945 0
 961 0084 FFF7FEFF 		bl	vPortValidateInterruptPriority
 962              	.LBB94:
 963              	.LBB95:
 238:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 964              		.loc 2 253 0
 965              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 966 0088 EFF31182 			mrs r2, basepri											
 967 008c 4FF05003 		mov r3, #80												
 968 0090 83F31188 		msr basepri, r3											
 969 0094 BFF36F8F 		isb														
 970 0098 BFF34F8F 		dsb														
 971              	
 972              	@ 0 "" 2
 973              		.thumb
 974 009c BA61     		str	r2, [r7, #24]
 975 009e 7B61     		str	r3, [r7, #20]
 254:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
ARM GAS  /tmp/ccHyCAGW.s 			page 39


 260:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 976              		.loc 2 265 0
 977 00a0 BB69     		ldr	r3, [r7, #24]
 978              	.LBE95:
 979              	.LBE94:
 946:../../../FreeRTOS_9_0/Source/queue.c **** 
 947:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:../../../FreeRTOS_9_0/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:../../../FreeRTOS_9_0/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:../../../FreeRTOS_9_0/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:../../../FreeRTOS_9_0/Source/queue.c **** 	post). */
 952:../../../FreeRTOS_9_0/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 980              		.loc 1 952 0
 981 00a2 FB62     		str	r3, [r7, #44]
 953:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 954:../../../FreeRTOS_9_0/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 982              		.loc 1 954 0
 983 00a4 3B6B     		ldr	r3, [r7, #48]
 984 00a6 9A6B     		ldr	r2, [r3, #56]
 985 00a8 3B6B     		ldr	r3, [r7, #48]
 986 00aa DB6B     		ldr	r3, [r3, #60]
 987 00ac 9A42     		cmp	r2, r3
 988 00ae 02D3     		bcc	.L72
 989              		.loc 1 954 0 is_stmt 0 discriminator 1
 990 00b0 3B68     		ldr	r3, [r7]
 991 00b2 022B     		cmp	r3, #2
 992 00b4 2CD1     		bne	.L73
 993              	.L72:
 994              	.LBB96:
 955:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 956:../../../FreeRTOS_9_0/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 995              		.loc 1 956 0 is_stmt 1
 996 00b6 3B6B     		ldr	r3, [r7, #48]
 997 00b8 93F84530 		ldrb	r3, [r3, #69]
 998 00bc 87F82B30 		strb	r3, [r7, #43]
 957:../../../FreeRTOS_9_0/Source/queue.c **** 
 958:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:../../../FreeRTOS_9_0/Source/queue.c **** 
 960:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:../../../FreeRTOS_9_0/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:../../../FreeRTOS_9_0/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:../../../FreeRTOS_9_0/Source/queue.c **** 			called here even though the disinherit function does not check if
 964:../../../FreeRTOS_9_0/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 999              		.loc 1 965 0
 1000 00c0 386B     		ldr	r0, [r7, #48]
 1001 00c2 B968     		ldr	r1, [r7, #8]
 1002 00c4 3A68     		ldr	r2, [r7]
 1003 00c6 FFF7FEFF 		bl	prvCopyDataToQueue
 966:../../../FreeRTOS_9_0/Source/queue.c **** 
 967:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:../../../FreeRTOS_9_0/Source/queue.c **** 			be done when the queue is unlocked later. */
ARM GAS  /tmp/ccHyCAGW.s 			page 40


 969:../../../FreeRTOS_9_0/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1004              		.loc 1 969 0
 1005 00ca 97F92B30 		ldrsb	r3, [r7, #43]
 1006 00ce B3F1FF3F 		cmp	r3, #-1
 1007 00d2 12D1     		bne	.L74
 970:../../../FreeRTOS_9_0/Source/queue.c **** 			{
 971:../../../FreeRTOS_9_0/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:../../../FreeRTOS_9_0/Source/queue.c **** 				{
 973:../../../FreeRTOS_9_0/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 975:../../../FreeRTOS_9_0/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 977:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:../../../FreeRTOS_9_0/Source/queue.c **** 							to the queue set caused a higher priority task to
 979:../../../FreeRTOS_9_0/Source/queue.c **** 							unblock.  A context switch is required. */
 980:../../../FreeRTOS_9_0/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:../../../FreeRTOS_9_0/Source/queue.c **** 							{
 982:../../../FreeRTOS_9_0/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:../../../FreeRTOS_9_0/Source/queue.c **** 							}
 984:../../../FreeRTOS_9_0/Source/queue.c **** 							else
 985:../../../FreeRTOS_9_0/Source/queue.c **** 							{
 986:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:../../../FreeRTOS_9_0/Source/queue.c **** 							}
 988:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 989:../../../FreeRTOS_9_0/Source/queue.c **** 						else
 990:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 991:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:../../../FreeRTOS_9_0/Source/queue.c **** 						}
 993:../../../FreeRTOS_9_0/Source/queue.c **** 					}
 994:../../../FreeRTOS_9_0/Source/queue.c **** 					else
 995:../../../FreeRTOS_9_0/Source/queue.c **** 					{
 996:../../../FreeRTOS_9_0/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:../../../FreeRTOS_9_0/Source/queue.c **** 						{
 998:../../../FreeRTOS_9_0/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1000:../../../FreeRTOS_9_0/Source/queue.c **** 								/* The task waiting has a higher priority so
1001:../../../FreeRTOS_9_0/Source/queue.c **** 								record that a context switch is required. */
1002:../../../FreeRTOS_9_0/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:../../../FreeRTOS_9_0/Source/queue.c **** 								{
1004:../../../FreeRTOS_9_0/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:../../../FreeRTOS_9_0/Source/queue.c **** 								}
1006:../../../FreeRTOS_9_0/Source/queue.c **** 								else
1007:../../../FreeRTOS_9_0/Source/queue.c **** 								{
1008:../../../FreeRTOS_9_0/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:../../../FreeRTOS_9_0/Source/queue.c **** 								}
1010:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1011:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1012:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1013:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1015:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1016:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1017:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1018:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1020:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1021:../../../FreeRTOS_9_0/Source/queue.c **** 				}
ARM GAS  /tmp/ccHyCAGW.s 			page 41


1022:../../../FreeRTOS_9_0/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1024:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1008              		.loc 1 1024 0
 1009 00d4 3B6B     		ldr	r3, [r7, #48]
 1010 00d6 5B6A     		ldr	r3, [r3, #36]
 1011 00d8 002B     		cmp	r3, #0
 1012 00da 16D0     		beq	.L75
1025:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1026:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1013              		.loc 1 1026 0
 1014 00dc 3B6B     		ldr	r3, [r7, #48]
 1015 00de 2433     		adds	r3, r3, #36
 1016 00e0 1846     		mov	r0, r3
 1017 00e2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1018 00e6 0346     		mov	r3, r0
 1019 00e8 002B     		cmp	r3, #0
 1020 00ea 0ED0     		beq	.L75
1027:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1028:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:../../../FreeRTOS_9_0/Source/queue.c **** 							context	switch is required. */
1030:../../../FreeRTOS_9_0/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1021              		.loc 1 1030 0
 1022 00ec 7B68     		ldr	r3, [r7, #4]
 1023 00ee 002B     		cmp	r3, #0
 1024 00f0 0BD0     		beq	.L75
1031:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1032:../../../FreeRTOS_9_0/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1025              		.loc 1 1032 0
 1026 00f2 7B68     		ldr	r3, [r7, #4]
 1027 00f4 0122     		movs	r2, #1
 1028 00f6 1A60     		str	r2, [r3]
 1029 00f8 07E0     		b	.L75
 1030              	.L74:
1033:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1034:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1035:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1036:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1038:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1039:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1040:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1041:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1043:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1044:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1045:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1046:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1048:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1049:../../../FreeRTOS_9_0/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1051:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1052:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1053:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:../../../FreeRTOS_9_0/Source/queue.c **** 				knows that data was posted while it was locked. */
1055:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
ARM GAS  /tmp/ccHyCAGW.s 			page 42


 1031              		.loc 1 1055 0
 1032 00fa 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1033 00fe 0133     		adds	r3, r3, #1
 1034 0100 DBB2     		uxtb	r3, r3
 1035 0102 DAB2     		uxtb	r2, r3
 1036 0104 3B6B     		ldr	r3, [r7, #48]
 1037 0106 83F84520 		strb	r2, [r3, #69]
 1038              	.L75:
1056:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1057:../../../FreeRTOS_9_0/Source/queue.c **** 
1058:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 1039              		.loc 1 1058 0
 1040 010a 0123     		movs	r3, #1
 1041 010c 7B63     		str	r3, [r7, #52]
 1042              	.LBE96:
 955:../../../FreeRTOS_9_0/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1043              		.loc 1 955 0
 1044 010e 01E0     		b	.L76
 1045              	.L73:
1059:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1060:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1061:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1062:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1046              		.loc 1 1063 0
 1047 0110 0023     		movs	r3, #0
 1048 0112 7B63     		str	r3, [r7, #52]
 1049              	.L76:
 1050 0114 FB6A     		ldr	r3, [r7, #44]
 1051 0116 3B61     		str	r3, [r7, #16]
 1052              	.LBB97:
 1053              	.LBB98:
 266:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1054              		.loc 2 271 0
 1055 0118 3B69     		ldr	r3, [r7, #16]
 1056              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1057 011a 83F31188 			msr basepri, r3	
 1058              	@ 0 "" 2
 1059              		.thumb
 1060              	.LBE98:
 1061              	.LBE97:
1064:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1065:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1066:../../../FreeRTOS_9_0/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:../../../FreeRTOS_9_0/Source/queue.c **** 
1068:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 1062              		.loc 1 1068 0
 1063 011e 7B6B     		ldr	r3, [r7, #52]
1069:../../../FreeRTOS_9_0/Source/queue.c **** }
 1064              		.loc 1 1069 0
 1065 0120 1846     		mov	r0, r3
 1066 0122 3837     		adds	r7, r7, #56
ARM GAS  /tmp/ccHyCAGW.s 			page 43


 1067              	.LCFI33:
 1068              		.cfi_def_cfa_offset 8
 1069 0124 BD46     		mov	sp, r7
 1070              	.LCFI34:
 1071              		.cfi_def_cfa_register 13
 1072              		@ sp needed
 1073 0126 80BD     		pop	{r7, pc}
 1074              		.cfi_endproc
 1075              	.LFE11:
 1077              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1078              		.align	2
 1079              		.global	xQueueGiveFromISR
 1080              		.thumb
 1081              		.thumb_func
 1083              	xQueueGiveFromISR:
 1084              	.LFB12:
1070:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1071:../../../FreeRTOS_9_0/Source/queue.c **** 
1072:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:../../../FreeRTOS_9_0/Source/queue.c **** {
 1085              		.loc 1 1073 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 56
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089 0000 80B5     		push	{r7, lr}
 1090              	.LCFI35:
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 8EB0     		sub	sp, sp, #56
 1095              	.LCFI36:
 1096              		.cfi_def_cfa_offset 64
 1097 0004 00AF     		add	r7, sp, #0
 1098              	.LCFI37:
 1099              		.cfi_def_cfa_register 7
 1100 0006 7860     		str	r0, [r7, #4]
 1101 0008 3960     		str	r1, [r7]
1074:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1075:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1102              		.loc 1 1076 0
 1103 000a 7B68     		ldr	r3, [r7, #4]
 1104 000c 3B63     		str	r3, [r7, #48]
1077:../../../FreeRTOS_9_0/Source/queue.c **** 
1078:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:../../../FreeRTOS_9_0/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:../../../FreeRTOS_9_0/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:../../../FreeRTOS_9_0/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:../../../FreeRTOS_9_0/Source/queue.c **** 	post). */
1083:../../../FreeRTOS_9_0/Source/queue.c **** 
1084:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 1105              		.loc 1 1084 0
 1106 000e 3B6B     		ldr	r3, [r7, #48]
 1107 0010 002B     		cmp	r3, #0
 1108 0012 09D1     		bne	.L79
 1109              	.LBB99:
 1110              	.LBB100:
ARM GAS  /tmp/ccHyCAGW.s 			page 44


 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1111              		.loc 2 237 0 discriminator 1
 1112              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1113 0014 4FF05003 			mov r3, #80												
 1114 0018 83F31188 		msr basepri, r3											
 1115 001c BFF36F8F 		isb														
 1116 0020 BFF34F8F 		dsb														
 1117              	
 1118              	@ 0 "" 2
 1119              		.thumb
 1120 0024 3B62     		str	r3, [r7, #32]
 1121              	.L80:
 1122              	.LBE100:
 1123              	.LBE99:
 1124              		.loc 1 1084 0 discriminator 1
 1125 0026 FEE7     		b	.L80
 1126              	.L79:
1085:../../../FreeRTOS_9_0/Source/queue.c **** 
1086:../../../FreeRTOS_9_0/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:../../../FreeRTOS_9_0/Source/queue.c **** 	if the item size is not 0. */
1088:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 1127              		.loc 1 1088 0
 1128 0028 3B6B     		ldr	r3, [r7, #48]
 1129 002a 1B6C     		ldr	r3, [r3, #64]
 1130 002c 002B     		cmp	r3, #0
 1131 002e 09D0     		beq	.L81
 1132              	.LBB101:
 1133              	.LBB102:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1134              		.loc 2 237 0 discriminator 1
 1135              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1136 0030 4FF05003 			mov r3, #80												
 1137 0034 83F31188 		msr basepri, r3											
 1138 0038 BFF36F8F 		isb														
 1139 003c BFF34F8F 		dsb														
 1140              	
 1141              	@ 0 "" 2
 1142              		.thumb
 1143 0040 FB61     		str	r3, [r7, #28]
 1144              	.L82:
 1145              	.LBE102:
 1146              	.LBE101:
 1147              		.loc 1 1088 0 discriminator 2
 1148 0042 FEE7     		b	.L82
 1149              	.L81:
1089:../../../FreeRTOS_9_0/Source/queue.c **** 
1090:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:../../../FreeRTOS_9_0/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:../../../FreeRTOS_9_0/Source/queue.c **** 	interrupts, only tasks. */
1093:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
 1150              		.loc 1 1093 0
 1151 0044 3B6B     		ldr	r3, [r7, #48]
 1152 0046 1B68     		ldr	r3, [r3]
 1153 0048 002B     		cmp	r3, #0
 1154 004a 03D1     		bne	.L83
 1155              		.loc 1 1093 0 is_stmt 0 discriminator 2
 1156 004c 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccHyCAGW.s 			page 45


 1157 004e 5B68     		ldr	r3, [r3, #4]
 1158 0050 002B     		cmp	r3, #0
 1159 0052 01D1     		bne	.L84
 1160              	.L83:
 1161              		.loc 1 1093 0 discriminator 3
 1162 0054 0123     		movs	r3, #1
 1163 0056 00E0     		b	.L85
 1164              	.L84:
 1165              		.loc 1 1093 0 discriminator 4
 1166 0058 0023     		movs	r3, #0
 1167              	.L85:
 1168              		.loc 1 1093 0 discriminator 6
 1169 005a 002B     		cmp	r3, #0
 1170 005c 09D1     		bne	.L86
 1171              	.LBB103:
 1172              	.LBB104:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1173              		.loc 2 237 0 is_stmt 1 discriminator 7
 1174              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1175 005e 4FF05003 			mov r3, #80												
 1176 0062 83F31188 		msr basepri, r3											
 1177 0066 BFF36F8F 		isb														
 1178 006a BFF34F8F 		dsb														
 1179              	
 1180              	@ 0 "" 2
 1181              		.thumb
 1182 006e BB61     		str	r3, [r7, #24]
 1183              	.L87:
 1184              	.LBE104:
 1185              	.LBE103:
 1186              		.loc 1 1093 0 discriminator 3
 1187 0070 FEE7     		b	.L87
 1188              	.L86:
1094:../../../FreeRTOS_9_0/Source/queue.c **** 
1095:../../../FreeRTOS_9_0/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:../../../FreeRTOS_9_0/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:../../../FreeRTOS_9_0/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:../../../FreeRTOS_9_0/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:../../../FreeRTOS_9_0/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:../../../FreeRTOS_9_0/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:../../../FreeRTOS_9_0/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:../../../FreeRTOS_9_0/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:../../../FreeRTOS_9_0/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:../../../FreeRTOS_9_0/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:../../../FreeRTOS_9_0/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:../../../FreeRTOS_9_0/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:../../../FreeRTOS_9_0/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:../../../FreeRTOS_9_0/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:../../../FreeRTOS_9_0/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1189              		.loc 1 1109 0
 1190 0072 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1191              	.LBB105:
 1192              	.LBB106:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1193              		.loc 2 253 0
 1194              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1195 0076 EFF31182 			mrs r2, basepri											
ARM GAS  /tmp/ccHyCAGW.s 			page 46


 1196 007a 4FF05003 		mov r3, #80												
 1197 007e 83F31188 		msr basepri, r3											
 1198 0082 BFF36F8F 		isb														
 1199 0086 BFF34F8F 		dsb														
 1200              	
 1201              	@ 0 "" 2
 1202              		.thumb
 1203 008a 7A61     		str	r2, [r7, #20]
 1204 008c 3B61     		str	r3, [r7, #16]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1205              		.loc 2 265 0
 1206 008e 7B69     		ldr	r3, [r7, #20]
 1207              	.LBE106:
 1208              	.LBE105:
1110:../../../FreeRTOS_9_0/Source/queue.c **** 
1111:../../../FreeRTOS_9_0/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1209              		.loc 1 1111 0
 1210 0090 FB62     		str	r3, [r7, #44]
 1211              	.LBB107:
1112:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1113:../../../FreeRTOS_9_0/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1212              		.loc 1 1113 0
 1213 0092 3B6B     		ldr	r3, [r7, #48]
 1214 0094 9B6B     		ldr	r3, [r3, #56]
 1215 0096 BB62     		str	r3, [r7, #40]
1114:../../../FreeRTOS_9_0/Source/queue.c **** 
1115:../../../FreeRTOS_9_0/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:../../../FreeRTOS_9_0/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:../../../FreeRTOS_9_0/Source/queue.c **** 		space'. */
1118:../../../FreeRTOS_9_0/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
 1216              		.loc 1 1118 0
 1217 0098 3B6B     		ldr	r3, [r7, #48]
 1218 009a DA6B     		ldr	r2, [r3, #60]
 1219 009c BB6A     		ldr	r3, [r7, #40]
 1220 009e 9A42     		cmp	r2, r3
 1221 00a0 2BD9     		bls	.L89
 1222              	.LBB108:
1119:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1120:../../../FreeRTOS_9_0/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1223              		.loc 1 1120 0
 1224 00a2 3B6B     		ldr	r3, [r7, #48]
 1225 00a4 93F84530 		ldrb	r3, [r3, #69]
 1226 00a8 87F82730 		strb	r3, [r7, #39]
1121:../../../FreeRTOS_9_0/Source/queue.c **** 
1122:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:../../../FreeRTOS_9_0/Source/queue.c **** 
1124:../../../FreeRTOS_9_0/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:../../../FreeRTOS_9_0/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:../../../FreeRTOS_9_0/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:../../../FreeRTOS_9_0/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:../../../FreeRTOS_9_0/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:../../../FreeRTOS_9_0/Source/queue.c **** 			messages (semaphores) available. */
1130:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 1227              		.loc 1 1130 0
 1228 00ac BB6A     		ldr	r3, [r7, #40]
 1229 00ae 5A1C     		adds	r2, r3, #1
 1230 00b0 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccHyCAGW.s 			page 47


 1231 00b2 9A63     		str	r2, [r3, #56]
1131:../../../FreeRTOS_9_0/Source/queue.c **** 
1132:../../../FreeRTOS_9_0/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:../../../FreeRTOS_9_0/Source/queue.c **** 			be done when the queue is unlocked later. */
1134:../../../FreeRTOS_9_0/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1232              		.loc 1 1134 0
 1233 00b4 97F92730 		ldrsb	r3, [r7, #39]
 1234 00b8 B3F1FF3F 		cmp	r3, #-1
 1235 00bc 12D1     		bne	.L90
1135:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1136:../../../FreeRTOS_9_0/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1138:../../../FreeRTOS_9_0/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1140:../../../FreeRTOS_9_0/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1142:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:../../../FreeRTOS_9_0/Source/queue.c **** 							posting	to the queue set caused a higher priority
1144:../../../FreeRTOS_9_0/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1145:../../../FreeRTOS_9_0/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1147:../../../FreeRTOS_9_0/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1149:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1150:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1151:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1153:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1154:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1155:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1156:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1158:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1159:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1160:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1161:../../../FreeRTOS_9_0/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1163:../../../FreeRTOS_9_0/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1165:../../../FreeRTOS_9_0/Source/queue.c **** 								/* The task waiting has a higher priority so
1166:../../../FreeRTOS_9_0/Source/queue.c **** 								record that a context switch is required. */
1167:../../../FreeRTOS_9_0/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:../../../FreeRTOS_9_0/Source/queue.c **** 								{
1169:../../../FreeRTOS_9_0/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:../../../FreeRTOS_9_0/Source/queue.c **** 								}
1171:../../../FreeRTOS_9_0/Source/queue.c **** 								else
1172:../../../FreeRTOS_9_0/Source/queue.c **** 								{
1173:../../../FreeRTOS_9_0/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:../../../FreeRTOS_9_0/Source/queue.c **** 								}
1175:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1176:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1177:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1178:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1180:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1181:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1182:../../../FreeRTOS_9_0/Source/queue.c **** 						{
ARM GAS  /tmp/ccHyCAGW.s 			page 48


1183:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1185:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1186:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1187:../../../FreeRTOS_9_0/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1189:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1236              		.loc 1 1189 0
 1237 00be 3B6B     		ldr	r3, [r7, #48]
 1238 00c0 5B6A     		ldr	r3, [r3, #36]
 1239 00c2 002B     		cmp	r3, #0
 1240 00c4 16D0     		beq	.L91
1190:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1191:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1241              		.loc 1 1191 0
 1242 00c6 3B6B     		ldr	r3, [r7, #48]
 1243 00c8 2433     		adds	r3, r3, #36
 1244 00ca 1846     		mov	r0, r3
 1245 00cc FFF7FEFF 		bl	xTaskRemoveFromEventList
 1246 00d0 0346     		mov	r3, r0
 1247 00d2 002B     		cmp	r3, #0
 1248 00d4 0ED0     		beq	.L91
1192:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1193:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:../../../FreeRTOS_9_0/Source/queue.c **** 							context	switch is required. */
1195:../../../FreeRTOS_9_0/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1249              		.loc 1 1195 0
 1250 00d6 3B68     		ldr	r3, [r7]
 1251 00d8 002B     		cmp	r3, #0
 1252 00da 0BD0     		beq	.L91
1196:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1197:../../../FreeRTOS_9_0/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1253              		.loc 1 1197 0
 1254 00dc 3B68     		ldr	r3, [r7]
 1255 00de 0122     		movs	r2, #1
 1256 00e0 1A60     		str	r2, [r3]
 1257 00e2 07E0     		b	.L91
 1258              	.L90:
1198:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1199:../../../FreeRTOS_9_0/Source/queue.c **** 							else
1200:../../../FreeRTOS_9_0/Source/queue.c **** 							{
1201:../../../FreeRTOS_9_0/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:../../../FreeRTOS_9_0/Source/queue.c **** 							}
1203:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1204:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1205:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1206:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1208:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1209:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1210:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1211:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1213:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1214:../../../FreeRTOS_9_0/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1216:../../../FreeRTOS_9_0/Source/queue.c **** 			else
ARM GAS  /tmp/ccHyCAGW.s 			page 49


1217:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1218:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:../../../FreeRTOS_9_0/Source/queue.c **** 				knows that data was posted while it was locked. */
1220:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1259              		.loc 1 1220 0
 1260 00e4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1261 00e8 0133     		adds	r3, r3, #1
 1262 00ea DBB2     		uxtb	r3, r3
 1263 00ec DAB2     		uxtb	r2, r3
 1264 00ee 3B6B     		ldr	r3, [r7, #48]
 1265 00f0 83F84520 		strb	r2, [r3, #69]
 1266              	.L91:
1221:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1222:../../../FreeRTOS_9_0/Source/queue.c **** 
1223:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 1267              		.loc 1 1223 0
 1268 00f4 0123     		movs	r3, #1
 1269 00f6 7B63     		str	r3, [r7, #52]
 1270              	.LBE108:
 1271 00f8 01E0     		b	.L92
 1272              	.L89:
1224:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1225:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1226:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1227:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1273              		.loc 1 1228 0
 1274 00fa 0023     		movs	r3, #0
 1275 00fc 7B63     		str	r3, [r7, #52]
 1276              	.L92:
 1277 00fe FB6A     		ldr	r3, [r7, #44]
 1278 0100 FB60     		str	r3, [r7, #12]
 1279              	.LBE107:
 1280              	.LBB109:
 1281              	.LBB110:
 1282              		.loc 2 271 0
 1283 0102 FB68     		ldr	r3, [r7, #12]
 1284              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1285 0104 83F31188 			msr basepri, r3	
 1286              	@ 0 "" 2
 1287              		.thumb
 1288              	.LBE110:
 1289              	.LBE109:
1229:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1230:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1231:../../../FreeRTOS_9_0/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:../../../FreeRTOS_9_0/Source/queue.c **** 
1233:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 1290              		.loc 1 1233 0
 1291 0108 7B6B     		ldr	r3, [r7, #52]
1234:../../../FreeRTOS_9_0/Source/queue.c **** }
 1292              		.loc 1 1234 0
 1293 010a 1846     		mov	r0, r3
 1294 010c 3837     		adds	r7, r7, #56
 1295              	.LCFI38:
 1296              		.cfi_def_cfa_offset 8
 1297 010e BD46     		mov	sp, r7
ARM GAS  /tmp/ccHyCAGW.s 			page 50


 1298              	.LCFI39:
 1299              		.cfi_def_cfa_register 13
 1300              		@ sp needed
 1301 0110 80BD     		pop	{r7, pc}
 1302              		.cfi_endproc
 1303              	.LFE12:
 1305 0112 00BF     		.section	.text.xQueueGenericReceive,"ax",%progbits
 1306              		.align	2
 1307              		.global	xQueueGenericReceive
 1308              		.thumb
 1309              		.thumb_func
 1311              	xQueueGenericReceive:
 1312              	.LFB13:
1235:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1236:../../../FreeRTOS_9_0/Source/queue.c **** 
1237:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:../../../FreeRTOS_9_0/Source/queue.c **** {
 1313              		.loc 1 1238 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 56
 1316              		@ frame_needed = 1, uses_anonymous_args = 0
 1317 0000 80B5     		push	{r7, lr}
 1318              	.LCFI40:
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 7, -8
 1321              		.cfi_offset 14, -4
 1322 0002 8EB0     		sub	sp, sp, #56
 1323              	.LCFI41:
 1324              		.cfi_def_cfa_offset 64
 1325 0004 00AF     		add	r7, sp, #0
 1326              	.LCFI42:
 1327              		.cfi_def_cfa_register 7
 1328 0006 F860     		str	r0, [r7, #12]
 1329 0008 B960     		str	r1, [r7, #8]
 1330 000a 7A60     		str	r2, [r7, #4]
 1331 000c 3B60     		str	r3, [r7]
1239:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1332              		.loc 1 1239 0
 1333 000e 0023     		movs	r3, #0
 1334 0010 7B63     		str	r3, [r7, #52]
1240:../../../FreeRTOS_9_0/Source/queue.c **** TimeOut_t xTimeOut;
1241:../../../FreeRTOS_9_0/Source/queue.c **** int8_t *pcOriginalReadPosition;
1242:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1335              		.loc 1 1242 0
 1336 0012 FB68     		ldr	r3, [r7, #12]
 1337 0014 3B63     		str	r3, [r7, #48]
1243:../../../FreeRTOS_9_0/Source/queue.c **** 
1244:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 1338              		.loc 1 1244 0
 1339 0016 3B6B     		ldr	r3, [r7, #48]
 1340 0018 002B     		cmp	r3, #0
 1341 001a 09D1     		bne	.L95
 1342              	.LBB111:
 1343              	.LBB112:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1344              		.loc 2 237 0 discriminator 1
 1345              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccHyCAGW.s 			page 51


 1346 001c 4FF05003 			mov r3, #80												
 1347 0020 83F31188 		msr basepri, r3											
 1348 0024 BFF36F8F 		isb														
 1349 0028 BFF34F8F 		dsb														
 1350              	
 1351              	@ 0 "" 2
 1352              		.thumb
 1353 002c 7B62     		str	r3, [r7, #36]
 1354              	.L96:
 1355              	.LBE112:
 1356              	.LBE111:
 1357              		.loc 1 1244 0 discriminator 1
 1358 002e FEE7     		b	.L96
 1359              	.L95:
1245:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1360              		.loc 1 1245 0
 1361 0030 BB68     		ldr	r3, [r7, #8]
 1362 0032 002B     		cmp	r3, #0
 1363 0034 03D1     		bne	.L97
 1364              		.loc 1 1245 0 is_stmt 0 discriminator 2
 1365 0036 3B6B     		ldr	r3, [r7, #48]
 1366 0038 1B6C     		ldr	r3, [r3, #64]
 1367 003a 002B     		cmp	r3, #0
 1368 003c 01D1     		bne	.L98
 1369              	.L97:
 1370              		.loc 1 1245 0 discriminator 3
 1371 003e 0123     		movs	r3, #1
 1372 0040 00E0     		b	.L99
 1373              	.L98:
 1374              		.loc 1 1245 0 discriminator 4
 1375 0042 0023     		movs	r3, #0
 1376              	.L99:
 1377              		.loc 1 1245 0 discriminator 6
 1378 0044 002B     		cmp	r3, #0
 1379 0046 09D1     		bne	.L100
 1380              	.LBB113:
 1381              	.LBB114:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1382              		.loc 2 237 0 is_stmt 1 discriminator 7
 1383              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1384 0048 4FF05003 			mov r3, #80												
 1385 004c 83F31188 		msr basepri, r3											
 1386 0050 BFF36F8F 		isb														
 1387 0054 BFF34F8F 		dsb														
 1388              	
 1389              	@ 0 "" 2
 1390              		.thumb
 1391 0058 3B62     		str	r3, [r7, #32]
 1392              	.L101:
 1393              	.LBE114:
 1394              	.LBE113:
 1395              		.loc 1 1245 0 discriminator 2
 1396 005a FEE7     		b	.L101
 1397              	.L100:
1246:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1248:../../../FreeRTOS_9_0/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
ARM GAS  /tmp/ccHyCAGW.s 			page 52


 1398              		.loc 1 1248 0
 1399 005c FFF7FEFF 		bl	xTaskGetSchedulerState
 1400 0060 0346     		mov	r3, r0
 1401 0062 002B     		cmp	r3, #0
 1402 0064 02D1     		bne	.L102
 1403              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1404 0066 7B68     		ldr	r3, [r7, #4]
 1405 0068 002B     		cmp	r3, #0
 1406 006a 01D1     		bne	.L103
 1407              	.L102:
 1408              		.loc 1 1248 0 discriminator 3
 1409 006c 0123     		movs	r3, #1
 1410 006e 00E0     		b	.L104
 1411              	.L103:
 1412              		.loc 1 1248 0 discriminator 4
 1413 0070 0023     		movs	r3, #0
 1414              	.L104:
 1415              		.loc 1 1248 0 discriminator 6
 1416 0072 002B     		cmp	r3, #0
 1417 0074 09D1     		bne	.L105
 1418              	.LBB115:
 1419              	.LBB116:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1420              		.loc 2 237 0 is_stmt 1 discriminator 7
 1421              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1422 0076 4FF05003 			mov r3, #80												
 1423 007a 83F31188 		msr basepri, r3											
 1424 007e BFF36F8F 		isb														
 1425 0082 BFF34F8F 		dsb														
 1426              	
 1427              	@ 0 "" 2
 1428              		.thumb
 1429 0086 FB61     		str	r3, [r7, #28]
 1430              	.L106:
 1431              	.LBE116:
 1432              	.LBE115:
 1433              		.loc 1 1248 0 discriminator 3
 1434 0088 FEE7     		b	.L106
 1435              	.L105:
1249:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1250:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
1251:../../../FreeRTOS_9_0/Source/queue.c **** 
1252:../../../FreeRTOS_9_0/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:../../../FreeRTOS_9_0/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1254:../../../FreeRTOS_9_0/Source/queue.c **** 	of execution time efficiency. */
1255:../../../FreeRTOS_9_0/Source/queue.c **** 
1256:../../../FreeRTOS_9_0/Source/queue.c **** 	for( ;; )
1257:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1258:../../../FreeRTOS_9_0/Source/queue.c **** 		taskENTER_CRITICAL();
 1436              		.loc 1 1258 0
 1437 008a FFF7FEFF 		bl	vPortEnterCritical
 1438              	.LBB117:
1259:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1260:../../../FreeRTOS_9_0/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1439              		.loc 1 1260 0
 1440 008e 3B6B     		ldr	r3, [r7, #48]
 1441 0090 9B6B     		ldr	r3, [r3, #56]
ARM GAS  /tmp/ccHyCAGW.s 			page 53


 1442 0092 FB62     		str	r3, [r7, #44]
1261:../../../FreeRTOS_9_0/Source/queue.c **** 
1262:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:../../../FreeRTOS_9_0/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:../../../FreeRTOS_9_0/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1443              		.loc 1 1264 0
 1444 0094 FB6A     		ldr	r3, [r7, #44]
 1445 0096 002B     		cmp	r3, #0
 1446 0098 46D0     		beq	.L107
1265:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1266:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1267:../../../FreeRTOS_9_0/Source/queue.c **** 				peeked. */
1268:../../../FreeRTOS_9_0/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1447              		.loc 1 1268 0
 1448 009a 3B6B     		ldr	r3, [r7, #48]
 1449 009c DB68     		ldr	r3, [r3, #12]
 1450 009e BB62     		str	r3, [r7, #40]
1269:../../../FreeRTOS_9_0/Source/queue.c **** 
1270:../../../FreeRTOS_9_0/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1451              		.loc 1 1270 0
 1452 00a0 386B     		ldr	r0, [r7, #48]
 1453 00a2 B968     		ldr	r1, [r7, #8]
 1454 00a4 FFF7FEFF 		bl	prvCopyDataFromQueue
1271:../../../FreeRTOS_9_0/Source/queue.c **** 
1272:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
 1455              		.loc 1 1272 0
 1456 00a8 3B68     		ldr	r3, [r7]
 1457 00aa 002B     		cmp	r3, #0
 1458 00ac 21D1     		bne	.L108
1273:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1274:../../../FreeRTOS_9_0/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:../../../FreeRTOS_9_0/Source/queue.c **** 
1276:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1277:../../../FreeRTOS_9_0/Source/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1459              		.loc 1 1277 0
 1460 00ae FB6A     		ldr	r3, [r7, #44]
 1461 00b0 5A1E     		subs	r2, r3, #1
 1462 00b2 3B6B     		ldr	r3, [r7, #48]
 1463 00b4 9A63     		str	r2, [r3, #56]
1278:../../../FreeRTOS_9_0/Source/queue.c **** 
1279:../../../FreeRTOS_9_0/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1281:../../../FreeRTOS_9_0/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1464              		.loc 1 1281 0
 1465 00b6 3B6B     		ldr	r3, [r7, #48]
 1466 00b8 1B68     		ldr	r3, [r3]
 1467 00ba 002B     		cmp	r3, #0
 1468 00bc 04D1     		bne	.L109
1282:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1283:../../../FreeRTOS_9_0/Source/queue.c **** 							/* Record the information required to implement
1284:../../../FreeRTOS_9_0/Source/queue.c **** 							priority inheritance should it become necessary. */
1285:../../../FreeRTOS_9_0/Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
 1469              		.loc 1 1285 0
 1470 00be FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1471 00c2 0246     		mov	r2, r0
 1472 00c4 3B6B     		ldr	r3, [r7, #48]
 1473 00c6 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccHyCAGW.s 			page 54


 1474              	.L109:
1286:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1287:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1288:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1289:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1291:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1292:../../../FreeRTOS_9_0/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:../../../FreeRTOS_9_0/Source/queue.c **** 
1294:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1475              		.loc 1 1294 0
 1476 00c8 3B6B     		ldr	r3, [r7, #48]
 1477 00ca 1B69     		ldr	r3, [r3, #16]
 1478 00cc 002B     		cmp	r3, #0
 1479 00ce 27D0     		beq	.L110
1295:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1296:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1480              		.loc 1 1296 0
 1481 00d0 3B6B     		ldr	r3, [r7, #48]
 1482 00d2 1033     		adds	r3, r3, #16
 1483 00d4 1846     		mov	r0, r3
 1484 00d6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1485 00da 0346     		mov	r3, r0
 1486 00dc 002B     		cmp	r3, #0
 1487 00de 1FD0     		beq	.L110
1297:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1298:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1488              		.loc 1 1298 0
 1489 00e0 514B     		ldr	r3, .L122
 1490 00e2 4FF08052 		mov	r2, #268435456
 1491 00e6 1A60     		str	r2, [r3]
 1492              	@ 1298 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1493 00e8 BFF34F8F 		dsb
 1494              	@ 0 "" 2
 1495              	@ 1298 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1496 00ec BFF36F8F 		isb
 1497              	@ 0 "" 2
 1498              		.thumb
 1499 00f0 16E0     		b	.L110
 1500              	.L108:
1299:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1300:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1301:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1302:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1304:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1305:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1306:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1307:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1309:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1310:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1311:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1312:../../../FreeRTOS_9_0/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:../../../FreeRTOS_9_0/Source/queue.c **** 
1314:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The data is not being removed, so reset the read
1315:../../../FreeRTOS_9_0/Source/queue.c **** 					pointer. */
ARM GAS  /tmp/ccHyCAGW.s 			page 55


1316:../../../FreeRTOS_9_0/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1501              		.loc 1 1316 0
 1502 00f2 3B6B     		ldr	r3, [r7, #48]
 1503 00f4 BA6A     		ldr	r2, [r7, #40]
 1504 00f6 DA60     		str	r2, [r3, #12]
1317:../../../FreeRTOS_9_0/Source/queue.c **** 
1318:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:../../../FreeRTOS_9_0/Source/queue.c **** 					any other tasks waiting for the data. */
1320:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1505              		.loc 1 1320 0
 1506 00f8 3B6B     		ldr	r3, [r7, #48]
 1507 00fa 5B6A     		ldr	r3, [r3, #36]
 1508 00fc 002B     		cmp	r3, #0
 1509 00fe 0FD0     		beq	.L110
1321:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1322:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1510              		.loc 1 1322 0
 1511 0100 3B6B     		ldr	r3, [r7, #48]
 1512 0102 2433     		adds	r3, r3, #36
 1513 0104 1846     		mov	r0, r3
 1514 0106 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1515 010a 0346     		mov	r3, r0
 1516 010c 002B     		cmp	r3, #0
 1517 010e 07D0     		beq	.L110
1323:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1324:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:../../../FreeRTOS_9_0/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1518              		.loc 1 1325 0
 1519 0110 454B     		ldr	r3, .L122
 1520 0112 4FF08052 		mov	r2, #268435456
 1521 0116 1A60     		str	r2, [r3]
 1522              	@ 1325 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1523 0118 BFF34F8F 		dsb
 1524              	@ 0 "" 2
 1525              	@ 1325 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1526 011c BFF36F8F 		isb
 1527              	@ 0 "" 2
 1528              		.thumb
 1529              	.L110:
1326:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1327:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1328:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1329:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1331:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1332:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1333:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1334:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1336:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1337:../../../FreeRTOS_9_0/Source/queue.c **** 
1338:../../../FreeRTOS_9_0/Source/queue.c **** 				taskEXIT_CRITICAL();
 1530              		.loc 1 1338 0
 1531 0120 FFF7FEFF 		bl	vPortExitCritical
1339:../../../FreeRTOS_9_0/Source/queue.c **** 				return pdPASS;
 1532              		.loc 1 1339 0
 1533 0124 0123     		movs	r3, #1
ARM GAS  /tmp/ccHyCAGW.s 			page 56


 1534 0126 7AE0     		b	.L121
 1535              	.L107:
1340:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1341:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1342:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1343:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1536              		.loc 1 1343 0
 1537 0128 7B68     		ldr	r3, [r7, #4]
 1538 012a 002B     		cmp	r3, #0
 1539 012c 03D1     		bne	.L112
1344:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1345:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:../../../FreeRTOS_9_0/Source/queue.c **** 					the block time has expired) so leave now. */
1347:../../../FreeRTOS_9_0/Source/queue.c **** 					taskEXIT_CRITICAL();
 1540              		.loc 1 1347 0
 1541 012e FFF7FEFF 		bl	vPortExitCritical
1348:../../../FreeRTOS_9_0/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_EMPTY;
 1542              		.loc 1 1349 0
 1543 0132 0023     		movs	r3, #0
 1544 0134 73E0     		b	.L121
 1545              	.L112:
1350:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1351:../../../FreeRTOS_9_0/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1546              		.loc 1 1351 0
 1547 0136 7B6B     		ldr	r3, [r7, #52]
 1548 0138 002B     		cmp	r3, #0
 1549 013a 06D1     		bne	.L113
1352:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1353:../../../FreeRTOS_9_0/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1354:../../../FreeRTOS_9_0/Source/queue.c **** 					configure the timeout structure. */
1355:../../../FreeRTOS_9_0/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 1550              		.loc 1 1355 0
 1551 013c 07F11403 		add	r3, r7, #20
 1552 0140 1846     		mov	r0, r3
 1553 0142 FFF7FEFF 		bl	vTaskSetTimeOutState
1356:../../../FreeRTOS_9_0/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1554              		.loc 1 1356 0
 1555 0146 0123     		movs	r3, #1
 1556 0148 7B63     		str	r3, [r7, #52]
 1557              	.L113:
 1558              	.LBE117:
1357:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1358:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1359:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1360:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Entry time was already set. */
1361:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1363:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1364:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1365:../../../FreeRTOS_9_0/Source/queue.c **** 		taskEXIT_CRITICAL();
 1559              		.loc 1 1365 0
 1560 014a FFF7FEFF 		bl	vPortExitCritical
1366:../../../FreeRTOS_9_0/Source/queue.c **** 
1367:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:../../../FreeRTOS_9_0/Source/queue.c **** 		now the critical section has been exited. */
1369:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 57


1370:../../../FreeRTOS_9_0/Source/queue.c **** 		vTaskSuspendAll();
 1561              		.loc 1 1370 0
 1562 014e FFF7FEFF 		bl	vTaskSuspendAll
1371:../../../FreeRTOS_9_0/Source/queue.c **** 		prvLockQueue( pxQueue );
 1563              		.loc 1 1371 0
 1564 0152 FFF7FEFF 		bl	vPortEnterCritical
 1565 0156 3B6B     		ldr	r3, [r7, #48]
 1566 0158 93F84430 		ldrb	r3, [r3, #68]
 1567 015c DBB2     		uxtb	r3, r3
 1568 015e 5BB2     		sxtb	r3, r3
 1569 0160 B3F1FF3F 		cmp	r3, #-1
 1570 0164 03D1     		bne	.L114
 1571              		.loc 1 1371 0 is_stmt 0 discriminator 1
 1572 0166 3B6B     		ldr	r3, [r7, #48]
 1573 0168 0022     		movs	r2, #0
 1574 016a 83F84420 		strb	r2, [r3, #68]
 1575              	.L114:
 1576              		.loc 1 1371 0 discriminator 3
 1577 016e 3B6B     		ldr	r3, [r7, #48]
 1578 0170 93F84530 		ldrb	r3, [r3, #69]
 1579 0174 DBB2     		uxtb	r3, r3
 1580 0176 5BB2     		sxtb	r3, r3
 1581 0178 B3F1FF3F 		cmp	r3, #-1
 1582 017c 03D1     		bne	.L115
 1583              		.loc 1 1371 0 discriminator 4
 1584 017e 3B6B     		ldr	r3, [r7, #48]
 1585 0180 0022     		movs	r2, #0
 1586 0182 83F84520 		strb	r2, [r3, #69]
 1587              	.L115:
 1588              		.loc 1 1371 0 discriminator 6
 1589 0186 FFF7FEFF 		bl	vPortExitCritical
1372:../../../FreeRTOS_9_0/Source/queue.c **** 
1373:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1590              		.loc 1 1374 0 is_stmt 1 discriminator 6
 1591 018a 07F11402 		add	r2, r7, #20
 1592 018e 3B1D     		adds	r3, r7, #4
 1593 0190 1046     		mov	r0, r2
 1594 0192 1946     		mov	r1, r3
 1595 0194 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1596 0198 0346     		mov	r3, r0
 1597 019a 002B     		cmp	r3, #0
 1598 019c 31D1     		bne	.L116
1375:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1376:../../../FreeRTOS_9_0/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1599              		.loc 1 1376 0
 1600 019e 386B     		ldr	r0, [r7, #48]
 1601 01a0 FFF7FEFF 		bl	prvIsQueueEmpty
 1602 01a4 0346     		mov	r3, r0
 1603 01a6 002B     		cmp	r3, #0
 1604 01a8 25D0     		beq	.L117
1377:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1378:../../../FreeRTOS_9_0/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:../../../FreeRTOS_9_0/Source/queue.c **** 
1380:../../../FreeRTOS_9_0/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1382:../../../FreeRTOS_9_0/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
ARM GAS  /tmp/ccHyCAGW.s 			page 58


 1605              		.loc 1 1382 0
 1606 01aa 3B6B     		ldr	r3, [r7, #48]
 1607 01ac 1B68     		ldr	r3, [r3]
 1608 01ae 002B     		cmp	r3, #0
 1609 01b0 08D1     		bne	.L118
1383:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1384:../../../FreeRTOS_9_0/Source/queue.c **** 						taskENTER_CRITICAL();
 1610              		.loc 1 1384 0
 1611 01b2 FFF7FEFF 		bl	vPortEnterCritical
1385:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1386:../../../FreeRTOS_9_0/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1612              		.loc 1 1386 0
 1613 01b6 3B6B     		ldr	r3, [r7, #48]
 1614 01b8 5B68     		ldr	r3, [r3, #4]
 1615 01ba 1846     		mov	r0, r3
 1616 01bc FFF7FEFF 		bl	vTaskPriorityInherit
1387:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1388:../../../FreeRTOS_9_0/Source/queue.c **** 						taskEXIT_CRITICAL();
 1617              		.loc 1 1388 0
 1618 01c0 FFF7FEFF 		bl	vPortExitCritical
 1619              	.L118:
1389:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1390:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1391:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1392:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1394:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1395:../../../FreeRTOS_9_0/Source/queue.c **** 				#endif
1396:../../../FreeRTOS_9_0/Source/queue.c **** 
1397:../../../FreeRTOS_9_0/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1620              		.loc 1 1397 0
 1621 01c4 3B6B     		ldr	r3, [r7, #48]
 1622 01c6 03F12402 		add	r2, r3, #36
 1623 01ca 7B68     		ldr	r3, [r7, #4]
 1624 01cc 1046     		mov	r0, r2
 1625 01ce 1946     		mov	r1, r3
 1626 01d0 FFF7FEFF 		bl	vTaskPlaceOnEventList
1398:../../../FreeRTOS_9_0/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1627              		.loc 1 1398 0
 1628 01d4 386B     		ldr	r0, [r7, #48]
 1629 01d6 FFF7FEFF 		bl	prvUnlockQueue
1399:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1630              		.loc 1 1399 0
 1631 01da FFF7FEFF 		bl	xTaskResumeAll
 1632 01de 0346     		mov	r3, r0
 1633 01e0 002B     		cmp	r3, #0
 1634 01e2 1BD1     		bne	.L120
1400:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1401:../../../FreeRTOS_9_0/Source/queue.c **** 					portYIELD_WITHIN_API();
 1635              		.loc 1 1401 0
 1636 01e4 104B     		ldr	r3, .L122
 1637 01e6 4FF08052 		mov	r2, #268435456
 1638 01ea 1A60     		str	r2, [r3]
 1639              	@ 1401 "../../../FreeRTOS_9_0/Source/queue.c" 1
 1640 01ec BFF34F8F 		dsb
 1641              	@ 0 "" 2
 1642              	@ 1401 "../../../FreeRTOS_9_0/Source/queue.c" 1
ARM GAS  /tmp/ccHyCAGW.s 			page 59


 1643 01f0 BFF36F8F 		isb
 1644              	@ 0 "" 2
 1645              		.thumb
 1646 01f4 12E0     		b	.L120
 1647              	.L117:
1402:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1403:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1404:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1405:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1407:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1408:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1409:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1410:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Try again. */
1411:../../../FreeRTOS_9_0/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1648              		.loc 1 1411 0
 1649 01f6 386B     		ldr	r0, [r7, #48]
 1650 01f8 FFF7FEFF 		bl	prvUnlockQueue
1412:../../../FreeRTOS_9_0/Source/queue.c **** 				( void ) xTaskResumeAll();
 1651              		.loc 1 1412 0
 1652 01fc FFF7FEFF 		bl	xTaskResumeAll
 1653 0200 43E7     		b	.L105
 1654              	.L116:
1413:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1414:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1415:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1416:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1417:../../../FreeRTOS_9_0/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1655              		.loc 1 1417 0
 1656 0202 386B     		ldr	r0, [r7, #48]
 1657 0204 FFF7FEFF 		bl	prvUnlockQueue
1418:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) xTaskResumeAll();
 1658              		.loc 1 1418 0
 1659 0208 FFF7FEFF 		bl	xTaskResumeAll
1419:../../../FreeRTOS_9_0/Source/queue.c **** 
1420:../../../FreeRTOS_9_0/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1660              		.loc 1 1420 0
 1661 020c 386B     		ldr	r0, [r7, #48]
 1662 020e FFF7FEFF 		bl	prvIsQueueEmpty
 1663 0212 0346     		mov	r3, r0
 1664 0214 002B     		cmp	r3, #0
 1665 0216 01D0     		beq	.L120
1421:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1422:../../../FreeRTOS_9_0/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:../../../FreeRTOS_9_0/Source/queue.c **** 				return errQUEUE_EMPTY;
 1666              		.loc 1 1423 0
 1667 0218 0023     		movs	r3, #0
 1668 021a 00E0     		b	.L121
 1669              	.L120:
1424:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1425:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1426:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1427:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1429:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1430:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 1670              		.loc 1 1430 0 discriminator 6
ARM GAS  /tmp/ccHyCAGW.s 			page 60


 1671 021c 35E7     		b	.L105
 1672              	.L121:
1431:../../../FreeRTOS_9_0/Source/queue.c **** }
 1673              		.loc 1 1431 0 discriminator 7
 1674 021e 1846     		mov	r0, r3
 1675 0220 3837     		adds	r7, r7, #56
 1676              	.LCFI43:
 1677              		.cfi_def_cfa_offset 8
 1678 0222 BD46     		mov	sp, r7
 1679              	.LCFI44:
 1680              		.cfi_def_cfa_register 13
 1681              		@ sp needed
 1682 0224 80BD     		pop	{r7, pc}
 1683              	.L123:
 1684 0226 00BF     		.align	2
 1685              	.L122:
 1686 0228 04ED00E0 		.word	-536810236
 1687              		.cfi_endproc
 1688              	.LFE13:
 1690              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1691              		.align	2
 1692              		.global	xQueueReceiveFromISR
 1693              		.thumb
 1694              		.thumb_func
 1696              	xQueueReceiveFromISR:
 1697              	.LFB14:
1432:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1433:../../../FreeRTOS_9_0/Source/queue.c **** 
1434:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:../../../FreeRTOS_9_0/Source/queue.c **** {
 1698              		.loc 1 1435 0
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 56
 1701              		@ frame_needed = 1, uses_anonymous_args = 0
 1702 0000 80B5     		push	{r7, lr}
 1703              	.LCFI45:
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 7, -8
 1706              		.cfi_offset 14, -4
 1707 0002 8EB0     		sub	sp, sp, #56
 1708              	.LCFI46:
 1709              		.cfi_def_cfa_offset 64
 1710 0004 00AF     		add	r7, sp, #0
 1711              	.LCFI47:
 1712              		.cfi_def_cfa_register 7
 1713 0006 F860     		str	r0, [r7, #12]
 1714 0008 B960     		str	r1, [r7, #8]
 1715 000a 7A60     		str	r2, [r7, #4]
1436:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1437:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1716              		.loc 1 1438 0
 1717 000c FB68     		ldr	r3, [r7, #12]
 1718 000e 3B63     		str	r3, [r7, #48]
1439:../../../FreeRTOS_9_0/Source/queue.c **** 
1440:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 1719              		.loc 1 1440 0
ARM GAS  /tmp/ccHyCAGW.s 			page 61


 1720 0010 3B6B     		ldr	r3, [r7, #48]
 1721 0012 002B     		cmp	r3, #0
 1722 0014 09D1     		bne	.L125
 1723              	.LBB118:
 1724              	.LBB119:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1725              		.loc 2 237 0 discriminator 1
 1726              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1727 0016 4FF05003 			mov r3, #80												
 1728 001a 83F31188 		msr basepri, r3											
 1729 001e BFF36F8F 		isb														
 1730 0022 BFF34F8F 		dsb														
 1731              	
 1732              	@ 0 "" 2
 1733              		.thumb
 1734 0026 3B62     		str	r3, [r7, #32]
 1735              	.L126:
 1736              	.LBE119:
 1737              	.LBE118:
 1738              		.loc 1 1440 0 discriminator 1
 1739 0028 FEE7     		b	.L126
 1740              	.L125:
1441:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1741              		.loc 1 1441 0
 1742 002a BB68     		ldr	r3, [r7, #8]
 1743 002c 002B     		cmp	r3, #0
 1744 002e 03D1     		bne	.L127
 1745              		.loc 1 1441 0 is_stmt 0 discriminator 2
 1746 0030 3B6B     		ldr	r3, [r7, #48]
 1747 0032 1B6C     		ldr	r3, [r3, #64]
 1748 0034 002B     		cmp	r3, #0
 1749 0036 01D1     		bne	.L128
 1750              	.L127:
 1751              		.loc 1 1441 0 discriminator 3
 1752 0038 0123     		movs	r3, #1
 1753 003a 00E0     		b	.L129
 1754              	.L128:
 1755              		.loc 1 1441 0 discriminator 4
 1756 003c 0023     		movs	r3, #0
 1757              	.L129:
 1758              		.loc 1 1441 0 discriminator 6
 1759 003e 002B     		cmp	r3, #0
 1760 0040 09D1     		bne	.L130
 1761              	.LBB120:
 1762              	.LBB121:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1763              		.loc 2 237 0 is_stmt 1 discriminator 7
 1764              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1765 0042 4FF05003 			mov r3, #80												
 1766 0046 83F31188 		msr basepri, r3											
 1767 004a BFF36F8F 		isb														
 1768 004e BFF34F8F 		dsb														
 1769              	
 1770              	@ 0 "" 2
 1771              		.thumb
 1772 0052 FB61     		str	r3, [r7, #28]
 1773              	.L131:
ARM GAS  /tmp/ccHyCAGW.s 			page 62


 1774              	.LBE121:
 1775              	.LBE120:
 1776              		.loc 1 1441 0 discriminator 2
 1777 0054 FEE7     		b	.L131
 1778              	.L130:
1442:../../../FreeRTOS_9_0/Source/queue.c **** 
1443:../../../FreeRTOS_9_0/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:../../../FreeRTOS_9_0/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:../../../FreeRTOS_9_0/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:../../../FreeRTOS_9_0/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:../../../FreeRTOS_9_0/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:../../../FreeRTOS_9_0/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:../../../FreeRTOS_9_0/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:../../../FreeRTOS_9_0/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:../../../FreeRTOS_9_0/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:../../../FreeRTOS_9_0/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:../../../FreeRTOS_9_0/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:../../../FreeRTOS_9_0/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:../../../FreeRTOS_9_0/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:../../../FreeRTOS_9_0/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:../../../FreeRTOS_9_0/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1779              		.loc 1 1457 0
 1780 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1781              	.LBB122:
 1782              	.LBB123:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1783              		.loc 2 253 0
 1784              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1785 005a EFF31182 			mrs r2, basepri											
 1786 005e 4FF05003 		mov r3, #80												
 1787 0062 83F31188 		msr basepri, r3											
 1788 0066 BFF36F8F 		isb														
 1789 006a BFF34F8F 		dsb														
 1790              	
 1791              	@ 0 "" 2
 1792              		.thumb
 1793 006e BA61     		str	r2, [r7, #24]
 1794 0070 7B61     		str	r3, [r7, #20]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1795              		.loc 2 265 0
 1796 0072 BB69     		ldr	r3, [r7, #24]
 1797              	.LBE123:
 1798              	.LBE122:
1458:../../../FreeRTOS_9_0/Source/queue.c **** 
1459:../../../FreeRTOS_9_0/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1799              		.loc 1 1459 0
 1800 0074 FB62     		str	r3, [r7, #44]
 1801              	.LBB124:
1460:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1461:../../../FreeRTOS_9_0/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1802              		.loc 1 1461 0
 1803 0076 3B6B     		ldr	r3, [r7, #48]
 1804 0078 9B6B     		ldr	r3, [r3, #56]
 1805 007a BB62     		str	r3, [r7, #40]
1462:../../../FreeRTOS_9_0/Source/queue.c **** 
1463:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:../../../FreeRTOS_9_0/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
ARM GAS  /tmp/ccHyCAGW.s 			page 63


 1806              		.loc 1 1464 0
 1807 007c BB6A     		ldr	r3, [r7, #40]
 1808 007e 002B     		cmp	r3, #0
 1809 0080 2FD0     		beq	.L133
 1810              	.LBB125:
1465:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1466:../../../FreeRTOS_9_0/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
 1811              		.loc 1 1466 0
 1812 0082 3B6B     		ldr	r3, [r7, #48]
 1813 0084 93F84430 		ldrb	r3, [r3, #68]
 1814 0088 87F82730 		strb	r3, [r7, #39]
1467:../../../FreeRTOS_9_0/Source/queue.c **** 
1468:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:../../../FreeRTOS_9_0/Source/queue.c **** 
1470:../../../FreeRTOS_9_0/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1815              		.loc 1 1470 0
 1816 008c 386B     		ldr	r0, [r7, #48]
 1817 008e B968     		ldr	r1, [r7, #8]
 1818 0090 FFF7FEFF 		bl	prvCopyDataFromQueue
1471:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1819              		.loc 1 1471 0
 1820 0094 BB6A     		ldr	r3, [r7, #40]
 1821 0096 5A1E     		subs	r2, r3, #1
 1822 0098 3B6B     		ldr	r3, [r7, #48]
 1823 009a 9A63     		str	r2, [r3, #56]
1472:../../../FreeRTOS_9_0/Source/queue.c **** 
1473:../../../FreeRTOS_9_0/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:../../../FreeRTOS_9_0/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:../../../FreeRTOS_9_0/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1476:../../../FreeRTOS_9_0/Source/queue.c **** 			locked. */
1477:../../../FreeRTOS_9_0/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
 1824              		.loc 1 1477 0
 1825 009c 97F92730 		ldrsb	r3, [r7, #39]
 1826 00a0 B3F1FF3F 		cmp	r3, #-1
 1827 00a4 12D1     		bne	.L134
1478:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1479:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1828              		.loc 1 1479 0
 1829 00a6 3B6B     		ldr	r3, [r7, #48]
 1830 00a8 1B69     		ldr	r3, [r3, #16]
 1831 00aa 002B     		cmp	r3, #0
 1832 00ac 16D0     		beq	.L135
1480:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1481:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1833              		.loc 1 1481 0
 1834 00ae 3B6B     		ldr	r3, [r7, #48]
 1835 00b0 1033     		adds	r3, r3, #16
 1836 00b2 1846     		mov	r0, r3
 1837 00b4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1838 00b8 0346     		mov	r3, r0
 1839 00ba 002B     		cmp	r3, #0
 1840 00bc 0ED0     		beq	.L135
1482:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1483:../../../FreeRTOS_9_0/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1484:../../../FreeRTOS_9_0/Source/queue.c **** 						force a context switch. */
1485:../../../FreeRTOS_9_0/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1841              		.loc 1 1485 0
ARM GAS  /tmp/ccHyCAGW.s 			page 64


 1842 00be 7B68     		ldr	r3, [r7, #4]
 1843 00c0 002B     		cmp	r3, #0
 1844 00c2 0BD0     		beq	.L135
1486:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1487:../../../FreeRTOS_9_0/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1845              		.loc 1 1487 0
 1846 00c4 7B68     		ldr	r3, [r7, #4]
 1847 00c6 0122     		movs	r2, #1
 1848 00c8 1A60     		str	r2, [r3]
 1849 00ca 07E0     		b	.L135
 1850              	.L134:
1488:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1489:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1490:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1491:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1493:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1494:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1495:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1496:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1498:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1499:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1500:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1501:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1503:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1504:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1505:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1506:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:../../../FreeRTOS_9_0/Source/queue.c **** 				knows that data was removed while it was locked. */
1508:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 1851              		.loc 1 1508 0
 1852 00cc 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1853 00d0 0133     		adds	r3, r3, #1
 1854 00d2 DBB2     		uxtb	r3, r3
 1855 00d4 DAB2     		uxtb	r2, r3
 1856 00d6 3B6B     		ldr	r3, [r7, #48]
 1857 00d8 83F84420 		strb	r2, [r3, #68]
 1858              	.L135:
1509:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1510:../../../FreeRTOS_9_0/Source/queue.c **** 
1511:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 1859              		.loc 1 1511 0
 1860 00dc 0123     		movs	r3, #1
 1861 00de 7B63     		str	r3, [r7, #52]
 1862              	.LBE125:
 1863 00e0 01E0     		b	.L136
 1864              	.L133:
1512:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1513:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1514:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1515:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFAIL;
 1865              		.loc 1 1515 0
 1866 00e2 0023     		movs	r3, #0
 1867 00e4 7B63     		str	r3, [r7, #52]
 1868              	.L136:
ARM GAS  /tmp/ccHyCAGW.s 			page 65


 1869 00e6 FB6A     		ldr	r3, [r7, #44]
 1870 00e8 3B61     		str	r3, [r7, #16]
 1871              	.LBE124:
 1872              	.LBB126:
 1873              	.LBB127:
 1874              		.loc 2 271 0
 1875 00ea 3B69     		ldr	r3, [r7, #16]
 1876              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1877 00ec 83F31188 			msr basepri, r3	
 1878              	@ 0 "" 2
 1879              		.thumb
 1880              	.LBE127:
 1881              	.LBE126:
1516:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1518:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1519:../../../FreeRTOS_9_0/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:../../../FreeRTOS_9_0/Source/queue.c **** 
1521:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 1882              		.loc 1 1521 0
 1883 00f0 7B6B     		ldr	r3, [r7, #52]
1522:../../../FreeRTOS_9_0/Source/queue.c **** }
 1884              		.loc 1 1522 0
 1885 00f2 1846     		mov	r0, r3
 1886 00f4 3837     		adds	r7, r7, #56
 1887              	.LCFI48:
 1888              		.cfi_def_cfa_offset 8
 1889 00f6 BD46     		mov	sp, r7
 1890              	.LCFI49:
 1891              		.cfi_def_cfa_register 13
 1892              		@ sp needed
 1893 00f8 80BD     		pop	{r7, pc}
 1894              		.cfi_endproc
 1895              	.LFE14:
 1897 00fa 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1898              		.align	2
 1899              		.global	xQueuePeekFromISR
 1900              		.thumb
 1901              		.thumb_func
 1903              	xQueuePeekFromISR:
 1904              	.LFB15:
1523:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1524:../../../FreeRTOS_9_0/Source/queue.c **** 
1525:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:../../../FreeRTOS_9_0/Source/queue.c **** {
 1905              		.loc 1 1526 0
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 48
 1908              		@ frame_needed = 1, uses_anonymous_args = 0
 1909 0000 80B5     		push	{r7, lr}
 1910              	.LCFI50:
 1911              		.cfi_def_cfa_offset 8
 1912              		.cfi_offset 7, -8
 1913              		.cfi_offset 14, -4
 1914 0002 8CB0     		sub	sp, sp, #48
 1915              	.LCFI51:
 1916              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccHyCAGW.s 			page 66


 1917 0004 00AF     		add	r7, sp, #0
 1918              	.LCFI52:
 1919              		.cfi_def_cfa_register 7
 1920 0006 7860     		str	r0, [r7, #4]
 1921 0008 3960     		str	r1, [r7]
1527:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1528:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:../../../FreeRTOS_9_0/Source/queue.c **** int8_t *pcOriginalReadPosition;
1530:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1922              		.loc 1 1530 0
 1923 000a 7B68     		ldr	r3, [r7, #4]
 1924 000c BB62     		str	r3, [r7, #40]
1531:../../../FreeRTOS_9_0/Source/queue.c **** 
1532:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 1925              		.loc 1 1532 0
 1926 000e BB6A     		ldr	r3, [r7, #40]
 1927 0010 002B     		cmp	r3, #0
 1928 0012 09D1     		bne	.L139
 1929              	.LBB128:
 1930              	.LBB129:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1931              		.loc 2 237 0 discriminator 1
 1932              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1933 0014 4FF05003 			mov r3, #80												
 1934 0018 83F31188 		msr basepri, r3											
 1935 001c BFF36F8F 		isb														
 1936 0020 BFF34F8F 		dsb														
 1937              	
 1938              	@ 0 "" 2
 1939              		.thumb
 1940 0024 FB61     		str	r3, [r7, #28]
 1941              	.L140:
 1942              	.LBE129:
 1943              	.LBE128:
 1944              		.loc 1 1532 0 discriminator 1
 1945 0026 FEE7     		b	.L140
 1946              	.L139:
1533:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1947              		.loc 1 1533 0
 1948 0028 3B68     		ldr	r3, [r7]
 1949 002a 002B     		cmp	r3, #0
 1950 002c 03D1     		bne	.L141
 1951              		.loc 1 1533 0 is_stmt 0 discriminator 2
 1952 002e BB6A     		ldr	r3, [r7, #40]
 1953 0030 1B6C     		ldr	r3, [r3, #64]
 1954 0032 002B     		cmp	r3, #0
 1955 0034 01D1     		bne	.L142
 1956              	.L141:
 1957              		.loc 1 1533 0 discriminator 3
 1958 0036 0123     		movs	r3, #1
 1959 0038 00E0     		b	.L143
 1960              	.L142:
 1961              		.loc 1 1533 0 discriminator 4
 1962 003a 0023     		movs	r3, #0
 1963              	.L143:
 1964              		.loc 1 1533 0 discriminator 6
 1965 003c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccHyCAGW.s 			page 67


 1966 003e 09D1     		bne	.L144
 1967              	.LBB130:
 1968              	.LBB131:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1969              		.loc 2 237 0 is_stmt 1 discriminator 7
 1970              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1971 0040 4FF05003 			mov r3, #80												
 1972 0044 83F31188 		msr basepri, r3											
 1973 0048 BFF36F8F 		isb														
 1974 004c BFF34F8F 		dsb														
 1975              	
 1976              	@ 0 "" 2
 1977              		.thumb
 1978 0050 BB61     		str	r3, [r7, #24]
 1979              	.L145:
 1980              	.LBE131:
 1981              	.LBE130:
 1982              		.loc 1 1533 0 discriminator 2
 1983 0052 FEE7     		b	.L145
 1984              	.L144:
1534:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 1985              		.loc 1 1534 0
 1986 0054 BB6A     		ldr	r3, [r7, #40]
 1987 0056 1B6C     		ldr	r3, [r3, #64]
 1988 0058 002B     		cmp	r3, #0
 1989 005a 09D1     		bne	.L146
 1990              	.LBB132:
 1991              	.LBB133:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1992              		.loc 2 237 0 discriminator 1
 1993              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1994 005c 4FF05003 			mov r3, #80												
 1995 0060 83F31188 		msr basepri, r3											
 1996 0064 BFF36F8F 		isb														
 1997 0068 BFF34F8F 		dsb														
 1998              	
 1999              	@ 0 "" 2
 2000              		.thumb
 2001 006c 7B61     		str	r3, [r7, #20]
 2002              	.L147:
 2003              	.LBE133:
 2004              	.LBE132:
 2005              		.loc 1 1534 0 discriminator 3
 2006 006e FEE7     		b	.L147
 2007              	.L146:
1535:../../../FreeRTOS_9_0/Source/queue.c **** 
1536:../../../FreeRTOS_9_0/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:../../../FreeRTOS_9_0/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:../../../FreeRTOS_9_0/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:../../../FreeRTOS_9_0/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:../../../FreeRTOS_9_0/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:../../../FreeRTOS_9_0/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:../../../FreeRTOS_9_0/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:../../../FreeRTOS_9_0/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:../../../FreeRTOS_9_0/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:../../../FreeRTOS_9_0/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:../../../FreeRTOS_9_0/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  /tmp/ccHyCAGW.s 			page 68


1547:../../../FreeRTOS_9_0/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:../../../FreeRTOS_9_0/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:../../../FreeRTOS_9_0/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:../../../FreeRTOS_9_0/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2008              		.loc 1 1550 0
 2009 0070 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2010              	.LBB134:
 2011              	.LBB135:
 253:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2012              		.loc 2 253 0
 2013              	@ 253 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2014 0074 EFF31182 			mrs r2, basepri											
 2015 0078 4FF05003 		mov r3, #80												
 2016 007c 83F31188 		msr basepri, r3											
 2017 0080 BFF36F8F 		isb														
 2018 0084 BFF34F8F 		dsb														
 2019              	
 2020              	@ 0 "" 2
 2021              		.thumb
 2022 0088 3A61     		str	r2, [r7, #16]
 2023 008a FB60     		str	r3, [r7, #12]
 265:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2024              		.loc 2 265 0
 2025 008c 3B69     		ldr	r3, [r7, #16]
 2026              	.LBE135:
 2027              	.LBE134:
1551:../../../FreeRTOS_9_0/Source/queue.c **** 
1552:../../../FreeRTOS_9_0/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2028              		.loc 1 1552 0
 2029 008e 7B62     		str	r3, [r7, #36]
1553:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1554:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 2030              		.loc 1 1555 0
 2031 0090 BB6A     		ldr	r3, [r7, #40]
 2032 0092 9B6B     		ldr	r3, [r3, #56]
 2033 0094 002B     		cmp	r3, #0
 2034 0096 0CD0     		beq	.L149
1556:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1557:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:../../../FreeRTOS_9_0/Source/queue.c **** 
1559:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:../../../FreeRTOS_9_0/Source/queue.c **** 			actually being removed from the queue. */
1561:../../../FreeRTOS_9_0/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 2035              		.loc 1 1561 0
 2036 0098 BB6A     		ldr	r3, [r7, #40]
 2037 009a DB68     		ldr	r3, [r3, #12]
 2038 009c 3B62     		str	r3, [r7, #32]
1562:../../../FreeRTOS_9_0/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2039              		.loc 1 1562 0
 2040 009e B86A     		ldr	r0, [r7, #40]
 2041 00a0 3968     		ldr	r1, [r7]
 2042 00a2 FFF7FEFF 		bl	prvCopyDataFromQueue
1563:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2043              		.loc 1 1563 0
 2044 00a6 BB6A     		ldr	r3, [r7, #40]
 2045 00a8 3A6A     		ldr	r2, [r7, #32]
ARM GAS  /tmp/ccHyCAGW.s 			page 69


 2046 00aa DA60     		str	r2, [r3, #12]
1564:../../../FreeRTOS_9_0/Source/queue.c **** 
1565:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
 2047              		.loc 1 1565 0
 2048 00ac 0123     		movs	r3, #1
 2049 00ae FB62     		str	r3, [r7, #44]
 2050 00b0 01E0     		b	.L150
 2051              	.L149:
1566:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1567:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1568:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1569:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFAIL;
 2052              		.loc 1 1569 0
 2053 00b2 0023     		movs	r3, #0
 2054 00b4 FB62     		str	r3, [r7, #44]
 2055              	.L150:
 2056 00b6 7B6A     		ldr	r3, [r7, #36]
 2057 00b8 BB60     		str	r3, [r7, #8]
 2058              	.LBB136:
 2059              	.LBB137:
 2060              		.loc 2 271 0
 2061 00ba BB68     		ldr	r3, [r7, #8]
 2062              	@ 271 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2063 00bc 83F31188 			msr basepri, r3	
 2064              	@ 0 "" 2
 2065              		.thumb
 2066              	.LBE137:
 2067              	.LBE136:
1570:../../../FreeRTOS_9_0/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1572:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1573:../../../FreeRTOS_9_0/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:../../../FreeRTOS_9_0/Source/queue.c **** 
1575:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 2068              		.loc 1 1575 0
 2069 00c0 FB6A     		ldr	r3, [r7, #44]
1576:../../../FreeRTOS_9_0/Source/queue.c **** }
 2070              		.loc 1 1576 0
 2071 00c2 1846     		mov	r0, r3
 2072 00c4 3037     		adds	r7, r7, #48
 2073              	.LCFI53:
 2074              		.cfi_def_cfa_offset 8
 2075 00c6 BD46     		mov	sp, r7
 2076              	.LCFI54:
 2077              		.cfi_def_cfa_register 13
 2078              		@ sp needed
 2079 00c8 80BD     		pop	{r7, pc}
 2080              		.cfi_endproc
 2081              	.LFE15:
 2083 00ca 00BF     		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2084              		.align	2
 2085              		.global	uxQueueMessagesWaiting
 2086              		.thumb
 2087              		.thumb_func
 2089              	uxQueueMessagesWaiting:
 2090              	.LFB16:
1577:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccHyCAGW.s 			page 70


1578:../../../FreeRTOS_9_0/Source/queue.c **** 
1579:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:../../../FreeRTOS_9_0/Source/queue.c **** {
 2091              		.loc 1 1580 0
 2092              		.cfi_startproc
 2093              		@ args = 0, pretend = 0, frame = 16
 2094              		@ frame_needed = 1, uses_anonymous_args = 0
 2095 0000 80B5     		push	{r7, lr}
 2096              	.LCFI55:
 2097              		.cfi_def_cfa_offset 8
 2098              		.cfi_offset 7, -8
 2099              		.cfi_offset 14, -4
 2100 0002 84B0     		sub	sp, sp, #16
 2101              	.LCFI56:
 2102              		.cfi_def_cfa_offset 24
 2103 0004 00AF     		add	r7, sp, #0
 2104              	.LCFI57:
 2105              		.cfi_def_cfa_register 7
 2106 0006 7860     		str	r0, [r7, #4]
1581:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxReturn;
1582:../../../FreeRTOS_9_0/Source/queue.c **** 
1583:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( xQueue );
 2107              		.loc 1 1583 0
 2108 0008 7B68     		ldr	r3, [r7, #4]
 2109 000a 002B     		cmp	r3, #0
 2110 000c 09D1     		bne	.L153
 2111              	.LBB138:
 2112              	.LBB139:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2113              		.loc 2 237 0 discriminator 1
 2114              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2115 000e 4FF05003 			mov r3, #80												
 2116 0012 83F31188 		msr basepri, r3											
 2117 0016 BFF36F8F 		isb														
 2118 001a BFF34F8F 		dsb														
 2119              	
 2120              	@ 0 "" 2
 2121              		.thumb
 2122 001e BB60     		str	r3, [r7, #8]
 2123              	.L154:
 2124              	.LBE139:
 2125              	.LBE138:
 2126              		.loc 1 1583 0 discriminator 1
 2127 0020 FEE7     		b	.L154
 2128              	.L153:
1584:../../../FreeRTOS_9_0/Source/queue.c **** 
1585:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 2129              		.loc 1 1585 0
 2130 0022 FFF7FEFF 		bl	vPortEnterCritical
1586:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1587:../../../FreeRTOS_9_0/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2131              		.loc 1 1587 0
 2132 0026 7B68     		ldr	r3, [r7, #4]
 2133 0028 9B6B     		ldr	r3, [r3, #56]
 2134 002a FB60     		str	r3, [r7, #12]
1588:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1589:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
ARM GAS  /tmp/ccHyCAGW.s 			page 71


 2135              		.loc 1 1589 0
 2136 002c FFF7FEFF 		bl	vPortExitCritical
1590:../../../FreeRTOS_9_0/Source/queue.c **** 
1591:../../../FreeRTOS_9_0/Source/queue.c **** 	return uxReturn;
 2137              		.loc 1 1591 0
 2138 0030 FB68     		ldr	r3, [r7, #12]
1592:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2139              		.loc 1 1592 0
 2140 0032 1846     		mov	r0, r3
 2141 0034 1037     		adds	r7, r7, #16
 2142              	.LCFI58:
 2143              		.cfi_def_cfa_offset 8
 2144 0036 BD46     		mov	sp, r7
 2145              	.LCFI59:
 2146              		.cfi_def_cfa_register 13
 2147              		@ sp needed
 2148 0038 80BD     		pop	{r7, pc}
 2149              		.cfi_endproc
 2150              	.LFE16:
 2152 003a 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2153              		.align	2
 2154              		.global	uxQueueSpacesAvailable
 2155              		.thumb
 2156              		.thumb_func
 2158              	uxQueueSpacesAvailable:
 2159              	.LFB17:
1593:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1594:../../../FreeRTOS_9_0/Source/queue.c **** 
1595:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:../../../FreeRTOS_9_0/Source/queue.c **** {
 2160              		.loc 1 1596 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 24
 2163              		@ frame_needed = 1, uses_anonymous_args = 0
 2164 0000 80B5     		push	{r7, lr}
 2165              	.LCFI60:
 2166              		.cfi_def_cfa_offset 8
 2167              		.cfi_offset 7, -8
 2168              		.cfi_offset 14, -4
 2169 0002 86B0     		sub	sp, sp, #24
 2170              	.LCFI61:
 2171              		.cfi_def_cfa_offset 32
 2172 0004 00AF     		add	r7, sp, #0
 2173              	.LCFI62:
 2174              		.cfi_def_cfa_register 7
 2175 0006 7860     		str	r0, [r7, #4]
1597:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxReturn;
1598:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t *pxQueue;
1599:../../../FreeRTOS_9_0/Source/queue.c **** 
1600:../../../FreeRTOS_9_0/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
 2176              		.loc 1 1600 0
 2177 0008 7B68     		ldr	r3, [r7, #4]
 2178 000a 7B61     		str	r3, [r7, #20]
1601:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 2179              		.loc 1 1601 0
 2180 000c 7B69     		ldr	r3, [r7, #20]
 2181 000e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccHyCAGW.s 			page 72


 2182 0010 09D1     		bne	.L157
 2183              	.LBB140:
 2184              	.LBB141:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2185              		.loc 2 237 0 discriminator 1
 2186              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2187 0012 4FF05003 			mov r3, #80												
 2188 0016 83F31188 		msr basepri, r3											
 2189 001a BFF36F8F 		isb														
 2190 001e BFF34F8F 		dsb														
 2191              	
 2192              	@ 0 "" 2
 2193              		.thumb
 2194 0022 FB60     		str	r3, [r7, #12]
 2195              	.L158:
 2196              	.LBE141:
 2197              	.LBE140:
 2198              		.loc 1 1601 0 discriminator 1
 2199 0024 FEE7     		b	.L158
 2200              	.L157:
1602:../../../FreeRTOS_9_0/Source/queue.c **** 
1603:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 2201              		.loc 1 1603 0
 2202 0026 FFF7FEFF 		bl	vPortEnterCritical
1604:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1605:../../../FreeRTOS_9_0/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2203              		.loc 1 1605 0
 2204 002a 7B69     		ldr	r3, [r7, #20]
 2205 002c DA6B     		ldr	r2, [r3, #60]
 2206 002e 7B69     		ldr	r3, [r7, #20]
 2207 0030 9B6B     		ldr	r3, [r3, #56]
 2208 0032 D31A     		subs	r3, r2, r3
 2209 0034 3B61     		str	r3, [r7, #16]
1606:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1607:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 2210              		.loc 1 1607 0
 2211 0036 FFF7FEFF 		bl	vPortExitCritical
1608:../../../FreeRTOS_9_0/Source/queue.c **** 
1609:../../../FreeRTOS_9_0/Source/queue.c **** 	return uxReturn;
 2212              		.loc 1 1609 0
 2213 003a 3B69     		ldr	r3, [r7, #16]
1610:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2214              		.loc 1 1610 0
 2215 003c 1846     		mov	r0, r3
 2216 003e 1837     		adds	r7, r7, #24
 2217              	.LCFI63:
 2218              		.cfi_def_cfa_offset 8
 2219 0040 BD46     		mov	sp, r7
 2220              	.LCFI64:
 2221              		.cfi_def_cfa_register 13
 2222              		@ sp needed
 2223 0042 80BD     		pop	{r7, pc}
 2224              		.cfi_endproc
 2225              	.LFE17:
 2227              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2228              		.align	2
 2229              		.global	uxQueueMessagesWaitingFromISR
ARM GAS  /tmp/ccHyCAGW.s 			page 73


 2230              		.thumb
 2231              		.thumb_func
 2233              	uxQueueMessagesWaitingFromISR:
 2234              	.LFB18:
1611:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1612:../../../FreeRTOS_9_0/Source/queue.c **** 
1613:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:../../../FreeRTOS_9_0/Source/queue.c **** {
 2235              		.loc 1 1614 0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 16
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
 2240 0000 80B4     		push	{r7}
 2241              	.LCFI65:
 2242              		.cfi_def_cfa_offset 4
 2243              		.cfi_offset 7, -4
 2244 0002 85B0     		sub	sp, sp, #20
 2245              	.LCFI66:
 2246              		.cfi_def_cfa_offset 24
 2247 0004 00AF     		add	r7, sp, #0
 2248              	.LCFI67:
 2249              		.cfi_def_cfa_register 7
 2250 0006 7860     		str	r0, [r7, #4]
1615:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxReturn;
1616:../../../FreeRTOS_9_0/Source/queue.c **** 
1617:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( xQueue );
 2251              		.loc 1 1617 0
 2252 0008 7B68     		ldr	r3, [r7, #4]
 2253 000a 002B     		cmp	r3, #0
 2254 000c 09D1     		bne	.L161
 2255              	.LBB142:
 2256              	.LBB143:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2257              		.loc 2 237 0 discriminator 1
 2258              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2259 000e 4FF05003 			mov r3, #80												
 2260 0012 83F31188 		msr basepri, r3											
 2261 0016 BFF36F8F 		isb														
 2262 001a BFF34F8F 		dsb														
 2263              	
 2264              	@ 0 "" 2
 2265              		.thumb
 2266 001e BB60     		str	r3, [r7, #8]
 2267              	.L162:
 2268              	.LBE143:
 2269              	.LBE142:
 2270              		.loc 1 1617 0 discriminator 1
 2271 0020 FEE7     		b	.L162
 2272              	.L161:
1618:../../../FreeRTOS_9_0/Source/queue.c **** 
1619:../../../FreeRTOS_9_0/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2273              		.loc 1 1619 0
 2274 0022 7B68     		ldr	r3, [r7, #4]
 2275 0024 9B6B     		ldr	r3, [r3, #56]
 2276 0026 FB60     		str	r3, [r7, #12]
1620:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 74


1621:../../../FreeRTOS_9_0/Source/queue.c **** 	return uxReturn;
 2277              		.loc 1 1621 0
 2278 0028 FB68     		ldr	r3, [r7, #12]
1622:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2279              		.loc 1 1622 0
 2280 002a 1846     		mov	r0, r3
 2281 002c 1437     		adds	r7, r7, #20
 2282              	.LCFI68:
 2283              		.cfi_def_cfa_offset 4
 2284 002e BD46     		mov	sp, r7
 2285              	.LCFI69:
 2286              		.cfi_def_cfa_register 13
 2287              		@ sp needed
 2288 0030 5DF8047B 		ldr	r7, [sp], #4
 2289              	.LCFI70:
 2290              		.cfi_restore 7
 2291              		.cfi_def_cfa_offset 0
 2292 0034 7047     		bx	lr
 2293              		.cfi_endproc
 2294              	.LFE18:
 2296 0036 00BF     		.section	.text.vQueueDelete,"ax",%progbits
 2297              		.align	2
 2298              		.global	vQueueDelete
 2299              		.thumb
 2300              		.thumb_func
 2302              	vQueueDelete:
 2303              	.LFB19:
1623:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1624:../../../FreeRTOS_9_0/Source/queue.c **** 
1625:../../../FreeRTOS_9_0/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:../../../FreeRTOS_9_0/Source/queue.c **** {
 2304              		.loc 1 1626 0
 2305              		.cfi_startproc
 2306              		@ args = 0, pretend = 0, frame = 16
 2307              		@ frame_needed = 1, uses_anonymous_args = 0
 2308 0000 80B5     		push	{r7, lr}
 2309              	.LCFI71:
 2310              		.cfi_def_cfa_offset 8
 2311              		.cfi_offset 7, -8
 2312              		.cfi_offset 14, -4
 2313 0002 84B0     		sub	sp, sp, #16
 2314              	.LCFI72:
 2315              		.cfi_def_cfa_offset 24
 2316 0004 00AF     		add	r7, sp, #0
 2317              	.LCFI73:
 2318              		.cfi_def_cfa_register 7
 2319 0006 7860     		str	r0, [r7, #4]
1627:../../../FreeRTOS_9_0/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2320              		.loc 1 1627 0
 2321 0008 7B68     		ldr	r3, [r7, #4]
 2322 000a FB60     		str	r3, [r7, #12]
1628:../../../FreeRTOS_9_0/Source/queue.c **** 
1629:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( pxQueue );
 2323              		.loc 1 1629 0
 2324 000c FB68     		ldr	r3, [r7, #12]
 2325 000e 002B     		cmp	r3, #0
 2326 0010 09D1     		bne	.L165
ARM GAS  /tmp/ccHyCAGW.s 			page 75


 2327              	.LBB144:
 2328              	.LBB145:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2329              		.loc 2 237 0 discriminator 1
 2330              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2331 0012 4FF05003 			mov r3, #80												
 2332 0016 83F31188 		msr basepri, r3											
 2333 001a BFF36F8F 		isb														
 2334 001e BFF34F8F 		dsb														
 2335              	
 2336              	@ 0 "" 2
 2337              		.thumb
 2338 0022 BB60     		str	r3, [r7, #8]
 2339              	.L166:
 2340              	.LBE145:
 2341              	.LBE144:
 2342              		.loc 1 1629 0 discriminator 1
 2343 0024 FEE7     		b	.L166
 2344              	.L165:
1630:../../../FreeRTOS_9_0/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:../../../FreeRTOS_9_0/Source/queue.c **** 
1632:../../../FreeRTOS_9_0/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1634:../../../FreeRTOS_9_0/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
 2345              		.loc 1 1634 0
 2346 0026 F868     		ldr	r0, [r7, #12]
 2347 0028 FFF7FEFF 		bl	vQueueUnregisterQueue
1635:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1636:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif
1637:../../../FreeRTOS_9_0/Source/queue.c **** 
1638:../../../FreeRTOS_9_0/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1640:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:../../../FreeRTOS_9_0/Source/queue.c **** 		again. */
1642:../../../FreeRTOS_9_0/Source/queue.c **** 		vPortFree( pxQueue );
 2348              		.loc 1 1642 0
 2349 002c F868     		ldr	r0, [r7, #12]
 2350 002e FFF7FEFF 		bl	vPortFree
1643:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1644:../../../FreeRTOS_9_0/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1646:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:../../../FreeRTOS_9_0/Source/queue.c **** 		check before attempting to free the memory. */
1648:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1650:../../../FreeRTOS_9_0/Source/queue.c **** 			vPortFree( pxQueue );
1651:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1652:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1653:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1654:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1656:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1657:../../../FreeRTOS_9_0/Source/queue.c **** 	#else
1658:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1659:../../../FreeRTOS_9_0/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:../../../FreeRTOS_9_0/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) pxQueue;
ARM GAS  /tmp/ccHyCAGW.s 			page 76


1662:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1663:../../../FreeRTOS_9_0/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:../../../FreeRTOS_9_0/Source/queue.c **** }
 2351              		.loc 1 1664 0
 2352 0032 1037     		adds	r7, r7, #16
 2353              	.LCFI74:
 2354              		.cfi_def_cfa_offset 8
 2355 0034 BD46     		mov	sp, r7
 2356              	.LCFI75:
 2357              		.cfi_def_cfa_register 13
 2358              		@ sp needed
 2359 0036 80BD     		pop	{r7, pc}
 2360              		.cfi_endproc
 2361              	.LFE19:
 2363              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 2364              		.align	2
 2365              		.global	uxQueueGetQueueNumber
 2366              		.thumb
 2367              		.thumb_func
 2369              	uxQueueGetQueueNumber:
 2370              	.LFB20:
1665:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1666:../../../FreeRTOS_9_0/Source/queue.c **** 
1667:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:../../../FreeRTOS_9_0/Source/queue.c **** 
1669:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 2371              		.loc 1 1670 0
 2372              		.cfi_startproc
 2373              		@ args = 0, pretend = 0, frame = 8
 2374              		@ frame_needed = 1, uses_anonymous_args = 0
 2375              		@ link register save eliminated.
 2376 0000 80B4     		push	{r7}
 2377              	.LCFI76:
 2378              		.cfi_def_cfa_offset 4
 2379              		.cfi_offset 7, -4
 2380 0002 83B0     		sub	sp, sp, #12
 2381              	.LCFI77:
 2382              		.cfi_def_cfa_offset 16
 2383 0004 00AF     		add	r7, sp, #0
 2384              	.LCFI78:
 2385              		.cfi_def_cfa_register 7
 2386 0006 7860     		str	r0, [r7, #4]
1671:../../../FreeRTOS_9_0/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 2387              		.loc 1 1671 0
 2388 0008 7B68     		ldr	r3, [r7, #4]
 2389 000a 9B6C     		ldr	r3, [r3, #72]
1672:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 2390              		.loc 1 1672 0
 2391 000c 1846     		mov	r0, r3
 2392 000e 0C37     		adds	r7, r7, #12
 2393              	.LCFI79:
 2394              		.cfi_def_cfa_offset 4
 2395 0010 BD46     		mov	sp, r7
 2396              	.LCFI80:
 2397              		.cfi_def_cfa_register 13
 2398              		@ sp needed
ARM GAS  /tmp/ccHyCAGW.s 			page 77


 2399 0012 5DF8047B 		ldr	r7, [sp], #4
 2400              	.LCFI81:
 2401              		.cfi_restore 7
 2402              		.cfi_def_cfa_offset 0
 2403 0016 7047     		bx	lr
 2404              		.cfi_endproc
 2405              	.LFE20:
 2407              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 2408              		.align	2
 2409              		.global	vQueueSetQueueNumber
 2410              		.thumb
 2411              		.thumb_func
 2413              	vQueueSetQueueNumber:
 2414              	.LFB21:
1673:../../../FreeRTOS_9_0/Source/queue.c **** 
1674:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1676:../../../FreeRTOS_9_0/Source/queue.c **** 
1677:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:../../../FreeRTOS_9_0/Source/queue.c **** 
1679:../../../FreeRTOS_9_0/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 2415              		.loc 1 1680 0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 8
 2418              		@ frame_needed = 1, uses_anonymous_args = 0
 2419              		@ link register save eliminated.
 2420 0000 80B4     		push	{r7}
 2421              	.LCFI82:
 2422              		.cfi_def_cfa_offset 4
 2423              		.cfi_offset 7, -4
 2424 0002 83B0     		sub	sp, sp, #12
 2425              	.LCFI83:
 2426              		.cfi_def_cfa_offset 16
 2427 0004 00AF     		add	r7, sp, #0
 2428              	.LCFI84:
 2429              		.cfi_def_cfa_register 7
 2430 0006 7860     		str	r0, [r7, #4]
 2431 0008 3960     		str	r1, [r7]
1681:../../../FreeRTOS_9_0/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 2432              		.loc 1 1681 0
 2433 000a 7B68     		ldr	r3, [r7, #4]
 2434 000c 3A68     		ldr	r2, [r7]
 2435 000e 9A64     		str	r2, [r3, #72]
1682:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 2436              		.loc 1 1682 0
 2437 0010 0C37     		adds	r7, r7, #12
 2438              	.LCFI85:
 2439              		.cfi_def_cfa_offset 4
 2440 0012 BD46     		mov	sp, r7
 2441              	.LCFI86:
 2442              		.cfi_def_cfa_register 13
 2443              		@ sp needed
 2444 0014 5DF8047B 		ldr	r7, [sp], #4
 2445              	.LCFI87:
 2446              		.cfi_restore 7
 2447              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccHyCAGW.s 			page 78


 2448 0018 7047     		bx	lr
 2449              		.cfi_endproc
 2450              	.LFE21:
 2452 001a 00BF     		.section	.text.ucQueueGetQueueType,"ax",%progbits
 2453              		.align	2
 2454              		.global	ucQueueGetQueueType
 2455              		.thumb
 2456              		.thumb_func
 2458              	ucQueueGetQueueType:
 2459              	.LFB22:
1683:../../../FreeRTOS_9_0/Source/queue.c **** 
1684:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1686:../../../FreeRTOS_9_0/Source/queue.c **** 
1687:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:../../../FreeRTOS_9_0/Source/queue.c **** 
1689:../../../FreeRTOS_9_0/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 2460              		.loc 1 1690 0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 8
 2463              		@ frame_needed = 1, uses_anonymous_args = 0
 2464              		@ link register save eliminated.
 2465 0000 80B4     		push	{r7}
 2466              	.LCFI88:
 2467              		.cfi_def_cfa_offset 4
 2468              		.cfi_offset 7, -4
 2469 0002 83B0     		sub	sp, sp, #12
 2470              	.LCFI89:
 2471              		.cfi_def_cfa_offset 16
 2472 0004 00AF     		add	r7, sp, #0
 2473              	.LCFI90:
 2474              		.cfi_def_cfa_register 7
 2475 0006 7860     		str	r0, [r7, #4]
1691:../../../FreeRTOS_9_0/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 2476              		.loc 1 1691 0
 2477 0008 7B68     		ldr	r3, [r7, #4]
 2478 000a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
1692:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 2479              		.loc 1 1692 0
 2480 000e 1846     		mov	r0, r3
 2481 0010 0C37     		adds	r7, r7, #12
 2482              	.LCFI91:
 2483              		.cfi_def_cfa_offset 4
 2484 0012 BD46     		mov	sp, r7
 2485              	.LCFI92:
 2486              		.cfi_def_cfa_register 13
 2487              		@ sp needed
 2488 0014 5DF8047B 		ldr	r7, [sp], #4
 2489              	.LCFI93:
 2490              		.cfi_restore 7
 2491              		.cfi_def_cfa_offset 0
 2492 0018 7047     		bx	lr
 2493              		.cfi_endproc
 2494              	.LFE22:
 2496 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 2497              		.align	2
ARM GAS  /tmp/ccHyCAGW.s 			page 79


 2498              		.thumb
 2499              		.thumb_func
 2501              	prvCopyDataToQueue:
 2502              	.LFB23:
1693:../../../FreeRTOS_9_0/Source/queue.c **** 
1694:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1696:../../../FreeRTOS_9_0/Source/queue.c **** 
1697:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:../../../FreeRTOS_9_0/Source/queue.c **** {
 2503              		.loc 1 1698 0
 2504              		.cfi_startproc
 2505              		@ args = 0, pretend = 0, frame = 24
 2506              		@ frame_needed = 1, uses_anonymous_args = 0
 2507 0000 80B5     		push	{r7, lr}
 2508              	.LCFI94:
 2509              		.cfi_def_cfa_offset 8
 2510              		.cfi_offset 7, -8
 2511              		.cfi_offset 14, -4
 2512 0002 86B0     		sub	sp, sp, #24
 2513              	.LCFI95:
 2514              		.cfi_def_cfa_offset 32
 2515 0004 00AF     		add	r7, sp, #0
 2516              	.LCFI96:
 2517              		.cfi_def_cfa_register 7
 2518 0006 F860     		str	r0, [r7, #12]
 2519 0008 B960     		str	r1, [r7, #8]
 2520 000a 7A60     		str	r2, [r7, #4]
1699:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 2521              		.loc 1 1699 0
 2522 000c 0023     		movs	r3, #0
 2523 000e 7B61     		str	r3, [r7, #20]
1700:../../../FreeRTOS_9_0/Source/queue.c **** UBaseType_t uxMessagesWaiting;
1701:../../../FreeRTOS_9_0/Source/queue.c **** 
1702:../../../FreeRTOS_9_0/Source/queue.c **** 	/* This function is called from a critical section. */
1703:../../../FreeRTOS_9_0/Source/queue.c **** 
1704:../../../FreeRTOS_9_0/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2524              		.loc 1 1704 0
 2525 0010 FB68     		ldr	r3, [r7, #12]
 2526 0012 9B6B     		ldr	r3, [r3, #56]
 2527 0014 3B61     		str	r3, [r7, #16]
1705:../../../FreeRTOS_9_0/Source/queue.c **** 
1706:../../../FreeRTOS_9_0/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 2528              		.loc 1 1706 0
 2529 0016 FB68     		ldr	r3, [r7, #12]
 2530 0018 1B6C     		ldr	r3, [r3, #64]
 2531 001a 002B     		cmp	r3, #0
 2532 001c 0DD1     		bne	.L173
1707:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1708:../../../FreeRTOS_9_0/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1710:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2533              		.loc 1 1710 0
 2534 001e FB68     		ldr	r3, [r7, #12]
 2535 0020 1B68     		ldr	r3, [r3]
 2536 0022 002B     		cmp	r3, #0
 2537 0024 4FD1     		bne	.L174
ARM GAS  /tmp/ccHyCAGW.s 			page 80


1711:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1712:../../../FreeRTOS_9_0/Source/queue.c **** 				/* The mutex is no longer being held. */
1713:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 2538              		.loc 1 1713 0
 2539 0026 FB68     		ldr	r3, [r7, #12]
 2540 0028 5B68     		ldr	r3, [r3, #4]
 2541 002a 1846     		mov	r0, r3
 2542 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 2543 0030 7861     		str	r0, [r7, #20]
1714:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 2544              		.loc 1 1714 0
 2545 0032 FB68     		ldr	r3, [r7, #12]
 2546 0034 0022     		movs	r2, #0
 2547 0036 5A60     		str	r2, [r3, #4]
 2548 0038 45E0     		b	.L174
 2549              	.L173:
1715:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1716:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1717:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1718:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1720:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1721:../../../FreeRTOS_9_0/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1723:../../../FreeRTOS_9_0/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 2550              		.loc 1 1723 0
 2551 003a 7B68     		ldr	r3, [r7, #4]
 2552 003c 002B     		cmp	r3, #0
 2553 003e 1AD1     		bne	.L175
1724:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1725:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 2554              		.loc 1 1725 0
 2555 0040 FB68     		ldr	r3, [r7, #12]
 2556 0042 9A68     		ldr	r2, [r3, #8]
 2557 0044 FB68     		ldr	r3, [r7, #12]
 2558 0046 1B6C     		ldr	r3, [r3, #64]
 2559 0048 1046     		mov	r0, r2
 2560 004a B968     		ldr	r1, [r7, #8]
 2561 004c 1A46     		mov	r2, r3
 2562 004e FFF7FEFF 		bl	memcpy
1726:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 2563              		.loc 1 1726 0
 2564 0052 FB68     		ldr	r3, [r7, #12]
 2565 0054 9A68     		ldr	r2, [r3, #8]
 2566 0056 FB68     		ldr	r3, [r7, #12]
 2567 0058 1B6C     		ldr	r3, [r3, #64]
 2568 005a 1A44     		add	r2, r2, r3
 2569 005c FB68     		ldr	r3, [r7, #12]
 2570 005e 9A60     		str	r2, [r3, #8]
1727:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 2571              		.loc 1 1727 0
 2572 0060 FB68     		ldr	r3, [r7, #12]
 2573 0062 9A68     		ldr	r2, [r3, #8]
 2574 0064 FB68     		ldr	r3, [r7, #12]
 2575 0066 5B68     		ldr	r3, [r3, #4]
 2576 0068 9A42     		cmp	r2, r3
 2577 006a 2CD3     		bcc	.L174
ARM GAS  /tmp/ccHyCAGW.s 			page 81


1728:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1729:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 2578              		.loc 1 1729 0
 2579 006c FB68     		ldr	r3, [r7, #12]
 2580 006e 1A68     		ldr	r2, [r3]
 2581 0070 FB68     		ldr	r3, [r7, #12]
 2582 0072 9A60     		str	r2, [r3, #8]
 2583 0074 27E0     		b	.L174
 2584              	.L175:
1730:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1731:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1732:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1733:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1735:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1736:../../../FreeRTOS_9_0/Source/queue.c **** 	else
1737:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1738:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
 2585              		.loc 1 1738 0
 2586 0076 FB68     		ldr	r3, [r7, #12]
 2587 0078 DA68     		ldr	r2, [r3, #12]
 2588 007a FB68     		ldr	r3, [r7, #12]
 2589 007c 1B6C     		ldr	r3, [r3, #64]
 2590 007e 1046     		mov	r0, r2
 2591 0080 B968     		ldr	r1, [r7, #8]
 2592 0082 1A46     		mov	r2, r3
 2593 0084 FFF7FEFF 		bl	memcpy
1739:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 2594              		.loc 1 1739 0
 2595 0088 FB68     		ldr	r3, [r7, #12]
 2596 008a DA68     		ldr	r2, [r3, #12]
 2597 008c FB68     		ldr	r3, [r7, #12]
 2598 008e 1B6C     		ldr	r3, [r3, #64]
 2599 0090 5B42     		negs	r3, r3
 2600 0092 1A44     		add	r2, r2, r3
 2601 0094 FB68     		ldr	r3, [r7, #12]
 2602 0096 DA60     		str	r2, [r3, #12]
1740:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 2603              		.loc 1 1740 0
 2604 0098 FB68     		ldr	r3, [r7, #12]
 2605 009a DA68     		ldr	r2, [r3, #12]
 2606 009c FB68     		ldr	r3, [r7, #12]
 2607 009e 1B68     		ldr	r3, [r3]
 2608 00a0 9A42     		cmp	r2, r3
 2609 00a2 07D2     		bcs	.L176
1741:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1742:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 2610              		.loc 1 1742 0
 2611 00a4 FB68     		ldr	r3, [r7, #12]
 2612 00a6 5A68     		ldr	r2, [r3, #4]
 2613 00a8 FB68     		ldr	r3, [r7, #12]
 2614 00aa 1B6C     		ldr	r3, [r3, #64]
 2615 00ac 5B42     		negs	r3, r3
 2616 00ae 1A44     		add	r2, r2, r3
 2617 00b0 FB68     		ldr	r3, [r7, #12]
 2618 00b2 DA60     		str	r2, [r3, #12]
 2619              	.L176:
ARM GAS  /tmp/ccHyCAGW.s 			page 82


1743:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1744:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1745:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1746:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1748:../../../FreeRTOS_9_0/Source/queue.c **** 
1749:../../../FreeRTOS_9_0/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
 2620              		.loc 1 1749 0
 2621 00b4 7B68     		ldr	r3, [r7, #4]
 2622 00b6 022B     		cmp	r3, #2
 2623 00b8 05D1     		bne	.L174
1750:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1751:../../../FreeRTOS_9_0/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2624              		.loc 1 1751 0
 2625 00ba 3B69     		ldr	r3, [r7, #16]
 2626 00bc 002B     		cmp	r3, #0
 2627 00be 02D0     		beq	.L174
1752:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1753:../../../FreeRTOS_9_0/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:../../../FreeRTOS_9_0/Source/queue.c **** 				one from the recorded number of items in the queue so when
1755:../../../FreeRTOS_9_0/Source/queue.c **** 				one is added again below the number of recorded items remains
1756:../../../FreeRTOS_9_0/Source/queue.c **** 				correct. */
1757:../../../FreeRTOS_9_0/Source/queue.c **** 				--uxMessagesWaiting;
 2628              		.loc 1 1757 0
 2629 00c0 3B69     		ldr	r3, [r7, #16]
 2630 00c2 013B     		subs	r3, r3, #1
 2631 00c4 3B61     		str	r3, [r7, #16]
 2632              	.L174:
1758:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1759:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1760:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1761:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1763:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1764:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1765:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1766:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1768:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1769:../../../FreeRTOS_9_0/Source/queue.c **** 
1770:../../../FreeRTOS_9_0/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 2633              		.loc 1 1770 0
 2634 00c6 3B69     		ldr	r3, [r7, #16]
 2635 00c8 5A1C     		adds	r2, r3, #1
 2636 00ca FB68     		ldr	r3, [r7, #12]
 2637 00cc 9A63     		str	r2, [r3, #56]
1771:../../../FreeRTOS_9_0/Source/queue.c **** 
1772:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 2638              		.loc 1 1772 0
 2639 00ce 7B69     		ldr	r3, [r7, #20]
1773:../../../FreeRTOS_9_0/Source/queue.c **** }
 2640              		.loc 1 1773 0
 2641 00d0 1846     		mov	r0, r3
 2642 00d2 1837     		adds	r7, r7, #24
 2643              	.LCFI97:
 2644              		.cfi_def_cfa_offset 8
 2645 00d4 BD46     		mov	sp, r7
ARM GAS  /tmp/ccHyCAGW.s 			page 83


 2646              	.LCFI98:
 2647              		.cfi_def_cfa_register 13
 2648              		@ sp needed
 2649 00d6 80BD     		pop	{r7, pc}
 2650              		.cfi_endproc
 2651              	.LFE23:
 2653              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 2654              		.align	2
 2655              		.thumb
 2656              		.thumb_func
 2658              	prvCopyDataFromQueue:
 2659              	.LFB24:
1774:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1775:../../../FreeRTOS_9_0/Source/queue.c **** 
1776:../../../FreeRTOS_9_0/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:../../../FreeRTOS_9_0/Source/queue.c **** {
 2660              		.loc 1 1777 0
 2661              		.cfi_startproc
 2662              		@ args = 0, pretend = 0, frame = 8
 2663              		@ frame_needed = 1, uses_anonymous_args = 0
 2664 0000 80B5     		push	{r7, lr}
 2665              	.LCFI99:
 2666              		.cfi_def_cfa_offset 8
 2667              		.cfi_offset 7, -8
 2668              		.cfi_offset 14, -4
 2669 0002 82B0     		sub	sp, sp, #8
 2670              	.LCFI100:
 2671              		.cfi_def_cfa_offset 16
 2672 0004 00AF     		add	r7, sp, #0
 2673              	.LCFI101:
 2674              		.cfi_def_cfa_register 7
 2675 0006 7860     		str	r0, [r7, #4]
 2676 0008 3960     		str	r1, [r7]
1778:../../../FreeRTOS_9_0/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 2677              		.loc 1 1778 0
 2678 000a 7B68     		ldr	r3, [r7, #4]
 2679 000c 1B6C     		ldr	r3, [r3, #64]
 2680 000e 002B     		cmp	r3, #0
 2681 0010 19D0     		beq	.L178
1779:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1780:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 2682              		.loc 1 1780 0
 2683 0012 7B68     		ldr	r3, [r7, #4]
 2684 0014 DA68     		ldr	r2, [r3, #12]
 2685 0016 7B68     		ldr	r3, [r7, #4]
 2686 0018 1B6C     		ldr	r3, [r3, #64]
 2687 001a 1A44     		add	r2, r2, r3
 2688 001c 7B68     		ldr	r3, [r7, #4]
 2689 001e DA60     		str	r2, [r3, #12]
1781:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 2690              		.loc 1 1781 0
 2691 0020 7B68     		ldr	r3, [r7, #4]
 2692 0022 DA68     		ldr	r2, [r3, #12]
 2693 0024 7B68     		ldr	r3, [r7, #4]
 2694 0026 5B68     		ldr	r3, [r3, #4]
 2695 0028 9A42     		cmp	r2, r3
 2696 002a 03D3     		bcc	.L180
ARM GAS  /tmp/ccHyCAGW.s 			page 84


1782:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1783:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 2697              		.loc 1 1783 0
 2698 002c 7B68     		ldr	r3, [r7, #4]
 2699 002e 1A68     		ldr	r2, [r3]
 2700 0030 7B68     		ldr	r3, [r7, #4]
 2701 0032 DA60     		str	r2, [r3, #12]
 2702              	.L180:
1784:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1785:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1786:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1787:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1789:../../../FreeRTOS_9_0/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
 2703              		.loc 1 1789 0
 2704 0034 7B68     		ldr	r3, [r7, #4]
 2705 0036 DA68     		ldr	r2, [r3, #12]
 2706 0038 7B68     		ldr	r3, [r7, #4]
 2707 003a 1B6C     		ldr	r3, [r3, #64]
 2708 003c 3868     		ldr	r0, [r7]
 2709 003e 1146     		mov	r1, r2
 2710 0040 1A46     		mov	r2, r3
 2711 0042 FFF7FEFF 		bl	memcpy
 2712              	.L178:
1790:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1791:../../../FreeRTOS_9_0/Source/queue.c **** }
 2713              		.loc 1 1791 0
 2714 0046 0837     		adds	r7, r7, #8
 2715              	.LCFI102:
 2716              		.cfi_def_cfa_offset 8
 2717 0048 BD46     		mov	sp, r7
 2718              	.LCFI103:
 2719              		.cfi_def_cfa_register 13
 2720              		@ sp needed
 2721 004a 80BD     		pop	{r7, pc}
 2722              		.cfi_endproc
 2723              	.LFE24:
 2725              		.section	.text.prvUnlockQueue,"ax",%progbits
 2726              		.align	2
 2727              		.thumb
 2728              		.thumb_func
 2730              	prvUnlockQueue:
 2731              	.LFB25:
1792:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1793:../../../FreeRTOS_9_0/Source/queue.c **** 
1794:../../../FreeRTOS_9_0/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:../../../FreeRTOS_9_0/Source/queue.c **** {
 2732              		.loc 1 1795 0
 2733              		.cfi_startproc
 2734              		@ args = 0, pretend = 0, frame = 16
 2735              		@ frame_needed = 1, uses_anonymous_args = 0
 2736 0000 80B5     		push	{r7, lr}
 2737              	.LCFI104:
 2738              		.cfi_def_cfa_offset 8
 2739              		.cfi_offset 7, -8
 2740              		.cfi_offset 14, -4
 2741 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccHyCAGW.s 			page 85


 2742              	.LCFI105:
 2743              		.cfi_def_cfa_offset 24
 2744 0004 00AF     		add	r7, sp, #0
 2745              	.LCFI106:
 2746              		.cfi_def_cfa_register 7
 2747 0006 7860     		str	r0, [r7, #4]
1796:../../../FreeRTOS_9_0/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:../../../FreeRTOS_9_0/Source/queue.c **** 
1798:../../../FreeRTOS_9_0/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:../../../FreeRTOS_9_0/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:../../../FreeRTOS_9_0/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:../../../FreeRTOS_9_0/Source/queue.c **** 	updated. */
1802:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 2748              		.loc 1 1802 0
 2749 0008 FFF7FEFF 		bl	vPortEnterCritical
 2750              	.LBB146:
1803:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1804:../../../FreeRTOS_9_0/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
 2751              		.loc 1 1804 0
 2752 000c 7B68     		ldr	r3, [r7, #4]
 2753 000e 93F84530 		ldrb	r3, [r3, #69]
 2754 0012 FB73     		strb	r3, [r7, #15]
1805:../../../FreeRTOS_9_0/Source/queue.c **** 
1806:../../../FreeRTOS_9_0/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:../../../FreeRTOS_9_0/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
 2755              		.loc 1 1807 0
 2756 0014 13E0     		b	.L182
 2757              	.L186:
1808:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1809:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:../../../FreeRTOS_9_0/Source/queue.c **** 			blocked waiting for data to become available? */
1811:../../../FreeRTOS_9_0/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1813:../../../FreeRTOS_9_0/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1815:../../../FreeRTOS_9_0/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1817:../../../FreeRTOS_9_0/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:../../../FreeRTOS_9_0/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:../../../FreeRTOS_9_0/Source/queue.c **** 						A context switch is required. */
1820:../../../FreeRTOS_9_0/Source/queue.c **** 						vTaskMissedYield();
1821:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1822:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1823:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1824:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1826:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1827:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1828:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1829:../../../FreeRTOS_9_0/Source/queue.c **** 					/* Tasks that are removed from the event list will get
1830:../../../FreeRTOS_9_0/Source/queue.c **** 					added to the pending ready list as the scheduler is still
1831:../../../FreeRTOS_9_0/Source/queue.c **** 					suspended. */
1832:../../../FreeRTOS_9_0/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1834:../../../FreeRTOS_9_0/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1836:../../../FreeRTOS_9_0/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
ARM GAS  /tmp/ccHyCAGW.s 			page 86


1837:../../../FreeRTOS_9_0/Source/queue.c **** 							context	switch is required. */
1838:../../../FreeRTOS_9_0/Source/queue.c **** 							vTaskMissedYield();
1839:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1840:../../../FreeRTOS_9_0/Source/queue.c **** 						else
1841:../../../FreeRTOS_9_0/Source/queue.c **** 						{
1842:../../../FreeRTOS_9_0/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:../../../FreeRTOS_9_0/Source/queue.c **** 						}
1844:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1845:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1846:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1847:../../../FreeRTOS_9_0/Source/queue.c **** 						break;
1848:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1849:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1850:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1851:../../../FreeRTOS_9_0/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1853:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:../../../FreeRTOS_9_0/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2758              		.loc 1 1855 0
 2759 0016 7B68     		ldr	r3, [r7, #4]
 2760 0018 5B6A     		ldr	r3, [r3, #36]
 2761 001a 002B     		cmp	r3, #0
 2762 001c 0AD0     		beq	.L183
1856:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1857:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2763              		.loc 1 1857 0
 2764 001e 7B68     		ldr	r3, [r7, #4]
 2765 0020 2433     		adds	r3, r3, #36
 2766 0022 1846     		mov	r0, r3
 2767 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2768 0028 0346     		mov	r3, r0
 2769 002a 002B     		cmp	r3, #0
 2770 002c 03D0     		beq	.L184
1858:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1859:../../../FreeRTOS_9_0/Source/queue.c **** 						/* The task waiting has a higher priority so record that
1860:../../../FreeRTOS_9_0/Source/queue.c **** 						a context switch is required. */
1861:../../../FreeRTOS_9_0/Source/queue.c **** 						vTaskMissedYield();
 2771              		.loc 1 1861 0
 2772 002e FFF7FEFF 		bl	vTaskMissedYield
 2773 0032 00E0     		b	.L184
 2774              	.L183:
1862:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1863:../../../FreeRTOS_9_0/Source/queue.c **** 					else
1864:../../../FreeRTOS_9_0/Source/queue.c **** 					{
1865:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:../../../FreeRTOS_9_0/Source/queue.c **** 					}
1867:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1868:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1869:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1870:../../../FreeRTOS_9_0/Source/queue.c **** 					break;
 2775              		.loc 1 1870 0
 2776 0034 07E0     		b	.L185
 2777              	.L184:
1871:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1872:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1873:../../../FreeRTOS_9_0/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
ARM GAS  /tmp/ccHyCAGW.s 			page 87


1874:../../../FreeRTOS_9_0/Source/queue.c **** 
1875:../../../FreeRTOS_9_0/Source/queue.c **** 			--cTxLock;
 2778              		.loc 1 1875 0
 2779 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2780 0038 013B     		subs	r3, r3, #1
 2781 003a DBB2     		uxtb	r3, r3
 2782 003c FB73     		strb	r3, [r7, #15]
 2783              	.L182:
1807:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 2784              		.loc 1 1807 0
 2785 003e 97F90F30 		ldrsb	r3, [r7, #15]
 2786 0042 002B     		cmp	r3, #0
 2787 0044 E7DC     		bgt	.L186
 2788              	.L185:
1876:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1877:../../../FreeRTOS_9_0/Source/queue.c **** 
1878:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 2789              		.loc 1 1878 0
 2790 0046 7B68     		ldr	r3, [r7, #4]
 2791 0048 FF22     		movs	r2, #255
 2792 004a 83F84520 		strb	r2, [r3, #69]
 2793              	.LBE146:
1879:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1880:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 2794              		.loc 1 1880 0
 2795 004e FFF7FEFF 		bl	vPortExitCritical
1881:../../../FreeRTOS_9_0/Source/queue.c **** 
1882:../../../FreeRTOS_9_0/Source/queue.c **** 	/* Do the same for the Rx lock. */
1883:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 2796              		.loc 1 1883 0
 2797 0052 FFF7FEFF 		bl	vPortEnterCritical
 2798              	.LBB147:
1884:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1885:../../../FreeRTOS_9_0/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
 2799              		.loc 1 1885 0
 2800 0056 7B68     		ldr	r3, [r7, #4]
 2801 0058 93F84430 		ldrb	r3, [r3, #68]
 2802 005c BB73     		strb	r3, [r7, #14]
1886:../../../FreeRTOS_9_0/Source/queue.c **** 
1887:../../../FreeRTOS_9_0/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
 2803              		.loc 1 1887 0
 2804 005e 13E0     		b	.L187
 2805              	.L191:
1888:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1889:../../../FreeRTOS_9_0/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2806              		.loc 1 1889 0
 2807 0060 7B68     		ldr	r3, [r7, #4]
 2808 0062 1B69     		ldr	r3, [r3, #16]
 2809 0064 002B     		cmp	r3, #0
 2810 0066 0ED0     		beq	.L188
1890:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1891:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2811              		.loc 1 1891 0
 2812 0068 7B68     		ldr	r3, [r7, #4]
 2813 006a 1033     		adds	r3, r3, #16
 2814 006c 1846     		mov	r0, r3
 2815 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  /tmp/ccHyCAGW.s 			page 88


 2816 0072 0346     		mov	r3, r0
 2817 0074 002B     		cmp	r3, #0
 2818 0076 01D0     		beq	.L189
1892:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1893:../../../FreeRTOS_9_0/Source/queue.c **** 					vTaskMissedYield();
 2819              		.loc 1 1893 0
 2820 0078 FFF7FEFF 		bl	vTaskMissedYield
 2821              	.L189:
1894:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1895:../../../FreeRTOS_9_0/Source/queue.c **** 				else
1896:../../../FreeRTOS_9_0/Source/queue.c **** 				{
1897:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:../../../FreeRTOS_9_0/Source/queue.c **** 				}
1899:../../../FreeRTOS_9_0/Source/queue.c **** 
1900:../../../FreeRTOS_9_0/Source/queue.c **** 				--cRxLock;
 2822              		.loc 1 1900 0
 2823 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2824 007e 013B     		subs	r3, r3, #1
 2825 0080 DBB2     		uxtb	r3, r3
 2826 0082 BB73     		strb	r3, [r7, #14]
 2827 0084 00E0     		b	.L187
 2828              	.L188:
1901:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1902:../../../FreeRTOS_9_0/Source/queue.c **** 			else
1903:../../../FreeRTOS_9_0/Source/queue.c **** 			{
1904:../../../FreeRTOS_9_0/Source/queue.c **** 				break;
 2829              		.loc 1 1904 0
 2830 0086 03E0     		b	.L190
 2831              	.L187:
1887:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 2832              		.loc 1 1887 0
 2833 0088 97F90E30 		ldrsb	r3, [r7, #14]
 2834 008c 002B     		cmp	r3, #0
 2835 008e E7DC     		bgt	.L191
 2836              	.L190:
1905:../../../FreeRTOS_9_0/Source/queue.c **** 			}
1906:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1907:../../../FreeRTOS_9_0/Source/queue.c **** 
1908:../../../FreeRTOS_9_0/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 2837              		.loc 1 1908 0
 2838 0090 7B68     		ldr	r3, [r7, #4]
 2839 0092 FF22     		movs	r2, #255
 2840 0094 83F84420 		strb	r2, [r3, #68]
 2841              	.LBE147:
1909:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1910:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 2842              		.loc 1 1910 0
 2843 0098 FFF7FEFF 		bl	vPortExitCritical
1911:../../../FreeRTOS_9_0/Source/queue.c **** }
 2844              		.loc 1 1911 0
 2845 009c 1037     		adds	r7, r7, #16
 2846              	.LCFI107:
 2847              		.cfi_def_cfa_offset 8
 2848 009e BD46     		mov	sp, r7
 2849              	.LCFI108:
 2850              		.cfi_def_cfa_register 13
 2851              		@ sp needed
ARM GAS  /tmp/ccHyCAGW.s 			page 89


 2852 00a0 80BD     		pop	{r7, pc}
 2853              		.cfi_endproc
 2854              	.LFE25:
 2856 00a2 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 2857              		.align	2
 2858              		.thumb
 2859              		.thumb_func
 2861              	prvIsQueueEmpty:
 2862              	.LFB26:
1912:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1913:../../../FreeRTOS_9_0/Source/queue.c **** 
1914:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:../../../FreeRTOS_9_0/Source/queue.c **** {
 2863              		.loc 1 1915 0
 2864              		.cfi_startproc
 2865              		@ args = 0, pretend = 0, frame = 16
 2866              		@ frame_needed = 1, uses_anonymous_args = 0
 2867 0000 80B5     		push	{r7, lr}
 2868              	.LCFI109:
 2869              		.cfi_def_cfa_offset 8
 2870              		.cfi_offset 7, -8
 2871              		.cfi_offset 14, -4
 2872 0002 84B0     		sub	sp, sp, #16
 2873              	.LCFI110:
 2874              		.cfi_def_cfa_offset 24
 2875 0004 00AF     		add	r7, sp, #0
 2876              	.LCFI111:
 2877              		.cfi_def_cfa_register 7
 2878 0006 7860     		str	r0, [r7, #4]
1916:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1917:../../../FreeRTOS_9_0/Source/queue.c **** 
1918:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 2879              		.loc 1 1918 0
 2880 0008 FFF7FEFF 		bl	vPortEnterCritical
1919:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1920:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 2881              		.loc 1 1920 0
 2882 000c 7B68     		ldr	r3, [r7, #4]
 2883 000e 9B6B     		ldr	r3, [r3, #56]
 2884 0010 002B     		cmp	r3, #0
 2885 0012 02D1     		bne	.L193
1921:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1922:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdTRUE;
 2886              		.loc 1 1922 0
 2887 0014 0123     		movs	r3, #1
 2888 0016 FB60     		str	r3, [r7, #12]
 2889 0018 01E0     		b	.L194
 2890              	.L193:
1923:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1924:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1925:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1926:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFALSE;
 2891              		.loc 1 1926 0
 2892 001a 0023     		movs	r3, #0
 2893 001c FB60     		str	r3, [r7, #12]
 2894              	.L194:
1927:../../../FreeRTOS_9_0/Source/queue.c **** 		}
ARM GAS  /tmp/ccHyCAGW.s 			page 90


1928:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1929:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 2895              		.loc 1 1929 0
 2896 001e FFF7FEFF 		bl	vPortExitCritical
1930:../../../FreeRTOS_9_0/Source/queue.c **** 
1931:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 2897              		.loc 1 1931 0
 2898 0022 FB68     		ldr	r3, [r7, #12]
1932:../../../FreeRTOS_9_0/Source/queue.c **** }
 2899              		.loc 1 1932 0
 2900 0024 1846     		mov	r0, r3
 2901 0026 1037     		adds	r7, r7, #16
 2902              	.LCFI112:
 2903              		.cfi_def_cfa_offset 8
 2904 0028 BD46     		mov	sp, r7
 2905              	.LCFI113:
 2906              		.cfi_def_cfa_register 13
 2907              		@ sp needed
 2908 002a 80BD     		pop	{r7, pc}
 2909              		.cfi_endproc
 2910              	.LFE26:
 2912              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2913              		.align	2
 2914              		.global	xQueueIsQueueEmptyFromISR
 2915              		.thumb
 2916              		.thumb_func
 2918              	xQueueIsQueueEmptyFromISR:
 2919              	.LFB27:
1933:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1934:../../../FreeRTOS_9_0/Source/queue.c **** 
1935:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:../../../FreeRTOS_9_0/Source/queue.c **** {
 2920              		.loc 1 1936 0
 2921              		.cfi_startproc
 2922              		@ args = 0, pretend = 0, frame = 16
 2923              		@ frame_needed = 1, uses_anonymous_args = 0
 2924              		@ link register save eliminated.
 2925 0000 80B4     		push	{r7}
 2926              	.LCFI114:
 2927              		.cfi_def_cfa_offset 4
 2928              		.cfi_offset 7, -4
 2929 0002 85B0     		sub	sp, sp, #20
 2930              	.LCFI115:
 2931              		.cfi_def_cfa_offset 24
 2932 0004 00AF     		add	r7, sp, #0
 2933              	.LCFI116:
 2934              		.cfi_def_cfa_register 7
 2935 0006 7860     		str	r0, [r7, #4]
1937:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1938:../../../FreeRTOS_9_0/Source/queue.c **** 
1939:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( xQueue );
 2936              		.loc 1 1939 0
 2937 0008 7B68     		ldr	r3, [r7, #4]
 2938 000a 002B     		cmp	r3, #0
 2939 000c 09D1     		bne	.L197
 2940              	.LBB148:
 2941              	.LBB149:
ARM GAS  /tmp/ccHyCAGW.s 			page 91


 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2942              		.loc 2 237 0 discriminator 1
 2943              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2944 000e 4FF05003 			mov r3, #80												
 2945 0012 83F31188 		msr basepri, r3											
 2946 0016 BFF36F8F 		isb														
 2947 001a BFF34F8F 		dsb														
 2948              	
 2949              	@ 0 "" 2
 2950              		.thumb
 2951 001e BB60     		str	r3, [r7, #8]
 2952              	.L198:
 2953              	.LBE149:
 2954              	.LBE148:
 2955              		.loc 1 1939 0 discriminator 1
 2956 0020 FEE7     		b	.L198
 2957              	.L197:
1940:../../../FreeRTOS_9_0/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2958              		.loc 1 1940 0
 2959 0022 7B68     		ldr	r3, [r7, #4]
 2960 0024 9B6B     		ldr	r3, [r3, #56]
 2961 0026 002B     		cmp	r3, #0
 2962 0028 02D1     		bne	.L199
1941:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1942:../../../FreeRTOS_9_0/Source/queue.c **** 		xReturn = pdTRUE;
 2963              		.loc 1 1942 0
 2964 002a 0123     		movs	r3, #1
 2965 002c FB60     		str	r3, [r7, #12]
 2966 002e 01E0     		b	.L200
 2967              	.L199:
1943:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1944:../../../FreeRTOS_9_0/Source/queue.c **** 	else
1945:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1946:../../../FreeRTOS_9_0/Source/queue.c **** 		xReturn = pdFALSE;
 2968              		.loc 1 1946 0
 2969 0030 0023     		movs	r3, #0
 2970 0032 FB60     		str	r3, [r7, #12]
 2971              	.L200:
1947:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1948:../../../FreeRTOS_9_0/Source/queue.c **** 
1949:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 2972              		.loc 1 1949 0
 2973 0034 FB68     		ldr	r3, [r7, #12]
1950:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2974              		.loc 1 1950 0
 2975 0036 1846     		mov	r0, r3
 2976 0038 1437     		adds	r7, r7, #20
 2977              	.LCFI117:
 2978              		.cfi_def_cfa_offset 4
 2979 003a BD46     		mov	sp, r7
 2980              	.LCFI118:
 2981              		.cfi_def_cfa_register 13
 2982              		@ sp needed
 2983 003c 5DF8047B 		ldr	r7, [sp], #4
 2984              	.LCFI119:
 2985              		.cfi_restore 7
 2986              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccHyCAGW.s 			page 92


 2987 0040 7047     		bx	lr
 2988              		.cfi_endproc
 2989              	.LFE27:
 2991 0042 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
 2992              		.align	2
 2993              		.thumb
 2994              		.thumb_func
 2996              	prvIsQueueFull:
 2997              	.LFB28:
1951:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1952:../../../FreeRTOS_9_0/Source/queue.c **** 
1953:../../../FreeRTOS_9_0/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:../../../FreeRTOS_9_0/Source/queue.c **** {
 2998              		.loc 1 1954 0
 2999              		.cfi_startproc
 3000              		@ args = 0, pretend = 0, frame = 16
 3001              		@ frame_needed = 1, uses_anonymous_args = 0
 3002 0000 80B5     		push	{r7, lr}
 3003              	.LCFI120:
 3004              		.cfi_def_cfa_offset 8
 3005              		.cfi_offset 7, -8
 3006              		.cfi_offset 14, -4
 3007 0002 84B0     		sub	sp, sp, #16
 3008              	.LCFI121:
 3009              		.cfi_def_cfa_offset 24
 3010 0004 00AF     		add	r7, sp, #0
 3011              	.LCFI122:
 3012              		.cfi_def_cfa_register 7
 3013 0006 7860     		str	r0, [r7, #4]
1955:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1956:../../../FreeRTOS_9_0/Source/queue.c **** 
1957:../../../FreeRTOS_9_0/Source/queue.c **** 	taskENTER_CRITICAL();
 3014              		.loc 1 1957 0
 3015 0008 FFF7FEFF 		bl	vPortEnterCritical
1958:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1959:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3016              		.loc 1 1959 0
 3017 000c 7B68     		ldr	r3, [r7, #4]
 3018 000e 9A6B     		ldr	r2, [r3, #56]
 3019 0010 7B68     		ldr	r3, [r7, #4]
 3020 0012 DB6B     		ldr	r3, [r3, #60]
 3021 0014 9A42     		cmp	r2, r3
 3022 0016 02D1     		bne	.L203
1960:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1961:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdTRUE;
 3023              		.loc 1 1961 0
 3024 0018 0123     		movs	r3, #1
 3025 001a FB60     		str	r3, [r7, #12]
 3026 001c 01E0     		b	.L204
 3027              	.L203:
1962:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1963:../../../FreeRTOS_9_0/Source/queue.c **** 		else
1964:../../../FreeRTOS_9_0/Source/queue.c **** 		{
1965:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFALSE;
 3028              		.loc 1 1965 0
 3029 001e 0023     		movs	r3, #0
 3030 0020 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccHyCAGW.s 			page 93


 3031              	.L204:
1966:../../../FreeRTOS_9_0/Source/queue.c **** 		}
1967:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1968:../../../FreeRTOS_9_0/Source/queue.c **** 	taskEXIT_CRITICAL();
 3032              		.loc 1 1968 0
 3033 0022 FFF7FEFF 		bl	vPortExitCritical
1969:../../../FreeRTOS_9_0/Source/queue.c **** 
1970:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 3034              		.loc 1 1970 0
 3035 0026 FB68     		ldr	r3, [r7, #12]
1971:../../../FreeRTOS_9_0/Source/queue.c **** }
 3036              		.loc 1 1971 0
 3037 0028 1846     		mov	r0, r3
 3038 002a 1037     		adds	r7, r7, #16
 3039              	.LCFI123:
 3040              		.cfi_def_cfa_offset 8
 3041 002c BD46     		mov	sp, r7
 3042              	.LCFI124:
 3043              		.cfi_def_cfa_register 13
 3044              		@ sp needed
 3045 002e 80BD     		pop	{r7, pc}
 3046              		.cfi_endproc
 3047              	.LFE28:
 3049              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3050              		.align	2
 3051              		.global	xQueueIsQueueFullFromISR
 3052              		.thumb
 3053              		.thumb_func
 3055              	xQueueIsQueueFullFromISR:
 3056              	.LFB29:
1972:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1973:../../../FreeRTOS_9_0/Source/queue.c **** 
1974:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:../../../FreeRTOS_9_0/Source/queue.c **** {
 3057              		.loc 1 1975 0
 3058              		.cfi_startproc
 3059              		@ args = 0, pretend = 0, frame = 16
 3060              		@ frame_needed = 1, uses_anonymous_args = 0
 3061              		@ link register save eliminated.
 3062 0000 80B4     		push	{r7}
 3063              	.LCFI125:
 3064              		.cfi_def_cfa_offset 4
 3065              		.cfi_offset 7, -4
 3066 0002 85B0     		sub	sp, sp, #20
 3067              	.LCFI126:
 3068              		.cfi_def_cfa_offset 24
 3069 0004 00AF     		add	r7, sp, #0
 3070              	.LCFI127:
 3071              		.cfi_def_cfa_register 7
 3072 0006 7860     		str	r0, [r7, #4]
1976:../../../FreeRTOS_9_0/Source/queue.c **** BaseType_t xReturn;
1977:../../../FreeRTOS_9_0/Source/queue.c **** 
1978:../../../FreeRTOS_9_0/Source/queue.c **** 	configASSERT( xQueue );
 3073              		.loc 1 1978 0
 3074 0008 7B68     		ldr	r3, [r7, #4]
 3075 000a 002B     		cmp	r3, #0
 3076 000c 09D1     		bne	.L207
ARM GAS  /tmp/ccHyCAGW.s 			page 94


 3077              	.LBB150:
 3078              	.LBB151:
 237:../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3079              		.loc 2 237 0 discriminator 1
 3080              	@ 237 "../../../FreeRTOS_9_0/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3081 000e 4FF05003 			mov r3, #80												
 3082 0012 83F31188 		msr basepri, r3											
 3083 0016 BFF36F8F 		isb														
 3084 001a BFF34F8F 		dsb														
 3085              	
 3086              	@ 0 "" 2
 3087              		.thumb
 3088 001e BB60     		str	r3, [r7, #8]
 3089              	.L208:
 3090              	.LBE151:
 3091              	.LBE150:
 3092              		.loc 1 1978 0 discriminator 1
 3093 0020 FEE7     		b	.L208
 3094              	.L207:
1979:../../../FreeRTOS_9_0/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3095              		.loc 1 1979 0
 3096 0022 7B68     		ldr	r3, [r7, #4]
 3097 0024 9A6B     		ldr	r2, [r3, #56]
 3098 0026 7B68     		ldr	r3, [r7, #4]
 3099 0028 DB6B     		ldr	r3, [r3, #60]
 3100 002a 9A42     		cmp	r2, r3
 3101 002c 02D1     		bne	.L209
1980:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1981:../../../FreeRTOS_9_0/Source/queue.c **** 		xReturn = pdTRUE;
 3102              		.loc 1 1981 0
 3103 002e 0123     		movs	r3, #1
 3104 0030 FB60     		str	r3, [r7, #12]
 3105 0032 01E0     		b	.L210
 3106              	.L209:
1982:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1983:../../../FreeRTOS_9_0/Source/queue.c **** 	else
1984:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1985:../../../FreeRTOS_9_0/Source/queue.c **** 		xReturn = pdFALSE;
 3107              		.loc 1 1985 0
 3108 0034 0023     		movs	r3, #0
 3109 0036 FB60     		str	r3, [r7, #12]
 3110              	.L210:
1986:../../../FreeRTOS_9_0/Source/queue.c **** 	}
1987:../../../FreeRTOS_9_0/Source/queue.c **** 
1988:../../../FreeRTOS_9_0/Source/queue.c **** 	return xReturn;
 3111              		.loc 1 1988 0
 3112 0038 FB68     		ldr	r3, [r7, #12]
1989:../../../FreeRTOS_9_0/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3113              		.loc 1 1989 0
 3114 003a 1846     		mov	r0, r3
 3115 003c 1437     		adds	r7, r7, #20
 3116              	.LCFI128:
 3117              		.cfi_def_cfa_offset 4
 3118 003e BD46     		mov	sp, r7
 3119              	.LCFI129:
 3120              		.cfi_def_cfa_register 13
 3121              		@ sp needed
ARM GAS  /tmp/ccHyCAGW.s 			page 95


 3122 0040 5DF8047B 		ldr	r7, [sp], #4
 3123              	.LCFI130:
 3124              		.cfi_restore 7
 3125              		.cfi_def_cfa_offset 0
 3126 0044 7047     		bx	lr
 3127              		.cfi_endproc
 3128              	.LFE29:
 3130 0046 00BF     		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3131              		.align	2
 3132              		.global	vQueueAddToRegistry
 3133              		.thumb
 3134              		.thumb_func
 3136              	vQueueAddToRegistry:
 3137              	.LFB30:
1990:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
1991:../../../FreeRTOS_9_0/Source/queue.c **** 
1992:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:../../../FreeRTOS_9_0/Source/queue.c **** 
1994:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:../../../FreeRTOS_9_0/Source/queue.c **** 	{
1996:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
1997:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:../../../FreeRTOS_9_0/Source/queue.c **** 
1999:../../../FreeRTOS_9_0/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:../../../FreeRTOS_9_0/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:../../../FreeRTOS_9_0/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:../../../FreeRTOS_9_0/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2003:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2004:../../../FreeRTOS_9_0/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2006:../../../FreeRTOS_9_0/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:../../../FreeRTOS_9_0/Source/queue.c **** 				posting? */
2008:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2010:../../../FreeRTOS_9_0/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:../../../FreeRTOS_9_0/Source/queue.c **** 					return indicating that we need to block. */
2012:../../../FreeRTOS_9_0/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:../../../FreeRTOS_9_0/Source/queue.c **** 					portENABLE_INTERRUPTS();
2014:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_BLOCKED;
2015:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2016:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2017:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2018:../../../FreeRTOS_9_0/Source/queue.c **** 					portENABLE_INTERRUPTS();
2019:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_FULL;
2020:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2021:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2022:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2023:../../../FreeRTOS_9_0/Source/queue.c **** 		portENABLE_INTERRUPTS();
2024:../../../FreeRTOS_9_0/Source/queue.c **** 
2025:../../../FreeRTOS_9_0/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2026:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2027:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2029:../../../FreeRTOS_9_0/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:../../../FreeRTOS_9_0/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = pdPASS;
2032:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 96


2033:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2036:../../../FreeRTOS_9_0/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:../../../FreeRTOS_9_0/Source/queue.c **** 					into the ready list as we are within a critical section.
2038:../../../FreeRTOS_9_0/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:../../../FreeRTOS_9_0/Source/queue.c **** 					the event were caused from within an interrupt. */
2040:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2042:../../../FreeRTOS_9_0/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:../../../FreeRTOS_9_0/Source/queue.c **** 						that a yield might be appropriate. */
2044:../../../FreeRTOS_9_0/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2046:../../../FreeRTOS_9_0/Source/queue.c **** 					else
2047:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2048:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2050:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2051:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2052:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2053:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2055:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2056:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2057:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2058:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2059:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2060:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2061:../../../FreeRTOS_9_0/Source/queue.c **** 		portENABLE_INTERRUPTS();
2062:../../../FreeRTOS_9_0/Source/queue.c **** 
2063:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
2064:../../../FreeRTOS_9_0/Source/queue.c **** 	}
2065:../../../FreeRTOS_9_0/Source/queue.c **** 
2066:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2068:../../../FreeRTOS_9_0/Source/queue.c **** 
2069:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:../../../FreeRTOS_9_0/Source/queue.c **** 
2071:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:../../../FreeRTOS_9_0/Source/queue.c **** 	{
2073:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
2074:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:../../../FreeRTOS_9_0/Source/queue.c **** 
2076:../../../FreeRTOS_9_0/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:../../../FreeRTOS_9_0/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:../../../FreeRTOS_9_0/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:../../../FreeRTOS_9_0/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2080:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2081:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2083:../../../FreeRTOS_9_0/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:../../../FreeRTOS_9_0/Source/queue.c **** 				leave with nothing? */
2085:../../../FreeRTOS_9_0/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2087:../../../FreeRTOS_9_0/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:../../../FreeRTOS_9_0/Source/queue.c **** 					indicating that we need to block. */
2089:../../../FreeRTOS_9_0/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
ARM GAS  /tmp/ccHyCAGW.s 			page 97


2090:../../../FreeRTOS_9_0/Source/queue.c **** 					portENABLE_INTERRUPTS();
2091:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_BLOCKED;
2092:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2093:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2094:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2095:../../../FreeRTOS_9_0/Source/queue.c **** 					portENABLE_INTERRUPTS();
2096:../../../FreeRTOS_9_0/Source/queue.c **** 					return errQUEUE_FULL;
2097:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2098:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2099:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2100:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2101:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2103:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2104:../../../FreeRTOS_9_0/Source/queue.c **** 		portENABLE_INTERRUPTS();
2105:../../../FreeRTOS_9_0/Source/queue.c **** 
2106:../../../FreeRTOS_9_0/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2107:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2108:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2110:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Data is available from the queue. */
2111:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:../../../FreeRTOS_9_0/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2114:../../../FreeRTOS_9_0/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2116:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2117:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2118:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2120:../../../FreeRTOS_9_0/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:../../../FreeRTOS_9_0/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:../../../FreeRTOS_9_0/Source/queue.c **** 
2123:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = pdPASS;
2124:../../../FreeRTOS_9_0/Source/queue.c **** 
2125:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2128:../../../FreeRTOS_9_0/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:../../../FreeRTOS_9_0/Source/queue.c **** 					into the ready list as we are within a critical section.
2130:../../../FreeRTOS_9_0/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:../../../FreeRTOS_9_0/Source/queue.c **** 					the event were caused from within an interrupt. */
2132:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2134:../../../FreeRTOS_9_0/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2136:../../../FreeRTOS_9_0/Source/queue.c **** 					else
2137:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2138:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2140:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2141:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2142:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2143:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2145:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2146:../../../FreeRTOS_9_0/Source/queue.c **** 			else
ARM GAS  /tmp/ccHyCAGW.s 			page 98


2147:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2148:../../../FreeRTOS_9_0/Source/queue.c **** 				xReturn = pdFAIL;
2149:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2150:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2151:../../../FreeRTOS_9_0/Source/queue.c **** 		portENABLE_INTERRUPTS();
2152:../../../FreeRTOS_9_0/Source/queue.c **** 
2153:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
2154:../../../FreeRTOS_9_0/Source/queue.c **** 	}
2155:../../../FreeRTOS_9_0/Source/queue.c **** 
2156:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2158:../../../FreeRTOS_9_0/Source/queue.c **** 
2159:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:../../../FreeRTOS_9_0/Source/queue.c **** 
2161:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:../../../FreeRTOS_9_0/Source/queue.c **** 	{
2163:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:../../../FreeRTOS_9_0/Source/queue.c **** 
2165:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:../../../FreeRTOS_9_0/Source/queue.c **** 		exit without doing anything. */
2167:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2169:../../../FreeRTOS_9_0/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:../../../FreeRTOS_9_0/Source/queue.c **** 
2171:../../../FreeRTOS_9_0/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:../../../FreeRTOS_9_0/Source/queue.c **** 			co-routine has not already been woken. */
2173:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2175:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2177:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2179:../../../FreeRTOS_9_0/Source/queue.c **** 						return pdTRUE;
2180:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2181:../../../FreeRTOS_9_0/Source/queue.c **** 					else
2182:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2183:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2185:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2186:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2187:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2188:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2190:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2191:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2192:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2193:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2195:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2196:../../../FreeRTOS_9_0/Source/queue.c **** 		else
2197:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2198:../../../FreeRTOS_9_0/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2200:../../../FreeRTOS_9_0/Source/queue.c **** 
2201:../../../FreeRTOS_9_0/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:../../../FreeRTOS_9_0/Source/queue.c **** 	}
2203:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 99


2204:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2206:../../../FreeRTOS_9_0/Source/queue.c **** 
2207:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:../../../FreeRTOS_9_0/Source/queue.c **** 
2209:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:../../../FreeRTOS_9_0/Source/queue.c **** 	{
2211:../../../FreeRTOS_9_0/Source/queue.c **** 	BaseType_t xReturn;
2212:../../../FreeRTOS_9_0/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:../../../FreeRTOS_9_0/Source/queue.c **** 
2214:../../../FreeRTOS_9_0/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:../../../FreeRTOS_9_0/Source/queue.c **** 		not then just leave without doing anything. */
2216:../../../FreeRTOS_9_0/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2218:../../../FreeRTOS_9_0/Source/queue.c **** 			/* Copy the data from the queue. */
2219:../../../FreeRTOS_9_0/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:../../../FreeRTOS_9_0/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2222:../../../FreeRTOS_9_0/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2224:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2225:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2226:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2228:../../../FreeRTOS_9_0/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:../../../FreeRTOS_9_0/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:../../../FreeRTOS_9_0/Source/queue.c **** 
2231:../../../FreeRTOS_9_0/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2233:../../../FreeRTOS_9_0/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2235:../../../FreeRTOS_9_0/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2237:../../../FreeRTOS_9_0/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2239:../../../FreeRTOS_9_0/Source/queue.c **** 					else
2240:../../../FreeRTOS_9_0/Source/queue.c **** 					{
2241:../../../FreeRTOS_9_0/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:../../../FreeRTOS_9_0/Source/queue.c **** 					}
2243:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2244:../../../FreeRTOS_9_0/Source/queue.c **** 				else
2245:../../../FreeRTOS_9_0/Source/queue.c **** 				{
2246:../../../FreeRTOS_9_0/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:../../../FreeRTOS_9_0/Source/queue.c **** 				}
2248:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2249:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2250:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2251:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2253:../../../FreeRTOS_9_0/Source/queue.c **** 
2254:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdPASS;
2255:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2256:../../../FreeRTOS_9_0/Source/queue.c **** 		else
2257:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2258:../../../FreeRTOS_9_0/Source/queue.c **** 			xReturn = pdFAIL;
2259:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2260:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 100


2261:../../../FreeRTOS_9_0/Source/queue.c **** 		return xReturn;
2262:../../../FreeRTOS_9_0/Source/queue.c **** 	}
2263:../../../FreeRTOS_9_0/Source/queue.c **** 
2264:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2266:../../../FreeRTOS_9_0/Source/queue.c **** 
2267:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:../../../FreeRTOS_9_0/Source/queue.c **** 
2269:../../../FreeRTOS_9_0/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 3138              		.loc 1 2270 0
 3139              		.cfi_startproc
 3140              		@ args = 0, pretend = 0, frame = 16
 3141              		@ frame_needed = 1, uses_anonymous_args = 0
 3142              		@ link register save eliminated.
 3143 0000 80B4     		push	{r7}
 3144              	.LCFI131:
 3145              		.cfi_def_cfa_offset 4
 3146              		.cfi_offset 7, -4
 3147 0002 85B0     		sub	sp, sp, #20
 3148              	.LCFI132:
 3149              		.cfi_def_cfa_offset 24
 3150 0004 00AF     		add	r7, sp, #0
 3151              	.LCFI133:
 3152              		.cfi_def_cfa_register 7
 3153 0006 7860     		str	r0, [r7, #4]
 3154 0008 3960     		str	r1, [r7]
2271:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t ux;
2272:../../../FreeRTOS_9_0/Source/queue.c **** 
2273:../../../FreeRTOS_9_0/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:../../../FreeRTOS_9_0/Source/queue.c **** 		a free slot. */
2275:../../../FreeRTOS_9_0/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3155              		.loc 1 2275 0
 3156 000a 0023     		movs	r3, #0
 3157 000c FB60     		str	r3, [r7, #12]
 3158 000e 14E0     		b	.L213
 3159              	.L216:
2276:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2277:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3160              		.loc 1 2277 0
 3161 0010 0E4A     		ldr	r2, .L217
 3162 0012 FB68     		ldr	r3, [r7, #12]
 3163 0014 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3164 0018 002B     		cmp	r3, #0
 3165 001a 0BD1     		bne	.L214
2278:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2279:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Store the information on this queue. */
2280:../../../FreeRTOS_9_0/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3166              		.loc 1 2280 0
 3167 001c 0B49     		ldr	r1, .L217
 3168 001e FB68     		ldr	r3, [r7, #12]
 3169 0020 3A68     		ldr	r2, [r7]
 3170 0022 41F83320 		str	r2, [r1, r3, lsl #3]
2281:../../../FreeRTOS_9_0/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3171              		.loc 1 2281 0
 3172 0026 094A     		ldr	r2, .L217
 3173 0028 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccHyCAGW.s 			page 101


 3174 002a DB00     		lsls	r3, r3, #3
 3175 002c 1344     		add	r3, r3, r2
 3176 002e 7A68     		ldr	r2, [r7, #4]
 3177 0030 5A60     		str	r2, [r3, #4]
2282:../../../FreeRTOS_9_0/Source/queue.c **** 
2283:../../../FreeRTOS_9_0/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2284:../../../FreeRTOS_9_0/Source/queue.c **** 				break;
 3178              		.loc 1 2284 0
 3179 0032 05E0     		b	.L212
 3180              	.L214:
2275:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3181              		.loc 1 2275 0 discriminator 2
 3182 0034 FB68     		ldr	r3, [r7, #12]
 3183 0036 0133     		adds	r3, r3, #1
 3184 0038 FB60     		str	r3, [r7, #12]
 3185              	.L213:
2275:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3186              		.loc 1 2275 0 is_stmt 0 discriminator 1
 3187 003a FB68     		ldr	r3, [r7, #12]
 3188 003c 072B     		cmp	r3, #7
 3189 003e E7D9     		bls	.L216
 3190              	.L212:
2285:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2286:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2287:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2288:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2289:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2290:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2291:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 3191              		.loc 1 2291 0 is_stmt 1
 3192 0040 1437     		adds	r7, r7, #20
 3193              	.LCFI134:
 3194              		.cfi_def_cfa_offset 4
 3195 0042 BD46     		mov	sp, r7
 3196              	.LCFI135:
 3197              		.cfi_def_cfa_register 13
 3198              		@ sp needed
 3199 0044 5DF8047B 		ldr	r7, [sp], #4
 3200              	.LCFI136:
 3201              		.cfi_restore 7
 3202              		.cfi_def_cfa_offset 0
 3203 0048 7047     		bx	lr
 3204              	.L218:
 3205 004a 00BF     		.align	2
 3206              	.L217:
 3207 004c 00000000 		.word	xQueueRegistry
 3208              		.cfi_endproc
 3209              	.LFE30:
 3211              		.section	.text.pcQueueGetName,"ax",%progbits
 3212              		.align	2
 3213              		.global	pcQueueGetName
 3214              		.thumb
 3215              		.thumb_func
 3217              	pcQueueGetName:
 3218              	.LFB31:
2292:../../../FreeRTOS_9_0/Source/queue.c **** 
2293:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
ARM GAS  /tmp/ccHyCAGW.s 			page 102


2294:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2295:../../../FreeRTOS_9_0/Source/queue.c **** 
2296:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:../../../FreeRTOS_9_0/Source/queue.c **** 
2298:../../../FreeRTOS_9_0/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 3219              		.loc 1 2299 0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 16
 3222              		@ frame_needed = 1, uses_anonymous_args = 0
 3223              		@ link register save eliminated.
 3224 0000 80B4     		push	{r7}
 3225              	.LCFI137:
 3226              		.cfi_def_cfa_offset 4
 3227              		.cfi_offset 7, -4
 3228 0002 85B0     		sub	sp, sp, #20
 3229              	.LCFI138:
 3230              		.cfi_def_cfa_offset 24
 3231 0004 00AF     		add	r7, sp, #0
 3232              	.LCFI139:
 3233              		.cfi_def_cfa_register 7
 3234 0006 7860     		str	r0, [r7, #4]
2300:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t ux;
2301:../../../FreeRTOS_9_0/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
 3235              		.loc 1 2301 0
 3236 0008 0023     		movs	r3, #0
 3237 000a BB60     		str	r3, [r7, #8]
2302:../../../FreeRTOS_9_0/Source/queue.c **** 
2303:../../../FreeRTOS_9_0/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:../../../FreeRTOS_9_0/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2305:../../../FreeRTOS_9_0/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3238              		.loc 1 2305 0
 3239 000c 0023     		movs	r3, #0
 3240 000e FB60     		str	r3, [r7, #12]
 3241 0010 10E0     		b	.L220
 3242              	.L223:
2306:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2307:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3243              		.loc 1 2307 0
 3244 0012 0D4A     		ldr	r2, .L225
 3245 0014 FB68     		ldr	r3, [r7, #12]
 3246 0016 DB00     		lsls	r3, r3, #3
 3247 0018 1344     		add	r3, r3, r2
 3248 001a 5A68     		ldr	r2, [r3, #4]
 3249 001c 7B68     		ldr	r3, [r7, #4]
 3250 001e 9A42     		cmp	r2, r3
 3251 0020 05D1     		bne	.L221
2308:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2309:../../../FreeRTOS_9_0/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3252              		.loc 1 2309 0
 3253 0022 094A     		ldr	r2, .L225
 3254 0024 FB68     		ldr	r3, [r7, #12]
 3255 0026 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3256 002a BB60     		str	r3, [r7, #8]
2310:../../../FreeRTOS_9_0/Source/queue.c **** 				break;
 3257              		.loc 1 2310 0
 3258 002c 05E0     		b	.L222
ARM GAS  /tmp/ccHyCAGW.s 			page 103


 3259              	.L221:
2305:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3260              		.loc 1 2305 0 discriminator 2
 3261 002e FB68     		ldr	r3, [r7, #12]
 3262 0030 0133     		adds	r3, r3, #1
 3263 0032 FB60     		str	r3, [r7, #12]
 3264              	.L220:
2305:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3265              		.loc 1 2305 0 is_stmt 0 discriminator 1
 3266 0034 FB68     		ldr	r3, [r7, #12]
 3267 0036 072B     		cmp	r3, #7
 3268 0038 EBD9     		bls	.L223
 3269              	.L222:
2311:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2312:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2313:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2314:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2315:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2316:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2317:../../../FreeRTOS_9_0/Source/queue.c **** 
2318:../../../FreeRTOS_9_0/Source/queue.c **** 		return pcReturn;
 3270              		.loc 1 2318 0 is_stmt 1
 3271 003a BB68     		ldr	r3, [r7, #8]
2319:../../../FreeRTOS_9_0/Source/queue.c **** 	}
 3272              		.loc 1 2319 0
 3273 003c 1846     		mov	r0, r3
 3274 003e 1437     		adds	r7, r7, #20
 3275              	.LCFI140:
 3276              		.cfi_def_cfa_offset 4
 3277 0040 BD46     		mov	sp, r7
 3278              	.LCFI141:
 3279              		.cfi_def_cfa_register 13
 3280              		@ sp needed
 3281 0042 5DF8047B 		ldr	r7, [sp], #4
 3282              	.LCFI142:
 3283              		.cfi_restore 7
 3284              		.cfi_def_cfa_offset 0
 3285 0046 7047     		bx	lr
 3286              	.L226:
 3287              		.align	2
 3288              	.L225:
 3289 0048 00000000 		.word	xQueueRegistry
 3290              		.cfi_endproc
 3291              	.LFE31:
 3293              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3294              		.align	2
 3295              		.global	vQueueUnregisterQueue
 3296              		.thumb
 3297              		.thumb_func
 3299              	vQueueUnregisterQueue:
 3300              	.LFB32:
2320:../../../FreeRTOS_9_0/Source/queue.c **** 
2321:../../../FreeRTOS_9_0/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:../../../FreeRTOS_9_0/Source/queue.c **** /*-----------------------------------------------------------*/
2323:../../../FreeRTOS_9_0/Source/queue.c **** 
2324:../../../FreeRTOS_9_0/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:../../../FreeRTOS_9_0/Source/queue.c **** 
ARM GAS  /tmp/ccHyCAGW.s 			page 104


2326:../../../FreeRTOS_9_0/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:../../../FreeRTOS_9_0/Source/queue.c **** 	{
 3301              		.loc 1 2327 0
 3302              		.cfi_startproc
 3303              		@ args = 0, pretend = 0, frame = 16
 3304              		@ frame_needed = 1, uses_anonymous_args = 0
 3305              		@ link register save eliminated.
 3306 0000 80B4     		push	{r7}
 3307              	.LCFI143:
 3308              		.cfi_def_cfa_offset 4
 3309              		.cfi_offset 7, -4
 3310 0002 85B0     		sub	sp, sp, #20
 3311              	.LCFI144:
 3312              		.cfi_def_cfa_offset 24
 3313 0004 00AF     		add	r7, sp, #0
 3314              	.LCFI145:
 3315              		.cfi_def_cfa_register 7
 3316 0006 7860     		str	r0, [r7, #4]
2328:../../../FreeRTOS_9_0/Source/queue.c **** 	UBaseType_t ux;
2329:../../../FreeRTOS_9_0/Source/queue.c **** 
2330:../../../FreeRTOS_9_0/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:../../../FreeRTOS_9_0/Source/queue.c **** 		registry. */
2332:../../../FreeRTOS_9_0/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3317              		.loc 1 2332 0
 3318 0008 0023     		movs	r3, #0
 3319 000a FB60     		str	r3, [r7, #12]
 3320 000c 16E0     		b	.L228
 3321              	.L231:
2333:../../../FreeRTOS_9_0/Source/queue.c **** 		{
2334:../../../FreeRTOS_9_0/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3322              		.loc 1 2334 0
 3323 000e 0F4A     		ldr	r2, .L232
 3324 0010 FB68     		ldr	r3, [r7, #12]
 3325 0012 DB00     		lsls	r3, r3, #3
 3326 0014 1344     		add	r3, r3, r2
 3327 0016 5A68     		ldr	r2, [r3, #4]
 3328 0018 7B68     		ldr	r3, [r7, #4]
 3329 001a 9A42     		cmp	r2, r3
 3330 001c 0BD1     		bne	.L229
2335:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2336:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:../../../FreeRTOS_9_0/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3331              		.loc 1 2337 0
 3332 001e 0B4A     		ldr	r2, .L232
 3333 0020 FB68     		ldr	r3, [r7, #12]
 3334 0022 0021     		movs	r1, #0
 3335 0024 42F83310 		str	r1, [r2, r3, lsl #3]
2338:../../../FreeRTOS_9_0/Source/queue.c **** 
2339:../../../FreeRTOS_9_0/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:../../../FreeRTOS_9_0/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:../../../FreeRTOS_9_0/Source/queue.c **** 				added again. */
2342:../../../FreeRTOS_9_0/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3336              		.loc 1 2342 0
 3337 0028 084A     		ldr	r2, .L232
 3338 002a FB68     		ldr	r3, [r7, #12]
 3339 002c DB00     		lsls	r3, r3, #3
 3340 002e 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccHyCAGW.s 			page 105


 3341 0030 0022     		movs	r2, #0
 3342 0032 5A60     		str	r2, [r3, #4]
2343:../../../FreeRTOS_9_0/Source/queue.c **** 				break;
 3343              		.loc 1 2343 0
 3344 0034 05E0     		b	.L227
 3345              	.L229:
2332:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3346              		.loc 1 2332 0 discriminator 2
 3347 0036 FB68     		ldr	r3, [r7, #12]
 3348 0038 0133     		adds	r3, r3, #1
 3349 003a FB60     		str	r3, [r7, #12]
 3350              	.L228:
2332:../../../FreeRTOS_9_0/Source/queue.c **** 		{
 3351              		.loc 1 2332 0 is_stmt 0 discriminator 1
 3352 003c FB68     		ldr	r3, [r7, #12]
 3353 003e 072B     		cmp	r3, #7
 3354 0040 E5D9     		bls	.L231
 3355              	.L227:
2344:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2345:../../../FreeRTOS_9_0/Source/queue.c **** 			else
2346:../../../FreeRTOS_9_0/Source/queue.c **** 			{
2347:../../../FreeRTOS_9_0/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2348:../../../FreeRTOS_9_0/Source/queue.c **** 			}
2349:../../../FreeRTOS_9_0/Source/queue.c **** 		}
2350:../../../FreeRTOS_9_0/Source/queue.c **** 
2351:../../../FreeRTOS_9_0/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3356              		.loc 1 2351 0 is_stmt 1
 3357 0042 1437     		adds	r7, r7, #20
 3358              	.LCFI146:
 3359              		.cfi_def_cfa_offset 4
 3360 0044 BD46     		mov	sp, r7
 3361              	.LCFI147:
 3362              		.cfi_def_cfa_register 13
 3363              		@ sp needed
 3364 0046 5DF8047B 		ldr	r7, [sp], #4
 3365              	.LCFI148:
 3366              		.cfi_restore 7
 3367              		.cfi_def_cfa_offset 0
 3368 004a 7047     		bx	lr
 3369              	.L233:
 3370              		.align	2
 3371              	.L232:
 3372 004c 00000000 		.word	xQueueRegistry
 3373              		.cfi_endproc
 3374              	.LFE32:
 3376              		.text
 3377              	.Letext0:
 3378              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 3379              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3380              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3381              		.file 6 "../../../FreeRTOS_9_0/Source/include/list.h"
 3382              		.file 7 "../../../FreeRTOS_9_0/Source/include/task.h"
 3383              		.file 8 "../../../FreeRTOS_9_0/Source/include/queue.h"
ARM GAS  /tmp/ccHyCAGW.s 			page 106


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/ccHyCAGW.s:22     .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccHyCAGW.s:27     .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccHyCAGW.s:173    .text.xQueueGenericReset:00000000000000cc $d
     /tmp/ccHyCAGW.s:178    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccHyCAGW.s:183    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccHyCAGW.s:286    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccHyCAGW.s:282    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccHyCAGW.s:351    .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccHyCAGW.s:355    .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccHyCAGW.s:469    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccHyCAGW.s:409    .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccHyCAGW.s:414    .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccHyCAGW.s:464    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccHyCAGW.s:2501   .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccHyCAGW.s:2996   .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccHyCAGW.s:2730   .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccHyCAGW.s:828    .text.xQueueGenericSend:00000000000001f8 $d
     /tmp/ccHyCAGW.s:833    .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccHyCAGW.s:838    .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccHyCAGW.s:1078   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccHyCAGW.s:1083   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccHyCAGW.s:1306   .text.xQueueGenericReceive:0000000000000000 $t
     /tmp/ccHyCAGW.s:1311   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
     /tmp/ccHyCAGW.s:2658   .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccHyCAGW.s:2861   .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccHyCAGW.s:1686   .text.xQueueGenericReceive:0000000000000228 $d
     /tmp/ccHyCAGW.s:1691   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccHyCAGW.s:1696   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccHyCAGW.s:1898   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccHyCAGW.s:1903   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccHyCAGW.s:2084   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccHyCAGW.s:2089   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccHyCAGW.s:2153   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccHyCAGW.s:2158   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccHyCAGW.s:2228   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccHyCAGW.s:2233   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccHyCAGW.s:2297   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccHyCAGW.s:2302   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/ccHyCAGW.s:3299   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccHyCAGW.s:2364   .text.uxQueueGetQueueNumber:0000000000000000 $t
     /tmp/ccHyCAGW.s:2369   .text.uxQueueGetQueueNumber:0000000000000000 uxQueueGetQueueNumber
     /tmp/ccHyCAGW.s:2408   .text.vQueueSetQueueNumber:0000000000000000 $t
     /tmp/ccHyCAGW.s:2413   .text.vQueueSetQueueNumber:0000000000000000 vQueueSetQueueNumber
     /tmp/ccHyCAGW.s:2453   .text.ucQueueGetQueueType:0000000000000000 $t
     /tmp/ccHyCAGW.s:2458   .text.ucQueueGetQueueType:0000000000000000 ucQueueGetQueueType
     /tmp/ccHyCAGW.s:2497   .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccHyCAGW.s:2654   .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccHyCAGW.s:2726   .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccHyCAGW.s:2857   .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccHyCAGW.s:2913   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccHyCAGW.s:2918   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccHyCAGW.s:2992   .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccHyCAGW.s:3050   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccHyCAGW.s:3055   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
ARM GAS  /tmp/ccHyCAGW.s 			page 107


     /tmp/ccHyCAGW.s:3131   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccHyCAGW.s:3136   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/ccHyCAGW.s:3207   .text.vQueueAddToRegistry:000000000000004c $d
     /tmp/ccHyCAGW.s:3212   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccHyCAGW.s:3217   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccHyCAGW.s:3289   .text.pcQueueGetName:0000000000000048 $d
     /tmp/ccHyCAGW.s:3294   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccHyCAGW.s:3372   .text.vQueueUnregisterQueue:000000000000004c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
